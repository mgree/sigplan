a galois connection calculus for abstract interpretation cousot usa abstract we introduce a galois connection calculus for language independent specification of abstract interpretations used in programming language semantics formal verification and static analysis this galois connection calculus and its type system are typed by abstract interpretation categories and subject descriptors d verification general terms algorithms languages reliability security theory verification keywords abstract interpretation galois connection static analysis verification galois connections in abstract interpretation in abstract interpretation concrete properties for example eg of computations are related to abstract properties eg types the abstract properties are always sound approximations of the con properties abstract analyzes are always correct in the concrete and are sometimes complete of abstract properties can all be done in the abstract only eg types are sound but incomplete while abstract semantics are usually complete the concrete domain hc vi and abstract domain ha i of properties are posets partial orders being interpreted as implication when concrete properties all have a most precise abstraction the correspondence is a galois connection gc hc vi ha i with abstraction c a and concretization a c satisfying p c q a x y x v y expresses soundness and best abstraction each adjoint uniquely determines the other a galois or insertion has onto so is and is the identity eg the interval abstraction of the power set c of complete totally ordered sets c is i i k hc i fi with i ix min x max x min max ia b x c a x b intervals k a b a c b c a b and inclusion a b f c d c a b d a galois hc and local y hml m h mi i p y hl m i with h mi m q and is the pointwise extension of inclusion equivalent of abstract tation hc vi to numerous as maps maps upper closures moore families q q a ¬ q q a where ¬ is unique tation in the concrete domain c if any principal families v q q a where vx y c y v x maximal convex p c p q q a soundness relations also called abstraction relation logical rela tion or tensor product hp qi p q hp qi p v q v where f hx f xi x r r hx zi y hx yi r hy zi r and for c c a a of relations q x c y q rx y where r hx yi x y is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for third party components of this work must be for all other uses the popl january ­ san diego ca usa copyright is held by the acm cousot france basic gc semantics basic are primitive abstractions of hc i the sequence abstraction s jc k hc i hc i with p i p i dom and q c i dom i q the transformer abstraction sj c ck i hc c transformers with to x hx yi r g hx yi y gx the function abstraction sj c ck hc c i hc c i with p x f x f p x x g f c c x c x x f x gx the cartesian hi c abstraction ck hi i with x i i x c i c f i c f i x x y f i i f i y i and the pointwise extension of to i etc galois semantics galois build a gc from provided as parameters unary galois in the reduction vi ha ik hc vi tor hp p c i and the pointwise hc vi ha ik hx c v i hx a i for the pointwise orderings v and binary ga i i g f ha g f vi z hc i ha a i ha for ik hc increasing maps c and pointwise orderings v and galois connection calculus the gc calculus g to specify is x x for program variables l for labels e e for elements e true x e s s for sets s b z x l e e e is o s s s s s s s s o o for partial orders o f o o o o p p for posets p hs oi and g g for g p p e ip e e ys s s s s s s s s s rg s g g g g g g z g the semantics of interval sets is k c c a b a b c where is a dynamic error maybe not by typing abstraction papers in semantics verification and static analysis can be understood by extracting the semantic domain and gc which are used for the interval example p the semantic domain s is that of nonempty sets of nonempty finite or infinite sequences of states in l m made of a control state in l and a memory state in m x v mapping variables x to a complete total order hv i eg i or i the static or collecting semantics is the reachability abstraction of program properties in s that is g yl m with abstract domain hl m i the reduced interval cartesian ity abstraction is g rg l x v x i that is the abstraction hl x v i p and smash some ax bx x is typing as usual with syntactic definitions gc expression semantics may be undefined ie or this can be fixed for by a type system that is an abstract interpretation of the properties gc of the semantics gc of expressions g g belong ing to the class gc hc vi ha i c a are sets v c c a a typing is formalized t by a gc i t ht pi where the preorder on types is considered t up p to t the tt so that types for this preorder p when t is injective in absence of a precise ie principal type hence of a best abstraction t as eg in for the poly abstraction only one of or is used a gc expres sion g g has sound types t t such that tt ie tt or for the soundness rela tion t s tt for this is equivalent to p t where is the strongest property col semantics of g and is the best abstraction of g the type soundness proof is by induction on the structure of the gc expressions as in instead of operational subject reduction ie induction on program computation steps types for elements e e e var lab bool int err with z se for sets s s s p e p s seq s s s s s err with sp e ee sp s ss s x x ss ss s x y x ss y ss ss s x y x ss y ss ss for partial orders o o o o oo o err with oo o o etc for posets p p p s o err with concretization ps o ss oo for t t t p p s t err with tp p p p p pp p pp and ts t hx c v i hx a i x ss hc vi ha i tt type inference the type inference algorithm is bool ej ek bool int err for sets p bool err p err sk err err err note the approximation that s and s must have equivalent types as for alternatives of conditionals in functional languages ignoring error propagation seq sk sk p for orders and posets o o and for p p p p p p p seq p tj s sk p p p tj s sk p p p sk p p gk examples of type errors are ek err s s o o s o s err or oi b tk err err err p p err where abstracts set membership of elements to the abstracted set this functional presentation is equivalent to a sys tem eg g p p g p p pp gg p p where err is not able g s o s o for le sk s p g s o s o ss o o id for p lab p var p int p lab p var p p int ¨ ie sets of sets of sequences of states are abstracted to a map of labels to variables to sets of integers which includes intervals ordered pointwise type soundness typable expressions g g for which err cannot go wrong since then and however dynamic errors cannot be eg int does not prevent principal type arbitrary concrete properties in gc may have no best abstraction eg so we add the empty type yet by considering only semantic properties p i of gc expressions when i the principal type is t tp t else tp t err so t p g g of types i t ht pi t onto types t e s o p t have properties can be abstracted to types of types t e s o p t err by tp p p t t t t err static in static specify abstract domains modules and galois their tions by functors for scalability convergence acceleration of infinite fixpoint computations by abstracting induction andor their for coinduction ­ is effective and more precise than finite abstractions acknowledgments we thank the acm sigplan for us the programming languages and the programming languages community for its support references b p cousot r cousot j l a d and x a static analyzer for large software pldi ­ p cousot types as abstract interpretations popl ­ p cousot and r cousot static determination of dynamic properties of programs proc nd int symp on programming ­ paris p cousot and r cousot abstract interpretation a unified lattice model for static analysis of programs by construction or approximation of fixpoints popl ­ p cousot and r cousot static determination of dynamic properties of recursive procedures ifip conf on formal description of programming concepts nb cn ­ northholland co p cousot and r cousot systematic design of program analysis frameworks popl ­ p cousot and r cousot abstract interpretation frameworks j logic and comp ­ p cousot and r cousot comparing the galois connection and approaches to abstract interpretation lncs ­ p cousot and r cousot inductive definitions semantics and abstract interpretation popl ­ p cousot and r cousot temporal abstract interpretation popl ­ p cousot and r cousot systematic design of program transformation frameworks by abstract interpretation popl ­ p cousot and r cousot an abstract framework for software watermarking popl ­ p cousot and r cousot an abstract interpretation framework for termination popl ­ p cousot r cousot and f a parametric segmentation functor for fully automatic and scalable array content analysis popl ­ p cousot and n automatic discovery of linear among variables of a program popl ­ 