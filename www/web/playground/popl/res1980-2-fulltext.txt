a highlevel approach to computer document k computer science department university pittsburgh pa f introduction the very best system is a good he can be given text in no particular format and without further instruction produce a finished document nevertheless we believe that document should be done by computers because so much of it is the that computers handle so well existing computer document programs have met with some success indeed most computer systems offer some sort of text capability these programs are often difficult to use and are almost to a particular kind of device the language was designed to provide a simple portable language in which document could be specified the compiler was written to process that language into finished documents in following sections we describe the design goals the implementation and report on experience with the completed system prior work typical text processing programs such as tq script text etc require the user to provide them with an input stream that consists of a of text and commands the commands give permission to copy without fee all or part of or not bear to to a computing machinery to copy © requires a fee and or specific permission detailed instructions to the program about how the text is to be out on the page these commands are normally lowlevel requirements in the domain of the finished document this by or change to sometimes programs use the compiler paradigm text and commands are placed together in a file which is then compiled to produce the output alternatively as in the editor paradigm is used the commands are not stored in the file that is under edit but are executed immediately as they are entered each paradigm has its and systems have the problem that the user has difficulty the effect that his commands will have on the format especially if he is with either the program or the device interactive do not preserve the original commands that the format so that if is necessary no systematic change to the themselves is possible in both cases the of quality and consistency on the user he careful to be consistent in his use of and the like and he must avoid using combinations that will yield or results after several years of use and observation of various document preparation software we decided to create a new system called ideas that had been generated from experience with these systems although the thought of an interactive was we the compiler paradigm because it would be easier to the success or failure of the product acm in comparison with existing programs and because we had no access to interactive terminals that were comparable in quality to our devices design strategy in designing a better document system it us to look at the best such system a good to learn what we can and what we can the author provides text to the who the text into its components and makes some decisions about the nature and required format of the document the then selects an appropriate format and performs the necessary typing note well what is not from author to any information about indentation and so on all such details are provided by the and in fact they differ from one format to the next even if the text is the same a letter and an internal typed from the same text would have greatly since our requirements suggest that the author should not be permitted to specify lowlevel detail and since we know of at least one successful document system our in which the author does not specify such details we choose to restrict the specification language so that the author cannot specify such details but those details are necessary to produce the final document so some equivalent must be provided our goal is to put the in the program in much the same style as puts into the program the program will have access to a data base of knowledge that it uses to achieve quality we shall require that each document produced by be of a specific declared document type for example a letter or a technical report or a journal article each document type will have variant forms a a journal article in acm proceedings format from its database the definitions appropriate to produce that document type on the intended device document type definitions are created by a format designer a person with and knowledge of the format requirements of different documents they are not usually created by an author design of a new we a set of requirements some made of the system as a whole and some made of the specification language then formulated a design to try to meet those requirements system requirements the design of the language and its compiler was by a number of specific requirements for the character of the resulting system in this and following sections we use the term manuscript to describe text by the user for input to the compiler and document for the result produced by compiling that manuscript file device manuscript tiles should be independent of any particular device the document specification language should therefore contain no constructs that will permit a user to put device dependencies in his file since the format of the document must vary from one device to another this implies that the compiler must be able to supply the details site the manuscript form of a document should contain nothing that implicitly restricts it to a particular which is to say that explicit file names and directory names and other local system names should not appear in the manuscript tile where the manuscript must refer to the file system it should be through indirect symbolic names and not direct tile names separation of content and format the text should contain no explicit instructions in order that it may be reused in a different format or context since the explicit must occur before paper output can be produced the compiler must be able to supply the details a corollary to this requirement is that the author should supply only the text and a person more in should provide the detail obviously a cannot edit every manuscript tile or provide the information explicitly each time which means that there must be a mechanism for storing and using knowledge incremental change given that the format of a document is determined not by commands placed in the manuscript file but by the contents of a database it should be possible to specify systematic changes to that format by placing suitable modification commands at the beginning of a manuscript file those modification commands must be incremental the user need specify only those properties that he wants to change rather than the entire definition we will restrict all modification commands to the beginning of a manuscript file to make it easier to remove them for purposes of reuse and restricted goals problems whose solution is too or whose specification is not possible in the specification language will be declared to be beyond the scope of the system and no attempt will be made to provide for them we want to maintain the conceptual purity of the system at the of completeness to make it easier to evaluate the finished product specification language requirements rather than the parts of a manuscript file as commands to the program we view them as statements in a highlevel document specification language the author the effect desired strictly and leaves to the compiler the details of how to achieve that effect within the constraints of the selected device and document type certain requirements were placed on the language design of text from specification the major syntactic requirement of this specification language is that it not be with the text or interfere with it in any way there should never be any ambiguity as to whether a particular is text if multiple were available we could mark the commands in much as a does when a if multiple were available we could place all commands in some special such as script representation in we intend to use the manuscript form of the document as the communications form which is transmitted to another site we therefore require that a manuscript file with text and specifications present in it be representable using only the characters not a programming language the language in which an author his needs about the format of his document is not to be a programming language procedural does not come easily to people and the system should be able to handle most of the requirements of an user with simple specifications the document specification language command language a is an stream of characters it contains an interleaved of text and statements that specify desired properties of the final format of that text although these statements in the specification language are not commands in the ordinary sense of the word they do not directly command anything we shall nevertheless call them commands as a matter of convenience the w character was chosen as the to appear in text to flag the of commands it is and is used in normal mathematical text or program text each instance of an character denotes the beginning of a command to get an character in text two are used in the manuscript file every command has one of these forms c set a single character name and text list of keywords and values if the text or list of keywords and values is empty it may be along with its provided that there is no ambiguity name although parentheses are used in the description of the commands any of pairs described below can be used some sample commands of contents section the compiler style references cacm each command has a name and most apply to a specific delimited piece of text the text may be delimited in a form a program is a some machine organization or in an abbreviated form program is a some machine organization any pair from the set and may be used and the may be nested freely semantically most statements in the specification language are labels marking text in specific environments each environment places certain requirements on the of its text in the final document without giving specific details for example an environment i requests that its text be set in an appropriate to the surrounding text or be if there is no such a environment suitable for displayed requests that its text be set in a manner material which in most document designs means that the left and right are and the line is made closer together a program is a for solving a problem without regard to the details of how it is solved that is solutions should be specified implicitly in terms of structures or abstractions which are relevant to the problem rather than those operations data and control structures that are convenient for some machine organization there are about a scalar variables whose values together define the state and therefore the details of the resulting format each environment is a partial specification of the state vector the environment doesnt affect the state cells that determine and the environment doesnt normally affect the type face in used so that and are orthogonal and however both specify different values for the same state variable when environments are nested the unspecified properties are simply inherited from the surrounding environment some environments such as chapter specify almost everything a particular size and so others such as specify almost nothing leaving everything but the face code attribute to be inherited it is meaningful to specify a theorem inside a or a inside a theorem though it is up to the document type designer to ensure that both are reasonably a few actual commands exist in the document specification language they correspond roughly to declarations in a programming language for example the device command declares the device and the command declares a page to be used from that point on the compiler a compiler has been written in for a it manuscript files into finished documents each manuscript tiles contains a possibly implicit specification of a device type line etc and a document type letter thesis journal article etc the compiler loads from its database the definition of the device and the definition of the document format then processes the manuscript file accordingly the essence of the compiler is its mechanism whenever an environment transition occurs entry or exit the state changes are examined to see if they imply some sort of nontrivial processing if so the processing is performed for example if an environment entry is found to contain a request to use a large on the then the appropriate lens code will be generated when that environment is and the containing environment is another code will be generated to position it back again an environment definition can specify for each cell in the state vector an absolute value set the left to one a relative value the left by three or no value at all dont touch the left the environment is represented internally as a list of variable value pairs and at the lowest level the code just iterates over that list making the appropriate changes to a copy of the old state vector the kind of change to be made is represented by the type of the value in the compiler the modification facility required in section is implemented by providing a mechanism to edit these lists although the compiler is strictly it provides a full cross reference capability by means of an auxiliary file that is generated as a of the compilation the auxiliary file is essentially an extract of the symbol table each time a manuscript file is processed the compiler checks for the presence of an auxiliary tile left behind by the previous compilation the auxiliary file contains all of the label definitions from the previous compilation and usually they changed much if the compiler that a definition of a label has changed and hence the value used in a cross reference was wrong it will print a message if the manuscript file is without change the cross references will all be correct the database each time the compiler processes a manuscript file it from its data base the information defining the relevant device properties text formats numbering schemes and so the contents of each database entry is just a sequence of commands they are and in every compiler run the device files in the database provide device parameters paper size size resolution etc and also provide implementations of the standard basic environments for example the environment is implemented separately in each device tile the device tile for the line implements by it into the device file for a implements by changing the code the document files in the database provide environment format definitions for various document types each file is partitioned into segments each segment defines that format for a particular device or group of devices environment definitions do not necessarily occur in all document is no need for a return address environment in a thesis or a table of contents in a letter but careful attention is to making the names of environments that are conceptually similar be the same from one document type to another format files in the database define the formats that are required by various the family files define various combinations that have been selected by designers to look when used together the character width files define individual width and values for specific we intend that the database files be created and maintained by with a higher level of than that required simply to use the system the device definition files are by people with a relatively sophisticated knowledge of the of the compiler and the document type tiles are intended to be created by with although the initial document type designs were all created by the compiler writer as a writer although its job is to format a document the system is strongly oriented towards providing support to writers while a document is under construction the name writers is from the programmers many of these writers tools are made possible or made simpler because of the highlevel nature of the specification language the compiler will automatically generate numbers for pages theorems examples or what have you one of the attributes that an environment may specify is numbering style which includes a specification of how to number how and when to increment the number and how to display the number in the users text the mechanism allows references to be made to generated numbers by binding symbolic names to them and all cross references are specified in terms of those symbolic identifier names the compiler will print out in sort by manuscript position and also by identifier name of the location of the symbolic labels their values and the references made to them portions of a document that are essentially table of contents table of be generated automatically they are generated as manuscript files and then read back in as if they were part of the original document the document may be divided into a tree structure of when a compilation is from the root the complete document is produced because of the existence of the auxiliary tile see section it is possible to compile any subtree or leaf file separately and have all of the numbering and cross come out right when a compilation is the compiler refers to the auxiliary file in which it has saved enough information to enable it to restore its state to what it would have been had the compiler reached the same at the end of a compilation the auxiliary file is updated as necessary experience and conclusions the compiler has been operational at since february were available by and the system was fairly stable by early fall it is now at use at a number of other as a production software system it has been an success lt k worth fairly simple noting that the representation pairs rather than as macros of environments as makes this process which to a certain extent our ability to learn about the success or failure of the ideas that were the essence of the research the specification language has turned out to be it is to move files from one site to another and them without the goal of device independence has been met well enough that people make proof copies of a document on one device and the final copy on another people who have never used any device but a line and never seen a can change the device command in their manuscript files and produce output the language is simple enough that people with no programming background can learn it in a few of instruction yet powerful enough that an page with fairly requirements has been with a class in computer tools for is now at the learn in the first few of class and use it for class assignments the goal of separation of content and format was met well enough that we were able to produce thk years edition of our annual research review by merging the five papers as by the authors with various tabular material changing the document type and producing a copy none of the papers contained any commands or environments that required any change before the five papers could be merged into a single journal failures the quality of especially page layout figure placement and elimination is not good this could be improved by writing a better compiler there seems to be nothing to the n a is the last or first line of a that by at the beginning or end of a page specification language that limits quality has demonstrated that can be obtained from text we would like not to require as high a ratio of commands to text as does the original specification language design did not include any facility for tabular material or mathematics and it has proved difficult to add them after the fact because it would require incompatible changes to the existing syntax to accommodate the extended specification language it is not clear or not the essential notions of abstract specification can be extended to mathematical text it is quite certain that they can be extended to tabular material the and systems for demonstrate the feasibility of such a scheme but neither system is entirely portable or complete the separation of content and format has made it difficult for users to errors or in the compiler the compiler needs to be fairly well which it often for it to be usable at all the flexibility of the system a for those who understand it made it a to document almost no statement about the behavior of the compiler or the semantics of an environment can be universally true because the definition of almost anything can be changed this sort of flexibility needs to be in an interactive program having an extensive help facility in order that a user can find out not what an environment might do but what it will do the flexibility has the characteristic that users and users have no the users who are enough to know how to change a definition often dont understand the full nature of the change they are making and become very by the results the compiler is relatively slow it processes only about to output pages per of cpu time on a dec kl although this is an order of magnitude slower than simpler conventional programs like the total amount of cpu time during the course of developing a document is often less because the tile need not be compiled as often future work we are certain that the overall approach that the design of the system is sound but the compiler and database have to be fairly complex future efforts should be more interactive should be more closely to the editor and tile system and should provide a more complete specification language before a user community with proper of file system editor and display device and with careful design of the manuscript tile specification language it should be possible to design an interactive system that can maintain a display of the finished document while actually storing the commands that were used to generate that display acknowledgements and david inspired the project and performed the studies that made us believe it was feasible paul has to maintain the conceptual purity of the specification language in the face of of users was the user of the compiler and craig david bruce paul philip james rich and all the implementation in various ways provided a in which to test many ideas before beginning an implementation walker made the users manual readable and finite a thanks to the whole computer science community at who with a changing system for two years as i it out from under them references m v t van p and t users manual department of computer science university of bc vt w l the programmers a machine for software development comm acm october w and l a system for mathematics comm acm march knuth e a system for technical text tech aim stanford university november manual xerox corporation palo alto ca m and e an overview of languages proceedings of a symposium on very high level languages april published as volume number of sigplan notices j f users manual tech bell k users manual computer science department e users guide tech cn university of april the document compiler tech on stanford university intelligence project september t beyond programming languages comm acm july ff w m p and l fundamental structures of computer science addisonwesley 