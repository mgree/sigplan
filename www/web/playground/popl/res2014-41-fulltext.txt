a parametric model of dependent type theory robert university of state university abstract reynolds theory of relational parametricity captures the invariance of typed programs under change of data representation reynolds original work exploited the typing discipline of the typed calculus system f but there is now considerable interest in extending relational parametricity to type systems that are richer and more expressive than that of system f this paper constructs parametric models of predicative and impredicative dependent type theory the of our models is in the impredicative variant we are able to deduce the existence of initial algebras for all indexed functors to our knowledge ours is the first account of parametricity for dependent types that is able to lift the useful deduction of the existence of initial algebras in parametric models of system f to the dependently typed setting secondly our models offer conceptual clarity by uniformly expressing relational parametricity for dependent types in terms of reflexive graphs which allows us to unify the interpretations of types and kinds instead of taking the relational interpretation of types as a primitive notion expressing our model in terms of reflexive graphs ensures that it has canonical choices for the interpretations of the standard type constructors of dependent type theory except for the interpretation of the universe of small types where we formulate a refined interpretation for relational parametricity moreover our reflexive graph model the to of relational parametricity for example to relational parametricity categories and subject descriptors d programming languages formal definitions and theory d programming techniques applicative functional programming general terms languages theory types keywords relational parametricity dependent type theory introduction reynolds theory of relational parametricity captures the invariance of typed programs under change of data representation relational parametricity has been shown to yield a wide range of useful and surprising consequences including free theorems data type representations optimisation of recursive programs and geometric invariance properties reynolds permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for components of this work owned by others than the authors must be abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission andor a fee request permissions from popl january ­ san diego ca usa copyright is held by the publication to acm acm original work exploited the typing discipline of the typed calculus system f but there is now considerable interest in extending relational parametricity to type systems that are richer and more expressive than that of system f relational parametricity for systems with typelevel computation of which system f is the example has been studied by and weirich and by the latter builds on earlier work by who gives general requirements a model must satisfy in order to interpret system f the extra expressive power of system f allows for church encodings of indexed types for example the standard example of a generalised algebraic datatype gadt for typed expressions containing constants and pairing can be represented by the following system f type × relational parametricity can be used to show that this type an property showing that it is isomorphic to the normal gadt of typed expressions by introducing a kind of natural numbers it is also possible to encode in system f interesting indexed types like vectors however due to the separation of types and terms in system f typelevel and are not the same thing which leads to duplication and loss of expressivity dependent type theories weaken the distinction between types and terms allowing terms to appear in types it is therefore natural to ask whether or not relational parametricity extends to systems with type dependency and whether or not the consequences of relational parametricity generalised carry over as well in this paper we answer both these questions in the we build a model of dependent type theory in predicative and impredicative variants that naturally extends reynolds original parametric model we also show that within the impredicative model every indexed functor f has an initial algebra given by the dependently typed church encoding x x a x u x ax ta x the symbol u stands for the universe of small types and t transforms a small type into a proper type we define the syntax of dependent types in section to our knowledge the model we present in this paper is the first parametric model syntactic or semantic of dependent type theory to establish this key theorem the question of the existence of parametric models of dependent type theory has already been established as relevant for applications assumes relational parametricity for representing higherorder abstract syntax and et al assumes properties of type abstraction for enforcing security properties in this paper we demonstrate that parametric models of dependent type theory do exist though we leave questions about potential applications to future work approaches to understanding relational parametricity since reynolds original formulation relational has been studied in a number of settings reynolds original model was by et al who also moved to a interpretation of types to handle foundational settheoretic problems caused by with reynolds original formulation and studied reynolds model from the point of view of internal categories again to work around foundational problems with the semantics of more for us and reynolds original model in terms of reflexive graphs reflexive graphs capture the essence of parametric models types are simultaneously interpreted as sets and as relations between sets with a distinguished reflexive relation called the equality relation from any set to itself and open types are interpreted as morphisms between reflexive graphs the model of dependent type theory that we construct in this paper is built on the category of reflexive graphs and reflexive graph morphisms that and used to interpret the types of system f reflexive graph models of parametricity have also appeared implicitly in the work of and explicitly in the work of and both in settings without type dependency other approaches to understanding parametricity include pitts operational models of programming languages with polymorphic types and recursion plotkin and logic for parametricity and translation of system f into secondorder predicate logic the study of relational parametricity for systems with dependent types with and has recently been taken up by et al and and dreyer both and et al study relational parametricity for dependent types via syntactic translations from one type theory to another and dreyer construct a realizability model of the calculus of constructions using to simultaneously define the underlying and relational interpretations of types they demonstrate the adequacy of the church encoding of the initial algebra representing the natural numbers but do not mention the church encodings of indexed initial algebras that we consider in this paper the distinguishing feature of the parametric model of dependent types developed in this paper is that we follow and in taking the interpretation of types as reflexive graphs as primitive rather than explicitly a relational interpretation of dependent types as was done in the work of et al and and dreyer in order to capture relational parametricity our model the universe u of small types in terms of sets and relations so that we recover a relational interpretation of types within the setting of reflexive graphs section by taking reflexive graphs as primitive we can offer the following two significant contributions · at a results level as we have mentioned above we are able to show that the impredicative variant of our reflexive graph model contains initial algebras for all indexed functors section the reflexive property of reflexive graphs plays a crucial role in the proof being the appropriate of the key identity extension property of parametric models of system f our models for both the predicative and impredicative variants also validate free theorems about polymorphic terms section in the style of wadler · at a conceptual level reflexive graphs offer both canonical choices when building parametric models and insight into the structure of relational parametricity and used reflexive graphs to bring clarity to parametric models of system f and here we use reflexive graphs to bring clarity to parametric models of dependent type theory since reflexive graph models are models we are provided with canonical choices of much of the structure of dependent types for example there is a canonical choice of interpretation of types up to isomorphism for the interpretation of the universe of small types there is no canonical choice the obvious choice is to capture a semantic notion of using a construction due to hofmann and however we demonstrate that by itself is for relational parametricity and we identify two further semantic properties and that must be captured by our interpretation of a universe of small types section structure of the paper · in section we trace a path from the original parametric model of reynolds with its explicit use of relations through to the reflexive graph formulation of parametricity originally due to and and separately since most of relational parametricity for system f are explicitly formulated in terms of relations eg theorems for free we carefully demonstrate that at the level of system f the relational and reflexive graph are equivalent this gives us the necessary foundation on which to build a parametric model of dependent types · section necessary syntactic and semantic background we set out the precise variants of type theory predicative and impredicative that we will model we also recall the definition of categories with families a sound and complete class of categorical models of dependent type theory · we construct our parametric models of dependent types in section by showing that the category of reflexive graphs forms a the key feature of our models apart from our use of reflexive graphs is in our interpretation of the universe u of small types we examine the necessary features that the interpretation of u must capture namely and and build them into the model · with our parametric models in hand we demonstrate several consequences of it in section we show that our model supports simple free theorems as well as the construction of initial algebras for arbitrary indexed functors · section concludes and offers directions for future work relational parametricity and reflexive graphs in this section we introduce the semantic structures used to construct our parametric model of dependent types to this end we first recall in section the direct method for building parametric models of system f as originally proposed by reynolds and by et al we then show in section how to this model in terms of reflexive graphs following and any model of system f or any extension of it must the issue of modelling impredicative type quantification reynolds showed that classical settheoretic models of impredicative polymorphism cannot exist to overcome this problem we build our models of impredicative type theories in an impredicative metatheory specifically we use the calculus of inductive constructions with the predicative type universe hierarchy an impredicative universe set a disjoint impredicative universe prop and axioms for functional and proof and propositional in prop this theory is implemented in the coq proof assistant with the option and the three axioms we work informally within this metatheory using settheoretic notation by taking this approach we can with the of constructing a model within a b ab a a figure types in system f classical set theory using pers or internal categories a fully parametric model of system f has been constructed in this setting by relational models of parametricity for system f the types of system f are shown in figure by these rules types are either type variables function types or universally quantified types contexts are lists of type pairs that do not contain duplicate type variable names in system f there is only the base kind of types interpretation of types in the model presented by et al each type a is assigned two interpretations an underlying interpretation a o that a type as a function on the universe u of small sets and a relational interpretation a r that a type as a transformer of relations between underlying interpretations if for any two sets x y u y denotes the set of binary relations between x and y and if stands for the number of members of then the underlying interpretation and the relational interpretation of a have the following types a o u u a r u rel rel a o a o the underlying interpretation and the relational interpretation of a are explicitly linked by the of the underlying interpretation in the type of the relational interpretation the two interpretations are also linked by the identity extension property which states that the relational interpretation of any type a preserves equality u a r eq eq a o here is the equality relation on the set x and eq for a tuple of sets x x is the tuple identity extension is the key property that makes a model parametric rather than just logical relations over an existing model we can read it as saying that every element of the interpretation of a closed type is related to itself by the relational interpretation of that type therefore identity extension is similar to the abstraction theorem see interpretation of terms at the end of this subsection except that it applies to all elements of the denotation of a type not just the denotations of terms consequently we are able to use the relational interpretation of types to reason about arbitrary elements of the denotations of those types not just elements that are the interpretations of terms as we shall see when we construct the interpretation of the typetheoretic universe of small types in section below our model of dependent types will satisfy the generalised identity extension property for this universe identity extension is essential in our proof of the existence of initial algebras in section a consequence of requiring identity extension is that the underlying interpretation and the relational interpretation must be defined simultaneously this is due to the interpretation of types of the form a indeed if we do not cut down the underlying interpretations of universal types to include only the parametric elements then we will be unable to prove the identity extension property this down is shown in et als definitions of the underlying interpretations and relational interpretations for universal types here adapted to our setting a o x x u a o x x y r y x x x y a r x y eq r a r x y x y r y x x y y a r x y r we will refer back to this definition when we construct the interpretation of dependent products types in our parametric model of dependent types in section interpretation of terms a welltyped term of system f is determined by the typing judgement m a where is a context is a typing context consisting of variable pairs xi ai where each ai is with respect to and a is also with respect to we write to indicate when all the types in the typing context are with respect to the context we omit the entirely standard typing rules that generate the judgement m a the interpretation of types that we sketched above is extended to an interpretation of typing contexts by together the interpretations of the constituent types and using the standard logical relations interpretation of product types each welltyped term m a is interpreted as a family m a o of functions from the underlying interpretation of the typing context to the underlying interpretation of the type a indexed by the underlying interpretations of the free type variables m a o u o a o because the underlying interpretations and relational interpretations of types are mutually defined we must simultaneously define m a o and prove the following property which states that the relational interpretations of and a are preserved u rel o o r m a o a r m a o this preservation of relations property has been called reynolds abstraction theorem the fundamental theorem of logical relations and the parametricity theorem reflexive graph models of parametricity for system f the twolevel approach of the et al model in which types are assigned an underlying interpretation and a relational interpretation works well for the relatively simple setting of system f however it is difficult to see how to extend this approach to allow for more complex features such as higher kinds which allow function kinds such as and typelevel computation as is found in dependent type theories the primary difficulty lies in extending the definition of the identity extension property when we only considered the base kind interpreted as the collection of sets x u there was an obvious notion of equality relation but it is not so obvious what equality relation should mean when interpreting higher kinds one is that no matter what our notion of equality relation ends up being an equality relation for a type must actually be a relation transformer this is further when to interpret a dependent type theory in which types may depend on terms as well as types fortunately by using reflexive graphs as introduced by and we can construct a parametric model of system f that naturally extends to dependent types definition a reflexive graph is a tuple o r refl src tgt a pair of sets o and r together with three functions o a src refl r tgt such that src refl tgt refl a morphism f between reflexive graphs and is a pair of functions fo fr that makes every square the following diagram commute o a fo o a src refl r tgt src refl tgt fr r the set o is called the set of objects and r is called the set of relations of the reflexive graph we use reflexive graphs for two purposes to model collections of types and to model specific types the first use takes o to be a set of sets and r to be a set of relations over those sets each relation r r is thus a relation between and tgt r and each set o o has a distinguished relation refl o relating o to itself this intuition the following example example if u is a universe of small sets then the kind of types can be interpreted as a reflexive graph also called as follows o u r x y r x y u r y refl x x x y r x tgt x y r y the objects of this reflexive graph are thus small sets from u and its relations are ordinary binary relations between such sets for each x u the function refl takes the equality relation to be the distinguished binary relation on x for this choice of relation the identity extension property is a straightforward consequence of the definition of a reflexive graph morphism our second use of reflexive graphs takes o to be a specific set and r to be a reflexive relation on that set represented as a multiset of pairs of elements that are related then refl ensures that r is reflexive while src and tgt map each pair of related elements to the component elements that are so related this intuition the following example which forms the basis of the interpretation of the natural number type we present in section example a reflexive graph can be built from the set of natural numbers as follows nat o n nat r n nat refl n n nat n nat tgt n n the objects of this reflexive graph are just the natural numbers for any n we have n n so two natural numbers are related if and only if they are equal the construction of nat for any set x there is a reflexive graph x x idx idx idx that has x as its set of objects and relates objects in x if and only if they are equal in particular if is a terminal object in the category of sets then id id id is terminal in the category of reflexive graphs reflexive graphs can be over the category defined src refl · as covariant where src tgt refl id tgt refl morphisms between reflexive graphs are exactly natural transformations between in reflexive graphs as ensures that the following wellknown properties of categories of hold for categories of reflexive graphs as well categories of are always cartesian so we can use the finite product structure to interpret contexts secondly categories of are always cartesian closed which allows for the interpretation of higher kinds finally categories always form a model of dependent type theory a fact that will help us construct the parametric model we present in section interpretation of types a type a is interpreted as a reflexive graph morphism from the fold product of the reflexive graph from example to itself just as we did in example we identify a context with its reflexive graph interpretation and use the same notation for both unfolding the definitions shows that a reflexive graph morphism is nothing more than a pair of an underlying interpretation and a relational interpretation satisfying the identity extension property exactly as in the twolevel semantics in section for any reflexive graph we think of the as providing interpretations of types over interpretation of terms just as in section the interpretation of types can be extended to an interpretation of typing contexts by in the current setting a typing context is therefore also interpreted as an object of in the reflexive graph model a welltyped term m a is then interpreted as before as a morphism from the interpretation of the typing context to the interpretation of the type a ie as a morphism in the category definition let a b a morphism from a to b is a function m o o boo such that for all r r if arr a a ra a × a and b b rb b × b then for all a a ra m a m tgt r a rb this definition makes each into a category note that the fundamental theorem of logical relations stated at the very end of section is identical to the condition in definition up to the of types as reflexive graph morphisms type theory with a universe syntax and categorical semantics the reflexive graph model of parametricity we present in section is defined with respect to the specific formulation of dependent type theory that we set out in this section the type theory we consider is a standard variant of type theory with a natural number type nat dependent product types and a universe u closed under natural numbers and dependent products our default assumption is that the universe u is predicative but we will also consider an impredicative universe in order to more closely relate our results with impredicative system f our type theory includes and equality rules for dependent product types as well as equality rules for the natural numbers since our universe is we have an explicit type former t to take terms of type u to actual types the type theories we present in this section are close to the theories underlying the agda and coq systems our predicative theory is close to agda except that we only have one inductive type the natural numbers and we only have one universe with an explicit universe the impredicative variant is close to the calculus of constructions the theory underlying the impredicative variant of coq except with a natural number type and an explicit universe our use of an explicit universe judgement a type m a a b type m n a intuitive meaning is a wellformed context a is a wellformed type in the context the term m has type a in the context a and b are equal types in the context the terms m and n are equal at the type a in the context figure judgement forms is a technical device that means we do not have to deal with coherence issues arising from multiple typing derivations of the same term moving to an implicit universe with our models does not present any problems that do not already arise when defining models of dependent types with a universe syntax and typing the raw contexts types and terms are defined as follows x a a b c nat u t m m n p x xm m n ze su m m z x pm s n nat we will write a b for the type when x does not appear free in b and similarly write m n for the term when x does not appear free in n capture avoiding substitution of terms for variables in types and terms m nx is defined in the usual way in the term m z x pm s n the variable x is considered bound in a and the variables x and p are considered bound in m s the wellformed types and welltyped terms are defined using a collection of five mutually inductively defined judgements the five different judgements and their intuitive meanings are given in figure the first three judgements define subsets of the raw syntax that are to be considered wellformed under some assumptions the remaining two judgements define when two types or terms are considered as equal for the purposes of the theory the rules generating the judgements are given in figure and type rules for type equality judgements are given in figure the rules for term equality judgements that is and equality for types and equality for nat are displayed in figure the type and term equality judgements are also understood to include the symmetry transitivity and congruence rules note that due to the type former t the congruence rules make type equality depend on term equality further discussion about these rules and close of them can be found in survey of the syntax and semantics of dependent type theories the additional rules for considering an impredicative universe are given in figure these rules replace the rules u in figure and u in figure describing the allows the construction of types in u ie of small types by quantification over some large type a which may in fact be u itself we can therefore construct a universe u for example such that au a a u that is not permitted in the predicative theory when u is impredicative our type theory is equivalent to a variant of coquand and calculus of constructions categories with families the syntax of type theory is a complex system of mutually inductive definitions the mutual dependencies between wellformed types equality and welltyped terms directly defining and proving sound a semantics for type theory we address this issue by our reflexive graph model context formation emp a type ext x a type a type a type x a b type ty xa b type nat type u type m u tm type typing rules m a x a var x a x a m a a b type m b x a m b lam m n a m n app ze nat ze n nat su n nat su x nat a type m z n nat p m s nx n nat a m z n p m s n nat u m u x tm n u u u figure typing rules of type theory with universe a type x a m u u u a type x a m u u m xa tm type figure rules for impredicative quantification type equality rules a b type t nat nat type m u x tm n u tn type u type equality is an equivalence relation and a congruence with respect to all type term equality rules x a m b n a xa m n m nx m n a m xa m x m x nat a type m z n nat p m s nx m z n pm s ze m z ze x nat a type m z n nat p m s nx a m z n p m s su n m m z n pm s np p su nx n nat su term equality is an equivalence relation and a congruence with respect to all term figure type and term equality judgements in terms of categories with families a notion originally due to form a sound and complete class of categorical models of many variants of dependent type theory as explained by hofmann therefore by that the category of reflexive graphs forms a with the appropriate additional structure needed for the type we have chosen we are guaranteed to have soundly modelled the syntax of the type theory presented in the previous section we present the definition of a definition and then present the extra structure required for dependent products definition a natural number type definition and a universe of small types definition we follow presentation except that we for our particular type theory the basic structure provide enough structure to interpret the contexts types and terms of a type theory along with simultaneous substitutions and their action on types and terms equality on types and terms is modelled directly as equality in the model in particular there is no semantic structure corresponding to the rule here we define in terms of a bijection between sets of morphisms and semantic terms this is equivalent to definition of in terms of projections and weakening we treat projection and weakening as derived structure as described after the following definition definition a category with families consists of a category c whose objects are intended as the semantic interpretations of contexts and whose morphisms are intended as the interpretations of simultaneous substitutions for each a collection ty of semantic types for each and semantic type a ty a collection tm a of semantic terms for every morphism f in c a function f ty ty interpreting type substitution and for every a ty a function f tm a tm af interpreting term substitution such that the following hold aid a af g af g m id m m f g m f g equations and are welltyped by of equations and respectively a chosen terminal object in c interpreting the empty context for each and a ty an object a called the of a such that there is a bijection c a f m f m tm af that is natural in an alternative presentation of points to of definition is as a functor where set is the category of large sets which includes the category set as an object given f and m tm af we write f m for the associated morphism a in c given by the morphism in point of definition conversely given a morphism f a in c we write f and f tm af for the associated morphism and seman tic term the following definitions derive projection and weakening structure from definition and also define the semantic counter part of a simultaneous substitution of a term for a variable for any and a ty the first projection morphism pa a is defined as pa this is used to interpret weakening by a single variable for any and a ty the second projection qa is defined as qa this is used to interpret the rule var for any a ty and morphism f the weakening of f by a af a is defined as f this is used to lift simultaneous substitutions to work in larger contexts for any a ty and m tm a we define the morphism m a as m id m built from semantic terms are used to build simultaneous substitutions that substitute semantic terms for variables dependent products presentation of the structure for interpreting dependent product types in a admits the possibility of not supporting the rule but since the type theory we consider in this paper does include the rule we can use the following compact definition to describe the requirements ensuring that a supports dependent products definition a c supports dependent products if for all semantic contexts and semantic types a ty and b there exists a semantic type ab ty natural in such that there is a bijection b tm ab natural in definition gives a semantic counterpart of the abstraction rule lam we define the following semantic counterpart of the application rule app for a and b as in definition and m tm ab and n tm a we define n tm bn by m n the natural number type the structure required to model the type of natural numbers directly follows the syntactic structure we presented in section modulo the more explicit presentation of substitution inherent in the formalism the following definition gives semantic counterparts to the rules ze su and definition a c supports natural numbers if for all there is a semantic type nat ty we usually omit the semantic terms zero tm nat and succ nat and for each a a function on semantic terms of type tm × a a such that nat zero succ and are natural in and the following two equations hold z m m z z m succ m z m s universe the interpretation of the universe u is just the translation of the syntactic structure into the framework the following definitions are semantic counterparts to u and u we treat the predicative and impredicative cases separately definition a c supports a predicative universe closed under natural numbers and dependent product if a for all there exist semantic types u ty and t both natural in b there exists a semantic term nat tm u natural in such that t nat nat and c for all m tm u and n m u there exists a semantic term m n tm u natural in such that t m n t m t n definition a c supports an impredicative universe closed under natural numbers and dependent product if there are u t and nat as in definition and for all a ty and m u there exists a semantic term am tm u natural in such that t am at m the reflexive graph model of type theory constructing our reflexive graph model of type theory is now a matter of showing that the category of reflexive graphs from section has the structure of a category with families the essential tasks are to a establish what a family of reflexive graphs over a reflexive graph is in order to model types sections and and b to determine the interpretation of the universe type u section once we have done the former the interpretations of types and the natural number type are determined up to isomorphism section as an intuitive guide for determining the correct definition of a family of reflexive graphs we use standard results about models of dependent types knowledge of is not required to understand our final definitions families of reflexive graphs a standard way to model the dependency of types on terms is to use the families p set where the category has as objects pairs x p where x set and p x set and the functor p projects out the first element the basic idea of the families is that a pair x p represents a context x and a collection p of types indexed by the elements of x however in a reflexive graph model of parametricity we want to index not by sets but by reflexive graphs in fortunately there is a natural way to do this by standard results about see exercise in the functor defined as p f is also a this that objects of are the natural interpretations of dependent types in a reflexive graph model of parametricity and that the functor should send each such object to the reflexive graph interpreting the context over which the type that object is indexed the definition of we see that an object of is equivalent to a pair a of a reflexive graph together with a family a of reflexive graphs that is over in the following sense definition let be a reflexive graph a family of reflexive graphs over is a tuple a ao ar where ao o set ar r set o o o r r arr r r r arr r such that the following equations hold o o refl o o id o o refl o o id morphisms between pairs of families of reflexive graphs over the same reflexive graph are derived from the morphisms of this yields the following definition definition let be a reflexive graph and let a and b be families of reflexive graphs over a morphism m from a to b consists of a pair of functions mo o o boo mr r r arr such that o o ao o ao mr refl o r r ar arr r ar mo src r r r ar arr r ar mo tgt r families of reflexive graphs over a reflexive graph and morphisms between them form a category reflexive graphs as a category with families we define a structure on the category of reflexive graphs as follows for each reflexive graph we define the collection of semantic types ty to be the collection of families of reflexive graphs over as defined in definition given a reflexive graph and a family a of reflexive graphs over we define the collection of semantic terms tm a to be the collection of morphisms from the terminal family o o r r o r r of reflexive graphs over to a as in definition this definition out the contribution of the terminal family a semantic term m tm a is defined as a pair of functions mo mr mo o o mr r r arr such that o o o r r r r r r for each reflexive graph morphism f substitution af in semantic types a and substitution m f in semantic terms are both defined by structure is given by the following definition which can be seen as the dependent version of the cartesian product of reflexive graphs used in section to interpret the and typing contexts of system f definition let be a reflexive graph and let a ty be a semantic type define the a as the following reflexive graph ao o ao o o ao ar r ar r r ar arr o ao refl o r ar src r r ar tgt r given f and m tm af define f m a as follows f m oo foo f m rr given f a define f and f tm af as follows f oo let o ao foo in o f rr let r ar in r f oo let o ao foo in ao f rr let r ar in ar the next proposition follows by mechanical checking of the requirements in definition proposition the category of reflexive graphs has the structure of a where the collection of semantic types ty is the collection of families of reflexive graphs over and the collection of semantic terms tm a is the collection of morphisms from the terminal family of reflexive graphs over to a interpreting the universe of small types by definition the basic structure we require to interpret the typetheoretic universe semantic types u ty and t so t takes elements of u to semantic types but which semantic types ie families of reflexive graphs to be elements of u unlike in the case of types and the natural number type where we are constrained in our interpretation up to isomorphism by the equations of the calculus section we are free to select any collection of semantic types as long as it contains the natural number type and is closed under types since the reflexive graph model is a covariant model over the reflexive graph category rg section a choice would be to use hofmann and general definition of the interpretation of a typetheoretic universe in models given some settheoretic universe u out their construction in the setting of reflexive graphs yields the set of small reflexive graphs a b r u r ao r bo a b are small reflexive graphs thus the objects of u hs are small reflexive graphs and the relations are between small reflexive graphs as hofmann and show this definition exactly captures the small families of reflexive graphs families of reflexive graphs where the sets of objects and sets of relations are always taken from the universe u put if we write for the of small families of reflexive graphs over some reflexive graph then we have tm u hs however despite precisely capturing hofmann and universe is too big for our purposes we want to lift the consequences of relational parametricity from system f to the setting of dependent types to do this we need to accurately the features of the kind of system f types in our interpretation of the typetheoretic universe u recall the definition of the reflexive graph representing the system f kind of types from example this reflexive graph has the following three properties only the first of which is captured by the universe the sets of objects and relations are small in the sense of belonging to the universe u of small sets secondly the reflexive structure of indicates that the equality relation is distinguished all possible binary relations on sets this is the essential identity extension property as we saw in example reflexive graphs in which only equal objects are related can be modelled by taking the sets of objects and relations to be equal the relations between sets are since a relation r from x to y is a subset of x × y and since each pair x y is either in the subset or not there is at most one way that x and y can be related is essential for reasoning using a parametric model we use the relational level to reason about equality at the object level but we have nothing to reason about the relational level with so is needed to make sure that equality at this level is trivial this insight is in lemma below and used in section we note in passing that along these lines the formulation of reflexive graphs reflexive sets where there is always another level to reason about the one below the three properties just discussed this definition definition let be a reflexive graph a family a of reflexive graphs over is small if for all o o u and for all r r arr u discrete if for all o o the reflexive graph on the left of the following diagram is isomorphic to a reflexive graph generated by a set on the right of the diagram a x a refl o o refl o o id id x id if for all r r r arr × r is injective we write for the full of consisting of small discrete reflexive graphs in parts and of this definition we have chosen to enforce the conditions of and only up to isomorphism this will be important when showing that the interpretation of the typetheoretic universe of small types is closed under dependent products in section definition is justified by the following representation result proposition let be a reflexive graph there is an equivalence of categories proposition shows that the reflexive graph model of dependent types can internally represent the semantic system f types and terms up to isomorphism this suggests that we can use the reflexive graph as the basis of our interpretation of u however the equivalence of categories in proposition is too weak to soundly model the type equalities we required for the universe type operator t in figure specifically the semantic counterparts of these equalities in definitions and we now this by refining the definition of our reflexive graph to provide an interpretation for u with the required properties a small discrete proof irrelevant universe for any reflexive graph we define semantic types u ty and t the set of small discrete reflexive graphs a b r u r ao r bo a b are small discrete reflexive graphs r ao × bo is injective oa ra b r ra b r a a ar a b if a is a discrete reflexive graph then ar ao × ao is necessarily injective so the definition of makes sense we define the semantic types t as follows too a ao a b r r o a r a b r r a b r the definitions of u and t we have just presented part a of definition the following lemma states that we have successfully the lemma for any m tm u the family t m is small discrete and and this mapping forms a bijection of sets t tm u natural in the fact that this lemma gives us a bijection is useful because it means that to show that the universe u is closed under some semantic type former we need only show that the semantic type former is closed under the condition of being a small discrete and family of reflexive graphs below we define the small counterparts of dependent products and the natural number type ­ parts b and c of definition ­ using the direction of this bijection to obtain a representation in u of a small discrete family which we write as tm u we note the following crucial property of families by there is exactly one way that any two elements can be related therefore for any two terms of type if the interpretations are equal then so are the interpretations this lemma plays an important role in showing that the interpretation of the typetheoretic universe we have defined is closed under dependent products lemma below and also in the applications of relational parametricity that we describe in section lemma let be a reflexive graph and let a ty be a family of reflexive graphs for any pair of semantic terms m n tm a mo no implies mr nr proof since m and n are semantic terms and mo no we have for all r r similarly we have for all r r by of a the function r formed by pairing is injective hence mr nr interpreting dependent products and natural numbers to complete our reflexive graph model of type theory it remains to provide the interpretations of types and the natural number type due to the rules we have chosen for types we actually have no choice up to isomorphism in how to interpret these types we out the details here to demonstrate the way that type constructors are interpreted in the reflexive graph model dependent products the interpretation of types directly the interpretation of system f types that we presented in section the additional coming from the fact that we need to consider relation transformers rather than just relation preservation see also parametric model of system f which also deals with relation transformers in the interpretation of types the object level consists of a pair of an function and a function connected by three coherence axioms similar to the definition of semantic terms in section the relation level consists of a pair of interpretations and a relation transformer relating them written out in full the definition is a little remember that up to isomorphism we are essentially forced into this definition definition let be a reflexive graph and a ty and b be semantic types in the reflexive graph define the semantic type ab ty as follows fo fr fo ao boo ao fr ar o o ar ar o refl o ar refl ar o refl o ar refl ao o ao r r r r ar arr ar ar arr r arr ar ar arr r arr ar fr fo fr fo fr fr rf src f tgt r f src rf src f tgt r f tgt given a semantic term m b we define m tm ab as follows m oo ao ao ar o ar m rr m m r ar ar and conversely given n tm ab we define n b as follows n oo ao let fo fr in n rr ar let f src f tgt r in proposition the reflexive graph supports dependent products definition using the structure defined in definition if the families a ty and b are small then so is the family ab ty this is a consequence of assuming that the settheoretic universe u is a universe of small sets and so is closed under dependent products and it is straightforward to check that for closure under and only the family b need be discrete and lemma let a ty and b if b is discrete and then so is ab ty proposition part c of definition is by the definition m n t m t n if we further assume that our collection of small sets u is closed under large products then we also have an interpretation of an impredicative typetheoretic universe by lemma only the codomain type b need be discrete and for ab to be discrete and therefore if u is closed under large products then u is closed under impredicative quantification proposition under the assumption of an impredicative universe u definition is by am at m the natural number type for each reflexive graph we define a semantic type nat ty as follows the definition of the reflexive graph of natural numbers from example nat oo n nat rr n nat refl on n nat n nat tgt rn n since the family nat does not actually depend on its argument this definition is trivially natural in the zero and successor semantic terms zero tm nat and succ nat are defined using the corresponding structure of the natural numbers n n n n it is almost immediate that these are welldefined semantic terms given the trivial structure of the semantic type nat likewise in is trivial the natural number is given for a m z tm and m s a succ by recursion on the natural number argument z m z m z m n n z m n z m n n z m n equations and specifying the interaction between and zero and succ hold almost by definition in is proved by induction on the natural number argument proposition the formed from the category of reflexive graphs supports natural numbers definition moreover the families nat ty are small discrete and proof irrelevant so part b of definition is by nat nat main theorem by the results of the preceding we have shown that theorem the category of reflexive graphs can be given the structure of a that supports dependent products and natural numbers assuming the existence of a universe u of small sets the category of reflexive graphs supports a predicative universe closed under natural numbers and dependent products and if u is closed under large products then the supports an impredicative universe closed under natural numbers and dependent products as we argued in the before definition our interpretation of the typetheoretic universe u supports the identity extension property we identified in section as crucial for parametric models thus we are justified in referring to the model we have constructed here as parametric consequences of parametricity having built our parametric model of dependent type theory we now investigate some of the consequences of our construction our careful construction of the interpretation of the typetheoretic universe u as capturing the small discrete and families now we recover many of the interesting consequences of parametricity that have been observed in the typed settings of system f and system f as a practical matter calculating directly within the model we have constructed in the previous section is complicated by the presentation of relational interpretations forced by the reflexive graph formalism we therefore use the following notational when reasoning within the model if a ty is a family of reflexive graphs we write a a arr if there exists ar arr such that a and a by the pair a a completely determines ar if it exists if f we identify f with its first component so we can treat it as a function ao boo ao similarly if f we identify f with its relation transformer component which has type ar arr ar we will be in the and versions of the semantic interpretations of of dependent products this decreases the number of parentheses required we first prove a simple free theorem in order to demonstrate reasoning within the model and the utility of the construction of our interpretation of the typetheoretic universe as only containing families we then go on to adapt proof of the existence of initial algebras to the impredicative dependently typed setting this proof also relies on and also makes essential use of the of members of u in lemma a free theorem we begin by proving a simple free theorem in the style of wadler this example shows that the ordinary consequences of relational parametricity are preserved when moving from polymorphic calculi to the richer world of dependent type theory with a universe theorem if m a u ta ta then for any x u y u f tx ty and x tx the equation f m x x m y f x ty is sound when interpreted in the models constructed in section proof the definitions we see that we must establish the following two equations in which we have reused the letters m x y f and x to stand for the semantic interpretations of the corresponding syntactic objects we have applied where convenient and we have identified the small types x and y with their via t o o foo foo r r the interpretation of the type ty is a family so by lemma we only need to prove the first of the above equations from which the second necessarily follows for a given o we use the relational interpretation mr of m instantiated at refl o o r o o r o r again the definitions and using the fact that mr is connected to mo via the equations for sources and targets of relations in and we have the following property a a r ao × ao a a r a a a a r we instantiate a and a with the small discrete reflexive graphs x and y respectively at o we take r x y foo x y then foo r so foo r and the desired equation holds thus by definition of r categories of indexed types and indexed functors we now start on our proof that the parametric model that we have constructed supports initial algebras for all indexed functors to this end we first define the appropriate category of indexed small types where the of indexed initial algebras the construction of our category of indexed small types is carried out with respect to some fixed context for each judgement x type we define the category of small types to have as objects terms a x u and define morphisms between objects a x u and b x u to be terms f xx ta x tb x identities and composition are defined in the obvious way composition is associative due to the rule for dependent products we write a b to stand for the type xx ta x tb x we will also use the type a x u b x u xx ta x tb x type ie the type of morphisms where the domain and codomain are abstracted as variables as a notational convenience we write as shorthand for this type and similarly for its semantic interpretation morphisms in the category of small types induce relations between their domain and codomain objects as given by the following definition this definition is the of the functional relation from the free theorem in section definition let a x u and b x u given a morphism f a b we define f called the graph relation of f to be the following element of xu r r r r r xr a b a b br r xr the following lemma is a direct consequence of definition lemma let a x u b x u and f a b then for all o o foo id o f refl o o indexed functors initial algebras are defined in terms of functors which we now define an functor is a pair f fmap of terms f x u x u fmap a bx u a b f a f b where fmap preserves the identities and composition of the category of small types when in the reflexive graph model indexed functors interact with graph relations as captured by the following graph lemma lemma let f a b for all o o and xr o if a b o f refl then a b fmap a b f refl the category of f algebras for an functor f fmap initial f algebras are initial objects in the category of f algebras which we now define fix an functor f fmap the objects of the category of f algebras are pairs of terms a ka where a x u and ka f a a morphisms between a ka and b kb are terms h a b such that if is the composition of the category of small types then kb fmap a b h h ka f a b an initial f algebra is an initial object in the category of f algebras ie an f algebra µf in such that there exists a term fold a x u f a a µf a such that the following two equations hold the first equation states that fold always yields f algebra morphisms ka f a a x x m x fold a ka x in x m ka x fmap µf a fold a ka x m ta x the second equation states that the f algebra morphisms generated by fold are unique as required by a x u ka f a a h µf a h is an f algebra morphism h fold a ka µf a morphisms between f algebras have the following relational property in terms of their graph relations this property will be useful when we prove that initial f algebras always exist lemma let a ka and b kb be f algebras if h is an f algebra morphism from a ka to b kb then for all o o o o h refl o h refl o construction of initial f algebras having defined all the necessary background we now show that within the impredicative version of our parametric model of dependent types initial f algebras exist for all functors f fmap given an functor f fmap we make the following definitions µf x x a x u f a a ta x fold ax u a a xx x e a ka in x x e tf µf x a x u ka f a a ka x fmap µf a fold a ka x e note that up to notational changes induced by our presentation of the universe u and the more general setting these definitions are identical to those given by for constructing initial algebras in a parametric model of system f the proof that these definitions actually give an initial f algebra follows from two applications of the following lemma lemma the following equation holds when interpreted in the reflexive graph model a x u ka f a a b x u kb f b b h a b h is an f algebra homomorphism x x m x h x m a ka m b kb tb x proof by lemma we need only prove the part of the equation given o o we instantiate mr with refl o the graph relation h refl o and the pair by lemma to obtain boo h refl unfolding the graph relation this statement is equivalent to boo o now by the identity extension property that is built into the reflexive graph model the relation o is equal to o by the of elements of the universe u this relation is up to isomorphism the equality relation on the small set boo we thus have boo we can now state the following key property of our model theorem any functor f fmap has an initial f algebra proof we must verify that the two equations in section hold the first equation stating that fold always generates f algebra morphisms follows directly by using the reduction rules of the type theory the second equation requires relational parametricity expanding the definitions we see that we need to prove that h x m m a ka by lemma together with the fact that h is an f algebra morphism we have that h x m µf in m a ka using lemma again this time with an arbitrary f algebra b kb and setting h fold b kb yields m µf in b kb m b kb therefore gives m µf in m and thus h x m m a ka as required despite the considerably more general setting the above proof is almost identical to that given by for initial algebras in a parametric model of system f the proofs of other results presented by eg the existence of an extensional equality type and also translate to the impredicative dependently typed setting with little change conclusion and directions for future work we have presented a parametric model of dependent types that has two significant features first our model is based on reflexive graphs which naturally existing parametric models of system f just as the construction of a parametric model for system f can be seen as moving from a model based on set to a model based on so our parametric model of dependent types can be seen as moving from a p set to a second our model supports the derivation of key results such as the existence of initial algebras we believe ours is the first parametric model syntactic or semantic to establish the of this key property of parametric models of system f the most for future work is in comparing the reflexive graph model we have presented here with the similar and models of type theory reflexive graphs can be seen as categories without composition whereas are categories with in light of the many useful results derivable from relational parametricity further investigation of the reduced amount of structure of reflexive graphs looks promising has already investigated parametricity as isomorphism parametricity where types are interpreted as in particular axiom states that isomorphic types are actually equal but reynolds relational parametricity reveals that often types need only be related not isomorphic for them to be to programs is there a version of waiting to be formulated references r a deep embedding of parametric polymorphism in coq proc workshop on metatheory r relational parametricity for higher kinds proc computer science logic pp ­ r p and a kennedy abstraction and invariance for indexed types proc principles of programming languages pp ­ e s p j freyd a and p j scott polymorphism theoretical computer science pp ­ jp p and r proofs for free parametricity for dependent types journal of functional programming pp ­ a p and u a brief overview of agda ­ a functional language with dependent types proc theorem proving in higher order logics j and r a lightweight implementation of and dynamics proc workshop on haskell pp ­ a parametric higherorder abstract syntax for mechanized semantics proc international conference on functional programming pp ­ the coq development team the coq proof assistant reference manual logical project version t coquand and g p huet the calculus of constructions information and computation pp ­ b and u s parametric limits proc logic in computer science pp ­ p internal type theory proc types for proofs and programs pp ­ r categorical data types in parametric polymorphism mathematical structures in computer science pp ­ r relational limits in general polymorphism of the research institute for mathematical sciences pp ­ m hofmann syntax and semantics of dependent types in semantics and logics of computation cambridge university press pp ­ m hofmann and t lifting unpublished manuscript b categorical logic and type theory p short cut fusion proved and improved proc semantics application and implementation of program generation pp ­ n and d dreyer relational parametricity in the extensional calculus of constructions proc computer science logic s mac categories for the working second edition springerverlag h g outline of a proof theory of parametricity proc functional programming languages and computer architecture pp ­ p intuitionistic type theory a a d dependent type theory for verification of information flow and access control policies acm transactions on programming languages and systems pp ­ a m pitts parametric polymorphism and operational equivalence mathematical structures in computer science pp ­ g d plotkin lambda and logical relations technical report university of edinburgh g d plotkin and m abadi a logic for parametric polymorphism proc typed lambda calculi and applications pp ­ j c reynolds polymorphism is not settheoretic proc semantics of data types pp ­ j c reynolds types abstraction and parametric polymorphism information processing pp ­ e parametricity as isomorphism theoretical computer science pp ­ e and g reflexive graphs and parametric polymorphism proc logic in computer science pp ­ i the theory of parametricity in the lambda technical report university the foundations program type theory institute for advanced study d and s weirich parametricity type equality and higherorder polymorphism journal of functional programming pp ­ p wadler the isomorphism second edition theoretical computer science pp ­ p wadler theorems for free proc functional programming languages and computer architecture pp ­ 