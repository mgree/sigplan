how languages can save distributed computing andrew c myers department of computer science cornell university new york states current abstractions are failing us current computing platforms make available to users an and growing amount of computing power and storage this should be an time for computing and it is to users it might seem an infinitely powerful computer exists with a on each of their several computing devices however distributed applications are still relatively primitive and they are too on clusters by individual users find it hard to share code or even data without opening themselves up to attacks the in the of progress is the difficulty of building applications for the computer our programming models are simply too difficult and lowlevel for programmers to use effectively we need higherlevel programming models and programming languages that get us closer to programming the computer directly the software stack programming models involve developing the application logic in a programming language such as java the situation is not very different in most other programming languages except that library and tool support are typically weaker this application logic a large stack of abstractions whose abbreviations seem to sql http xml etc because these abstractions dont hide the software layers below applications must be written in a way that is aware of too much of the stack this structure makes the application complex and and more likely to have security further as it filters through these layers information within the program is transformed through multiple representations as it from persistent storage to remote clients and back creating and of course there are reasons why the software stack has to this complex state distributed programs must handle distributed code and data and efficiently they usually span multiple domains of trust a user client and a server at least though ap categories and subject descriptors d programming languages language distributed and parallel languages d operating systems security and flow keywords security information flow abstractions copyright is held by the popl january ­ italy acm that bring together information and code from multiple domains are more common if past history is any guide will keep incrementally adding new layers to the software stack on the current our computers will become difficult and to program and less secure something better is needed and languages can help a higherlevel abstraction in we have been exploring a very different approach to building distributed applications around a highlevel programming language in which code and data can be used in a uniform and transparent way regardless of where that code and data is located on the network objects at the language level may be at remote nodes in the network analogously to the current use of javascript the code for those objects may be located at remote untrusted nodes and dynamically loaded by the using node dynamic loading is important because we want to support the kinds of activities already common in the web in which programmers share and swap code and data freely there are two challenges in this first to develop a programming model that in an abstract way to the programmer the underlying systems issues distribution failure and security second to realize this model in an implementation that even in a completely system respects the properties that the abstraction to offer these properties can easily be in with each other for example the distributed protocols needed to ensure consistency can easily enable participants to infer information the language abstraction the programming language closely java but differs in some important respects · similarly to the programming language it adds information security annotations that specify the confidentiality and integrity of information manipulated by the program the security of the system is enforced both statically and dynamically by using these policies to control information flow goes beyond by adding annotations that control new attacks on confidentiality and integrity that arise in a distributed setting channels created by requests for remote objects and attacks on integrity that might be by mobile code · all information including distributed and persistent data and code is presented to the programmer as objects the system automatically takes care of caching and these objects to support efficient secure consistent execution there is no need to have a relational database as part of the software stack · distribution is exposed explicitly to the programmer through annotations on constructors and method calls that indicate where allocation or computation respectively should occur for example a method call transfers control to network node n to run the code · the consistency and of computations of these distributed persistent objects is supported by a transaction mechanism the statement atomic s executes statement s as though in isolation from everything else on the network even when s contains distributed computation implementing the abstraction aims to provide this highlevel programming abstraction yet with an implementation that runs code and efficiently on a completely collection of nodes the model is similar to that of the web so malicious nodes are assumed to be part of and to be able to join and then provide code and data to other nodes the compiler and runtime system together ensure that information does flow to any node that is not trusted to enforce its confidentiality policy and that information does not flow from any node that is not trusted to enforce its integrity policy the inherent compositionality of information flow control then ensures that all information flows across the distributed system respect the information security policies even though these policies are interpreted and enforced in a way between nodes requires explicit trust so information security policies are expressed in terms of principals nodes are principals in and like all other principals are represented by objects that can describe their trust in other principals complex trust relationships can thus be expressed enabling enforcement of complex information security nodes serve three roles in as which do computation over copies of objects stored elsewhere as stores which record the versions of persistent objects and ensure and as nodes which make object data highly available these different kinds of nodes support a variety of different distributed architectures including structures but also more general structures such as clients that directly interact or clients that use information and code from multiple servers works differently from systems such as or because nodes cache copies of remote objects rather than representing remote objects as this implementation choice is important for security and for performance execution on the current node unless there is an explicit transfer of control through a remote method call computing on object copies means that remote nodes do not learn when objects they store are used a hierarchical commit protocol ensures consistency while the confidentiality and integrity of information from untrusted participants the prototype implementation of is available conclusions the project is developing a new language and system to support the kinds of activities now on the web the free exchange of code and data across a distributed system eliminates much of the complexity of the current distributed programming model by raising the level of abstraction at which applications are developed this makes the resulting system simpler overall by eliminating software layers and data conversions that are not essential to application functionality by security considerations in information flow policies it supports secure composition of code and data from different trust domains is one approach to raising the level of abstraction and clearly could be extended in various ways there have been several other recent languagebased attempts to raise the level of abstraction for programming distributed systems particularly for web applications ­ some of these show that the abstraction is not the only candidate for an effective highlevel programming abstraction for example abstractions around streams are likely to be useful for some applications if we are to obtain a clean highlevel abstraction for programming future distributed computing systems it is to be that the programming language community will be involved however this will require that language researchers some traditionally systems issues such as distribution and security and to develop effective abstractions for handling these issues to program the computer research will need to break out of its abstraction layer references michael d k and andrew c myers sharing mobile code with information flow control in proc ieee symposium on security and privacy pages ­ may static checking of security policies in applications in proc th usenix symp on operating systems design and implementation october andrew c myers qi k and secure web applications via automatic partitioning in proc st acm symp on operating system principles october cooper philip wadler and links web programming without in proc th international symposium on formal methods for components and objects november michael d k and andrew c myers software release october michael d k qi and andrew c myers a platform for secure distributed computation and storage in proc nd acm symp on operating system principles pages ­ andrew c myers and java information flow software release july m e and f a language for programming the web in proc st dynamic languages symposium pages ­ october 