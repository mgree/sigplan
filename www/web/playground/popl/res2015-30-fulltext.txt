algebraic effects linearity and quantum programming languages university abstract we develop a new framework of algebraic theories with linear parameters and use it to analyze the equational reasoning principles of quantum computing and quantum programming languages we use the framework as follows · we present a new elementary algebraic theory of quantum computation built from unitary and measurement · we provide a completeness theorem for the elementary algebraic theory by relating it with a model from operator algebra · we extract an equational theory for a quantum programming language from the algebraic theory · we compare quantum computation with other local notions of computation by variations on the algebraic theory introduction quantum programming languages test many of the challenges of modern programming language theory linear use of resources separation locality a good way to understand a programming language is to understand equality of programs in this paper we develop a general algebraic framework for computational effects involving linear resources we use it to give a complete axiomatization of equality of quantum programs what is quantum computing from a programming language perspective quantum computing involves qubits and · there is a type qubit of qubits viewed as an abstract type we can imagine a qubit as having an internal state that is a position on the surface of a called the but the functions do not actually permit us to read its position on the surface the three functions are informally as follows notation we them new allocate a new qubit with initial position at the top of the z axis called apply a rotation to the qubit on the around a given axis by a given as specified by a unitary matrix u for example we can a qubit by permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for components of this work owned by others than the authors must be abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission andor a fee request permissions from popl january ­ copyright is held by the publication to acm acm it by around the x axis taking the top of the to the bottom this unitary rotation is x and so the function that applies the rotation is measure make a random boolean choice with the probability of returning either or depending on the z coordinate of the qubit this is called the standard basis for example if the qubit was on the x axis the result of will be or with equal probability like a fair if it was at the very top of the the result of will be with if it was at the very bottom of the the result of will be with a qubit it all that remains is the result of the measurement · for types a and b there is a type a b of pairs for instance the type qubit qubit is a type of pairs of possibly qubits is achieved by controlled unitary for example the unitary cx affects two qubits and if t is an expression of type qubit qubit then also is an expression of type qubit qubit the computation b is like if a is then return a ¬b else return a b so that the second value returned depends on the first value input the occurs because this controlled rotation happens without actually a and indeed it is reversible yet if a is subsequently measured then the controlled rotation appears to have in this way the main contribution of this paper is the fact that the relationship between unitary and measurement can be completely described by three simple axioms theorem and allocation by two simple axioms theorem this simple axiomatization combined with the unitary groups and commutativity laws completely characterizes earlier models that are built from operator algebra and functional analysis in the remainder of this introduction we give an informal overview of these results to express the equations we need to first discuss the syntax quantum programming languages and quantum programs a quantum programming language captures the ideas of quantum computation in a linear type theory for example we can write a program of type qubit qubit fn a qubit if measure a then new else which measures a qubit and returns a new qubit initialized either to or depending on the outcome in other words the input qubit is on to the z axis for another example of a program we recall the rotation had which maps the z axis onto the x axis by around the axis that lies between the x and z we can use this to define a operation first initialize a qubit to the top of the and then by and then measure the program bit returns or with equal probability we can use this to randomly a qubit around the z axis writing z for the rotation of around the z axis fn a qubit if then a else qubit qubit it turns out that this program is actually equal to the first program onto the z axis is the same as randomly around the z axis this fact perhaps at first is a consequence of our simple intuitive axiomatization of quantum computation notions of computation and algebraic theories in programming language theory it is often useful to analyze different features of a programming language separately in the quantum programs above there are standard features such as sequencing ifthenelse functions as well as the aspects specific to quantum computing one way of distinguishing the specific notions of computation from the other standard features of programming languages is by using algebraic effects a key contribution of this paper § is a new algebraic framework for analyzing the effects of a resource a useful step towards the algebraic analysis is to step away from booleans ifthenelse and sums by writing t u for the program if then t else u by working with expressions such as t u which are in a continuationpassing normal form we can about structural aspects and typing issues indeed to analyze the algebraic theory of quantum computation we need only distinguish between two kinds of thing qubits and computations notice our convention we commands but not the corresponding algebraic operations t u we make this correspondence precise in section algebraic structure of quantum computation we are now in a position to the algebraic structure of quantum computation it supports four constructions · if t is a computation involving a qubit a then there is a computation that allocates that qubit initialized to and continues as t · if t is a computation involving qubits b bn and u is a unitary matrix over n qubits then there is a quantum computation an b that first performs the unitary u to the qubits a an and then binds the resulting qubits b bn in the continuation t · if t and u are computations and a is a qubit then there is a computation t u that measures a and continues as either t or u depending on the result of the measurement this construction is linear in the quantum parameters t and u cannot contain a · if x is a variable for a continuation that expects n qubits notation x n and a an are qubits then xa an is a computation over n qubits we can construct our two programs and as algebraic expressions as follows b xb b xa a xa here x is a variable for the continuation of the computation as yet unspecified which is parameterized by the result qubit notation informal diagrams are often helpful our notion of quantum computation is very similar to the notion described by quantum circuits for instance in the by and the two programs above could be written as the following circuits b x a za a · b had · the circuits should be read from left to right the single carry qubits the double carry classical bits the boxes are the unitary and the device is measurement which takes a quantum to a classical one the vertical lines indicate control the outcome of the measurement determines whether the gate is applied aside just as we to notions of quantum computation from other aspects of programming languages so we to the quantum parts of quantum circuits qubits measurement from the classical this leads us to a d notation like a a b had in which measurement causes a branch in the circuit instead of a classical these kinds of diagram are very similar to notation for storage of classical bits but they are also common in the interpretation of quantum in this paper we will only use diagrams in an informal way and so we will write d circuit diagrams for simplicity we return to the relationship with classical bits in section axioms of quantum computation we are now in a position to summarize the algebraic laws of quantum computation a full account is in section in brief the laws of measurement are · after measurement quantum negation is like classical negation a x y y x x · after measurement quantum control is like classical control b a b xb yb xb b yb · u · u · we can discard a qubit by it and ignoring the result on discarded qubits are redundant a x x x x we combine these three axioms with the equations of the unitary groups and the following two sensible axioms for qubit allocation · new qubits are initialized to according to measurement x y x · new qubits are initialized to according to controlled a b xa b b uu completeness theorem other authors have proposed equational theories for quantum computation and quantum programming languages we discuss this in section what makes this paper special is that it is a complete equational theory of quantum computation of course it is very useful to have some equations they can be used to optimize programs and partially evaluate them but by giving a fully complete equational theory we can understand quantum computation from the axioms of the theory without having to turn to denotational models built from operator algebra this is the subject of section we have the following result theorem the following data are equivalent · an algebraic expression modulo the equality derivable from our axioms · a completely positive map between finite dimensional it is already wellknown that a completely positive map can be understood in terms of allocating qubits applying a unitary and then and this in terms of programming languages the here is our complete axiomatization of equality thus our simple equational theory provides a justification for the model of quantum computation based on operator algebra although linear algebra plays a major role in many models of quantum computation the addition in linear algebra often has no direct physical justification viewed in this way our work suggests an alternative technique for quantum theory from reasonable which is a subject of much recent work eg in our equational theory vector spaces do not have an explicit role the point is that rather than from physical directly to linear algebra one can first set up a precise equational model of the physical and then use that to justify the models that use linear algebra algebraic theories with linear parameters in this section we introduce a formalism for describing computational effects over resources our leading example is quantum computations over qubits to this we consider some simple examples if x and y are quantum computations and a is a qubit then x y is a quantum computation that first measures a and depending on the result continues as x or as y we can allocate new qubits writing x y for the computation that first allocates a then measures it as either x or y we can also apply to qubits writing a b vx yz for the computation that first applies a gate to qubits a and b yielding qubits a and b and then measures a and then b we make some informal remarks about this syntax before introducing a formal system there are two kinds of variable in the examples above a b stand for qubits whereas v x y z stand for computations in the example with new the a is binding and we could just as well write x y computations can involve qubit parameters a b and the variables x y stand for computations so we will also allow variables with qubit parameters when we write xa b the computation variable x is being passed parameters a and b for instance we can write a computation expression which allocates a new qubit a and passes it as a parameter to the continuation z we can substitute x y for za resulting in the term x y the notation means that we do not consider implicit variable capture care must be taken when using qubits a qubit it and so we adopt the convention that in an expression t u the qubit parameter a should not appear free in t or u this kind of linearity also plays a crucial role in the syntax for in b it is crucial that a and b are different qubits and not aliases for the same qubit for simplicity we adopt the convention that apply its qubit parameters creating new ones that are passed to the continuation general syntactic framework our general syntactic framework is an algebraic framework which is not at all specific to quantum computation indeed it is a new version of the parameterized algebraic theories already used to analyze various kinds of computation including local store communication and logic programming following some other similar syntactic frameworks there are two kinds of variable computation variables ranged over by x y etc computations can depend on parameters and we write x p if x has p parameters the number p is sometimes called a parameter variables ranged over by a b in the quantum situation these stand for qubits as in classical algebra a theory a signature def and axioms def definition an arity p m mk is a natural number p followed by a list of natural numbers m mk a signature with linear parameters a set of operations and for each operation o an arity p m mk informally this specifies that o takes p parameter arguments and k computation arguments and the ith computation argument has mi parameters bound in it we write o p m mk we define a judgement t of wellformed terms in context in a given signature here is a list of computation variables with their and is a list of parameter variables the judgement is the least one closed under the following rules x p a ap xa ap a ap t is a permutation of p a ap t b bm t b tk o p m mk a ap oa ap t tk in the term formation rule for operations the bs are binding and we work up to renaming those bound variables just as in predicate logic xp x y or calculus we make some remarks about the rules · an operation o its parameters the as and they cannot appear free in the continuations the ts unless of course one happens to use the same symbol for the as and the bs · weakening and contraction are admissible in the context but not in the context · the syntax admits the following simultaneous substitution law a am u x m xk mk t a ux · · · uk definition fix an algebraic signature with linear parameters an axiom is a pair of terms in the same context it is written t u a presentation of an algebraic theory with linear parameters an algebraic signature with linear parameters and a set of axioms over the signature in an algebraic theory we form an equivalence relation on terms in each context by closing substitution instances of the axioms under symmetry transitivity and congruence we now proceed to develop the basic model theory of algebraic theories with linear parameters the reader could now jump to read about the algebraic theory of quantum computation § models of algebraic theories with linear parameters classical algebraic theories are typically first understood as settheoretic structures but it is often to look at models whose carrier is not merely a set and whose structure maps are not merely functions that is to look at models in different categories in section we will prove our full completeness result by looking at models whose are to account for the parameters we are to look at categories where for each object x and for each natural number n there is a given object n · x we can then think of a morphism x n · y informally as a morphism x y with n parameters we will interpret operations o p m mk as morphisms m · x × · · · × mk · x p · x let us make this more formal let be the category whose objects are natural numbers and whose morphisms are between the natural numbers considered as sets we will consider it as a symmetric monoidal category where the monoidal operation is addition of numbers recall eg that an action of a category v together with a functor · × v v and natural isomorphisms · x x and m n · x m · n · x satisfying coherence conditions let v be an action of such that the category v has products and each functor m · v v preserves products definition a structure for a signature in v is an object x together with for each operation o p m mk a morphism m · x × · · · × mk · x p · x given a structure for a signature one can interpret each term in context x m xk mk a ap t as a morphism in the category t m · x × · · · × mk · x p · x this interpretation is defined by induction on the structure of terms in a standard way informally the interpretation assigns a value in x for each valuation of its variables note that exchange of parameters amounts to the of the action and the of substitution amounts to the composition of the morphisms that interpret the terms definition a model of an algebraic theory with linear parameters is a structure for its signature such that for each axiom x m xk mk a ap t u the interpretation morphisms t u m · x × · · · × mk · x p · x are equal proposition soundness if an equality is derivable in a theory then it is is true in all models this is proved by induction on the derivations of equality proposition consider terms xm t u of an algebraic theory that are equal in all models their equality is derivable from the axioms of the theory proof fix an algebraic theory with linear parameters consider the category of functors set and natural transformations between them this has finite products f × gp f p × gp there is an action of on set given by n · f p f p n for each computation context x m xk mk we define a functor t set with tq the set of terms in context b modulo the derivable equations this can be given the structure of a model in the functor category set notice that p · t is the set of terms in context a ap and we define the structure maps using the term formation for the operations in this model for any term a ap t we have in particular a function t tm × · · · × tp and by definition t t xb bm in tp so if two terms a ap t u are such that t u in this model then t u must be derivable functors set are called of structure and have been used to analyze aspects of quantum computation including variations on the space construction eg in this paper we are particularly interested in models that are fully complete in the following sense definition a model x in a category is fully complete if for all contexts x m xk ap · for every morphism f m · x × mk · x p · x there is a term x m xk mk a ap t such that t f · for all terms x m xk mk a ap t u if t u then t u is derivable an algebraic theory of quantum computation of the basic idea of quantum computation is that the n × n unitary matrices describe purely quantum circuits over n qubits we recall some key parts of the theory of recall that a square matrix u of complex numbers is unitary if its u is its inverse uu i uu of the same dimension form a group under matrix multiplication multiplication of two is again unitary if u and v are p × p then we can use quantum circuit diagrams to illustrate their multiplication by uv for the simplest example a dimensional unitary is just a complex number with this is sometimes called a global phase shift global phase shifts can ultimately be in quantum computation indeed that is a consequence of our axiom c but they still play a role in the unitary groups every rotation by some about an axis of the can be understood as a × unitary in fact every × unitary arises by combining a global phase shift with such a rotation we are particularly interested in the rotation by about the x axis x rotation by about the z axis z ei and the rotation had to explain the different ways of combining we note that the collection of all finite of different dimensions forms a that is a category where all morphisms are isomorphisms the objects are natural numbers and a morphism u n n is an n × n unitary recall that a monoidal structure on a category is a way of combining objects and morphisms there are two symmetric monoidal structures on this of coming from the multiplication and addition of dimensions one monoidal structure is multiplication if u and v are uni m × m and n × n respectively the product u v is a unitary m × n × m × n matrix u when m p and n q are of two so m × n pq we can illustrate this structure on quantum circuit diagrams as vertical u v the other monoidal structure is addition of dimensions if u and v are m × m and n × n respectively the block diagonal m n × m n matrix u v is also unitary in general we write du uk for a block diagonal the block diagonal are controlled the small example is z which can be thought of as a controlled global phase shift more generally if u and v are p × p then du v is a p × p unitary illustrated as follows · uv in particular the block diagonal cx def di x is sometimes called controlled not we have already seen the symmetry structure for at dimension it is the x gate the symmetry for the multiplication monoidal structure is swap def d x in fact every p unitary can be built from the two monoidal structures and the single qubit eg § remark our aim in this paper is to study the interaction between the and qubit allocation and measurement there is a body of work on eg which is complementary to our aims moreover the of has topological structure we are ignoring this continuity in this paper but it is important from a foundational point of view eg axiom p and it is central to the study of approximation of quantum eg ch and the notions of inherent to quantum algorithms eg ch the signature of quantum computation the signature for quantum computation the following operations new measure n n for every n × n unitary u explicitly these operations induce the following term formation rules a t t u a t u b bn t a an bt together with the variables and exchange law § there are no closed terms in this theory in common with continuation passing style examples we can make a new qubit initialized to and continue as x x this is justified by the term formation rules x b xb x a x here the a and b are binding this expression is equal to and also equal to the expression the notation xb indicates that the continuation x takes a parameter b a convenient shorthand def def at we can use quantum operations to make a random choice between continuations x and y x y x y a bell state two qubits we can create a bell state and pass it to x x a b b this would be written as the following circuit diagram a had · b the linearity constraints mean that we cannot implicitly discard nor duplicate qubits however we can explicitly discard a qubit a by it and ignoring the result x a x x in our formalism measurement the qubit parameter another convention is that measurement the qubit but it is now into one of the basis states this can be simulated by immediately creating a new qubit with the result of the measurement x a in fact we will later show that is the same as randomly the phase of a by using the rotation z x a xa axioms of quantum computation the terms built from new apply measure and variables are subject to the following laws the axioms are of four main kinds there are two classes of interesting axioms relating and measurement and relating qubit allocation with and measurement the remaining axioms are more relating the properties of with composition in the syntax and commutativity of the theory interaction between unitary and measurement our first set of axioms describe the interaction between the and the standard basis measurement operations axiom a states that the quantum not gate x simply a measurement x y y x informally a x axiom scheme b states that after measurement quantum control appears the same as classical control recall that du v is the block diagonal matrix u v b a xb yb b · · uv uv b for axiom c we need some shorthand for a list of p distinct parameter variables a ap and a term t define a term ap t informally measure a ap and continue as t regardless formally discard t t b t t t we can now phrase axiom scheme c which asserts that if all the qubits involved in a unitary are to be discarded the unitary is redundant x x where u is a n × n unitary n c in particular axiom c for n says when global phase can be ignored axioms for qubit allocation our second class of axioms describe the interaction between new and measurement and controlled they simply impose the idea that new qubits are initialized to a new qubit always yields x y x d this axiom is similar to axiom for quantum flow § secondly a unitary controlled by a new qubit will always be controlled by b a b b e · uv u this concludes the interesting axioms the remaining axioms are more the symmetric monoidal of our third class of axioms imposes the relationships between the struc ture of the and the compositional structure of terms built from we can understand axioms a and b as relating the monoidal structure of the of with the branch ing structure after measurement the remaining axiom schemes fi relate the other structure of the composition and the × monoidal structure with the syntax of the algebraic theory b a b xb a f xa g h b a b b i here are informal of these equations × × i u v uv u uv v commutativity our final class of axioms ensure that our equational theory is commutative in the sense of in this parameterized setting this means that all operations commute as far as is allowed by the variable binding for instance the following commutativity equation scheme is already derivable from i c c this is in of the fact that multiplication of is not commutative eg for instance while b b xx had had this does not imply that is equal to it is not a substitution instance because one must respect the variable binding this is an example of a general technique for converting a algebraic structure to a commutative one by passing parameters see also several other commutativity equations also follow from our other axioms but we need to explicitly include the following commutativity axioms u v x y u x v y j b b k xa ya l commutativity laws are essentially built in to the quantum circuits notation for instance axiom l could be informally written this concludes our axiomatization of quantum computation examples of derivations rotation about z doesnt affect standard basis measurement let z ei d ei then a x y x y y x y by b by c similarly rotation of a new qubit about z doesnt affect it a by e by c notation to save space we introduce shorthand a t def t a u def t u def at def def t note that we use the same variable names for the input and output of the unitary for example equation would be written a za xa a xa and the key axioms would be written a y y a x a a du a yb x x a x a y x b c d a du b xa b e random choice is symmetric recall that a a y provides a random choice between x and y we deduce that it is a a y a a y a a y a a x using since using a nb random choice is also idempotent and so it is a mean value algebra eg random phase flip measurement consider the following equation a a a xa b a in full xb it says that randomly the phase of a qubit is the same as it and discuss the equation to demonstrate the freedom in the representation ­ we can prove it directly in our equational theory first we show that a qubit is the same as making an copy using controlled not cx di x and then the original a xa b a a xa b a b xa a a a using l using b using e since as matrices we conclude by showing that the last line is the same as ran the phase a a a a a using c using b since had i and where cz di z reasoning without the following example illustrates a key point in the proof of our completeness theorem thm when reasoning in terms of one has access to various structures that are not definable in our syntax as it stands such as base quantum we could extend our syntax to have parameter variables of different sorts for different bases in fact we do not need these structures to deduce the relevant equations between computations over qubits let u d had consider the following equation · had · · b b y a u b b y a v by considering this equation for all x y u v we have an tional way of expressing the idea that after the unitary the pair a b of qubits will never be in the state in effect we have a although are not expressible in this formalism we derive equation by introducing an intermediate qubit c as follows let t di x the × gate and note that if v is a block matrix then tv i v it b b y a u b b c a c by d c b b a u c v commutativity c b u b a u c v gi c b tu b a e c b u b a c b u b a b c b u b a v c u a c b b a v c u gi b b y a v d other of quantum computation equational reasoning about programs is widely regarded as important and several authors have already proposed useful equations for reasoning about quantum programs eg § § and and other aspects of quantum computation there are two particular equational that we would like to mention especially the measurement calculus and the zx calculus which comes out of the categorical quantum see also unlike our theory neither of these of equality are complete for quantum computation but they are both in a different spirit they have strong results regarding term rewriting it seems that there is a straightforward rewriting system to fully decide equality of quantum computations because of problems with rewriting expressions over the unitary groups and secondly because our derivation of was not at all automatic it required some full completeness in the previous section we provided a new algebraic description of quantum computation by giving axioms that express the relationship between the unitary measurement and allocation we now show that this algebraic theory completely characterizes quantum computation we show this by reference to a model of quantum over years old based on operator algebra and we show that terms in our theory correspond with completely positive maps thus via our axiomatization one can fully understand quantum computation without first knowing all about operator algebra conversely linear algebra gives an array of techniques for reasoning about the quantum computation that we have one can decide equality of computations by comparing matrix representations of the linear maps of the idea of matrix is that the of a quantum system should be elements of a recall that a is a vector space over the field of complex numbers that also has multiplication a unit and an satisfying associativity laws for multiplication laws eg x x xy yx x and such that the provides a norm making it a space a homomorphism between is a linear map that preserves the multiplication and unit we write for the category of and homomorphisms a key source of examples of are the algebras mk of k × k complex matrices with matrix addition and multiplication and where is in particular the set m c of complex numbers has a structure and the × matrices m form the containing the of qubits the direct sum x y of is given by the cartesian product of the underlying sets it has the universal property of the categorical product the cc represents classical bits if x is a then the k × k matrices valued in x form a for instance mk and informally we can think of the as representing k copies of x any linear map f x y extends in the obvious way to a linear map and is a homomorphism if f is we can thus use this matrix construction to understand as a category suitable for modelling algebraic theories with linear parameters consider the action of on given by m · x mm x the direct sum over the action y in section we defined a notion of model for an algebraic theory with linear parameters we now investigate models of the theory of quantum computation § whose carrier is the complex numbers considered as a note that m · c mm the of m × m complex matrices representing m qubits thus a term a ap x m xk mk t is interpreted as a linear map t mm × · · · × mp this can be read informally as in predicate transformer semantics if t o ok is observed of a ap then o ok will be observed of x xk our interpretation of quantum programs as maps between follows other recent work in this direction eg full completeness for measurement we begin with the built from measurement and uni we will add qubit allocation in section the operations measure and and are interpreted using the following homomorphisms measure m m m and mp mp for each p × p unitary matrix u measure proposition in the category of and the complex numbers c form a model of the of quantum computation involving measure and but not new and all the relevant axioms this is shown by direct calculation theorem the complex numbers form a fully complete model for any homomorphism f mm · · · mp there is a term in the algebraic theory not involving new x m xk mk a ap t such that f t if t u and t and u do not contain new and t u then t u is derivable we give a outline of our proof here some more detail is in the appendix the theorem is proved by noting that a term not involving new can always be to a term at where t is built from measure and variables we can understand a term built only from measure as a diagram which is a combinatorial way of understanding the homomorphisms full completeness for all quantum computations completely positive maps to interpret allocation we move beyond homomorphisms recall that an element x of a is called positive if y x yy a linear map f x y is completely positive if for all k the map preserves positive elements if either x or y has commutative multiplication then it is sufficient to check the case k we will focus on the completely positive maps that preserve units these form a category and the products and extend from homomorphisms to interpretation the operation new is interpreted using the following map new m m new this is not a homomorphism but it is completely positive and proposition in the category of and completely positive maps the complex numbers c form a model of the theory of quantum computation theorem the complex numbers form a fully complete model for any linear map f mm · · · mp that is completely positive and there is a term in the algebraic theory x m xk mk a ap t such that f t if t u and t u then t u is derivable nb part of the theorem is essentially thm of a proof is in the appendix in brief we use the eg to factor a completely positive map into a homomorphism followed by a restriction this corresponds to the way that every term can be written with all the at the front then the and finally the measures to obtain full complete ness we use the minimal that theorem yields however there is a in this model we can only work with of the form k i and the minimal tion need not be of this form for instance consider example its minimal is a homomorphism m m m m we resolve this by generalizing our derivation of from the ax a quantum programming language the syntax of our equational theory describes quantum computation but it is not immediately amenable to practical programming because it focuses on computations rather than intermediate results there is a standard way of moving between an equational theory like ours and a syntax more oriented towards programming this applies to many different notions of computation in the setting of quantum computation we can illustrate it by that a programmer might find it helpful to have a typed function measure qubit bit which returns the result of a standard basis measurement our measurement operation can then be derived x y if then x else y conversely if we have a language with a bit type that is a model of our equational theory we can derive this relationship between algebraic operations like measure and generic effects like measure is a crucial one in the theory of computational effects it allows us to pass from our algebraic syntax to a language rather like a categorical way to understand this relationship is in terms of the duality between theories which are an abstract description of algebraic theories and freyd categories which are an abstract description of first order programming languages program equations to be more precise we briefly demonstrate the programming language that corresponds automatically to our algebraic theory the types are built from the grammar a b qubit i a b a b we write bool for i i a context in this language is just an assignment of types to variables the typed terms are built from the standard rules for a linear type theory eg eg xa xa t a b x a y b u c let x y t in u c to this standard linear type theory we add the following generic effects new qubit t t qubit bool the resulting language is essentially see also our axioms § between algebraic expressions have counterparts as program equations eg our five key axioms can be written a let a x x in x b if then else c d x new e the commutativity equations amount to the commutativity of let eg we combine our axioms with the standard equational theory of a linearly typed language eg in this way we build a language in which every pair is a model of the theory in section for instance if a qubit t a then let def if t a and u a then let t u def if then t else u higher order computation and monads by understanding quantum computation as an algebraic effect we are able to begin applying other techniques developed for algebraic effects in general such as compiler optimizations and static analyses and normalization by evaluation another general method is building models of higher order computation with effects by using monads indeed the equational theory of quantum computation is not a theory in the sense of classical universal algebra but rather a theory in the functor category set which is why we used actions of to discuss models to be precise it is a general fact that to give an algebraic theory with linear parameters in the style of section is to give a strong monad on the symmetric monoidal closed functor category set this follows from our syntactic completeness result prop see also cor for each computation context x m xk mk we define a functor f set by f · · · every functor set is a of functors of this form so to define a monad t on the functor category set it suffices to specify its action on functors of the form f let t fp a ap t · · · mp in the proof of proposition t f was called t see also eg and since our algebraic theory § is commutative the category of the monad t is monoidal see also this makes a connection with other work on monoidal categories for quantum computation the model seems to be closely related to the one proposed by it would be interesting to compare it with the model of one can also study the full of the category that is by objects of the form f this is essentially the syntactic category of our programming language and its dual can be thought of as the theory for our algebraic theory it is sometimes called a freyd category which also makes a connection with since freyd categories are a categorical formulation of arrows variations on the algebraic theory a distinct advantage of specifying notions of computation by algebraic theories is that it is very easy to combine different theories and to investigate the consequences of further operations and equations characterizing different linear maps computations maps and recursion we can model computations whose results are partially undefined eg they fail by adding to our theory a constant symbol undef this should commute with the other operations a undef undef we interpret undef as the zero map undef m m between undef the correspondence with extends to undef when we relax the preservation of units to the requirement that f is positive these maps are called proposition in the category of and completely positive maps the complex numbers form a fully complete model of the algebraic theory of quantum computation extended with undef in brief this is because to give a map f x y is to give a map f x c y has noted that the maps between form a pointed and proposed to use this to interpret recursion in a quantum programming language this to be related to standard algebraic ways of analyzing iteration nondeterminism and maps some authors drop the requirement of preserving the unit eg i am not aware of any attempt to justify this with physical but we can consider the idea in this algebraic framework we do this by adding to the algebraic theory a commutative monoid that is a binary operation satisfying the monoid laws x y z x y z x y y x undef x x let us add axioms that with the other operations measure apply and new the operation is of nondeterministic computation although we do not impose idempotence x x x in fact there is no commutative algebraic theory that combines idempotent nondeterminism with probabilistic choice we can interpret as a linear map between let m m m be given by this is completely positive but it does not preserve units proposition in the category of and all completely positive maps the complex numbers form a fully complete model of the algebraic theory of quantum computation extended with undef and to show this we define measurement operation m by ma x x undef so that x y ma x y now all terms can be into an sum of operators as in theorem relationship with classical data and changing of the algebraic presentation of quantum computation does not assume very much about the only they that they form a with two monoidal structures to focus on classical computation we can cut down to the valued unitary matrices in this classical setting the following extra axiom is reasonable xa m axiom m is consistent with classical computation proposition the set is a fully complete model in the category in other words the following data are equivalent · a term t where all the are valued in modulo all the axioms including m · a function p m · · · mk between sets note that axiom m is is inconsistent with quantum computation since we can use it to derive x y for all x and y x a x a y d a a y gh a a a m a a a a y a x y d notice that the algebraic framework allows us to make this very strong statement we are not only saying that m fails in the particular model of but moreover that it fails in every consistent model of quantum computation reference cells versus their contents a rather different approach to quantum data is to step away from the actual qubits and instead consider pointers to memory cells that store qubits in this approach is taken in the monad we can analyze this in the context of our algebraic theory by understanding the parameter variables a b not as qubits but as distinct references to memory cells thus new does not create a new qubit but rather allocates a new memory cell containing a qubit initialized with with this interpretation discard is not a bit but rather the name of the pointer the memory itself might remain active in this context it is appropriate to omit axiom c we now explain this by analogy with the classical situation algebraic theories with a discard operation the theory of quantum computation has as a the simple theory of the signature is discard and there is one equation x x in prop we saw that the functor category set is a canonical category for models of algebraic theories with linear parameters in fact as is quite well known eg the category of algebras for the theory of discard alone is equivalent to the functor category inj set where inj is the category of natural numbers and between them this means that every algebraic theory with linear parameters and with a discard operation induces a monad on the category inj set this category has long been used to model dynamic allocation and separation the category inj has a monoidal structure given by addition of natural numbers and this extends to a monoidal structure on the category inj set if we have an algebraic theory with linear parameters and a the discard operation with all other operations then this induces a strong monad on inj set for this monoidal structure there is a strong monad on inj set that describes local store of classical data it is attributed to ohearn and but first appeared in we analyze that monad by considering an algebraic theory of classical local store which is a variation on the theory of quantum computation § found by restricting to valued matrices axiom c and including axiom m proposition the category of algebras for the theory of classical local store is equivalent to the category of from over inj set this is proved in much the same way as only within the formal framework of algebraic theories with linear parameters an important property of the monad for local store of classical data is that it is in inj set in two ways with the monoidal structure which gives a notion of separation and secondly with the cartesian product which enables standard programming with ordinary cartesian products if we add axiom c then we retain the in the monoidal structure see also § but the cartesian is broken indeed no further axioms can be added without the cartesian following proposition we can also consider an algebraic theory of quantum local store by axiom c except for n axiom m but using all the this again supports the two different kinds of in inj set we propose our algebraic theory of quantum local store as a semantic theory of the notion of computation describing the model summary axioms omitted valued in quantum computation classical computation classical local store m none c cm complex numbers complex numbers it would be interesting to add other operations to the signature such as communication primitives eg following overall summary we have presented a framework for algebraic theories with linear parameters § and used it to quantum computing § we showed that our axiomatization com describes quantum computing by referring to an old model built from operator algebra § we showed how to extend the notion of quantum computing to a programming language § and considered several variations on the theory § the flexibility of the algebraic framework acknowledgements this research was supported by project it have been possible without the group in robin robert and i presented this work at the workshop on quantum and logic and it was included in the informal proceedings of that workshop i am to the anonymous reviewers and the of and to the reviewers of popl for their valuable comments it has been helpful to discuss this work with many other people too including abramsky gordon plotkin and references s abramsky and b a categorical semantics of quantum protocols in proc lics j on mean values am math ­ r quantum program and effect language in proc to appear d and s normalization by evaluation and algebraic effects in proc pages ­ t j and t monads need not be in t and a the quantum io monad in semantic techniques in quantum computation j and j from finite sets to diagrams in mathematics and beyond springer n benton and p wadler linear logic monads and the lambda calculus in lics c pa and m monads with and their associated theories j pure algebra s l and z iteration theories the equational logic of iterative processes springer i and f pfenning a linear logical framework comput ­ g g m and p derivation of quantum theory rev a k semantics for a quantum programming language by operator algebras in proc to appear b and r interacting quantum in proc icalp pages ­ v e and p the measurement calculus j acm p a a users guide to operator algebras m notes on combinatorial functors draft m p and ck secondorder equational logic in csl a s p l n j p and b a scalable quantum programming language in pldi l and quantum theory c a and p completely positive projections and b on block structures in quantum computation in proc g and g a note on actions of a monoidal category theory o and g d plotkin algebraic foundations for optimisations in popl pages ­ g m and a j power whose are j pure algebra ­ f e j equational categories j math ­ o p j scott and p models of quantum computation an outline in computation logic games and quantum foundations springer pa local stores in string diagrams in pa condition meets computational effects in proc lics pages ­ r e and s linear usage of state logical methods comput sci m a and i l quantum computation and quantum information p w ohearn on typing j program m p and b applying quantitative semantics to higherorder quantum computing in proc popl v completely bounded maps and operator algebras g plotkin some of equational logic in algebra meaning and computation springer g d plotkin and j power notions of computation determine monads in proc g d plotkin and j power algebraic operations and generic effects applied categorical structures ­ j power generic models for computational effects theor comput sci ­ j power indexed theories for local state in models logics and categories a to the work of pages ­ mathematical society j power and m binding signatures for generic contexts in proc volume ­ m towards a quantum domain theory and fixpoints in in proc p towards a quantum programming language mathematical structures in computer science ­ p generators and relations for operators i categorical models for local names lisp and comp ­ s an algebraic presentation of predicate logic in s completeness for algebraic theories of local state in s instances of computational effects in lics s two in one in proc s freyd categories are theories in proc workshop on algebra coalgebra and topology volume of pages ­ s and p b universal properties for impure programming languages in popl a van a lambda calculus for quantum computation siam j comput ­ j higher semantics of quantum protocols in lics j k g r and a reasoning about general quantum programs over mixed states in m and y an algebraic language for distributed quantum computing ieee trans computers ­ m n and y alternation in quantum programming from of data to of programs a proof of full completeness we use this appendix to give more details of our proof of the completeness theorems from section as a first step we consider the case without new theorem for any homomorphism f mm · · · mp there is a term in the algebraic theory not involving new x m xk mk a ap t such that f t if t u and t and u do not contain new and t u then t u is derivable proof notes recall that if m mk p are nonzero natural num then the set of diagrams mk p com of natural numbers s sk partial such that k i p there is a function µ mk p · · · mp where ak is the block diagonal matrix formed by s copies of a followed by s copies of a and so on the following result is standard eg proposition the function µ has a there is a function · · mp mk p such that µ id moreover f g if and only if there is a p × p unitary u such that f a u consider a context x m xk mk a ap suppose that the second order variables are in order of increasing the following are in correspondence terms built only from measure and variables such that the variables of both kinds appear in the same order as in the context these terms are not considered modulo any equations sequences of partial in mk p to show this we interpret a term t as a diagram t so that µ t t if the term is a variable aq then mi q p and we let aq mk p be given by si and sj for j i if the term is a measure ment t u then by induction t and u correspond to diagrams t u mk p and so k i t k i u p let u v in mk p be the sum of t and u ie u v i t i u i the inverse to this interpretation maps diagrams s in mk p to terms measures of this special form so that measure t t and measures s this inverse is defined by induction on p the special order on the computation variables is needed here we can thus define a section of the semantic map t x m xk mk a ap t mp as follows every homomorphism f mm ··· mp factors as f x u · µ sx · u for a p × p unitary u so that f thus the first part of the theorem is proved we show the second part of theorem in two stages we show that the section of the semantic map doesnt depend on the choice of u we show that the section is a ie that every term is equal to one of the form first we show that for any diagram s mk p and any p × p u v if u · µ s · u v · µ s · v as linear maps then we can derive the equality between terms this fact can be understood along the same lines as the freedom in the representation of completely positive maps eg ch if µ s u · µ s · u then u must be built from a tensor products of that are conditional on qubits that are being measured and that act on qubits that are being discarded all this is taken care of by laws thus the section of the semantic map does not depend on the choice of u it remains for us to show that the section is a ie that every term is equivalent to one of the form in brief we use the equations to a term as follows first we push all measure operations inside apply operations using law b next we all the second order variables to appear in the designated order by using controlled possibly etc via laws a b and j we all the parameter variables to appear in the designated order by using controlled via laws b f a sequence of apply operations can be combined into one apply operation using and composition via laws this concludes our proof of theorem the remainder of appendix a including a proof outline for theorem is available on my page 