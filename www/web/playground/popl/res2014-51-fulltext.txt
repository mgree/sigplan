parametric effect monads and semantics of effect systems research institute for mathematical sciences university abstract we study fundamental properties of a of monad called parametric effect monad and apply it to the interpretation of general effect systems whose effects have sequential composition operators we show that parametric effect monads admit of the structures and concepts that exist for monads such as triples the state monad and the continuation monad plotkin and algebraic operations and the categorical lifting we also show a systematic method to generate both effects and a parametric effect monad from a monad morphism finally we introduce two effect systems with explicit and implicit and discuss their denotational semantics and the soundness of effect systems categories and subject descriptors d programming languages formal definitions and f logics and meanings of programs studies of program constructs type structure keywords operation computational effect effect system lax monoidal functor monad parametric effect monad introduction effect system is a typebased approach to statically estimate computational effects caused by programs the basic idea of effect system is to add to each typing judgement m an expression e that the scope of ms computational effect the expression e is called effect the definition of effects depends on the computational effect that the programming language supports and also the property we would like to know about the computational effect for instance · various effect systems and their semantics are studied for the analysis of memory usage during the execution of programs effects are defined to be sets of atoms rd wr init tagged with regions · in an effect system for concurrent ml an extension of ml with communication primitives is designed to the communication behaviour of programs there effects are expressions of a process calculus permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for components of this work owned by others than the authors must be abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission andor a fee request permissions from popl january ­ san diego ca usa copyright is held by the publication to acm acm · in and plotkin designs an effect system that the set of algebraic operations invoked during the execution of programs statically properties of computational effects various benefits to the analysis and transformation of programs the main purpose of the work by and was to design the effect system that safe scheduling of expressions in parallel computing since then many effect systems have been designed for the behaviour of programs for instance control flow analysis can be captured as an effect system the memory management in functional languages is developed based on the idea of effect system a series of papers ­ study a semantic foundation for some program transformations that depend on the result of effect analysis and plotkin gave a general algebraic account of the optimisations based on the property of algebraic theories in the paper wadler integrated the effect annotation and monadic interpretation of computational effects into monadic type t e he then a question what is the denotational semantics of the monadic type the main of this paper is to propose an answer to this problem semantic structures for monadic types an answer to question consists of a formulation of the concept of effect and a mathematical structure corresponding to the monadic type one type of solution effects as join and use the join operator to compute the effect of let expressions in this solution each effect represents a set of events and an monadic type t e is given to the programs that cause the computational effects regarded as events in e the typing rule for let expressions is m t e x n t e let x be m in n t e e this type of solutions captures well the feature of the effect systems for memory usage analysis in one of the solutions of this type is generalised monad however using the join operator to compute the effect of let expressions is not always satisfactory here are some examples let us consider an effect system that exceptions raised by programs we ignore exception handlers we define an effect to be a set of exceptions then effects form a join semilattice by the set union an instance of the typing rule is the following derivation t e x t e let x be in t e e the union of exceptions in the second line is sound but not precise because e will never be raised let us consider an effect system that output strings of programs a natural definition of an effect is thus a set of strings although effects form a join semilattice by the set union it is to use the join operator in the typing rule to compute the output strings of let expressions rather we should use the language concatenation ll l e l e problem to compute the effect of let expressions what kind of a structure shall we assume on effects problem when the structure on effects is given in the answer to problem what is an appropriate semantic structure for the monadic type problem how do we construct the structures proposed as a solution to problem algebraic operations with effects the operations that manipulate computational effects such as raise for exception raising read write for store access etc are important to make programming languages rich and expressive to represent such operations in the monadic semantics of programming languages plotkin and power introduced algebraic operations problem how do we extend algebraic operations to the semantic structure given as an answer to problem the meaning of monads by effects wadler pointed out the essence of effects as follows effects the scope of computational effects to elaborate this suppose that we have a programming language l with computational effects and a denotational semantics of l using a monad t an effect system designed for l introduces an monadic type t e and it is given to the terms whose computational effects is within e this suggests that we may see t e as a predicate on t problem how do we formulate that effects the scope of computational effects another issue is the soundness of effect system when the effect system asserts that a program m of a base type b has an effect e then we expect that the execution of m causes the computational effect within the scope denoted by e we formulate this as follows we first specify the scope of computational effects of an effect e by a predicate s be on t b then we consider whether for all judgements m t e b in the effect system we have m s be if this holds then we say that the effect system is sound with respect to the specifications of effects problem how do we establish the soundness of effect systems with respect to given specifications of effects contributions of this paper this paper proposes the following solutions to the above problems especially solutions to problem are the technical contributions of this paper solution to problem we that effects form a monoid the monoid structure is to compute the effect of let expressions and the preorder is to compare the scope of effects the typing rule for let expressions is refined to m t let e x be x m in n t n e t e · e actually this typing rule had already appeared in to sketch the idea of effect system but its semantic account was not given there in this paper the word is irrelevant to the delimited continuation solution to problem corresponding to the above solution for a monoid e e · of effects we employ the following triple plus a strength which we omit here t e c c t id t t e t e t e · e satisfying the axioms of lax monoidal functor as a semantic structure for interpreting the monadic type the morphisms t and replace the unit and multiplication of monad the axioms of monad become the following diagrams t te t e t e t t e te e t e · e t e t e · e t e t e · e · e e such a structure is called a parametric monad by and is introduced as an underlying categorical structure for establishing a between linear logic and the theory of strong monads in this paper we consider it as a direct counterpart of the monadic type and study it from the viewpoint of effect system as we focus on the parametric monads whose parameter categories are monoids of effects we call them parametric effect monads to the restriction we show that there are parametric of the concepts that exist in the theory of monad such as triples the state monad the continuation monad algebraic operations and the categorical lifting this situation suggests that parametric effect monads are a natural of monads moreover monoids and lax monoidal functors are standard concepts in the theory of monoidal category therefore the tools and results on monoidal categories are available for them eg we mention the recent work by where he introduces respectively and as a solution to problem and they are more expressive than parametric effect monads see section yet the features of parametric effect monad shows that they have rich structures to be studied solution to problem we give a systematic method to construct both a monoid e of effects and a parametric on set from a monad morphism t s its codomain is a monad we then extend this construction to setting compared to giving effects and parametric effect monads by hand it is relatively easy to give effect observations we demonstrate this method with the case where t is the writer monad exception monad free algebra monad and probabilistic writer monad deriving parametric effect versions of these monads solution to problem we extend algebraic operations to parametric effect monads in two ways one way is to add to the arity of an algebraic operation an effect e that describes its computational effect an extended algebraic operation has a triple i j e as its arity and it is a natural transformation ek j t ek i t e · e k satisfying certain equational axioms it corresponds to a morphism of type i t ej however when using an algebraic operation of the above type we have to the effect of all the arguments to e this constraint decreases the accuracy of the of effects in some situations to this problem we introduce another way to extend algebraic operations with effects we allow algebraic operations to have different effects in their argument positions and describe their effect by an effect function then an algebraic operation extended in this way has a tuple n as its arity and it is a certain natural transformation t ei × · · · × t t e · · · solution to problem our solution takes two steps first we introduce the effect system that is designed as a refinement type system over computational metalanguage ml for short each refines its effect erasure which is always a we next give a denotational semantics of in a faithful functor p p c with certain structures we regard p as a category of predicates on objects in c and an object x in p as a predicate on the object px in c we then interpret each refinement type as an object in p and its effect erasure as an object in c so that we have p that is the denotation of a refinement type gives a predicate on the denotation of its erasure to express that effects the computational effects modelled by a monad t on c we interpret types by an parametric effect monad t on p such that pt e x solution to problem after the effect soundness we give a sufficient conditions for the effect system to be sound with respect to a given specification of effects this sufficient condition is natural and applicable to any monad monoid of effects effect specification and algebraic operation the proof an parametric effect version of categorical lifting notation we write ll for the concatenation of two sequences l and l we write for the set a terminal object in a category and a trivial category whose unique object is the disjoint union of sets i · · · in tagged with l · · · ln is denoted by li · · · category theory a category is the one whose have cardinality at most small categories are exactly sets in this paper by a we mean a category with chosen finite products finite and we write cpo for the category of all complete posets which may not contain the least element and continuous functions between them we also write pre for the cartesian monoidal category of sets and monotone functions between them we use · for the vertical composition and for the composition of natural transformations see section for these operations for a natural transformation and a functor f we write f for and f for respectively monad we use letters t s · · · to denote monads its functor part is referred by letters t s · · · for a monad t t t and a morphism f i tj by f t or f if t is obvious from the context we mean the lifting t f of f the monads used in this paper are defined in table computational metalanguage in this paper by computational metalanguage ml for short we mean the simply typed lambda calculus with products monadic types and algebraic operations see the set of generated from a set b is defined by the following b · · · · · · t b b we specify a ml by a b o s where b and o are sets of base types and operator symbols respectively and s o is a function assigning an arity to each operator symbol o o here is the subset of consisting only of base types product types and types see section for the distinction on a semantics of ml is specified by a a tuple c t where c is a t is a strong monad on c and assigns category symbol definition of functor object part powerset monad nonempty powerset monad set pp pi i pi i writer monad set wr × i exception monad set distribution monad set ds ds i f i lifting monad f finite ii f i cpo l li i table definition of monads an object b c to each b b we extend this to using the structure of c a algebraic operation o for t to each o o such that so h and an nary algebraic operation o for t to each o o such that so in monoidal category a monoidal category consists of a category c an object i c called the tensor unit a c c called the tensor product and natural isomorphisms l r a satisfying coherence axioms see section xi a monoidal category is strict if l r a are all identities for every category c the functor category c c together with the identity functor and the functor composition forms a strict monoidal category exercise xi we use this strict monoidal structure as the default one on c c a lax monoidal functor lax is in section xi between monoidal categories c d consists of a functor f c d a morphism fi i fi and a natural transformation fi f j fi j satisfying certain conditions when fi and are identities we replace lax with strict we write resp for the category of strict monoidal categories and lax resp strict monoidal functors between them parametric effect monads monoids as effects the role of effects in various effect systems is to represent of computational effects caused by programs as we stated in section we adopt the following abstract of the concept of effect effects form a monoid a monoid is exactly a monoid object in the cartesian monoidal category pre it consists of a preorder e an element e and a monotone function · e e that satisfy the axioms of monoid below by e e we mean e e e e to save space by the of e and e we mean e · e a partially ordered monoid is a monoid such that e e e e by join semilattice we mean a partially ordered monoid whose monoid structure is given by the join operator we identify monoids and strict monoidal small categories parametric effect monads we introduce the main subject of this paper parametric effect monad definition let e be a monoid a parametric on a category c is a lax monoidal functor t e c c this is expanded to the following elementary definition definition let e e · be a monoid a parametric consists of the following data an t e c c for every e e a natural transformation t e e t e t e for every e this satisfies e t e e t e e · t e e t e e a natural transformation t id t a natural transformation t e t e t ee for every e e e these data make the following diagrams commute t e t e t e et e e t e t e te e te e t ee t ee ee t ee t te t e t e t t e et e e t e t ee t e t ee t e e e t parametric effect monads can be equivalently presented in the form of triple definition let e e · be a monoid an parametric triple on a category c consists of the following data a functor t i e c for every i c a morphism i i t i for every i c a mapping ee ci t e j ct ei t for every i j c and e e e we call this mapping lifting these data satisfy below f i t ej and g j t ek t e ej f ee t ee f ee f ee t e ei t ee f ee f e i f i e ei f f ee proposition let e be a monoid then parametric on a category c correspond to parametric e triples on c parametric effect monads are yet to interpret the typing rule we need on them so that we can add an extra parameter to the lifting ee ci × j t ek ci × t e j t we derive the concept of strong parametric effect monad as follows for a category c with finite products we write c cs for the category of strong and strong natural transformations between them we then it with the strict monoidal structure given by the identity functor and the composition of strong definition let c be category with finite products and e be a monoid a strong parametric is a lax monoidal functor t e c cs we can alternatively define the strength as a between a parametric effect monad t and the action of c to itself see section we note that set sets is isomorphic to set set thus there is no difference between parametric and strong ones on set maps from parametric effect monads to monads we introduce a particular type of morphism for parametric effect monads this will be used in section to express the situation that a parametric effect monad specifies predicates on the underlying definition let p c d be a functor t be a parametric effect monad on c and s s µ be a monad on d we say that p maps t to s if pt ex px x though we omit the detail there are other variations of morphism for parametric effect monads they are of the morphisms for monads studied in eg examples of parametric effect monads example monads parametric effect monads monads let us write for the trivial monoid then parametric monads on a category c correspond to monads on c this is an instance of the fact that monoids in a monoidal category v correspond to lax monoidal functors of type v example parametric writer monad this example shows the writer monad whose output strings are delimited by a given language let be a set of alphabets we consider the following partially ordered monoid e of languages over e p · where e · e ll l e l e then the following data t ei e × i i il l i ll i give a parametric on set although t inherits the structure from the writer monad wr each t e is not a monad example totality types this is the semantic analogue of totality types by et al we consider the partially ordered monoid e par bot · whose order and multiplication are defined as follows par bot x · y bot par x bot y bot x y otherwise the functor t e cpo cpo mapping the above diagram to the following diagram in cpo cpo k l l k id ki ki extends to a parametric on cpo we next give parametric effect versions of the state monad and the continuation monad for this we employ a categorical construction called end section ix let e e be a set the end of a functor f × e set is denoted by ee fe e and consists of the tuples ee fe e such that e e e e e fe e ee fe e ee example parametric state monad let e e · be a monoid and s e set be a functor then the following end t ei s d i × s de de extends to a parametric this end collects the state transformers that take a state of type s d and update it to a state of type s de the effect e abstractly represents what state transformers perform on states it is added after d because e is the action performed on the state example parametric continuation monad we continue using e and s in the above example the following end t ei i s d s ed de extends to a parametric an element in t ei is a computation c that takes a continuation k of type i s d and computes a value in the return type s ed the effect e abstractly represents what c performs on the return type as continuations are invoked after the main computation of c d is added after e monads indexed by let e be a poset let us call a functor of type e an monad where is the category of monads on c and monad morphisms between them it is employed to model the layered structure of computational effects in meta language ml the typing rule for let expressions in ml m t e x n t e e e let x be m in n t e is to the one in general effect system indeed when e is a join semilattice the general typing scheme augmented with the side condition e e yields the above rule because t ee t e we can say more than this syntactic relationship theorem let e be a join semilattice then monads correspond to parametric this theorem is an analogue of theorem which is stated within framework generalized monads also determine indexed monads that map the least element to the identity monad there are many examples of monads indexed by join see eg parametric effect monads via effect observations we next introduce a construction of both a monoid e and a parametric on set from effect observations this construction is based on the following nature of effects effects are expressions of an ordered algebra this point becomes clear when moving to an effect system such as the one for behaviour analysis of concurrent ml programs there effects are process algebra expressions ordered by their behaviour we capture an ordered algebra structures on effects by a monad s on set it is a pair of a monad s on set and an assignment of a preorder i on si to each set i satisfying for every function f i sj f is a monotone function of type si i sj j and congruence for every function f g i sj f j g implies f j g here j is extended to the pointwise order for functions the assignment corresponds to a pointwise on sets see for the detail effects are abstractions of computational effects each effect abstractly expresses some aspects of actual computational effects caused by programs we capture this situation by considering a monad t that models programming languages computational effects and a monad morphism t s that computational effects and gives their abstract representations ie effects we package the above data into an effect observation definition an effect observation of a monad t on set consists of the following data a monad s on set a monad morphism t s the notation for an effect observation of t is t s first from an effect observation we construct a monoid of effects let us write for the algebraic theory corresponding to s we then define an effect to be a in one variable in other words an element in s such carry the canonical monoid structure given by the variable substitution the monoid unit is the variable itself and the multiplication · is the substitution e · e ee of e into in e we express this monoid structure in terms of s definition let s be a monad on set we define the monoid s · by s e · e x es e we denote this by s next we construct a parametric let e s be an effect we consider the composite function vi ti ti s it first extracts the computation part of x ti by replacing all the values inside x to then the monad morphism gives its abstract representation as an effect we then express that the computational effect of x is included in the scope of e by the inequality vi x e which we use to ti by effects theorem let t s be an effect observation of a monad t on set we define the following assignment d of sets x ti e e s i set together with the inclusion function ii t i then the unit ti restricts to a function of type i di for all function f i de j ij f t restricts to a function of type the tuple of d t and f ee i f t is a parametric s triple when giving an effect system it is desirable to have the join operator on effects apart from a monoid structure because we can use it to unify the effects given to different branches of case expressions the following examples mainly observe a t that models computational effects by means of another monad s whose preorder admits the join operator so that s also admits the join operator in some cases s is given as the extension of t with the join operator example we construct a parametric effect monad that is suitable for exceptions raised by programs there is a distributive law p p and from this we obtain an effect observation of p p definition gives the following partially ordered monoid ok · whose monoidal product is given by e · e e ok e e ok e the parametric monad d induced by theorem is e v i ok e we illustrate how effects in and the parametric effect monad d describes computational effects · c is a computation that terminates normally without raising any exception · c is a computation that either terminates normally or may raise an exception a but no other exception will be raised · c is a computation that will raise either an exception b or c but do nothing else including normal termination the monoid structure of appropriately captures the fact that the exception raising the rest of the computation for instance consider the sequential execution of the computation c followed by c as c never terminates normally we will not observe the computational effect caused by c the monoid multiplication of gives the following effect to the sequential execution c c · ok which correctly captures the computational effect of c c example the previous example let be a firstorder signature without equational axioms and o be the set of symbols defined in we write t for the monad of free algebra and aim to design the parametric effect monad that the occurrences of operators in t ti and also the of t the monad morphism we use to observe t is the following t var x ot · · · tn t · · · tn it collects the operator symbols and variables occurring in t the partially ordered monoid derived from the effect observation t var is var var · whose multiplication is given by e · e e var e e var e the parametric d derived by theorem is t ti ti e we illustrate how this parametric effect monad occurrences of operator symbols and of terms · t vari is a term consisting of operator symbols s z and variables it may be closed no other operator occurs in t · t op f i is a closed term consisting of the operator symbols f c only example we derive example by theorem we consider the writer monad wr there is a distributive law wr p p wr and from this we obtain an effect observation of wr p wr wr p wr definition yields the partially ordered monoid of languages over and theorem yields the parametric effect monad that is isomorphic to the one in example example we consider modelling the programming language that has a character output operator and a binary probabilistic choice operator p which chooses the left computation with probability p or the right one with probability p we model these computational effects by the composite monad ds wr of the distribution monad and the writer monad we first derive a parametric effect monad that output strings of programs ignoring their output probability for this we use the monad morphism ds p that computes the support of a given distribution i i di by composing the writer monad we obtain the following effect observation of ds wr wr ds wr p wr we apply theorem to this situation it yields the partially ordered monoid of nonempty languages p over cf example the parametric is then given as d d e d ds × i l i i dl i l e example from the above example we next derive another parametric effect monad that takes it into account the probability of output strings following the pattern of example and we extend the algebraic theory of distribution monad ds with the join operator then use the embedding of ds to the extended monad as an effect observation the extension of ds with the join operator is known to yield the monad that collects convex subsets of distributions which we explain below let x ds i be a subset of probability distributions over i the convex closure of x collects all the probabilistic combinations of distributions in x cx n n i ti · di t ds · · · n d xn when cx x we call x convex the monad cv of convex subsets of distributions then collects all the finitely generated nonempty convex subsets of ds i cv i cx x fin ds i the inclusion relation between convex subsets gives a preorder on cv we write pi cv i cv i for the probabilistic of two convex subsets x pi y d p d d x d y the singleton set function i ds i cv i is a monad morphism hence we obtain an effect observation wr ds wr cv wr by applying theorem we obtain the partially ordered monoid cv · and a parametric d ds × i d e where d ds is the distribution given by dl ii dl i we see the role of the in effects consider the follow ing conditional expression m if n then else this is a deterministic program that outputs either a or b the summary of the side effect is thus m outputs a with probability or b with probability but it is yet what is the probability of choosing then branch and else branch by the conditional expression the monad cv handles this situation by taking the convex closure ca b a p b p p to give the overall probability of the output strings of m effect observations in an setting we next give an analogue of theorem in a category c we assume that c has a terminal object and that c has chosen objects of the following form fj fj j i j f an informal way to see the object f j is that it is the of the inclusion of the j j along f below we write c for the underlying ordinary ie category of c an effect observation of a monad t on c by a monad s on c is a monad morphism t s where s is the underlying ordinary monad on c theorem under the above c and an effect observation t s the following e is a monoid and d is a parametric on c e c s s s f g gs f ti e example we derive a parametric effect monad whose effects can capture the behaviour of nonterminating programs we consider the computational effect of divergence and bell and represent it by a monad on the category of algebraic and all continuous functions between them this category is has a terminal object and has the object of the form it is also closed under the lower powerdomain construction see eg we use the lazy counter monad which is denoted by b in this example to represent divergence and bell the bi is given as the least solution of the recursive domain equation x i x and its diagram is depicted below in the diagram i ranges over i and x y means x y o i o i o i · · · bi y · · · each element in bi denotes a that may happen by executing a program · an element x x n stands for the that the program the bell x times and it is still running · the element stands for the that x holds for all x n thus the program the bell forever · the element x i stands for the that the program the bell x times then it terminates and returns a value i especially when i the element x stands for that the program the bell x times and terminates the order on these elements captures the implication relation between corresponding · the order x i x reflects that if a program terminates after the bell x times then the program is indeed running right after the bell · the order x x reflects that if the x happens then x also happens before the bell · the always happens for any program because there is a moment right after the program starts thus is the least element we next consider the composite functor pl b where pl is the lower powerdomain construction the composite extends to a locally monotone monad over the we then obtain a monad morphism pl b b pl b to which we can apply theorem the carrier set of the partially ordered monoid given by theorem is isomorphic to the poset c of n × pn consisting of pairs k x such that x k each pair k x encodes the following subset of b below x denotes the of x k x k x xx and an effect k x means that one of the in k x happens we note that k c expresses the behaviour of programs that never terminate the unit of e is and the multiplication is k x · l y k x l x y x x y y xx we especially have k y k corresponding to that when the first expression of the sequential composition never terminates the second expression will never be executed thus its effect will be discarded the parametric by theorem is the following with the function bi defined by x i x x x x the parametric d is given by x bi x e algebraic operations for parametric effect monads we extend plotkin and algebraic operations introduced in to strong parametric effect monads a straightforward extension is the following definition let e be a monoid and t be an strong parametric on a c for i j c and e e an i j algebraic operation for t is a family of morphisms j t ek i t natural on e such that for any f l × k t e m the following square commute l × j t ek c j l × t ek j f j t l × i t c i l × t i i f t for n n and e e an n algebraic operation is similarly defined by replacing j with n and i with id in the above diagram an easy calculation shows that i j algebraic operations for t correspond to morphisms of type i t ej this is an analogue of the correspondence between algebraic operations and generic effects stated in algebraic operations with different effect arguments the above extension of algebraic operations is natural but not satisfactory in some situations the reason is a single effect e may not be precise enough to capture the effect of an algebraic operation and the arguments of an algebraic operation has to have the same effect let us see these problems with the parametric d over the distribution monad ds in example we consider restricting the domain and the codomain of p to obtain a algebraic operation for d following definition it is a certain family of functions of the following type pi × what is an appropriate choice for e actually is the the best since the choice operator itself does not output any string if e contains some output strings with nonzero probability then it introduces garbage to the of output strings we then that the effect does not describe the behaviour of the computational effect p even if we accept e we have another point in using the algebraic operation of the above type when two computations c and c having different effects to pi we first need to their effects to for example c c de ei then the probabilistic choice of them yields the computation c pi c de ei but this is too for instance even when p ie the left argument the effect of the left computation after the probabilistic choice our solution to these problems is to allow the effects in the argument position of algebraic operations to be different with each other for instance in the context of example we give the following domain and codomain to p × de p ei so that the effect can say more precisely how argument effects are processed by the algebraic operation we this idea below definition let e e · be a monoid and t be an strong parametric on a category c with finite products an nary effect function on e is a functor en e such that e · · · en · e ee · · · below we abbreviate the sequence ee · · · to ee let be an nary effect function on e an n algebraic operation for t is a family of morphisms t ei × · · · × t t e · · · which is natural on e · · · en e such that for any f k × i t e j the following diagram commute t n i k × t f t k × t ei f ee t i t in the above diagram f ee k × t ei t is the lifting of f using the strength of t currently it is not clear how to extend the arity in the above definition to arbitrary objects in c this technical limitation also affects the design of effect systems in section there algebraic operations in effect systems are classified into two groups one corresponding to definition and the other corresponding to the above definition we gave a construction of the parametric effect monad d from an effect observation t s in theorem we next show that every nary algebraic operation a for t can be restricted to an n algebraic operation for d where is constructed from a and recall that the monad morphism maps the nary algebraic operation a for t to the one for s we denote it by a theorem let t s be an effect observation of a monad t on set and a be an nary algebraic operation for t we write d for the parametric effect monad derived from the effect observation by theorem function a sn s is an nary effect function on s each ai restricts to a function of the following type ai × · · · · · · and this is an n algebraic operation for d example from example from theorem the binary algebraic operation p for ds wr restricts to an p algebraic operation for the parametric effect monad in example example let be a firstorder signature without equational axioms and t be the monad of free algebra there always exists a distributive law t p p t and we obtain the effect observation t p t definition applied to this situation yields the monoid pt the parametric d of theorem is t ti e each term t t · · · n gives the following nary algebraic operation at for t tn theorem associates to this algebraic operation the following effect function on pt · · · en ti ei and at restricts to the following n algebraic operation for d de i × · · · × i ti simplytyped monomorphic effect systems with effect subtyping we introduce two simply typed monomorphic effect systems and these two systems differ in handling effect subtyping both are adopted in many works for instance · the calculus explicit by effect coercion operators t e e this language is close to the one considered in ml where the point we can types is limited to let expressions another example of the effect system that explicit is · the calculus implicit of judgements are and the rule does not change of judgements each type of is a refinement of its underlying see eg these systems are specified by an we define the set of ground types generated from b by the following b · · · · · · b b n we write for and n for · · · definition an consists of the following data a monoid e e · a set b of base types a set o of symbols for algebraic operations a function giving to algebraic operation symbols s o × e in n n nary effect function on e the arity h e and in are given to the algebraic operations in the style of definition and respectively every e b o s determines an b o s by the effect information from s throughout this section we use a fixed e b o s with e e · both calculi and share the same set of types defined as follows b · · · · · · t e b b e e we define the erasure function by the one that recursively replaces t e by t we extend to typing contexts in the canonical way explicit calculus the calculus extends the simply typed lambda calculus with products and with the following raw terms m x be m in n t e e m om om · · · m the first two are parametric of constructors and let expressions in ml the third one is the effect coercion operator the last two are the syntax for algebraic operations the typing rules are displayed in figure the equational theory of extends the equational theory for the simply typed lambda calculus with products and by the equational axioms displayed in figure the axioms and guarantee the of t the axioms are a syntax representation of the axioms of parametric effect triple definition the axioms and guarantee that each o o behave as an algebraic operation for t the axiom is for the symbol o o such that so h e while is for o o such that so in the semantics of is specified by an definition an consists of the following data a c and an strong parametric t on c an object b c for each b b we extend this assignment of to base types to ground types see section using the structure on c in the canonical way a algebraic operation o for t for each o o such that so h e an n algebraic operation o for t for each o o such that so in interpretations of and terms are straightforward theorem let c t be an for every m n if m n holds in the equational theory of then we have m n implicit calculus the implicit calculus is designed to be a refinement type system for the computational metalanguage ml the subject m of an m is an thus raw terms do not contain coercion operators t e e and effect annotations on let expressions are removed variable binders are also annotated with instead of proposition if m then ml m we move to the semantics of the basic idea of refinement type is that each refinement type specifies a certain part or a predicate of its underlying type to model this idea we employ a categorical setting that provides the concept of predicate on objects in a category a simple setting to talk about predicates on objects in a category c is to consider a faithful functor p p c we then regard · p as the category of predicates on objects in c · px i as x p is a predicate over i c · p f x y f i j as f image of x is included by y and the morphism f as the unique witness of this statement below for objects x y p and a morphism f px py in c by f x y we mean the statement there exists a unique f x y in p such that p f f from the above viewpoint x y corresponds to x implies y for predicates x y over i c thus the category consisting of objects x such that px i and morphisms f such that p f may be seen as the preorder of predicates on i we name this category pi and call it the category over i besides there are products arrow types and monadic types on refinement types we thus assume that p is a and that a parametric effect monad t is given on p the introduction and elimination of these type structures are with those of the underlying we capture this situation by that p strictly preserves the structure on p and maps t to t see definition the following two definitions the above discussion definition let be a an with predicates consists of the following data a c t a p we denote the structure with a dot like × · · · a faithful functor p p c such that p strictly preserves the structure and each pi has the largest element i the common typing rules for and in the type annotation x at a variable binder is replaced by x mi i i n m · · · n i n m · · · mn · · · n i m i m i i n m · · · n xi i mi i n i m · · · n case m with x m · · · n mn x m m n x m mn m t e so h e m t e · · · mn t en so in om t ee om · · · mn t e · · · en typing rules specific to m t e e e m t e x n t e t ee m t e x be m in n t e · e typing rules specific to m t e e e m t e x n t e m t e let x be m in n t e · e m t figure typing rules of and te e m m t e e t e e m t e e m x be t e e m in n t ee ee x be m in n x be m in t e e n t ee ee x be m in n x be m in n x be m in x m x be m in y be n in l y be x be m in n in l x be om n in l x be m y in l n so h e x be om · · · mn in n x be m in n · · · x be mn in n so in figure equational axioms for the notation for a with predicates is p p c t we note that the largest element i in the pi corresponds to i itself in p or the predicate true definition an is a pair of a p p c t with predicates and a strong parametric t on p such that the functor p maps t to t see definition for each o o such that so h e the algebraic operation o for t satisfies for all e e x p o px t ex t for each o o such that so in the nary algebraic operation o for t satisfies for all e · · · en e x p o px t ex × · · · × t t e · · · the notation for an is p p t c t given an p p t c t we interpret the calculus as follows we interpret each type by an object p b · · · n · · · n t e b · · · n · · · n t e we have p thus refinement types are indeed interpreted by a predicate over we then show that the interpretation of the underlying of an respects the predicates given by refinement types theorem let p p t c t be an for all x · · · xn n m the interpretation of the x · · · xn n m which is derivable by proposition in the c t satisfies m × · · · × n soundness of to effect specifications we next discuss the soundness of with respect to effect specifications recall that the primary purpose of effect system is to statically estimate computational effects caused by programs to show the soundness of the we first need to specify the meaning that is the scope of computational effects of each effect then the soundness of an effect system is that for every program m having an effect e the computational effect of m is included in the scope assigned to e in our semantic framework this discussion is roughly formulated as follows let p p c t be a with predicates we specify the meaning of each effect e as a s be above t b here b is a base type we then say that is sound with respect to the specification s of effects if for all judgements m t e b in m s be we actually allow certain type of free variables to occur in m definition let p p c t be a with predicates an effect specification of in p is just a family of functors ie monotone mappings s b e pt b bb definition let p p c t be a with predicates and s be an effect specification of in p we say that is rank sound with respect to s if for all x b · · · xn bn m t e b the interpretation m of its in c t satisfies m b × · · · × bn s be rank sound with respect to s if for all x t e b · · · xn n t en bn m t e b the interpretation m of its satisfies m n i i s bi ei s be below by a condition on the faithful functor p p c of a with predicates we show that the soundness of is derivable from a combination of the following closure properties on effect specifications definition from definition we say that · s is closed under algebraic operations in if it satisfies the following two a for each o o such that so h e the algebraic operation o for t satisfies for all e e b b o b s be s b for each o o such that so in the nary algebraic operation o for t satisfies for all e · · · en e b b o b n i s s be · · · en · s contains values if for all b b b b s b · s is closed under lifting if the unit ti r ti i tr tr of the continuation monad transformer satisfies for all e e e b b b tb b s be b s b e s b ee the condition we impose on p is that p is a with small products such are often used in the categorical formulation of logical relations see under this condition we can construct a strong parametric on p from effect specifications it is a variation of the categorical lifting in the construction proceeds as follows let p p c t be a with predicates such that p p c is a with small products also let s be an effect specification of in p for each x p we first define an auxiliary t e e e b b by the following inverse image in the p t x s be s p t px px t b t b b p c see also example we then define t s ex to be the following small product ie meet in the category t s ex t e eb b theorem let p p c t be a with predicates such that p is a with small products also let s be an effect specification of in p t s is a strong parametric on p and p maps t s to t if s is closed under algebraic operations then we have an p p t s c t if s is closed under algebraic operations and contains values then is rank sound with respect to s s is closed under algebraic operations contains values and is closed under lifting if and only if is rank sound with respect to s theorem is a parametric analogue of theorem example let b o s be a set t be a and t s be an effect observation we assume that contains only natural algebraic operations the subobject p subset set see chapter provides the data and of definition and has small products therefore p subset set t is a with predicates we next derive an s b o s where s is defined by so n o so in this s assigns the effect function to each operator symbol in o by theorem we give an effect specification s of in p by means of the parametric effect monad d derived by theorem s be de b t b this is closed under algebraic operations in thanks to theorem and moreover s contains values and is closed under lifting because d is a parametric effect monad by theorem is rank sound with respect to s that is for every x t e b · · · xn n t en bn m t e b the interpretation m of its in set t satisfies for all functions fi i bi and x we have m x f · · · xn de b related work and introduced a semantic structure called and in as a solution to problem and through a of in terms of multicategory theory we show that parametric effect monads are on total a good reference for multicategory theory is let us write for the category of and maps between them there is an relating and strict monoidal categories section u o f the right adjoint u maps a strict monoidal category c i to its underlying multicategory uc example it has the same objects as c and its are defined by · · · in j ci · · · in j the functor u preserves we also mention a relationship between lax monoidal functors and maps for stated as example in for each strict monoidal category b and d we have the following bijection d we omit the definition of and see section we give the following of and theorem section correspond to small below we identify these two concepts let f be an then correspond to maps for of type f uc c for a monoid e ue is an called total section the following proposition is a consequence of proposition let e be a monoid then parametric on a category c correspond to on c we end this section with the discussion about the unification of and parametric effect monads let f be an using the f u and the inclusion of categories we obtain uc c c c c c we note that ff is not in general this suggests that can be encoded by general parametric monads actions of monoidal categories parametric effect monads are an instance of the concept of action of monoidal categories depending on the degree of the preservation of monoidal structure there are several variations of this concept each of which corresponds to strong lax and monoidal functors of type m c c in mathematics a category equipped with a strong action of a monoidal category is sometimes called an not a and studied in eg in a strong action of a category with finite products is used as a part of a value producer model parametric effect monads are exactly lax actions of monoids lax actions of general monoidal categories are called parametric monads in and negative in they are introduced to give a unified account of the strength of the continuation monad and the weak distributive law in linear logic the categorical analysis of parametric monads in are readily applicable to parametric effect monads especially the concept of for parametric monads in will provide a method to parametric effect monads hence effect systems as well compared to this paper provides new examples and constructions of parametric effect monads arising from the study of a semantics of effect system we note that parametric effect triples and the parametric state continuation monad can be defined for general monoidal categories recently et al study actions of monoids to categories under the name indexed definition although they are the dual of parametric effect monads the spirit of their work is very close to this work it is interesting to see whether we can the construction of parametric effect monads using effect observations we finally mention a possible of parametric effect monads a monoidal category m and a lax monoidal functor of type m c c corresponds to the bm and a lax functor of type bm bc c respectively this shift to the theory suggests us to take a e and a lax functor of type e bc c as a of the monoid structure on effects and the parametric effect monad an effect is now a cell e x y in e and a parametric effect monad is indexed by the domain and codomain of e like e a future work is to examine whether we can extend the techniques developed in this paper to parametric monads monads are another of monads they seem to be different from parametric effect monads to exhibit this difference we recall that c categories are monads on c thus c categories are a of monads they correspond to monads monads are a further of such categories shows an encoding of monads as section at this moment we do not know if it is possible to directly encode monads as parametric effect monads denotational semantics of effect systems the implicit system and its denotational semantics are used in the study of program optimisation ­ the semantic framework we introduced in definition and is by these works which use categories as the categories of predicates they manually construct the denotation of monadic types on the category of predicates while in this paper we give a mechanical method to construct parametric effect monads by a variant of the semantic lifting conclusion under the formulation of monoids as a structure on effects and parametric effect monads as a semantic structure for the monadic type we studied their properties constructions and applications to the semantics of effect systems parametric effect monads admit various of the structures that exist in the theory of monad we gave a construction of parametric effect monads from effect observations and semantics of implicit calculus we then discussed the soundness of with respect to a given specification of effects a future work is to extend the arity of definition to arbitrary objects so that we can handle fresh name and local stores it is also interesting to extend the construction in theorem to the one over a general category c thanks to and anonymous reviewers for their helpful comments and suggestions on this paper additionally thanks to for an discussion in this work was supported by grant number references r m and pl curien domains and cambridge university press new york ny usa r notions of computation j program ­ g p l and j editors applied semantics international school september advanced volume of lncs springer n benton and p semantics of an effect analysis for exceptions in proceedings of acm sigplan international workshop on types in languages design and implementation pages ­ acm n benton j hughes and e moggi monads and effects in et al pages ­ n benton a kennedy l and m hofmann relational semantics for program transformations with dynamic allocation in proceedings of the th international acm sigplan conference on principles and practice of declarative programming pages ­ acm n benton a kennedy l and m hofmann relational semantics for program transformations higherorder store in proceedings of the th international acm sigplan conference on principles and practice of declarative programming pages ­ acm n benton a kennedy m hofmann and l reading writing and relations in programming languages and systems th symposium proceedings volume of lncs pages ­ springer a representing layered monads in proc popl pages ­ jc a theory of monads parameterized by effects research report paris november b categorical logic and type theory b trace semantics for combined and probabilistic systems notes theor comput sci ­ o and g d plotkin algebraic foundations for optimisations in proceedings of the th acm sigplansigact symposium on principles of programming languages pages ­ acm s a semantic formulation of lifting and logical predicates for computational metalanguage in proc csl volume of lncs pages ­ springer s relating computational effects by lifting inf comput ­ s and t on monads and simulations in foundations of software science and computation structures th international conference proceedings volume of lncs pages ­ springer gm and g a note on actions of a monoidal category theory and applications of categories ­ a strong functors and monoidal monads der ­ s lack and r the formal theory of monads ii journal of pure and applied algebra ­ t higher higher categories london mathematical society lecture note series cambridge university press p b a synthesis springer j m and d k polymorphic effect systems in proceedings of the th acm sigplansigact symposium on principles of programming languages pages ­ acm s categories for the working second edition volume of in mathematics springer pa parametric monads and manuscript pa the parametric continuation monad mathematical structures in computer science in of for his th e moggi notions of computation and monads inf comput ­ f nielson and h r nielson from cml to its process algebra theor comput sci ­ february f nielson h r nielson and c principles of program analysis print springer t d a and a unified static analysis of in automata languages and programming th international colloquium proceedings volume of lncs pages ­ springer g plotkin and j power algebraic operations and generic effects applied categorical structures ­ l h r nielson and f nielson strictness and totality analysis in static analysis volume of lncs pages ­ springer berlin jp and p the type and effect discipline inf comput ­ r the sequential semantics of producer effect systems in the th annual acm sigplansigact symposium on principles of programming languages pages ­ acm j and l birkedal a kripke logical relation for program transformations in of the th acm sigplan international conference on functional programming pages ­ acm m tofte and jp implementation of the typed callbyvalue lambdacalculus using a stack of regions in proceedings of the st acm sigplansigact symposium on principles of programming languages pages ­ d and g probability over nondeterminism mathematical structures in computer science ­ p wadler the of effects and monads in proceedings of the third acm sigplan international conference on functional programming icfp pages ­ acm p wadler and p the of effects and monads acm trans comput log ­ 