the principles and practice of probabilistic programming d stanford university categories and subject descriptors d m keywords probabilistic models probabilistic programs probabilities describe of and probabilistic inference describes rational reasoning under uncertainty it is no then that probabilistic models have onto the of modern artificial intelligence science and applied statistics these are all sciences of inference under uncertainty but as probabilistic models have become more sophisticated the tools to formally describe them and to perform probabilistic inference have with new complexity just as programming beyond the simplest algorithms requires tools for abstraction and composition complex probabilistic modeling requires new progress in model programming languages these languages provide compositional means for describing complex probability distributions implementations of these languages provide generic inference tools for performing efficient probabilistic inference over an arbitrary program in their simplest form probabilistic programming languages extend a deterministic programming language with primitive constructs for random choice this is a relatively old idea with foundational work by kozen jones moggi plotkin and others see eg yet it has seen a thanks to new tools for probabilistic inference and new complexity of probabilistic modeling applications there are a number of recent probabilistic programming languages eg ­ different tradeoffs in expressivity efficiency and we will focus on the probabilistic programming language church for simplicity but the design of probabilistic languages to best support complex model representation and efficient inference is an active and important topic church extends the purely functional subset of scheme with elementary random primitives such as flip a and gaussian in addition church includes language constructs that simplify modeling for instance mem a higherorder procedure that its input function is useful for describing persistent random properties and lazy model construction interestingly memoization has a semantic effect in probabilistic languages if we view the semantics of the underlying deterministic language as a map from programs to executions of the program the semantics of the probabilistic language will be a map from programs to distributions over executions when the program halts copyright is held by the popl january ­ italy acm define thunk condition let val thunk if condition val val thunk condition query defines define thunk defines pair define condition rest figure top defining conditional inference in church as a stochastic recursion sampling represents the conditional probability of the thunk on the condition predicate being true we typically use special query syntax bottom left which can be into a query thunk bottom right with probability one this induces a proper distribution over return values indeed any computable distribution can be represented as the distribution induced by a church program in this way see § § and probabilistic graphical models nets are one of the most important ideas of modern ai probabilistic programs extend probabilistic graphical models concepts from programming language research indeed graphical models can be seen as flow diagrams for probabilistic just as flow diagrams for deterministic programs are useful but not powerful enough to represent general computation graphical models are a useful but incomplete approach to probabilistic modeling for an example of this we need look no further than the fundamental operation for inference probabilistic which forms a posterior distribution over executions from the prior distribution specified by the program is typically viewed as a special operation that happens to a probabilistic model capturing observations or assumptions not one that can be expressed as a model however because probabilistic programs allow stochastic recursion can be defined as an ordinary probabilistic function fig top however see for complications in the case of continuous values a wide variety of probabilistic models are useful for tasks including learning and statistical model selection due to space limitations we only mention two characteristic examples here the first fig captures key concepts for reasoning about the game this conceptual library of probabilistic functions can be used to reason about many patterns of evidence via different queries without to specify of time the set of people the or the matches the program thus enables a very large numbers of different to be modeled and the model match human quite well a of between strength is a persistent property of each person hence memoized define strength mem lambda person gaussian laziness from match to match define lazy person flip when a person is lazy they less define person if lazy person strength person strength person total of the team is the sum define team sum map team the winning team define team team if team team team team figure modeling intuitive concepts in the domain while this model is simple probabilistic queries can explain human reasoning from evidence with high quantitative accuracy the basic how is the world given that the is true define query define world world meaning world the what should i say so that the infer the right world define world query define equal world the smart how is the world given that a chose this to express it define query define world world equal world figure a probabilistic model of natural language using to model model and human judgements in the experiments of the ability to model many is inherited from the of the underlying programming language while the ability to capture complex reasoning is inherited from probabilistic inference a more subtle model is shown in fig here we model pragmatic inference in natural language following because query is an ordinary function that may be nested in itself we are able to model a reasoning about a who reasons about a naive this model formalizes the idea that a is trying to infer what the intended while a is trying to make the form a particular versions of this model again predict human judgements with high quantitative accuracy the critical to probabilistic programming as a practical tool is efficient implementation of the inference operator it is clear that the expected runtime for the operator in fig increases as the probability of satisfying the condition decreases hence while is useful as a definition it is for real modeling tasks where the condition is typically very an obvious alternative that does not take longer when the condition is less likely is to enumerate all execution paths of the program for instance by using unfortunately naive enumeration takes time proportional to the number of executions which grows exponentially in the number of random choices this can be in some cases by using dynamic programming indeed it is possible to do inference for the simple model in fig by using a sophisticated dynamic programming approach for other classes of program such as the model fig it can be better to switch to an approximate inference technique based on markov chain one such algorithm can be derived from the a random change to a single random choice is made on each step leading to a random in the space of program executions this is guaranteed to visit executions in to their probability we random choices using their position in the execution this can be achieved by a code transformation resulting in a very lightweight inference process each step of this process requires the program in order to compute updated probabilities several orders of magnitude in speed increases are seen by compiling this probability update to do so we separate structural random choices those that can influence control flow from when we a new setting of the structural choices we the program to code which is optimized structural choices can sometimes be found automatically by flow analysis but in other instances must be annotated by hand the distinction between structural and choices can also be used to construct an algorithm that more effectively the space of executions for open universe models those that define distributions over a variable number of entities this class of programs is especially to complex procedural modeling in computer for instance et al describe models for layout of virtual worlds these procedural models typically have many random choices in this setting which exploits the of the score to make more steps in execution space can be a useful additional tool the needed can be derived automatically by a nonstandard interpretation of the program the sampling of inference algorithms described above suggests an important generalization advanced statistical inference techniques can be implemented for arbitrary programs by methods developed in programming language research program analysis nonstandard interpretation partial evaluation etc existing research only the surface of potential interactions between statistics ai and pl though technically this interaction may be the critical in complex probabilistic modeling to the world acknowledgments thanks to and for helpful comments this work was supported by grant n references n c and d conditional distributions in logic in computer science lics th annual ieee symposium on pages ­ ieee m frank and n pragmatic reasoning in language games science ­ c e and d m computable de measures of pure and applied logic ­ doi t and n d in church use of concepts in human probabilistic inference in proceedings of the th annual conference of the science society n and a knowledge and modeling language understanding as topics in science n v d k and j church a language for generative models in in c jones and g plotkin a probabilistic powerdomain of evaluations in logic in computer science lics th annual ieee symposium on pages ­ doi lics a b l de v s and r on the implementation of the probabilistic logic programming language theory and practice of logic programming ­ o and c embedded probabilistic programming in domainspecific languages pages ­ d and n friedman probabilistic graphical models principles and techniques mit press a k and s probabilistic programming via defined factor graphs in information processing systems conference b b s russell d d l and a probabilistic models with unknown objects in international joint conference on artificial intelligence pages ­ a a probabilistic rational programming language in international joint conference on artificial intelligence pages ­ morgan a an objectoriented probabilistic programming language technical report d the independent choice logic and beyond probabilistic inductive logic programming pages ­ m and p markov logic networks machine learning ­ t and y a modeling language in international joint conference on artificial intelligence a and n a dynamic programming algorithm for inference in recursive probabilistic programs d n a and j nonstandard interpretations of probabilistic programs for efficient inference in advances in information processing systems d a and n lightweight implementations of probabilistic programming languages via compilation in proceedings of the th international conference on artificial intelligence and statistics page l yang p and n on probabilistic programs through tracing and slicing under review y l yang m watson n and p synthesizing open worlds with constraints using locally reversible jump acm transactions on 