from parametricity to laws via theorem robert abstract invariance is of importance in programming languages and in in programming languages john reynolds theory of relational parametricity demonstrates that parametric polymorphic programs are invariant under change of data representation a property that yields free theorems about programs just from their types in showed that if the action of a physical system is invariant under change of then the physical system has a a that remains constant for all time knowledge of can reveal deep properties of physical systems for example the of energy is by theorem a consequence of a systems invariance under in this paper we link reynolds relational parametricity with theorem for deriving we propose an extension of system f with new kinds types and term constants for writing programs that describe classical mechanical systems in terms of their we show by constructing a parametric model of our extension of f that relational parametricity is enough to satisfy the hypotheses of theorem and so to derive for free directly from the polymorphic types of expressed in our system categories and subject descriptors d programming languages formal definitions and theory j physical sciences and engineering general terms languages theory types keywords classical relational parametricity types invariance laws introduction reynolds theory of relational parametricity tells us that polymorphic programs automatically satisfy invariance properties such invariance properties are often called free theorems after wadler since they follow for free from the types of programs rather than through detailed study of the program text an example is the free theorem for programs f with the following type f list nat permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for components of this work owned by others than the authors must be abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission andor a fee request permissions from popl january ­ san diego ca usa copyright is held by the publication to acm acm such programs take lists of s for any type and return natural numbers using reynolds theory of relational parametricity wadler showed that any f with this type satisfies the following property g l list f l f map g l thus any f with the type given above is invariant under mapping some arbitrary function g over its input in terms of abstract data types and change of data representation this free theorem states that f is invariant under change of data representation from an arbitrary type to another arbitrary type via g the use of invariance under change to derive useful consequences is a technique much than programming languages in theorem provides a general way to derive laws for physical systems from invariance properties informally speaking theorem states that every continuous symmetry of a physical system implies the existence of a corresponding a is a function of the state of the system that is constant for all time we illustrate the use of theorem with a simple example of a classical system consisting of two of equal mass m connected by a with constant k such that the are constrained to move theorem applies to systems described in terms of for classical a is a function of time and the positions and of all the in the system to the difference between the energy and the potential energy of the system for our system with two at positions x and x with x and x the is lt x x x x mx x kx x the first represents the total energy of the system in terms of the mass and while the second represents the potential energy contained within the due to the distance between the from the using the principle of stationary action we can derive the following two equations of motion for this system we describe the principle of stationary action and the process for deriving the equations of motion fully in section for this system the equations of motion are a pair of ordinary differential equations that describe how the positions and of the over time the second derivative with respect to time denotes the acceleration of the ith kx x kx x we could now proceed to solve these to further the behaviour of this system however theorem gives us a powerful way of insight into properties of these for free without necessarily having to find solutions to them this is accomplished by finding invariance properties of the the does not refer to any fixed point in space only the relative distance between the two along with their is relevant therefore the is invariant under translation in space by some arbitrary y lt x x x x lt x y x y x x by theorem invariance under spatial translation implies that the linear of the whole system is constant for all time for this system of linear is stated as the of the derivative with respect to time of the total linear of the system d dt mx x in general theorem gives us a way of deriving properties like from invariance properties like in this case we have used invariance under translation in space to derive con of linear other common examples include invariance under translation in time yielding of en and invariance under rotation yielding of an we will see examples of each of these kinds of invariance and their laws in section the invariance property stated in equation is highly of the free theorem we stated for the polymorphic program at the start of this introduction a change in representation in the input whether a change in data representation from a type to a type or a change in where time zero is counted from results in no change in the output since reynolds relational parametricity allowed us to derive the invariance properties for the program f just by looking at its type we ask the following question question is it possible to use reynolds theory of relational parametricity to derive the invariance properties of required for theorem to derive laws in this paper we answer this question we show that it is indeed the case that we can use a generalised version of reynolds theory of relational parametricity to prove the geometric invariance properties required for the hypotheses of theorem we construct an extension of system f suitable for writing invariant with a parametric model that allows us to prove invariance properties as free theorems in our system the we gave above for describing a system of two coupled by a will have the type yt cr × r y × r y × r × r r we explain this type by it down from left to right the quantifier yt indicates that we are over all translations y in space just as we did implicitly in equation the notation c denotes the type of smooth functions between spaces a smooth function is a function that is infinitely all the functions that we wish to use as must be smooth at least up to second order for the theory to work the type r g x denotes real numbers that vary with some linear transformation g and translation x in this case all the linear transformations are indicating no transformation likewise when the translation component is there is no translation thus a value of type r is invariant but a value of type r y with the translation y in the smooth function type above the domain space consists of vectors of five real numbers the time the two positions which vary with the translation y and the two and kennedy building on work by kennedy have already presented a polymorphic type system for expressing geometric invariance properties similar to the translation invariance property in equation in the present work we extend their type system by embedding it within system f the benefits of this embedding are by using the richer typelevel structure of system f we can easily add useful indexed types like length indexed vectors and smooth function types both of which would have required special treatment in the special purpose type system presented by et al secondly by using system f as our base we are able to reuse the reflexive parametric semantics presented by extending it as appropriate for our geometric setting contributions our core contributions are we the type system for geometric invariance of and kennedy as an extension of system f this shows that the special status of the types in et als work can be incorporated into a standard framework for indexed types we present a parametric semantics of our extension of system f in this model following model for basic system f each kind is interpreted as a reflexive graph our key technical contribution is to note that the many geometric groups that we wish to incorporate are expressible as and hence as reflexive graphs we therefore show that reynolds theory of relational parametricity generalised to indexed types by considering reflexive graphs already geometric invariance properties finally we connect the free theorems derivable from our parametric semantics with theorem for deriving laws we present many examples of invariant expressible in our type system along with the laws for physical systems in each case the necessary invariance property is derived from the type of the outline · in the next section section we describe the necessary background to understand theorem and the laws it generates we briefly introduce the formulation of classical define precisely what it means for a physical system to be invariant under transformations and state theorem · having shown how invariance generates laws in section in section we show how to derive invariance properties from indexed types we present a parametric semantics for system f and show how geometric invariance properties can be within this semantics · in section we construct a type system for classical by extending system f with the necessary constants for smooth function types and combinators for constructing smooth functions programming directly with our combinators in raw system f is due to the style required so in section we define a surface syntax for defining smooth functions that is translated into our applied system f · in section we present several examples of using our extension of system f for writing invariant that describe physical systems · section concludes and offers directions for further work laws from invariance theorem applies to systems described using the formalism of a of classical in this section we can only offer a very brief introduction to the concepts of the reader is referred to other sources such as and or for the necessary background in the mathematical theory of classical and theorem make crucial use of the calculus of variations and provide a good introduction to this topic in this section we will to keep the presentation relatively elementary however some knowledge of differential and integral calculus will be required knowledge of basic will also be helpful we will use standard notation from and mathematics for and partial derivatives in particular when discussing derivatives with respect to time we use dot notation x for the first derivative of x with respect to time and for the second derivative is a branch of along with to discover the underlying structure of classical by it in different terms and action for classical mechanical systems are described in terms of l t v where t is the total energy of the system and v is the total potential energy the is a function of time the positions of all the in the system and their this is usually written like so with of notation for q which is a variable here not the derivative of a function lt q q t v in this expression q and q are actually vectors containing the components of the position and vectors for each a key feature of is that the coordinate system used to describe the system need not necessarily be the usual cartesian for example one of the components of q might be the of of a this use of generalised is one of the advantages of over the presentation in terms of positions and forces the for a particular system is used to define the action of that system for a particular path q r rn and a b in time the action of the l over this path is defined by the following integral b sq a b lt qt a below we will use the principle of stationary action to select the paths from all the possible paths q r rn example we have already seen an example of a in the introduction describing a system of two coupled by a another example of a describes a system consisting of a single of mass m upon by a constant downward field with potential g lt x y x y mx y again the left represents the energy of the system in terms of the mass and and vertical of the the right represents the potential energy of the system due to the fields strength determined by the distance from a fixed at y the principle of stationary action the principle of stationary action states that the paths q are the paths that yield stationary points ie either or of the action sq a b for all a and b defining what is exactly meant by a stationary point of the action is beyond the scope of this paper and can be found in standard references on the calculus of variations such as and the key point for our purposes is that a path q satisfies the principle of stationary action if and only if it satisfies a system of derived from the l called the equations d l l dt qi qi the derived from the for a classical mechanical system are called the equations of motion for the system the notation in the equation while standard is not exactly clear especially to a programming language used to a more careful treatment of variables the two partial derivatives l qi and l qi take partial derivatives of l with respect to qi and qi as variables the derivative with respect to time d dt then treats qi as a function of time hence the of the second derivatives in the equations of motion and the standard presentation of for this kind of notation and define a notation based on the scheme programming language we to with the standard notation as used in just for example computing the equations for the above yields a pair of one each for the x and y of the single of the system note that both these have the form f just as in second law allows from the principle of stationary action the derivation of second law instead of it as an axiom theorem as we described in the introduction theorem provides us with deep insights into the properties of the solutions of the equations formally theorem requires the invariance of the action s rather than invariance of the itself we therefore first define what is meant by invariance of the action and then state theorem invariance of the action let b sq a b lt qt a be the action of some physical system described by the l assume a invertible function r r that transforms time in some way and a function n r n r that transforms the vector of generalised q to another vector of generalised q the action s is invariant between the a and b under the transformations and if it is the case that for all paths q b lt qt b ls qs a a ds where qs q s is the path q transformed by and by change of variables the right hand integral in the above equation is equal to the following integral b lt qt t · a ds for our application to classical the a and b are arbitrary so we can rewrite equation to the following equation between applications of the lt qt qt lt qt t · t ds for most examples it will be the case that has the form t t t and is an affine transformation q x where g is an real matrix and x rn in this case equation simplifies further using the definition of q and the chain rule of to lt qt qt lt t x equation is obviously implied by the following equation where we treat q and q as universally quantified variables instead of as functions of time lt q q lt t x equation is the form of invariance that the free theorems we derive from the types of our typed language for classical will usually take we define our type system for classical in sections and below example in the introduction we stated that the describing the system is invariant under translation in space our running example in this section the for the single under is not invariant under all spatial translations due to the reference in the potential energy term to the distance from the fixed at y it is invariant under translations along the however both are also invariant under translations in time a special case of equation lt q q lt t q q this invariance property is simply a consequence of the fact that neither explicitly the time t theorem theorem applies to actions that are invariant being invariant means that instead of having fixed transformations and we have two families of transformations and indexed by a real parameter such that and are the identity function theorem if the action b sq a b lt qt qt dt a is invariant under indexed families of transformations and then the equation d dt n l i qi i l n i qi l qi holds for all paths q satisfying the equations where and proof eg and section example in example we noted that the and are both invariant under arbitrary translations in time in terms of continuous invariance their corresponding actions are invariant under the families t t and q q these definitions into equation we learn that for these systems d dt l i qi l qi for the we obtain d dt mx x kx x and for the single under we obtain d mx y dt in both cases we have discovered that as a consequence of invariance under translation in time the total energy of the system is note that the in the original have turned into s in general invariance under translation in time implies via theorem of energy this our short introduction to and theorem we have shown how theorem can be used to derive laws from invariance properties we now go on to showing how suitable invariance properties can be derived from types building towards section where we construct a type system for writing that expresses invariance properties directly in the types in section we give examples of invariant and their laws invariance from types we derive invariance properties from types by constructing a parametric model of system f which we then extend with suitable kind type and constants for writing invariant our parametric model is based on the reflexive graph model presented by based on previous work on reflexive graph models of relational parametricity by and and in reflexive graph models of relational parametricity the kinds of system f are interpreted as reflexive graphs while types are interpreted as morphisms of reflexive graphs as demonstrated by uniformly interpreting kinds as reflexive graphs allows for a straightforward interpretation of higher kinds like in the present setting reflexive graphs will allow us to arbitrary as kinds section kinds are the key technical tool that we need to derive the kinds of geometric invariance properties we need for theorem system f syntax and parametric model we now present the syntax and parametric semantics of system f since we will incrementally extend the syntax of the system throughout this section and the next we do not state a final triple of theorems stating that we have correctly interpreted kinds types and terms rather we state the necessary properties of the interpretation as three separate properties properties and below and maintain them as we extend the system we from the standard presentation of system f in that we distinguish between large and small kinds and only allow quantification over small kinds in particular the kind of types is not small the reason for this choice is that we a simple settheoretic model however requiring that we have a set of sets closed under large products in order to interpret quantification over the kind would force us to use an intuitionistic metatheory the basic results of the calculus of variations that we are relying on such as the derivation of the equations use middle in their proofs so an intuitionistic metatheory is not an option we therefore just assume that we have a set of small sets which includes the real numbers and is closed under subsets products function spaces and set syntax the kinds of system f include at least the base kind of types and function and product kinds as generated by the following grammar × · · · we will extend the collection of kinds in section with typelevel natural numbers and in section with kinds we use the judgement small to denote when the kind will be interpreted by a small reflexive graph to be defined below the kind is not small but the construction of function and product a a f a f a a b a b × a × i i a i a b a b ab a small a figure types and their kinds a b a b ab a a a a a i a a ai i a × a a a × plus symmetry transitivity and congruence figure type equality kinds preserves small small small small small × small the additional kinds we introduce below will all be small the types type equalities and welltyped terms of system f are shown in figures and respectively contexts n n are denoted by and typing contexts x a xn an are denoted by note that typing contexts only contain types of kind terms also have an equational theory with laws for functions products and universal quantification which we omit our presentation of system f is entirely standard see eg pierce except for the restriction to small kinds in the formation of universal kinds a as is the case for kinds we will extend the types type equalities and terms in sections and below reflexive graphs and the interpretation of kinds we will interpret every kind as a reflexive graph which we now define a reflexive graph is a triple o r id where o is a large set of objects r o × o set assigns a small set of directed edges to each pair of objects and id o o ro o assigns a distinguished identity edge from every object to itself we think of the edges of a reflexive graph as abstract relations between the objects indeed in the interpretation of the kind of types below the edges will be exactly relations xa xa ea ab eb e a e a e e a × a e a × a ie ai i x a e b x a e a b e a b e a ee b e a fv e a e a b e b ab figure terms and their types a small reflexive graph is a reflexive graph o r id where o is a small set of objects we use small reflexive graphs as the semantic interpretation of small kinds the interpretation of kinds as reflexive graphs and small kinds as small reflexive graphs is a key property of our semantics that we will maintain as we add additional kinds in sections and below we state this as property of our semantics property each kind is interpreted as a reflexive graph if small then is a small reflexive graph an interpretation of reflexive graphs is as categories without composition following this intuition we define morphisms of reflexive graphs as functors without the preservation of composition condition a morphism of reflexive graphs o r id and o r id is a pair of mappings f o o and r o o o ro o rf o f o such that identities are preserved r o o id o id f o we use morphisms of reflexive graphs below to interpret types we will use the notation o r and id for the first second and third projections out of tuples representing reflexive graphs similarly we use f and r for the first and second projections out of tuples representing reflexive graph morphisms we now define the interpretations of the basic kinds of system f we defined above making sure that we maintain property at base kind the collection of objects is simply the large set of all small sets edges between a and b are binary relations on a and b ie subsets of a × b and the distinguished identity edge is exactly the equality relation set rel the reflexive graph is not small due to the collection of all small sets set not forming a small set for higher kinds the collection of objects consists of reflexive graph morphisms from the interpretation of to the interpretation of the edges between morphisms f r and f r are edge transformers and the distinguished identity relation for f r is just r f r f r f r f r o o ro o rf o f o f r r by the assumption that our collection of small sets is closed under the formation of function spaces and set if and are small reflexive graphs then so is product kinds are interpreted by taking the product of their interpretations as reflexive graphs × o × o o o o o ro o × ro o o o the collection of objects of the interpretation of a product kind is the product of the underlying collections of objects of the two parts and the relational component is simply the product of the relational components this naturally leads to the identity component being defined as the tuple of the identity components of the two parts again by assumption that our collection of small sets is closed under products if and are small reflexive graphs then so is × product kinds to the interpretation of contexts n n which are interpreted as the product of the reflexive graph interpretations of n n n o × × n o r × × n rn n id n in sections and below we will extend system f with additional kinds and assign them reflexive graph interpretations making sure that we maintain property interpretation of types types a from figure are interpreted as reflexive graph morphisms a we sum this up as a property of our semantics property each type a is interpreted as a reflexive graph morphism a such that if a b then a b the interpretation of the calculus fragment ie variables abstraction and application and products of the language of types is displayed in figure the interpretations are given the reflexive graph interpretation of the kinds and × we gave above figure shows the interpretations of the basic type constructors for function and product types and of universal quantification each of these constructs builds an object of kind so the interpretation is a small set in set and the interpretation is an actual relation in the cases of the function and product types the interpretation is just as settheoretic function and product respectively and the interpretation uses the standard logical relations interpretations of these type constructors universal quantification a is interpreted at the object level by taking the dependent product over the objects of the interpretation of this product exists because we have that must be small and then restricting to those elements of the dependent product that preserve relations this restriction is required for this interpretation to preserve identity edges and so be a reflexive graph morphism the interpretation of universal quantification is the standard relational interpretation of such types here generalised to kinds interpreted as arbitrary reflexive graphs typing contexts are interpreted as reflexive graph morphisms by taking the product of the interpretations of their constituent types similar to the interpretation of the product types a × b we will extend basic system f with additional types and type equalities in sections and below these new types will also be assigned interpretations as reflexive graph morphisms and we will ensure that property is maintained interpretation of terms we omit the straightforward and relatively interpretation of welltyped terms e a and just state that there is a welldefined function interpreting each welltyped term with the property that it takes related environments to related results this is the fundamental theorem of logical relations for system f property for all welltyped terms e a there is a function e o f a f such that for all o r f and f if r then e e a r moreover this interpretation is sound for the equational theory of terms discrete kinds in section we only had a single base kind the kind of proper types with a specific interpretation as the reflexive graph of sets and relations we now describe two families of base kinds with interpretations that are particular sorts of reflexive graph in this section we look at discrete kinds kinds whose reflexive graph interpretations are such that the reflexive edges are the only edges between objects in the following section section we look at kinds where edges are composable and invertible discrete kinds can be seen as the natural way of lifting types up to the kind level for our purposes we will only require a kind of natural numbers which we will use for constructing nary vectors of positions and when we use our type system for writing in section the kind of natural numbers is small · · · nat nat small the interpretation of this kind as a reflexive graph goes as follows nat n n n n n n the collection of objects of this reflexive graph is simply the set of natural numbers the only edges in the graph are unique edges between equal numbers since we have assumed that our collection of small sets contains the natural numbers we have clearly maintained property of our semantics we add new typelevel constructs for the kind nat of natural numbers representing zero and successor and a recursion operator zero nat a nat succ a nat a nat b c a b c these three constructs all have the evident interpretations in terms of the inductive structure of the natural numbers and satisfy the following laws maintaining property of our semantics zero b c b succ a b c c a b c kinds discrete kinds are useful for lifting types up to the kind level but they do not really exploit the flexibility of reflexive graphs moreover they do not provide us with the invariance properties we require to apply theorem by considering kinds whose interpretations are we will be able to derive the invariance properties that we need recall that a is a category in which all morphisms have functors between categories always preserve i i f i i r i i a f o o a f o o o o r ro o a r o o id r a r o o o r ro o a r o o r f a f f a r f f a f f r a f a f a r a b × f a f b f a b × r a r b r ia i f ia i r i a f i a r figure interpretation of typelevel calculus as reflexive graph morphisms a b f a f b f a b r f f a a a r f a f a b r a × b f a f × b f a × b r a b a b a a a r b b b r a f x o o a f o o o r ro o x o x o a r o o id r a r x x o o r ro o x o x o a r o o r figure interpretation of basic types as reflexive graph morphisms isomorphisms so morphisms of are just functors every group is a with one object and a morphism from this object to itself for every element of the group composition is the group operation are given by the group and the identity morphism is given by the group unit homomorphisms between groups are in correspondence with functors between the corresponding an example of a that is not a group is given by the collection of cartesian spaces ie n r for some n with all smooth functions with smooth as the morphisms trivially every is a reflexive graph simply by for getting the composition and likewise every functor be is a morphism of reflexive graphs by the preservation of composition therefore given any we can add a new kind to system f that is interpreted by that and given any functor f g g between interpreting kinds g and g we obtain a type constant of kind g g with interpretation f integers our first kind is z interpreted by additive group of integers we will use this kind to state the types of the functions sin and in section which are periodic with period the kind z is small · · · z z small the kind z has the following interpretation as a reflexive graph z z note the difference between this interpretation and the interpretation of the kind nat in the previous section in the interpretation of nat the objects were complex and the relations were trivial the reflexive graph interpreting z has a trivial collection of objects but a rich structure at the relation level given by the group of integers this structure means that we can add the following typelevel constants to our system z az bz ab z az a z each of these constants has a trivial interpretation due to the trivial collection of objects in the reflexive graph z at the the interpretations are simply given using the group structure of the integers these interpretations satisfy the group axioms so we add these axioms to the typelevel equations translation and linear transformation groups the group of integers is not suitable for stating the invariance properties we require to apply theorem to do so we require groups of translations and invertible linear transformations we extend our type system with small kinds representing n translations invertible linear transformations and orthogonal transformations · · · tn on tn on small the interpretations of these kinds follow the same pattern as for the kind z above each interpretation is a reflexive graph with a trivial collection of objects and relations taken from the appropriate group tn rn i on on i here we take to be exactly the group of invertible real and on to be the group of n × n orthogonal recall that an orthogonal matrix is one whose is equal to its inverse we add the group operations and group axioms for each of these kinds in the same way as we did for the kind z above except that we use multiplicative notation for the kinds and on note that except for gl gl o and o the groups and on are not we also extend our type system with the following typelevel constants each of these is interpreted by the named homomorphism between the groups involved for example is interpreted by the homomorphism gl that takes a nonzero real number s to the matrix with ss along the diagonal and elsewhere exp t gl on gl c z t in the last of these c stands for an arbitrary real constant since each of these is interpreted by a group homomorphism we are justified in adding the group homomorphism laws as axioms to our typelevel equational theory maintaining property the of cartesian spaces finally in this section we introduce the kind of cartesian spaces which we will use for the configuration spaces of the classical mechanical systems we describe in our system as we noted above the collection of cartesian spaces is a with a nontrivial collection of objects we extend our system with a kind of cartesian spaces · · · with the following interpretation n m n f m r n r f a n we have chosen to represent cartesian spaces of dimension n just as the natural number n this gives us a canonical representation of space for each n avoiding problems with isomorphic constructions of the same space cartesian spaces are closed under products x y x × y with the following interpretation where the cartesian product of cartesian spaces adds their dimensions and in parallel x × y f x f y f x × y r x y x r x y r y cartesian spaces are generated by the following construct that yields the cartesian space n that with the given invertible linear transformation and translation g t tn n r g t as a notational convenience we write r g t as just r g t and r g t as just r the type n r g t has the following interpretation as a graph morphism rn g t f n rn g t r x g r x t r note that rn g t r id is the identity so this interpretation preserves identity edges exactly as required in the definition of reflexive graph morphisms consequently the interpretation of rn g t and also the interpretation for products of cartesian spaces preserves property using the typelevel natural numbers and their recursion operator we can define a type of nary products of a cartesian space vec n r x x × x nary products of cartesian spaces will be useful in section when we define describing systems that are generic in the number of involved finally we include an operator that takes any cartesian space to its corresponding proper type x x with the following straightforward interpretation x f r x f x r x x x r x x a type system for classical in the previous section we constructed a way to derive invariance properties from types in section we saw that theorem is a method for deriving laws for classical mechanical systems from their invariance properties in this section we construct a type system for constructing invariant in the following section section we present several uses of our type system for defining invariant that describe many different kinds of classical mechanical systems extending system f with smooth functions the type of smooth functions given a pair of cartesian spaces x and y we provide a way to construct the type of smooth invariant smooth functions from x to y x y cx y with the following interpretation since cx y is a proper type the relational interpretation in this case is a relation we relate functions that are invariant under the interpretations of x and y in the current relational context cx y f f r x f r y f f smooth cx y f f f x r x f y r f x f x r x an example free theorem we are now in a position to formally show how we can use the parametric model we have defined to derive invariance properties consider a closed term with the following type e o on r we can deduce from property and the relational interpretations of all the types involved that the denotation of e satisfies the following free theorem o on x n r e ox e x this free theorem is exactly the kind of invariance property we re to apply theorem compare the form of the state ment here with the more general statement of equation back in section moreover e is a smooth function from rn to r just as we require for combinators for smooth functions of course such free theorems are without ways to build elements of the smooth function spaces we now extend our type system for the last time with a set of constants for constructing smooth functions invariant under linear transformations and translations our first set of combinators constructs constant and identity smooth functions and smooth functions between cartesian spaces we also have combinators for pairing and projection for the product of cartesian spaces const y cx y id cx x cx y cy z cx z pair cx y cx z cx y × z proj cx × y x proj cx × y y next we include combinators for constant invariant vectors the zero vector vector addition and scaling we also include the dot product of vectors the type dot product operation is where the orthogonal group kind on is used the dot product of vectors is invariant under orthogonal transformations c rn n r g t g t × rn g t rn g t t t g t × rn g t rn g t t cr g × n r g n r · o × rn o r g each of these combinators has a straightforward interpretation as a smooth function and the proof that the fundamental theorem of logical relations is maintained for our system ie that property is maintained follows directly from elementary facts about linear algebra it will be useful for our examples to have the following functions exponential function and division operation the types of each of these functions describes some of their invariance properties such as the of the sin and functions a technical problem with our current system is that we do not account for the of division at nor do we account for the square root of negative numbers however division and square root will be useful in our examples in section so we take a pragmatic approach in common with most and informally treat them as total functions sin zz cr z r zz cr z r exp tt cr t r exp t g cr g × r cr g · g r g g r gg finally we include three primitive combinators for dealing with nary products of vectors these combinators will be useful when defining that are generic in the number of sum n r g r g map × x y cz × vec n x vec n y cross m m x × vec n y vec m n x × y the combinator sum sums the list of real numbers it is given while cross takes the cartesian product of two vectors of elements of cartesian spaces and map maps the given smooth function over a vector the multiplication of natural numbers m n is straightforwardly defined in terms of the recursion operator we will use cross in section to define in terms of the interactions between systems of z const z x let x e in e pair id e e x e en e en ee e e c const c const e e pair e e e e pair e e ee pair e e e · e pair e e · sin e e sin e e exp e e exp ee pair e e e e sum e e sum map x e e pair id e map e x cross e e pair e e cross figure of the surface syntax a surface syntax for smooth functions the combinators we have presented allow the construction of smooth invariant functions but doing so is due to the style that they force in order to be able to actually define readable in our calculus we define a surface syntax for writing smooth functions that is into our extended version of system f we define a typing judgement of smooth terms e x by the rules in figure where and are the and typing contexts of our extension of f and x x xn xn is a context of cartesian spaces that is for each x x in we have x the of smooth function terms into our extension of system f is via the operation defined in figure in this definition we make use of two derived combinators for projection and pairing proj proj x y and e e pair e the following theorem follows easily by induction on the typing derivations of smooth terms where x x xn xn x × × xn theorem if e x then e c x examples of laws from types we now present a number of examples of classical mechanical systems expressible in the type system we constructed in the previous section and derive the free theorems and properties for each one these examples are all standard examples the application of see for example and our contribution here is to express them in a type system that makes clear their invariance properties z x z x xx x x e cx y e x ee y rules e x × × xn x x xn xn let x xn e in e y e y e x en xn e en x × × xn c n r c n r vector space operations and dot product g n r g e n r g t e n r g t e e n r g t t e n r g t e n r g t e e n r g t t e r g e n r g ee n r e n r e n r e · e r e r t exp e r exp t functions e r z sin e r e r z e r division square root sum and cross e r g e r g e e r gg e r g e r g e vec n r g sum e r g x x e y e vec n x map x e e vec n y e vec m x e vec n y cross e e vec m n x × y figure a surface syntax for smooth functions single free our first example is of a simple for a single free in dimensional space with no external forces we define the using the syntax for smooth terms we defined in the previous section in the following typing and cartesian space contexts tt t tx t o o m r t r tt x r tx x r where o represents an arbitrary orthogonal transformation of the space tt represents a translation in time tx represents a dimensional translation in space m is the constant mass of the free t is the current time x is the current position of the and x is the current we write the like so which in the absence of external forces just consists of the energy term l mx · x r by the fundamental theorem of logical relations for our calculus property we can derive the following free theorems one each for the three group parameters tt tx and o over translations in time tt gives us invariance under translation in time tt r l t tt x x l t x x as we saw in example theorem tells us that invariance under translation in time yields of energy likewise over translations in space tx gives us invariance under translation in space tx r l t x tx x l t x x similar to the example of the in the introduction invariance under translations in space yields of linear quantification over orthogonal transformations o o yields the following free theorem which states that the is invariant under modification of the positions and by arbitrary orthogonal transformations o o o l t ox ox l t x x we are particularly interested in the orthogonal transformations derived from since these will give us the continuous transformations we need to apply theorem for example rotation by an around the is given by the following indexed family of orthogonal sin o sin this leads to the following indexed family of transformations suitable for theorem x x x x sin x o x x sin x x x x this into equation and using the definition of l above we obtain the following law d dt mx x mx x this is exactly of around the by considering the families of orthogonal matrices for rotation around other we can also derive laws for around arbitrary in a potential field if we now extend the typing context of our example with an arbitrary potential energy function v depending on the position of the we can define the for a single upon by a potential field that depends on the position of the the invariance properties of the whole system will depend upon the invariance properties of the potential field if we assume the following contexts tt t o o m r v oo cr r t r tt x r x r where everything is as in the previous example except for the addition of the potential energy function v we incorporate this into our like so l mx · x v x r even though v is left abstract the types of t x x and l tell us that this is invariant under translations in time and also under all orthogonal transformations hence by theorem the system this describes has energy and as the problem using the constructs of our calculus for dealing with nary vectors of positions and we can write that describe systems of n interacting through we use the following typing and cartesian space contexts where the typelevel parameter n represents the number of that we are considering for simplicity we assume that all the bodies involved in the system have equal mass m n nat tt t tx t o o m r t r tt x vec n r tx x vec n r the for this system is defined as follows in our surface syntax for smooth terms the energy component is the sum of the of all the in the system the potential energy components sums up all the potential due to the interactions between each pair of bodies where g is the constant l map xi xi sum map xi xj · xi gm x xi xj cross x x r we have used the notation e as shorthand for e · e ie the norm of the vector e again just by looking at the types of t x x and l we can determine via free theorems that this is invariant under translation in time and space and under all orthogonal transformations hence by theorem this system has energy and linear and as all our examples above have used coordinate systems part of the power of the formulation of classical is the ability to use appropriate generalised to describe systems in simple terms a standard example is that of a where we take the of from the vertical as the coordinate we use the following typing and cartesian space contexts tt t z z m r l r t r tt r z r where m is the mass at the end of the we assume the of the to be l is the length of the is the of and is the current rate of change of the of defining the for this system is a matter of simple and differential calculus l let y l sin in let x l in let y l sin in mx y r from the type of t we can easily determine that this is invariant under translation in time and hence the total energy is a of this system we can also derive another free theorem due to the quantification over the group of integers via the variable z however this does not yield a continuous invariance of the and hence no via theorem coupled our first example of a in the introduction was of a pair of of equal mass coupled by a for which we derived of linear and energy in terms of our type system we have the following typing and cartesian space contexts where m is the individual mass of the two and k is the constant tt t tx t m r k r t r tt x r tx x r tx x r x r in our surface syntax for smooth terms the is written just as it was in the introduction l mx x kx x r the free theorems for this term state the invariance in time and space translation tt r l t tt x x x x l t x x x x tx r l t x tx x tx x x l t x x x x as we saw in section these invariance properties allow us to deduce of energy and linear for this system all of the example we have at so far have had no dependence on time and so they have all described systems with total energy as a a system with a single attached to a whose other endpoint is fixed at position provides an example of system that does not have energy as a this example is taken from we use the following typing and cartesian space contexts tt t k r t r tt tt x r x r here the position and of the single scale with the exponential of the translation in time this will account for the exponential we apply to the system for simplicity we assume that the mass of the and the constant are both the for this system looks similar to the coupled pair above except for an additional factor l x x r from the types of t x and x we learn that this system is invariant under the families of transformations t t and x e x this leads to the following law for this system linking energy and linear d xx x x et dt conclusions we have presented a type system for writing invariant with a parametric semantics that allows the derivation of free theorems that can be used with theorem to discover laws for classical mechanical systems our key technical contribution has been the observation that parametric models of system f admit kinds that are interpreted as allowing geometric invariance properties to be integrated directly into the model related work we are not aware of any other work linking type systems or relational parametricity with invariance properties for classical or with theorem we have already mentioned the work of and kennedy that uses relational parametricity with a type system to derive geometric invariance properties in a setting without smooth functions and without an application to theorem in this paper we have placed et als work in a more general setting by it as an extension of system f which allows us to a incorporate typelevel computation as we used to define the nary vectors of and b to reuse previous work on parametric models of system f by and and in a more programming language style so that it can be implemented within the programming language scheme in doing so they clear up some of the ambiguous syntax common in the standard of classical however they do not attempt to incorporate invariance properties into types as we have done here there has been prior work on programming languages inspired by theoretical quantum programming languages which hope to exploit the properties of quantum computation in an way have been the subject of study for several years now we abramsky as an introduction to this field future work we have the surface of the applicability of theorem to theoretical laws for classical and quantum field theories are derivable from the much more general theorem that originally proved describes in an easy to read way how theorem applies to field theories allowing for and quantum systems to be studied and how it naturally leads to the notion of invariance an important principle in modern theories of from the type system point of view it seems clear that greater precision in the types will be required in order to more detailed physical theories study of relational parametricity for dependent types as done for example by et al and et al may be useful here also recent work on type theory and in particular models of type theory is almost certainly relevant for each of the examples in section we computed the necessary typing derivations by hand type inference for the system was have presented here or some variant of it is a key item of future work the user would enter the description of a and the system would be able to tell them the free theorems and laws that hold kennedy and have studied type inference for the related but simpler setting of dimension types references s abramsky highlevel methods for quantum computation and information proceedings lics v i mathematical methods of classical springer r relational parametricity for higher kinds proceedings csl r n and p a parametric model of dependent type theory proceedings popl r p and a j kennedy abstraction and invariance for indexed types proceedings popl jp p r proofs for free parametricity for dependent types journal of functional programming pp i m and s v r a ed calculus of variations a type inference for units of measure technical report university of r relational limits in general polymorphism of the research institute for mathematical sciences pp ­ a j kennedy dimension types proceedings esop a j kennedy relational parametricity and units of measure proceedings popl pp l d and e m press d e theorem the john university press e m translator invariant variation problems theory and statistical pp original in s mac categories for the working nd edition springer b pierce types and programming languages mit press a m pitts polymorphism is set theoretic proc category theory and computer science pp ­ j c reynolds types abstraction and parametric polymorphism information processing pp e and g reflexive graphs and parametric polymorphism proc logic in computer science pp ­ g j and j structure and interpretation of classical mit press the foundations program type theory institute for advanced study p wadler theorems for free proceedings pp 