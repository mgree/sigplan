on directly constructing lrk parsers without chain reductions r department of systems engineering university b abstract a chain production is a production of the form am where a is a nonterminal and m is either a terminal or nonterminal in has presented an algorithm which removes all chain reductions from lr parsers after they have been constructed in this paper we present an algorithm for directly constructing lrk parsers with arbitrary subsets of the chain productions called the useless chain productions optimized out if this subset is empty the algorithm is a standard one and i kn if this subset consists of all chain productions the result is a parser with all chain reductions optimized away the algorithm as in also eliminates from the parsers all nonterminals which occur as the left part of useless chain productions this latter optimization along with the chain reduction optimization significantly decreases the storage space and execution times of the parsers this provides an efficient solution of the open problem by aho and ullman au for all lrk grammars introduction in recent years much attention has been focused on lrk techniques der to au au and since lrk parsers are efficient and capable of parsing a large subset of the context free languages much of the effort has been to decreasing its table storage space and increasing its parsing speed one approach for doing this has been to eliminate useless chain reductions from the parsers au au however all of the techniques used above eliminate the chain reductions from the parsers after they have been constructed in this paper we present a technique for directly constructing lrk parsers in such a way that reductions involving useless chain productions are eliminated in addition all references to the nonterminals occurring as the left part of these productions are also eliminated in practice these two optimization significantly reduces the parser storage space and also significantly increases the parsing speed background in this section we introduce the basic notions necessary for the paper a context free grammar grammar for short is a g where n and t are finite disjoint sets of nonterminals and terminals respectively s in n is the goal symbol and p is a finite set of productions of the form aw where a the left part is in n and w the right part is in the vocabulary is for parsing purposes we and the left and right as symbols distinct from any used in the vocabulary of our grammars we also assume the productions are p in some order we abbreviate productions by i wn conventions let g be a grammar i abc denote nonterminals in n abc denote terminals in t denote nonterminals or terminals uv denote strings in t and strings in e denotes the empty string a production in p of the form am where m is in is called a chain production a useful chain production is one so declared by a user otherwise is useless for example if a user has semantic actions associated with all productions he may declare all the chain productions to be useful alternatively he may declare only a subset to be useful perhaps those in which the right part is a terminal etc if is a sequence of useless chain productions we call ao a proper ancestor of an and an a proper descendant of ao an ancestor or descendant of a symbol m in is either m itself or a proper ancestor or descendant of m a symbol without proper descendants is called a leaf leaves in a graph which this relationship is called an ancestor graph example consider grammar g consisting of the four productions i t i a the ancestor graph of gi where all chain productions have been declared useless is shown in figure la the ancestor graph of gi where only chain production et has been declared useless is shown in figure lb a grammar g is reduced if for each m in there is some derivation of the form where w is in t we will assume that all our grammars are reduced we define kx as the first k symbols of x if k i and as x otherwise if x is a set of strings in we generalize kx as kx i x is in x we further define as kw in t i we drop g when no ambiguity arises example if g is a grammar with productions and se then ea b and ab an augmented grammar associated with a grammar g is a grammar g where s is a new nonterminal not in an lrk parsing machine m for grammar g based on the set pu of useless productions of g finite state machine with transition symbols of the form x or x if u where i x an action of m is an element of a a shift action b a reduce action or c accept an accept action and u a lookahead set for x is a subset of t such that each w in u satisfies a reduce action of the form aw where aw is the ith production of g is also represented by i a symbol number symbol of g we represent a parsing machine by its transition graph as it turns out an lrk parsing machine has exactly one final state and this final state has no successors for convenience we therefore leave the edges leading to this final state a state of the parsing machine is if it contains at least two actions one of which is a reduce action otherwise it is adequate informally a state is if lookahead is required to resolve between the actions of the state this is not required for a state which is adequate stands for the length of x example the transition graph of an lr parsing machine m for g is shown in figure a states and are adequate all others are the following algorithm lrk parsing machines algorithm an lrk parsing machine interpreter input an lrk parsing machine m for g and input string w in t output a sequence of productions in p possibly followed by the word error method i initialize let io be the initial state of m and let and be the left and right begin with current state p io stack s io and current input string u w iteratively perform step perform one parse step let u au and v perform one of or s depending on which applies j if none applies output error and stop shift action there exists a shift a action in p with v in its lookahead set if this set exists stack aq where q is the of p set p q and set u u reduce action there exists a reduce aw action in p with v in its lookahead set if this set exists output aw pairs from s leaving mq as the top pair stack ar where r is the of q and b is an arbitrary descendant of a which is a leaf and set p r s accept action there exists an accept action in p with v in its lookahead set if this set exists if v output error in any case stop neither must be a member of the advantage of lrk parsing is that the choice is unique note also that the lookahead information is not always needed of course q must contain a shift b action also it is wellknown that only the states are required for parsing purposes example the result of applying algorithm to m and is shown in figure b the rest of the section contains the basic definitions used in the construction technique of the next section let g be a grammar and let pu be the set of useless chain productions of g an lrk item for g is a pair where is the ith production of p and symbol i is called a symbol number symbol if the dot is to the left of symbol m the lrk item is said to be an item if m is a symbol if is an lrk of g the action and lookahead set associated with it is either i or below according to whether m is nonterminal b terminal a or symbol i i shift b shift a if v where v reduce aw if u where aw is the ith production of p we never associate a lookahead set with nonterminal shift actions two actions are inconsistent if they are distinct and yet have lookahead sets otherwise they are consistent thus two actions one of which is of type i must always be consistent two actions of the form shift a if u and reduce aw if u are inconsistent so are reduce ax i u and reduce by if u for if there exists actions associated with distinct lrk items which are inconsistent the lrk items are also inconsistent otherwise they are consistent a set of lrk items is consistent if every pair of items is consistent otherwise it is inconsistent the algorithm for constructing lrk parsers with chain production optimizations let g be a grammar and let pu be the set of useless chain productions of g we define the transition successor and immediate successor relations respectively of g based on pu below let i be the set of lrk items of g exclusive of those associated with elements of pu and let m be a leaf of g m · ax in i l is an ancestor of m which includes m ax in i c is a descendant of b which includes b and v is in m relation is the transition of g based on pu the union of all such that m is a leaf of g example consider grammar g of figure where the productions have been from to suppose all chain productions are declared useless we compute the set pos where p we can write p p p p since t is a descendant of t and is in first le first note that ta is not added since ta is a useless chain production p p since is in p p p thus the process is finished therefore q notice that q tv is undefined since t is not a leaf of g however q a is defined q q l since t is an ancestor of a it shown that q is empty hence q a algorithm construction of lrk parsing machines input grammar g integer k and set pu of useless chain productions of g output the lrk parsing machine c for g based on pu method perform the following steps in i initialize let g be the augmented grammar for g and number the productions so that ss is the th production of g l e t a n d be the transition and immediate successor relations of g based on pu compute the initial state add i ss to the states of c initially empty and mark it compute successor states for each state r of c mark r processed and for each leaf m such that r contains an lrk n is mn ancestor of m also for each symbol m add r to the states of c as the of r and mark it if it is not already there if m is a symbol the successor state will be the empty set this state is taken as the final state of c introduce an accept action replace transition symbol in state r by a accept if r is adequate or b accept if if r is if r is a relation and x is a set xr represents the set is in r and a is in x and xr represents the smallest set a containing x such that if a is in a then ar is contained in a the set represents symbol is the right not in not only one state of c will contain transition symbol s introduce lookahead sets for each state r of c and each transition symbol m of r where m is either a terminal symbol or symbol add the lookahead set l where l is the union of the lookahead sets associated with the lrk of r if the set of useless productions is empty the above algorithm is a variant of lrk table constructor kn we will refer to the lrk parsing machine for g based on as the principle lrk parsing machine for g as constructed the actions of a parsing machine do not always have associated lookahead sets however it is possible to construct the parsing machine in such a way that the associated lookahead set is added to each action when this is done we say that the parsing machine has forced lookahead sets example figures and contain the incomplete ie without lookahead lr parsing machines cl and di for g based on pu et and respectively the completed lr parsing machine mi for g based on is shown in figure a the result of applying algorithm to mi and is shown in figure b it is to compare the number of steps in figures b and b conditions for the algorithm to succeed in this section we show that the parsing machine m with forced lookahead obtained from an lrk grammar g with useless chain productions pu in conjunction with the interpreter ie algorithm is in fact a parser for g which outputs an optimized bottom up parse of an input string in lg ie a sequence of productions of g exclusive of those in pu we begin with some basic lemmas lemma let g be an lrk grammar let be an lrk item in some state r of the principle lrk parsing machine for g and let w be a string in there exists in r an lrk item either of the form i or where w is in proof obvious lemma let g be an lrk grammar let c be the principle lrk for g and let bi b a and b be vocabulary symbols of g b may be either a terminal or nonterminal such that and bb by chain productions where each nonterminal of the derivations except b are different if is the production of g and lrk items and the latter different from are in the same state r of c then this is because they are not always necessary f n proof consider s the of r suppose the lemma is false then there exists a string w in f since and w is in is in r therefore is in s now consider b if bb there exists some nonterminal da such that in the above derivation therefore there exists an lrk item of the form for some s in r therefore is in s and it is inconsistent with the condition that g is lrk if bb lrk item is in s if ye it is inconsistent with the condition that g is lrk if ye there also exists in s an lrk item either of the form or where w is in by lemma i but both of these are inconsistent with a pair and of lrk items satisfies the condition if two sets s and satisfy the condition if every pair of elements pl and p in s and respectively satisfy the condition lemma let g be an lrk grammar let c be the principle lrk parsing machine for g let r and r be states of c not necessarily distinct and let m and m be transition symbols of r and r respectively such that and mm if each pair of mi and in r and r respectively satisfies the condition then so does each pair in the and of r and r respectively proof if pl and p are arbitrary lrk mi and in r and r respectively then since and mm m must generate strings of length less than k otherwise the condition would not hold let n be the maximum length of the generated strings it follows that first of all n and therefore since a proper subset of a set of items is the largest subset which those items associated with useless chain productions lemma let g be an lrk grammar let c be the principle lrk parsing machine for g and let r and r be states of c with proper subsets s and satisfying the condition then is consistent proof obvious theorem let g be a grammar let pu be a set of useless chain productions of g let c be the principle lrk parsing machine for g and let c be the lrk parsing machine for g based on pu if g is lrk each state of c is consistent proof suppose g is lrk if pu is empty there is nothing to prove since our algorithm becomes the standard one suppose pu is nonempty suppose for induction that state r in c is the union of the proper subsets of states rn in c pairwise satisfying the condition for the basis the initial state i of c consists of the proper subset of the initial state i of c the above is therefore satisfied trivially we wish to show that each successor of r satisfies the above suppose r has an s if m is a symbol s is empty trivially satisfying the above condition otherwise s is the union of the proper subsets of the following states in c the of ri if it exists lin where l is an ancestor of m if only one such successor exists we are done since each state of c is consistent otherwise consider any two such distinct successors s and then there exists some ancestors l and l of m and some p and q where such that s is the of rp and is the of rq if pq the proper subsets of s and satisfy the condition by lemma if pq then there exists some m such that and by chain productions where every nonterminal except m in the derivations from l and l to m are different suppose arbitrarily that l is different from m then we can write and lm for some nonterminal a by lemma respective pairs of mi and in the proper subset of satisfy the condition by lemma the proper subsets of s and satisfy the condition if is a sequence of productions of g the result of removing those productions which are members of pu is said to be according to pu theorem let g be an lrk grammar let pu be the set of useless chain productions of g and let c and c be the lrk parsing machines with forced lookahead based on and pu respectively if algorithm with input c and w outputs i bottom up parse pn or a partial bottom up parse followed by error then algorithm with input c and w respectively outputs i popl pn according to pu or a partial bottom up parse according to pu followed by error proof it can be shown by induction that algorithm with c simulates all actions those reductions by useless chain productions of algorithm with c including error detection the proof found in for lr grammars can be generalized to lrk grammars if each state of c in the above theorem is consistent we claim that algorithm with c is a parser for g even if g is not lrk for instance if g is aa ba then each state of the lrk parsing machine for g based on aa ba is consistent if the parsing machine for g does not have forced lookahead there are cases where the parser algorithm i will fail to detect erroneous strings though it will work correctly for strings in lg consider the grammar the lr parsing machine for this grammar based on is shown in figure algorithm applied to this machine accepts the string acc among others provided only that symbol a rather than symbol b be chosen as the arbitrary leaf descendant of s when reducing ac to s on the other hand if lookahead is forced the reduction of ac to s is possible only when the lookahead string is thus the error is detected references au av aho and jd ullman the theory of parsing translation and compiling prenticehall nj au av aho and jd ullman optimization of lrk parsers j computer and system sciences vol dec pp au av aho and jd ullman a technique for up lrk parsers siam j comp vol june pp t analysis of lrk languages phd thesis univ of upon computing lab and t j and jj efficient lr parsers informatica pp der fl practical for lrk languages tech report mac tr project mac mass inst of tech cambridge oct der fl simple lrk grammars cacm vol july pp j an efficient contextfree parsing algorithm phd thesis univ pittsburgh pa also see cacm pp ml on the reduced matrix representation of lrk parser tables tech report computer systems research group univ of oct de knuth on the translation of from left to right inf vol oct pp aj a practical method for constructing lrk processors cacm vol pp wr an efficient parser generator tech report computer systems research group univ of d a solution to an open problem by knuth inf vol dec pp d on combining compatible states in lrk parsing tech report pe information sciences program univ of july d a compaction algorithm for combining the lists of an lrk parser tech report pe univ of july p a g d on the approach to lefttoright parsers to appear in siam j computing p a g d on eliminating unit productions from lrk parsers tech report from the information sciences program univ of list of figures a the ancestor graph of gl tt where all chain productions are useless b the ancestor graph of gl where only et is a useless chain production l e step no stage z o a t i t l ta if f if ÷ al i accept the of p a r s i n g e for cl b using a l g o r i t h l with input hi and aa ic p state g et i i state t i fig i state q state state · t state i tq the incomplete lr machine for gi based on pu et ta gi note pu is the set of useless chain productions of gi fig stat i et i a i l t l i £ state i state a state i · i the incomplete principle lr parsing machine for cl gi fig i c if c l ts s a l reduce lr parsing for g based on pu g pu sa sb fig if · step no stack p aa e al al if a b the lr parsing machine mi using i input hi for gi based on and note in step pu et action reduce is interpreted c since a is n leaf descendant of t the of is taken as the of similarly for step fig 