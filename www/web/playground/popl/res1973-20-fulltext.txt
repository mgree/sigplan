large scale file processing j dept of introduction is a data processing which is designed to facilitate problem solutions which involve very large files since a programmer can easily a finite though large file the first solution to a problem usually permits back and in the file searching for information and manipulating it unless the file is small to fit into core this approach to problem solving becomes much too and expensive an entire new concept of problem solution is needed to deal with ex large files an approach to this problem is to produce a linear solution that is since the files are too large to be stored in core the file is read once a transformation is performed and an output file or files is produced in order to arrive at the final desired solution a series of these trans may be necessary using one may a total problem solution using this approach sources without having to consider machine the system will put together configuration which makes good use of the re sources available producing actual files only when necessary problem large files a approach this type of linear problem solution was in in the past by producing a set of gen which perform certain file transformations then a problem solution was for by together a series of these programs and the desired for this solution and this run obviously this produces solutions which can be put together by the programmer fairly quickly but which are of machine resources in addition if the generalized program does not produce the exact desired result it could be to make a specialized change w k figure a figure lb p i i a figure a shows the logic of a typical generalized problem solution involving file ain data selection d report gen each box represents a pro the box is a specialized when put on the computer this solution becomes a one for one transformation figure lb in addition into machine steps each intermediate must on en external device if the device is online it if the device is portable up it requires resources operator ion this problem expressed in results in six operations a and four machine steps b not only is the solution more easily stated in but the compiler performs the analysis necessary to multiple operations into one machine step when possible b approach provides a capability to produce this type of problem solution in a natural the basic structure of a program is a series of operations each of which consists of one or more input files a some or data processing function and one or more output files these operations are connected via data paths de by the involved that is f file a is output from operation end input to operation a data path has been defined which operation to operation the in an operation the basic function of the operation including its input strategy in addition the be by algorithmic section iii b each record in the input files can be through some algorithmic coding before the it certain conditions encountered by the can figure b cause exits to specified routines when the has produced a record or a data object on the function control is passed to the section of the operation where additional functions can be new records for the output files are built in the output section but this actually occur in the operation using these components the programmer can a solution to his problem the compiler direct the data paths to handle the files involved program flow external operation to operation input section section i internal file el input section output section external when writing a one need not concern solution with machine resources or con the states his total problem in source the compiler carries a parameter file which defines the machine resource limitations to be imposed on a job step the compiler then segments the job accordingly producing all the command necessary to run the resulting job it also handles the inter files which must be produced due to the user needs to provide only his program end the command language to describe his external input end output files if the user has existing programs or subroutines he wants executed there is a facility for at what point in the procedure the program should be inserted or the subroutine called example the following operation looks up words in a file data file f data match key matched x y local x c local y output c when the finds s record in the file in which the field matches the field item from a record in the data file the executes word end its routine meaning x this routine writes the on the output file if no matching condition is found routine y outputs the word with in the meaning field a the the language are the major components the is the controlling of factor in en operation it how the records from the input file or files will move through the operation the algorithmic coding in sn operation serves to augment the allowing the programmer to the action to his particular problem each issues requests for data on its function it may need one record from one file several records from one file or one record each of several files the programmer may specify that as the proceeds to work on the files if certain conditions arise en exit is to be taken from the to perform specialized algorithmic functions in most of the it is possible in fact sometimes necessary to specify a sequencing or control group identifier in a file a control is a group of records which have a association there are two basic ways of in a control group each record may contain a key field which indicates where this record be in the file or the first record of a may contain a special value or condition which indicates that this is the start of a new control group the specification of the second condition is called a clause this language feature is actually independent o the it is stated in the only because of the timing factor involved that is the key or break clause is analyzed when the record becomes available to the and not when it becomes available to the operation there are in the language these are the major data processing functions needed for the class of problem was designed to address each has been de to be fairly flexible in itself as well as to allow interaction with coding the work with all data types except binary following is a brief description of each and its basic function combine takes a single input file and forms all combinations of records within a control in a control up the group string specified data from each and produces the resulting record identify selects that belong to statement those groups records described from the input in the file index d word is used to identify then show the word in context words or the in the reverse input of the match processes two in control groups conditions files which have been one may then select matched or on each of the two files processes a two or more files set of records offset produces the origin string fashion successive in either in equal segments left to increments or groups right or of cyclic pack from the specified group in the input file the individual records data within a con by the data in the control group print provides a report generation facility which s the programmer to describe the page top end bottom routines to handle page overflow and special algo statements are used to build and print lines and perform the various functions process provides programmer can desired action a specify the the input strategy the scan the input data for occurrences of strings and returns their position end or following data search essentially provides a dictionary e file contains the words and meanings the second file contains values which are to be in the first file select processes the file in control pro records which meet the selection criteria eg f first of last record in a control group of at least records sort sequences records from one or more files individual files may have the same or different keys and may retain their individual identity or be merged into one file on output w provides a file facility the will delete records or the of fields within the specified records value b shifts right or left another field the significant either within data in a field itself or into performs links binary operations on two fields to a subroutine or clear a fields to the appropriate close causes an input file to be closed and an signal to be passed to the convert converts r data from one data type to gives output on the line specifies a loop which can have both parallel and edit returns a of the significant ta field data in goto branches with the option or to label to either return is the normal boolean and false expression with true data from one field conversion to another control the setting of switches order sorts the data within a field output output constructs file a record and puts it on an causes a record m to be input from a parameter reference assigns a data reference or address to a a is a shorthand notation which to the address of some data string it is used for either flexibility or efficiency set assigns the value of an expression to a d return are statements the programmer can use to affect the sequence of control especially as it concerns the flow of data en operation c data structures data structures within are based on the premise that everything is a a variable represent n characters n n double float values etc a variable x which is one integer is simply considered a string of this concept adds an extra dimension to all data structures that is one may map en or table over any string the only constraint that the of the must be by the number of intersections in the array or table a distinction between tables and tables are addressed co which are actual data values while ar are addressed the coordinate values of a table can be changed by the program c array by to f these describe three data structures is a string of characters is a two dimension array which is mapped over is a integer table values are taken at a time from two characters references ie to the sa are addresses the two characters found in the third row end second column if the array is thought of as stored by rows on the other hand the table is referenced by an odd even pair found in the character ad will cause for pb across two characters at a time if ail is the characters in ab will reference the fifth integer in the table n file each file in a procedure must be fully described a file which is internal needs only a description of the data in the fields which make up each record eg three followed by characters followed by one double float number on the other hand an external file have much more information associated with it if the file is not in the standard character set of the host it may be necessary to trans form the file before with it internally conversely an output file may need to be in a nonstandard character set one want to only certain fields or only certain char within the file this option is easily specified in the file description section it is also possible to specify the desired reaction when read errors or conversion errors a solution using since has both the and the capability there are two ways one can program using the one way is to program a solution in much the manner as one would using fortran that is making heavy use of the algorithmic statements the second method is to heavy use of the th methods require a different approach to problem solution for who use languages such as fortran algol or pl is more natural to project who have used the higher level generalized programs for problem solution the programmer as being all available consider the think of his at one time for following problem data in input a file following format which contains text in the col id number identification text fields a text may span more than one record filled at the end snd is problem suppose a wants to study the relationship of words to each other he might want to scan text to find where two words are the same distance apart in samples of text if the size of the file were known and sufficiently small the obvious solution would be to store the text in memory and search for using however in practice the file is extremely large and of size this leads to the following approach read the text file and create a new file whose records contain the identifier one word and its position within the text using this file one wants to produce all the combinations of words within each control group since the position of each word within the text is known the difference can be computed the output file contains an identifier the two words with their positions and the distance be the two words in the text the next step is to sort the file by the two words and the distance between them this will cause all the to fall together on the sorted file how the records which are for the key value word word distance will be the solution to the problem source file c file file input text word gives dc out field set local out move into hold clear pos input combine key for pairs le giving max fields pos is s local pairs output input pairs sort key output input key local output m input top bottom fl start end if line word space o line local page hn line t space else return top li space line i start line space i space no line j line go to top skip go to the above solution has one the file of combinations which must be sorted can become quite large for instance a file containing ten control groups with a total word count of produced a combinations file of which must be on an external device for it would not be to ex an input file of ten text groups which produce a combinations file on the order of ten records solution is much more desirable the following start as the first solution producing a file whose records consist of one word its tion within the text and an identifier sort this file by word and text id number then find all combinations of each word across records from the combinations produce a file containing the two text identifiers and the difference in the position of the word within the two sets of text when this file is the two text id and the difference the will fall together the combinations of this file can be taken to give all the pairs source listing ext file file n file rec file pairs pos file f input index word gives dc out start out field set output local out move hold clear pos input sort key input combine key word pair pairs right fields is is pos is pos is local pairs if eq om output pairs sort output input key for pair pairs le right gives ax local pairs output input matches top start start end space line mm pr local line space line point else return top space line word like space return start space line ho stop lie j go to top skip go processing one of the major problems with using general to solve problems was the fact that intermediate files were on external devices usually tape between steps this was not only of machine resources but required human the solution to this problem is to let each record flow completely through the procedure without external until it is on a terminal data path each may have multiple input files and multiple output files since a for en input record as well as the pro of an output record is data dependent and hence the management of the resulting data flow can become quite a file the processing flow of a procedure is by the in which the operations are linked using the snd output statements files are identified as either external or internal the external files may be either input or output from the procedure but not both while internal files link operations within the procedure basically the can exist a file defined as external statement appears in an a file defined as external output statement appears in an a file in an statement of one operation appears in the input statement of a subsequent operation in each of these situations the of the file can be called the predecessor and the user of the le is the successor the only means of communication between two operations is a file and even then it is a com link the predecessor operation can pass information to the successor operation as a record in the file that defines the link between them control can be passed in either direction when the predecessor operation produces a record for the file control is passed to the successor on the other hand when the successor operation needs a record control passes to the predecessor operation the data network defined by a set of operations and the files which connect them be viewed as a network in which data flows in one direction only but control flows in two direct ions links each since or link the the files are actually edges which hold this has a block of status of that link the connecting network together which block of information is called a file it contains the following statistics block information the predecessor operation the successor operation file status active record record etc pointers will be discussed later chain link for multiple successors file name record count the contains the information needed to direct the flow of records through the procedure in this network a file may have only one predecessor but multiple successors when a record is produced it must be that each of its successor operations receives a copy of the record in the order produced therefore each successor has an end they are together when a record is produced control is passed to the successor pointed to by the first in the chain when control comes back to the predecessor it has been left in a state such that the first thing it does is check the chain for further users of the file in this way all the successor operations are snd thereby receive a copy of the record before the predecessor can go with its next function which may result in the original copy of the record another which may occur is that one of the successor operations wants to logically close the file but it active for the other successors since each successor has a separate this is easily accomplished by deleting the closed from the chain external files are with the operations by a which direct the input snd output of the files this contains the tables required by the operating system an internal buffer and a parameter list which conversion snd within the record the compiler these operations in the following manner on e o e by using these the ation sequence of control flows very an operation never needs to be concerned whether its files are internal or external so a standard file statistics block is sufficient the problem of several operations using the external file is also resolved using finally this concept leads to a clean modular design for the runtime environment b data the operations in a procedure may be connected in such a manner that an operation in the network has two or more input files both of which figure have a common for example in files d and e both have op as an sn this situation results in a potential data conflict if op needs a record from file e control record is passed to op which can produce the suppose op in turn needs a record from file s control will then pass to op because of data conditions the next record to be produced w be for file a and not file b when this happens the record flows into op which can produce a record on file c of in turn cm produce a record on file d at this point a data occurs op has an active record for file i and therefore cannot handle the new record at this time it still needs a record from file e a c d it is possible to a situation is a potential problem but since flow of end record production are data dependent impossible to know whether a conflict will fact arise during execution which control it is in the compiler could take some action at compile time which would eliminate the problem by re structuring the procedure or the procedure could be left by providing a runtime response should the situation arise the of the first solution is that action must be taken in all cases of potential conflict whereas the conflict furthermore may not even arise at execution time the methods required segmentation the file external result in the very things the system was designed to avoid therefore the second approach the capability to to a conflict at runtime has been im there were several solution constraints placed on a it must guarantee that a successor receives all data generated by its predecessor it must present records to the successor in the order in which they were generated by the predecessor it must place no restrictions on the normal of any operation eg the artificial of record pro l it must not impose data volume limitations in order for a real time solution to work the system must be able to recognize a conflict when it occurs that is it must be whether an operation is ready to accept a record on a data path or not in addition when an operation requests data it must recognize whether a previous conflict has occurred since that will determine from where the next record for the operation must come the other requirement is a temporary for the records whose caused the ct the has been called a makes use of an internal snd an external when a record is produced which cannot be accepted by the target operation the record is stored in the when the internal is full the is onto disk the status of a file is re in the file statistics block when the operation receives en input record a flag bit is turned on end on until the is ready to accept a new record when a record is passed to sn operation this bit is tested if the bit is on showing that the operation has an active record the new record must be once this happens another bit is turned on to indicate that the file has records in the when the opera tion needs a new record if the bit is on a record can be from the otherwise control is passed to the predecessor operation to produce a record c a procedure states a total problem solution without regard to the actual machine environment it is left to the compiler to determine what configuration this job should have in order to operate efficiently on the target machine the operating system os requires that the resources needed for a job step be declared when the job is most compilers this requirement by requiring that the resulting executable module fit into one job step whose resource requirements have been at the start of the job ie before the com step this approach must take one of the following forms a limited number of file declarations appear in the job stream snd all internal files must be to then if there are more files needed in the program than exist in the external declarations some be to in order to effect the mapping all of the files for the entire procedure must be allowed for in the execute step the first solution is for the and therefore did not seen acceptable from a the second solution places burden on the machine resources in os all of the files are allocated when a step is in and until the step is therefore it was decided that the compiler should segment the procedure according to the constraints desirable for the host machine snd produce a second os job step the compiler also generates the necessary to run the job the compiler divide its job steps fall into which require that the object code into two or more the following categories resource limitations of the procedure as a single the execution job step the programmer has specified the inclusion of a previously created job step in of this job step requires pro segmentation on either side of the inclusion point the occurrence of a sort step requires that the entire file be available to the sort the first category the major problem to the segmentation algorithm how should the procedure be broken down into tractable units the com carries with it a parameter file which describes the limitations on a job step the programmer can some of these values in the program control section the segmentation phase determines a specific scheme on these using the scheme produced by the segmentation phase the exit phase of the compiler puts the object code into the specified builds the for the execution job end issues the command for the operating system to schedule the job the compiler phase treats each operation as a separate entity without to its relation to other operations tables are built which contain information concerning the operations size input files output files and identity using this information the segmentation phase can the data path network starting with the first operation in the procedure the algorithm attempts to add other operations to the job step under construction by following successor links an operation can be added to the current segment only if all of its input is available it does not cause the segment to its threshold for resources the input files for en operation are available if its predecessors satisfy the following criteria the predecessor is an external file either explicitly declared to be external or forced external by previous segmentation the predecessor segment is already in the if the input is not available the algorithm will attempt to make it available by adding the predecessor operation when all candidates for inclusion have been considered the segment is the process is then repeated for the remaining until all operations have been to a segment the language is perhaps more properly a data processing system it is a facility which the programmer to concentrate on the problem solution rather than the operating system snd hardware constraints the language is closely oriented to the of file processing which results in readable programs high operators or are coupled with lower level operators in the algorithmic statements it is powerful enough to the programmer the freedom to formulate very solutions conversely is easy enough to use that problems can be met a quick response 