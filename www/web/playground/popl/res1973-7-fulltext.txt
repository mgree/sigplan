on the definitional method of standard david ibm park abstract in order to define the semantics of in a form which is both precise and readable a method of definition has been developed which an abstract machine operating on data the classes of trees involved are defined by formal grammars while the algorithms expressed the behaviour of the machine are in this algorithmic metalanguage is itself intended to have largely intuitive semantics but these are made more precise by an tion of how they could be supported at a lower level of detail within the abstract machine introduction this paper describes a method of prog language definition which aims to close the gap that has often to exist between theory and practice in this field the method has been applied to an un large and realistic language fl with the intention of combining precision and completeness with and an optimistic analogy might perhaps be drawn with informal mathematics some formalism is used where justified and is by dis a more might help to correct might even reveal which had been at the intuitive level without necessarily the formal style as the normal working mode of expression indeed if the meta language to be discussed below is con to have any it now a more fundamental analysis than it has so far received in the somewhat of its development one to admit to an assumed to be largely that this metalanguage is the work of a the national standards institute and the european computer association have had working since to produce a standard and this effort is now completion a significant part of the work over the last two years has been to the con of an appropriate metalanguage and the writing of the whole definition in this form this has been carried out under the of the ad hoc editing of xj and the sub group of in two complete iterations over basis the draft ment specifying the language the general approach was to plan a systematic definition but only to introduce formalism where it would aid the reader who might typically be assumed precise without to a standard to answer to a difficult question to a in an formal system rather than discuss the fine points of metalanguage the at a first approximation and cast the definition accordingly in order to discover which of the fine points were practical and what problems the second iteration then relatively quickly towards of the difficulties characterization of method the method employed may be characterized as mechanical rather than or axiomatic that is to say it defines the semantics of the language by showing how its interpretation would affect the of an abstract a trans approach would merely map the given language into another language such as the lambdacalculus or a particular machine language whose semantics were assumed to be already known unless the source and target languages are very similar this trans to make the semantics to although we do perform some initial translation of pl this is only an intermediate stage in the working of the abstract machine and the target of the translation is more to a canonical form of the source language than to a language whose semantics immediately the page an axiomatic approach would specify the semantic effect of statements in the language in terms of transformations of about the state of the comp one aim here is to abstract the of a program from the mechanism used to achieve it although there seems to be an underlying notion of a machine state in the form of a list of variable names and values in examples so far it is too early to say how successful this method will be as a des tool however another aim appears to be in requiring languages to adapt to the capabilities of this method there are in such the of are apparent from the of i am the of this college and what i dont knowledge know the abstract machine we have intro is capable of performing certain algorithmic operations on information held in tree structures the representation of what to be a program it will determine whether it is valid and if so will execute the program to cause certain changes in the state of the machine the point of view here is that a programming language is designed to control the operation of real machines and that one should be able to display the semantics most effectively by making a model especially as one moves away from the purely aspects via operations on storage and data sets to the more explicit interaction with the environment which one currently to in separate control languages the realization of the definition consists in ensuring certain between the real machine and the one and in the case of these are limited to the logical struc ture and state changes of the data sets the of a program is taken to be the of such accessible results and whether or not an implementation closely models state changes of other parts of the abstract machine in order to achieve these is its own the balance of pre and that was that grammars were specified for the tree structures employed while the algorithms operating on them were written in the equivalent of a language this algorithmic metalanguage is in principle in a similar way to parts of the language being defined but this has not been shown it is assumed that a more intuitive definition of the metalanguage supported by an of a possible will suffice clearly one is close to a semantic situation familiar in natural language where a lang is defined in a subset of itself so that even ii one avoids there is at the very least an conceptual web in need of analysis this deeper aspect of the current still needs to be explored it one to place the method in a context the authors would be to be considered in the line of descent from algol but would not so a claim the similarity lies in the formal grammars and informal semantics and the extension beyond this is in making explicit the executing machine with its more complex state by comparison with the of this method is very similar in overall structure but has two main differences the metalanguage was completely formalized and was at a more primitive level so that an operation of the machine was not a sequential algorithm but was a function defined as a single conditional expression secondly the abstract for the standard has been des to be quite realistic in terms of the structure of the in its state and the notion of multiple proc operating possibly in parallel on a shared memory there is some similarity with the definition in the metalanguage for interpreting trees and the use of sequential algorithms however there not the same on syntax in the is definition which the translator from the interpreter with an interface provided by the abstract syntax and then uses an explicit during interpretation tree concepts the definition of deals with three classes of trees concrete parse abstract text and machine state and a uniform concept of tree is employed throughout this is of a tree which is a directed graph with a label eg procedure at each node and where the subtrees of any node are ordered al though the ordering is irrelevant it is needed eg in the concrete parse and in lists and it was eventually decided that the simple of concept the advantages of explicitly distinguishing instances where the order was significant more over each node implicitly has a unique name by which it can be designated when required a copy or a tree has the same ordered structure and labelling but new unique names to its nodes equality of trees requires equality of all except the unique names of nodes and identity requires that these should match also the explicit label of a node may be either a category name or some other type of value such as an integer or a ie a copy of the unique names implicitly associated with some node thus a single value may be handled as a tree with only a root node labelled with this value and data objects referenced in the meta language are uniformly regarded as trees the terminology applied to trees is developed from the of a tree consisting and an ordered of a node the root possibly empty set node of immediately contained trees any tree x immediately contained in y or immediately contained in a tree contained in y is said to be contained in y x is simply contained in y if and only if it is con in y and it is not contained in any tree z contained in y and having a root node equal to that of x or of y for example if we refer to an expression simply contained in a tree representing some statement in a program we mean tne complete expression subexpression which tree and not some might be a tree rooted in expression at some lower level within it since simple contain frequently required concept the use of any form of phrase not the is taken to imply simple containment eg if y has an expression meaning a tree with root node labelled the expression of y or its expression the terminology makes it possible to perform the three essential types on trees namely to test them for the presence or type of their subtrees to select subtrees from them and to con struct or alter them however con can be if as root node a with two immediate subtrees the first being b with immediate sub trees c and d and the second being x where x is the name of some tree meaning that a copy of it is to be made in constructing the new tree this may therefore be abbreviated as a b c d x the indentation is although helpful with large trees one or more at the end of such a constructed tree may be replaced by a period from consideration of particular trees to classes of trees we grammars composed of sets of production rules in a slightly extended form the inter we make of such rules is that they describe how to construct a tree belonging to the class described by the grammar it is only in the traditional syntactic use of these rules that the sequence of terminal nodes of a tree acquires a special importance as being the sequence of characters representing an in the language the of using a form of production rule with both selector and predicate functions was considered but the and simplicity of having all trees labelled only at the nodes and not so to on the branches as well was as an illustration we will construct a tree from a rule of the form p ql ls u a rule in the meta language is rather like a statement in a language which it may be used to define ie a metalanguage rule itself has a structure which has to be validated and correctly have chosen to escape interpreted from circularity we or at this point by not giving a formal grammar for the metalanguage but describing in how a rule is to be interpreted so in the above example the rule indicates that any node labelled p must have the righthand subtrees as described side of the rule by there are three types for concatenation position in the of metalanguage indicated by rule permutation operator and choice between alternatives in order of precedence expressions are regarded as single operands and the first stage in using a rule to construct a tree is to partition the syntax expression sub expressions separated by t l the operator of lowest precedence and to choose one of these alternative suppose we discard the of having q alone and next part the other alternative by the operator and decide to use the tation which these partitions to yield the square brackets indicate that their contents may be omitted which we choose to do here and the a syntax expression which must be interpreted according to the method just described choosing the alternative we would then have the tree p t of t indicates that it always labels a terminal node in the grammar in question ie it does not occur on the lefthand side of any pro rule indicates by con that it is to have one or more immediate subtrees of type r it we then apply the rule for r to each of these the construct ion is completed when each terminal node of the tree is either of a type which is always terminal or of a type which has pro an empty set of subtrees algorithm concepts the operations of the abstract are defined by algorithms which may be compared with the logic or supporting the operation codes of a comp these operations andor change the ie the memory of the abstract machine which contains all the information directly or indirectly semantics including some form of the program itself the and are used in the definition of the nodes except for those belonging to the grammar of the abstract program which are distinguished by and to help the reader operations defined by algorithms memory in tree form fig abstract machine an operation of the machine is defined by a sequence of steps or a set of mutually exclusive cases from to n the step or case may itself contain a sequence of steps or a set of cases from i to im and so each step or case actions to be performed using various informal statement types in the metalanguage a case begins by stating the predicate that must be for lt to be applicable as an example of an operation consider the definition of the operation in fig this begins with an which gives some to the reader but the material is not reached until the operation step consists of an action meaning that one tree is to be copied as a subtree of another in the position in which it may occur according to the syntactic rules the type of the latter the word current has the operation is invoked at the beginning of every block activation to establish for the automatic and defined variables local to that block the automatic variable are if their declarations specify any expressions evaluated during the such as in or initial expressions may not reference other automatic or defined variables local to this block the operation will impose the restriction when it finds a reference to a variable declared in a block for which there exists a the is only present while the operation is active operation step a to the current step for each defined perform step of the current block that contains automatic or step let id be the identifier immediately contained in d case d contains automatic step perform d to obtain an step perform to obtain a step append to the current g an automatic step if d contains initial then perform gd case d contains defined step perform d to obtain an step append to the current id a defined step delete the of the current step replace the current by a operation for fig definition of the operation been defined precisely particular with respect used in to the defining the current is the simply contained in the corresponding to the block currently being executed step indicates iteration with a for each applied to the first form of the perform action which refers to one or more steps in the same operation a name such as d introduced between is a variable local to the operation whose value v say is a of the tree mentioned immediately d on subsequent uses preceding of d it the is ie it means the tree designated by v except when it is in a way similar to its original definition as would happen here on the next iteration of each or by its occurrence after the word let the let statement is merely a more explicit syntax for this kind of definition of a local variable and step an instance of this if d automatic the predicate of case is satisfied and steps to will be performed in sequence the second form of perform which is used to invoke another operation as a sub routine or function occurs in step here it is a function that is invoked to obtain a resulting value which is then given a name d is passed as an argument to this operation whose definition will name a parameter to correspond to it argument passing is by reference ie a to the argument is passed and becomes the value of the parameter which is then on use just like a local variable the append action in step a tree at the end of a list step an statement containing a subroutine call steps and consist of the other and two tree actions which we use delete and replace when a tree is replaced by another the first tree is deleted and a copy of the second tree is made with its root at the same position and having the same implicit name as had the root of the tree just deleted assignment of a value to a variable is permitted in the syntactic form of a set action eg tv to but this is only an alternative form of replacement with the usual implied dereferencing of the variable name meaning replace the tree designated by the strict value of tv by true other statement types not illustrated here are go to used terminate an operation at some point other than the end of the last step and return a value from a function which also terminates the operation values are returned by reference so that if the result is a tree constructed within the function it must be copied back to the caller who will then receive a of the copy values local to an operation are deleted when it terminates clearly we have reached a point at which it is necessary to try and support our claim that we can indicate a of the metalanguage which will suffice to intuition in its weaker step provides the for this since it constructs a tree which is to be placed in the machine state at exactly the point at which it off into there may be many active in the and each one has a conceptual processor associated with it which may execute operations with respect to the other processors in particular the machine has a current in each task and this has a statement control where one could the actions of the metalanguage interpreting the synchronous of the current block involved in statements the is to be con as a pushdown stack where each operation will have a subtree which is not formally defined but contains such information as the name of the operation a list of its parameters and local variables with their current values all trees constructed during execution of the operation or copied back to it from invoked functions an of in which step or case it is executing its algorithm how far it has through a for each iteration and so when a perform invokes another operation this pushes down the stack and becomes the active operation when an operation terminates its whole tree including its local values is deleted and the stack up activity in the operation now at the head of the stack being immediately after the point in its algorithm at which it was suspended to return to the analogy suggested at the beginning of this section it is as though an abstract processor had a machine cycle which could cause the execution of operations with their own local memories per invocation together with the of the capability conclusion experience with this metalanguage has so far been although it still both in its specification and in its practical application to the definition of pl it appears to be sufficiently precise to be to programmers the conjunction of these attributes has led to more than one bug being discovered in the definition the version has september been published as the th and update of basis the joint working draft standard of the and the final draft is due in the first half of major contributions to the design and execution of this definitional work have been made by data general ibm michael general richard ibm richard bell and the editor ibm of references basis draft of standard th sept pj a correspondence between algol and comm acm scott of a mathematical theory of computation proc princeton conference on information science and systems hoare car an axiomatic basis for computer programming comm acm october k on the formal description of annual review in automatic programming vol part 