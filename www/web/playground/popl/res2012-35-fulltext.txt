metalevel features in an theorem prover j moore department of computer sciences university of texas at austin categories and subject descriptors f specifying and verifying and reasoning about programs mechanical verification general terms verification keywords acl abstract the acl theorem current of the theorem a theorem prover for an extension of a firstorder applicative subset of common lisp acl is in use at several major to verify functional correctness of important components of commercial designs among the applications of acl are the following · all elementary floating point operations on all since have been verified with acl to satisfy the ieee floating point standard · the was verified with acl as specified by the level of the common criteria and was certified capable of simultaneously processing through top secret classified data · the unit of the via bit x cpu has been verified to be correct with acl in addition important properties of the clock tree for the entire x design have been verified these and other applications establish that the acl system provides a useful specification and modeling language as well as a useful mechanical theorem proving environment surprising to many in the programming languages community is the fact the acl language is primitive it is untyped all functions are total there are no quantifiers and there are no functional objects it is a firstorder language these can make acl models more and than comparable models in other languages would be but also make it easier to build a powerful proof engine for the language such a powerful theorem prover can in turn be exploited to produce very efficient runtime code the acl theorem prover is a program written in the same language supported by the theorem prover all of the data structures used in the theorem prover are objects in that language users copyright is held by the popl january ­ pa usa acm of the proof assistant must understand the language since it is their specification and modeling language furthermore users are permitted to write programs ie to define functions in the language and to run those programs on the theorem provers data because those programs are thus the prover can be up to much among other things the acl user can build and efficiently run models of complex computing like or floating point units while with specifications theorems and proofs build new theorem prover components use acl to prove that those components meet the specifications required by acl and then cause the system to use the userdefined components in place of the primitives provided by the acl define functions that the goal being proved and the acl data base and context and then compute at runtime perhaps surprisingly such sophisticated metalevel facilities were implemented primarily at the request of the acl user community and find routine use in the projects mentioned above acl is thus exploiting the programming of the and who use it to produce proofs short j moore holds the br in computing theory in the department of computer science at the university of texas at austin he was of the computer science department for years and led the m to build the center for computer science and the michael computer science hall upon which ground was broken in october he is the author of many and papers on automated theorem proving and mechanical verification of computing systems along with he is a of the theorem prover and the fast string searching algorithm with he is the of the acl theorem prover moore his sb in mathematics from mit in and his phd in computational logic from the university of edinburgh in moore was a of computational logic inc and as its for ten years he and bob were the current in automatic theorem proving by the mathematical society in they were the herbrand for their work in automatic theorem proving moore is a of the association for artificial intelligence an acm and a member of the national of engineering moore and the acm software system for and engineering a most effective theorem prover named the theorem prover as a formal methods tool for verifying hardware and software 