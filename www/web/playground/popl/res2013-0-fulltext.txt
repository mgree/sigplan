engineering mathematics the odd order theorem proof microsoft research cambridge jj uk cb fb abstract even with the of computer tools the formalized description and verification of mathematics remains a task not least because of the with which combine theories to achieve their ends by combining tools and techniques from type theory language design and software engineering we have to capture enough of these to formalize the proof of the odd order theorem a result in group theory categories and subject descriptors f mathematical logic and formal languages mathematical logic ­ mechanical theorem proving j physical sciences and engineering ­ mathematics and statistics keywords theorem proving proof engineering group theory mathematical components coq the challenge of computer mathematics this past year we were that the app that led alan turing to the of computer science was the completely formal verification of mathematical theories and proofs yet while computation with mechanical has found useful applications in nearly every human activity this original goal has even with the computer proof systems which have become very good at the verification of code and popl papers dealing with the proofs produced by working can be most my experience with the formalization of the theorem in indicated that the problem might not be a lack of automation as is often but a lack of expressiveness of the tools and methods used to describe mathematics even though the proof uses only the most elementary its formalization had required new ways of and writing theories and proofs ­ but any generalpurpose automation this suggested that language and software engineering techniques could perhaps be applied successfully to mathematics in i the mathematical components project at the microsoft research ­ inria joint center to test this thesis by developing a formal algebra using the coq system the aim was to cover most of a math and the work was to be driven and validated by the formalization of a difficult and important result in group theory and odd order theorem in september we finally copyright is held by the popl january ­ italy acm the odd order theorem and paper with the short statement theorem all finite groups of odd order are solvable the pages that followed exposed the most difficult and complex group theory proof of its time on most of elementary results in algebra including matrices polynomials vector spaces modules algebraic number theory and galois theory and advanced results in group theory such as the and theorem or the theory of characters the paper introduced several novel techniques that would later play a key role in the full classification of finite simple groups eg transitivity subsets and functors its result has applications throughout group theory and can be seen as the starting point of the classification itself yet it was considered a very difficult paper to read before a in and simplified and filled several in the all of this made the odd order proof the perfect test for a mathematical formalization project even the expanded statement of the theorem is short because it only involves two definitions definition h is a normal of a group g iff h is the kernel of a homomorphism from g to a factor group g h one can compute mod h in g this is written h g definition a group g is solvable if there is a normal series h h hn that each factor hi hi is indeed a full formalization of the statement from basic logic including the necessary arithmetic and takes only two pages note that any finite group has a maximal normal series whose factors are all simple groups this is why the classification is so important for solvable groups these factors will all be prime cyclic groups also solvable groups are to the resolution of polynomial equations the motivating application of group theory the proof is just as complex as the odd order statement is simple it proceeds by studying a minimal counterexample g refining its structure until a contradiction is reached this study consists of three parts local analysis one studies the proper of g which are all solvable by assumption using finite representation theory matrices with coefficients in a finite field one shows that their intersection has rank at most in turn this implies that most of these groups closely groups with two possible exceptions similar to a finite field with its galois group character theory one uses character theory traces of matrices with complex coefficients to extract information about g from the description of its this is possible because characters have a geometry and there are mapping certain characters to characters of g the global norm inequalities imply that are exactly and that the two galois exceptions occur exactly as well generators and relations using explicit exploiting the relations between the finite fields embedded in g one constructs a polynomial of degree q with p q roots in a field of order pq at last contradiction the revised proof of the first part by and the pages of volume of the series the second part by pages of volume while the last is a page appendix in volume the represent about twice that amount from a variety of sources the coq formalization of the lemmas of the proof loc out of for the full mathematical components the basic premise of project was that formalized theories would be more useful if they could be composed more freely and that this could be achieved by replacing the th first order logic with the more modern dynamic higherorder logic supported by the coq system first order logic imposes an exact fit at the symbol level between the statement of the assumptions of a proof step and the facts that them in parts of a statement can be executable and matching is performed up to functional evaluation thus in principle it is possible to formulate theories so that they behave more like software components that automatically generate glue code to facilitate rather than simple procedures that only work for a fixed data representation our challenge was to understand how this could be made useful in practice we realized early on that this flexibility was even more crucial for stating theorems than for proving them mathematical notation is to provide exactly the information needed to determine a mathematical object in a given context much of it makes little sense in the setting of firstorder logic for instance the factor group g h we saw earlier depends on the multiplication operator used in g and h this must be determined by the context if we are to support the common practice of computing and g and h as sets as in the statement of the isomorphism theorem gh h g g h the other isomorphism theorem g k h k g h where the s refer to three different shows that context must be understood locally the solution to this overloading problem is the familiar object paradigm specifically its functional programming equivalent type classes in fact in coq type classes are significantly more powerful than in traditional functional programming because they have an internal representation in the logic as records instance inference is an integral part of type inference it amounts to projections of class records during higherorder unification using a set of canonical instances declared by the user it can supply both operations an properties and be based both on types and data values a single expression can exploit several type classes for example in g h a finite group type class is used to determine which multiplication is involved and to ensure that the definition is constructive and a group class is used to that resulting set is actually a group as long as g is in addition to supporting the traditional algebraic hierarchy of vector spaces fields algebras etc our type classes can also recognize groups functions ac operators and even direct sums of the extended type inference substantially helps the formalization process it is not that a single line of notation two pages of inferred annotations and when we introduced the group class nearly half of our proof scripts into type inference big theories big theorems big proofs software engineering techniques more ones are also in with the size of the theories ensuring that the definitions and lemmas and theorems remain accessible requires a triple combination of management across modules rational naming conventions within modules and effective search tools in the the distribution of formal proof lines is a close fit to a power law this is a distribution which means that while most lemmas will have a very short proof two lines or less most proof lines will occur in the proof of large theorems and that such proofs will get very large indeed thus the formalization of the odd order theorem accounts for of the theorems but of the script lines and includes a line proof for theorem in the character theory revised proof we also observed the need for large theorem statements it is to have one large theorem that collects all the facts about a given situation eg the structure of an rather than a of whose applicability must be justified separately our proof language implemented by the coq efficiently supports extracting a relevant fact subset from such a theorem in order to handle the big proofs our language helps enforcing explicit control and data flow the latter also turned out to be an tool for the logical structure of a proof in several cases major simplifications finally we identified several formal proof structures that cannot be expressed easily with the traditional assertion case analysis and induction constructs a general without loss of generality construct was in capturing symmetry arguments a small library for inequalities proved for circular inequalities acknowledgments the work described here was done in with the members and of the mathematical components project a j y c f s le s a s r l a e and l 