a proof system for separation logic with magic wand lee park department of computer science and engineering university of science and technology of abstract separation logic is an extension of hoare logic which is as an enabling technology for program verification it features two new logical connectives separating conjunction and separating implication but most of the applications of separation logic have exploited only separating conjunction without considering separating implication nevertheless the power of separating implication has been well recognized and there is a growing interest in its use for program verification this paper a proof system for full separation logic which supports not only separating conjunction but also separating implication the proof system is developed in the style of sequent calculus and satisfies the of cut the key challenge in the development is to a set of inference rules for manipulating heap structures that ensure the completeness of the proof system with respect to separation logic we show that our proof of completeness directly translates to a proof search strategy categories and subject descriptors f mathematical logic mechanical theorem proving proof theory general terms verification keywords separation logic proof system theorem prover introduction separation logic is an extension of hoare logic designed to simplify reasoning about programs manipulating mutable data structures with potential pointer aliasing it features two new logical connectives separating conjunction and separating implication whose semantics directly assumes memory heaps structured as a monoid separating conjunction allows us to describe properties of two disjoint heaps with a single logical formula a b means that a given heap can be divided into two disjoint heaps satisfying a and b respectively separating implication commonly known as magic wand allows us to reason about heaps extending a given heap a b means that if a given heap is extended with a disjoint heap satisfying a the heap satisfies b the use of the two separating connectives naturally leads to local reasoning in program verification in that we permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for components of this work owned by others than acm must be abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission andor a fee request permissions from popl january Г san diego ca usa copyright c acm only need to reason locally about those heaps directly affected by the program so far most of the applications of separation logic have exploited only separating conjunction for example all existing verification tools based on separation logic such as space infer and use a decidable fragment by berdine et al or its extension which provides only separating conjunction by of the principle of local reasoning however these tools are highly successful in their individual verification domains despite not using separating implication at all although separating implication is not discussed as extensively as separating conjunction in the literature its power in program verification has nevertheless been well recognized just around the of separation logic yang already gives an elegant proof of the correctness of the algorithm which relies on the use of separating implication in the main loop invariant shows how to reason abstractly about an iterator protocol with separation logic by exploiting separating implication in the specification of iterators et al adopt the idea of separating implication in extending an alias type system in order to express operations on recursive data structures recently and give a concise proof of the correctness of garbage collector in a proof system based on the rule a of the frame rule of separation logic whose premise checks a logical entailment involving separating implication these promising results suggest that introducing separating implication alone raises the level of technology for program verification as much as separation logic only with separating conjunction improves on hoare logic despite the potential benefit of separating implication in program verification however there is still no practical theorem prover for full separation logic the theorem provers for separation logic such as and support only separating conjunction and the labelled tableau calculus by and does not directly give rise to a proof search strategy because of the of such a theorem prover all proofs exploiting separating implication should be manually checked which can be even with the help of lemmas provided by the proof system as in another consequence is that no existing verification tools based on separation logic can fully support backward reasoning by weakest precondition generation which requires separating implication whenever verifying heap assignments see and ohearn this paper a proof system psl for full separation logic which supports not only separating conjunction but also separating implication its design is based on the principle of proof by contradiction from classical logic and we develop its inference rules in the style of sequent calculus psl uses a new form of sequent called world sequent in order to give a complete description of the world of heaps and its use of world sequents allows us to treat separating implication in the same way that it treats separating conjunction the key challenge in the development of psl is to a set of inference rules for manipulating heap structures so as to correctly analyze separating conjunction and separating implication we show that psl satisfies the of cut and that it is sound and complete with respect to separation logic the proof of completeness directly translates to a proof search strategy which is the basis for our prototype implementation of psl we show that it is easy to extend psl with new logical connectives and predicates such as an overlapping conjunction a b by and separating implication has been commonly considered to be much harder to reason about than separating conjunction as partially by lack of theorem provers supporting separating implication and of verification systems supporting separating conjunction our development of psl however suggests that a proof system designed in a way can support both logical connectives in a coherent way without requiring distinct our prototype implementation of psl also suggests that such a proof system can develop into a practical theorem prover for separation logic to the best of our knowledge psl is the first proof system for full separation logic that satisfies the of cut and provides a concrete proof search strategy this paper is organized as follows section gives on separation logic section our proof system psl and section gives three examples of proving world sequents section proves the soundness and completeness of psl with respect to separation logic and section discusses the implementation and extension of psl section discusses related work and section concludes semantics of separation logic separation logic extends classical firstorder logic with multiplicative formulas from intuitionistic linear logic formula a b c primitive formula expression location expression value location stack variable local variable p e l v l l l и и и x y z a b c p гa a a i a a a a aa l e e e и и и иии l иии гa a b and aa are from classical firstorder logic i is the multiplicative unit a b is a separating conjunction and a b is a separating implication we define as г a b as гb and a b as гa b we use conventional precedence rules for logical connectives г in this work we do not consider inductively defined predicates primitive formulas include a pointsto relation l e for describing a singleton heap all other primitive formulas describe relations between expressions for simplicity we consider only an equality relation e e expressions denote values which include locations l location expressions are a special class of expressions that denote locations in the present work we allow only locations as values but it should be straightforward to introduce additional forms of expressions for new types of values such as booleans and integers we syntactically distinguish between stack variables which from the program being verified and thus may be called global variables instead and local variables which are introduced by existential quantifiers and thus can never appear outside corresponding existential formulas we specify the semantics of separation logic with respect to a stack and a heap a stack s is a finite partial mapping var val from stack variables to values where var denotes the set of stack variables and val denotes the set of values given a stack s we can determine a unique value for every expression e which we write as e s a heap h is a finite partial mapping loc val from locations to values where loc denotes the set of locations we write hh to mean that heaps h and h are disjoint ie domh domh we write h h for the union of disjoint heaps h and h where hh is assumed and for an empty heap heaps form a commutative monoid with as the associative operation and as the identity commutativity associativity h h h h h h h h h h h h h h h h implies h h given a stack s and a heap h we obtain the semantics of separation logic from the satisfaction relation s h a for formulas defined as follows и s h l e iff h l s e s ie h is a singleton heap mapping l s to e s и s h e e iff e s e s и s h iff never и s h гa iff s h a и s h a b iff s h a or s h b и s h i iff domh ie h и s h a b iff h h h and s h a and s h b for some heaps h and h и s h a b iff h h h implies s h a or s h b for any heaps h and h и s h aa iff s h v aa for some value v note that the definition of s h aa directly value v for local variable a in formula a in v aa without extending stack s because we syntactically distinguish between stack variables and local variables although the satisfaction relation s h a is enough for specifying the semantics of separation logic we derive the definition of its negation s h a which plays an equally important role in the development of our proof system и s h l e iff h l s e s ie domh l s or h l s e s и s h e e iff e s e s и s h iff always и s h гa iff s h a и s h a b iff s h a and s h b и s h i iff domh ie h и s h a b iff h h h implies s h a or s h b for any heaps h and h и s h a b iff h h h and s h a and s h b for some heaps h and h и s h aa iff s h v aa for any value v we observe that the definition for separating implication is symmetric to the definition for separating conjunction и s h a b should find a certain pair of heaps whereas s h a b should analyze an unspecified pair of heaps и s h a b should analyze an unspecified pair of heaps whereas s h a b should find a certain pair of heaps this symmetry suggests that we can incorporate separating implication into the proof system in an analogous way to separating conjunction a formula a is valid written a if s h a holds for every stack s and heap h our proof system psl can check the validity of every formula in separation logic proof system psl for separation logic this section presents the proof system psl for separation logic which is developed in the style of sequent calculus we first explain world sequents the main judgment in psl and then present the inference rules world sequents the design of psl is based on the principle of proof by contradiction from classical logic we describe the state of each heap with a set of true formulas and another set of false formulas a world sequent in psl gives a description of the entire world of heaps and a derivation of it means that the description is hence in order to check the validity of a formula in separation logic we use it as a false formula about an arbitrary heap w about which nothing is known and attempt to produce a logical contradiction by proving a world sequent consisting solely of heap w the definition of world sequents and the principle of proof by contradiction are inherited from the nested sequent calculus for boolean bi by park et al since psl is designed to check the validity of a formula it assumes an arbitrary stack which implies that every stack variable denotes an arbitrary value this in turn implies that in a derivation of a world sequent we may use a fresh stack variable to denote an arbitrary value we exploit this interpretation of stack variables in an inference rule for firstorder formulas a world sequent consists of expression relations heap relations and heap sequents expression relation expression relations heap variable heap relation heap relations truth context context heap sequent heap sequents world sequent e e e e и и и n w u v w w w w l w e w w l e и и и n и a и a w и и и n и an expression relation is an equality or inequality between two expressions if we introduce new forms of primitive formulas eg e e we should introduce corresponding forms of expression relations и involving an empty heap or a singleton heap as atomic heap relations as heaps form a commutative monoid we assume commutativity of and use w w and w w и a heap sequent w describes heap w with truth context and context which contain true formulas and false formulas respectively about heap w in this way a world sequent gives a complete description of the world of heaps we require that no local variable appear in expression relations and heap relations and that a world sequent contain a unique heap sequent for each heap variable of heaps induced by heap w we say that parent heap w has two child heaps w and w which are sibling heaps to each other we can also extend relations to derive relations if a heap has no pair of child heaps wa we may allows have us to all heap relations and turn w into a terminal heap psl also uses an expression contradiction judgment which is an abbreviation of a particular form of a world sequent и и and means that expression relations produce a logical contradiction since the definition of expression relations is ex we do not give inference rules for the expression con judgment and just assume a decidable system for it for simplicity we write e e for e e and e e for e e we write l e l e for l l and e e and l e l e for l l or e e psl consists of logical rules in figure structural rules in fig and heap contradiction rules in figure the logical rules deal with formulas in heap sequents the structural rules graphs of heaps induced by heap relations and the heap contradiction rules detect logical in heap relations or heap psl shares the logical rules for and multiplicative formulas with the nested sequent cal for boolean bi in but the structural rules and the heap contradiction rules are specific to separation logic we read every inference rule from the conclusion to the premise and the tion of a world sequent always terminates with a proof of a logical contradiction hence in order to show the validity of a formula a we try to prove a world sequent и и и aw logical rules of psl figure shows the logical rules of psl except for the rule a logical rule focuses on a principal formula in a heap sequent and either produces a logical contradiction in the rule l or rewrites the world sequent of the conclusion according to the semantics of separation logic in section for each type of formulas psl has both a left rule which analyzes a true formula about a heap and a right rule which analyzes a false formula about a heap as in a typical sequent calculus the rules for pointsto relations introduce a corresponding heap relation the rules for propositional and firstorder formulas are from firstorder classical logic in the rule l the fresh stack variable x denotes an arbitrary value in the rules l and r we write for substituting expression e for local variable a in formula a the rules l and r are the only rules that add expression relations and the rule checks if expression relations produce a logical contradiction the rules il and ir use the fact the i is true only at an empty heap the rules l and r are based on the following interpretation of multiplicative conjunction which closely matches the semantics of separation logic in section и a b is true at heap w iff w w w and a is true at heap w and b is true at heap w for some heaps w and w и a b is false at heap w iff w w w implies that a is false at heap w or that b is false at heap w for any heaps w and w hence the rule l creates some fresh child heaps w and w whereas the rule r chooses any existing child heaps w and rules for pointsto relations w l e w w l e w l e w l l ew r rules for propositional formulas w l aw гa w a w a w b w a b w l a bw a bw r rules for multiplicative formulas w w i w il w w iw ir fresh w w w w w w a b a b w l w w w a bw aw w a bw w bw a bw w w r w w w fresh w w a b w aw w a b w w b w a b w w w l w w w w a и bw a bw r rules for firstorder formulas fresh x w aa w l r rules for primitive formulas for expressions e e w e e w l e e w e e w r figure logical rules in the proof system psl for separation logic w similarly the rules l and r are based on the following interpretation of multiplicative implication и a b is true at heap w iff w w w implies that a is false at heap w or that b is true at heap w for any heaps w and w и a b is false at heap w iff w w w and a is true at heap w and b is false at heap w for some heaps w and w hence the rule l chooses any existing sibling heap w and parent heap w whereas as the rule r creates some fresh sibling heap w and parent heap w the rules l and r are the only logical rules that add heap relations to extend the graph of heaps and introduce fresh heap variables w and w that are not found in the world sequent in the conclusion the rules r and l are the only logical rules that the principal formula into world sequents in the premise in the rules r and l we allow equalities between heap variables w w and w since an equality between these heap variables the requirement that a world sequent contain a unique heap sequent for each heap variable we interpret heap sequents for the same heap variable in the rules r and l as follows и in the conclusion we implicitly the same heap sequent as necessary и in the premise we combine all changes made to individual heap sequents for the same heap variable to produce a single heap sequent for example an equality w w in the rule r yields the following special instance w w w a b aw w a bw bw a bw w the rule relations has a total of three special instances now we can decompose each individual formula by applying its corresponding logical rule thus expression rela tions and heap relations and creating fresh heaps when expression relations become we apply the rule to complete the proof search in order to obtain a complete proof able to w for a enumerate given heap w for the rules example from w r and l and w heap we assume that we for can make a correct guess on expression e in the rule r the remain ing challenge is to a set of structural rules and another set of heap contradiction rules satisfying these two requirements which would enable us to enumerate all feasible heap relations from those rules for heap relations and leaving only disjoint terminal heaps w u u w v v fresh w w w w u u v v w w w w w w w w и и и и w u u w u u fresh w v v v и и и и rules for applying associativity of the union of disjoint heaps w u v u u u fresh u u u v w u u и assoc rules for propagating atomic heap relations w w w w w w prop w l e w w w w l e w w w w w w w l e w w w w w l e w w w w l e prop w prop w w l w el e prop rules for normalizing heap relations ww w u v w w u v w u v w w wu v w u v v w wu w w w u w u w u rules for creating an empty heap and applying the monoid laws for empty heaps fresh w w и w w w w w w u u figure structural rules in the proof system psl for separation logic generated by the logical rules and detect all types of heap structural rules of psl the structural rules of psl are divided into five groups according to their roles in graphs of heaps represented by world sequents the order of the structural rules in figure roughly follows their use in the proof of the completeness of psl with respect to separation logic theorem in a certain sense we design the structural rules so as to obtain a complete proof search strategy for separation logic when the logical rules are already given as in figure below we informally discuss the key properties of the structural rules which we formally present as part of the proof of the completeness of psl in section rules for heap relations the rules and heap relations in order to leave only disjoint terminal heaps roughly speaking two heaps are disjoint if they share a common ancestor which has a heap relation separating them in the premise of the rule child heaps ui and vj i j share a common parent heap w but their exact relations are unknown for example heap u may completely partially overlap with or be disjoint from heap v in general each pair of child heaps ui and vj are allowed to share a common child heap so the rule their relations by introducing four fresh terminal heaps w to w which are all disjoint from each other ww u u v v u u v v w w w w now for example we may assume that the intersection of heaps u and v is represented by heap w note that if heap ui or vj is not a terminal heap the rule gives rise to unknown relations between the existing child heaps of ui or vj and two of the fresh terminal heaps the rule corresponds to the axiom for separation algebras the rule relations between two sibling heaps u and u of heap u by introducing three fresh terminal heaps v to v which are all disjoint from each other ww w u w u u w w u u u v v v v v v similarly to the rule the rule may give rise to new unknown relations involving heap w w u or u unlike the rule however it also creates a common ancestor w of all heaps otherwise the fresh terminal heaps themselves come to have unknown relations thereby the purpose of applying the rule thus the rule eliminates unknown relations between child heaps and the rule eliminates unknown relations between sibling heaps of a certain heap both potentially creating similar unknown relations by repeatedly applying these rules we can eventually obtain a graph of heaps such that there exists a root heap that is an ancestor of all other heaps all terminal heaps in the graph are disjoint rule for applying associativity of the rule assoc creates new heap relations according to s suppose that we have two heap u the rule assoc introduces a fresh heap u in order to associate two heaps u and v which are known to be disjoint but do not have a common parent heap yet it also assigns heap w as the common parent heap of heaps u and u ww u u u assoc u u v u u v note that unlike the rules and the rule assoc creates no fresh terminal heaps the rule assoc is crucial for all heap relations in a particular heap the basic observation is that by repeat applying the rule assoc to a graph of heaps we can eventually obtain another graph of heaps with the same set of terminal heaps such that for each combination of terminal heaps there is at least one heap exactly these terminal heaps and no others by starting with a graph of heaps obtained by repeatedly applying the rules relations w we can enumerate all feasible heap w w for a particular heap w where we assume that heaps w and w are in the graph for the case that w or w is an empty heap however we need another set of structural rules for dealing with empty heaps we should also combine heap sequents for the same heap hence we have not yet accomplished the first requirement for obtaining a complete proof search strategy rules for propagating atomic heap relations the rules are w terminal heaps a propagation rule converts an atomic heap relation for a heap heaps w according assume w to the w following w fact on atomic heap relations where we и w iff w and w for the rules prop and prop и w l and w e iff either w l l e for the rules e and w prop and prop the second clause to derive world sequents in the premise the rule и w w l or w w l e and note that although the new heap relations for the child heaps w and w imply the original heap relation we have to preserve in every world sequent of the premise because it may interact with another pair of w w after considering child heaps w and all such interactions w with however we may safely discard by the rule weaken to be introduced in section the propagation rules are the first step toward a complete pro for producing heap which detect all types of heap suppose that we repeatedly apply the prop rules until no more new heap relations arise from atomic heap relations after atomic heap relations for non terminal heaps we obtain a set of graphs of heaps with the same structure as the original graph in which atomic heap relations re side only for terminal heaps now in order to produce heap from atomic heap relations we need to only termi heaps of these graphs which makes it much easier to develop a complete procedure for producing heap rules for normalizing heap relations the rules for normalizing heap relations or normalization rules merge two identical heaps and empty heaps while the graph of heaps in the rule heaps w and w are identical and we merge the two heaps by ing their heap sequents here we write ww for substituting w for w in that every is heap relation in note that partial deterministic in the the rule rule v im implies that heaps w and u are identical hence we merge the two heaps by combining their heap sequents and the empty heap v from the graph of heaps similarly the rule merges two empty heaps w and u by combining their heap sequents in effect it allows us to collect all empty heaps which do not need to be distinguished for the purpose of proof search into a single empty heap note that the rule implies the existence of a single unit of by repeatedly applying the normalization rules to a graph of heaps we can eventually obtain an equivalent graph which maintains a unique world sequent for each heap and possibly a unique empty heap isolated from the graph it is important that the normalization rules the graph of heaps but preserve all the properties established by the previous structural rules for example if the graph satisfies the property that all terminal heaps are disjoint established by the rules and it continues to satisfy the same property after an cation of any normalization rule hence it is safe to apply the normalization rules after applying the previous structural rules w w l e cont w w cont l e l e w l e w l e cont l e l e w l e w l e cont l l w w w w l e w l e cont figure heap contradiction rules in the proof system psl for separation logic rules for dealing with empty heaps the last group of structural rules create an empty heap and apply the monoid laws for empty heaps we use the rule when no rule can directly produce an empty heap the rule which is based on of is sound because extending a heap with an empty heap makes no change the rule creates an is based on v by the rule and w of u w u it turns out that we need the rule for the proof of of cut theorem but not for the proof of the completeness of psl theorem now we can the first requirement for obtaining a complete relations to enumerate all heap for a heap w we first analyze the graph of heaps obtained by repeatedly applying the previous structural rules this produces all such heap relations that involve only nonempty heaps then we apply the rule as necessary to produce all such heap relations that involve empty heaps we may think of the rule as extending heap relations for heap w with a pair of child heaps w and w or a pair of sibling heap w and parent heap w it is the only rule in psl that is capable of creating new heap relations for an arbitrary heap thus whenever an arbitrary heap with no heap relation needs a pair of child heaps or a pair of sibling and parent heaps we should apply the rule which an existing empty heap for example we prove the validity of as follows и w w w w и w w w w и w и l w и и w w w w и w и r и w и w и и и и w note with there w is no need to w if we can create prove fresh child heaps the world sequent w and w using fresh child heaps about which nothing is known we should be able to prove it equally by an existing empty heap similarly we prove the validity of г as follows и w w w w и l и w w w w и l и w и и и и и и г w again we do not create fresh sibling and parent heaps and instead reuse an existing empty heap heap contradiction rules of psl the proof system psl has five rules cont to cont for producing heap in conjunction with the structural rules these rules enable us to detect all types of heap tions thereby the second requirement for obtaining a complete proof strategy to see why assume a world sequent by repeat applying the structural rules in the same order as presented above we can obtain a semantically equivalent set of world se i i i и и и n such that i induces a graph of heaps in which all terminal heaps are disjoint atomic heap relations only for terminal heaps and we need to con only terminal heaps to empty heap we use the rules detect cont an ex press heap from an empty e do not pro l e l e holds we do not need to consider other forms of terminal heaps for example those with no atomic heap relations finally the rule cont expresses the only way to produce heap heaps with w co disjoint terminal singleton l e this is because if w l l holds w w and we the two heap relations are consistent with cannot produce a heap contradiction in this way we can detect all types of heap in heap rela tions examples of proving world sequents this section presents three examples of proving world sequents in psl we write l и to denote l e for some expression e and assume two distinct location expressions l and l l l и l и l и и the goal formula implies that given a fragment of a heap we can uniquely determine the remaining fragment its proof illustrates that the rule indirectly applies of to two pairs of child heaps we begin with a world sequent и и и cw where c is the goal formula after applying the logical rules we obtain the following graph of heaps where heap relations are displayed for child heaps w u l и u l и v l и v l и then prop О and the propagation rules prop and different world sequents as new goals all these rules cont cont n ew by the such a world sequent has heap relations heap heap u v and w w l l и from и from w u u v v w l и w w w w l l и и by applying the rule cont to heap w we complete the proof a a a where a г the goal formula is valid in separation logic because heaps form a partial deterministic monoid h h may be undefined when hh does not hold but if it is defined the result is unique in contrast the same formula is not valid in boolean bi the underlying theory of separation logic which assumes a nondeterministic monoid the proof illustrates the use of the rule in proving a nontrivial formula after applying the logical rules to a world sequent и и и a a aw we obtain the following graph of heaps u v u u v v since heap w has no sibling and parent heaps we cannot apply the rule l to at this point to make further progress we apply either the rule or the rule after creating an empty heap if we apply the rule we obtain the following graph u w v u u v v an application of the rule l to at heap w generates two new goals and the interesting case produces as a true formula at the same heap where we omit u w v u u v v by applying the logical rules to heap w and the propagation rule prop we obtain the following graph w u w w v u u v v now we can either apply the propagation rule prop to heap w or use the rule to complete the proof и l и и l и the goal formula is an example of a formula that cannot be proven without an application of the rule after applying the logical rules to a world sequent и и и cw where c is the goal formula we obtain the following graph l и и l и w u l и u u l и we wish to identify heaps w and w because heaps u and u are identical but there is no way to make further progress toward identifying w and w without applying the rule hence we apply the rule and the propagation rule prop to heaps u and u after eliminating three new goals that are immediately provable we obtain the following graph w l и и l и w u u u v v l и v by applying the rule to merge heaps w and w we obtain a heap sequent l и l и w which is easily provable of cut we state the of cut in psl as follows theorem of cut if cw and c w then w theorem assumes a few properties such as weakening and contraction of the expression contradiction judgment for which we do not provide inference rules in particular we assume its own of cut where г denotes the negation of and г imply the first step in the proof of theorem is to show that it is safe to merge two arbitrary heap sequents lemma if u v then uv u intuitively the second world sequent inherits every heap relation from the first world sequent so we should be able to prove the second by the same sequence of rules in the proof of the first or its subsequence next we prove the contraction property for heap relations proposition if then the statement in proposition implicitly assumes that we may apply the rules and assoc to the same heap relation for the rules and the proof for such an application which essentially has no effect requires the rules and which are necessary for the completeness of psl for the rule assoc however the proof for such an application requires the rule which is unnecessary for the completeness of psl hence if we never apply the rule assoc to the same heap relation we may discard the rule to prove theorem we generalize its statement as follows lemma if cw and c w then w here denotes the result of combining heap sequents for the same heap variable in conjunction with the contraction property for formulas lemma implies theorem soundness and completeness of psl this section proves the soundness and completeness of the proof system psl with respect to separation logic the proof of soundness is straightforward whereas the proof of completeness uses several subtle properties of graphs of heaps represented by world sequents in this section metavariable w denotes world sequents and heap variables directly refer to heaps for simplicity we do not consider firstorder formulas soundness the soundness property states that a derivation of a world sequent means that its semantic interpretation is as a special case we obtain theorem theorem soundness if и и и aw then a the key step in the proof of soundness is to show that in any inference rule of psl the world sequent in the conclusion is either in itself or semantically implies the tion of all world sequents in the premise given a stack s let us write w s for the interpretation of world sequent w ing to the semantics of separation logic which is formally de below we wish to prove that a derivation of w implies г w s ie w s is for any stack s suppose that the last inference rule in the derivation of w is not an axiom and has world sequents w и и и wn in its premise n by induction hypothesis we have г w s и и и г wn s or equivalently n г wi s then by proving that w s implies n wi s we prove that n г wi s implies г w s now г w s immediately follows formally we define w s using three auxiliary semantic functions s s and s all of which follow our intuition on world sequents given in section ee s e s e s w w w l e l e w w s s s s s s e s e s w w w l s e s w l s e s w w w w s a s w a b s w b s s s s now we prove the key step in the proof of soundness lemma for every inference rule with the conclusion w and the premise consisting of w и и и wn it holds that w s implies n wi s for any stack s if n we have г w s as a corollary we prove that a derivation of a world sequent means that its semantic interpretation is corollary if there is a derivation of a world sequent w in psl then г w s holds for any stack s for the rule we assume that implies г s then a derivation of и и и aw implies s w a г и и и aw s w a s w a since w denotes an arbitrary heap we have a and theorem follows completeness the completeness property states that a valid formula in separation logic has a proof of its negation in psl theorem completeness if a then и и и aw for the proof of completeness we weaken the rules r and l by their principal formula in the premise the original rules are invertible and useless applications with wrong heap relations are safe but only because the principal formula in the premise and we can always try different heap relations without having to this is however for the proof of completeness which must show how to actually find a right heap relation hence we weaken the rules r and l to directly reflect the semantics of and but also present a scheme for computing the complete set of heap relations for a given heap we also introduce an explicit weakening rule for eliminating an atomic heap relation which is admissible as a new structural rule is an atomic heap relation weaken we use the rule weaken to eliminate all atomic heap relations at nonterminal heaps when the propagation rules can produce no more new heap relations as explained in section we do not use the rule our proof of theorem uses three new concepts canonical world sequents disjunctive derivation states and conjunctive proof goals a canonical world sequent z is a special form of a world sequent such that if г z s holds for any stack s we can construct its derivation using only the rules l and the heap contradiction rules in proposition we introduce a class of world sequents that are shown to be canonical a disjunctive derivation state for a world sequent w is a set of world sequents that constitute all the leaves in a partial derivation of w that is a disjunctive derivation state w и и и wn for a world sequent w means that there is a partial derivation of the following form w и ии wn w we use a reduction judgment r to mean that such a partial derivation expands to another partial derivation with disjunctive derivation state by an application of the logical or structural rule r to some world sequent wi i n that is we have wi wi и и и with w wi иии иии w i иии r wn w we write for the reflexive and transitive closure of for a stack s we define the interpretation s wi wi s a conjunctive proof goal is a set of disjunctive derivation states for a common world sequent given a logical or structural rule r we use a reduction judgment r to mean that we can generate by applying the rule r to some disjunctive derivation state in that is we have и и и n and r i for i и и и n if r is the rule r or l we have n and produce each i by focusing on the same formula in the same heap sequent in the same world sequent in for all the other rules we have n and replace by we write for the reflexive and transitive closure of for a stack s we define the interpretation s i i s in order to prove theorem assume a goal formula a such that a we aim to build a sequence of conjunctive proof goals и и и n such that и w where w и и и aw и i ri i for i и и и n where ri is a logical or structural rule и i s implies i s for i и и и n and any stack s и n contains only canonical world sequents with such a sequence of conjunctive proof goals we can build a derivation of w as follows и since we have a we have s w a w a г w s г s for any stack s и since n s implies s we have г n s и since every disjunctive derivation state in n contains only canonical world sequents we may write n j j and j k и since we have г n s г j j s j г j s there exists a disjunctive derivation state j such that г j s holds и since we have г j s г k s have г s for each k и since n we have w j k г s we и since we have г s for each k there is a derivation of for each k by the definition of canonical world sequents и by combining w j and the derivation of for each k we obtain a derivation of w below we explain how to build such a sequence of conjunctive proof goals completeness of the invertible rules suppose that a world sequent in i contains a formula to which we can apply a rule r other than l r and l by applying the rule r we obtain i r i by corollary i s implies i s for any stack s in this way we can eliminate all such formulas without completeness proposition except for the rules l r l and weaken every logical or structural rule with the conclusion w and the premise consisting of w и и и wn is invertible in that n wi s implies w s for any stack s corollary completeness of the invertible rules for such an invertible rule r and any stack s if w r then s implies w s completeness of the rules r l and weaken we now show how to recover the completeness of the rules r and l we introduce several notations in order to describe properties of graphs of heaps и w u means that there is a sequence of zero or more child t relations w w from иии the graph and wn w u w for n hence if w u heap w is a descendant of heap u or equivalently heap u is an ancestor of heap w note that we allow w w и is a terminal heap ie there is no heap и t w denotes the set of terminal descendants of heap w ie t w v v and v w we assume that heap relations in every world sequent induce not only a graph heap relation w o f heaps but also a special empty heap that is separate from the graph this w with tion is safe because we can always generate such a special empty heap with the rule if there is none and combine multiple empty heaps with the rule if there are many we world sequents according to the property of graphs of heaps in by their heap relations without considering its special empty heap w as follows elementary if w w w then t w t w rooted elementary and there is a root heap w such that v w for every heap v consistent rooted and if w u u and w v v then t u t u t v t v full consistent and for any nonempty set s of terminal heaps there exists at least one heap w with t w s ready for heap w full and for any pair of nonempty sets s and s of terminal heaps such that s s and w t w with t there w exist s heaps w and w and t w s such that ready for heap w full and for any pair of nonempty sets s and s of terminal heaps such that t w s and w s w s with t there w exist s heaps and t w w and w s such that saturated full and applications of the propagation rules produce no more new heap relations full and nonterminal heaps have no atomic heap relations normalized with no empty heaps and for any nonempty set s of terminal heaps there exists a unique heap w with t w s expanded obtained by applying only the logical rules except r and l to some consistent world sequent suppose that a world sequent in i contains a false formula a b or a true formula a b about heap w by converting it into normalized world sequents that are also ready or ready for heap w according to corollary we obtain i i such that i s implies i s for any stack s by proposition we can apply the rule r or l to obtain i with i r i or i l i such that i s implies i s for any stack s in this way we can eliminate every false formula a b or true formula a b without completeness lemma for a world sequent w of a particular kind there exists a world sequent w of another kind such that w w by applying only the structural rules w s implies w s for any stack s where one of the following holds w is expanded and w is rooted w is rooted generated in step and w is consistent w is consistent and w is full w is full and w is ready for a given heap w w is full and w is ready for a given heap w w is and ready ready for a given heap w and w is normalized and ready ready for heap w lemma for a world sequent w of a particular kind there exists a disjunctive derivation state such that w by applying only the propagation rules s implies w s for any stack s where one of the following holds w is ready for a given heap w and every world sequent in is saturated as well as ready for heap w w is ready for a given heap w and every world sequent in is saturated as well as ready for heap w lemma completeness of the rule weaken for any saturated world sequent w there exists a world sequent w such that w w by applying only the rule weaken w s implies w s for any stack s corollary for any expanded world sequent w and heap w there exists a disjunctive derivation state such that w by applying only the structural rules contains only normalized world sequents that are also ready or ready for heap w s implies w s for any stack s proposition completeness of the rules r and l consider a normalized world sequent w that is also ready for heap w suppose that we obtain w r i by applying the rule r to a false formula a b about heap w for each heap rela tion rule w wi wi i и и r to the same formula then a conjunctive proof goal и и и n satisfies w r s implies w s for any stack s no world sequent in contains the false formula a b about heap w every world sequent in is still normalized and thus for wi the rule l where we use each heap relation completeness of the heap contradiction rules suppose that after eliminating all formulas other than we obtain a conjunctive proof goal i which contains only expanded world sequents by corollary we can obtain i i such that every world sequent in i is normalized and i s implies i s for any stack s proposition shows that i contains only canonical world sequents proposition completeness of the heap contradiction rules a normalized world sequent w with no formulas other than is canonical that is if г w s holds for any stack s we can construct its derivation using only the rules l and the assoc consistent full assoc rooted ready logical initial rules expanded ready propagation rules logical rules consistent saturated r l weaken normalized normalization rules assoc l heap contradiction rules contradiction figure proof search strategy based on the proof of theorem heap contradiction rules for the rule we assume that г s implies thus we conclude the proof of theorem proof search strategy figure shows the proof search strategy based on the proof of theorem given a world sequent of the form и и и aw we repeatedly apply the logical rules other than the rules r and l to obtain expanded world sequents according to corollary from initial to expanded then we apply a series of structural rules to obtain normalized world sequents according to corollary from expanded to normalized if no formulas other than remain we attempt to generate a logical contradiction according to proposition from normalized to contradiction otherwise we apply the rule r or l to obtain consistent world sequents according to proposition from normalized to consistent by repeatedly applying the logical rules other than the rules r and l again we obtain another set of expanded world sequents according to corollary from consistent to expanded in this way we can eventually decompose all formulas other than and complete the proof search as it directly translates to a proof search strategy the proof of theorem with the result that propositional separation logic is decidable since firstorder separation logic is undecidable the proof system psl becomes undecidable in the presence of the rule r we also remark that in the presence of propositional variables even propositional separation logic is undecidable validity of formulas in psl as established by theorems and the notion of validity in psl means that a formula is true or an assumption of its leads to a logical contradiction at an arbitrary heap about which nothing is known an important implication of assuming such an arbitrary heap is that we in effect assume an arbitrary world of heaps since even the relationship with an external heap can be thought of as a property of the arbitrary heap which is assumed to be unknown in particular we may not assume the existence of a singleton heap with location l even if the goal formula contains a pointsto relation l e as an example consider a formula a i e e which states that an empty heap combined with a heap satisfying l e cannot be a heap where l e is false according to the semantics of separation logic in section this formula is valid but only provided that a singleton heap satisfying l e is known to exist the existence of such a singleton heap however is an assumption that can be justified only by the formula at the level since psl assumes an arbitrary world of heaps without knowing the existence of such a singleton heap it fails to prove the above formula if we are to show the validity of a formula by exploiting prior knowledge on the world of heaps we should prove an extended formula that its property as well for example in order to show the validity of the above formula a when the existence of a singleton heap satisfying l e is already known we should instead prove an extended formula l e which states that if the world of heaps contains a heap satisfying l e there cannot exist a heap where a is false ie a is true at any heap an attempt to prove the extended formula produces a world sequent и w w u v u v и l e и av which essentially expresses that formula a is false at an arbitrary heap when there exists a heap satisfying l e a proof of this world sequent with the validity of formula a in separation logic discussion our prototype implementation of psl without firstorder formulas is based on the proof of theorem but with a few changes in particular it internally uses a different type of normalized world sequents which maintain a unique heap corresponding to each nonempty set of terminal heaps but permit unknown relations between heaps the decision is based on the observation that it is the rules and for eliminating unknown relations between heaps that the most to the complexity of graphs of heaps thus it applies the rules and only when it cannot complete the proof search otherwise our experience with the prototype implementation of psl shows that it allows us to incorporate new logical connectives and predicates in a way without having to introduce additional structural rules as an example consider an overlapping conjunction a b by and which can be defined in the framework of psl as follows и at heap w u v iff and w w v w a is true at heap v w w and b is true at heap w for some heaps w w v v and u и iff w w v implies that v w v w a is false at heap w or that b is false at heap w for any heaps w w v v and u we directly translate this definition into two inference rules for fresh w w v v u a b и и w и a b w l a bw aw w a bw w bw a bw w w r note that we obtain the rules l and r exactly in the same way that we derive the rules l and r from the interpretation of multiplicative conjunction the only difference is that we create five fresh heaps in the rule l and try to detect a subgraph consisting of six existing heaps in the rule r equally important is that we need no additional structural or heap contradiction rules because overlapping conjunction does not require new forms of heap relations thus in principle it is relatively easy to incorporate overlapping conjunction into our prototype implementation of psl overall we may think of psl as a highly extensible proof system for separation logic related work automated verification tools based on separation logic separation logic has been the basis for a number of automated verification tools programs using mutable data structures the first such tool is by berdine et al which aims to test the feasibility of automated verification using separation logic to achieve full automation it permits no pointer arithmetic and verifies only shape properties of linked lists and trees space by et al permits pointer arithmetic by integrating the abstract interpretation method into the symbolic execution method in by et al is an extension of space which is capable of tracking the length of linked lists by berdine et al is another extension of space which uses higherorder predicates to express common properties of nodes in linked lists the use of higherorder predicates enables to verify shape properties of composite linked lists such as linked lists of circular linked lists there are also several tools supporting arbitrary data structures by and allows users to specify invariants on arbitrary data structures in terms of inductive predicates since checking these invariants usually relies on basic properties of inductive predicates that are easy to prove but difficult to discover automatically requires users to explicitly state such properties in the form of lemmas which are automatically proven and then applied as necessary similarly to by et al relies on inductive predicates and lemmas unlike however requires users to provide proofs of these lemmas and specify when to apply them by and parkinson is an extension of space which exploits abstraction rules in order to support arbitrary data structures its distinguishing feature is the ability to infer loop invariants automatically by and takes a differ approach by indirectly specifying invariants on data structures with validation code analyzes validation code to extract inductive predicates for describing invariants as well as lemmas for describing their basic properties since validation code can be written in common programming languages users of do not need the to specify invariants of interest in terms of inductive predicates all these tools use as their logical foundation not full separation logic but only its decidable fragment by berdine et al which does not include separating implication as shown by and ohearn lack of separating implication implies no support for backward reasoning by weakest precondition generation for those programs performing heap assignments or allocation as a result these tools allow only forward reasoning based on symbolic execution as in and do not demonstrate the full potential of separation logic in program verification proof search in full separation logic despite the practical importance of separating implication proof search in full separation logic has not drawn much attention from researchers calcagno et al present a translation from propositional separation logic to firstorder logic with only propositional connectives and no multiplicative connectives for which a decision procedure already exists the labelled tableau calculus for separation logic by and supports both separating conjunction and separating implication similarly to our proof system psl their calculus combines both syntactic tableau and semantic labelled and uses labels to directly refer to heaps although it is shown to be sound and complete their calculus does not give rise to a proof search strategy specifically in order to check that all branches in a tableau are logically or structurally inconsistent we need two semantic functions a measure and an interpretation for each branch their calculus however does not explain how to construct such semantic functions for each branch and it is not clear how to extract a concrete proof search strategy the proof system to ours is the nested sequent calculus sbbi for boolean bi by park et al which inspired the overall design of psl similarly to world sequents in psl sequents in sbbi use a truth context consisting of true formulas and a context consisting of false formulas and both systems are based on the principle of proof by contradiction because of the similarity in syntactic their approach to dealing with separating conjunction and separating implication in sbbi equally applies to our setting for psl which is not surprising considering that separation logic is just an instance of boolean bi with additional restrictions on the semantic structure the structural rules of psl however are specific to separation logic and are designed independently of sbbi since sbbi allows propositional variables we may use its theorem prover as a system for our implementation of psl for theorem provers based on the decidable fragment of separation logic by berdine et al without separating implication see for example and for an isomorphism between intuitionistic separation logic and implicit dynamic frames see conclusion we have presented a proof system psl for full separation logic with separating implication considering the potential benefit of separating implication we that program verification systems in the future will provide separating implication and support backward reasoning by weakest precondition generation for their scalability in program verification we also that proof can interface with theorem provers for separation logic and provide a powerful automation tactic for dealing with logical con from separation logic when extended with inductively defined predicates psl may serve as a practical foundation for such systems acknowledgments we are to the anonymous reviewers for their helpful comments and for a comment on the completeness of psl that led to the discussion in section this work was supported by the engineering research center of program of of science future research foundation of grant and program through by the references berdine calcagno cook peter w ohearn thomas and yang shape analysis for composite data structures in proc cav pages Г berdine calcagno and peter w ohearn a decidable fragment of separation logic in proc pages Г berdine calcagno and peter w ohearn modular automatic assertion checking with separation logic in proc pages Г berdine calcagno and peter w ohearn symbolic execution with separation logic in proc pages Г and on the wand information and computation Г james and max undecidability of propositional separation logic and its in proc lics pages Г calcagno and infer an automatic program verifier for memory safety of c programs in proceedings of the third international conference on formal methods pages Г calcagno and matthew from separation logic to firstorder logic in proc pages Г calcagno yang and peter w ohearn and complexity results for a spatial assertion language for data structures in proceedings of the st conference on foundations of software technology and theoretical computer science pages Г and relational inductive shape analysis in proc popl pages Г peter w ohearn and yang a local shape analysis based on separation logic in proc tacas pages Г and matthew j parkinson towards practical verification for java in proc oopsla pages Г robert and andrew w appel a fresh look at separation algebras and share in proc pages Г and a tool for verification of lowlevel list manipulation in proc tacas pages Г and daniel and resource graphs for separation logic journal of logic and computation Г and matthew j parkinson a tool for reasoning in separation logic in proc cav pages Г and the of sharing in data structures in proc popl pages Г s and peter w ohearn bi as an assertion language for mutable data structures in proc popl pages Г jan and frank imperative programs as proofs in proc pages Г r reasoning about iterators with separation logic in proc pages Г and the undecidability of boolean bi through phase semantics in proc lics pages Г and extended alias type system using separating implication in proc pages Г berdine m clarke and cook arithmetic strengthening for shape analysis in proc sas pages Г and rybalchenko separation logic calculus heap theorem prover in proc pldi pages Г and program verification with lemmas in proc cav pages Г park and park a theorem prover for boolean bi in proc popl pages Г matthew j parkinson and j the relationship between separation logic and implicit dynamic frames in proc esop pages Г john c reynolds separation logic a logic for shared mutable data structures in proc lics pages Г yang an example of local reasoning in bi pointer logic the graph marking algorithm in proceedings of the st workshop on semantics program analysis and computing environments for memory management pages Г 