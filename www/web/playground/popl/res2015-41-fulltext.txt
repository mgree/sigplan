full abstraction for signal flow graphs u inria u uk u inria abstract network theory uses the string language of monoidal categories to study graphical structures formally translations into intermediate recently there has been a research focus on developing a network theoretic approach to signal flow graphs which are classical structures in control theory signal processing and a in the study of feedback in this approach signal flow graphs are given a relational denotational semantics in terms of formal power series thus far the operational behaviour of such signal flow graphs has only been discussed at an intuitive level in this paper we them with a structural operational semantics as is typically the case the purely operational picture is too concrete ­ two graphs that are equal may exhibit different operational behaviour we classify the ways in which this can occur and show that any graph can be ­ rewritten using the graphical theory into an executable form where the operational behavior and the denotation coincides categories and subject descriptors d formal definitions and theory semantics f semantics of programming languages algebraic approaches to semantics keywords signal flow graphs string diagrams structural operational semantics full abstraction introduction signal flow graphs are foundational structures in control theory and signal processing studied since at least the s they can be constructed from small set of basic components displayed below and kx signals which take values over a field k flow from left to right the leftmost component the signal the second sums the two signals on the left and the third the signal by a scalar k k the rightmost one is a delay when a sequence of signals k k k on the left it outputs the sequence k k it can be thought as a synchronous one place buffer with permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for components of this work owned by others than acm must be abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission andor a fee request permissions from popl january ­ copyright c acm a simple mathematical meaning can be given to those where pass through at least one delay component it is well known see eg that with this restriction denote rational functions in traditional approaches however are not treated as interesting mathematical structures per se formal analyses typically mean translations into systems of linear equations although more recently they have also the use of tools another series of recent works as graphical structures known as string diagrams and studies them as mathematical objects of interest in their own approach is known as network theory the of the attention so far has been focused on what we call the denotational semantics differently from the classical approach string diagrams in general give rise to linear relations rather than functions the string diagrams that are considered are not restricted by any side conditions on being all those diagrams generated from the basic components together with their k intuitively in the signal flows from right to left this means that diagrams constructed using both components in and have no flow direction and require a relational model network theory new to the field of signal flow graphs first the relational semantics is a compositional account of their behavior that a sound and complete independently discovered in and second the has a rich underlying mathematical ­ two algebras and two algebras ­ which also reveals connections with quantum third it has in a subtle of causality as a central of in flow graphs differ from network graphs in that their branches are directed in for branch directions it is necessary to take an entirely different line of approach from that adopted in network topology instead our results suggest that direction of signal flow is not a primitive notion this argument has been made informally already in but is shown at the end of this paper section similar ideas are in the behavioural approach in control theory in this paper we introduce operational semantics to the network theoretic accounts of signal flow graphs we show that string diagrams can be thought of as terms of a process calculus and executed as state machines for this reason we shall call our string diagrams circuit diagrams or simply circuits the operational perspective with the established denotational model turns out to be quite subtle indeed the denotational semantics is in a sense too abstract finite computations that reach deadlocks are ignored such deadlocks can arise for instance when components of are composed with the those of and intuitively the signal flows from the left and right toward the middle for an example x x x x x x x xx consider the circuit below on the left x x in a first step the signals from left and right are stored in the two buffers then the stored values are compared in the middle of the circuit if they do not agree then the computation gets stuck the circuit on the right features another problem which we call intuitively the flow goes from the middle toward left and right all its computations are forced to start by on the left and on the right the value which is initially stored in the two buffers the two circuits are equivalent but their operational behaviour can be obviously distinguished the leftmost does not have and the rightmost cannot deadlock deadlock and are dual problems at the of the of operational and denotational semantics we show that circuits in form namely circuits built from components in followed by those in like the leftmost circuit in are free from instead circuits in span form ie those built from components in followed by like the rightmost in are free from deadlock this is interesting because the equational theory developed in asserts that any circuit is equivalent to both one in and one in span form this duality of deadlock and helps us in proving a full abstraction result for those circuits that are free from both deadlock and the operational and the denotational semantics agree our second main theorem is a result for any denoted behaviour there exists some circuit that properly without deadlocks or it the key for the proof is the fact that any circuit in is equivalent according to the denotational semantics to a signal flow graph up to some this result allow us to impose a syntactic restriction to our circuits to guarantee deadlock and freedom by of the full abstraction results we can thus safely use the axiomatization of to reason about the operational behaviour of these circuits the main results of this paper are · a structural operational semantics for the account of · a full abstraction theorem relating the operational and the denotational semantics previously introduced in · a theorem every behaviour can be implemented by a circuit without deadlock and · a formal explanation of the fact that direction of flow is a derivative notion related work string diagrams originally to the in the study of monoidal categories because they clear away of coherence thereby simplifying algebraic arguments in particular they are useful for free monoidal categories in this paper we work with particular symmetric monoidal categories called categories are a useful setting for the study of string diagrams and especially monoidal theory of composing was used to derive the in have also recently been used by computer study of boolean circuits plotkin and have used them to give an alternative presentation of milners bigraphs while and presented a theory of directed acyclic graphs our operational semantics is related to and algebra of transition systems and the algebra of of and string diagrams are used by computer for instance we mention monoidal computer where they are employed to study classical notions of and computational complexity the of algebras and algebras at the core of the of the denotational semantics appeared first in the work of and on the used in the study of quantum circuits similar algebraic interactions in the study of petri nets and in theories of asynchronous circuits structure in § we introduce the operational semantics in § we recall the denotational semantics from and we prove full abstraction in § in § we prove the theorem and in § we consider a directed syntax in order to capture classical notational conventions ca b is the set of arrows from a to b in a small category c composition of f a b g b c is written f g a c when c is monoidal is the monoidal product the signal flow calculus syntax and operational semantics here we give the syntax and the structural operational semantics of a simple process calculus to which we shall refer to as the signal flow calculus fix an arbitrary field k the syntax given below does not feature binding nor primitives for recursion while k ranges over k c kx k cc cc a sort is a pair n m with n m n we shall consider only terms that are according to the rules of fig a simple inductive argument uniqueness of sorting if c n m and c n m then n n and m m we will refer to terms as circuits since intuitively a term c n m represents a circuit with n ports on the left and m ports on the right the carry elements of a field k the operational semantics is a transition system with states augmented circuits where each delay component x and is assigned some value k k thus states are obtained by replacing the delays in the syntax specification with registers x k and k for each k k as for circuits we only consider states which are defined by adding x k and k to the rules in fig structural inference rules for operational semantics are given in fig where we use strings of length n to represents vectors in kn so the empty string stands for the only vector of k and k v k kn for the column vector in kn kn if state s n m is the source of a transition v w t then t is also a state with sort n m and v and w are strings representing vectors of kn and km respectively intuitively s v w t means that s can become t whenever the signals on the n ports on the left agree with v and the signals on the m ports on the right agree with w each circuit c then yields a transition system with a chosen initial state s of c obtained by replacing the delays x and in c with registers x and containing to establish a preliminary intuition we can consider circuits built up of the components in as taking signals from the left k x x xx x k c n z d z m c n m d r z c d n m cd nr mz figure sort inference rules k kk k k l kl k x l k x k l kl kl kk k k k k k kl l k kl lk l l k k s u v s t v w t st u w s t kl kl s u s t u t v v s t uu s t v v figure structural rules for operational semantics with k l ranging over k and u v w vectors of elements of k of the appropriate size boundary to the right thus is a the signal on the left accepts any signal on the left and it producing nothing on the right is an that takes two signals on the left and their sum on the right and the signal on the right k is an the signal on the left by the scalar k k finally x is a delay a synchronous one place buffer with the terms of row are those of row reflected about the their behaviour is here it is helpful to think of signals from right to left in row is a two signals is the empty circuit and is the identity the signals on the left and on the right ports are equal terms can be combined by two binary operators sequential and parallel composition in the syntax specification we used a graphical of the components indeed we will write terms in the traditional way and instead represent them as dimensional diagrams we adopt the following common convention c c is drawn c c c c is drawn c c a computation of a circuit c is a possibly infinite path s v w s v w in the transition system of c starting from its initial state s when c has sort n m each vi and wi consist of strings over k say ki and li respectively the trace of a computation s v w s v w is then a pair of vec where j kj kj and j lj lj n m we will use the notation for such a pair and to make the notation we will write j kk and j ll moreover with ji and ji we will denote the ith elements of j and j note that in a computation of length z all j j have length z while for an infinite computation all j j are infinite in the former case we say that a trace is finite in the latter that it is infinite we use f tc to denote the set of all finite traces of c and for the set of all infinite ones example consider the two circuits below x x the first is a graphical representation of the term c the second of the term c x note that according to our intuition in the leftmost circuit the signal flows from right to left while the rightmost the signal flows from left to right ­ indeed the terms and serve as identity which allow us to form a feedback loop let ck and ck represent the states of c and c with k denoting the value at the register the rules of fig yield the computation ci ci ci ci · · · for i which yields the trace in fact as we shall show via a sound and complete despite of the signal intuitively in different directions the two circuits have the same observable behaviour a slightly more involved example is given below x x we leave the reader to write down a term that is represented by the diagram above call it c and let ck k represent the state where the two registers reading from from left to right have values k and k then the operational semantics allows us to derive the following computation c c c c ··· that yields the trace circuits diagrams in the first two diagrams of example we used dotted lines to ease the from each diagram to the corresponding syntactic term indeed it is clear that syntax carries more information than the notation eg associativity from the point of view of operational behaviour however this extra information is irrelevant and is discarded by the graphical notation we will never again our diagrams with dotted lines remark checking that this is sound amounts to verifying that for any circuits c c c c the following circuits when yield isomorphic transition systems · c c c and c c c · c c and c · c c c and c c c · c c and c · c c c c and c c c c of course the reader will notice a close connection with the axioms of monoidal categories we make explicit use of this fact below in fact we will use symmetric monoidal categories of a specific kind namely a prop product and permutation category is a strict with objects the natural numbers where on objects is by addition morphisms between are strict symmetric monoidal functors that act as identity on objects and their morphisms form the category prop definition the prop of circuit diagrams is defined as · arrows n m are circuit terms of sort n m by the axioms of symmetric monoidal categories see eg composition and monoidal product of circuits are given by the syntax operations in · the identities are id and the nm n m m n are defined in the obvious way starting from for instance is upto the axioms of the circuit below observe that all the axioms of are sound a la remark with respect to the operational semantics given in figure for two state terms c and d representing the same state diagram the corresponding transition systems are isomorphic this means that there is not any problem in reasoning up to the axioms of for this reason in the rest of the paper we shall refer to circuits diagrams and state diagrams just as circuits and states the line between diagrams and traditional syntax we identify two of has as arrows only of which to the classical notion of signal flow graph see eg in these circuits the signal flows from left to right like in but with the possibility of having feedback loops provided that these pass through at least one delay formally this amounts to defining for each n and m an assignment m m mapping a circuit c n m into the circuit below nc x m in the picture above and in the sequel we use the shorthand notation z for a circuit of the form id z the intuition is that the circuit c with a feedback loop carrying the signal from its right to its left port signal flow graphs form a prop sf which is the of inductively defined as follows · if c n m then c m · if c m then m · if c z and c m then cc m · if c m and c z then c c r m z for instance the whereas the first circuit of example are in sf remark the rules of figure describe the evolution of state machines without relying on a fixed flow this operational semantics is not meant to be executable for all circuits the rule for sequential composition implicitly existentially on the middle value v resulting in potentially unbounded nondeterminism however for circuits where flow can be assigned like the class sf above existential quantification becomes deterministic subject to a choice of inputs to the circuit at each step of evaluation we will see in section that any circuit can be transformed into this form where the valid transformations are those allowed by the equational theory presented below denotational semantics here we define the denotational domain of interpretation for all the results in this section are proven in or immediately follow from we begin by some background a formal series is a function z k for which there exists i z such that j for all j i the degree of is the smallest d z such that d we write as with position or as formal sum id sum and product of with the latter id and notation we define the ie as i i xi · j · k xi the units for and · are and form a field kx where the inverse of with degree d is i d n i d if i d if i d if i dn for n a formal power series is a with degree d by and are closed under and · but not under inverse it is immediate from that is a iff has degree d therefore form a ring which we denote by kx other algebras of interest are the ring kx of polynomials and its field of kx a polynomial k kx · · · can also be regarded as the i with ki for all i n instead in order to express we need the full generality of there is a unique field morphism mapping k kx into the k and the x into this morphism will map in particular the fraction x into the in section we will use polynomials to encode finite se and for streams in this perspective can be thought of as sequences with an infinite future but a finite past note that differently from polynomials can express infinite se for instance x denotes along the field morphism introduced above the definition let be the following prop · arrows n m are subsets of × · composition is relational given g u v u v and h v w v w their composition is u w vu v g v w h · gh u u v v u v g u v h · the n n are induced by of finite sets n n is associated with the subset v w v w vi wi serves as the domain for the denotational semantics definition the prop morphism · is inductively defined on circuits as follows for the components in kx kx kx k · k kx x · x kx where k and x denote the semantics of components in is symmetric eg is mapped to kx for kx kx c c c c c c c c remark it is easy to verify that for any circuit c m c forms a of × considered as a vector space over kx see for more details example consider the circuit x we have that xx x x x · x kx · x kx kx which is equal to note that any on the left of x is related to on its right and this is in turn related to on the x x x right of the circuit is thus the inverse of x while x delays it similarly consider a circuit k k its semantics is the com of k pairing with · k and k pairing k · with if k we can see it as first and then by k thus for k k k and have the same denotation equational theory the equivalence induced by the denotational semantics is in figures and there p p p range over kx and q over kx given a polynomial p k kx kx · · · p and p are notation for the circuit on the left and on the right respectively kn x x x x x x kn k x x k x k x x k x k k observe that components k x and k x become cases of p p respectively instead the notation indicates both the circuits and indeed they are provably equal from the other axioms for instance using i and a let ih be the smallest congruence on circuits generated by these axioms and ih the prop obtained by by ih theorem let c d be circuits in then c d iff c ih d the equational theory of ih circuits with a very rich algebraic structure that can be presented in a modular way · figure describe the interaction of components in aa and aa impose a commutative monoid and a co commutative structure on the components and respectively together they form a by laws aa instead a a a a describe the behavior of derived components of shape p saying in particular that they are compatible with the structure finally note that the is in fact an algebra with the circuit it is convenient to fix this module of ih as a which we call ha because of the algebra structure it can be the circuits · the algebraic structure described above is for components in in the sense that the axioms an in figure are exactly those an of figure reflected about the this means that satisfy the equations of commutative the ones of commutative monoids and together they form an algebra with the corresponding is that is the opposite category of ha for a circuit c m we draw the corresponding one in n as c reflected about the equivalently as the prop having as arrows the equations in figure the circuits a a a p a p p a a a p a p p a a a a a p a p p a p a a p a figure interaction of components in a a a p a p p a p a a a a p a figure interaction of components in a p p a p p p a pp p a a p p a pp p p a p p a i i i q i i i i i q i q q i q i figure interaction of components in with the ones in i q q i q i · finally equations in figure describe the interaction of com in with components in this the name ih for the theory of interacting algebras the axioms of interaction describe a algebra for both the white and the black family of components the ha and actually have an interesting life of their own they circuits with simple functional be in the following sense let kx be the prop where arrows n to m are m × over kx composition is matrix multiplication a b is the matrix a b and the sym are the of the rows of the identity matrix then ha is a presentation of kx that is they are isomorphic as is isomorphic to the circuits of ha and are not the only ones exhibit ing a functional behavior as shown in by the prop of signal flow graphs sf by the axioms of ih one obtains a prop referred to as sf that presents the prop k x of matrices over the ie of poly k k xk x xn l l xl x xn where l the definition of k x is formally the same as the one of kx with the ring k x of replacing kx for some r proposition for all circuits c of there exist circuits c in span form and c in form such that c ih c ih c full abstraction in this section we the question of relating the operational and the denotational semantics of the signal flow calculus introduced in section and respectively to this aim an elementary observation is that the denotational semantics seems to be too since it abstracts away from the finite behaviours that might arise during the executions of the x circuits for example consider x and as we have shown in example they have the same denotational semantics x xx x x xx namely the set of all pairs of however some computations of the former circuit can reach a deadlock for instance we can make a transition from the initial state with labels k l but there are no further possible transitions from the resulting state x k x k l l such failures are not taken into account by the denotational semantics intuitively this only considers the successful computations which are the ones yielding infinite traces if we restrict to these situations then x behaves exactly as the identity circuit here are more examples of circuits that may reach a state x x x x x x our is that problematic circuits are those in which inter components in particular the delays have a conflicting design note that all the are of shape c above c c examples are in with c a circuit that one is of intuitively the signal in c is from the boundaries towards the middle that is the boundary shared by circuits c and c the signal is from the middle boundary towards the left transmitted by d and the right transmitted by d in order to formalize our observations first we say that a circuit is deadlock free when none of its computations can reach a dead lock namely a state from which no transition is derivable then we have the following result theorem circuits of in span form are deadlock free together with proposition this theorem asserts that for each circuit of there exists an equivalent one in ih that is deadlock free this could give us some hope of the operational and the denotational semantics but unfortunately also for some in span form they do not agree for instance x and have the same denotational semantics but all the computation of the former are forced to start with indeed x k x k for any k note that after the first transition x behaves exactly as in some sense the former circuit a proper behaviour only after an step to make this formal we say that a circuit c is free if whenever s s then s s where s is the initial state of c other basic circuits that from are displayed below x x x x x x all can problematic circuits be decomposed into above c c are in with span c in t they the intuition is that any delay in c and c sends the signal from the common middle boundary towards the outer boundaries thus re a step in which the default value of each delay is before properly according to this analysis such a tion is avoided when we can see all the delays as pointing towards the middle of the circuit this leads to the following statement theorem circuits of in form are free theorems and suggest a duality between deadlock and expressible in terms of span and of circuits of in fact this is reflected also by the displayed problematic circuits the ones in are dual to the ones in in a precise sense namely by changing the and the direction of delays moreover according to our analysis circuits with deadlocks have more behaviours traces than those by the denotational semantics while circuits with have fewer behaviours we would then expect circuits which are both deadlock and free to yield exactly the right amount of behavior this will be the content of the next section leading to the full abstraction result corollary observation and denotation given a circuit c of we define its observable behavior c as the pair f tc of its finite and infinite traces like the denotational semantics · also the observable behaviour · can be expressed in a compositional way as a prop morphism from to a certain target prop that we are going to define below in order to do that we first observe that finite and infinite traces can be equivalently described respectively indeed in a trace of of polynomials and of length z each sequence j kk kz and j ll lz can be encoded as · similarly in an infinite trace and xz j respectively kk and j ll defines and respectively we can then see f tc as a relation between vectors of polynomials and as a relation between vectors of on the base of this observation we take × as target of · here and are defined as definition but with kx and kx respectively in place of kx arrows of × from n to m are pairs f g with f m and g m the following statement guarantees that · is compositional proposition · × is a morphism of we have now all the to build a between the domain of observations × and the denotational domain for this purpose we first illustrate how to relate infinite traces ie pairs of vectors of and vectors of we say that a trace × generates × if there exist an instant z z such that i ji ji z and hi hi z for all i n and k j with j n h m ii z is smaller or equal than any degree of n m to see the intuition behind this notion recall from section that whereas give a way of encoding streams encode streams with a to finite our past if we see correspondence it as takes from and fix for them all a common present moment for example the trace lll kx × kx generates infinitely many pairs of among which we have lll lll lll see § for a more detailed account of this transformation in a denotational context with choice of present moment k l and k l respectively the instant z z will be for the first for the second and for the third pair above conversely we can start from all the in and about their present moment to obtain streams the requirement that the instant z is chosen not than any degree implies that only s are removed in the process that is there is no information loss for instance lll kx is generated by infinitely many traces including lll lll lll the instant z is chosen to be for the first for the second and for the third pair above and infinite traces z is a prefix of an ji ji and hi hi for all i z j n and h m we are now ready to define our correspondence between arrows of × and arrows of definition let f g be an arrow of we define ff g as the following arrow in m there exist a trace g generating in the converse direction given an arrow s m we define us as the pair f g × m where g m is given as there exist a pair s generated by and f m is the set of all prefixes of the traces in g intuitively the action of f on f g is to the first component and generate all the vectors of generated by vectors of in g instead we can describe u as abstracting away the choice of the present for all and represent them as this gives the second element in the target pair f g the first is irrelevant since it only consists of the prefixes of traces in g in particular we do not generate any deadlock trace to see how f and u work more precisely we shall consider the following example example recall that for c x the set consists of all infinite traces of the form that is c behaves as the identity after one step since this circuit is deadlock free the set f tc instead contains all and only those finite traces which are prefixes of some infinite trace in one can check that f c is the identity relation kx which is actually equal to c for instance the pair of is generated by if we then apply u to f c we obtain a pair f g × where f coincides with the original f tc while g is strictly larger than indeed but it belongs to g since it generates the pair we now focus on circuit d x the set consists of all infinite traces of the form and the set f td consists of either prefixes of or traces leading to deadlocks having the form kk kk with l x x x x x x x l it is easy to check that these traces are lost when applying to d while no infinite trace is added or removed the example above suggests that the composite mapping fu the set of observable behaviors for circuits with tion eg x and restricts it for circuits with dead locks eg x the next statement illustrates the extent of these observations theorem let c be a circuit of then the following holds a f c c b if c is deadlock free then c c if c is free then c statement a above is in showing full abstraction corollary but is also of independent interest indeed it allows to immediately derive that corollary for any two circuits c d c d if and only if f c f d in some sense corollary tells us under which conditions an external cannot distinguish circuits that have the same denotation this is the case whenever f c f d that is the observation of c and d can be only made upto f intuitively this amounts to the following two conditions from the definition of f first we prevent the observation of finite behavior because f f tc and f td this means that we cannot detect deadlock and for in x and become second we prevent an external agent from choosing when to begin the observation for instance take c x by observing the pair in f c on principle we are not able to whether it has been generated by a trace or in c the definition of f allows for both and infinitely many other op tions since our view is restricted to f c we cannot tell if the observation of the actual stream starts with or k therefore from that viewpoint x and are in general when observations can be made without the restrictions of f one can distinguish circuits that are equivalent as explained in example statements b and c in theorem allow us to derive that observations and denotations do coincide for the class of wellbehaved circuits that do not from deadlocks and steps corollary full abstraction for any two circuits c and d of that are deadlock and free c d if and only if c d in the previous section we have seen two different canonical forms for circuits of the span form preventing deadlocks and the form avoiding steps we now the question of transforming within the equational theory of ih any circuit c of into one d both properties this is because by corollary d properly the denoted behaviour c to this aim we first observe that our are for the class sf introduced in section proposition every c in sf is deadlock and free the inclusion is meant to be ie g and f tc f where f tc c and f g the intuition behind proposition is that the rules for inductively constructing circuits of sf do not allow for the conflicting design the of and deadlock in particular adding to a circuit of sf preserves and deadlock freedom in order to achieve our goal we will introduce a canonical form for circuits in which is based on sf roughly speaking such form consists of signal flow graphs where the have been up we make this intuition precise in the sequel first for each n m n we take circuits n n n and m m m as illustrated below n n m m then we define the families of operators m m and m n m as follows for any circuit c m n id c and for any circuit d m n cm id d m n dm remark when defined on ih and some interesting properties let ih ih be the functor on objects as k k and on arrows as f id f this functor is the unit and the are the n and m defined as above the fact that ih is a implies of and they satisfy the inequalities because of the following lemma provable in ih using i a and a the canonical isomorphisms between induced by the are m m and m ih n m defined as above we can understand intuitively as the connection to the first port on the left to the right of the circuit the fact that and are isomorphisms means that no information is lost ­ all such circuits can be back to their original form definition any c m is a of c m when c can be obtained from c by a combination of the following operations · application of for some n and m · application of for some n and m · with a permutation · with a permutation permutations are needed to any port on the boundaries for instance they allow to the second port on the right as the third on the left in the circuit c below c for our purposes it is of importance to observe that lemma preserves deadlock and freedom the remainder of this section will be to showing that we can put circuits of into the desired shape theorem every circuit in is equal in ih to the of some circuit in sf by theorem proposition and lemma we achieve the result at the beginning of this section corollary every circuit c of is equal in ih to some circuit d of that is deadlock and free proof of theorem in order to prove theorem we first need some on matrices and their circuit representations indeed there is a natural way of representing matrices over the field kx of of polynomials as circuits of to illustrate it consider the following example p q p q p q p q p q p q p q p q p q p q p q p q p q p q p q p q p q p q the circuit c on the right encodes the matrix m on the left in the following way for each boundary of c we assume a of the ports starting from then the entry column j row i has value p q kx if and only if reading the circuit from the left to the right one finds a path connecting the jth port on the left to the ith port on the right passing through a circuit p q intuitively the ports on the left represent columns the ones on the right rows and the links between them carry the values in the matrix formally c c and m it will be convenient to work with matrices and the correspond ing circuits of a particular shape we say that a matrix over kx is in rational form if all its entries are in fact in k x and for each nonzero row there is a pivot entry with value in the column of a pivot the pivot is the only nonzero entry an example is displayed below where r r r k x r r r the following lemma is the final for the proof of theorem its proof is an easy exercise in linear algebra lemma every kx matrix is row equivalent to one in rational form proof of theorem let us fix a circuit c m in the following we will sketch a using the equational theory of ih with which c is transformed into the of a circuit in sf to improve readability we shall draw any circuit as if both n and m were it should be fairly clear how our argument generalizes i first we transform c into the circuit c on the right the two are equal in ih by of c ih c let us call c the circuit from n m to delimited by a dotted square in the picture above since c is obtained by on c it should be clear that if c can be as the of a circuit in sf then this property also holds for c therefore in the sequel we shift our focus to c ii proposition allows us to rewrite c in form as the composition along a middle boundary z of circuits c and c below while preserving form c is an arrow of ih by definition c is an arrow of the sake of readability we will draw z as if it were c ih c c iii since we are reasoning in ih in particular all the equations of hold now is both the initial and the terminal object in kx is exactly there from z to it follows that c and the of a circuit that we call c are equal in and thus in ih we can thus write c c as c c c c ih c iv since c is in we can use the results about ha to reason about it in particular c can be mapped into an z × m n matrix of polynomials m because ha kx as we at the beginning of this section there is a canonical way of representing m as a circuit c of p p p p p p p p p p p p p p p p since c corresponds to m along the isomorphism ha kx it follows that c is m · therefore c c meaning by theorem that c ih c it follows that we can rewrite our circuit c c as c c p p c ih p p p p p p v using lemma we can then transform m into a matrix m in rational form for instance the one on the left below since m is a matrix over kx we have a canonical circuit c of ih on the right representing it pq pq pq pq p q p q p q p q by definition of rational form each nonzero row r in m is associated with a pivot column c with the only nonzero value at the intersection of r and c in order to represent such property in c we the following choice of the first and the third column for the first and second row respectively observe that an entry with value corresponds to the circuit which in ih is equal to therefore we could avoid the corresponding link in the circuit c we now claim that c c ih c c by theorem to check this it suffices to show that c c c c that is m · m · m · m · this is true because the two relations above describe the kernel of m and m respectively and m is to m it follows that we can rewrite c c as c c while preserving equality in ih p p p p q p p q p p q p p q p vi we now focus on circuit c c our next step is to use and commutativity of to make one of the two of each component be always attached to the of the corresponding row also we use the axioms of and of the symmetry to push the towards the top of the circuit as follows p q p q p q p q ih p q p q p q p q vii we can now remove the components of shape by turn ing them into structure this can be done by simply applying axiom i of ih p q p q p q p q ih p q p q p q p q let us call c the rightmost circuit above it is a of the circuit into the dotted square which we call c since c was constructed starting by a matrix in rational form for all the components pq in c p q is a rational thus using the fact that sf k x we can rewrite in ih each such component as a circuit c in sf p q p q p q p q ih ce ce ce ce now observe that c can be seen as the composition via and of circuits that are all in sf ce ce ce ce it follows that c is also in sf and thus c is the of a circuit in sf since c was obtained by c by only using rewriting steps allowed by the equational theory of ih the statement of the theorem follows the flow in the classical presentation of signal flow graphs see eg are directed the direction of signal flow through out the previous sections we have been referring to flow direction only on an intuitive level we now introduce that it can be really treated as a derivative notion of our theory of circuits we then present some applications and ex supporting our statement in order to model classical signal flow graphs we first need to introduce an alternative syntax which we call the directed signal calculus we but which are will need components that explicitly oriented from left to right those of e k x we also require some pure since signal flow is explicit we include two versions of the identity and four of the w these basic components above are given a sorting u v where u v for instance and classical signal flow graphs are obtained by composing components e and w using the operations and for which we reuse the sorting rules of fig together with guarded feedback operations tr · that take a circuit of sort m n and yield a circuit of sort m n the associated sorting rule is thus c n m tr c n m this is represented as follows c x c the syntax for directed signal flow graphs is thus sf e w sf sf sf sf tr sf finally we include toplevel operations of the in § l l r and r with sorting rules c u v c u v c u v c u v l c u v l c u v r c u v r c u v in the graphical below we leave out the on where direction is arbitrary c c c c circuits of the directed signal flow calculus are thus specified by following grammar d sf l d l d r d r d d w w d note that the composition at the top level is restricted to the introduction of feedback rather than defining the operational semantics directly we can obtain the expected behaviour by first translating directed terms to the signal flow calculus intuitively the inductively defined translation e directions from the ··· sf sd sf sf tr sf l d led r d red where and tr l and r are defined as in § and § a key observation is that directed sort discipline prevents us from writing problematic circuits where signal flow is incompatible like in the examples in § in fact using proposition and lemma we get proposition for any circuit d of the directed signal flow calculus ed is deadlock and free moreover this syntactic restriction does not affect the expressiveness since thanks to theorem of signal flow graphs denote all the possible behaviours thus informally speaking all circuits in can be directed modulo the theory of ih proposition for any circuit c of there exists a directed circuit d such that ed ih c propositions and have two interesting consequences first proposition and the result mean that we can use the equational theory of ih to safely reason about classical signal flow graphs and all the circuits in the directed signal flow calculus roughly speaking the procedure is the directions and then use ih this the intuition that like for circuits also for signal flow graphs is not a primitive notion as originally in second proposition proposition and tell us that the denotational semantics of any circuit of the signal flow calculus can be properly by some directed circuit we can therefore use the more signal flow calculus to specify circuits and the more restrictive directed calculus to implement them one can then check that an implementation d to a specification c by mean of the graphical reasoning supported by ih indeed ed ih c means that d implements without deadlocks or the behaviour denoted by c note that while an implementation is a directed we are being about what kind of circuit in a specification in examples that we consider these are typically generating functions that can be obtained in a standard way see eg from recurrence formulas we illustrate these ideas with the aid of the simple example below example consider the circuits displayed below the leftmost serves as specification x and the rightmost a directed circuit as its implementation x x to prove that the implementation the specification we first throw away all the directions from the and then we proceed with a graphical derivation in ih xx i x ai i aa x x aa ii x we annotated the key axioms of ih each derivation step note that the first and the second to last circuit that we have just proved equivalent are c and c from example modulo the notation adopted for since section a similar procedure can be used to check the observational equivalence of directed signal flow graphs for instance take x x x x first we the direction of the flow and we obtain the circuits c and c depicted below on the left and on the right xx xx then by of proposition and full abstraction we can safely use ih to check c c observe that c is like in example and c is just the sequential composition c c we can thus reuse to see that c c c ih x x ih x to conclude we only have to check that c is equal in ih to the rightmost circuit above this is shown as follows along the same lines of derivation xx xx xx x x x xx xx the circuits in can also be thought of as two different implementations of x indeed x is the generating function of the sequence conclusions the network theoretic approach combines algebra and the circuits of the theory that we presented have an algebraic nature as demonstrated by the as well as a topological nature when viewed as string diagrams our contribution adds an operational understanding to the previously discovered denotational insights throughout the paper we have tried to illustrate the between algebra topology the operational and denotational approaches although our attention in this work was restricted to signal flow graphs the same methodology could be in other areas where notation is employed in addition to the examples we mentioned in the introduction there are kahn process networks bayesian networks and automata many others typically such are translated to more traditional mathematics but about directly the broad picture of the work in this paper is a deep connection between a denotational view and a operational approach that is related to the of network theory the between algebra and topology our is close to that by abramsky for concurrency theory we believe that this approach will eventually lead to less a and sometimes acknowledgements we thank the anonymous for the discussion the first and the third author support from the project is references s abramsky what are the fundamental structures of concurrency we still dont know abs j c network theory networks j c and j categories in control abs h m h h and j of signal flow graphs in to appear in lncs f p and f a categorical semantics of signal flow graphs in concur f p and f interacting are in springer f p and f interacting algebras abs r u g plotkin and d on hierarchical graphs bigraphs theories and r i and u a basic algebra of theor comput sci ­ a and r f c cartesian i j pure algebra ­ b and r interacting quantum in icalp pages ­ b r a and q wang strong and in categorical quantum in lics pages ­ m p and m d the algebra of directed acyclic graphs in abramsky volume of lncs b a compositional approach to control theory phd transfer report d r reasoning for asynchronous circuits in abramsky pages ­ a and r the geometry of tensor calculus i math ­ p n and r f c an algebra of transition systems in pages ­ springer g m and m l coherence for compact closed categories j pure algebra ­ s lack composing theor app categories ­ y towards an algebraic theory of boolean circuits j pure alg ­ b signal processing and linear systems oxford university press s mac categorical algebra b am math ­ s j feedback theory i some properties of signal flow graphs mit research laboratory of d monoidal computer i basic by string diagrams inf comput ­ d monoidal computer ii normal complexity by string diagrams abs j j m m a on coinductive stream calculus and signal flow graphs theor comput sci ­ p a survey of graphical languages for monoidal categories p nets relations and linking diagrams in h a k rd edition j c the behavioural approach to open and systems ieee syst ­ w j and j abstract structure of unitary for quantum algorithms abs 