elimination of single productions from lr parsers in conjunction with the use of default reductions extended abstract department of computer science university of introduction one of the most techniques in lr parsers is to eliminate reductions by semantically productions of the form a x single productions where x is a or a terminal such a modification can lead to substantial in both space and time therefore much effort has been to the de of methods for eliminating reductions by single productions from lr parsers aho and unman and demers and have described a method by which all reductions by single tions can be eliminated from lr parsers but their method may produce a considerable increase in the number of states in the parser on the other hand with the techniques of aho and and demers no increase in the number of states can occur but the elimination of reductions by single productions is guaranteed only if no two single productions have the same left hand side and has extended the method so that all reductions by single productions are eliminated and consider versions of the method of and considers a method which is essentially that given by and as a for simplifying their general technique in and the ation of reductions by single productions is per formed during the construction of the lr parser whereas in wo and and in a reductions by single productions are eliminated after construction of the parser demers considers versions of mo and method such that elimination can be performed both during and after construction of the parser and describes a version of method by which reductions by single productions can be eliminated during parser construction except the method of and all the above techniques rely on the fact that in lr parsing certain error entries can never be however dependence upon these dont care entries leads to some difficulties in the practical use of the techniques first they may not be applicable for all types of lr parsers the method of produces a parser which accepts exactly the strings in the language in the case of canonical knuth and parsers but may produce a parser which accepts erroneous strings in the case of parsers used eg by johnson and of them b furthermore certain other parser optimizations may decrease the number of dont care entries and these tion need special treatment if they are to be applied in conjunction with the elimination of re by single productions one well known method for optimizing lr parsers which is extreme ly useful in list representation of lr parsers and which may decrease the number of dont care entries is the use of default reductions if one or more reduce actions are possible in some state then one of these reduce actions is chosen for the default reduction which is performed instead of error see aho and johnson aho the problem in the use of default reductions in conjunction with the elimination of reductions by single productions is discussed in and a method is given there to solve the problem the basis of the solution is to apply first the algo rithm for eliminating reductions by single tions and then to check every potential default re in order to decide whether it can be used or not hence in the optimized parser all tions by single productions are eliminated but the use of default reductions can be limited a has found that in the case of some cal grammars almost all of potential default tions can be used in the present paper we consider another ap to the problem in our method the ation process itself corresponds to the technique of but the elimination is carried out only if it does not affect the of default reductions the main motivation of this approach is the fact that it leads to a method for ng reductions by single tions which is applicable for any type of including parsers and of them the rest of the present paper is organized as follows section contains some terminology and a brief review of the theory of lr parsing in sec tion we the method of in a form similar to that given by and show by an example that the method may produce invalid parsers in the case of the tion finally our method for eliminating tions by single productions in conjunction with the use of default reductions is given in section background in this section we shall briefly review the basic notions of and lr parsing following aho and and aho a is a g where n and z are finite disjoint sets of nonterminal and terminal symbols respect p is a finite set of productions of the form in is the start we shall assume that the productions are p in some order by convention i a b and c denote nonterminals in n ii a b c denote terminals in x iii x y and z denote nonterminals or ter iv terminal strings ie strings in e are represented by uv z whereas strings in are represented mj v the empty string is denoted by e if a a is a production in p then for all and y we write y and say that directly derives if y is in z then this derivation is said to be rightmost and we write ay the relations and derives rightmost denote the reflexive and transitive closures of and respectively whereas and denote the transitive closures of a and the language defined by g denoted lg is the set w i s w we assume that every symbol x in is useful in the sense that for each x there is some derivation of the form s w and we also assume that a a for no nonterminal a a right form of g is a string a such that s a if s then a prefix of a is said to be a of g let s yn w be a sequence of right forms such that for o s i n yi y and ai di is tion pi of g in this sequence we say that is reduced to yi using the production ai bi the se of productions which can be used to reduce w to s is called a right parse of w according to g that is a right parse is the re of the sequence of productions used in a rightmost derivation a right parser or parsing for g is a function that maps a sentence in lg into a right parse and a string not in lg into an error message let denote the length of the string a and let denote the set of strings w in x such that k we define to be the set of all w in xk such that either a w or k and a wx for some x similarly we define to be the set of all w in xk such that s and w is in the lrk parsing algorithm is based on a set of lrk tables each of which is a pair of functions t fg such that i f the parsing action function maps lookahead strings ie strings in ek to the ac tions and i where i is the number of a production in p ii g function maps the set to the set of tables and the word error we shall now consider techniques for sets of lrk tables let g be a grammar if s is a sym not we say that g ss is the augmented for g an lrk item for g is a pair a au a a is a production in the augmented where grammar g and u is a string in k the item a au is said to be valid for a prefix y if there exists a derivation s in g such that y ba let i be a set of lrk items the of i is defined to be the least set i satisfying i ii if is in i for all by is in i then b in p and all the function is defined as follows let i be a set of items and let i be the set of items a i a is in i then the set is the closure of i we can extend the function goto to strings in in the obvious way viz i e i ii x to construct sets of lrk tables for grammar g we first construct a collection of lrk items a given of sets construct the canonical collection the canonical collection c of sets items for a grammar g can be computed as follows let be the closure of the set s sel where s s is the starting tion of the augmented grammar g is called the initial set of items let c the set l then apply step until no new sets of items can be c for each set of items and for each x in compute i add i to c if i is nonempty and not already in c u let i be a set of lrk items we define to be the set a a i a is in i the collection of sets of items for a grammar g is that which is produced by algorithm if step is replaced by the following for each set of items i currently in c and for each x compute i if i is nonempty and for all j cur in c add i to c if for some j in c replace j in c by finally we consider the method for con a collection of sets of lrk items algorithm construct the collection the collection of sets of items for a gram mar g can be computed as follows using algorithm construct c the canonical collection of sets of lr items for g for each set i in c replace every item of the form a by the items a for all u in follow the resulting collection of sets of lrk items is the collection u lrk tables ing algorithm can be constructed by the follow construct an lrk table from a set of lrk items the algorithm constructs an lrk table t fg from a set of lrk items i in a collection c the parsing action function f is con as follows if aa ul is in i s s then fu i where i is the number of production a a if a where a is a terminal sym is in i then fv for all v in dz if s se is in i then fe is accept fu otherwise if fu is not uniquely defined for some u in then a parsing action conflict is generated by i and no table is produced for i the goto function g is constructed as follows if is not empty then there are two cases to consider if the collection c con only sets of items such that for in c j j then gx is the name of the table constructed from a set of items i in c such that b otherwise gx is the name of the table from x if is empty then gx u the table constructed from the initial set of items is called the initial table if no parsing action conflict occurs then the set of lrk tables constructed from the canonical collection of sets of lrk items for a grammar g will be called tables for g and the grammar g will be called an lrk similarly if no parsing action conflict occurs then the set of lrk tables constructed from the collection collection of sets of items for a grammar g will be called the set set of for g and the grammar g will be called an grammar example consider the grammar g with productions ab ac bd we first list the canonical collection of sets of items for g the notation is short for the items a s se s s s a ba a ca b s s s a a ba s a bb a cb b db a ca s s a bb ac b bd b s el since only if i and j or i and j the collection of sets of items for g contains the of items j o ji j u following j j sets o since follows e and a the of items for g is of sets o s se s s s a a b s se s s a k s a a a k s s lo s the canonical set of tables for g con from the canonical collection of sets of items is shown in fig and the set of tables constructed from the tion is shown in fig throughout this paper lrk tables are shown as rows with columns for the arguments of f and g the following code is used for table entries a s i i an attempt to construct the set of tables from the collection of sets of items leads to a parsing action conflict because of the set of items k n corresponding to the function where i is a set of lrk items we define for each lrk table t the function as follows i t ii if t fg then gx for iii ax a x if otherwise if to is the initial table in the canonical or set of lrk tables for a gram mar g and y is a prefix of g then it is well known that the set of lrk items correspond ing to the table contains all those items which are valid for the the prefix y on the other hand every string y such that is a prefix of the mar g in the case of the canonical set of lrk tables every item in the set of lrk items to a table is valid for the prefix y the preceding example shows that this need not be true for the set of tables since the set of items j corresponding to contains the item a cal which is not valid for the prefix ac however a cal is valid for the prefix c for which in fact for the set of tables every item in the set of lrk valid items corresponding to a table for some prefix y such that is finally for the set of tables this need not be true but less every item in the set of lrk items to a table is valid prefix of the grammar g for some action to s ss tl t s t s t t t ss t t t s t t e goto tl t t tq t t rr t lo t t t figure canonical set of tables action r s rl r s r s r r ss ss r r o s a goto ri r r r r r r r r set of tables we shall now give a formal specification of the lrk parsing algorithm let u be a set of lrk tables for a grammar g we define the lrk parser using u by specifying the action of the parser and the in and accepting configurations a configuration of the lrk parser for g is a triple tm w it where to tl tm are and t o is the initial table w is in z and is a sequence of production numbers the action of the lrk parser is the relation defined on con as follows let tm w be a configuration such that ti for o s i s m and let u if w aw and ga t then tm w w if i and production a o where r then tm w n w iii n i is where t is ra if is or then there is no configuration c such that tm w n c h initial of the parser is a configuration of the form to w e a ation e n is said to be an accepting con if t fg and fe accept let be the reflexive transitive of if to w e e h where e is an accepting configuration we say that the lrk parser accepts the string w and outputs the pro sequence h if u is the canonical or set of lrk tables for g then the lrk parser for g using u accepts a string w and outputs the right parse of w if and only if w is in lg if to w e e tm w n where tm w h is not an accepting con and there is no configuration c such that tm w n l c then we say that the configuration tm w n is the error and the string w is the error string for w in order eg to use default reductions in aho and johnson as follow ing modification of lrk tables must be possible let u be a set of lrk tables for a grammar g for each t in u having one or more reduce actions do the following select one production say i such that fu i for some u for each lookahead string v such that fv replace fv by i tie say that the resulting set of tables de noted has been constructed from u for the use of reductions it is well known that if u is the canonical or set of lrk tables for g then the lrk parser using ac a string w and outputs the right parse of w if and only if the lrk parser using u does so in addition for strings not in lg the error de point with regard to the input string is unchanged if u is used instead d of u ie using a string w is the error when string for a string w not in lg if and only if w is the error string for w when using u motivation we shall now describe the method of a for constructing a set of lrk tables for a g so that the lrk parser using this set of tables does not make reductions by single productions ie productions of the form a x where x is a terminal or a thus when accepting a string w the lrk parser outputs a production sequence which can be ob from the right parse of w by deleting the numbers of single productions our definition of method is similar to that given by we the definition of the closure of a set of lrk items and the definition of the function goto and use these modified forms in of the closure and the goto function in the algorithms for constructing collections of sets of lrk items let g be a grammar let i be a set of lrk items for g and let ps be some set of single productions in p the closure of i is defined to be the set of all those lrk items which i are included in the closure of i and ii are not of the form a a x is a production in ps xu such that in order to define the modified goto function denoted by goto we need the following definition for each x in if ps contains tion x y for x some y single productions in p s i otherwise if we assume that in the definition of the goto function the closure is used instead of the closure then we can define the function for each set of lrk items i and each symbol x in as follows where y is a symbol such that contains the symbol x note that such a symbol y always exists but need not be unique if the closure and the function goto are used instead of the closure and the goto func tion in the algorithms for constructing a tion of sets of lrk items then the lrk parser using the corresponding set of tables will not make reductions by single productions in ps how ever the lrk parser using the set of tables constructed from the modified collection of sets of items for a grammar g may accept strings not in lg to see this consider the grammar g of example ab ac bd if ps a b then the collection of sets of items obtained by the construction using the closure and the function goto is s se s s s a ca b s se s s s a cb b db ls b s s s e the set of tables constructed from this of sets of items is shown in fig col action to t t t t t t t t s ss s ss ss t a goto ti t t t t t t t set of tables by single productions in ps without reductions the string cb is not in lg is accepted by the parser for g using set of tables in fig yet it the to cb e b e b on the other hand if a set of tables u for g has been constructed from the collection of sets of items obtained by the canonical tion using the closure and the goto then the parser for g using u accepts exactly the strings in lg however the parser for g using a set of tables constructed from u for the use of default reductions will accept the string cb eliminating reductions by single productions in conjunction with the use of default reductions in this section we present a modification of the method of and for eliminating reductions by single productions the advantage of the modification is that the use of default reductions will not cause the parser to accept erroneous strings this implies further that our method will produce also in the case of the construction a parser which accepts exactly the strings in the language the basis of our method for eliminating tions by single productions is to modify further the definition of the closure of a set of lrk items instead of the closure we define another modification which from the sure only those items of the form a the elimination of which does not affect the of default reductions we shall restrict ourselves in this section to the case k let g be a we first define a set dont care for each set of items i and for each a in n to do this we use an auxiliary set which is de for each ax in and contains only ter symbols of g a terminal b is in if for each by in such that x by is a pro of g one of the following three conditions is met i is nonempty ii for some prefix y of ao iii by e is in hi we define the set to be consider the g of example for the initial set of items for g the set is empty since a c is a production of g and for each terminal sym h u example consider sl sl b a ds b b the grammar g with productions the canonical collection for this grammar is of sets of items l s se s s be b s s s b s a s s s be b e the terminal a is in since is not empty and a is in the set is equal to the set which con a since and on the other hand the terminal a is the only symbol in similarly a u consider the usual grammar go for expressions containing the binary operators and et tf f e fa the initial set of items for this grammar is e e e te t t fe f ee f ae in order to conclude that is in first note that g since con the items t the set is not empty either and thus is in furthermore is the only symbol in u shall now state our modification of the definition of the closure of a set of items let p be a set of single productions of a g let i be a set items for g and let j denote the closure of i the of i is de to be the set of all those items which are included in j except any item a xa such that a x is in ps and the following condition is met if x bb is in j and a xb is not in j then b is in the set of productions a x such that a xa for some terminal a is in the closure of a set of items i but not in the default correct closure of i is denoted by example let ps a b for the grammar g of example the closure of the item s se is equal s se since contains to i the closure o of item b db but does not contain item a bb and b is not in o the closure of the item s is s a cb b db since for a b and b d the closure of contains only the items a bb and b db u consider the grammar g of example and let ps s b although the closure of s se contains item b ba and does not contain item s ba the ps free closure of s se is s se s b since a is in s se u where is the closure of example if ps e t t f for the grammar go then the closure of e ee is e ee e t f ae f ee note that the items e te have been when constructing e since this set from l is in the closure n of we proceed by defining the sets and for each set of items i and for each x in the definitions correspond to those of and in the previous section if contains a pro xy for some y x a derives productions otherwise single if we assume that in the definition of the goto function the closure is used instead of the closure then we can define the function as follows u where y is a symbol such that contains the symbol x if the closure and the function goto are used instead of the closure and goto function in the algorithms for constructing a collection of sets of items then we say that the resulting collection of sets of items and the corresponding set of tables are optimized with elimination of single tions in ps by example the collection of sets of items correct elimination for g optimized with of single productions can be obtained from the collection ps given in example by deleting the set and deleting the item a bb from j as demonstrated in examples and for initial sets of items we may conclude that collections of sets of items for g and go optimized with elimination of single productions in ps do not con sets with items of the form a ba ie all desired single productions are eliminated n since our method eliminates reductions by single productions as the methods of a and some reductions but may only leave we may conclude by the proofs in and that in the case of the canonical construction our method is correct in the following sense i a set of tables constructed without parsing action conflicts from the cal collection of sets of items for a gram mar g optimized with elimination of single productions in ps if this can be done from the canonical collection of sets of items for g ii the parser for the cal set of tables optimized with elimination of single productions in ps accepts a string w if and only if w is in lg in this case the parser will output a sequence it which is the right parse of w less some single productions in ps the following theorem implies that the valid ity of the method is not affected by the use of default reductions let u be the canonical set of tables for a grammar g optimized with elimination of single productions in ps l p and let be a set of tables con from u for the use of default reductions if the parser for g using accepts a string w then so does the parser using u of proof assume that the parser for g using accepts some string not accepted by the parser using since has been obtained from u by changing certain error actions to reduce actions this means that following some reduction an invalid action is performed in other words then there must exist a prefix ya of g such that in the table where to is the initial table contains actions being neither error actions nor reduce actions substituted for error actions although when using the canonical set of tables an error would occur in this case we say that there exist invalid actions for the prefix ya according to we shall show that such invalid actions may exist they will not be executed let ya be a prefix of g and suppose that b is a which there exists an in valid action for ya by the construction of a set of tables optimized with ation exist of single productions another prefix in p then there must s yx and a production ax reductions by which have been eliminated the symbol b must be included in the set where i is the set of items corresponding to the table but this means by the definition of the set that the following condition holds for each terminal string x such that a x there exists a prefix yb sat r thus no string such that a x can be re to even if the lookahead symbol for reducing were not checked hence we can conclude that no invalid actions for ya according to can be performed u the above theorem implies further that the parser for a g using the set set of tables u optimized with default correct elimination of single productions in ps or a set of tables constructed for the use of default reductions from u will accept exactly the same strings as the parser using the set set of tables without elimination this is due to the fact that the set of tables can be obtained by merging compatible tables from a set of tables constructed for the use of default reductions from the canonical set of tables for g optimized with elimination of single productions in ps it is obvious that computing the sets during the construction of a collection of sets of items may be inefficient but a similar concept may be defined on a set of tables so that the default correct elimination of single productions can be performed after constructing the set of tables however if we to perform elimination during the construction of a collection of sets of items we may restrict ourselves to an easily computed subset of we might define al for all ax such that there is a production a ax by using instead of in defining the closure we obtain a method which is capable of eliminating all the re single productions in many practical cases eg the grammar go acknowledgments the author shares the credit with for finding the grammar g that was the initial motivation of this work thanks are also due to and for several useful dis finally i wish to thank and for their helpful com ments on the manuscript this work was supported by a research project translator writing systems the pro is led by and by the of references language theory in compiler design in computation theory analysis sign ed prentice hall nj lr parsing computing the theory of parsing translation and parsing prentice hall nj a ie theory translation and compiling of prentice hall nj b a technique for up lrk parsers siam j computing parsers informatica an alternative efficient approach to the improvement of lrk parsers informatica lr parsing ieee con of th symposium on switching and automata theory tions elimination of single and merging nonterminal symbols of computer languages simple lrk acm grammars corn lr parsers and in construction an advanced lecture notes in computer science eds springer verlag york compiler yet computing science another compiler technical report bell hill nj the parser generator system research central laboratory a simple technique for partial elimination of unit productions from lrk parsers ieee trans comput c on the translation of languages from left to right information and control optimization of lrk parsers in thesis university of an efficient parser gen report university of on directly constructing lrk parsers without chain reductions conference record third acm symposium on principles of programming languages al on eliminating unit productions from lrk parsers technical report pe university of bl constructing the tracing algorithm for lrk parsers proc th acm symposium on theory of computing on eliminating unit productions from lrk parsers languages and nd lecture notes in computer science ed springerverlag new york a practical general method constructing lrk parsers university e s on constructing parsers unpublished manuscript for of lr design of an automatic constructor of lr parsers in internal report department of com science university of 