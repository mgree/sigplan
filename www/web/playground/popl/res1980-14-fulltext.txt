on proving inductive properties of abstract data types david r abstract introduction the of an algebraic of a data type such as sequences often can be formed into a of rewrite rules le such that all sequences of rewrites are finite and if one adds i rewrite rule corresponding to a data type property whose proof requires induction as associativity of sequence concatenation convergence be but often can ha by using the algorithm to generate additional rules a set of rules thus obtained can be used as a decision procedure for the theory for the axioms plus the property added this fact combined with a full property of leads to a new method of proof of inductive the invocation of an inductive rule of inference this work wu by the advanced research projects no expressed the author branch general and permission to make digital or hard copies of part or all of this work or personal or classroom use is granted without fee provided that copies are that copies notice and the date appear and is by permission title the association for computing machinery to copy otherwise or to republish requires a fee or specific permission in the algebraic axioms method of f data types the semantic properties of a collection of r a set of equations relating the each other a principal advantage of this technique is that often one can obtain a procedure for the theory of the equations and use it to automatically carry out proofs of properties of the data or many steps of proofs an important way of obtaining such decision procedures is to form the equations into rewrite rules and use the methods knuth and for equational of mathematical structures such as theory rewrite rule techniques proof theory of data types is more complex than to structures such as groups and because of rule of inference assumed data induction principle called or data type speaking this induction principle states that a about the functions of the type is a theorem if it can be shown to hold for all of the type a constant ie an expression finitely by composition of the function symbols thus it is a ground expression ie it contains variables the usual way of applying induction principle has been to perform of constants or induction based on some wellfounded partial ordering of the constants proofs require explicit invocation of a suitable for each formula to be proved and thus there has been no to carry out these proofs working just with equations the main new result described in thk is a theorem that by observing constraints on the of data types the use becomes and proofs of type properties often can be carried out without explicitly invoking an principle this f proof in which the methods play an role has been implemented in an experimental system at the institute the system experience the method shown that in many cases it can considerably the task of proving inductive of data types before presenting the theorem we attempt in th section to provide clear and concise of of the basic concepts relating to pf theory of specified data types the language of a type consistency and inductive theory the mn requirement placed on specification in order to the of the theorem is a kind of completeness requirement it is to sufficient but a definition a is proved in that shows that rewrite techniques can be to prove this property about collections of data ty specifications has independently proved a result appears to be to our main theorem but recursive function theory setting among previous to rewrite techniques to proving data the reported by and and moore von and and have been sources of for an introduction td rewrite concepts the property finite and unique termination of ail of rewrites see for s discussion of the system and work by other authors data types basic concepts an abstract data type consists of a a syntactic part specifying the of the type and a semantic part specifying the the expressions of the satisfy we will use the phrase type t in cf abstract type specification for t the syntactic part of the specification a et of function symbols fl fn to the type and for each fi the names of its argument types and type the wy of fi one or more m be included in the syntactic specification sw functions which have range type t but have no of type t for each of the type names t that in the other than t we say that t on for t and u in the of this we say that t depends on u we define the of t written lt and a typeof from expressions to type names w a for each type u on which t depend wi infinite set of variable v with u we contained in lt b for each type u on y depends and each function f to u the of f be u x x uk where k then for each tuple el ek of ei in lt with lit for il k the expression ek is in l with ek c ar in lt this definition of lt differs from that in and in but with a more recent definition in note that it mutual dependency among specifications the inductive definition is based on the structure o expressions rather than on a hierarchy in the organization of specifications to the semantic part of the specification the of t are a set of equations in lt it i assumed that among the operators to any type t it the t used to express the axioms arity of t is t t boolean type i discussed these equality be written without the subscript t since t can be as the type of the arguments the axioms are to the property for t ie t x true discussion of other requirements wi equality operators appears in if t is a collection tl tn of types the of again denoted lt is the union of n end th axiom set a of t is the union of the axiom sets ai of ti these definitions are illustrated in the subsection and in the specification of given figure the is a specification of a type express logical values it la in the syntax accepted by the i declare pq r boolean true false if p else r not p p snd q p or q p t boolean ox i pq if p p true if true then p else q p if false then p else q q if p then else true p and q if p then q p or q if p then true q p if p then q true end boolean notes are declared to be with w initial actually and m p infix form of ef is n etc this kind of of to by type does not on any other type every type depends on boolean t range are p for thus in are predicate as are all any lt variables in predicate expressions that o are implicitly universally t quantifiers are permitted equational theory let a finite set of we f each a sat of equations by the variables of al and i to over that wa of set is infinite are constant this defines a binary w on expressions and we extend to smt equality containing all of the generated wa write a for the resulting relation and call the of equations this relation the of if t ia a type or a types with axiom a then the theory of t la defined to be the intersection of th equational theory of a with lt a type types ground expressions of lt ie those expression m l containing no variable a set of a type t with axiom set a a f of the equivalence classes of under the equality relation a by a with the specification of type boolean given above it can be that each constant of equal by the axioms of boolean to one of the symbols true w but does not follow the end thus the set of canonical constants of type be taken to be a set of equations ia if is collection th axioms a is defined to be consistent tf a is for example the boolean type given above la fully types let t be a collection of types with axiom set a t is by if every constant c in lt ia equal by a to a constant in the specification property is tb sufficient completeness property of its lies primarily m if one e collection of types that has been to be fully specified and one extends the a type so that the augmented relation w more frequently rw i an relation that also has the property of being jr f b consistency with the equivalence and can be checked by that for of sw type substitution of equal yields wi ie if the ai fw e s the reflexive x x then it can be shown ic ty x t y y x t y y y z z f is also fully then added not introduce any new constants into the old types lemma reduction of constant predicates let t be of types with axiom set a and assume that it fully by a if a predicate m ll then either p true by a or p false by a proof from the three facts p is a constant ij ie boolean and t is fully by h we can conclude that there is a pi in such that p p by a the set of constants of type la true pi true by a or pi false by a po q by a or p false by a inductive theory let t be a type or a cf types with h the theory of t is the set of all p such that every constant po by substituting for the variables of p by a thus the inductive of t k the theory by adding to the equational theory a of t an inductive inference of the following form let xn be a predicate expression in lt ii a qc for all tuples cl cn of such that xn a rule of inference of this form k sometimes a rule of infinite induction since there are to the as such it k not directly in proofs as a of but it can be other rules that have many premises corresponding to the structure of the induction or more induction any ordering of the induction rules have been called or date type these of inductive proof of data type properties are related to the induction methods used by t and moore to prove properties of recursive but the method of proof to be in the next i different from the techniques in the approach of the theory of t corresponds to algebra of t full specification plus equational inductive proof theorem let t be a collection of types with and assume that t is specified by a if e k a tf equations each in lt and a u e is consistent equation in e in the inductive theory of l proof let be an equation in e and x my constant instance of a we must that a by either a w a latter t ij then a u e using a to a by and a u e by the a contains the axiom for u where the assumed consistency of a u e a qed this theorem shows that the be to prove properties ms m a collection of data type have previously been formed of rewrite and it checked that the types are specified by th axioms to attempt to prove that an equation a s h the inductive theory of the of a new rewrite either a or a f finite termination criterion being used and there are three outcomes first the may terminate f a finite number possibly zero of none of is true false ti convergence property in this case to our theorem the equation up is a theorem ns this depends on the capability of deciding via are certain that true is not a of augmented equations because both true and aw irreducible constants second the true may be generated in which case the equation b inconsistent with the axioms of the types the possibility is that th may b to find a finite set of generating some must be made for terminating the as a limit on number of generated ot consumed in the system the user the generated rules being on the fl interrupt the process manually in this no information la about whether ad is e the of generated th a et of is defined to bs c m if n both the finite termination properties a w f wt of is that provide a decision kt w of tion to which they process is may be of ad equations that would lead to convergence thk is to behavior of the theorem when it sometimes needs a lemma to be supplied by the user it can find a proof of a theorem l d these is illustrated in the examples that examples inductive properties of sequences figure shows a specification of finite presented by in it be that when the equations of this specification are as rules they are the proof of ws unique termination property is carried out by the system using the algorithm wh equations into the system tw of types containing and boolean can ba to be by application of a lemma to be proved at the o section examining how our theorem permits the algorithm to be used to prove about let us consider how h properties be proved by a more approach according to the interface and the of data type induction the of type can be as the set of all em finitely using the ni j onto functions thus of inductive d using the following rule of ps ps x ps implies px ps if one first uses this rule of inference to prove a form lemma for the type showing that the onto operator can always be then the third premise of the above ol be omitted in all subsequent proofs of it properties thus to prove the property s cnt xj s s x for example one can take ps s x s cat s x and it to and ps implies ps x the proof of simply requires two u the axiom cat e s two applications of s x cat s s cat x onto s reduce td pa implies s cat x onto s x s cat x onto s to which the axiom x onto s x x onto s xl ps implies a cat x onto s x cat s x we may then use the induction ps by renaming bound variables s to s and x x and s x onto s and x x to to an identity figure and element x x element ax i om xx end i e s s s declare x x x element of e sx the a i bg add i no x to the end of a x onto e the i bg adding x tc the front of s i e cat e the sequence obtained bg ing s end s interface i s ax t om ss true null false x null x sx xx and es x onto null null x x onto x x onto x null cat s s x cat e s cat x onto a null and note that this proof several nontrivial choice of induction variable if we had chosen of e then even the basis case would not have directly provable application of the axioms to make equational substitutions and bound variables and an appropriate in the induction hypothesis now consider how the same inductive property he proved using the to the off set of rules obtained from the axioms one adds w s cat s x a cat s x it must be the augmented set of has the property when the is them it shows that the unique termination also still no additional are required ta convergence the collection of types has the specification property our theorem implies m property is in the inductive theory of this of types readers familiar with the may wish to how the of and critical pairs corresponds to the main steps of the standard inductive proof the main difference is that one has in effect a w hypothesis since the induction be as being on the maximum length of sequences of of an now suppose one to prove the s cat null s again when this is added to the consisting of the axiom and the rule s cat e x s cat e x the ie by the algorithm if however the equation s cat null null and m a rule the the rule true false that a cat null i inconsistent with the axioms this illustrates the of the three possible outcomes mentioned above the third is by adding w s cat null s to the axioms without the cat s x a cat s x the begins generating the of a cat null x x s x x s cat x x xi a x x etc x it is to from the form of these rules that rule s cat s xi s cat s x prevent from being formed since it permits the left side of be reduced to the right thus one must have added property or it must be with s cat s another is of cat tb cat s cat s s cat e cat s when this is added as a rule the algorithm two that appear to be the beginning of an infinite rules e cat x onto s cat s s cat xt onto s cat sl e cat x onto x onto e cat s cat x onto x onto s cat however it then generates another onto s cat s x onto e cat s which tm of the two rules above to ba discarded and prevents generation of further similar set of is found to be in ww the lemma needed to the proof additional functions can be added to the and many other inductive properties can ba this method the main limitation is the of the property of the rules figure shows functions and some of properties that have been shown to hold using the hl the theorem to be generalized to permit parametrized type specifications we are study proposals of end goguen and for specification languages that include ty another area for extension is to the of including exception handling m in the manner presented by ill another issue is that of the of requirement of specifications experience with algebraic specifications by w author and others indicates that this is not a the restrictions on the form of that end have given for related condition of sufficient completeness appear to be stronger than necessary a approach is based on the lemma let t be a collection of with a the axioms of a form a set of rewrite rules h the finite termination property and under this set f u every constant c in lt is either or ie ih then t is specified by a proof we must show that any constant c in lt i cw by a to a constant in if c ie not already m then by it la t figure type declare s e declare x x x element interface null x x onto s cat s interface la x in s s t interface ax i ge m true i sx false x null q false ax ax xx and null x onto null null x x onto x x onto e x null cat e ex cat e e cat x onto s null true false if ls then x else first x if ls then null but x e x in null false x in ex not xx x in s null x onto true not x in e and null a true sx e not x in e and a s s cat ex s cat e x e null e a cat a cat e r s cat a cat e cat x onto a cat s e cat x onto e cat a x onto a cat e x onto a cat e a onto e cat e s and onto a w x onto if ls then x onto a s onto s if ls then null x onto x in x onto e xx x in s x in e cat e not x in e implies x in e onto s x cat a cat onto s not x in s e null true e ax not x in e and a a end t constant c in lt we in this way a eventually reaching a on that s irreducible the rules have the termination property and thus is in qed based on this lemma the full specification property can be proved by first proving the finite termination property then analyzing the of constants an important extension that needs to be made in implementation is to provide algorithmic fi sufficient conditions for termination finite arbitrary sets of rewrite rules is undecidable rather than it up the user to deal with outside the system as i currently done th methods for proving termination being are those described in and it would be useful to implement come of of the methods by huet and nelson and and and to of equations many of commutative and conclusion the method of proof described in this has used in system to prove numerous inductive properties of data types such as sequences queues acts circular lists and trees the theorems about sequences shown in figure are fairly typical of the kinds of properties proved about these types there are some kinds of data type properties which our proof method is not applicable eg of the subset relation about sets the difficulty that arises is that expression of the property aa a rewrite use of the ifthenelse operator and although there cases in which of operator be obtained keeps on generating and longer rules end not terminate for most inductive that can be expressed as simple equations our method of proof usually been applicable except for the proof of finite termination for which as yet provides nc this has permitted the proofs of properties to be obtained much more than when such are done by explicitly invoking an inductive rule of inference it is a to helpful bob john d moore and david have in many to the ideas presented special thanks john ut for valuable comments on of this paper references w w and p a system vol pp r s and j s moore ia lemma automatic theorem prover for function proceedings conference vol pp august burstall r m and j a goguen putting together to make specifications of international conference cn august t g pp s on equations having a no march o j can program proving be made institute cf of n and z manna proving termination orderings computer science department no university march goguen ja and jj an introduction to obj a language and testing formal algebraic proceedings of of software conference boston april pp goguen ja eg and abstract data types as algebras the correctness of data representations of conference on computer pattern and data structure ca pp j v specification and to programming of abstract data ph d the of department of computer j v data and we development of data structures of the vol june pp j v on type of of reliable conference boston april pp e appear in ieee transactions on software engineering j v e and d r data types and software cf the acm vol december j v e and d r th design of type specifications in methodology vol iv r t cd prenticehall i j v and j j the of abstract data types von f w and d c a programs proceedings of international conference on la april pp f f huet g reductions to term rewriting report no de france huet g and d s on the uniform problem for term rewriting systems report knuth d e and p b simple word in universal algebras in problems in abstract algebra j cd york pp d s canonical inference university of texas theorem prog project december d s end a m procedures for simple equational theories with axioms complete wt f reductions of automatic theorem proving project report r and l on the of tree replacement systems conference on computer university of d r a data type verification system on rules of the conference on computing systems austin november r d r type specification in the system proceedings of the specifications of reliable software conference boston april also to in ieee transactions on engineering ft and specification structuring and a first order logic research report no institute of of november nelson g and d c a wl decision algorithms proceedings of the acm symposium on principles of languages j and b the verification synthesis of data structures acts vw lg pp m e and g e of reductions for equational theories with algorithms of computer of and department of sciences of september n by logical reduction proceedings of f conference on reliable software q pp sn an introduction to data algebra working ibm san research lab sept 