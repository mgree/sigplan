conference record of the fifth annual acm symposium on principles of programming reasoning about recursively defined data structures artificial intelligence laboratory computer science department stanford university stanford california abstract a decision algorithm is given for the quantifierfree theory of recursively defined data structures which for a conjunction of length n its satisfiability in time linear in n the firstorder theory of recursively defined data structures in particular the firstorder theory of lisp list structure the theory of cons car cdr is shown to be decidable but not elementary recursive i introduction we are interested in the problem of reasoning about data structures and the operations associated with them there are several for such a study for instance in reasoning about programs one is interested in proving properties of data structures after they have been manipulated by a piece of program text on the other hand et al and j see also goguen et al are interested in proving that a particular implementation of a data structure and its associated operations is consistent with an abstract axiomatic of these operations there is a need for fast techniques if they exist for reasoning about classes of data structures more generally there is a need for knowledge on the complexity of reasoning about particular classes of data structure this gives some intuition as to the inherent complexity of these classes of data structures we will explore in detail the question of reasoning about a particular class of data structures the class of recursively defined data structures these are essentially the recursive data structures proposed by hoare as a structured alternative to pointers most programming languages support such data structures either explicitly or implicitly they can be by arrays but the best known example of them is lisp list structure with constructor cons and selectors car and cdr this research was supported by the national science foundation under contract mx more precisely recursively defined data structures are data structures which have associated with them one constructor function c and selector functions with the structural properties l construction cx x x x selection s cx xk x x x iii x x sx x x x x we will consider first order theories by of the above form with equality a decision algorithm ts given for the quantifierfree theory of recursively defined data structures which for a conjunction of equalities and determines its satisfiability in linear time the algorithm has possible applications in any theorem prover which handles such data structures for instance and prover for lisp functions and moore and prover for abstract data types or the simplifier we are developing nelson and our algorithm is extended to handle type predicates for example in lisp there is a predicate which asserts that x is an atom the axioms are modified to reflect types for instance axiom i v kx it follows from the above that the quantifierfree dnf theory of recursively defined data structures that is the quantifierfree theory in which every formula is in disjunctive normal form is decidable in linear time and therefore that the full quantifierfree theory of recursively defined data structures is in np and hence npcomplete we next consider theories in which quantification is allowed in particular the firstorder theory of lisp list structure our basic decision algorithm can be modified to form the basis for a method for this theory however the decidability of this theory and its complexity can be derived from existing results in logic in particular the constructor c cons may be treated as the structural analogue of what is called in logic a pairing function there are results in the literature on theories of pairing functions and part of the purpose of this paper is to point out their applicability we will use these results to show that the first order theory of list structure recursively defined data structures is decidable but not elementary recursive that is although the theory is decidable there cannot n exist a decision procedure for it which always halts in time for any fixed number of the formula the question of the decidability of the first order theory of list structure has recently been raised by john j by the above it is decidable shows that if one includes the predicate which asserts that x is a subexpression subtree of y then the theory is undecidable if one the axiom schema different results obtain nelson and give a decision procedure for the quantifierfree theory of list structure which for a con of equalities and of length n its satisfiability in time n a variant of this algorithm has been implemented johnson and tarjan have improved the algorithm to run in time on time decision algorithm for the quantifierfree theory int ion the language of the theory consists of variables function symbols c si sk and the predicate we describe a decision which determines the satisfiability of a conjunction of equalities and in linear time later we will modify the algorithm to handle type predicates assume that we are given a conjunction tl u a a t u ar s a arm sm the basic strategy of the algorithm is to construct a graph whose vertices represent the terms of the conjunction and an equivalence relation on the vertices of the graph representing all the equalities that are by the conjunction the algorithm then checks if any conflicts with any of these equalities the algorithm represents terms in the conjunction by the equivalence classes of vertices in a directed acyclic graph possibly with multiple edges a vertex in the graph may have zero or k corresponding to the k selector functions the edges leaving a vertex are ordered if u is a vertex with nonzero then ui will denote its ith successor since multiple edges are allowed possibly ui uj for i j every term in the conjunction is either an atomic symbol or an expression of one of the forms or cal a ak where u al ap ak are terms an atomic term x will be represented by the equivalence class of a vertex x a term of the form will be represented by the equivalence class of a vertex v such that v ui for some vertex u representing a if necessary dummy successors of u are added to represent the j i if these do not appear in the formula a term of the form cal a ak will be represented by the equivalence class of a node v with k successors representing respectively al a ak to represent the fact that two terms are equal we will merge the equivalence classes that represent them the first step taken by the decision algorithm is to construct the graph representing the terms in the conjunction the equivalence classes representing terms equal in the conjunction are then merged the main work of the algorithm is to close the graph under all equivalences of vertices checking as it does so that no cycles are being introduced into the graph since such cycles would violate the condition first if two vertices u and v are equivalent and both have nonzero then the equivalence classes of their corresponding successors must be merged since x y a a secondly if all the corresponding successors of two vertices u and v are equivalent then the equivalence classes of u and v must be merged since sx a a x y a graph closed in this fashion will later be defined to be closed the following above step fragment of an algorithm carries out the for all pairs of vertices v with nonzero if u and v are equivalent then if any corresponding successors of u and v are not equivalent then merge the corresponding successors also step else if all the corresponding successors of u and v are equivalent then merge u and v also step return this algorithm is obviously nonlinear it also does not check for cycles in the next section we will describe a linear algorithm for computing the bidirectional closure of a graph and in the following section show how this graph algorithm yields a linear decision algorithm bidirectional closure let g v e be a directed graph possibly with multiple edges such that the edges leaving each vertex are ordered if r is an equivalence relation on the vertices of g then g is under r if there is no sequence of vertices v o vo v v vp v of g po such that c r and c e for s i p let r be an equivalence relation on the vertices of g define the rt of r on g to be the unique minimal extension of r such that rt is an equivalence relation and any two vertices u and v with equal nonzero are equivalent under rt if all their corresponding successors are equivalent under rt if g under r is acyclic there are linear algorithms for constructing rt and sethi johnson and tarjan h these algorithms abort if g under r is not acyclic let r be an equivalence relation on the vertices of g define the unification closure rl of r on g to be the unique minimal extension of r such that rj is an equivalence relation and if any two vertices u and v with equal nonzero are equivalent under rj then all their corresponding successors are equivalent under rl if g under rj is acyclic there are linear algorithms for constructing rt for instance the linear unification algorithm of and wegman this algorithm will abort if g under r is not acyclic we use the notation rt and r to suggest the duality of the two notions of closure let r be an equivalence relation on the vertices of g define the bidirectional closure r of r on g to be the unique minimal extension of r such that r is an equivalence relation and given two vertices u and v with equal nonzero u and v are equivalent under rt if and only if all their corresponding successors are equivalent under rt consider now the problem of constructing the bidirectional closure first it is apparent that if a congruence closure algorithm and a unification algorithm are run enough times over g that eventually g will be closed that is a r however if g is such that the of each vertex is either o or k for some fixed k then in fact one pass of each algorithm is sufficient by the following lemma lemma let g ve be a directed graph possibly with multiple edges such that the edges leaving each vertex are ordered assume that the of each vertex in g is either o or k for some fixed k let r be an equivalence relation on the vertices of g then r rl proofi it suffices to prove that is unification closed we first need a property of unification closed relations let ri be a unification closed relation on g let u and v be a pair of vertices in g with k such that r for all s i s k then we claim that the minimal equivalence relation r containing r and av is also unification closed note first that r is r except that the equivalence classes of u and v have been merged consider any pair of vertices x and y with k such that xy c r if c ri then certainly e r for all i k so suppose xy is not in ri then xu c ri and e r or xv and are in r it follows that for al i s i s k c r and c r since ri is unification closed and the of all the vertices x y u v is k and thus that t r since c r by assumption thus merging u and v did not affect the unification closure property therefore starting out with r and making equivalent any two vertices with k all of whose corresponding sons are equivalent leaves the resulting minimal equivalence relation unification closed by induction it follows that rt is unification closed note that it is important for this proof that the vertices have the same if they have nonzero otherwise in the above proof it is not necessarily the case that if xu c r then all their corresponding successors are equivalent note further that the order of the passes is important is not necessarily equal to rt if g under r is acyclic there is therefore a linear algorithm for constructing r one first constructs r using a unification closure algorithm and r under that is construct r using a linear congruence closure algorithm if g under r is not acyclic one of these algorithms will abort the decision algorithm we will now state more precisely the decision algorithm described informally in section we start by describing the data structures manipulated by the algorithm first corresponding to every term t in a formula there is a directed acyclic graph gt gt will a vertex representing t i if t is an atomic symbol gt has a single vertex with zero labelled with t will be this vertex if t is of the form then gt will be ga and will be however if has o we will add k successors to each successor will be a new vertex with zero v be the ith successor of if t is of the form then gt is the disjoint union of i together with a new vertex u with k successors for all s s k ul is is u in taking the disjoint union we will always assume that the label of any vertex in the union is its old label in the graphs whose union we are taking similarly for any term t if exists in then will be the same vertex in what follows we may leave out the subscript if no confusion can result i ne only vertices that are in gt are those which represent atomic symbols in t an g is a v e k x such that v e is a directed graph possibly with multiple edges the of each vertex in g is either o or k is a equivalence relation on v g is acyclic under x is a of some of the vertices any two vertices which have the same label are equivalent we will represent an equivalence relation by its corresponding partition that is by the set of its equivalence classes if u is a vertex then let u denote the equivalence class of u if t is a term g an q an equivalence class of in g then q one of the following holds t is an individual variable and v c that av t t is of the form and v c u c v such that represents a and v t is of the form cal and v c q with k such that for all i between i and k represents ai because any that any term represented equivalence class of g g is closed it follows in g is represented by exactly one we now show what it means to add terms to an existing given an g and a term t we define an extension g t of g which contains a representative for t as follows the graph structure of g t is the disjoint union of the graph structure of g and gt and the label of any vertex in g t is just its old label in either g or gt the equivalence relation of g t is the bidirectional closure of the extension of gs relation which makes all vertices of g or gt with the same label equivalent the equivalence class of represents t in g t note that the equivalence relation of g t restricted to the vertices of g is just the equivalence relation of g if t u is an equality between two terms and g is an we say that g entails t u iff t and u are represented in g and their are the same let t u be an equality between two terms if g is an define g t u to be the obtained from g t u by merging the equivalence classes of vt and vu decision algorithm let a s a arm sm construct g e t ul t u ri s rm sm if g is not unsatisfiable for i from i to m if g entails ri si then return unsatisfiable return satisfiable correctness of the decision algorithm we use the notation p q for formulas p and q to indicate that p entails q that is that every interpretation which satisfies p also satisfies q an interpretation satisfies an equality t u if the interpretations of t and u are the same it is straightforward to show that if our formula f e t u a a t u a rl s a a r sm is satisfiable then the decision algorithm will return assume therefore that f is unsatisfiable by theorem there are a finite number of instantiation i of axioms i and of the forms sx x an c xi and instantiation iq of axiom such as x such that f a a a p a a a iq is unsatisfiable with c sl sk uninterpreted we now need two lemmas lemma assume that c s sk are function symbols let f be the conjunction tl u a a t ui let to and uo be terms let g be the t u tl u t ul then f t uo i to and u are represented in g by the same equivalence class that is the equalities which are by the conjunction are precisely those which are by g proofi the if part is trivial to prove the only if part assume to and uo are represented in g by different equivalence classes we will construct an interpretation which satisfies the conjunction but for which to z uo let s be the partition of the vertices of g corresponding to the equivalence relation w of g maps individual variables into elements of s ie equivalence classes of vertices and function symbols into functions from sk to s in what follows we restrict our attention to the terms of to uo and f if x is an individual variable let x be the equivalence class representing x let be the equivalence class of any vertex v in v with k such that for all i between and k vi if v exists satisfying this condition then is arbitrary if vertices u and v both satisfy this condition then they are in the same equivalence class since g is closed let be the equivalence class of any vertex v in v for which there is a vertex u in q such that v ui if no such vertex exists then is if two such vertices exist they are in the same equivalence class now we claim that the interpretation of a term t under t is the unique q such that q represents t this is certainly true if t is atomic if t is of the form ctl tk then we may inductively assume tl tk represent ti tk by the definition of g t there s a vertex v in g with k such that for all i between and k e ti therefore t is the equivalence class of v and t represents t if t is of the form we may inductively assume t represents t by the definition of g t there are vertices u and v in g such that u c t and ui v therefore t is the equivalence class of v and t represents t therefore every equality ti ui of the conjunction is satisfied by since the of ti and ui are merged in g since we are assuming does not satisfy the formula to uo it must be that to ie that to and uo are represented by different equivalence classes in g lemma let g be an let f be an instantiation of axiom i or axiom ii then the equivalence relation of the g f restricted to the vertices of g is just the equivalence relation of g proof suppose f is xk xi the case for axiom i is similar if g contains a representative for then g already entails xi since g is an if g does not contain a representative for xk then constructing g xk xi cannot cause any pair of vertices in g to be merged proof of correctness cent of decision algorithm let g be the constructed by the algorithm by lemma g i i must r si for some i between and m or ii for some ii and q but ii is of the form x t where t is a term like since g is acyclic under bidirectional closure ii cannot be so we are left with r si by lemma the equivalence relation of g i restricted to the vertices of g is just the equivalence relation of cl but each ri and si is represented in g so g must ri si in which case step of the algorithm will return unsatisfiable linearity of the decision algorithm g can be constructed in several ways but some care must be taken if it is to be constructed in linear time that is in time on where n is the length of the formula f we will describe one way of doing so step for each term t in the formula we construct gt we do not to identify common subexpressions distinct occurrences of similar subterms of t will be represented by distinct vertices in gt however we will keep a list of pairs for each term ti ui ri and si in the formula we will keep a list of pairs a va for each occurrence of each atomic symbol a in the formula we then form go the disjoint union of these graphs the number of vertices and edges in go is on and the time required to construct go is also on step we will add to the graph the equalities in the formula by making equivalent the pair of vertices and for each equality ti ui in the formula since in step we kept track of each and we can do step in time on step we now make equivalent all vertices with the same label each such vertex represents an atomic symbol in the original formula and so appears in the list of pairs a va constructed in step under a reasonable model we can sort this list on the first argument of each pair in time on using sorting we then scan through this list for each pair of adjacent a val and a va in this list if al a then we make val and va this step again takes time on in practice this elaborate method would not be used instead we would use a hash table to store va for each a and would never create two vertices with the same label languages such as lisp support this very efficiently step finally we construct g the bidirectional closure of the relation on go constructed in the previous steps again we can do this in linear time as shown in section notice that in constructing the bidirectional closure we will automatically identify make equivalent all common subexpressions type predicates once the graph has been closed it is an easy check to see for instance that a term to be an atom in lisp is not represented by an equivalence class which also represents a term of the form checking that type predicates of this sort are satisfied does not affect the running time of the algorithm the firstorder theory for we will consider the first order theory of list structure with function symbols cons car and cdr and predicate symbols and atom first the decision algorithm given in the previous section for quantifierfree conjunctions can be modified to be the basis for a method for this theory however it is more interesting to derive the decidability and complexity of this theory from existing results in logic on theories of pairing a pairing function on a set s is a map j s x s s an example of a pairing function over the natural numbers is the function xy associated with each pairing function j are its projection functions k and l these are partial functions s s satisfying x and y since k and l are partial we will formally consider all functions as relations but will continue to write for instance kz x instead of an alternative would be to make all functions total by introducing the undefined element into the logic following k and l satisfy the axioms vx z kz x a lz y vz x kz x v lz x x y kz x a lz y the pairing function j is defined in terms of k and l by z s kz x a lz y the first order theory of pairing functions the first order theory with these axioms is undecidable unpublished results by scott and however with appropriate additional axioms the theory is decidable these additional restrictions on k and l correspond to the condition we put on our recursively defined data structures together with the of the theory of atoms first we partition the set s into two disjoint parts the set a of atoms and the set s a of holds if and only if x is an atom the following infinite axiom schema requires that the pairing function be acyclic on all bz x kz z x z a x x o z next if z is not an atom it must have projections vz x kz x vz x lz x finally once projection functions in a an element z lies in a all iterations of from z as long as they are defined must lie vz a x kz x o a a pairing function satisfying these axioms is defined to be acyclic except for a consider the first order theory with the above as axioms proved that the theory is decidable if a is empty reduced the question of decidability to the decidability of the theory restricted to the atoms if the latter is decidable then so is the former it is the latter result that we will use let us return now to the theory of list structure cons is the pairing function j car is the left projection k cdr is the right projection l s is the set of and a is the set of atoms by theorem the first order theory of list structure is decidable if the theory of atoms under car cdr and is decidable there are many possible choices for a and its associated theory first a might be infinite as in lisp or consist of the single atom nil as in and original prover secondly car and cdr may or may not be defined on all or some of the atoms if defined car and cdr may be or acyclic for instance we might choose and to be nil as in ma regardless of the choice as long as the theory of atoms is decidable so is the theory of list structure for a reasonable choice of the theory of atoms its decidability is apparent unfortunately although the theory of list structure is decidable an efficient decision procedure for it cannot exist has shown that no theory of pairing functions admits an elementary recursive decision procedure that is one which always halts in time for any fixed number of s n is the length of the formula it follows that any decision procedure for the theory of list structure must be very inefficient in the worst case a proved his result for pairing functions s x s s his argument holds as well for pairing functions that is pairing functions sk s which satisfy the obvious generalization of the above axioms similarly proves that his lower bound also applies to any pairing function it follows that given a recursive data structure with constructor c and rs s sk satisfying the obvious generalization of the above axioms the associated first order theory is decidable but not elementary recursive acknowledgments i with thanks the helpful discussions i have had with greg nelson bob tarjan and richard n private communication has also proved a theory of list structure decidable references and moore r and j moore a lemma driven automatic theorem prover for recursive function theory proceedings of the fifth and sethi p and r sethi finding common subexpressions submitted for publication goguen et al j goguen j e and j wright abstract datatypes as initial algebras and correctness of data representations conference on computer pattern recognition and data structure may j e and d abstract data types and software validation technical report information sciences institute university of california august to appear cacm and a specification j and j the of abstract data types to appear acts hoare c a r hoare recursive data structures international journal of computer and information sciences june johnson and tarjan d s johnson and r e tarjan finding equivalent expressions manuscript ii a on the elementary theories of locally free universal a mathematics a types of locally classes of certain free algebras j representations of recursive programs in first order logic manuscript nelson and c g nelson and d c fast decision algorithms based on union and find proceedings of the th annual ieee symposium on foundations of computer science october nelson and c g nelson and d c a simplifier based on efficient decision algorithms proceedings of the fifth acm symposium on principles of programming languages january and wegman m and m wegman linear unification to appear c the computational complexity of some logical theories ph d thesis m i t r decidable pairing functions ph d thesis cornell university r submitted for publication decidable pairing functions s abstract specifications for data types ibm research laboratory an 