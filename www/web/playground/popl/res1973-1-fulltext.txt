strict deterministic parsing extended abstract by matthew m and michael a university of california at berkeley introduction recently strict deterministic grammars and languages have been introduced this family of languages is quite fundamental in the study of the mathematical properties of deterministic languages and in dealing with some classical families of grammars such as lrk and bounded right context grammars these grammars are closely related to lr grammars in fact each strict deterministic grammar is also lr in the present paper we consider the question of how to parse strict deterministic we introduce part of a more general theory called character lrk parsing this actually produces parsers which are to the characteristics of a particular family of grammars we apply the theory to the family of strict deterministic grammars and we get parsers which are as fast as canonical lrk parsers but are substantially smaller they are not necessarily minimal but we any discussion to the sequel the techniques used in the present discussion are quite for instance the study in is ii to our technique the optimization techniques for lrk parsers in do not work in the case k o without modification after modifying those methods for k o it can be shown that our parsers cannot be produced by those techniques this fact has its positive in that our be smaller and its negative aspect in may be delayed the present paper is divided into the present introduction and three sections in the remainder of this introduction some basic definitions of strict deterministic and lrk parsing are given we have tried to follow as much as possible in order to minimize the amount of new material to be the order of the results is the order needed to prove that the characteristic parser works in section iii we apply the theory of section ii to strict deterministic parsing a simple example shows that the new parsers can be smaller than the canonical lr parser research supported by nsf gj the present paper is meant to be an extended abstract and no proofs are included the rest of the introduction is concerned with notational conventions for the technical concepts needed let x be a set a of x is a collection rr x x of nonempty mutually disjoint subsets xi x such that x subsets xi are called blocks of n we write x for the partition induced by an equivalence relation u and a mod m for the equivalence relation induced by a partition n we also need to deal with relations when x and y are sets then any set p cx x y is a relation between x and y le y and we define and if pu for some y x y po xx x e x the diagonal nl p n transitive p u pn the reflexive nj of p and p pp the transitive closure of p next we need the usual concepts definition a contextfree qq g is a tuple grammar a g where v and z are two alphabets xc v letters in z and in n v z are terminals and nonterminals respectively se n and p is a finite relation the set of productions ­ let x and y be sets of words let xy where xy is the concatenation of x and y define xo a where a is jl the null word for each io define x and x io x let x xx and fl denote the empty et if x is a word let as usual we write a a is in p instead of a a e p definition let g u v be a context free grammar we define a relation c vx v as follows for any ab e v a b iff a al and a is in p for some a e n and al a bl e v in particular if al ex or a e x we write al b or a r b respectively any a e v is called a sa the language generated by g is the language lg sw we need the formal concept of a parse let g be a context free and suppose that s o an ex if for each i oi n ail where ai e v xi ez ai e n and pi is in p then is said to be a canonical derivation and o po is said to be canonical parse we often write in this case p in dealing with parsers we also need the idea of a handle definition let g be a context free grammar and let ye v a handle of y is an ordered pair p i where p e p and i such that there exist a e n a b e v and w e z such that i ii p is ab iii i some special terminology is needed for dealing with strings and alphabets for any alphabet v we write va v u a in this notation v let u b e v be two strings then a is a fix suffix of iff a by ya for some gv when y a a is a prefix proper suffix of i for any na on is the prefix suffix of a with length finally we say that a language l cz is if a e l and c e l a denote the length of x which is the number of occurrences of letters in x we define the function on strings inductively by at a and ax for each section i strict deterministic and lrk grammars the strict deterministic grammars and languages were introduced in this family has been studied in its own right and because of its applications to other problems in the parsing of deterministic languages before giving any details we will need the formal definitions of this family of grammars definition let g be a context free and let t be a partition of the set v of terminal and nonterminal letters of g such a partition m is called strict iff z em and for any a a e n and a e v if af a and a a mod it then either i both f a lb l or ii a a definition a context free grammar g is called strict deterministic iff there exists a strict partition m of v a language l is called a strict deterministic language iff l lg for some strict deterministic grammar g example the shown below generates arithmetic expressions the is strict deterministic with respect to it x e t t f s ee e ltl i f t i f e f e a a l e i a many properties of strict deterministic languages have been discovered mention here only one result from we theorem a language is strict if and only if it is deterministic free deterministic and prefix it is our intention to compare strict deterministic with lr parsing to do so we need the formal definition of lrk grammars as we shall see not all definitions of these grammars are equivalent give our definition of lrk grammars definition let ko and g be a reduced context free grammar such that s s recall that b denotes the first letter of a context free grammar is or any a q v we have w for some ub e v and w e e is impossible in g g is lrk iff i for each w w xe z and for each y a a b in v if ii that is has handle a and iii that is has handle a and iv kw kw then v a a b the conclusion in the definition that is v has several clear implications by the definition of equality of ordered pairs we have aa b b and y a thus y c since b from we have a a ax implies bx implies x w the above definition essentially the original definition with this definition does not agree with the definition used in the definition from i is now definition let k lo and g v reduced context free grammar define g x s is a new symbol not in v g is an grammar lrk g is lrk ps be a an au se said to be grammar if the following result summarizes the relationship concepts taken from between these two theorem context free the form let g vx ps be a reduced without any derivations of ss a let kl then g is lrk if and only if g is b let k o if g is then g is lr c there exist grammars which are lr and which are not a simple example of the kind of mentioned in c is the following a characterization of these grammars which are is given in our next result establishes the between strict deterministic languages and lr languages theorem a every reduced strict deterministic grammar is an lr grammar b there are lr grammars which are not strict deterministic c l is an language if and only if l is strict deterministic thus we have adopted the definition of lrk and it has the consequence that there are lr grammars which are not strict it should be mentioned that the reasons for the choice of the definition in are that the full family of lrk languages are obtained for k and that the canonical lr parsing algorithm can be proven to work without modification we shall have to modify the canonical parsing algorithm in the case k o as it does not work correctly in summary the treatment in is consistent for the class of grammars considered the parsing algorithm works this is not the case in here we choose the class of lr grammars used in and parsing algorithm for the full set of grammars section ii characteristic lr parsing in the present section we introduce characteristic lrk parsing this will be done by a chain of definitions most of these parallel the development of lrk parser as presented in that parser is often referred to as the canonical lrk parser we shall briefly comment on the changes as we proceed the main idea is to modify the items required to take into account the special characteristics of the grammars considered in the following section we shall do this for strict deterministic grammars in the future other applications of this theory will be presented in our we shall need the function which computes roughly the first k terminals which are derived from a definition let g v z p s be a reduced context free grammar u e v and let ko x i aw w ex and x as in the canonical theory of lrk parsing we need items definition let g vz p s be a context free grammar and let k for any j e v and a f in p we say that a b u is an lrk item next we present what appears to be a non deterministic algorithm for calculating characteristic sets of items algorithm an a context free grammar a set of items for y method to construct v a a if for some a e v sa p add s a a to v a b if for some a b e n ab e v u ez we have a is in vc a and bb is in p then for all x that x e add b x to j a c if for some a e n fe v u e z we have a in p add a cr u to vi a d repeat b until nothing new can be added to v a to construct il v for for some a if for some a e v a e n xi e v a is in xl u to then b if for some a lie n a b e v u has been placed in and b p then for all x e first add b x to xi c if for some ae n ev we have a d in p add a to va d repeat b until nothing new can be added to xi we have called the algorithm nondeterministic because of the optional addition of items in lc and c in fact we shall specify which items should be added in constructing parsers for certain families of grammars we use the term character because the choices made are determined by the characteristics of the families of grammars it is possible to express the characteristic items as obtained above by a parameterized algorithm but the formalism is it will become clear that for any sequence of choices the resulting algorithm is deterministic it is convenient to use the goto function of definition let g be a context free ko and let ye v for and any v define goto v x next an algorithm is given which computes collections of items context free grammar g and method initially sc is empty place va in sc the set va is initially if a set of items a in sc is a compute for each x e v goto ax if goto ax add goto ax to sc set of items b mark a repeat step until all sets of items in sc are marked next we need the function this function computes all strings of length k whose derivations do not involve replacing a leading variable by a definition let g be a reduced context free grammar and let k lo we say w e for some w e a e v if and only if there exist e v x e x such that i f wx where b for any a en or ii our next task is to associate sets of tables with our sets of items definition let g be a reduced context free grammar and let k lo let sc k be the collection of sets of items computed by algorithm for each a e sc we define t ta the table associated with a as a pair of functions gt defined below moreover let a t the parsing action function is a map from xl into error shift and is defined by cases u p p e p a if for some ble v e v a en we have a b v in a and u e b p if for some e v and p is a where to avoid the we write sc as an abbreviation of subscripts for k t v into the set of tables or r for each x e v a if goto ax b error ax finally let t a it is also important that our tables are consistent in the following sense definition let g be a reduced context free grammar and k then the characteristic lrk tables associated with g k and c are consistent if for every y e v there does not exist a b e n v u v e z u e and distinct items as u and b v in next we must describe the characteristic lrk parser to be used this parser is similar to the same given in it is a deterministic pushdown transducer whose moves depend on the lrk tables used the differences between our model and are that the tables are different and the reduce moves have been modified to allow for the parsing of lr grammars since our parser is a variation of that in we shall describe it informally an id of the parser is written as z y p where i z e z is the contents of the as yet input ii ye is the contents of the pushdown store the top is assumed to be at the right iii p e p is the contents of the output tape the initial id is defined to be z to a we are now ready to give a more formal description of our characteristic lrk parser definition let g be a reduced context free grammar and k let tc be a set of consistent characteristic lrk tables the characteristic lrk parser jc jk is defined to be the device described above h se move function is defined as follows suppose j is in id z yt p and if shift then where since this device is a pushdown like automation with id z y pi its move will depend on the state the letters of z ie k z and the symbol of the push down store a if z a then z yt p ­ error b if z a then we write z z e z bl if then az yt p bz if then az yt p p that is in step b we shift the next character of the input onto the stack and also stack the table determined by the symbol and the input if reduce p where p a in this case we wish to pop symbols we do so let t be the table we more precisely define yt where lg a if t to a a then z yt parse p and we print pp as the b if case a does not hold and gt then zy p c if neither case a nor case b holds then z z a pp in case c we remove the coded form of b replace it by its immediate ancestor a compute the next table needed and add p to the output if finally transitive error then let ia be the closure of ­ p the parser we have just defined is an extension of the canonical lrk parser and this relation will now be explored it is necessary to establish certain facts about canonical lrk parsing before the characteristic lrk parser can be proven to work an important notion is the following type of string definition let g be a context free grammar g if there exist v that s w and y is a prefix of c it is also necessary to mention a simpler but equivalent concept definition let g v be a context free grammar y e v is a valid prefix of g if there e a e e that thus a valid prefix is a prefix which includes all of a in canonical lrk parsing we must be concerned with some special items definition let g be a context free grammar and ko for e v wu e z a en ar u is a valid lrk item for cy if there exists a derivation in g s w w with now we need to have the canonical lrk tables these can be obtained by algorithm to the case in which no additional items are added in steps lc and c let call this the co case then we write us instead of the following theorem tells us what algorithm computes in this special case theorem let g be a reduced context free grammar y e v and k an item is in after application with no additions in steps lc and c if and only if that item is valid for y notation in the canonical case we write s next we relate s to prefixes theorem let g v be a context free grammar and let ko s y is a prefix of g moreover algorithm computes s the following result is also important in the canonical theory theorem let g be a context free grammar and ko g is lrk if and only if each of the elements of the canonical collection of sets of lrk items is consistent with our notational conventions we write t ta i a e s as the canonical collection of lrk tables of g then our characteristic co parser j reduces to a canonical lrk parser for g the parser j is almost the conventional parser except that it has been extended to handle the case k o properly and the grammar has not been augmented there is still the issue as to whether it works correctly that issue is the subject of the next two theorems theorem let g lrk grammar k lo and let j be the canonical lrk parser for g then for all xe lg x and print out pt when o the previous theorem asserts that the parser correctly all x e lg for those x lg we must see that j stops and moreover stops in the error id theorem let g lrk grammar ko and let j be the canonical lrk parser for g then for all x lg x to a il ww since the proof that characteristic lrk parsing works depends on the corresponding proof for canonical we can now prove that characteristic lrk parsing works this requires a relates the two approaches lemma let g grammar k and y e v be a context free a s y b if we xl t and tc tw iii for all if w can prove that characteristic parsing works lrk theorem let g v be an lrk grammar k and let jc be a characteristic lrk parser for g then for all xc lg a x tj accept and out p where qx corollary let g lrk grammar ko and let k be a characteristic lrk parser for g then for x e z x t a il if and only if x e lg next we must deal with the case when x lg theorem let g lrk grammar ko without a rules and let j be a characteristic lrk parser for g with consistent tables suppose that for some x e x we have x lg then x t a ia section iii strict deterministic parsing we now indicate a new parsing algorithm for strict deterministic grammars an algorithm was given in for this purpose that algorithm is a rather straightforward method that the basic definition of strict deterministic grammars the present algorithm is uniformly in that it is faster and results in smaller parsers notational convention let g v s be a context free grammar with strict partition n if ae n we write a i a a our first definition is of a suitable prefix of a block of a partition definition let grammar and let a suitable prefix ke v prefix of b g be a context free v v we say that ye v is of v if there exist some ain is a the next definition is designed to describe the contents of the pushdown during parsing definition let g be a strict deterministic grammar with partition r we may say y e v is a valid strict deterministic prefix of g if there exist yl yn e v a an en n y prefix of a o where ao s ya is a suitable prefix of yn is a suitable prefix of the first result begins to relate valid strict deterministic prefixes to prefixes lemma let g be a strict deterministic grammar and let m be a strict partition on v if y e v is a valid prefix g then y is a valid strict deterministic prefix of g of our next result is a generalization theorem of of theorem let g be a strict deterministic grammar and let n be a strict partition on v let n ai a for n ai e v for then in p we cannot z i n o ai al a a when n o an n an a a the sequence reduces to a a our next theorem is somewhat technical and says that in some sense a representation of a string into suitable prefixes is unique up to as this result is somewhat related to the theorem of but the present context is more general theorem deterministic partition on suppose there let g v s be a strict grammar and let it be a strict v exist yy e v l n where yn and y y y such that is a suitable prefix of o where o ya is a suitable prefix of yn is a of an and ya is a suitable prefix of t where y is a of then yi y for lin ai a y a for li nl for nl m and our special algorithm tor parsing strict deterministic grammars requires items also definition let g be a strict deterministic grammar with strict partition m on v then for a e n af b e v a lb in p a b a c il is strict item for a if there exist yl yn e v l n o such that y n and is a suitable prefix of ao where t is a suitable prefix of xl is a prefix of is a suitable prefix of en with note that the second component is always a the following result relates valid strict deterministic items to valid lr items lemma let g be a strict deterministic grammar and n be a strict partition of v if for some a e n a e v a a is a valid lr item for ub then it is also a valid strict deterministic for c next we relate valid strict deterministic prefixes with strict deterministic items lemma let g be a strict deterministic grammar for every valid strict prefix in g there corresponds least one strict deterministic item at the next result shows that the strict deterministic tables are consistent theorem let g v s be a strict deterministic grammar and let a strict partition on g let a a e n y e v e and let y be a valid strict prefix of g then if a b a is a valid strict deterministic item for y and if a a is a valid strict item for y then aa and i bt partition on g let al e v a a e n then for c a valid strict deterministic prefix of g if a valid strict deterministic item for c a b i a is a valid strict deterministic a item for then a a a a for any y e v we wish to construct the set of valid strict deterministic items for y this is accomplished by the following algorithm algorithm qq g a strict deterministic grammar with strict partition n and y e v where y xl xn xi e v for some no and i n wy method to construct wa a if for some ae v sa add s a a to wa is in p b if for some a be n a fe v we have a is in wa and b b is in p add b l a to w a c if for some ae and we have aa is in p add a a a to wa d go back to b unless nothing new can be added to wa to construct wx xi xj ev for a if for some v ae n xj ev aa xi a is in wx then add to xi b if for aa bb a and b wx xi some a a f ev if has been placed in wx xi p add b a to c if for some a b v if a has been placed in xi and f u bb a has been placed in wx yi and for some c b c is in p add c a to wx xi d go back to b unless nothing new can be added to wx xi we hope that the formalism of the preceding algorithm does not the basic idea which is quite simple the idea is that when an item b a is to be added fn the phase of the canonical algorithm one adds all items b y a where b z b mod next we must show that the algorithm works theorem let g be a strict deterministic grammar and let y e v be a valid strict deterministic prefix of g then an item is in wy after application of our algorithm if and only if that item is a valid strict deterministic item for y since the sets of items obtained from are another instance of characteristic lrk items we may of the associated tables and the associated family c it is important to note that the tables that one gets by using algorithm are all consistent theorem if g is a strict deterministic then the ables obtained from the items by algorithm are consistent now we can invoke the theorems of section ii to prove that the characteristic parser which is based on the valid strict deterministic items actually works let us call this characteristic parser f theorem let g be a strict deterministic grammar and let m be a strict partition on v then in j c the strict deterministic characteristic for g under partition cm x e lg x to a l qr and the parser out p when sf and for all x lg x t a i error thus we now have a parser for strict deterministic grammars to see how good a parser this is we can easily compare it with the standard lr parser for the same grammar it is easy to see that both parsers take the same time to process a string in lg as far as space is concerned our parser is smaller the theorem gives very precise information theorem let g be a strict deterministic grammar under strict partition it xi the size of our parser c j is number suitable prefixes of xi now that we know the size of our new parser it must be compared to the size of an lr parser for a strict deterministic grammar g the following concept is needed definition let g v s be a reduced strict deterministic grammar define the deterministic weak partition c on v as cb we define the sets of r n o as follows a variable if and only if there exist where ae n y e v is in y yn e v such that i a ii is a suitable prefix of ao where ao s ya is a suitable prefix of al and iii is a suitable prefix of is a suitable prefix of an note that c is a weak partition of v that a family of subsets of v such that every s v is in some subset of t also note that s is always a subset of any such t the deterministic weak partition t may be effectively computed our next result relates weak partitions with strict partitions lemma let g be a strict deterministic and let t be the deterministic partition on v if m is any strict partition on v then c refines m that is if a u a mod m then a a mod now we can give an exact formula for the size of the canonical lr parser of any strict deterministic grammar theorem deterministic deterministic the canonical let g u be a strict grammar and let t be the weak partition on v the size lr parser of j co is y go bt suitable prefixes of b number of corollary let g be a strict deterministic and it any strict partition on g if j c is the parser of g of theorems and we have and j co is as in theorem the previous corollary our assertion that the present parsers are an improvement over canonical lr parsers theorem is not true for arbitrary lr grammars for that case one only the bounds given in has let us consider an example which compares the size of our strict deterministic parser with the lr parser let where z ii n v and p contains s for lin i ai for lin the minimal strict partition on g is n z s a an the number of tables in the parser is by theorem nm we can calculate the size of the lr parser by theorem and one finds that the size is nm thus the difference in size is mn we shall now fix m n and exhibit the parsers the grammar is now s s aa al al al az a az and m x s az first we list the items for the strict deterministic parser the items were items that were added to the canonical lr tables strict deterministic items s o al s az a a al s al al a a a a a a a l a s al s aa a al al a a a a al al a ii a a a aa o s aa by our formula the corresponding tables are as follows where ti f al a a s o shift shift reduce reduce reduce shift shift reduce e shift o t the strict d g z for the sake of comparison we generate the canonical lr parser s o s aa s al al al s aa a a a s s aa a aa a al al al a aa a lo a a a a al al al we have found sets which corresponds to the classic lr parser is shown below f al al a s t l t shift reduce s h reduce s h e shift o shift reduce reduce o the canonical lr we wish to thank sl graham for a number of references aho av and unman jd the theory of of g translating and compiling i and ii prentice hall new and aho av and unman jd optimization of lrk parsers journal of computer and system sciences vol pp el n extending the lr parsing technique to some grammars technical report tr computer science laboratory princeton university rw journal of the association for computing machinery vol pp mm characteristic lrk parsing phd thesis in preparation computer science department university of california mm and ma of lr languages annual symposium on switch ing and automata theory graham sl extended precedence bounded right context languages and deterministic languages proceedings of symposium on switching and automata theory pp graham sl precedence languages and bounded right context languages phd thesis and report cs department of science stanford university ma and im strict deterministic grammars journal of computer and systems science vol pp ma and im on the parsing of deterministic languages submitted for publication ma and im strict deterministic languages siam journal of computing vol pp r lrk technical report a des germany r an of the set of states of the minimal in automata languages and m editor north holland co amsterdam pp knuth de on the translation of languages from left to right information and control ol pp 