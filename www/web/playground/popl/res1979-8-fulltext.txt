process logic preliminary v r pratt report m lt abstract we discuss problems arising in reasoning about processes using the modal constructs after throughout during and earlier work established decidability of the theory whose language included only the first two of these along with program connective i and here we give a complete axiomatization for useful combinations of the other modalities we also indicate how such lead to deterministic exponential time upper bounds on the complexity of decision procedures for these languages it remains an open problem how to completely the combination of modalities during and preserves introduction this paper treats a language for discussing processes the importance of developing such logics can be readily the fact that only describe the halting states of the computation the logic we propose here as close as seems to us possible to the approach while still not depending on the computation to halt while we make no claim to the of the constructs in our language we do feel that any language for reasoning about processes must include at least the constructs we treat here the problems presented by these connective alone have been challenging to say the least and we are to be able to report complete for each of the connective taken in any combination except with in the absence of terms hence the propositional case and program connective the problem of combining with remains open and we are now at a point in our work where we would be most to see a treatment of this combination from any source the mathematical framework within which we carry this work is that of dynamic a framework first described in though not under that name the purpose of dynamic logic is to make possible a mathematical account of some of the of imperative programs that have appeared during the past most notably those of hoare and dijkstra system of algorithmic logic has a similar objective to ours but with scope ignoring the issue of nondeterminism raised in logic the language extends propositional dynamic logic to treat processes may not halt yet about which one may have useful things to say the extension is accomplished by the single modality construct of dynamic logic written in earlier papers and here for with the other modalities of this paper and expressing after a happens p must hold with other modalities expressing concepts that deal with the computation of programs throughout p during p and a preserves p these four modalities were first described in where two of them were completely and also shown to have a decidable theory using a technique quite different from that used in to show the decidability of the theory of j to use our terminology here we continue this work for the remaining modalities which present difficulties not encountered in the results in we give complete of useful fragments of the language indicate how these may be converted into decision methods for validity of algorithms it is to consider algorithms as not particularly useful however in the context of a where the user can structure his proof in such a way that each step is small an algorithm for verifying the soundness of a step may present a quite useful approach to verifying steps the more traditional approach of verifying that the form of a step of an argument matches one of a small set of forms such as is very being permitted to use any sound inference involving say a connective in effect gives the user access to of inference rules in such a context improvement of an upper bound from two exponential to one may make all the difference between having a checker little better than a checker and one that gives the user considerable flexibility the exponential upper bound will only be in practice when the proof construction ends up considering a substantial fraction of the exponentially many possible theories sets of formulas arising during execution of our method using the approach outlined in our experience with the sort of problems arise in practical program verification suggests that fewer than a few theories should arise even in very complicated steps of the argument provided the arguments are not so abbreviated that even a good would have difficulty following them related work parikh has given a decision method for a very general language he calls l quantification over states and and our language that such a powerful language should have a decidable theory is however his method is not elementary recursive making the result of academic interest only there also remains the problem of completely l pnueli has described a logic having the same concern as ours for processes in the absence of an adequate model theory for logic we are unable to make comparisons between the systems it seems likely however that the model theory behind our system would be adequate for logic though the details remain to be out h a recent talk h pnueli has proposed such a model of the language the expressions of the language are partitioned into a set of formulae and a set x of we let pq range over formulas ab over programs the symbols of the language propositional variables p car program variables a b c program connective i iterate and and modalities j w and j the syntax of the language is as follows no difficulty arises with infinite computations but the possibility exists that a program may all of which we shall consider to be the same thing a failing computation is indicated by a whose final state is a a distinguished state used only for this purpose any occurrence of a in a must be as the final state a halting is one whose final state is not a for convenience we write wa as w a fact is a pair wp drawn from wx expressing the notion that formula p is true in state w we let m range over sets of facts for any fixed m usually determined by context we write wp for w p and mp for the extension of formula p an action is a pair drawn from expressing the notion that program a can bring about s for example if we had assignment statements then xx could bring about any uv w where in state v x is larger than in u and otherwise v is the same as u and in state w y equals x and otherwise w is the same as v we let range over sets of actions for any fixed r analogously to r we write ra for the extension of formula a following we define a structure to be a triple we from in using t for where they use p for relations the meaning of the symbols of the language will be expressed in terms of constraints on m and r as described in the next two sections semantics of formulae p dp p p tip ab c b a p the semantics of formulas are captured in the following conditions on r we obtain other logical connective as abbreviations namely for pq for and pq for p we will use the syntactic convention of having the following operators have increasing x with the four modalities ail being at the same level and being right associative and also being right associative thus is is is wn is ph d e semantics we a set w of states w has two functions it offers places for formulas to be true in facts and it offers places for programs to between actions a s is a rj wl iff wl iff wk iff wp a sm iff thus the meaning of n is that p is true in w just when p is not true in w and for a it is that is true in w just when p and q are both true in w common to all four modality conditions is the connection between the state w in which the formulas truth is being established and the initial state of all relevant s in a namely that so must be w also common is the quantification over such namely universal quantification the differences are as follows sequence of states drawn from w ms or just m when the s is the length of s when m is infinite has no final state we write w for the set of all over w and let st range over st over sets of context s every s that halts satisfies p when it halts every s satisfies p throughout ignoring a every s satisfies p at some state in s in every s once p is true it true in states of s the need arises to distinguish between corresponding to halting versus computations on the choice of sets could be taken to be simply their union however we would like to capture the idea that a computation does not execute a failing test when it has an alternative command to execute a similar concern motivated the use of computation trees in we say that s is a of any beginning where sk is permitted to be either final or a set s is a prefix set of when no in s is a prefix of any other in s the of s is the largest prefix set contained in s it be obtained merely by removing all that are prefixes of other then is taken to be the prefix closure of the difference between and affects only l the following formulas may be seen to be valid when m is infinite or sm to sj is defined and satisfies s t for for the latter holding only for finite my intuitively sy is the obtained by the last state of s with the first state of t when they are the same then st the fusion of s and is cs and st is defined t we take i to be that is the set of al we take s the of s to be we say that s is total when for every w in w it contains some s with so w semantics of agents we may now impose constraints on r ra is total rb ra p a i w i a thus means the program having the choice of about any that either a or b can bring about b about a of a then follows it up with one of b a about of a repeatedly often p does nothing if p holds otherwise it into satisfiability a formula p is satisfiable when there exists a structure r a model of p for which mp is nonempty we will sometimes distinguish a state of wp as the base state of the model we call p valid when p is not satisfiable axiomatization one might well want to take some or all of the above as axioms the problem arises of giving a complete axiomatization of the valid formulas of the language w a j n i in a complete axiomatization for j and ill is given we do not as yet have a complete axiomatization for all the connective taken in particular we do not as yet know how to the combination of and all other combinations are understood however and we outline proofs of completeness here the reader is probably more to axiom systems which manipulate formulas in this paper as in we will arrive at our completeness results via systems that manipulate sets of formulas which we shall call theories we shall ourselves to finite theories here such an approach first suggested by makes it rather easier to make the connection between model theory and proof theory that is needed for proofs of soundness and completeness a theory is satisfiable has a model when the base state of some structure the model of the theory satisfies all the formulas of the theory the sequent for a theory also due to collects some or all the negative formulas formulas of the form p on the right of an arrow and their thus a sequent notation for the theory be if in this example q to be s then would also be a sequent notation for this theory the advantage of sequent notation lies not so much in its as in making a theory look more like an implication thus the above theory being unsatisfiable is the same thing as d being valid for this reason we shall use valid sequent as a for unsatisfiable theory call a model a theory a counterexample to the corresponding sequent thus p r is a valid sequent because the corresponding theory is unsatisfiable as the reader may verify pr has as a counterexample a model with one state in which are all false sequent between it is this of implication that makes the notation helpful in keeping track of the connection proof theory and model theory systems consider the theory where are arbitrary formulas if this theory is unsatisfiable then so is r in this instance the converse is also true similarly if rr and r r are both unsatisfiable so is and the theory is unsatisfiable regardless of what r and r are such derivations of one unsatisfiable theory the conclusion from zero or more other unsatisfiable theories the premises are the concern of systems of inference ru the examples above can be described by the following rules pq p q pp the first rule says that from any theory containing one can infer a theory in which is replaced by the two formulas p and q the second says that from a theory containing p and another which is the same theory with p replaced by q one can infer the same theory with p replaced by the last says that one can always infer a theory containing a formula and its negation all three of these rules preserve of theories or what amounts to the same thing validity of sequents such rules are called sound a system is sound when all its rules are sound so far we have been able to all questions of satisfiability using a structure with one state a more complicated inference is from r infer r if r is unsatisfiable r must be true in every state of every structure so must is unsatisfiable adding rr cannot make this theory any more satisfiable this leads to the following rule pj lp a feature of this rule is that we have placed the rules premise p inside set this is to indicate that we do not mean that the inference may start from any theory containing p but rather that the inference must be from the singleton theory p the inferred theory must contain ip and may contain any other formulas as well here is a more complicated rule using this notation every the content of this rule is that if in every state implies q then in each state u from which of a leads only to states satisfying pl and and k every of a leads only to states satisfying pk then every of a from u leads only to states satisfying q the reader should verify that this rule suggested to the author by r parikh is sound proofs a is a rooted tree whose vertices are with seq such that every sequent follows from its predecessors by some rule the predecessors of a vertex v are further from the root than v and adjacent to v the proof proves the sequent the root the height of a proof is the length of the longest path from the root to a leaf it should be clear that only valid sequents can be proved in a sound system a system is complete when every valid sequent can be proved a proof of p may be interpreted as a proof of the formula p which is the application of systems that makes them of interest system p the following system will supply all our propositional needs n and a are the only logical con we use adding rules to for other connective is straightforward but unnecessary if we consider to be just an abbreviation of etc pl pp p p p pq p p q the following rule is needed if one to distinguish between a antecedent and the corresponding as did and as as we did in in this paper we have chosen not to make such a making this rule redundant p the soundness of this system should be obvious for completeness we may give a method of constructing a proof of a valid sequent this style of completeness proof will be repeated later with the more complex systems if the sequent contains only propositional variables and their then to be valid it must contain both p and p for some variable p hence it may be proved immediately via rule pl if it contains it may be proved via p from a sequent whose validity should be evident and which contains two fewer logical connective if it contains then it may be proved via p from a clearly valid sequent containing one less logical connective if it then it may be proved via p from two valid seq each having fewer logical connective in all cases the importance of the premises being valid is that one can continue constructing the proof the importance of their having fewer connective is that it guarantees that the proof construction must eventually halt system we now give a system for the language a j and that we omit reflects our to j in combination with that we omit the program connective i reflects the difficulty of even program variables alone in fact dealing with program connective is a relatively trivial matter in this system wp is an abbreviation for the rules consist of those of system p together with n r dr r f monotonic pk q theorem system j is sound proof rule is simply a cut rule whose content is that if and are both valid so is s the rule up only to emphasize that we do not need the rule other than when tip is present the three occurrences of ap would preserve both soundness and completeness of the system rule says that when the truth of the ps and qs the truth of r in every state then if the ps hold at the end of every of a leaving state u and the qs hold throughout every of a leaving state u r holds at the end of every of a leaving state u rule says that if the truth value of q depends on the truth values of in states satisfying pi pj then if hold throughout every of a leaving state u and are preserved in every of a leaving state u then q is preserved in every of a leaving state u all these should be evident theorem system is complete proof we show that any valid sequent s follows from valid sequents via some rule the cases are i apply s contains only if s is valid p must ii one of p c s one of pp applies iii dp s pp s rule applies if pp are present rule still applies but only trivially in that the only new sequent it could produce would be one that immediately to rule pi iv d s s valid without it mark it as irrelevant in this way it will no longer be a consideration in deciding which of these six cases s under with the exception of case iii which should take note of it in deciding whether pp f s v d s has a counterexample k with base state u if rule does not apply then its premise has a counterexample k with base state u which we may assume without loss of generality has an almost set of states from k with only a in common combine k and k and add the u and the fact to form a single structure a the reader may verify that the resulting structure is a to s our assumption that s was valid vi dr f s has a k if rule does not apply then the truth of q in states satisfying pi p j does not on there exist kk in whose respective base states uu q is respectively false and true yet such that pi pj are true in uu if pi is true in u for then pi also true in u now pk be assumed be all in u hence k k k may be combined to form one structure with u and fact added along the lines of case v this may similarly be verified to be a counterexample to s we have thus far established that the first step of constructing a proof may be carried out for a valid sequent containing or we now need to show that this proof construction terminates of pp and rule jl nontrivial applications and marking of irrelevant formulas clearly cannot proceed hence eventually the proof construction must terminate or one of must become applicable define the of a sequent to be the maximum number of modalities encountered on any path from root to leaf in any formula of the it is apparent that and reduce the of sequents furthermore pp jl and marking do not increase hence eventually our proof construction must reduce to zero at which the rules of system to be relevant al modalities having a system from the completeness of system we can infer the completeness of the following system rules from from from p pq infer p infer p infer p q axioms in this system it is possible to derive all the rules of systems p f a tedious but straightforward exercise we leave more version of this paper program dealing with program in system is simplified by the existence of proofs of completeness of systems for the language a j i the reader may verify the soundness of each of the following formulas bp a pq a bp a the adequacy of these axioms follows from the fact that each equivalence shows how to eliminate a program connective in the case of the axiom for with j what we have is a way of from thereby reducing the problem to with j the axiom for with may be considered to assert the equivalence of pq with true only is not for the following axioms for are adequate though this fact is far from p p a together with the axiomatization of the language a j these formulas when taken as axioms a complete axiomatization of the language a j i this can be proved along the lines of using the appropriate versions of the above equivalences for example the equivalence for becomes a this rule is used analogously to the other rules we have encountered in showing how to construct a proof backwards from the sequent to be proved we now j and turn our attention to l system q p lp p pw dp theorem system is complete proof we proceed as for the proof of completeness of system let s be a valid sequent it suffices to show how to infer s from valid sequents the cases are i ii as for the corresponding cases with system iii if rule to pi s there is a counterexample k to does not apply there must be a counterexample if rule does not apply there must be k a counterexample ki to pi for each in s combine these counterexamples adding and fact the us being the base states of the corresponding ks to form a counterexample to s the validity of s iv c s there is a counterexample to which we shall not use if rule does not apply there is a counterexample k for one that makes q false if rule does not apply there is a counterexample ki to for each in s combine the counterexamples and add uu and fact to yield a counterexample to s choosing the final state to be a avoids any in s termination is easier to prove for system than for system every rule reduces the total number of connective in the sequent program connective and although system turned out to be a little more tractable than system adding program connective to the language n a j is more difficult to the problem is the lack of a satisfactory equivalence for the formula dp a is not valid and replacing a by v does not make it valid we would like to see an axiomatization of a j j with or without i and there is a stronger language which we do know how using the modality unlike all other modalities which take one program and one formula to yield a formula this one takes two formulas and is written its informal meaning is either p holds during x or a doesnt halt or q holds when a halts entire meaning applies to each of a as the following formal definition shows to iff we now have as obvious dp dp q a q v pa f it can be seen from this that the difficulty with has been moreover the last axiom permits us to treat as an abbreviation it remains to verify that we can completely the language a j in order to establish that we have a complete axiomatization of a j i system m p pq pi premise clear notice the mixed premise rule where one is type the soundness of the system should be theorem system li is complete proof the proof construction techniques carry over unchanged to this system rule j should not be applied when p is already f when is present in s s is not valid without it but s does not follow from valid sequents using any rule it becomes possible to construct a counterexample as before the method of construction of the counterexample should be evident from the rules for the following appears to be useful we have not yet established whether it suffices for a complete axiomatization though if it did the proof then to follow along the same lines as that of q a due to d p pr decision methods our present concern with axiom is motivated for us primarily by the problem of giving useful decision methods although we have also used them to demonstrate completeness of less useful speaking systems this application is of interest to us as in the decision method of is not useful in practice because it always achieves its worst case of two exponential the algorithm described in from observing that not all valid formulas required the extensive search of the method of simply to demonstrate validity because quite short proofs of their validity we whether there was a systematic way to find such proofs and this led to our development of the decision method of this algorithm has since been improved in its worst case performance to one exponential systems were a constant source of in developing such algorithms and the techniques of converting a system into a useful decision method carry over to the systems described here in particular the technique for constructing a tableau described in leads to all of the considered here algorithms for in outline the possibility of such fast algorithms depends on the fact that all the proof construction methods described here produce theories drawn from a set of formulas of cardinality m proportional to the length of the formula to be tested for satisfiability at most nl distinct such theories will therefore ever be considered it is possible to deduce satisfiability from a single graph having those theories for vertices in time a polynomial in the size of the graph constructing a graph with all nl theories is not always necessary just those theories that arise in to construct a proof need be considered while it is possible to produce examples that force consideration of exponentially many theories with our method such do not seem to arise in practice in the context of verifying steps in a proof of program correctness open problems the following problems have already been mentioned we collect them here for ease of reference l u a the has not our notice the existence of more has our search for an adequate system a j i are axioms above complete if they are it is likely that the technique used in in the absence of will carry over here l a g h a an introduction to algorithmic in the theory of programs in math found of sc eds and center di e w a of programming prenticehall fischer mj and r e propositional modal logic of programs proc th ann acm symp on theory computing may of g math tr into logical deduction in the papers of g d and vr pratt nondeterminism in logics of programs proc ann acm symp on principles of programming languages jan hoare c a r an axiomatic basis for computer programming cacm s parikh r a completeness result for pdl symposium on mathematical foundations of computer sept science parikh r second order process logic report mit april internal pnueli a the temporal logic of programs th ieee symposium on foundations of computer science s oct pnueli a correctness of concurrent programs the temporal logic approach unpublished talk conference on the logic of computer programming ny june pratt v r considerations on logic proc th ann ieee symp foundations of comp sci on pratt v r propositional dynamic theory of computing a practical decision method for logic proc th ann acm symp on san diego may pratt vr a optimal method for reasoning about action m i t oct a formalized sci sci no algorithmic languages math vol s k a completeness logic of programs preliminary report a oct theorem in the modal notices of the 