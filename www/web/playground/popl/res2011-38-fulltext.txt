robin milner ­ verification languages and concurrency andrew d gordon microsoft research robert harper carnegie mellon university john intel alan jeffrey bell peter sewell university of cambridge a special session of the symposium to robin milner the session features by robert harper carnegie mellon university john intel and alan jeffrey bell and is by andrew d gordon microsoft research and peter sewell university of cambridge robin milner was in he was at college and up to college cambridge in in between his national service was with the in after university he was first a school and then in london as a programmer at an early computer in he took a job as at university and started research on the never studied for a phd in he moved to to become a research assistant he was by in in oxford on domain theory during this time he about work on verification and to know hoare and started trying to verify programs after manna during a visit to carnegie mellon university he a job with john at stanford in there he built the theorem proving system stanford which he would later substantially refine with the addition of a metalanguage ml for constructing proofs the interesting thing there was they were just looking for who would do something practical scott had recently produced a kind of logic of domains a logic of the hierarchy of domains a typetheoretic hierarchy this to me to be something which was practical that is what out of since i was so interested in ­ or i would say ­ proof this to be a for a logic it really took off for me when i that i could write down the syntax of a programming language in this logic and i could write the semantics in the logic an with robin milner by martin september moving to robin at the university of edinburgh ­ as a from during this period he the the laboratory for foundations of com copyright is held by the popl january ­ austin texas usa acm science and as its first this was also a time of scientific for which he a of the society and received the acm a m turing for three distinct and complete the of logic of computable functions probably the first based yet practical tool for machine proof construction ml the first language to include polymorphic type inference together with a typesafe mechanism ccs a general theory of concurrency in addition he formulated and strongly advanced full abstraction the study of the relationship between operational and denotational semantics citation for acm a m turing we can now add to this list of his contributions refinement of ccs into the calculus a more general theory of concurrency that takes into account dynamic generation and communication of names and also bigraphs a theory of computing he returned to to the first established in computer science at the university of cambridge he was a member of the computer laboratory from as head of the laboratory ­ during the last year of his life he his edinburgh connection as a all three of his work have been verification is now feasible for realistic systems software and for deep mathematics concept of tactics is widely used in interactive provers such as hol and coq as is his idea of relying on a typesafe programming language to restrict the part of a prover that must be trusted to a small kernel ml itself is also still in use and has had a big impact on other programming languages robin gave us practical parametric polymorphism now incorporated into most modern typed programming languages and a push towards strongly typed languages and the use of operational semantics for language definition and metatheory his theories of concurrency much work on verification the theory of sequential computable functions of church and turing and are being applied to modelling processes from to systems robin gave us the word bisimulation while always taking care to credit david park with the idea and more generally a clear understanding of the role of observational and coinductive proof methods he has left the subject a collection of elegant and tools in mathematics and in software robin and in and within of each other in march they are by two children and two robin was always an and and an and he will be greatly 