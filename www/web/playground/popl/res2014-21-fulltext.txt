the essence of reynolds carnegie mellon university peter w ohearn university of abstract john reynolds was a of programming languages research in this paper we pay to the his ideas and his influence categories and subject descriptors d programming languages f logics and meanings of programs keywords polymorphic calculus separation logic parametricity data abstraction subtypes defunctionalization logic and typing possible world semantics introduction john reynolds on april he will be for his fundamental and research on programming languages semantics specifications language design logics and proof methodology john was on june and was raised in illinois a of he university as an in his phd thesis in theoretical university was surface properties of matter in later years with typical and john would describe this one of his in computer science as a big program designed to produce an computation of an in a bad approximation at john met a allen and they in john is by and their sons and matthew after with a interest in computer science john as a at national laboratory while at he developed a compiler for compilers called and he designed the language in he left for moving to university as a of computer and information science after a long and period at he moved to carnegie mellon university in where he until at the end of over the years he and positions at many and including stanford university inria and college university of london university of london edinburgh university university and microsoft research cambridge he permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for components of this work owned by others than the authors must be abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission andor a fee request permissions from popl january ­ san diego ca usa copyright is held by the publication to acm acm with many researchers and was highly valued as a he was an at and spanning the world john was an active member of the association for computing machinery acm for many years including a long stint as editor of the communications of the acm and the journal of the acm he an acm in and received the acm sigplan programming language in he was a member of ifip working group programming methodology which he in and ifip working group formal language definition in which he from to the computer society the in he was a of an d sc degree by university of london in july carnegie mellon university with the scott distinguished research in april in november acm sigplan memory by renaming their dissertation to the john c reynolds dissertation john the foundations for the work of many of us in the programming languages research community the influence of his more widely known work ­ on parametric polymorphism and on separation logic ­ is very plain to see for example by the pages of recent popl what is less well known and perhaps even more is the number of contributions made by john across a broad range all of which display his characteristic deep insight in and what he was like as a and there is no better place to start than with a simple of these results main works early works while working at john interested in both programming languages and in automatic theorem proving he produced an early he then produced a very significant yet somewhat paper · automatic computation of data set definitions ifip in modern terminology this paper computed an overapproximation of the kinds of data structures reached in a program where the data was constructed using operations car cdr etc there is a associated with this paper years later people were automatic shape analysis based on separation logic as represented in tools such as space and infer reynolds to proofs of full functional correctness beyond the reach of program analysis leading to many arguments and discussions in his position john to be at the limitations of the techniques in these tools even though he could see and the it turns out that the people working on these tools were not aware that automatic computation of data set definitions could be regarded as an early shape analysis you can find at a when your just happens to be the source of the works the position you are this is typical again and again during his reynolds was seen to be years of the field and it a kind of that john had there years or more before else once when a talk on types reynolds the on one of the ideas he explained and the said that the idea was taken from a reynolds paper at this point a round of on the of reynolds being years of john in the next important paper was in the direction of other early interest theorem proving · systems and the algebraic structure of atomic formulas machine intelligence pages this paper developed an algorithm which solves the dual problem to unification it the most specific common generalization of two terms this is a fundamental idea that forms part of the basis of the field of inductive logic programming these two papers which are probably not so well known in the pl community would already have given a very but it was now that john entered a kind of of period an extended run of high and extreme quality period there are so many papers here that we simply list them with brief comments a kind of annotated · a simple language based on the principle of completeness and the reference concept cacm this was an untyped callbyvalue programming language whose way of imperative features and functions is similar to the core of ml this paper the acm annual programming systems and languages paper · definitional interpreters for higherorder programming languages proceedings th national acm conference august pp in higherorder and symbolic computation pp this paper showed how to transform a series of interpreters eventually ending up with a compiler this work to continuations as a tool in language implementation and introduced the concept of defunctionalization where functions in the interpreter are replaced by their representations such as closures in more concrete data structures · on the relation between direct and continuation semantics icalp at the time the power of continuations was apparent and john the simple question of whether continuation and direct semantics can be connected by a precise theorem the question was nontrivial because as the abstract states the of the problem is the construction of a relation which must be a fixedpoint of a relational functor the paper introduced a general technique for constructing relations between domains · towards a theory of type structure symposium on programming introduced the polymorphic calculus the first type theory of polymorphic functions work on poly as well as his later work on parametricity the designs of in java and in net wadler and andrew kennedy personal communication the polymorphic lambda calculus is as well as powerful it consists of just five constructs yet it can define many of the data structures of central in programming like many scientific this calculus was twice in this case by reynolds and by the girard who called it system f in this paper john not for the last time to make a model of the polymorphic calculus this was difficult because of the impredicative circular nature of the calculus which made it seem to be he almost there but stated we must admit a serious in our chain of argument later john said that the was one of the most phrases he had ever included in a paper · userdefined types and procedural data structures as complementary approaches to data abstraction new directions in algorithmic languages this paper was of its time in the essential difference between objectoriented approaches to data abstraction and abstract data types a topic often later essentially procedural approaches are easy to extend because their data representations are provide for binary and operations because they are and the of one are the limitations of the other · syntactic control of interference popl a original paper on using what is now called an affine calculus to control aliasing and other forms of interference between program parts possibly the first use of type theory to control resources years before the of linear logic · programming with transition diagrams programming methodology a collection of papers by members of ifip ed d springerverlag pp ­ in this paper reynolds goes against the how programs with goto statements can be easy to prove correct · reasoning about arrays cacm ­ an early application of separation principles for reasoning about arrays using a notation called partition diagrams that reynolds for this purpose the material is also covered in chapter of of programming a technique that reynolds often used for motivating this material was to ask to write a binary search program and let them discover for themselves how it is hard it is to get it right with technique it is almost impossible to get it wrong · using category theory to design implicit conversions and generic operators compiler generation a generalization of algebras algebras is defined and used to account for generic operators applied to different types in the presence of implicit conversions between types ensuring that the order of applying the conversions does not affect the final result · the essence of algol algorithmic languages ed j w de and j c van northholland pp in this highly and oft paper reynolds that algol should be considered as an applied callbyname calculus and described algol to illustrate a number of principles of language design that he proposed as essence this paper made significant technical that go far beyond algol explained how types effects naturally in the callbyname design and consequently full laws are valid this idea was in the use of types to control effects in haskell which used similar principles to functions from effects and beyond monoid of commands to monads a sort of parameterized commands possible world functor category semantics of local state which is still technical developments at the edge of programming language theory as in recent popl papers of ahmed dreyer birkedal and others on reasoning about local state with kripke relations typed calculus with subtypes which has been used significantly in the foundations of objectoriented languages and elsewhere typically john did not make a big deal about any of these specific contributions or single out any one for special attention it was as if they were tools used in his larger points about language design but what tools one in how he to so many significant and original ideas into a single paper · the of programming prentice hall international series in computer science prentice hall isbn pp and algol and its specification logic tools and notions for program construction ed d cambridge university press pp in this and paper ideas about program proving are developing there is a significant focus on abstraction and refinement in and on controlling interference as an aid to modular reasoning · types abstraction and parametric polymorphism ifip perhaps the only computer science paper in which the phrase features in a involving and the best article ever written on the point and purpose of types exploring the idea that types enforce abstraction written as a to the at the time in which types only classify values and rule out errors while the conventional view one aspect reynolds was that there was more to types and makes a case technically the paper is for formalizing the abstraction theorem and for introducing relational parametricity · polymorphism is not settheoretic semantics of data types reynolds had been that the polymorphic calculus should have a settheoretic model because types are not limited to computation and he set out to find a settheoretic model instead he up showing that there actually is no nontrivial model of the polymorphic calculus in which types denote sets and where the function type denotes the collection of all settheoretic functions from one type to another interestingly this was done assuming classical set theory and observations of moggi pitts and others later demonstrated the possibility of settheoretic models assuming intuitionistic set theory there are many models of the polymorphic calculus although he did not question the truth of his result john was never satisfied with the models of polymorphism that have been obtained and upon he would become it was as if he there was something missing in his own insight if not that of others in this period john producing work but not at quite the same as in the period some of the key works are the following · syntactic control of interference part icalp · on functors expressible in the polymorphic typed lambda calculus inf comput with plotkin · using functor categories to generate intermediate code popl · theories of programming languages cambridge university press isbn pp · from algol to polymorphic linear lambdacalculus j acm with ohearn the jacm paper connected up his on algol and on polymorphism more on that in the next section the popl paper is for connecting category theory to compilation john used category theory and semantics in general as a tool for design of a language or a compiler and not just for study this is up in his remark programming language should be the of programming languages not their john c reynolds separation logic in at age john produced one of his most papers · intuitionistic reasoning about shared mutable data structure in computer science proceedings of the symposium in of hoare this paper like a from the blue in it john showed proofs of programs that were almost as simple as those for programs the key insight was how linked data structures could be described using inductive definitions and a connective which we now call the separating conjunction one could fold and unfold the definitions and work in isolation on components of the separating conjunction paper built on an early work of burstall some techniques for proving programs which alter data structures machine intelligence reynolds extended it by using a form of logic which turned out to be an instance of the logic of ohearn and after a popl paper by ohearn and this connection there was one further paper · local reasoning about programs that alter data structures csl with ohearn and yang this paper described the canonical semantics and proof theory of separation logic as it is now understood it used a boolean rather than an intuitionistic form of logic and it for a lowlevel programming language closer to assembly whereas the paper was formulated for a language without memory deallocation or address arithmetic although reynolds was a of ideas he never regarded the positions he adopted as cast in indeed it might seem that john reynolds one of the leading of safe programming languages would advance a logic for an unsafe language in his work here was the of algol and the polymorphic calculus working with a language with dirty features but with program logic safety could be achieved reynolds proved a number of lowlevel programs to test his ideas such as for a form of doublylinked lists which save space by storing the of forward and back pointers rather than each separately and the inductive definition in separation logic and the proof out surprisingly easily next john an survey article covering these papers and others on separation logic up to · separation logic a logic for shared mutable data structures lics this paper was associated with an talk by john at the lics conference at the end of his talk john started to try to sum up where we had to and then at the and simply said a growing number of people are working on this formalism and well we think were on to something john reynolds was and not to and coming from this was a strong statement the next section will provide more context for this work on separation logic later papers after the of separation logic john produced several further papers · separation and information hiding popl with ohearn and yang · local reasoning about a copying garbage collector popl with birkedal and · towards a semantics for shared variable concurrency foundations of software technology and theoretical computer science lncs pp · syntactic control of interference for separation logic popl with the paper on semantics up an old of his by idea that the understanding of concurrent programs should not be dependent on a particular to time his final paper with together two of his major contributions state and abstraction the issues of state and abstraction were central in research especially during the time of his period state is of the kind represented in imperative algollike languages with algol w being his this preference was because the effects are in the base types of expressions and commands and the function types remain pure subject to full equivalence thus algollike meant an integration of imperative and functional aspects preserving both of their fundamental properties without any abstraction is represented in strong type systems semantically based as well as in how the store is viewed in algollike languages reynolds saw connections between these two views of abstraction and to build so that the ideas could be carried back and between them in addition to the abstraction inherent in the store reynolds also additional modularity in the management of store going beyond what is representable in conventional language designs this led to new proposals for type systems logics and semantic frameworks as represented in syntactic control of interference separation logic and semantics period coincides with his of a course on programming at the material he developed for this course is published as the of programming it contains a of information about · what imperative programming means · how to develop imperative programs · the type structure of imperative programs · reasoning principles both practical eg arrays and abstract eg specification logic and · how to reason about data abstraction or information hiding his analysis of this material gave rise to a series of papers the most of which are the essence of algol and algol and its specification logic however the most novel material of the the chapter on data representation structuring is not directly represented in these papers so one must go to the source to understand these ideas however we believe that these insights papers on types a theory of type structure and types abstraction and parametric polymorphism these are the we of reynolds always thought of the store in imperative programs as an abstract type whose full information is hidden from the program soon after defining the polymorphic lambda calculus in he on a project a polymorphic model of algol we have a copy of his notes which contain these key equations s s s s bw s × s bw s × s we see here that reynolds of the algol types for statements sta and procedures w w as type constructors and these type constructors are parametrized by a type variable s representing the set of states for a store this is in marked contrast to denotational semantics where the store is fixed and global here the store is a type variable in essence this means that the program can work with whatever type of store we supply as long as it has all the required data variables an intuitive interpretation of parametric polymorphism immediately implies that the program will act the same way for all these different types of stores this model of algol could not be finished in because it did not satisfy the equivalence of algol in reynolds moved from type constructors to functors in the essence of algol model which depend on the of morphisms between store types we that he was never fully satisfied with functors in he returned to the original equations in the joint paper with ohearn from algol to polymorphic linear lambda calculus where these equations appear again adapted to the linear context so what to the problem with equivalence it is still open linearity rules out the obvious counterexamples and enough evidence is to show that the model is even if it does not satisfy equivalence this is one direction of the we expect that the other direction was implicit in the chapter on data representation structuring contains programming examples where graph algorithms are treated including algorithm for strong components as a challenge problem by knuth for program correctness using data refinement an initial algorithm expressed in terms of sets of nodes and edges is refined to an algorithm involving concrete data objects within algol w the relationship between the two sets of data structures is captured using a technique that reynolds for this purpose general invariants which are true throughout a particular region of the program as opposed to invariants that are true at particular points in the program these ideas back across the we notice that the programs are operating on two independent state spaces sa and sc and the general invariants are relations r sa × sc that are maintained by the two slices of the program without any observable difference here we see the principles of relational parametricity taking shape not in an abstract theoretical setting but in concrete programming examples involving data abstraction the essence of relational parametricity is that if a program term is parametrized by a type variable or an opaque type then the information about the type is hidden from the term and the term behaves the same way for all possible instantiations of the type vari able hence if we consider two instantiations a and a of the type variable and allow ourselves the freedom to substitute particular elements x a by elements x a then the results produced by the program term should be the same modulo the substitution we have made what kind of substitutions can one make in early years of modern mathematics isomorphisms ie were allowed after the of category theory homomorphisms ie were allowed but if a and a are two arbitrary instantiations there is no intuitive reason why the allowed should be asymmetric hence logical relations ie are the only intuitively answer to the question for programming applications they form the basis of relational parametricity in a good theory of parametricity both isomorphism parametricity and homomorphism parametricity natural transformations become special cases of relational parametricity while we mentioned program terms above for the sake of explanation these ideas are by no means limited to programs any mathematical formula any algorithmic process or any mechanism in which output are derived from input whether discrete or continuous can have the notion of being parametrized by types and if so we might expect it to be parametric bob makes a beginning with this line of in the present popl he shows that the of physical system as required for the theorem in classical can be viewed as instances of parametricity this should the way for applications of the relational parametricity principle in mathematics and science with the formulation of relational parametricity the is completed the reasoning principles of data representation structuring are translated into the parametricity principles of the polymorphic lambda calculus via the translation of the notes or the paper polymorphic linear lambda calculus imperative programs are complicated for a variety of reasons and those complications do not go away just by defining semantics reynolds repeatedly to create tools to control and the complications a key idea was that the state should not be treated as a monolithic entity rather it should be partitioned into separate portions and distributed to different parts of the program to operate on independently in syntactic control of interference he proposed a system of rules that allows program terms to be viewed as portions of the store based on their free identifiers and only terms that own separate portions can be combined using the procedure mechanism this is roughly the meaning of saying that a procedure and its argument should not interfere specification logic involves notions of noninterference which were investigated in a novel semantics of analysis of specification logic comput and in phd thesis in reasoning about arrays reynolds applied the separation principle to arrays a powerful notation called partition diagrams to document such separation all of this was perhaps only setting the stage for the powerful separation logic for dynamic data structures to come in which as a surprising de force even to those of us that had thought about the problem and all the technical tools that reynolds ohearn and others in solving it separation logic represents a in that ownership what can be accessed and separation of the state are not static spanning all states but can vary from state to state in his paper intuitionistic reasoning about shared mutable data structure reynolds introduced the separating conjunction which allows the preconditions of operations to break the state into components reynolds demonstrated that this allowed for simple proofs of programs and more enabled a new spatial dimension to modular reasoning which that of abstraction in a sense the preconditions not only specify what is true in a state but also describe the structure of the store mainly the heap this idea has consequences and it is extremely that reynolds made this step forward at the time he did because he the for new ideas the of the new ideas was the resolution of the frame problem by ohearn in local reasoning about programs that alter data structures by reynolds with ohearn and yang preconditions specify not merely what portion of the store can be used from a program point but only that portion of the store that will be so used this has the consequence that specifications need to talk about only the portion of the store actually manipulated by program fragments referred to as their footprint a general rule called the frame rule allows such local specifications to be extended to larger contexts as needed and using the separating conjunction this from smaller to larger contexts can be described extremely directly and separation logic as represented in the local reasoning paper and finally in lics paper can be seen as the of his of making the structure of the store explicit in programming language theories be they semantics or logics in the end separation logic derives much of its power from the between dynamic separation and and the from local specifications to larger contexts by can be seen as a logical analogue of idea of expanding a store shape in his work on possible world semantics going back as far as the notes mentioned above but with the separating conjunction providing a more flexible form of extension separation logic is a research direction with a in building automated tools and solving a variety of reasoning problems that have been as too difficult or impossible for a long time it represents a major force for the problem of concurrent software to be run on processors conclusion john reynolds was one of the greatest programming research has seen what was his secret what was the essence of reynolds certainly he had great and he also had great determination but his way of working and interacting with others what was important to was special and to those who john reynolds was as pure a as you would ever meet and this is what made tick it was not academic or or it was just the ideas it was not for john to talk to about their own ideas for at a time not only or one but three four or five this was especially true for and but also held for more people as well he would set everything else aside his own time included in his to get to the of the matter these were sessions of deep and discussion and while john would argue and ask questions he always to be and with he was to it was as if programming and programming languages held waiting to be and he to see them john reynolds just to understand and he to understand a lot in the course of his he discovered numerous deep ideas of value ­ defunctionalization theory of subtypes possible world semantics of state polymorphic calculus relational parametricity separation logic and others ­ and we are much the richer for it 