battery transition systems the center thomas a henzinger abstract the analysis of the energy consumption of software is an important goal for quantitative formal methods current methods using weighted transition systems or energy games model the energy source as an ideal resource whose status is characterized by one number namely the amount of remaining energy real however exhibit behaviors that can substantially from an ideal energy resource based on a of a standard continuous battery model we introduce battery transition systems in this model a battery is viewed as consisting of two parts ­ the and the any or is applied to the over time the energy from each to the other battery transition systems are infinite state systems that being not fall into no decidable class that is known to us nonetheless we are able to prove that the regular modelchecking problem is decidable for battery transition systems we also present a case study on the verification of control programs for categories and subject descriptors theory of computation logic verification by model checking general terms theory verification keywords battery transition systems energy model checking introduction systems with limited energy resources such as mobile devices or have become in life in there is a growing attention to the formal modeling of such systems and the analysis of their behavior these systems are commonly modeled as weighted transition systems where the states of the transition system represent the system configurations the transitions represent the possible operations and the weights on the transitions correspond to the energy consumed negative value or added positive value during the operation in recent literature for this work was supported in part by the science rise rigorous systems engineering and by the advanced grant quantitative reactive modeling permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page for components of this work owned by others than acm must be abstracting with credit is permitted to copy otherwise or republish to post on servers or to redistribute to lists requires prior specific permission andor a fee request permissions from popl january ­ san diego ca usa copyright c acm example weighted transition systems have been analyzed with respect to various problems such as emptiness problem starting from a given initial energy can a specific configuration be reached while keeping the energy positive in all intermediate steps and bu¨chi emptiness problem can a specific configuration be visited repeatedly while keeping the energy positive in all these works the is in particular it is assumed that its status can be completely characterized by one number namely the amount of remaining energy however physical systems with energy restrictions often use which are far from an source one such behavior of a battery behavior is the recovery effect where the available energy at certain times is smaller than the sum of consumed and intuitively the recovery effect is a result of the fact that energy is consumed from the edge of the battery while the total is across the entire battery when the consumption is high additional time may be required until the from the inside of the battery to its edge during which period there is no available energy possibly failing the required operation the recovery effect is often in our usage of systems for example mobile ­ a might due to an out of power condition but then become live again after an idle period we aim to formally model such energy systems with resources we define a battery transition system where the system is viewed as a weighted transition system as is standard however the semantics of its possible traces is specified differently to capture behaviors the semantics we specify for correspond to a of a wellknown battery model ­ the battery model there are various battery models in the literature various and among which the model is a good choice for the purpose of properly analyzing systems with the recovery effect we elaborate in section on various battery models and explain the derivation of semantics from the model semantics the status of the battery in a is a pair x y where x represents the available available for immediate usage and y the bound internal in a battery that is not immediately available during each transition some amount of between x and y the weight of the transition say w affects only x in the current step the rate depends on the difference between x and y and on two constants of the battery a width constant c r with c and a constant k r with k c c formally making a transition of weight w from a battery status x y results in the battery status x y where x x k · x c y c w and y y k · x c y c the value k · x c y c represents the amount of between x and y the above transition is legal if the available x remains positive after the transition the constant k the width constant c b s s s s b s s s s figure in the battery system b a trace reaching the state s must make a cycle with total negative energy in b an illegal trace must make different choices at different in s the mathematical properties of a are shown to be different from those of a transition system where only the value of xy is considered as illustrated in fig considering the system b as a system where only the total energy should remain positive s is directly reachable from s and the cycle s s s s is completely useless on the other hand b as a in order to go from state s to s a legal trace must first take the cycle through s and s though decreasing the total energy the cycle increases the available energy allowing the transition to s furthermore it is known that a system even with admits an illegal trace if and only if it admits a illegal trace always making the same choice at each state however an illegal trace in the system b of fig must make different choices at different in state s theorem model checking we consider the bu¨chi and emptiness problems for a these problems are central to the model checking of systems with no fairness constraints weak fairness constraints and strong fairness constraints respectively as are systems it is natural to ask if they fall into a known tractable class of infinite state systems for exam ple standard modelchecking algorithms exist for transition systems eg channel systems automata etc where a ordering can be defined on the states of the infinite systems and this ordering is compatible with the transition relation of the system however for we can show that the infinite sequence of is decreasing with respect to any or that is compatible with transitions intuitively this sequence contains battery that have equal total but strictly decreasing available this implies that modelchecking al from the domain of transitions systems do not apply directly to we solve the emptiness problem by building a forward reachability tree along the lines of the tree for petri nets there using the properties of petri nets the tree is shown to be a finite summarization of all reachable states despite there being reachable states a is not yet we are able to generate a finite summary tree having all the reachability data by proving the following key observations once the total energy in a status is the problem can be reduced to simple energy reachability considering some characteristic properties of battery allows to define a total ordering between having the same total energy and re a cycle whose total energy sums to makes the battery status converge to a limit value independent of the initial status despite the fact that the above ordering is not wellfounded ie there may be infinite chains the last observation lets us take limits of infinite chains while constructing the reachability tree in systems extending the finite automaton emptiness algorithm to a bu¨chi emptiness algorithm is straightforward ­ checking whether there is a reachable bu¨chi state that has a cycle back to itself such that the sum of weights on the cycle is nonnegative in a such a simple solution does not work ­ a cycle that does not decrease the total energy might still fail the process after finitely many iterations as the available can slightly decreases on every iteration a simple modification cycles that do not decrease both the total and the available is too restrictive as the available may still converge to a positive value we solve the bu¨chi emptiness problem by showing that if there exists an accepted trace there also exists a accepted trace having one of two special forms these forms concern the way that the available changes along the cycle by a analysis of the reachability tree we then solve the question of whether the transition system allows for a trace in one of these special forms the emptiness problem is solved similarly by using a small extension of the bu¨chi emptiness algorithm we show that our algorithms for the bu¨chi and emptiness problems are in pspace with respect to the number of states in the transition system and a unary representation of the weights if weights are represented in binary or if the battery constants are arbitrarily small and represented in binary the space complexity grows exponentially case study robot control we examine a robot control in an environment we present a small programming language for and define quantitative semantics for written in that language we solve the regular modelchecking problem for programs written in this language using our results on battery transition systems we demonstrate the of standard quantitative verification techniques where the battery is viewed as an ideal energy resource ­ they might for example that the robot can reach some target locations while taking into account the behavior of its battery it cannot related work are involved devices various different accordingly there are many different works considering these aspects for example scheduling the load among several optimizing the lifetime of a battery with respect to the cycle effect analyzing the effects and more to the best of our knowledge this is the first work to formally analyze an energy system with a energy source previous work has either considered ideal energy sources for example or provides approximations for the battery lifetime with respect to various scenarios for example our emptiness algorithm follows the approach taken in the tree which can be used in general for transition systems however our systems are not and a naive application of this technique does not termination of algorithms we use ideas from systems and additional analysis of to produce a terminating version of these algorithms in particular we also use an analysis of to get an algorithm for deciding bu¨chi and properties this kind of analysis is not possible for general systems battery models we provide a short description of how are modeled in the literature and explain how we derive our formal model of a battery a battery consists of one or more cells each of which contain a negative a positive and a between them during and move through the external circuit while reaction produces or energy inside the battery for example during in positive ions move from the to the while the reverse occurs during see fig v ions li figure of a battery initial state after full recovery center of battery center of battery center of battery figure of along the battery following a and a recovery phase of all types have a recovery effect meaning that the reaction inside the battery does not keep up with the rate of the external activity internally in the of the the becomes smaller than their in the interior of the battery when the battery has low load for some time the ions have enough time to to the and recovery takes place see fig the wellknown of this is that a battery might be empty after some usage but then becomes after an idle period there are many battery models modeling various aspects of a real battery the most accurate ones model the in detail though highly accurate they require configuration of many usually around parameters making them difficult to analyze another approach taken is to model the properties of the battery using sources and other elements these approximate battery behavior well but their modeling of the available battery is a third class consists of the models that describe the battery at a high abstraction level modeling only its major properties by means of a few equations the models of this class are the battery model and the model a detailed description of the various models can be found in the possibly simplest yet useful model that handles the recovery effect is the battery model while being originally developed for to model both battery and battery its modeling was found to be a good approximation even for more modern such as the battery in it was shown that c c hy y hx x p current bound available figure battery model is a first order approximation of the model which was designed for in addition their experimental results show that it has up to from the accurate models we concentrate on a available and hence adopt the model in this model the battery is distributed over two the denoted x of width c and the denoted y of width c see fig the external current gets only from the whereas from the flow to the when the reverse process occurs are added directly to the from there they flows to the the flows between the through a with a fixed p the parameter p has the dimension time and the rate at which the can flow between the two this rate is also proportional to the height difference between the two if the heights are given by hx xc and hy y c and the current load by wt the in the over time behaves according to the following system of differential equations dx dt wt hy dy dt hy with initial conditions x c · c and y c · c where c is the total battery the battery cannot supply when there is no left in the we are interested in calculating the battery status along a transition system thus consider the equations for fixed time steps we get the following equations xi yi where xi and yi are the values of x and y before the time step i respectively wi is the total load on the battery at time step i and k p × length of a time step the smaller the time steps are the smaller k is and the more accurate the is we further need to ensure that the does not intro behaviours in eq if hx hy and wt is the relation hx hy keeps holding we should ensure this in the discrete model ie if and wi then it cannot be that formalizing the above requirement we have xi c xi c c yi c yi c c hence k c c therefore the parameter k is acceptable if k cc leading to the conclusion that k c c battery transition systems we incorporate the discrete battery model from equation into a weighted transition system the system consists of finitely many and weighted transitions between them where the weights denote the amount of energy at each operation weighted transition systems and battery semantics a transition system is a tuple s s where s is a possibly infinite set of control states s s is the initial control state and s × s is a set of transitions a weighted transition system is a tuple s s s where s s is a transition system and z is a weight function labeling transitions with integer weights a battery transition system or battery system for short is a tuple b s s c k where s s is a with a finite number of control states ie s c r is a width constant with c and k r is a constant with k c c semantics given a b s c k a battery status x y r represents the current configuration of the battery intuitively the values x and y represent the in the and the of the battery respectively see figure if the current battery status is x y on a transition of weight w we define the change in the battery status using a function post r × z r letting the battery status after the transition x y y w here we follow the standard convention of energy transition systems and consider a positive resp negative weight as adding resp a to resp from the battery in matrix notation we have the following y w ab · x y w where ab k c k c k c k c the matrix ab is called the matrix note that the post function indeed follows equation except for the change in the sign of w the values k c and k c denote the heights hx and hy of the two and hence we get that x x k · hx hy w and y y k · hx hy we notation by defining ww inductively as w w where each wi z given an initial battery status t r the semantics of a b s s c k is given by a possibly infinite transition system e e where e s × r is the set of states e × e is the transition relation and e s t is the initial state · we call each s t e an extended state with s s being its control state and t r being its battery status · we have s t s t if and only if w t and s s s s w we write s t s t instead of s t s t a weight w and by extension a transition with weight w is feasible from battery status t if w r namely if w is a valid battery status similarly a sequence of the weights in a weighted transition system are often rational numbers rather than integers all of our results equally hold for rational weights by simply all weights by the product of all all of our results equally hold for the case that the element values should be nonnegative rather than strictly positive but the proofs are simpler in the strictly positive case weights ww wn is feasible from t iff w is feasible from t and each wi is feasible from w wi extending the we call every t r r infeasible the traces of a b denoted b are given by infinite or finite paths of the form s ts t where s s and t t and for every i we have si ti si ti the corresponding control trace is given by control ss and the set of control traces by b control b we say that a finite or infinite sequence of control states ss is feasible from a battery status t iff the weight sequence ww is feasible from t where si si si si wi energy feasibility we define an alternate set of semantics to the classical notion of systems we say that x y r is if x y as for the term feasible we further extend the notion of as follows a sequence of weights w wn is from x y iff y w wi is for all i n and a sequence of control states ss is from x y iff ww is from x y where wi si si characteristic functions for mathematical simplicity we follow the approach taken in and use an alternate representation for battery we represent x y using two other numbers denoting it e d where e and d are defined by the following energy and functions · e y x y and · d y x y · c c intuitively e is the total energy in the battery and d is the difference between the heights of the two by the factor c the mathematical simplicity in using energy and from the fact that they correspond to the of the matrix given e and d the battery status t x y is uniquely determined x ce cd and y e x hence we use the notations e d and x y proposition for any battery status e d and w n we have that d w e w · d w where k c k c the above proposition is a translation of the post function to the e d notation intuitively the energy is increased by the weight w as expected while the difference in the heights is first reduced by a constant factor of and then increased due to the w added to the first column the factor turns out to be the central parameter of the battery a key role in how behaves the following lemma formalizes the intuition that the y cannot get empty before the x does lemma suppose battery status x y is feasible and let y w x y we have e d x y is feasible iff x and equivalently if and only if ce cd proof the only if implication is obvious as for the if we have x k c x k c y w and y k c x k c y assuming x and y it easily follows that y hence x y is infeasible if and only if x or equivalently if x ce cd model checking the problems we consider ask for the existence of a control trace in the semantics of a b with control states s given an initial battery status t such that for some given objective set s s specifically we consider the following objective sets · emptiness if there exists a feasible trace to a set of target control states formally given target control states t s we have ss i si t ie is the set of control traces which visit t at least once · emptiness if there exists a feasible trace which a set of target bu¨chi states infinitely often formally given bu¨chi control states l s we have ss ji j si l · emptiness the objective is specified by a set of pairs ri gi where each pair consists of a set ri s of request control states and a set gi of grant control states the objective if there exists a feasible trace in the system such that for every pair either gi is visited infinitely often or ri is visited finitely often formally given a set of pairs p r g r g rm gm we have ss i m pq p sq gi pq p sq ri we call the traces which satisfy the bu¨chi and conditions accepting bu¨chi and traces battery vs transition systems due to the recovery effect behave differently from a transition systems nevertheless in the domain where the energy in the battery is high they do behave similarly this lets us solve problems related to initial credit referred to as unknown initial credit by reducing them to the system problems different behavior the b of fig demonstrates a key difference from a system ­ the total energy in the initial state is while a transition of weight cannot be taken since the available energy is only yet taking the cycle through states s and s reduces the total energy but allows the transition after the cycle the battery status is which becomes following a transition we formalize the difference in the theorem below it is known that if an system contains an infeasible trace it con a infeasible trace a trace is one where a control state is always followed by the same control state however an infeasible trace in the system b of fig must make different choices at different in state s theorem a battery transition system may have feasible resp infeasible traces without having any feasible resp infeasible traces proof consider the b in figure there is a trace for reaching s as well as an infinite trace however both traces make choices at different in s analogously an infeasible trace in the system b of figure must make different choices at s we prove below the claim for b analogous arguments and can be made with respect to b the only nondeterminism in b is in state s allowing transitions to states s and s a trace that first chooses s is legal since the transition is feasible from the initial status after which there are only transitions the other mem option of always choosing s is also legal let x y be the battery status when first reaching s it can be shown that the first few cycles s s s s are feasible after which the battery status will be x y such that x x and y y by the monotonicity of the post function it follows that the cycle can be repeated forever on the other hand first choosing s and then choosing s makes an illegal trace the battery status when returning to s is which changes to after the transition high energy domain and unknown initial credit problems in energy systems one often considers problems if there is some initial energy that allows a task it is clear that every control state of a battery system can be reached at least once if there is a path leading to it and enough initial energy to start with this is formalized in the following lemma which will also serve us in theorem and in section lemma consider a b s s k c there exist constants i for every i n such that for every feasible extended state s e d with e i every weight sequence ww wi of length i is feasible from s e d proof we define the constants inductively as follows a if i and b i max i w w c other here w s s we prove the theorem by induction when i the weight sequence is empty and there is nothing to prove for the induction case assume that we have shown the result up to i let d w e d from proposition we get that e e w and d d w if e d is feasible and e i we can apply the induction hypothesis on the weight sequence w wi to prove the result we show these facts below · we have e e w i w i w w as w w we have that e i · further we have that ce cd ce cw cd cw or equivalently ce cd ce w as e d is feasible by proposition ce cd further e i w c using these we get ce cd w w by lemma e d is feasible the proof the following theorem states that the emptiness problems for battery systems reduce to the corresponding problems for energy systems if the initial energy is large enough theorem let b s s k c be a w s s and t l and r g rn gn be a set of target states a set of bu¨chi states and a set of pairs respectively there exist constants mr s mb s w s and ms s s w s w s such that for any extended state s e d if e mr resp e mb and e ms a feasible accepting resp bu¨chi and trace starting from s e d exists iff an accepting resp bu¨chi and trace exists proof of theorem in all three parts the existence of an energy feasible trace is directly implied by the existence of a feasible trace therefore we only deal with showing that the existence of an energy feasible trace implies the existence of a feasible trace the first part emptiness follows directly from lemma if there exists a path from s to the target set t there exists a path of length at most s taking mr s is sufficient to give us the result for the second part bu¨chi emptiness the existence of an energy feasible trace implies that there exists a reachable cycle which a bu¨chi state and has nonnegative total weight it can be shown that the length of such a cycle can be bounded by s w s now if e s s w s we can show using lemma that there is a feasible path from s e d to some s e d where s is on the cycle and e s w s now the cycle is feasible from s e d and further on returning to s the energy is at least e as the total weight of the cycle is nonnegative using such reasoning it is easy to see that the cycle is repeatedly feasible from s e d hence a value of mb s s w s is sufficient the proof for the third part is very similar to the proof of the second part except for the bound on the length of the cycle a straightforward consequence of the above theorem is that the unknown initial credit problems for are decidable furthermore using the above theorem it is easy to show that these problems are equivalent to the corresponding problems which can be solved in polynomial time corollary given a b and a bu¨chi or condition the problem of whether there is an initial battery status e d such that there exists a feasible trace in b satisfying the condition is decidable in polynomial time the reachability tree our algorithms for solving the emptiness problems are based on representing the infinite tree of all the possible traces in the in a finite tree that summarizes all required information the construction of the tree uses a constant ­ exploration from states whose energy is above the constant is as they can be further handled by a reduction to a system using theorem hence the tree summarizes reachability and we denote it as in theorem the value of the constant depends on the problem to be solved we describe how we construct the tree taking the constant as a parameter we start with some basic about a total order among battery of equal energy then we present the cycle saturation lemma which helps summarize unbounded iterations of cycles in a finite manner feasibility order for battery the following lemma shows that there exists a total order on the set of battery with the same energy such that every weight sequence feasible from a lower battery status is also feasible from a higher battery status lemma given two battery e d and e d with d d every weight sequence ww wn feasible from e d is also feasible from e d furthermore if d w wn e d and d w wn e d we have d d proof we prove the result by induction for the base case we let the weight sequence be of length ie w from proposition we know that d w e w d w and d w e w d w hence d d w and d d w as d d we get that d w d w and d d now assume that e w d w is feasible by lemma we get that w as d d we have ce w cd w and ce w cd this gives us that e w d is feasible hence the proof for the base case now assume that the required result holds for every weight sequence of length n applying the induction hypothesis on the battery e w d w and e w d w and the weight sequence w wn gives us the required result by lemma above we define a partial order on the set of battery as follows e d e d if e e and d d in which case we say that e d subsumes e d we extend the partial order to extended states with both control states and battery by letting s e d s e d if s s and e d e d lemma can now be as follows if s e d s e d every control path feasible from s e d is also feasible from s e d saturation we formalize below the key observation that energy cycles can be finitely summarized an infinite run along such a cycle to a fixed battery status moreover the in the limit is independent of the initial status lemma saturation let w wn be a sequence of weights such that n i wi and let t t be a sequence of tuples in r such that ti w wn we have the following the sequence t t say to t e d in other words m n t tm where denotes the maximum absolute component in a vector we have i n t ti t or i n t ti t in the latter case if w wn is feasible from t it is feasible from each ti proof let ti ei di obviously e by repeated ap of proposition on the weights ww wn start ing with ti we have di di · n n p wp · np hence for all i n di d · i q l · where l n p wp · np from this it follows that the sequence di to d q l · l · n further i di d · l · q i d · l · d · l · q di d · l · di n · l n d di n · d d since n is positive it follows that di is or not than di based on whether d d or not if d d we get d d d or equivalently t t t similarly if d d we get d d d or equivalently t t t the feasibility of w wn from each ti follows from lemma and ti t we denote the limit d as wn ie wn n · n p wp · np note that this does not depend on the initial battery status t we extend the definition of the function to battery as d ww wn e wn constructing the tree for generating a finite tree with all the relevant bounded energy reachability information we explore the feasible states and transitions starting from the initial state however extended states with are not explored further and if an extended state q that has an ancestor q with the same control state and the same energy but possibly a different is reached we check the feasibility order ie if q q or q q if q q we stop exploration from q otherwise we this energy cycle from q to q ie calculate the fixed battery status t to which an infinite run on that cycle will converge to see lemma then we replace the battery status in q with the maximum between battery status in q and t the procedure algorithm computes the reachability tree given a b an initial battery status t and an energy bound m it is a rooted tree where each node is labelled with an extended state during the procedures execution each node in the tree is either open in or closed and exploration will only continue from open nodes in addition each node contains a boolean field star marking whether its label is a result of saturation initially the root of is labelled with the initial extended state s t and the root node is added to the set of in each step one open node is and removed from the set of let s e d by default we append to children labelled by all feasible successors of s e d we call this an exploration step if one of the following holds we do not perform the exploration step · in case the energy ie e of is greater than the given bound m we stop exploration from it · in case an ancestor ancestor with label s e d of has the same control state and energy as if e d e d we stop exploration from if e d e d we i delete all the descendants of ancestor and ii replace the battery status in the label of ancestor with the maximum between e d and the saturation of e d where d is the cycle saturation of the the weight sequence from ancestor to note that if the weight sequence from ancestor to is infeasible from e d which can happen if there is a saturation of another cycle between the ancestor and we replace e d by e d and not the maximum when no open nodes are left the procedure stops and returns we prove in a series of the properties of the procedure and of the returned tree termination we prove that algorithm terminates for every input by showing a bound on both the number of possible nodes in and the number of node in an execution the latter bound follows from i every deletion event strictly increases a value and ii the number of possible values that a can get in a deletion event is bounded note that this is in contradiction to the unbounded number of that may occur in a trace of the b lemma algorithm terminates on all inputs proof termination follows from a bound on both the number of possible nodes in and the number of node in an execution the number of nodes in a tree depends on the of the nodes and the length of the branches the of every node in algorithm computing the reachability tree require battery system b s s k c initial battery status t energy bound m s t false while do pick and remove from s e d if we found a good cycle that cycle if has an ancestor ancestor with label s e d then if d d then s control state sequence in node labels from ancestor to w wn s ss s sn s if ww wn is feasible from e d and wn d then s e wn true else there was another cycle saturation between ancestor and e d descendants of ancestor ancestor all descendants of ancestor continue if d d there is no further exploration from the current node else explore one step further for all s s do if d s s is feasible then new child of s d s s false if d s s m then return is bounded by the number of states in the b as for the branches the control state and energy of each node in a path is unique except for the leaf giving a bound of s × m to the length of a path the bound on the number of follows from i every deletion event strictly increases a value and ii the number of possible values that a can get in a deletion event is bounded note that this is in contradiction to the unbounded number of that may occur in a trace of the b consider a event in the execution of algorithm and a new value set to i the new value is either wn or d set in line or line which are in the scope of if wn d d or if d d respectively while the old value is d ii the new value is uniquely determined by the following · the value of wn where w wn is the sequence of weights from ancestor to or · the label of the last saturated ie node between ancestor and and the suffix wi wn of w wn corresponding to the segment from the last node to otherwise in the first case resulting from line the new value only depends on w wn which in turn is determined by ss in the second case resulting from line let si ei di be the label of the last node by lemma ei di only depends on the sequence of weights in a simple cycle of the b thus may take a bounded number of possible values the new value is then calculated by di wi wn which only depends on ei di and the sequence wi wn correctness we now prove that is a summarization of all extended states reachable through states of let be the set of extended states reachable from the initial state of the b through paths containing only extended states of energy less than m in the below we prove the following · soundness for every node node in and for all there is an extended state q such that q and the difference between the of q and is smaller than · completeness for every extended state q there exists a node node in such that q lemma soundness for every node node with label s e d encountered in an execution of algorithm and there exists an extended state s e d reachable from s t with proof the claim can be proved by looking at all the points in the algorithm where a new label is created lines and the claim is trivially true for the initial label of the root assume as induction hypothesis that the claim holds for every label encountered upto the current point of the execution fix saturation let the new label be created during a deletion event in line or line in the case the label of is copied to the label of ancestor the proof follows immediately as we are just copying an existing label otherwise we are taking the value and the proof is based on lemma by the path from ancestor to a sufficient number of times we can get as close as necessary ie within to the limit of the cycle saturation lemma also gives us that every iteration is feasible exploration let s e d be a new node label created in line choosing min ce cd by the induction hypothesis there is a feasible path from s t to s e d with now we have e d d w e w d w and d w e d · letting we get if we prove that e d is feasible we are done as we have shown that the path from s t to s e d followed by the feasible transition from s e d to s e d is a path from s t to s e d as e d is feasible we get that ce cd as we chose that ce cd we get that ce cd ce cd ce cd ce cd ce d ce cd this completes the proof for this case lemma completeness let s e d be an extended state with e m that is reachable from s t through extended states with energy less than m then there exists a node with label s e d in with d d proof we prove the lemma by induction on the length of the path from s t to s e d for paths of length it is trivial as s t is the initial label of the root suppose we have proven the claim for paths upto the length n it is easy to to length n suppose the path of length n ending with s e d is extended to length n by adding s e d the proof has two cases · if the node labelled with s e d is a node then it has a successor labelled s e d with d d which is the required node this follows from lines ­ of algo · if the node labelled with s e d is a leaf node it will have an ancestor labelled s e d with d d this follows from line of algorithm since the latter node is not a leaf we with the previous case and we are done model checking we are now ready to the bu¨chi and emptiness problems for we show that the problems are decidable and give suitable algorithms the algorithms are based on theorem and analysis of the reachability tree as constructed in section emptiness combining the results from the previous section on bounded energy reachability tree and theorem we can obtain a complete algorithm for the emptiness problem in a battery system given a b with states s an initial battery status t the algorithm works as follows · build a reachability tree s t m where m s · if there is a node label s e d in where s is in the target set t return true · if there is a node label s e d in where e m and some node in the target set is reachable from s e d through an path return true · otherwise return false the correctness proof of the algorithm follows from lemma and the soundness and completeness of the reachability tree lemmas ­ the following theorem states that this algorithm can be implemented in polynomial space in the inputs theorem the emptiness problem for is decidable in polynomial space with respect to the number of control states in the and a unary encoding of weights proof the major part of the algorithm is the construction of the reachability tree for a given energy bound m this tree can contain an exponential number of nodes in m however using standard techniques we can reduce the space com only storing the current branch of the tree being explored the corresponding space is the product of the number of nodes in each branch and the bits required for storing a nodes label by the proof of lemma the length of each branch in the tree is bounded by s × m where s are the states of the given b for the emptiness algorithm we use m s and by the proof of lemma we have m sw w c where w is the maximal negative weight in the with a unary encoding of the constants m is polynomial in the size of the input to complete the proof we need to show that all the labels created in can be represented in polynomial space in the energy bound m a label contains a control state an energy and a there are s m control states and up to m different as for the they are generated by a sequence of operations involving two functions post defined in section and defined in lemma by lemma the value of is independent of the value before saturation hence the at each node in is a result of the last operation in the branch of leading to the node followed by some post operations by the proof of lemma the length of each branch in the tree is polynomial in m up to m applications of post hence it is left to show that the function generates a that can be stored in space polynomial in m and that each application of the post function adds up to b bits where b is polynomial in m by lemma given a sequence ww wn of weights wn n · n p wp · np the space required to store this value is polynomial in the constant and n where n s m in each application of post on a battery status e d and weight w we have by proposition that d w e d with d · d w hence storing d requires up to b bits more than storing d where b is polynomial in the constant and w m and emptiness suppose we are given a b s s k c and a bu¨chi condition given by a set of bu¨chi states b s our approach to bu¨chi emptiness consists of two major parts if there exists a bu¨chi trace containing an extended state with energy more than mb s w s the problem can be reduced to the bu¨chi problem for systems theorem therefore we concentrate on the case where the energy of states is bounded by mb here the key idea is that if the of the extended states are bounded then a has a bu¨chi trace if and only if it has a bu¨chi trace of a special form first we define the notion of an path we call a control trace ss sn if we have p i si si q i si si sp sq for p q intuitively ss sn is if no trace whose control trace is s sn has two extended states with the same control state and equal energy similarly ss sn is an energy cycle if ss sn is and n i si si sn s the following theorem intuitively states that if there exists a bu¨chi trace in b then there exists a bu¨chi trace where the first state of the cycle in the is a bu¨chi state and the cycle in the has one of the two following forms · the cycle is an energy cycle sl such that the sequence sl is feasible from sl with the battery status wn where wi for i n and wn sl or · the cycle is an energy cycle composed of an alternating sequence of paths and energy cycles here every energy cycle in the sequence is unique theorem suppose a b has a bu¨chi trace such that every extended state has energy less than some constant m then b has a bu¨chi trace such that the corresponding control trace has one of the following two forms form where sl is a bu¨chi state and is an energy cycle form hl where h l s and l s sk lr sn sn sn kn and a each li is a distinct energy cycle b each si i is a path c l is a energy cycle and d s is a bu¨chi state we omit the proof of theorem due to lack of space the proof proceeds by taking a witness bu¨chi trace and reducing it to one of the two forms by deleting parts of the trace where the initial and final and control states are the same while the final is less than the initial the algorithm the algorithm intuitively consists of two separate parts a searching for high energy bu¨chi traces where some extended state has energy more than mb s w s and b searching for low energy fair traces where every extended state has energy less than mb the algorithm first constructs s t mb high energy for every node label s e d in the where e mb we check using techniques of whether there exists an fair trace from it form low energy for every node label s e d in with e mb and s b we check if there exists a fair trace of form starting from s e d performing this check entails constructing energy cycles l starting from s and examining if l is feasible from e d l form low energy for every s b and e mb we run algorithm with initial state s and initial battery status e d to check if there exists a fair trace of form here d is the maximum of a node label which has control state s and energy e algorithm finding form low energy fair traces require battery system b s s k c energy bound m n control state s initial battery status e d d d while true do s s k c e d m p leaf leaf has label s e d leaf has a ancestor if p then return false else if d s e d p then return true else d s e d p lemma algorithm returns true if b contains a bu¨chi trace of form and false otherwise intuitively algorithm works by finding some d such that s e d is reachable from itself through some number of energy cycle represented by nodes in every iteration of the it decreases the possible value for d to the largest for s and energy e reachable from the previous value of d through some nodes if d becomes so low that we are not able to any energy cycle starting from s e d then we return false theorem bu¨chi emptiness for battery transition systems is decidable in polynomial space with respect to the number of states and a unary encoding of weights and constants equipped with theorem the proof of theorem follows in a similar fashion as in theorem using similar techniques we can construct an algorithm for emptiness in this case also keeping track of the set of states visited along each branch of the reachability tree theorem emptiness for battery transition systems is decidable in polynomial space with respect to the number of states and a unary encoding of weights and constants regular model checking equipped with a procedure for checking bu¨chi emptiness theorem one can check whether a given b satisfies any regular constraint that is defined with respect to bs states such a constraint can be formalized for example by a linear temporal logic ltl formula whose atomic propositions are the names of the states in b indeed any regular constraint can be translated to a bu¨chi automaton a such that as language is equivalent to the language of or to the language of its negation as is the common practice in the case of an ltl formula now one can take the product of a and b defined in the usual way getting a c with a bu¨chi emptiness problem as emptiness is a special case of regular model checking one may why we to have theorem the reason lies in the complexity ­ in theorem we show that emptiness can be solved in the same complexity class as the one for bu¨chi emptiness while translating a automaton into a bu¨chi automaton might involve an exponential state case study we conclude this paper with a case study relating to controlling an robot we first define a language for programming the robot controller inspired by various real languages for programming and define how the different constructs interact with the environment the setting we model a robot that operates in an dl where each l dl is a possible location of the robot for example a location can be an x y vector providing the position of the robot in a of × we model the environment of the robot as a function that gives attributes to each location in the formally the environment is e dl de de where each is a finite domain of some property for example the environment may define the of each location and whether it lies in the sun or in the in which case e smooth sun means that the location is a place with a smooth note that in this case study the environment is time invariant the actions of the robot are by its control program in each time step denoted by a tick the control program computes output actions based on some external inputs values and the values of the internal variables the external input is given by input variables i ik each over a finite domain and it comes from an external independent agent the values given by variables s sr over the finite domains ds are computed automatically based on the environment of the robot and its current location formally for each variable si there is a function i e × dl the robot also has some internal variables n ng over the finite domains dn used for putting a logic in its behavior the output actions are given by output variables a al over the finite domains da upon performing the actions the current location given in the variable l is automatically computed based on the previous location and the actions formally by a function dl × da × × dl the state of the robot v the values of all the above variables there is a cost function energy which gives the energy gain positive or consumption negative of actions in the given environment ie energy is of type de × × × da × × z for the functions i and energy we use the shorthand of applying the function to the whole state instead of the relevant variables for example instead of writing il v and value of l in state is l we write i v the controller language the language of the program is defined by the syntax shown in figure most of the constructs in this language are standard and will not be explained program statements statements statement statement statements statement label tick expr expr skip if expr statements else statements while expr statements expr expr expr constant expr expr expr expr expr figure syntax of the language in detail note that the program cannot directly write to the location variables and variables but can only write to the internal variables and action variables the most interesting construct in the syntax is the tick statement intuitively the tick statement performs the actions described by the output variables ie changes the location using the function and reads new values into the variables based on the environment and the current state using the i functions and into the input variables nondeterministically the formal semantics of the tick statement is described in the next we provide in example a simple setting of an environment a control program and the finite domains of the various variables example the environment y x × × × sun hard soft × × the robot variables location dl inputs di move none di front back left right ds ds for sun and all around actions internal ds da move none da front back left right dn dn dn was was the cost function the direction does not matter hard soft none hard move soft move hard soft none hard move soft move the program the program intuitively defines the following behavior · the external input whenever it is legal otherwise do nothing if legal or else check for a legal action · the constraints for a legal action do not go into an a location out of the is considered as an do not in the sun for more than two consecutive steps whenever for two consecutive steps in the sun avoid the sun for at least two consecutive steps the code is straightforward we give below some of its fragments while check if the input is legal moving into an if i move i front s i back s i left s i right s a none too much in the sun if n n n choose a legal action if n a none else if a move a front label tick n n n s semantics consider a program p and fix constant k and a width constant c for a battery we define the semantics of p in the standard smallstep operational style we summarize the state of the program as t where is a valuation of the variables and t is a battery status therefore the smallstep semantics is given by a relation where intuitively p t p t holds if executing the first step from the program fragment p at state t leads to t and the remaining program fragment is p we assume that all the constructs except tick are executed and without any consumption of power hence the only construct that updates the battery status in the summary is the tick therefore for all the other constructs we do not explicitly present the semantics but point out that the semantics are similar to a standard for the tick construct we define the semantics using the proof rules from figure intuitively on executing a tick the effects of the output actions are performed the variables are updated based on the new location and environment the next valuation of the input variables is given and then the battery status is updated based on the cost of the actions in the current environment problem statement we consider modelchecking problems that is whether a given model satisfies a given specification the model in our case is a robot and its environment namely a program battery constants an initial battery status an environment with locations dl and an initial location the specification is a regular or regular language over the finite or infinite sequences of locations in dl the modelchecking problem is if the robot has a path in the given setting such that the sequence of locations along the path belongs to the language of the specification consider for example the setting of example together with an initial location a battery width constant a battery fusion constant and an initial battery status a regular specification can ask for instance whether the robot has a finite path reaching the location an regular specification can ask say whether the robot has an infinite path the location infinitely often while avoiding the locations and modelchecking algorithm given a p an environment e a battery width constant c a battery constant k an initial battery status t and an initial variable valuation we define the equivalent battery transition system p e c k t s s c k as follows let l be the set of labels of the tick statements in the program · a state in the is a pair l where l l is a label and is a valuation of all the variables in the program · there exists a transition from l to l on weight w if for some program fragments p and p there exist battery t and t and a proof that l t l t where the t rule is applied exactly once and there exist battery t and t such that there is a proof p t l t · the cost of a transition from l is w if applying the cost function on the valuation of the environment and action variables in is w · the initial state s is given by l such that there exists a program fragment p and a battery status t such that there is a proof of p t l t containing no applications of the t rule due to the determinism of our language it is guaranteed that there exists only one such l a part of the corresponding to example is given in figure the battery constant k and its width constant c sun was sun was was sun was was was sun was sun was sun figure a part of the that corresponds to the robot and its environment as described in example the best path to location appears in blue this path is infeasible by the semantics while feasible by models that are based on an resource we have the following theorem theorem consider a robot modelchecking problem consisting of a p an environment e with locations dl a battery width constant c a battery constant k an initial label tick t effects inputs battery t tick cost w w t battery battery t skip t v di vl inputs inputs t skip k ik vk t v vr r t skip k sk vk t v effects t skip k l v t effects figure semantics of tick battery status t an initial variable valuation and a regular or regular language over the sequences of locations in dl let b p e c k t for a control state b b let be the valuation of the robot location variable in b let be a regular or regular language over sequences of control locations in b such that a sequence b b iff then the robot modelchecking problem is equivalent to the modelchecking of b and battery vs ideal energy modelchecking the robot behavior taking into account the aspects of the energy resource is inherently different from considering the battery as an ideal energy resource as demonstrated in example there the robot cannot go with an initial battery status of from location to cf theorem on the other hand it is possible to go from location to starting with the same initial battery status note that such a situation is impossible with a model that is based on an resource as the energy loss going from location to is while from location to it is only the reason as on in sections ­ lies in the influence of the energy changes along the path on the available of the battery conclusions and future work we presented the first discrete formal model of battery systems and showed that the standard automaton emptiness problems for this model are decidable further these battery transition systems do not fall into the large class of transition systems in terms of future work a natural direction is to explore standard program analysis and program synthesis questions for systems that use for example to begin with one could define an extension to standard imperative languages to allow programs to branch based on the status of the battery for programs written in such a language one could attempt to compute invariants about the combined program and through abstract interpretation also one could attempt synthesis for such a language this would be a generalization of the scheduling problem studied in another direction to explore is the possibility of solving games for battery transition system leading to algorithms for synthesis of reactive systems references r and t online algorithm for battery in in pages ­ r c and d l modelchecking for realtime systems in lics pages ­ s a j and p flat acceleration in symbolic model checking in volume of lncs pages ­ l g a e m and r extending lifetime of portable systems by battery scheduling in date pages ­ g g v r and r white mathematical modeling of ­ a l de t henzinger and m resource interfaces in volume of lncs pages ­ k and l energy parity games theor comput sci ­ k l t a henzinger and j f generalized meanpayoff and energy games in volume of pages ­ c and r energy efficient battery management j on selected areas in communications ­ m t f and j modeling of and of the cell j of the society ­ a and p parallel program j of computer and system sciences ­ a and p transition systems everywhere theor comput sci t f m and j relaxation in cells j of the society ­ s a for in annual battery conference on applications and advances pages ­ s c simple models let you simulate common battery types electronic design ­ m r energy analysis of battery systems phd thesis university of m r and b r which battery model to use software ­ m r a h c b r and jp computing optimal schedules for battery usage in embedded systems ieee trans ­ k g s and j action energy games in volume of lncs pages ­ j and j lead battery storage model for hybrid energy systems energy ­ e and h modeling of cells j of the society ­ d and s an highlevel battery model for use in energy management of portable electronic systems in international conference on computer aided design pages ­ s and m on automata and temporal logic in pages ­ m an approach to linear temporal logic in logics for concurrency structure versus automata volume of lncs pages ­ 