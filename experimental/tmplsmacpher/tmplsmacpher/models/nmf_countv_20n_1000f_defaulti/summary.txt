Trained nmf model with count vectorizer, 20 topics, 1000 features, 
and default max iterations (lda only). 
Training time: 0.151963s
---------- Topic 0 ----------
*** Top words ***
approach
based
using
new
present
paper
techniques
technique
use
used

*** Top papers ***
Elimination of single productions from LR parsers in conjunction with the use of default reductions
Compiler-directed channel allocation for saving power in on-chip networks
A study of memory management for web-based applications on multicore processors
Corpus-based static branch prediction
Efficient context sensitivity for dynamic analyses via calling context uptrees and customized memory management
Verdantium towards a Java-enabled compound document model (poster session)
Concurrent libraries with foresight
Formal certification of code-based cryptographic proofs
Program analysis as constraint solving
Type-based data structure verification

---------- Topic 1 ----------
*** Top words ***
type
inference
type inference
types
ml
typed
polymorphic
type systems
polymorphism
checking

*** Top papers ***
Polymorphic type inference
Structural semantics for polymorphic data types (preliminary report)
From ML type inference to stratified type inference
Refactoring tool challenges in a strongly typed language (poster session)
Type inference with rank 1 polymorphism for type-directed compilation of ML
Encoding types in ML-like languages
Inferring types in Smalltalk
PolyAML: a polymorphic aspect-oriented functional programming language
Relating typability and expressiveness in finite-rank intersection type systems (extended abstract)
Principal Type Schemes for Gradual Programs

---------- Topic 2 ----------
*** Top words ***
language
programming language
design
features
languages
domain
constructs
paper
implementation
specific

*** Top papers ***
Abstraction mechanisms in the BETA programming language
Languages as libraries
A growable language
Adding domain-specific and general purpose language features to Java with the Java language extender
Compiling polymorphism using intensional type analysis
Experiences creating a portable cedar
Verifiable composition of deterministic grammars
Strictness analysis aids time analysis
Skinny and fleshy failures of relative completeness
Programming language constructs for which it is impossible to obtain good hoare-like axiom systems

---------- Topic 3 ----------
*** Top words ***
data
structures
data structures
structure
data structure
operations
parallel
data flow
races
data types

*** Top papers ***
Streaming transducers for algorithmic verification of single-pass list-processing programs
Automatically classifying benign and harmful data races using replay analysis
Structural semantics for polymorphic data types (preliminary report)
Data-Parallel String-Manipulating Programs
From dirt to shovels: fully automatic tool generation from ad hoc data
kb-anonymity: a model for anonymized behaviour-preserving test and debugging data
"Honey, i shrunk the types": how behavioral types loose relevance on the edges on OO applications and why a core data fabric is useful for adaptability
Array-data flow analysis and its use in array privatization
A context-free markup language for semi-structured text
Brainy: effective selection of data structures

---------- Topic 4 ----------
*** Top words ***
code
dynamic
source
machine
generation
software
api
code generation
use
source code

*** Top papers ***
tcc: a system for fast, flexible, and high-level dynamic code generation
How to design a good API and why it matters
VCODE: a retargetable, extensible, very fast dynamic code generation system
Certified self-modifying code
Complete removal of redundant expressions
Safer unsafe code for .NET
Dynamic software updating
Compilation and delayed evaluation in APL
Enhanced code compression for embedded RISC processors
Run-time code generation and modal-ML

---------- Topic 5 ----------
*** Top words ***
analysis
analyses
context
static
results
framework
approximate
sensitive
precision
program analysis

*** Top papers ***
Systematic design of program analysis frameworks
Strictness analysis aids time analysis
Parallelizing top-down interprocedural analyses
Determinacy in static analysis for jQuery
Pick your contexts well: understanding object-sensitivity
Array-data flow analysis and its use in array privatization
Load-reuse analysis: design and evaluation
Dynamic optimistic interprocedural analysis: a framework and an application
Points-to analysis with efficient strong updates
Type-based alias analysis

---------- Topic 6 ----------
*** Top words ***
program
execution
transformations
program analysis
test
input
correctness
approximate
given
assertions

*** Top papers ***
Transformational programming: applications to algorithms and systems
Systematic design of program analysis frameworks
Theoretical and empirical studies on using program mutation to test the functional correctness of programs
An input-centric paradigm for program dynamic optimizations
Incremental program testing using program dependence graphs
CoJava: a unified language for simulation and optimization
A dynamic program analysis to find floating-point accuracy problems
Correctness-preserving program transformations
Compositional dynamic test generation
Directed incremental symbolic execution

---------- Topic 7 ----------
*** Top words ***
logic
systems
proof
reasoning
properties
separation
verification
correctness
linear
temporal

*** Top papers ***
"Sometimes" and "not never" revisited: on branching versus linear time (preliminary report)
From Boolean to quantitative notions of correctness
Aspect-oriented frameworks (poster session): the design of adaptable operating systems
An integrated proof language for imperative programs
"Sometime" is sometimes "not never": on the temporal logic of programs
Context logic as modal logic: completeness and parametric inexpressivity
A fixpoint calculus for local and global program flows
Parametric completeness for separation theories
Semantic-based systems development
Certified assembly programming with embedded code pointers

---------- Topic 8 ----------
*** Top words ***
time
run
run time
linear
compile
compile time
section
complexity
computation
temporal

*** Top papers ***
"Sometimes" and "not never" revisited: on branching versus linear time (preliminary report)
Strictness analysis aids time analysis
Inferring types in Smalltalk
Ownership types for safe region-based memory management in real-time Java
Tardis: affordable time-travel debugging in managed runtimes
SAFECode: enforcing alias analysis for weakly typed languages
Compile-time composition of run-time data and iteration reorderings
Kill-safe synchronization abstractions
Parametric analysis for adaptive computation offloading
Optimizing ML with run-time code generation

---------- Topic 9 ----------
*** Top words ***
memory
performance
applications
garbage
java
parallel
objects
heap
execution
collection

*** Top papers ***
A study of Java's non-Java memory
Cache and I/O efficent functional algorithms
A study of memory management for web-based applications on multicore processors
Using managed runtime systems to tolerate holes in wearable memories
Free-Me: a static analysis for automatic individual object reclamation
Allocation wall: a limiting factor of Java applications on emerging multi-core platforms
pHluid: the design of a parallel functional language implementation on workstations
Garbage collection without paging
Analysis and reduction of memory inefficiencies in Java strings
NUMA-aware memory manager with dominant-thread-based copying GC

---------- Topic 10 ----------
*** Top words ***
programs
parallel
checking
sequential
multithreaded
pointer
properties
procedure
safety
abstract

*** Top papers ***
Summarizing procedures in concurrent programs
The third homomorphism theorem on trees: downward & upward lead to divide-and-conquer
Analysis of pointer rotation
Data-Parallel String-Manipulating Programs
Proving acceptability properties of relaxed nondeterministic approximate programs
Type-directed automatic incrementalization
Elephant 2000: a programming language based on speech acts
Transformational programming: applications to algorithms and systems
Verifying liveness for asynchronous programs
Globally precise-restartable execution of parallel programs

---------- Topic 11 ----------
*** Top words ***
algorithm
algorithms
problem
graph
register
present
variables
efficient
paper
number

*** Top papers ***
Unification-based pointer analysis with directional assignments
Inferring types in Smalltalk
Program verification as probabilistic inference
Polymorphic type inference
Summarizing graphs by regular expressions
Bitwidth aware global register allocation
An efficient parallel heap compaction algorithm
The evolution of list-copying algorithms and the need for structured program verification
How to read floating point numbers accurately
Lazy array data-flow dependence analysis

---------- Topic 12 ----------
*** Top words ***
object
oriented
object oriented
objects
design
class
classes
software
oriented programming
languages

*** Top papers ***
The design of an object-oriented operating system (abstract): a case study of choices
Object-oriented user interfaces (abstract)
Optimization of distributed, object-oriented systems (poster session)
Efficient implementation of object-oriented programming languages (abstract)
Testing object-oriented software (abstract)
Hardware support for object-oriented systems (abstract)
Object-oriented concurrent programming (abstract)
Resolving and exploiting the k-CFA paradox: illuminating functional vs. object-oriented program analysis
Object-oriented project management (abstract)
CommonLoops: merging Lisp and object-oriented programming

---------- Topic 13 ----------
*** Top words ***
semantics
languages
level
calculus
abstract
operational
implementation
high
high level
lambda

*** Top papers ***
Defunctionalized interpreters for programming languages
Structural semantics for polymorphic data types (preliminary report)
Secure implementations of typed channel abstractions
Self-adjusting stack machines
From Hilbert space to Dilbert space: context semantics as a language for games and flow analysis
Transactional events for ML
Monadic abstract interpreters
Transformational programming: applications to algorithms and systems
Precise typing of abstract data type specifications
An operational semantics for parallel lazy evaluation

---------- Topic 14 ----------
*** Top words ***
programming
languages
programming languages
programming language
functional
functional programming
parallel
new
use
oriented programming

*** Top papers ***
Uncovering principles of novice programming
Visual programming languages from an object-oriented perspective (abstract)
Towards more natural functional programming languages
Databases and Programming: Two Subjects Divided by a Common Language?
Making variables abstract: an equational theory for Russell
Abstraction mechanisms in the BETA programming language
Pegasus: first steps toward a naturalistic programming language
A user-centred approach to functions in Excel
Towards adaptive programming: integrating reinforcement learning into a programming language
Fifteen years of functional pearls

---------- Topic 15 ----------
*** Top words ***
model
software
models
development
checking
based
systems
model checking
domain
driven

*** Top papers ***
Efficient modular glass box software model checking
A traversal-based algorithm for higher-order model checking
The architecture of a UML virtual machine
Automatic predicate abstraction of C programs
A model-learner pattern for bayesian reasoning
Semantic-based systems development
Translation: myth or reality? (panel)
Verdantium towards a Java-enabled compound document model (poster session)
DRFX: a simple and efficient memory model for concurrent programming languages
Using model-driven engineering to complement software product line engineering in developing software defined radio components and applications

---------- Topic 16 ----------
*** Top words ***
types
objects
data types
use
modeling
defined
theory
procedure
dependent
arguments

*** Top papers ***
Structural semantics for polymorphic data types (preliminary report)
Types as intervals
Inferring types in Smalltalk
Precise typing of abstract data type specifications
Constrained kinds
Dependent types from counterexamples
Generalized conjunctive types
Frame rules from answer types for code pointers
Analysis of pointer rotation
Liquid types

---------- Topic 17 ----------
*** Top words ***
flow
control
information
dynamic
control flow
data flow
graph
flow analysis
information flow
security

*** Top papers ***
Monoids for rapid data flow analysis
Applications of a graph grammar for program control flow analysis
Array-data flow analysis and its use in array privatization
Qualified data flow problems
SeLINQ: tracking information across application-database boundaries
Merlin: specification inference for explicit information flow problems
Incremental data flow analysis via dominator and attribute update
Demand-driven computation of interprocedural data flow
Staged information flow for javascript
Flow-directed inlining

---------- Topic 18 ----------
*** Top words ***
compiler
java
performance
optimizations
compilation
optimization
compilers
level
machine
jit

*** Top papers ***
Surgical precision JIT compilers
On the benefits and pitfalls of extending a statically typed language JIT compiler for dynamic scripting languages
Reverse interpretation + mutation analysis = automatic retargeting
A case for an SC-preserving compiler
A nanopass framework for commercial compiler development
Fast, effective code generation in a just-in-time Java compiler
Meta optimization: improving compiler heuristics with machine learning
The design and implementation of a certifying compiler
Inferable object-oriented typed assembly language
JIT compilation policy for modern machines

---------- Topic 19 ----------
*** Top words ***
order
higher
higher order
functions
functional
function
method
equational
contracts
calculus

*** Top papers ***
Higher-order equational logic programming
Termination analysis and call graph construction for higher-order functional programs
Practical and effective higher-order optimizations
Focusing and higher-order abstract syntax
Channel dependent types for higher-order mobile processes
Higher order attribute grammars
Verifying higher-order functional programs with pattern-matching algebraic data types
Beautiful differentiation
Higher-order functors with transparent signatures
Polyvariant flow analysis with higher-ranked polymorphic types and higher-order effect operators

