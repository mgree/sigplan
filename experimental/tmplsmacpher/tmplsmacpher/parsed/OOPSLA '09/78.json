{"article_publication_date": "10-25-2009", "fulltext": "\n De.ning Communication in SOA Based on Discourse Models Roman Popp Institute of Computer Technology, \nVienna University of Technology, Austria roman.popp@tuwien.ac.at Abstract Usually, business to business \ncommunication consists of simple request-response interactions. However, it is possible that several \nrequests are necessary to achieve a goal. Typically, the service provider does not support a relation \nbetween these single interac\u00adtions. A more advanced communication would allow a better inte\u00adgration of \nservices. This paper outlines a communication model for an advanced communication speci.cation between \na service provider and a service requester. This model is based on human communication theories. One \nof the main elements in these mod\u00adels are communicative acts, which are used as basic messages ex\u00adchanged \nby the services. In SOA it is not unusual, that one of the services is performed by a human user. Therefore, \na User Inter\u00adface is needed. The objective of the research is to provide means for more advanced communication \nin SOA, which allows machine\u00admachine communication and human-computer interaction as well. Categories \nand Subject Descriptors C.2.4 [Distributed Systems]: [Distributed applications] General Terms design \nKeywords SOA, Interaction design, Communication model 1. Research Problem The overall problem this research \nis trying to address is the inte\u00adgration of different software systems, according to [OAS 2006]. Typically \nthe communication between service requester and service provider is ful.lled by Web Services. This technology \nonly de.nes the syntax of possible requests, but there is no formal description of the sequence the requests \nhave to be sent. In Web Services neither the semantics nor the relation between the requests is speci.ed. \nFor allowing a human user to act like a service, it is necessary to have a User Interface. Because of \nthe missing relation speci.cation be\u00adtween the simple request-response interactions, no User Interface \ncan be generated automatically. During such complex interactions it is possible, that the service provider \nneeds to take the initiative and has to make some re\u00adquests to the service requester, like a callback. \nThus, the communi\u00adcation has to be bidirectional. Such bidirectional communication is not suf.cient investigated \nyet. Copyright is held by the author/owner(s). OOPSLA 2009, October 25 29, 2009, Orlando, Florida, USA. \nACM 978-1-60558-768-4/09/10. 2. Research Hypotheses It is possible to model all necessary information \nfor interaction between a service requester and a service provider. Such a model has to contain all the \nmessages that are exchanged between the two communicating services. The messages have to be speci.ed \nin syntax as well as in semantics. The semantic de.nition of messages should reference to one or more \nontologies. Both ser\u00advices have to follow communication rules speci.ed in a model. These models can be \nused both for machine-machine commu\u00adnication and human-computer interaction. The de.nition of the communication \ndoes not specify how a service executes the requests. It is possible and in SOA not unusual that one \nof the services is replaced by a human user. This human user needs a User Interface and therefore this \nmodel must include all necessary information for the required User Interface. 3. Approach The following \napproach is based on human communication theo\u00adries and consists of three main parts. The most important \npart is the discourse model. The other two parts are the action model and the domain of discourse model. \nThe discourse model is inspired by the speech act theory [Searle 1969], Conversation Analysis [Luff et \nal. 1990] and Rhetorical Structure Theory (RST) [Mann and Thomp\u00adson 1988]. Communicative acts are a generalization \nfrom speech acts and are basic units of communication. Thus, any communica\u00adtion can be seen as enacting \nof communicative acts. In our approach these communicative acts are the messages exchanged by the ser\u00advices. \nConversation Analysis describes the relationship between the communicative acts. One important concept \nis the concept of ad\u00adjacency pairs. An adjacency pair consists of an opening commu\u00adnicative act (like \nasking a question) of one service and the response from the other service (like an answer to this question). \nAnother concept is inserted sequences: If a service has not enough infor\u00admation to respond to a request, \nit is possible to start an additional discourse, embedded within the adjacency pair, to get the required \ninformation. RST focuses on the function of text and is widely used for au\u00adtomated generation of natural \nlanguage. In our case it describes the relation between the adjacency pairs or sub-discourses. A sub\u00addiscourse \nis a part of a discourse. The main concepts of this dis\u00adcourse model have been de.ned in the OntoUCP \nproject and is ap\u00adplied in the CommRob project. Let us explain the dynamic behavior of discourses on \na running example, a simpli.ed communication with an airline ticket book\u00ading system. The goal of the \ncommunication is to buy a ticket. First, the customer has to send a buy ticket request to the airline \nticket booking system. This request is part of the buy ticket discourse. As the airline is not able to \nsell a ticket without knowing the .ight and some other information, the airline ticket booking system \nini\u00adtiates an embedded discourse, which enables a bidirectional com\u00admunication. This is modeled as inserted \nsequence and shown in Figure 1.  Figure 1. Inserted sequence of the buy Ticket discourse. The rounded \nboxes represent the communicative acts, con\u00adnected with an adjacency pair that is shown as a diamond. \nThe elements connecting the adjacency pairs are discourse relations, based on the RST relations. Because \nsome needed relations cannot be mapped to RST relations, we have introduced some procedural relations, \nlike IfUntil [Popp et al. 2009]. In the inserted sequence the service provider requests some additional \ninformation from the service requester. The IfUntil relation .rst has to check, if the con\u00addition speci.ed \non the Then branch is true. Therefore, a request to the application has to be initiated. In our example \nthe condition is not true, because at this time no departure and destination airport is de.ned and therefore \nno .ights can be selected. So, the Tree branch is executed. The Joint de.nes that all sub-branches can \nbe executed at the same time. The ClosedQuestion for the departure airport is sent to the customer. This \nClosedQuestion allows the customer to select one airport from the list of available airports. To get \nthis list, the application has to be asked before the communicative act can be sent. If the other service \nreturns the corresponding answer, the application has to set the departure variable with the content \nin the communicative act. This process is similar for all adjacency pairs. If the Joint is executed, \nthe IfUntil has to check the condition once more in the application. If the condition is true (in our \ncase the application has .ights with the speci.ed departure and desti\u00adnation airport), a ClosedQuestion \nfor selecting one of the resulting .ights is sent to the customer. After receiving the answer the main \ndiscourse can be executed further on, by accepting the Request. For a well-de.ned interface to the application, \nit is necessary to formalize the requests to the Application. The main idea is to de.ne actions according \nto a metamodel. This is the second part of the communication model. In order to achieve a common understanding \nof the actions, they should be stored using Semantic Web techniques. As most of the applications will \nnot provide such an interface, an Application Adapter has to be inserted, which converts the formalized \nrequests to the interface provided by the application itself. The domain of discourse describes the elements \ncommunicated between the two services. We use UML class diagrams for model\u00ading the domain. Until now \nwe did not specify if the service requester is another service or a human user. If the service requester \nis a human user, we need a User Interface. It is possible to generate this needed User Interface, however \nthat is not the focus of this thesis. 4. Evaluation The evaluation of the hypotheses is supported by \nthe implementa\u00adtion of a communication platform supporting our communication models. For evaluating the \n.rst hypothesis, the service requester and ser\u00advice provider will be implemented isolated according to \na prede\u00ad.ned discourse. After that the communication of the implemented services will be compared with \nother communication technologies for the same applications. In a second step the service requester will \nbe replaced by a human user. Therefore, a User Interface is needed. We have to evaluate if all necessary \ninformation for de.ning such a User Interface is de.ned in the communication model. A way for proving \nthis is the automatic generation of a User Interface as the one discussed in [Falb et al. 2009]. 5. Related \nWork The common standard for Business-to-Business (B2B) applications is Web Services [WS]. Web Services \nonly allow simple request\u00adresponse interaction. OWL-S [OWL 2004] adds a semantic de\u00adscription to a service. \nThe description is shown from the service requester perspective and consists of more simple request-response \ninteractions. For the service provider all request are independent from each other. In contrast the service \nrequester is possible to use the response of one request as input for another request. In our ap\u00adproach \nthese requests also allow that some action in the application can use information from more than one \nrequest, because they have the same context. 6. Conclusion In summary, we present a new approach for \ncommunication in SOA. This approach allows more complex and bidirectional inter\u00adactions between services \nas well as the de.nition for a User Inter\u00adface if one service is provided by a human user. Acknowledgments \nThis research has been carried out in the OntoUCP project, partially funded by the FIT-IT Program of \nthe Austrian FFG as project number 809254/9312, and in the CommRob project (http://www. commrob.eu), \npartially funded by the EU (contract number IST\u00ad045441 under the 6th framework programme). References \nWeb services activity. http://www.w3.org/2002/ws/. URL http://www.w3.org/2002/ws/. OWL-based web service \nontology version 1.1. http://www.daml.org/services/owl-s/1.1/, 2004. URL http://www.daml.org/services/owl-s/1.1/. \nReference model for service oriented architecture 1.0. http://docs.oasis-open.org/soa-rm/v1.0/, 2006. \nURL http://docs.oasis-open.org/soa-rm/v1.0/. J\u00a8 urgen Falb, Sevan Kavaldjian, Roman Popp, David Raneburger, \nEdin Arnautovic, and Hermann Kaindl. Fully automatic user interface generation from discourse models. \nIn IUI 09: Proceedings of the 13th international conference on Intelligent user interfaces, pages 475 \n476, New York, NY, USA, 2009. ACM. ISBN 978-1-60558-168-2. doi: http://doi.acm.org/10.1145/1502650.1502722. \nPaul Luff, David Frohlich, and Nigel Gilbert. Computers and Conversation. Academic Press, London, UK, \nJanuary 1990. W. C. Mann and S.A. Thompson. Rhetorical Structure Theory: Toward a functional theory of \ntext organization. Text, 8(3):243 281, 1988. Roman Popp, J\u00a8 urgen Falb, Edin Arnautovic, Hermann Kaindl, \nSevan Kavaldjian, Dominik Ertl, Helmut Horacek, and Cristian Bogdan. Automatic generation of the behavior \nof a user interface from a high-level discourse model. In Proceedings of the 42nd Annual Hawaii International \nConference on System Sciences (HICSS-42), Piscataway, NJ, USA, 2009. IEEE Computer Society Press. J. \nR. Searle. Speech Acts: An Essay in the Philosophy of Language. Cambridge University Press, Cambridge, \nEngland, 1969.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Usually, business to business communication consists of simple request-response interactions. However, it is possible that several requests are necessary to achieve a goal. Typically, the service provider does not support a relation between these single interactions. A more advanced communication would allow a better integration of services. This paper outlines a communication model for an advanced communication specification between a service provider and a service requester. This model is based on human communication theories. One of the main elements in these models are <i>communicative acts</i>, which are used as basic messages exchanged by the services. In SOA it is not unusual, that one of the services is performed by a human user. Therefore, a User Interface is needed. The objective of the research is to provide means for more advanced communication in SOA, which allows machine-machine communication and human-computer interaction as well.</p>", "authors": [{"name": "Roman Popp", "author_profile_id": "81309501411", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728677", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640035", "year": "2009", "article_id": "1640035", "conference": "OOPSLA", "title": "Defining communication in SOA based on discourse models", "url": "http://dl.acm.org/citation.cfm?id=1640035"}