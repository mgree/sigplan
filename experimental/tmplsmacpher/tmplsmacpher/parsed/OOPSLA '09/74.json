{"article_publication_date": "10-25-2009", "fulltext": "\n Get to Know Your Clones with CeDAR Robert Tairas and Jeff Gray Department of Computer and Information \nSciences University of Alabama at Birmingham Birmingham, AL 35294 {tairasr, gray}@cis.uab.edu Abstract \nThis demonstration introduces the CeDAR Eclipse plug-in for Java that incorporates the results from different \nclone detection tools and displays properties of the clones in an IDE. Some properties are displayed \ndirectly in the source code editor for quicker access. In addition, current clone refactoring capabilities \nwill be demonstrated. Categories and Subject Descriptors D.2.6 [Software Engineering]: Programming Environments \n integrated environments. General Terms Management, Languages. Keywords Code clones, analysis, visualization, \nmaintenance 1. Introduction Clone detection tools provide an automated way to find code clones that represent \nduplicated sections of code. The basic information about the clones is the location of clones in the \nsource files and the grouping of related clones. These tools provide a variety of means to represent \nand visualize the clones. Some tools provide textual or HTML output of the results, such as CloneDR [3], \nDeckard [4], and Simian [5]. Other tools incorporate their results within an IDE, such as CloneDetective \n[2] and SimScan [6], and as a standalone program such as CCFinder [1]. In most cases, each clone detection \ntool provides its own set of unique features in displaying clone properties, which limits the possible \nuse of these features to a particular tool. A motivation for the work shown in this demonstration is \nthe need to flexibly incorporate the results of a clone detection tool from a selection of available \ntools and display the clone properties within a native programming environment like an IDE. The second \nmotivation is related to the actual display of the clone properties. An aviation analogy can be made \nwith the heads up display (HUD) in certain aircraft, which is a transparent display directly in front \nof the pilot that provides critical information about the aircraft and allows the pilot to remain focused \non flying the aircraft. The HUD analogy is similar to providing clone information directly in the view \nof the source code editor, which gives the programmer a quick summary of the clones without having to \nlook at multiple source files or other views in the IDE. Another motivation is the simultaneous refactoring \nof the clones to remove the duplicated code associated with the clones. Copyright is held by the author/owner(s). \nOOPSLA 2009, October 25-29, 2009, Orlando, FL, USA. ACM 978-1-60558-768-4/09/10. Currently, refactoring \na group of clones requires multiple refactoring steps to be performed separately, rather than as a collective \nbatch. 2. Demonstration Overview This demonstration will introduce an Eclipse plug-in for Java called \nCeDAR (Clone Detection, Analysis, and Refactoring). CeDAR can obtain results from different clone detection \ntools and display the reported clones from a selected tool in Eclipse. Some of the displays of clone \nproperties are incorporated directly into the source code editor for quicker access. The development \nof CeDAR also includes an effort to extend the capabilities of the refactoring provided in Eclipse to \noffer a more seamless means of refactoring across a group of common clones. The demonstration will contain \nboth a presentation utilizing slides and a live demonstration of the CeDAR plug-in. The time allotment \nwill consist of the following topics: . Introduction to code clones A short summary of the area of code \nclones. . Motivation for CeDAR A description of the three problems as described in Section 1, which \nrelates to 1) the display of properties of reported clones from a selected clone detection tool, 2) the \ndisplay of some properties directly in the source code editor, and 3) the simultaneous refactoring of \na group of clones. . Underlying design and implementation A description of the design and implementation \ndetails regarding the parsing of output from third-party clone detection tools and the analysis of parameterized \nelements for use in the display and refactoring process of the clones. . Demonstration of CeDAR A demonstration \nof the plug-in features on examples of detected clones.  3. Clone Detection Tool Selection As described \nin Section 1, most clone detection tools provide two sets of basic properties about clones. The first \nis the location of the clones, which usually consists of the file location of a clone and the starting \nand ending lines representing the range of code associated with the clone. The second property reports \nthe grouping of the clones that represent the same code duplication. The CeDAR plug-in can individually \nparse the textual output of several tools, such as CCFinder, CloneDR, Deckard, and SimScan, to obtain \nthese two properties. The user of CeDAR is initially given a choice of which tool s output to be used \nand displayed in the plug-in. The parsing of the tool output for the clone location, starting and ending \nlines, and groups varies among the outputs. However, within each output the properties are listed in \na uniform format. For example, clone groups are distinguished by either separate lines or bordered by \nblank lines. For CCFinder, the determination of starting and ending lines and clone groups requires more \ndetailed processing, because clone ranges are reported as token positions and clone relationships are \nreported through clone pairs.  Providing support for obtaining input from various clone detection tools \noffers the user more than one option for the source of the clones. In addition, the clones from these \ndifferent sources can be viewed in more detail in CeDAR through the various clone property displays that \nwill be described in the next section.  4. Clone Property Displays The presentation of clone information \nin CeDAR, as shown in the screenshot in Figure 1, includes a collection of various techniques that have \nbeen used in different tools. A clone detection results view provides a listing of clones contained in \ntheir corresponding groups. Additionally, a separate view displays the location of each clone in the \nclass hierarchy of the project. A visualization of the clones showing where the clones are located in \ntheir related files is also available. Figure 1. CeDAR screen shot These displays are implemented as \nEclipse views. However, in an effort to provide a more centralized display of the clone properties, some \nfeatures of the plug-in are incorporated directly into the source code editor. This is analogous to a \nHUD in an aircraft, where information is displayed directly in front of the pilot without the need for \nthe pilot to look down at the instruments. Of course, a programmer looking away from the source code \neditor is not as hazardous as a pilot ignoring the skyline, but providing information that is directly \nin front of the programmer and incorporated in the editor can potentially provide a quicker summary of \nthe properties of the clone. Figure 2. Display of parameterized elements One of the mechanisms available \ndirectly on the source code editor is the display of parameterized elements of the clones. These parameterized \nelements represent the differences of the clones in a clone group. For example, two clones may contain \nthe same syntax, but use different variable names. The plug-in provides a way to highlight these differences \nand also display the differences directly on the code among two or more clones (as shown in Figure 2). \nThis allows the programmer to see the differences (and hence the similarities) of the clones in one location. \nWithout this feature, a programmer would have to observe the section of code related to each clone, which \nmay require opening multiple files. Similarly, side-by-side comparisons can only accommodate two clone \ninstances at once. 5. Refactoring Extensions The development of CeDAR includes an effort to extend the \nrefactoring capabilities of Eclipse to allow a more seamless process in the refactoring of clones. The \ninformation about clones from the detection phase serves as input to the refactoring engine and the process \nis performed in a way that lessens the number of clicks required to refactor the clones. After a group \nof clones is selected to be refactored, CeDAR evaluates some of the same properties that are provided \nto the user, such as the parameterized elements of the clones. This information is useful to determine \nwhich identifiers need to be passed to the newly created method if an Extract Method refactoring was \nperformed. 6. Demonstration Presenters Robert Tairas is a Ph.D. candidate in the Department of Computer \nand Information Sciences (CIS) at the University of Alabama at Birmingham (UAB) and a member of the Software \nComposition and Modeling (SoftCom) laboratory. His research interests include code clone analysis and \nmaintenance. He previously developed a visualization tool for clones [7] and has authored several papers \nrelated to the analysis of clones. He also maintains a web site containing the most recent clone-related \nresearch at http://www.cis.uab.edu/tairasr/clones/literature/. Dr. Jeff Gray is an Associate Professor \nin the CIS Department at UAB, where he co-directs research in the SoftCom laboratory. His research interests \ninclude code clones, aspect orientation, and model-driven engineering.  Acknowledgements This material \nis based upon work supported by the National Science Foundation under Grant No. 0702764.  References \n[1] CCFinder, http://www.ccfinder.net/. [2] CloneDetective, http://www.codeplex.com/CloneDetectiveVS/. \n[3] CloneDR, http://www.semdesigns.com/Products/Clone/. [4] Jiang, L., Misherghi, G., Su, Z., and Glondu, \nS. DECKARD: Scalable and Accurate Tree-based Detection of Code Clones. In Proc. of the Int. Conf. on \nSoftware Engineering, Minneapolis, MN, May 2007, pp. 96-105. [5] Simian, http://redhillconsulting.com.au/products/simian/. \n[6] SimScan, http://www.blue-edge.bg/simscan/. [7] Tairas, R., Gray, J., and Baxter, I. Visualization \nof Clone Detection Results. Eclipse Technology Exchange Workshop, Portland, OR, Oct. 2006, pp. 50-54. \n  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>This demonstration introduces the CeDAR Eclipse plug-in for Java that incorporates the results from different clone detection tools and displays properties of the clones in an IDE. Some properties are displayed directly in the source code editor for quicker access. In addition, current clone refactoring capabilities will be demonstrated.</p>", "authors": [{"name": "Robert Tairas", "author_profile_id": "81319502795", "affiliation": "University of Alabama at Birmingham, Birmingham, AL, USA", "person_id": "P1728669", "email_address": "", "orcid_id": ""}, {"name": "Jeff Gray", "author_profile_id": "81100403059", "affiliation": "University of Alabama at Birmingham, Birmingham, AL, USA", "person_id": "P1728670", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640030", "year": "2009", "article_id": "1640030", "conference": "OOPSLA", "title": "Get to know your clones with CeDAR", "url": "http://dl.acm.org/citation.cfm?id=1640030"}