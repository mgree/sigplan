{"article_publication_date": "10-25-2009", "fulltext": "\n The Operation Recorder: Specifying Model Refactorings By-Example * Petra Brosch Martina Seidl Philip \nLanger Konrad Wieland Manuel Wimmer Department of Telecooperation Business Informatics Group Johannes \nKepler University Linz, Austria Vienna University of Technology, Austria philip.langer@jku.at lastname@big.tuwien.ac.at \nAbstract Prede.ned composite operations are handy for ef.cient soft\u00adware modeling, e.g., for the automatic \nexecution of refactor\u00adings, and for the introduction of patterns in existing mod\u00adels. Some modeling environments \nprovide an initial set of basic refactoring operations, but hardly offer any extension points for the \nuser. Even if extension points exist, the intro\u00adduction of new composite operations requires programming \nskills and deep knowledge of the respective metamodel. In our demonstration we present the Operation \nRecorder, a tool for specifying composite operations, like refactor\u00adings, within the user s modeling \nlanguage and environment of choice. The user models the composite operation by\u00adexample, which enables \nthe semi-automatic derivation of a generic composite operation speci.cation. This speci.cation may be \nused in further modeling scenarios, like model refac\u00adtoring and model versioning. We demonstrate our \ntool by creating two refactoring speci.cations for UML class dia\u00adgrams and UML state machine diagrams. \nCategories and Subject Descriptors D.2.13 [Software En\u00adgineering]: Reusable Software Reuse models General \nTerms Design, Languages Keywords refactoring, composite operation, by-example approach * This work has \nbeen partly funded by the Austrian Federal Ministry of Transport, Innovation and Technology (BMVIT) and \nFFG under grant FIT\u00adIT-819584. Funding for this research was provided by the fFORTE WIT -Women in Technology \nProgram of the Vienna University of Technology, and the Austrian Federal Ministry of Science and Research. \n 1. Introduction With the rise of model-driven development software models are lifted to .rst-class artifacts \nin the software development lifecycle. Like in the traditional code-oriented software de\u00advelopment process, \nsoftware models are iteratively re.ned and restructured. In this software development phase recur\u00adrent \n(sequences of) operations, also known as refactorings, are applied to ensure the readability, maintainability \nand ex\u00adtensibility. A well established approach for specifying and communicating a recurrent sequence \nof operations is to give it a name and de.ne a pattern, as is done, e.g., by [Gamma et al. 1995] and \nby [Fowler et al. 1999]. So far, the technical speci.cation of these refactorings has to be performed \nby experts, because they require extensive programming effort and deep knowledge of the development environment. \nTo open the speci.cation of refactorings to modelers, we present the Operation Recorder, an approach \nfor the user-friendly modeling of composite operations by\u00adexample. The Operation Recorder enables the \nspeci.cation of composite operations by modeling concrete examples at the model layer, i.e., the same \nlayer the operation speci.cation is applied. It allows the user to create these examples within her preferred \nmodeling language and editor of choice, and then to automatically derives a generic operation speci.ca\u00adtion \nfrom these example refactorings. The bene.t of the resulting operation speci.cation is twofold. On the \none hand, our Execution Engine is able to apply operation speci.cations on arbitrary models con\u00adtaining \na pattern matching the initial model. On the other hand, the Detection Engine detects occurrences of \nspeci\u00ad.ed operations in generic model differences obtained by a state-based comparison. In combination \nwith the Execution Engine, the recognition and replay of applied refactorings also improve model versioning \n[Dig et al. 2006]. Copyright is held by the author/owner(s). OOPSLA 2009, October 25 29, 2009, Orlando, \nFlorida, USA. ACM 978-1-60558-768-4/09/10.    2. Operation De.nition To create new composite operation \nspeci.cations the user provides some general information and models the initial sit\u00aduation (cf. Fig. \n1a) in her preferred modeling environment. This initial model is automatically annotated with unique \nIDs and copied by the Operation Recorder. Thus, the mod\u00adeler performs all operations the composite operation \nconsists of on this working copy, again in her preferred modeling environment (cf. Fig. 1b). When the \nmodeler con.rms the revised working copy, the Operation Recorder precisely de\u00adtects all performed operations \nby conducting a state-based comparison relying on the ID-based match. Furthermore, the Operation Recorder \nderives pre-and postconditions from the initial and the revised working model (cf. Fig. 1c). For each \nmodel element and its features a condition is generated. Since the generic condition generation facility \nis not able to decide which feature is essential to act as pre-and postcon\u00addition, the modeler may relax, \nenforce, and modify the au\u00adtomatically derived conditions by deactivating, reactivating, and changing \nthem. If necessary for the respective composite operation, the modeler may additionally de.ne iterations \nand user input variables (cf. Fig. 1d). The Operation Recorder is realized as an Eclipse plug-in and \nmay be used for any EMF\u00adbased models. To detect all operations performed on the ex\u00adample model we apply \nEMF Compare. For a more detailed description of the Operation Recorder we kindly refer to the AMOR project \nhomepage1 and [Brosch et al. 2009a]. As already mentioned, operation speci.cations are appli\u00adcable on \narbitrary models using the Execution Engine.If a part of a model matches the preconditions the derived \ndif\u00adferences which consist of atomic operations are interpreted and applied on the matching model elements. \nThis enables a time-saving repetition of recurring complex operations in modeling environments like the \nmacro recording feature in 1 http://www.modelversioning.org Microsoft Excel. Furthermore, operation speci.cations \nare self-contained, so they may be centralized and easily shared with other modelers over a certain platform, \ne.g., a commu\u00adnity server. The detection of occurrences of composite op\u00aderations in the context of model \nversioning allows a more compact representation of the difference reports by fold\u00ading atomic operations \nwhich belong to a composite opera\u00adtion. Thus, detecting applied composite operations enables a faster \nand better understanding of the modeler s original in\u00adtention. Furthermore, it enables a smarter con.ict \ndetection and resolution as proposed in [Dig et al. 2006]. We imple\u00admented the Detection Engine by searching \nfor the operation pattern contained in the operation speci.cation. If the pattern is found and the model \nelements referenced by the matching operations ful.ll the pre-and postconditions an occurrence of the \ncomposite operation is at hand. 3. Outline of the Demonstration After outlining the approach from a \ntheoretical point of view we will demonstrate the easy and ef.cient usage of our tool by creating two \nrefactoring speci.cation in the domain of the UML class diagram as well as the UML state machine diagram. \nFor educational reasons we start with a small ex\u00adample, the Convert to Singleton refactoring, where a \nplain UML class is transformed to act as singleton. To get a com\u00adplete impression of the expressive power \nwe continue with a more complicated example, Introduce Composite State in UML state machine diagrams, \nfor which the de.nition of user input as well as iterations are necessary. For both of these refactorings \nwe show how these are applied in arbi\u00adtrary models and demonstrate how occurrences of these can henceforth \nbe detected to improve model versioning [Dig et al. 2006].  References Kerstin Altmanninger, Gerti \nKappel, Angelika Kusel, Werner Rets\u00adchitzegger, Martina Seidl, Wieland Schwinger, and Manuel Wimmer. \nAMOR -Towards Adaptable Model Versioning. In MCCM 08 @ MoDELS 08, 2008. Petra Brosch, Philip Langer, \nMartina Seidl, Konrad Wieland, Manuel Wimmer, Gerti Kappel, Werner Retschitzegger, and Wieland Schwinger. \nAn Example is Worth a Thousand Words: Composite Operation Modeling By-Example. Accepted for MoDELS 09, \n2009a. Danny Dig, Tien N. Nguyen, Kashif Manzoor, and Ralph John\u00adson. MolhadoRef: A Refactoring-aware \nSoftware Con.guration Management Tool. In OOPSLA 06. ACM, 2006. Martin Fowler, Kent Beck, John Brant, \nWilliam Opdyke, and Don Roberts. Refactoring: Improving the Design of Existing Code. Addison-Wesley, \n1999. Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. Design Patterns: Elements of Reusable \nObject-Oriented Soft\u00adware. Addison-Wesley Professional, 1995.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Predefined composite operations are handy for efficient software modeling, e.g., for the automatic execution of refactorings, and for the introduction of patterns in existing models. Some modeling environments provide an initial set of basic refactoring operations, but hardly offer any extension points for the user. Even if extension points exist, the introduction of new composite operations requires programming skills and deep knowledge of the respective metamodel.</p> <p>In our demonstration we present the <b>Operation Recorder</b>, a tool for specifying composite operations, like refactorings, within the user's modeling language and environment of choice. The user models the composite operation by-example, which enables the semi-automatic derivation of a generic composite operation specification. This specification may be used in further modeling scenarios, like model refactoring and model versioning. We demonstrate our tool by creating two refactoring specifications for UML class diagrams and UML state machine diagrams.</p>", "authors": [{"name": "Petra Brosch", "author_profile_id": "81375617498", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728618", "email_address": "", "orcid_id": ""}, {"name": "Martina Seidl", "author_profile_id": "81416596952", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728619", "email_address": "", "orcid_id": ""}, {"name": "Konrad Wieland", "author_profile_id": "81444605783", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728620", "email_address": "", "orcid_id": ""}, {"name": "Manuel Wimmer", "author_profile_id": "81317490231", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728621", "email_address": "", "orcid_id": ""}, {"name": "Philip Langer", "author_profile_id": "81436597396", "affiliation": "Johannes Kepler University, Linz, Austria", "person_id": "P1728622", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640017", "year": "2009", "article_id": "1640017", "conference": "OOPSLA", "title": "The operation recorder: specifying model refactorings by-example", "url": "http://dl.acm.org/citation.cfm?id=1640017"}