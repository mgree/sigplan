{"article_publication_date": "10-25-2009", "fulltext": "\n Preserving the Separation of Concerns While Composing Aspects on Shared Joinpoints Antoine Marot Universit\u00b4e \nLibre de Bruxelles CP-212 B-1050 Brussels, Belgium amarot@ulb.ac.be Abstract Aspect-oriented programming \n(AOP) is a programming paradigm which makes possible the separation of crosscutting concerns in different \nmodules (the aspects). AOP is known to have issues when aspects are composed in a base program. Several \napproaches have been proposed to address these issues but they break the inherent separation of concerns. \nIn this proposal, we describe a dissertation research plan to elaborate composition techniques while \npreserving the separation of concerns. The approach we adopt is based on an independent semantic annotation \nof the aspects to detect and resolve con.icts at runtime. Categories and Subject Descriptors D.2.5 [Software \nEngineer\u00ading]: Testing and Debugging Debugging aids, Monitors General Terms Languages, Veri.cation Keywords \nAspect interferences, separation of concerns, aspect composition, software evolution 1. Description \nof purpose Aspect-oriented programming (AOP) is a programming technique intended to increase program \nmodularity by enabling the separa\u00adtion of crosscutting concerns. Without AOP such kinds of concerns are \nscattered and tangled in the implementation, making it hard to maintain. To address this problem, AOP \nallows a crosscutting concern to be isolated and encapsulated into a separate module: an aspect. As a \nconsequence, aspects can be implemented and main\u00adtained independently from each other or from the base \nprogram on which their are applied, making it possible to have libraries of reusable aspects. Aspects \nare implemented using advices and pointcuts.An ad\u00advice is a piece of code de.ning the behavior of the \ncrosscutting concern while a pointcut is the declaration of a set of points in the execution of the base \nprogram (called joinpoints) around which ad\u00advices must be inserted. The process applying advices on the \njoint\u00adpoints described by their associated pointcut is called the weaving. When several aspects are woven \nin a base program, it can hap\u00adpen that some advices have to be applied on the same joinpoint (the joinpoint \nis said to be shared between these advices). Unfortu- Copyright is held by the author/owner(s). OOPSLA \n2009, October 25 29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. nately, the order in \nwhich the advices are inserted (and therefore ex\u00adecuted) has an impact on the resulting program behavior. \nAs a con\u00adsequence, aspects that behave correctly when individually woven in the base program may interact \nwith each other when they are com\u00adposed. While such interactions are intended in general, it can also \nhappen that they lead to undesired behavior (interferences). This is known as one of the main composition \nissues of aspect-oriented programming (other issues are not discussed in this proposal since they are \nout of the scope of the research). Composing aspects with a base program is therefore a process where \ninterferences must be detected and then resolved. 1.1 Detecting the Interferences Several approaches \nhave been proposed so far in order to detect the interactions between aspects [5, 1]. In these approaches, \nthe programmer is given the task of determining whether a detected interaction is desired or is an interference. \nOne way to differentiate a desired interaction from an inter\u00adference is to annotate aspects with semantic \ninformation. [3] and [2] have proposed the semantic annotation of the aspects as a way to detect actual \ninterferences. In these approaches, the annotations make use of properties which are shared between the \naspects. As a consequence, the annotation of the aspects is considered as a pro\u00adcess where a kind of \nglobal awareness and knowledge of all aspects is assumed although the aspects are supposed to be implemented \nindependently. Moreover, annotating aspects by using shared prop\u00aderties breaks the highly-desired separation \nof concerns because it reintroduces dependencies. Therefore, these solutions can be hard to maintain \nin an evolving software system, as properties may be changed, added or even removed. 1.2 Resolving the \nInterferences Once an interference has been detected, the programmer can re\u00adsolve it by adapting the \nweaving order. The weaving order is spec\u00adi.ed by explicit declarations of the order in which the advices \nmust be woven. Weaving order declarations therefore break the separation of concerns as well since they \nreintroduce dependencies between the aspects they handle. As a consequence, the maintenance of these \ndeclarations is required when modifying, adding or removing an aspect.  1.3 Research Purpose The purpose \nof the research is to develop techniques and tools that can detect and resolve aspect interferences on \nshared joinpoints while preserving the separation of concerns. Such techniques and tools will reduce \nthe maintenance effort in aspect-oriented software systems and will improve as well the reusability of \naspects.   2. Goals The main goal of the research is to determine whether it is possi\u00adble to compose \naspects on shared joinpoints without breaking the separation of concerns and under what limitations. \nBecause aspect composition is composed of the interference detection and inter\u00adference resolution phases, \nthis question must be studied for both phases. Beside new understanding and knowledge of the aspect com\u00adposition, \nthe research will also generate new methods to compose aspects while preserving the separation of concerns: \n a semantic annotation language. In order to detect actual in\u00adterferences, aspects are annotated with \nsemantic information. The proposed annotation language must not break the separa\u00adtion of concerns and \nshould therefore propose a way to annotate aspects about their intended composition regarding only local \nconsiderations. Note that the interference detection using the semantic annotations will not only detect \ninterferences but will provide as well a detailed report of each interference (the in\u00advolved advices \nand the cause of the interference). A preliminary version of this language has been introduced in [4]. \n an automatic composition method. We saw in the previous sec\u00adtion that resolutions of interferences \nbased on explicit order declarations break the separation of concerns. We believe that an automatic composition \nof the aspects is possible by using the semantic annotations of the aspects and the detailed inter\u00adference \nreports.  3. Technical approach The envisaged technical approach is divided in three parts: 1. conceive \nthe semantic annotation language. 2. use semantic annotations to detect interferences. 3. use semantic \nannotations and detected interferences to automat\u00adically resolve the interferences.  3.1 Semantic annotation \nlanguage The semantic annotations are intended to describe how advices should be woven with other advices \non shared joinpoints (based on the behavior of these other advices). In order to avoid the annotation \nof an aspect to use behavioral properties de.ned by other aspects, the annotation language should rather \nuse generic quanti.cation techniques to describe the behavior of potentially composed aspects. To validate \nthe annotation language, the language constructs will be compared against all possible composition con.icts \non shared joinpoints in order to determine if the language is powerful enough to cover them all. 3.2 \nDetection of interferences The .rst step in order to compose aspects is the detection of the interferences. \nIn [4], we proposed a method using the semantic annotations to detect interferences at runtime. A static \nversion of the method could be envisaged but has the disadvantage of detecting false positives (due to \nthe static undecidability). The validation of the interference detection method will be realized through \nformal proofs of correctness (only interferences are detected) and completeness (all interferences are \ndetected). 3.3 Resolution of interferences The second step to compose aspects is the resolution of the \nde\u00adtected interferences. To be able to automatically resolve aspect in\u00adterferences,weplanto workona runtime \naspect scheduler tightly coupled with the interference detection at runtime: when an inter\u00adference is \ndetected at runtime, the aspect scheduler suspends the current aspect execution and schedules the aspects \nthat should be executed before the execution of the current instruction that would have provoked an interference \nif it were executed. The validation of the runtime aspect scheduler will also be re\u00adalized through formal \nproofs of correctness (the aspect scheduler does not change the program requirements and respects the \nseman\u00adtic annotations) and completeness (if a correct scheduling of the aspects exists, it is realized \nby the aspect scheduler).   References [1] D. Balzarotti, A. Castaldo, and M. Monga. Slicing aspectj \nwoven code. In FOAL 05: The 4th Workshop on Foundations of Aspect-Oriented Languages, Chicago, USA, Mar \n2005. [2] P. E. A. Durr, T. Staijen, L. M. J. Bergmans, and M. Aksit. Reasoning about semantic con.icts \nbetween aspects. In EIWAS 2005: 2nd European Interactive Workshop on Aspects in Software, 2005. [3] E. \nKatz and S. Katz. Incremental analysis of interference among as\u00adpects. In FOAL 08: Proceedings of the \n7th workshop on Foundations of aspect-oriented languages, pages 29 38, New York, NY, USA, 2008. ACM. \n[4] A. Marot and R. Wuyts. Detecting unanticipated aspect interferences at runtime with compositional \nintentions. In RAM-SE 09: Proceedings of the 6th ECOOP 2009 Workshop on Re.ection, AOP and Meta-Data \nfor Software Evolution, Genova, Italy, 2009. [5] T. Staijen and A. Rensink. A graph-transformation-based \nsemantics for analysing aspect interference. In Workshop on Graph Computation Models, Natal, Brazil, \n2006.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Aspect-oriented programming (AOP) is a programming paradigm which makes possible the separation of crosscutting concerns in different modules (the aspects). AOP is known to have issues when aspects are composed in a base program. Several approaches have been proposed to address these issues but they break the inherent separation of concerns. In this proposal, we describe a dissertation research plan to elaborate composition techniques while preserving the separation of concerns. The approach we adopt is based on an independent semantic annotation of the aspects to detect and resolve conflicts at runtime.</p>", "authors": [{"name": "Antoine Marot", "author_profile_id": "81371593975", "affiliation": "Universit&#233; Libre de Bruxelles, Bruxelles, Belgium", "person_id": "P1728681", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640039", "year": "2009", "article_id": "1640039", "conference": "OOPSLA", "title": "Preserving the separation of concerns while composing aspects on shared joinpoints", "url": "http://dl.acm.org/citation.cfm?id=1640039"}