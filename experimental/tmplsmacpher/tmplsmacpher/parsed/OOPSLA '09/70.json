{"article_publication_date": "10-25-2009", "fulltext": "\n The SmaCC Transformation Engine HowtoConvertYour EntireCodeBaseintoadifferent Programming Language John \nBrant Don Roberts The Refactory University of Evansville brant@refactoryworkers.com roberts@evansville.edu \n Abstract The SmaCC Transformation Engine is a workbench for build\u00ading program transformation systems. \nIt has been used to create a wide variety of transformations ranging from simple refactorings to much \nlarger ones, such as converting entire code bases between languages.We will demonstratehow the systemworks, \npresenta quick overview of the architecture of the generated transformers, describe how typical large \nscale transformations, such as a migra\u00adtion project, proceeds perform several small transformations of \na formula language, and demonstrate some larger,inter-language mi\u00adgrations. Categories and Subject Descriptors \nD.3.4[Processors]:Transla\u00adtor writing systems and compiler generators General Terms Languages Keywords \nProgramTransformation, Migration, Refactoring, Code Modernization 1. Presenters John Brant and Don Roberts \nare the authors of the original Refac\u00adtoring Browser for Smalltalk, the .rst commercial refactoring tool. \nTheyhave been creating refactoring and program transformations systems for the past 15 years. SmaCC is \ntheir attempt to go be\u00adyond canned refactorings and allow for the easy creation of general program manipulation \ntools. 2. Demo Description Refactoring is a source-to-source transformation. ManyIDEs sup\u00adport refactorings. \nBut, what if your refactoring IDE does not pro\u00advidearefactoringthatyou need?Or,whatifyouwantto performa \nlarge non-refactoringsuchasbug.x.Or,whatifyouneedto con\u00advert your program to an entirely different programming \nlanguage. In these cases, your refactoring IDE provides little, if any, sup\u00adport and you are left performing \nmanual modi.cations. Such man\u00adual modi.cations are both time consuming and error prone. The SmaCCTransformation \nEngine canhelpdevelopersbuild transfor\u00admation scripts to convert large amounts of code at once. While \nlarge transformations don toccur onadaily basis, several are quite common an upgrade to your framework \nor language may Copyright is held by the author/owner(s). OOPSLA 09 October 25-29, 2009, Orlando, Florida, \nUSA. ACM 978-1-60558-768-4/09/10. cause such large scale changes. For example, consider delegates in \nC#. Prior to version 3, the common way to create a delegate was to use syntax such as:delegate() { return \n1; }.Version 3 added lambda expressions that shorten the amount of code re\u00adquired to create a delegate \nso the previous example can be rewrit\u00adten as () => 1. Such changes are not limitedto languagesbut also \nframeworks.A newversionofa framework may deprecate some items, and add convenience methods that replace \na common se\u00adquence of expressions. Currently, the common approach to handle such changesisleavetheexistingcode \nalone,but writenewcode using the new syntax and new framework methods. This makes the code base more \ndif.cult to maintain since it is written in multi\u00adple styles. Furthermore, at some point in the future \nthe deprecated items may cease to work. The SmaCC Transformation engine is built on top of the SmaCC \ncompiler generation framework and allows the program\u00admer to rapidly write translation rules in a language \nthat is similar to the source language. These transformation can be used to imple\u00adment custom refactorings \nor code modernizations.Forexample, the following rules convert a couple of the standard delegate patterns \ninto the new lamda expressions in C# version 3: delegate() { return a ;} -> () => a delegate( type \nvar ) { return a ;} -> var => a We can also use pattern to transform the Delphi increment statement \ninto C#: Inc( a , b ) -> a += b By taking a transformation-based approach, the users can de\u00advelop transformation \nrules while mainline development continues. This allows standard development to continue while the transfor\u00admation \neffort is underway. The code base can be regularly trans\u00adlated and the result checked during this time. \nOnce the rule base is complete, the entire project can be translated and the developers can be cut over \nto the new code base in the new language. The new code base will retain all development that was in progress \nduring the migration period. The SmaCCTransformation Engine has been usedby the pre\u00adsenters for transformations \nranging from a custom Java refactoring that took 15 minutes to create, to a source code migration project \nthat converted a 1.4 million line Delphi project into C# without halting the development process. During \nthat migration project, the code basewas transformed onadaily basis, which not only allowed the authorsto \nre.ne their transformation rules,but also ensuredthat the translated code was up-to-date with the nightly \nbuilds of the original system. The SmaCCTransformation Enginewas used for Delphi-to-Delphi transformation \nto clean up the original code base, then for Delphi-to-C# translation, and .nally for C#-to-C# clean \nup of the .nal result.  This demo will show how to quickly create program manipula\u00adtion tools for any \nlanguage and then use those tools to write pro\u00adgram transformations.We willshowhowto quicklybuilda trans\u00adformer \nfor a simple formula language and then create refactorings for that language and also translate that \nlanguage into standard programming languages. Additionally, translations between vari\u00adous languages will \nbe demonstrated. The SmaCC system is written in Smalltalk, and is designed to be deployed across multiple \nmachines to parallelize large transfor\u00admation projects. It is freely available at: http://www.refactoryworkers.com/SmaCC \n  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>The SmaCC Transformation Engine is a workbench for building program transformation systems. It has been used to create a wide variety of transformations ranging from simple refactorings to much larger ones, such as converting entire code bases between languages. We will demonstrate how the system works, present a quick overview of the architecture of the generated transformers, describe how typical large scale transformations, such as a migration project, proceeds perform several small transformations of a formula language, and demonstrate some larger, inter-language migrations.</p>", "authors": [{"name": "John Brant", "author_profile_id": "81100585445", "affiliation": "The Refactory, Urbana, IL, USA", "person_id": "P1728659", "email_address": "", "orcid_id": ""}, {"name": "Don Roberts", "author_profile_id": "81100586066", "affiliation": "University of Evansville, Evansville, IL, USA", "person_id": "P1728660", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640026", "year": "2009", "article_id": "1640026", "conference": "OOPSLA", "title": "The SmaCC transformation engine: how to convert your entire code base into a different programming language", "url": "http://dl.acm.org/citation.cfm?id=1640026"}