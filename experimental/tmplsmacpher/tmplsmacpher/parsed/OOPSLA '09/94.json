{"article_publication_date": "10-25-2009", "fulltext": "\n What is wrong with the Software Development? Research Trends and a new Software Engineering Paradigm \n Francielle S. Santos Hermano P. Moura Federal University of Pernambuco, Informatics Center, Federal \nUniversity of Pernambuco, Informatics Center, Recife, Brazil Recife, Brazil fss@cin.ufpe.br hermano@cin.ufpe.br \nAbstract Since the 60's the demand for more complex software s in a shorter time-to-market has been increasing. \nThis fact led major advances in the field of Software Engineering, how\u00adever, still nowadays the development \norganizations are facing problems with productivity, software quality, proc\u00adesses adoption and communication. \nSeveral re-searches try to find these issues reasons and address some solutions, but in many cases the \nworks identify isolated issues, giving isolated alternatives. So, what are the real problems with software \ndevelopment? Is there a main question to be solved? Looking for these and other answers, this paper analyses \nsome research trends like PSEEs, Knowledge Management, Communication, and Interactivity resources and, \nbased on them, proposes a new Software Engineering paradigm focused basically on people, information \nand an environment with Augmented Reality support. Neverthe\u00adless each drop of paradigm reveals challenges \nas the sus\u00adtainability of the approach itself. To deal with this, the present work also proposes the \nuse of Intervention Theory, to reduce the impact of the changes to a development team. Categories and \nSubject Descriptors D.2 [Software En\u00adgineering]: D.2.6 Programming Environments - Inter\u00adactive environments. \nD.2.9 Management Productivity, Programming teams. D.2.10 Design - Methodologies. General Terms Design, \nHuman Factors, Management. Keywords Augmented Reality; Communication; Inter\u00advention Theory; Knowledge \nManagement; Software En\u00adgineering. Permission to make digital or hard copies of all or part of this work \nfor personal or classroom use is granted without fee provided that copies are not made or distributed \nfor profit or commercial advantage and that copies bear this notice and the full citation on the first \npage. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior \nspecific permission and/or a fee. OOPSLA 2009, October 25-29, 2009, Orlando, FL, USA. Copyright &#38;#169; \n2009 ACM 978-1-60558-768-4/09/10 $10.00. 1. Introduction Since the 60 s software crisis, have been increasing \nthe demand for even more complex software s and its constant evolution. The software time-to-market is \nshortening and the development organizations have to organize their re\u00adsources to deploy software s with \nquality and quickly. To adapt to the new reality, emerged advances in areas such as Software Engineering \nand Quality and, Project Manage\u00adment. Also became common the team specialization per roles, making the \nsoftware development task similar to an industry production line. In this context, software projects \nare executed taken into consideration not only deadlines, budget and scope. Risks, environment and team \nmanagement, in addition to the defi\u00adnition of development processes, are decisive variables to obtain \ngood project results. Although so many efforts to improve development pro\u00adductivity, and software quality, \ndata of Standish Group Chaos Report publication [1] denote that only 35% of soft\u00adware projects started \nin 2006 were successful. This way, still nowadays we can say that the software crisis is actual. In this \nsense Pressman advocates that software developers are capable of producing good software most of the \ntime, but the great problem is how to produce software fast enough to meet the growing demand for more \nproducts [2], fact that updates the software crisis concept. So, with this perspective, several questions \nhave risen: How can a specialized team become productive?  How to provide software with quality in \ntime?  How can information be efficiently spread in a de\u00advelopment team?  The basic question is: what \nis wrong with software de\u00advelopment? Many recent works in the fields of Software Processes, Knowledge \nManagement, Software Quality and Teams Communication Techniques investigate the prob\u00adlems, its reasons \nand propose some solutions.  Seeking for a good set of possible alternatives, it will be presented some \nresearch trends in the areas above, in addi\u00adtion to how to intervene efficiently to change this reality. \nFinally, the alternatives will be combined into in a proposal of a new Software Engineering paradigm. \nThis paper is divided as follows. Section 2 gives an overview of Trends in Software Engineering. Section \n3 describes the trends in Knowledge Management and Com\u00admunication. Section 4 illustrates the Augmented \nReality concepts, while Section 5 shows the Intervention Theory. The section 6 presents the new Software \nEngineering Para\u00addigm.  2. Trends in Software Engineering The term software engineering emerged in the \nNATO Working Conference on Software Engineering in 1968 [3], defined as the establishment and use of \nsound engineering principles in order to obtain economically software that is reliable and works efficiently \non real machines . A more recent definition is made by IEEE in the IEEE standard 610-12 (1999): software \nengineering is the application of a systematic, disciplined, quantifiable approach to the de\u00advelopment, \noperation, and maintenance of software; that is, the application of engineering to software . Since the \nsoftware crisis, the Software Engineering has experienced progress with the specialization of many fields \nto improve quality and productivity of software systems. However, as said previously, in despite of such \nprogress, nowadays still exists a gap between the market demand and the software development organizations \nproductivity. It means that it is still an aspiration to establish software de\u00advelopment as an engineering \ndiscipline [4]. One of the actual interest areas of Software Engineering is the Process Technology, comprising \nthe building of tools and environments for modeling, execution simulation of software development processes, \nbeyond the development of software processes. Those environments are known as PSEEs (Process-Centered \nSoftware Engineering Environ\u00adments) [5]. Thus, to attend the market demand, the software devel\u00adopment \norganizations have been using PSEEs as alterna\u00adtives for productivity improvement or even for deployment \nof software processes, which is currently a prerequisite for the software developers to remain competitive \nin the mar\u00adket. However, software building demands a development team with different skills, as well \nas mechanisms to support teamwork for delivering the product in time. So, the great challenge in this \narea consists in providing environments that enable software development according to schedule, budget, \nscope and quality, previously agreed, respecting the organizational culture, and guided to allow high \npro\u00adductivity rates in multidisciplinary teams. This way, it is not enough to these environments inte\u00adgrate \nresources and make them available to the team, but is a real need for each specialized role to access \nits own vi\u00adsion of information and tool resources, to ensure that a spe\u00adcific task will be executed efficiently, \naccurately and with quality. So, two important aspects arise here: the Knowl\u00adedge Management, that focus \non maximizing the enter\u00adprise s knowledge-related effectiveness and the returns from its knowledge assets, \nrenewing them constantly [6]; and Software Quality Assurance. The first one will be ad\u00addressed in the \nnext section. There are many initiatives to ensure the software quality assurance. One of the most important \nis the CMMI (Capa\u00adbility Maturity Model Integration) [7], which defines qual\u00adity normative models and \nmethods for software process improvement (SPI). Based on models like this, the devel\u00adopment organizations \nare investing in SPI, increasing the number of certified organizations in the market. Although the increasing \ninvestments in SPI, about 60% of these initiatives fail or do not evolve as expected [8], discouraging \nthe developers or even making them averse to SPI projects. As can be seen, even existing several works \nin soft-ware engineering field to achieve productivity and quality, the current software science and \ntechnology base is inadequate to meet current and future needs in software construction [9][10]. Combining \nthe adoption of development processes supported by PSEEs, with quality assurance initiatives do not guarantee \ngood results. Above all the possible conjunc\u00adtions are the developers and organizations cultural assets, \nwhich must have their own needs satisfied for the success of the overall enterprise. So, the works of \nthe state of art are focal points that need to be taken into consideration when proposing solu\u00adtions \nto software s development problems, but it is required also to propose innovative approaches to lead \nsatisfactorily with actual faced problems.  3. Trends in Knowledge Management and Communication These \ntwo areas are being discussed together because both are related to information. While one deals with \nthe man\u00adagement of information, the other deals with the spreading of it. I.e., once generated, this \ninformation must be man\u00adaged, stored, and made available beyond the communica\u00adtion of it. Software Engineering \n Knowledge Management In addition to using PSEEs, also to be sustainable on the market, the knowledge \nwas recognized as one of the most relevant intangible assets of software development organi\u00adzations [11]. \nThis asset can be categorized as explicit knowledge or tacit knowledge [12].   generates commitments \nthat are managed by     fosters fosters mediates mediates Perception mediates fosters demands \n Explicit knowledge is formal, like the knowledge found in the documents of an organization. This kind \nof knowl\u00adedge is rooted in the organization, even if the human capi\u00adtal changes, it remains. Tacit knowledge \nis personal, related to individual ex\u00adperience. Each different explicit knowledge interpretation or even \npersonal life experiences contributes to diversity of tacit knowledge. In this case, the spreading and \nimplanta\u00adtion of this knowledge, generated by each developer, throughout the organization constitutes \na big challenge. The effectiveness of the spreading of both kinds of knowledge is determinant to attend \nthe market demand for quality and productivity, and some problems can arise in this context: 1. The development \nteam difficulty for understanding, ab\u00adsorb and apply the development process; 2. Knowledge centralized \nin some organization roles.  About the first topic, the complexity of the organiza\u00adtional context by \nitself makes the perception of the process as a whole a big challenge for the professionals involved. \nThese professionals need to access different visions (or information subsets) of the process, which must \nbe pre\u00adsented adequately and according to the professional role in the organization (for example: manager, \nrequirements ana\u00adlyst, and architect). The second topic is intrinsically related to communica\u00adtion issues, \nto how the knowledge can be communicated, being accessible and contributing to its interpretation by \nother person. This subject will be treated in the next sub\u00adsection.  causes In this sense, efforts \nhave been undertaken in the areas of Knowledge Management [13] and agile methodologies like Scrum and \nXP, in order to approximate developers to the processes adopted in an organization level, simplifying \nand promoting its usage, as only the knowledge required for a given purpose: a project iteration, a sprint, \na set of use cases or stories, etc; is worked at a time.  4. Communication The building of complex software \nrequires a multidiscipli\u00adnary team, formed by qualified professionals, which com\u00adplement their skills \nand get feedback one from each other [14]. A team can generate more alternatives analyzing its advantages \nand disadvantages, to select the viable ones and make decisions [15]. Nevertheless, the performance of \nteams working on common goals refers to more difficulties to that those ad\u00addressed in the previous sub-section. \nIn this context arises the sociotechnical systems theory, which advocates that any work system requires \nboth a technology and a social structure linking individuals with the technology and with each other \n[16]. Under such structure, teams complete modules of work, making decisions and learning continu\u00adously, \ninteracting with others [17] [18]. So, the people in a team must need to collaborate with each other, \nto avoid a communication bottleneck along the development. To denote this need, will be explained a 3C \ncommunication model, presented in Figure 1. This model shows that, to collaborate, the people in a deals \n Figure 1. 3C communication model [14].   team have to communicate (exchanging information), to organize \n(coordinating) and to work together in a shared environment (cooperating). Through the information ex\u00adchanges \n(during the communication process), commitments are generated (and managed by the coordination). So the \ncoordination has to organize the tasks, to be executed in a cooperative way, by the team. At this point \nthe people have to communicate again, to renegotiate and make decisions on situations not previously \nknown. As can be seen, the collaboration presents a cyclical aspect: a person is in\u00adformed about what \nis happening, about what other people are doing, and acquires information necessary for their work [14]. \nThis way, to communicate effectively at the organiza\u00adtional level, in addition to managing the knowledge \nto be available, also must be focused on how to communicate this Knowledge adequately to ensure that \nthe processes run successfully in the organization. Again, the line of work presented focuses on people \nas agents for the institution success.  5. Augmented Reality One area of research that provides interactivity \nis the Aug\u00admented Reality (AR), which emerged as an evolution of the Virtual Reality (VR). While VR simulates \nin third dimen\u00adsion the real world or any virtual world, the AR develops this concept, allowing the user \nto see the real world with additional objects or without real objects (removed from reality). Thus the \nAR complements the real world instead of only overlap it [19]. Augmented Reality enables increased user \ninteraction involving the senses of hearing and touch, through the use of extra devices such as gloves, \nearphones and controls [20]. This way the AR increases the user perception of real world, providing information \nthat he would not have access only through their senses, in a normal environment. To illustrate some \nof AR applications, on Figure 2 is presented a 3D model of demolished building at its original location \n[21]. In this picture, all the landscape is real, ex\u00adcluding the building, which is virtually inserted. \nToday, this type of resource is being used in corporate environments for meetings, lectures and other \nactivities. One example of it in the Augmented Surfaces system (see Figure 3), in which users can manipulate \ndata through both real and virtual mechanisms, interacting with information using projective display \n[22]. Only by analyzing the two examples of AR applications given, is denoted how information can be \ninteractively treated in a corporation environment, adding value to ac\u00adtivities such as products or prototypes \ndemonstrations, like in the first example, or even to brainstorming and meetings as in the second example. \nThis area can complement the others already discussed, cooperating to an effective communication through \ninterac\u00adtive resources and applications, improving the knowledge management and the concept of PSEEs \npresented, reducing the burden of support tools common used in the manage\u00adment of a project development. \n 6. Intervention Theory As showed before, there are many research areas to im\u00adprove the software development, \nfocusing on team produc\u00adtivity, software quality, knowledge management and efficient communication. Beyond \nthese works, there is the augmented reality too, which merges virtuality with reality and could be helpful \nto upgrade the development environ\u00adment, or even shortening geographic distances between developers and \nresources. This way, exists a considerable need for the organiza\u00adtion to present structure and culture \nthat support the soft\u00adware processes adoption, as well as SPI initiatives. Then, the processes have to \nbe adapted to the organization reality and have an efficient knowledge management has to be implemented. \nTo accomplish these goals it is essential to have the developers engagement, that is, the whole change \nprocess is focused and depends on people. But there are variables that can negatively influence the implementation \nof these improvements initiatives, includ\u00ading development processes complexity, little involvement of \ndevelopers with the initiatives, non-matching of the im\u00adprovement goals with organizational goals, lack \nof direc\u00adtion support, small projects time-to-market, and organizational culture. In this complex change \ncontext, it is worth highlighting the need to intervene in the organization ensuring that the proposed \nchanges are good and useful, and promoting the opportunity for definition, deployment and implementation. \nThis kind of well-succeed change is supported by the In\u00adtervention Theory [23].   Figure 4. The new \nSoftware Engineering paradigm proposed. This theory defines an intervention into an organization as any \ninitiative that seeks to help the organization under\u00adstand and improve the factors of effectiveness, \nefficiency and competence [24]. So, before intervening in an organi\u00adzation, all the roles involved need \nto have access to rele\u00advant information, to decide how can the intervention could be beneficial to the \norganization. This theory complements the works previously pre\u00adsented, strengthening the knowledge management \nand communication, and supports the change process as a whole. In addition to this, the application of \nsuch theory increases the organization and developers self-knowledge, so that the communication and decision \nmaking become more effective and conscious.  7. A New Software Engineering Paradigm Based on the software \ndevelopment needs and research trends delineated along the text is proposed a new Software Engineering \nparadigm: Software Engineering Based on Presentations (see Figure 4), supported by the following key \nareas: SE (Software Engineering) The actual paradigm, the base of the new approach.KM (Knowledge Man\u00adagement) \n The area that studies how to manage ef\u00adficiently the knowledge.  PT (Presentation Techniques) Area \nto study how to communicate well, how to make the relevant data available in time to specific roles in \nthe organization.  InT (Intervention Theory) Theory that discusses how to intervene in systems of interaction \nactors for the benefit of the organization.  AR (Augmented Reality) Field of research that deals with \ncombination of reality and computer gen\u00aderated data.  First of all, the proposed work includes an investigation \nof the different development project environments, indicat\u00ading the possible causes of project fails, \nseeking for answers to the problems mentioned in the paper introduction. Based on this investigation \nwill be elaborated the new paradigm, strongly focused in Knowledge Management and supported by an interactive \nenvironment. The main goal of this paradigm is to speed up the devel\u00adopment of a software project, focusing \nnot on the project activities but in the information produced throughout the development. The differential \nis the way the information is spread through the development team. The idea is to pre\u00adsent every single \nproject result. Thus, the focus is trans\u00adferred from the process tasks to the process results. This characteristic \nhas to be strongly based on Knowledge Man\u00adagement (KM), one of the key areas of the paradigm. As an example, \nwhen some module is coded it must be presented by its author to the rest of the team. Firstly the code \nmust be presentable, well-written. This fact increases the software quality. Secondly, there must be \nsupport of interactivity to facilitate and stimulate the production of this kind of material, making \nit available to the rest of the team. The benefits of this approach is that the development process become \nmore concise and practical, the develop\u00adment team, usually averse to processes definitions, become closest \nto the process in its core aspects: execution and results. Removing the burden of process documentation, \na new issue arises: the quality of presented results and the quality of the presentation itself. Thus \nthe entire team naturally takes the responsibility for implementing the process and for the quality of \nresults, the greater goals of the major ini\u00adtiatives of software process improvement, followed by the \ndaily learning of the process by the team, also favored in this approach. To ensure the success of this \napproach, an\u00adother paradigm key area must be developed and applied: Presentation Techniques (PT), making \nthe team member to develop a new expertise: communicate well and present your work, spreading the project \nknowledge.  To support this proposal, another key area, the Aug\u00admented Reality (AR) will be applied \nin the study and defi\u00adnition of interactive organizational environments, increasing the reach and quality \nof communication based on presentations, in addition to better support product demonstrations and distributed \nwork. To improve the communication aspects of the paradigm and facilitate its adoption, it will be used \nthe principles of the Intervention Theory (InT). These principles will guide on how to intervene in an \norganization to implement this new paradigm and how to communicate effectively. Issues related to what \nkind of information should be made avail\u00adable, when and for whom, will be treated, besides tech\u00adniques \nto deal with problems and adverse situations. So the team will communicate better both internally as \nexternally, maximizing the success opportunities of the change of paradigm.  References [1] Standish \nGroup. 2006. The Extreme Chaos. Standish Group International, Inc. [2] Pressman, R. S. 2005. Software \nEngineering: a practitioner's approach. McGraw-Hill, 6th ed. [3] Naur, P., Randell, B. 1969. Software \nEngineering: Report of the Working Conference on Software Engineering. NATO Science Committee, 1969. \n[4] Feiler, P., Gabriel, R. P., Goodenough, J., Linger, R., Long\u00adstaff, T., Kazman, R., Klein, M., Northrop, \nL., Schmidt, D., Sullivan, K., Wallnau, K. 2006. Ultra-Large-Scale Systems The Software Challenge of \nthe Future. Software Engineering Institute, Carnegie Mellon. [5] Derniame, J., Kaba, B., Wastell, D. \n1999. Software Process: Principles, Methodology and Technology. Lecture Notes in Computer Science, 1500, \nSpringer. [6] Wiig, K. M. 1997. Knowledge Management: An Introduction and Perspective. The Journal of \nKnowledge Management, Knowledge Research Institute, Inc, v. 1, n. 1. [7] CMU/SEI. 2005. CMMI\u00ae Performance \nResults. Carnegie Mellon University Software Engineering Institute. [8] Debou, C., Kuntzmann-Combelles, \nA. 2000. Linking soft\u00adware process improvement to business strategies: experiences from industry. Software \nProcess: Improvement and Practice, John Wiley &#38; Sons, Ltd, v. 5. [9] Jackson, M. 2006. The Structure \nof Software Development Thought. In Structure for Dependability: Computer-Based Systems from an Interdisciplinary \nPerspective. Springer, p. 228 253. [10] Boehm, B. 2006. A View of 20th and 21st Century Software Engineering. \nIn Proceedings of the International Conference on Software Engineering (ICSE), ACM Press, p. 12 29. [11] \nBorghoff, U. M., Pareschi, R. 1997. Information Technology for Knowledge Management. Journal of Universal \nComputer Science, v. 3, n. 8, p. 835-842. [12] Nonaka, I., Takeuchi, H. 1995. The Knowledge-Creating \nCompany. Oxford: Oxford University Press. [13] Alavi, M., Leidner, D. E. 1999. Knowledge Management Systems: \nissues, challenges and benefits. Communications of the Association for Information Systems, v. 1. [14] \nFuks, H., Raposo, A.B., Gerosa, M.A., Lucena, C.J.P. 2005. Applying the 3C Model to Groupware Development. \nInterna\u00adtional Journal of Cooperative Information Systems (IJCIS), v. 14, n. 2-3. [15] Fuks, H., Gerosa, \nM. A., Lucena, C. J. P. 2002. The devel\u00adopment and application of distance learning on the Internet. \nThe Journal of Open and Distance Learning, v. 17, n. 1. [16] Cramtom, C. D., Webber, S. S. 2005. Relationships \namong geographic dispersion, team processes, and effectiveness in software development work teams. Journal \nof Business Re\u00adsearch, v. 58 p. 758 765. [17] Katz, D., Kahn, R. 1966. The social psychology of organiza\u00adtions. \nWiley. [18] Rousseau, D. 1977. Technology differences in job character\u00adistics, employee satisfaction, \nand motivation: a synthesis of job design research and sociotechnical systems theory. Organ Behav Hum \nPerform 1977, v.19 p. 18 42. [19] Azuma, R. T. A Survey of Augmented Reality. 1997. Pres\u00adence: Teleoperators \nand Virtual Environments, v. 6, n. 4, p. 355.385. [20] Azuma, R. T., Baillot, Y., Behringer, R., Feiner, \nS., Julier, S., Macintyre, B. 2001. Recent Advances in Augmented Reality. IEEE Computer Graphics and \nApplications, v. 21, n. 6, p. 34.47. [21] H\u00f6llerer, T. et al. 1999. Exploring MARS: Developing In\u00addoor \nand Outdoor User Interfaces to a Mobile Augmented Reality System. Computers and Graphics, v. 23, n. 6, \np. 779\u00ad 785. [22] Feiner, S., MacIntyre, B., H\u00f6llerer, T. 1997. A Touring Ma\u00adchine: Prototyping 3D Mobile \nAugmented Reality Systems for Exploring the Urban Environment. Proc. 1st Int.l Symp. Wearable Computers \n(ISWC 97), IEEE CS Press, pp. 74-81. [23] Argyris, C. 1970. Intervention Theory. A Behavorial Science \nView. Addison-Wesley. [24] Argyris, C., Sch\u00f6n, D. A. 1974. Theory in Practice. Increas\u00ading Professional \nEffectiveness. Jossey-Bass Publishers.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Since the 60's the demand for more complex software's in a shorter time-to-market has been increasing. This fact led major advances in the field of Software Engineering, however, still nowadays the development organizations are facing problems with productivity, software quality, processes adoption and communication. Several researches try to find these issues reasons and address some solutions, but in many cases the works identify isolated issues, giving isolated alternatives. So, what are the real problems with software development? Is there a main question to be solved? Looking for these and other answers, this paper analyses some research trends like PSEEs, Knowledge Management, Communication, and Interactivity resources and, based on them, proposes a new Software Engineering paradigm focused basically on people, information and an environment with Augmented Reality support. Nevertheless each drop of paradigm reveals challenges as the sustainability of the approach itself. To deal with this, the present work also proposes the use of Intervention Theory, to reduce the impact of the changes to a development team.</p>", "authors": [{"name": "Francielle S. Santos", "author_profile_id": "81444601829", "affiliation": "Federal University of Pernambuco, Recife, Brazil", "person_id": "P1728326", "email_address": "", "orcid_id": ""}, {"name": "Hermano P. Moura", "author_profile_id": "81100133115", "affiliation": "Federal University of Pernambuco, Recife, Brazil", "person_id": "P1728327", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640053", "year": "2009", "article_id": "1640053", "conference": "OOPSLA", "title": "What is wrong with the software development?: research trends and a new software engineering paradigm", "url": "http://dl.acm.org/citation.cfm?id=1640053"}