{"article_publication_date": "10-25-2009", "fulltext": "\n Trailblazer: A Tool for Automated Annotation Refactoring Myoungkyu Song and Eli Tilevich Wesley Tansey \nDept. of Computer Science Lincoln Vale LLC Virginia Tech, Blacksburg, VA 24061, USA wtansey@lincolnvale.com \n{mksong,tilevich}@cs.vt.edu Abstract Since annotations were added to the Java language, many enterprise \nframeworks have been transitioning to using an\u00adnotated Plain Old Java Objects (POJOs) in their latest \nre\u00adleases. Our automated refactoring tool, Trailblazer, allevi\u00adates the maintenance burden of such annotation \nrefactoring tasks. The tool implements a novel approach that leverages a machine learning algorithm to \ninfer semantics-preserving rules that are then used to automatically transform legacy Java classes. Using \nTrailblazer involves two phases. First, given an XML-based framework application, a programmer creates \nan annotation-based version of the application by hand, with Trailblazer recording the programmer s actions. \nTrailblazer then uses inductive learning to infer generalized upgrade rules. In the second phase, other \nprogrammers can apply the inferred general transformation rules to upgrade any other application that \nuses the same framework. Thus, once one developer has trailblazed through the hurdles of manually upgrading \nfor a given framework, other developers can au\u00adtomatically follow along the beaten path. In this demonstra\u00adtion, \nwe will use transparent persistence as our example do\u00admain to show how Trailblazer can infer generalized \nrules and then automatically upgrade a legacy enterprise application that uses EJB 2.0 XML con.guration \n.les, to use EJB 3.0 annotations. Categories and Subject Descriptors D.2.3 [Software En\u00adgineering]: Coding \nTools and Techniques Program edi\u00adtors; M.0 [Knowledge Management]: Knowledge acquisi\u00adtion; M.4 [Knowledge \nManagement]: Knowledge modeling General Terms Languages, Experimentation Keywords Refactoring, Frameworks, \nMetadata, Annota\u00adtions, Eclipse Copyright is held by the author/owner(s). OOPSLA 2009, October 25 29, \n2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. 1. Introduction As programming technologies \nand tools become more so\u00adphisticated, declarative programming has come to the main\u00adstream of enterprise \nsoftware development. In enterprise computing, many non-functional concerns, including per\u00adsistence, \nsecurity, and distribution, are implemented using frameworks. Frameworks support declarative programming \nby requiring that the programmer use metadata to declare certain programming language constructs (i.e., \nmethods, .elds, etc.) as interacting with framework services. Then, based on the programmer-supplied \ndeclaration, the frame\u00adwork provides the requested services. For example, instead of persisting a .eld \nby hand, the programmer simply de\u00adclares the .eld as persistent and a persistence framework provides \nthe functionality needed to persist the .eld. A popular metadata format is XML, which is used for writing \nstand-alone XML con.guration .les. Recently, how\u00adever, metadata annotations have become standard in main\u00adstream \nprogramming languages such as Java and C#. By be\u00ading placed right next to the annotated language constructs, \nannotations make the resulting programs easier to under\u00adstand and evolve. Due to these and other advantages \npro\u00advided by annotations, several enterprise frameworks have re\u00adcently transitioned from expressing their \nmetadata informa\u00adtion in XML to annotations. Since changing metadata formats should not affect the functionality \nof the application, transforming the metadata from XML to annotations is a refactoring, a semantics pre\u00adserving \ntransformation. Annotation refactoring [5] refers to migrating the metadata of a framework-based application \nfrom some legacy format (type and naming conventions or XML con.guration .les) to annotations. Annotation \nrefac\u00adtoring, however, is far from trivial and can present a serious software maintenance burden. Annotation \nvalues usually di\u00adrectly correspond to some elements of the XML tree of the original con.guration .le. \nBut the rules that specify which element of an XML .le corresponds to which annotation are not obvious, \nand may take a lengthy global code exploration to fully ascertain. This demonstration showcases Trailblazer, \nan Eclipse plug-in we have created, designed to address the challenges of annotation refactoring. In \nthe following sections, we out\u00ad   Figure 1. Upgrade legacy system based on machine learning. line key \nfeatures of our tool as well as our demonstration plan. 2. Trailblazer Figure 1 describes our upgrading \napproach, which consists of two phases. In the .rst phase, the programmer manually upgrades a legacy \napplication from using XML to using an\u00adnotations. Behind the scenes, Trailblazer computes the dif\u00adference \nbetween the legacy and upgraded versions of the ap\u00adplication, and learns generalized upgrade rules. In \nthe sec\u00adond phase, other developers can apply the rules to upgrade their own applications automatically. \nNext we describe how the Trailblazer Eclipse plug-in implements the functionality required for each of \nthe phases in turn. The programmer clicks the Upgrading Start control to signal to Trailblazer that a \nmanual upgrade phase has begun. Upgrades are performed by hand on a canonical application, and Upgrading \nEnd is selected to signal that the upgrade is complete. At this point, Trailblazer applies a structural \ndif\u00adferencing algorithm to the legacy and upgraded versions of the application and saves the results. \nThe ID3 decision tree learning algorithm [1] is then used to generalize the locations of the attributes \nin XML .les, which correspond to annota\u00adtion values. From this information, Trailblazer infers gen\u00aderalized \ntransformation rules that can be used for updating legacy applications. 3. Demonstration Plan In this \ndemonstration, the utility of Trailblazer will be shown by upgrading a real-world enterprise application \nThe Pre\u00adscription Monitoring Program (PMP)1 which is built using 1 Developed by T4G (http://www.t4g.com). \nthe traditional J2EE [4] three tier architecture. The legacy version of PMP is implemented using EJB \n2.0, which uses XML con.guration .les. The demonstration will use JPet-Store [3] a J2EE framework tutorial \napplication to infer generalized upgrade rules (i.e., the trailblazing phase). Then the inferred rules \nwill be used to automatically upgrade the PMP application to use EJB 3.0 annotations [2] (i.e., the au\u00adtomatic \nupgrade phase). Acknowledgments The authors would like to thank Chris Campbell of T4G for all his help \nwith the PMP case study. References [1] R. Mohan, P. Norvig, S. Russell, and C. O Reilly. Arti.cial Intelligence: \nA Modern Approach. http://aima.cs. berkeley.edu/. [2] D. Panda, D. Clarke, and M. Schincariol. EJB 3.0 \nmigration. Technical report, Oracle, October 2005. [3] Sun Developer Network. Java Pet Store 2.0 reference \nap\u00adplication. http://java.sun.com/developer/releases/ petstore/petstore1_3_1_02.html. [4] Sun Microsystems \nInc. Java 2 Platform, Enterprise Edition (J2EE), 2003. [5] W. Tansey and E. Tilevich. Annotation refactoring: \ninferring upgrade transformations for legacy applications. In OOPSLA 08: Proceedings of the 23rd ACM \nSIGPLAN conference on Object oriented programming systems languages and applications, pages 295 312, \n2008.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Since annotations were added to the Java language, many enterprise frameworks have been transitioning to using annotated Plain Old Java Objects (POJOs) in their latest releases. Our automated refactoring tool, Trailblazer, alleviates the maintenance burden of such annotation refactoring tasks. The tool implements a novel approach that leverages a machine learning algorithm to infer semantics-preserving rules that are then used to automatically transform legacy Java classes.</p> <p>Using Trailblazer involves two phases. First, given an XML-based framework application, a programmer creates an annotation-based version of the application by hand, with Trailblazer recording the programmer's actions. Trailblazer then uses inductive learning to infer generalized upgrade rules. In the second phase, other programmers can apply the inferred general transformation rules to upgrade any other application that uses the same framework. Thus, once one developer has trailblazed through the hurdles of manually upgrading for a given framework, other developers can automatically follow along the beaten path. In this demonstration, we will use transparent persistence as our example domain to show how Trailblazer can infer generalized rules and then automatically upgrade a legacy enterprise application that uses EJB 2.0 XML configuration files, to use EJB 3.0 annotations.</p>", "authors": [{"name": "Myoungkyu Song", "author_profile_id": "81436594687", "affiliation": "Virginia Tech, Blacksburg, VA, USA", "person_id": "P1728663", "email_address": "", "orcid_id": ""}, {"name": "Eli Tilevich", "author_profile_id": "81100650102", "affiliation": "Virginia Tech, Blacksburg, VA, USA", "person_id": "P1728664", "email_address": "", "orcid_id": ""}, {"name": "Wesley Tansey", "author_profile_id": "81388600058", "affiliation": "Lincoln Vale LLC, Lincoln, MA, USA", "person_id": "P1728665", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640028", "year": "2009", "article_id": "1640028", "conference": "OOPSLA", "title": "Trailblazer: a tool for automated annotation refactoring", "url": "http://dl.acm.org/citation.cfm?id=1640028"}