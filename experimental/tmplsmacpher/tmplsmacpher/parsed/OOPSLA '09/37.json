{"article_publication_date": "10-25-2009", "fulltext": "\n Improving Safety When Refactoring Aspect-Oriented Programs Diego Cavalcanti Department of Systems and \nComputing Federal University of Campina Grande Campina Grande, PB, Brazil diegot@dsc.ufcg.edu.br Abstract \nChecking correctness with respect to a formal semantics is ex\u00adpensive. Thus, the refactoring tools are \ncommonly implemented in an ad hoc way and may perform transformations that do not pre\u00adserve behavior. \nThe problem becomes still worse when we consider refactoring aspect-oriented (AO) programs. We present \na practical technique for increasing con.dence on whether a given transforma\u00adtion applied to an AO program \npreserves behavior. This technique was evaluated against 12 transformations, performed in Eclipse, which \nintended to be refactorings. It detected that 91% of them do not preserve behavior. A second evaluation \nwas accomplished with a 65-KLOC real case study containing 475 classes. It is im\u00adplemented in Java and \nwas refactored to AspectJ. Both versions are intended to be equivalent, but our technique detected a \nbehavioral change. Categories and Subject Descriptors D.2.2 [Software Engineer\u00ading]: Design Tools and \nTechniques General Terms Design, Reliability Keywords Refactoring, Aspect-oriented Programming, Detecting \nBehavioral Changes 1. Introduction Refactoring should preserve the external behavior. However, refac\u00adtoring \ntools are commonly implemented in an ad hoc way, since checking correctness with respect to a formal \nsemantics is pro\u00adhibitive. Therefore, popular object-oriented (OO) refactoring tools (such as Eclipse \nand Netbeans) allow transformations intended to be refactorings but that introduce behavioral changes \n[Ekman et al. 2008]. To detect the changes of behavior, programmers must rely on compilation and tests. \nHowever, test suites are often not good at catching behavioral changes in the refactoring context, since \ntests may also be refactored. For instance, a simple renaming may intro\u00adduce defects [Ekman et al. 2008]. \nSimilar to OO programs, we also have aspect-oriented (AO) refactorings [Monteiro and Fernandes 2005, \nCole and Borba 2005, Hanenberg et al. 2003, Wloka et al. 2008]. In this case, the problem becomes still \nworse, since the most used refactoring tools do not have good support for refactorings in the presence \nof aspects. The Eclipse IDE, for example, supports a small number of refactorings. Nevertheless, it also \nintroduces behavioral changes in programs. Motivating Example. Next, we show an example, which intro\u00adduces \na behavioral change that is not detected by Eclipse. Consider a .nancial environment in which one needs \nto calculate a bank fee whenever the account s balance is updated. Listing 1 shows a class which represents \nthis situation and Listing 3 presents an aspect which calculates and updates the bank fee. Whenever the \nmethod deposit is called, it calls the method updateBalance in order to update the balance. This method \nis a join point picked out by a pointcut at TaxAspect (Listing 3). It updates the .eld bankFee. Listing \n2 presents the Eclipse resulting code when we apply the Inline Method refactoring in updateBalance (Listing \n1). However, Eclipse does not detect the behavioral change: the as\u00adpect (Listing 3) is not changed, so \nthe .eld bankFee (Listing 2) is not updated anymore. Listing 1. Original Version public class Account \n{double bankFee = 0.0; double balance = 0.0; void deposit ( double value ) {... updateBalance ( value \n) ; } void updateBalance ( double v) { balance = balance + v; }} Listing 2. Refactored Version public \nclass Account {double bankFee = 0.0; double balance = 0.0; void deposit ( double value ) {... balance \n= balance + value ; }} Listing 3. Aspect to update the bank fee public aspect TaxAspect {after(Account \na, double v) : set ( double Account . balance ) &#38;&#38; withincode ( * Account . updateBalance ( double \n)) &#38;&#38; args(v) &#38;&#38; target(a) { a . bankFee = a . bankFee + 0.20 * v; Copyright is held \nby the author/owner(s). }} OOPSLA 2009, October 25 29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. \n 2. Approach and Evaluation We propose a technique for detecting behavioral changes in AO programs. \nOur technique generates tests that can be run on both versions of the program: the source (original program, \nbefore the refactoring); and the target (refactored program). They aim at exer\u00adcising the program changes \nintroduced by transformations. Our technique is broken into .ve steps for each transformation, as follow: \n.rst of all (Step 1), we apply a static analysis in or\u00adder to identify methods with the same characteristics \n(return type, name, arguments types and exceptions thrown) which are present in the classes affected \nby the desired transformation, in both source and target versions. In Step 2, we use a modi.ed version \nof Ran\u00addoop [Pacheco et al. 2007] to generate unit tests for the methods identi.ed in Step 1. Randoop \ngenerates unit-tests using feedback\u00addirected random test generation. We modi.ed it in order to generate \ntests to a set of methods in common to both source and target ver\u00adsions. Additionally, it was modi.ed \nto accept Java classes woven with aspects. Step 3 aims at running the generated test suite on the source. \nIf no test fails, the same test suite is also run on the target version of the program (Step 4). If all \ntests run successfully on the target, we improve the con.dence that the transformation does not introduce \nchanges of behavior (Step 5) and then the refactoring can be applied. The technique s work.ow is depicted \nin Figure 1. In summary, our technique generates unit tests, runs it on the source version of the program \nand if the test suite does not fail, the refac\u00adtoring is previewed. Then, the refactored program is tested \nagainst the same test suite. If some test fails, then we warn the user that the transformation does not \npreserve behavior. Figure 1. Our Refactoring Technique We evaluate our technique with 12 non-trivial \nAO programs, to which was applied transformations that are intended to be refac\u00adtorings (Rename Method, \nRename Class, Extract Method, Pull Up Method, Inline Method, Push Down Method and Encapsulate Field), \nbut they introduce behavioral changes. Moreover, we have tested it against some correct refactorings \nand the technique did not produce any false alarms. The subjects are composed of a small set of classes \nand different pointcuts de.nitions and advice declara\u00adtions. For instance, we applied our technique to \nthe example pre\u00adsented in Section 1. It generates tests for the source version of the program and, when \nwe run the generated test suite against the tar\u00adget version, some tests failed. At total, our evaluation \nwas success\u00adful to detect 91% of the behavioral changes. Our technique identi\u00ad.es behavioral changes \nin programs using re.ection, however our current implementation cannot detect methods which differ in \nthe standard output. Also, we cannot apply our technique to concurrent programs. We also evaluate our \ntechnique with OO to AO refactorings. For this purpose, we use Freemind 1, a mind-mapping software writ\u00adten \nin Java, containing 65 KLOC and 475 classes. In order to ex\u00adtract a software product line, some developers \nhave refactored it to AspectJ (target). The refactored program has 472 classes and 7 1 http://freemind.sourceforge.net/ \n aspects. In 90 seconds, we generate 3502 tests which aim at exer\u00adcising 140 LOC of difference in both \nversions. In 3 minutes, our approach has been successful in detecting one behavioral change in the refactored \nprogram. 3. Conclusions In this work, we propose a technique for generating tests in order to .nd behavioral \nchanges in AO transformations, which is useful during refactoring activities. Several AO refactorings \nare proposed in order to restructure ex\u00adisting AO programs [Wloka et al. 2008, Monteiro and Fernandes \n2005, Hanenberg et al. 2003]. Moreover, some work also show how to migrate from OO to AO paradigm, mainly \nfrom Java to As\u00adpectJ [Binkley et al. 2005, Monteiro and Fernandes 2005, Hanne\u00ad mann 2006]. However, \nsince the AO refactorings are not formally proposed, developers must test their applications to check \nif the transformations preserve behavior. Our technique aims to facili\u00adtate this work, analyzing the \nchanges and generating tests to de\u00adtect behavioral changes. Therefore, it increases refactorings safety. \nFormally verifying program refactorings is a challenge [Sch\u00a8afer et al. 2009]. Some approaches contribute \nin this direction. Cole and Borba [Cole and Borba 2005] propose AO programming laws for deriving refactorings \nfor AspectJ. The laws help developers to as\u00adsure that the proposed transformations preserve behavior \nand are indeed refactoring. However, the laws are not proven sound with respect to a formal semantics. \nOur work propose a more practical approach for identifying behavioral changes. As a future work, we intend \nto de.ne speci.c contracts for Randoop in order to increase the chance to .nd behavioral changes in refactorings \napplied to AO programs. Additionally, we aim at supporting concurrency and other non-functional requirements. \nAcknowledgments I would like to thank my advisor Rohit Gheyi for his guidance. I would also like to thank \nthe anonymous referees, Tiago Massoni, M\u00b4arcio Ribeiro, Arthur Marques, Gustavo Soares and Anderson Ledo \nfor their comments. This research is supported by the Na\u00adtional Institute of Science and Technology for \nSoftware Engineer\u00ading (INES 2), funded by CNPq, grant 573964/2008-4. References D. Binkley, M. Ceccato, \nM. Harman, F. Ricca, P. Tonella, L. Coll, and MD Baltimore. Automated refactoring of object oriented \ncode into aspects. In ICSM, 2005. Leonardo Cole and Paulo Borba. Deriving refactorings for AspectJ. In \nAOSD, pages 123 134, 2005. Torbjorn Ekman, Ran Ettinger, Max Schafer, and Mathieu Verbaere. Refac\u00ad toring \nBugs in Eclipse, IDEA and Visual Studio. 2008. Stefan Hanenberg, Christian Oberschulte, and Rainer Unland. \nRefactoring of aspect-oriented software. In Net.ObjectDays, pages 19 35, 2003. Jan Hannemann. Role-based \nrefactoring of crosscutting concerns. PhD thesis, 2006. Miguel P. Monteiro and Joao Fernandes. Towards \na catalog of aspect\u00ad oriented refactorings. In AOSD, 2005. Carlos Pacheco, Shuvendu K. Lahiri, Michael \nD. Ernst, and Thomas Ball. Feedback-directed random test generation. In ICSE, pages 75 84, 2007. Max \nSch\u00a8orn Ekman, and Oege de Moor. Challenge proposal: afer, Torbj\u00a8 Veri.cation of refactorings. In PLPV, \n2009. Jan Wloka, Robert Hirschfeld, and Joachim H\u00a8ansel. Tool-supported refac\u00adtoring of aspect-oriented \nprograms. In AOSD, 2008. 2 http://www.ines.org.br  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Checking correctness with respect to a formal semantics is expensive. Thus, the refactoring tools are commonly implemented in an ad hoc way and may perform transformations that do not preserve behavior. The problem becomes still worse when we consider refactoring aspect-oriented (AO) programs. We present a practical technique for increasing confidence on whether a given transformation applied to an AO program preserves behavior. This technique was evaluated against 12 transformations, performed in Eclipse, which intended to be refactorings. It detected that 91% of them do not preserve behavior. A second evaluation was accomplished with a 65-KLOC real case study containing 475 classes. It is implemented in Java and was refactored to AspectJ. Both versions are intended to be equivalent, but our technique detected a behavioral change.</p>", "authors": [{"name": "Diego Cavalcanti", "author_profile_id": "81444593488", "affiliation": "Federal University of Campina Grande, Campina Grande, Brazil", "person_id": "P1728545", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1639992", "year": "2009", "article_id": "1639992", "conference": "OOPSLA", "title": "Improving safety when refactoring aspect-oriented programs", "url": "http://dl.acm.org/citation.cfm?id=1639992"}