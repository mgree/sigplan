{"article_publication_date": "10-25-2009", "fulltext": "\n The Culture of Programming Languages Sebastian Fleissner Elisa Baniassad Department of Computer Science \nand Engineering The Chinese University of Hong Kong Shatin, N.T., Hong Kong {seb, elisa}@cse.cuhk.edu.hk \nAbstract The theme of this workshop is the proliferation of ideas about calling into question the cultural \nroots of our cur\u00adrent programming languages, and the search for alternative paradigms with other cultural \nbases. Categories and Subject Descriptors D.1.0 [Software / Programming Techniques]: General General \nTerms Languages Keywords Culture, Programming, Software Engineering 1. Introduction Software design and \ndevelopment techniques, such as object\u00adoriented programming, are strongly in.uenced by the rea\u00adsoning \nand thought patterns prevalent in the society they were created in. Cognitive science and evolutionary \npsychol\u00adogy assume that human cognition is universal or, in other words, that individuals from different \ncultures all share the same basic reasoning styles and thought patterns. However, cultural psychologists \nlike Nisbett posit that peo\u00adple from different cultural backgrounds think differently. In his book The \nGeography of Thought Nisbett shows that Eastern (predominantly Chinese and Japanese) and West\u00adern reasoning \nstyles differ greatly: Westerners tend to focus on objects, whereas Easterners focus on .elds of interaction. \nThe goal of this workshop is to create awareness of the relationship between programming paradigms and \ncultural reasoning and thought patterns, to share ideas, and to discuss possible research topics. 2. \nThe Origin of Object-Orientation Aristotelian physics [1], a theory developed by the ancient Greek philosopher \nAristotle in the year 350 BCE , suggests that gravity can be considered to be an attribute that resides \nwithin objects. Heavy objects, such as stones and rocks, pos\u00adsess a stronger gravity attribute than lighter \nobjects. In fact, very light objects like gas and air have a levity attribute instead of a gravity attribute. \nSince gravity is considered as an attribute of objects and not an outside force, Aristotelian physics \nposits the view that the world can be understood and described as a collection of more or less independent \nobjects that can be described and analyzed through categorization and formal logic. The approach of focusing \nmainly on objects and their at\u00adtributes while ignoring possible outside forces is very com\u00admon and encouraged \nin the context of traditional object\u00adoriented software design and development: Objects are iso\u00adlated \nfrom their environment as much as possible and static relationships between objects are de.ned in advance. \n Figure 1. The Origin of Object-Orientation (in UML) The theories by Aristotle and other ancient Greek \nphiloso- Copyright is held by the author/owner(s). phers like Plato are both a mirror of and in.uence \non the OOPSLA 2009, October 25 29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. style of \nreasoning and thought prevalent in the so-called Aristotle s Theories Object-Orientation Consider the \nworld as a static and unchanging col\u00adlection of objects. Analyze objects and their attributes in isolation \nfrom their context. Relevance of possible out\u00adside forces is ignored. Describes programs using a set \nof prede.ned objects with static relations. Isolates objects as much as possible from their context. \nOutside forces are miti\u00adgated. Table 1. Aristotle, Plato, and Object-Orientation Western societies, \nsuch as Europe and North America, where object-oriented programming and most other popu\u00adlar programming \nparadigms originated. Figure 1 uses the object-oriented approach to illustrate the relationship of theories \noriginally formulated by philosophers like Aristo\u00adtle and Plato, their in.uence on Western reasoning \nand thought, and the principles of object-orientation. Table 1 summarizes similarities between Aristotle \ns theories and object-orientation. 3. Initial Work Ancient Chinese philosophers did not focus on objects \nand their attributes, but rather considered the broad context and saw the world in terms of harmony, \ncontext, roles, obliga\u00adtions, and resonance. For example, a person was consid\u00adered not as an individual \nwith a constant unique identity, but rather as a member of several collectives. As described in [4], \nancient Chinese philosophers and people saw the world as a mass of continuously interacting substances \nrather than a collection of discrete objects. Each substance and every event in the world was considered \nto be related to every other event. At OOPSLA 2006, we presented a paper called the Geog\u00adraphy of Programming \n [2] that outlined our initial vision for alternative programming languages based on the ideas found \nin Chinese philosophy, which lend themselves bet\u00adter to description of interactions between entities. \nIn this paper we present a study, in which we interview Chinese participants about how they would describe \na typical object\u00adoriented scene, and then attempt to capture and distill their descriptions into the \nguidelines for an alternative program\u00adming paradigm. In our OOPSLA 2008 paper Towards Harmony-Oriented \nProgramming we introduced our work towards proposing a concrete software development approach based on \nprinciples found in Chinese philosophy. The main idea behind harmony-oriented programming (HOP) is that \npieces of a program always interact with their en\u00advironment as a whole and usually not with other program \nparts directly. Table 2 illustrates important conceptual dif\u00adferences between harmony-oriented software \nprogramming and object-oriented programming (OOP). Harmony-oriented programming challenges established \nand widely accepted object-oriented design principles, such as strong encapsula\u00adtion, information hiding, \nand inheritance, and favors more .exible and ah-hoc approaches for structuring and imple\u00admenting programs. \nApart from proposing harmony-oriented principles, our re\u00adcent work focuses on constructs of harmony-oriented \npro\u00adgrams and a Smalltalk-based runtime and development en\u00advironment. Table 2. Object-Orientation and \nHarmony-Orientation 4. About the Organizers Sebastian Fleissner recently received his Ph.D. from the \nChi\u00adnese University of Hong Kong where he was working with Elisa Baniassad. He has published several \npapers at Onward! in the area of harmony-orientation and self-sustaining sys\u00adtems. Elisa Baniassad is \nan assistant professor at the Chinese Uni\u00adversity of Hong Kong, and has been actively involved in On\u00adward! \nfor several years. She is very interested in promoting the consideration of fringe programming models. \nReferences [1] Aristotle. Physics. 350 BCE. [2] E. Baniassad and S. Fleissner. The geography of program\u00adming. \nIn OOPSLA 2006: Companion to the 21st annual ACM SIGPLAN conference on Object-Oriented Programming, Sys\u00adtems, \nLanguages, and Applications, pages 560 573. ACM Press, 2006. [3] S. Fleissner and E. Baniassad. Towards \nharmony-oriented programming. In OOPSLA 08: Companion to the 23rd ACM SIGPLAN Conference on Object-Oriented \nProgramming, Systems, Languages, and Applications, pages 819 822. ACM Press, 2008. [4] C. Hansen. Language \nand Logic in Ancient China. University of Michigan Press, 1983.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>The theme of this workshop is the proliferation of ideas about calling into question the cultural roots of our current programming languages, and the search for alternative paradigms with other cultural bases.</p>", "authors": [{"name": "Sebastian Fleissner", "author_profile_id": "81339499723", "affiliation": "Chinese University of Hong Kong, Sha Tin, Hong Kong", "person_id": "P1728409", "email_address": "", "orcid_id": ""}, {"name": "Elisa Baniassad", "author_profile_id": "81414615851", "affiliation": "Chinese University of Hong Kong, Sha Tin, Hong Kong", "person_id": "P1728410", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640086", "year": "2009", "article_id": "1640086", "conference": "OOPSLA", "title": "The culture of programming languages", "url": "http://dl.acm.org/citation.cfm?id=1640086"}