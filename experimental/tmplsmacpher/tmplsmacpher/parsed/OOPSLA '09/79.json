{"article_publication_date": "10-25-2009", "fulltext": "\n Model Transformation by Demonstration Yu Sun Department of Computer and Information Sciences University \nof Alabama at Birmingham Birmingham, AL 35294 yusun@cis.uab.edu Abstract A common approach toward model \ntransformation is to write transformation rules in specialized languages. However, their usage may present \nchallenges to those who are unfamiliar with a specific model transformation language or a particular \nmetamodel definition. The research described in this paper makes a contribution toward simplifying the \ncreation of model transformations by recording and analyzing the operational behavior exhibited by an \nend-user. Categories and Subject Descriptors I.2.2 [Artificial Intelligence]: Automatic Programming; \nI.6.5 [Simulation and Modeling]: Model Development General Terms Algorithms, Design, Languages. Keywords \nModel transformation, demonstration. 1. Background and Motivation Model transformation has emerged as \na core part of Model-Driven Engineering (MDE). Examples of model transformation include code generation \nfrom models, model synchronization and mapping, model evolution, and reverse engineering. Several approaches \nhave been developed to perform model transformations, such as: direct model manipulation, intermediate \nrepresentation, and transformation language support [1]. Direct model manipulation accesses the internal \nstructure of a model instance using an API provided by a host modeling tool, and encodes the transformation \nprocedures in a general-purpose programming language (GPL). This approach is not feasible for end-users \nwho do not have programming experience, because GPLs lack the high-level abstractions that are needed \nby end\u00adusers to specify transformations. In addition, the power of a transformation is often restricted \nby the supported API within the modeling tool. Many modeling tools support importing and exporting model \ninstances in the form of XMI. It is possible to use existing XML tools (e.g., XSLT) to perform model \ntransformations outside of a modeling tool using XMI as an intermediate representation. Although XSLT \ncan be used to transform models, it is tightly coupled to XML, requiring experience to define the transformations \nusing concepts at a lower level of abstraction. A more common and popular approach toward implementing \nmodel transformations is to specify the transformation rules by using a model transformation language. \nAlthough most of these languages are powerful, they still present several challenges to users, particularly \nto domain experts and non-programmers. Even though declarative expressions are supported in most model \ntransformation languages, they may not be at the proper level of abstraction for an end-user, and may \nresult in a steep Copyright is held by the author/owner(s). OOPSLA 2009, October 25-29, 2009, Orlando, \nFL, USA. ACM 978-1-60558-768-4/09/10. learning curve and high training cost. Furthermore, the transformation \nrules are usually defined at the metamodel level, which requires a clear and deep understanding about \nthe abstract syntax and semantic interrelationships between the source and target models. In some cases, \ndomain concepts may be hidden in the metamodel and difficult to unveil [2]. These implicit concepts make \nwriting transformation rules challenging. Thus, the difficulty of specifying metamodel-level rules and \nthe associated learning curve may prevent domain experts from contributing to model transformation tasks \nfrom which they have much domain experience. The research described in this paper contributes a new approach \nto simplify the realization of model transformations, enabling general users (e.g., domain experts and \nnon-programmers) to specify model transformations without knowledge of a specific model transformation \nlanguage or metamodel definition.  2. Related Work Model Transformation By Example (MTBE) [3] is an \ninnovative approach to address the challenges inherent from using model transformation languages. Instead \nof writing transformation rules manually, MTBE enables users to define a prototypical set of interrelated \nmappings between the source and target model instances. From those mappings, the metamodel-level transformation \nrules can be inferred and generated semi\u00adautomatically. Varr\u00f3 proposed a practical and efficient way \nto realize MTBE by using inductive logic programming [4], [5]. The basic idea is to represent the initial \nmappings in the form of logic clauses and then infer the transformation rules using a logic programming \nengine. Similarly, Strommer and Wimmer implemented an Eclipse prototype to enable generation of transformation \nrules from the semantic mappings between domain models [2], [6], [7]. Instead of using a logic programming \nengine, their inference and reasoning process was based on pattern matching. However, the current state \nof MTBE research still has several limitations. The semi-automatic generation often leads to an iterative \nmanual refinement of the generated rules; therefore, the model transformation designers are not isolated \ncompletely from knowing the transformation languages and the metamodel definitions. In addition, the \ninference of transformation rules depends on the given sets of mapping examples. In order to obtain a \ncomplete and precise inference result, one or more representative examples must be found for users to \nsetup the prototypical mappings, which is not always an easy task in practice. Furthermore, current MTBE \napproaches focus on mapping the corresponding domain concepts between two different metamodels without \nhandling complex attribute transformations. Finally, the related work mentioned here primarily has been \napplied to exogenous model transformation, but they are not as beneficial for inferring the refinements \nthat are typical of endogenous model transformations where the source and target models are from the \nsame metamodel.  3. Goals and Objectives The Model Transformation By Demonstration (MTBD) research \ndescribed in this paper further simplifies the model transformation process initiated by MTBE. The contribution \nof MTBD is a technique that will enable all model users (i.e., not only model experts and programmers, \nbut also domain experts and non-programmers) to specify the desired model transformations, without knowing \nany model transformation language or metamodel definition. The realization of MTBD has the potential \nto provide fully automatic generation of transformation rules without manual refinement of a transformation \nspecification. MTBD will also be applicable to both exogenous and endogenous model transformations, enabling \ncomplex attribute computations. In addition, MTBD can be applied to any model instance without being \nrestricted by the availability of appropriate source and target models. 4. Proposed Methodology The \ncore idea is a new technique that records user interactions within a modeling tool and infers a representative \nmodel transformation specification. Instead of inferring the rules from a prototypical set of mappings \n(as done in MTBE), users are asked to demonstrate how the model transformation should be done by directly \nediting (e.g., add, delete, connect, update) the model instance to simulate the model transformation \nprocess step-by-step. The user transforms a source model to the target model during the demonstration \nprocess. A recording and inference engine will capture all user operations and infer a user s intention \nin a model transformation task. A transformation pattern will be generated from the inference, specifying \nthe precondition of the transformation (i.e., where the transformation should be done) and the sequence \nof actions needed to realize the transformation (i.e., how the transformation should be done). This pattern \nserves as an intermediate transformation representation, which can be used to generate different model \ntransformation rules, code, data and other necessary transformation artifacts. The final generated rules \nand code can be reused in any model instance at any time. 5. Experimental Evaluation The evaluation \nof MTBD will be based on three criteria completeness, correctness and simplicity. Regarding the first \ntwo criteria, for each kind of model transformation (i.e., exogenous and endogenous model transformations), \nsome existing transformations written in a specific model transformation language will be selected. For \ninstance, the ATL transformation zoo [8] provides a list of model transformation scenarios that have \nbeen implemented by ATL (e.g., Class to Relational, UML to OWL). MTBD will be used to automatically generate \nthe transformation rules. Given the same set of source models, we can compare the target models produced \nby the two approaches. The similarity between the two sets of target models reflects the completeness \nand correctness of our approach. The simplicity of MTBD will be evaluated by observing the time and process \nfor applying MTBD, as well as the scale of the transformation rules to realize the same task. For example, \nthe size and complexity of an ATL transformation will be compared to the relative effort (in terms of \nmouse clicks and time) to specify the same transformation by demonstration. 6. Current Results The current \nfocus of this work is the implementation of endogenous model transformation by demonstration. Our work \nis implemented in an Eclipse-based domain-specific modeling tool called GEMS (Generic Eclipse Modeling \nSystem) [9]. An Eclipse plug-in has been developed, which partially realizes the MTBD idea in endogenous \nmodel transformations. More specifically, the current status of the MTBD prototype includes: (1) a recording \nengine to completely capture all user operations and related context; (2) an algorithm to optimize the \nrecorded operations, eliminating meaningless operations (e.g., an add operation followed by a delete \noperation are both meaningless if they operate on the same object); (3) the inference and generation \nof a transformation pattern from the recorded operations that describe the weakest precondition and the \ntransformation actions; (4) an algorithm to automatically match a transformation precondition in any \nmodel instance, and execute the necessary transformation actions; (5) support to infer transformations \nwith attribute operations; (6) a correctness checking and undo mechanism to guarantee the correctness \nof the transformation process; (7) fully automatic generation of a transformation pattern, without iterative \nmanual refinement. We have applied our approach successfully to complete several model refactoring tasks \nin sample domains, demonstrating transformation correctness and simplicity improvement. More detailed \ndescription of the examples and representative video demonstrations are provided at the project s web \nsite, which is available at: http://www.cis.uab.edu/softcom/mtbd.  Acknowledgment This work is supported \nin part by an NSF CAREER award (CCF-0643725).  References [1] Sendall, S., Kozaczynski, W.: Model transformation \n- The heart and soul of model-driven software development. IEEE Software, Special Issue on Model Driven \nSoftware Development, vol. 20, no. 5, pp. 42-45, Sep./Oct. 2003. [2] Wimmer, M., Strommer, M., Kargl, \nH., Kramler, G.: Towards model transformation generation by-example. In Proceedings of the 40th Hawaii \nInternational Conference on Systems Science, Big Island, HI, January 2007, pp. 285. [3] Varr\u00f3, D.: Model \ntransformation by example. In Proceedings of Model Driven Engineering Languages and Systems, Genova, \nItaly, October 2006, pp. 410 424. [4] Balogh, Z., Varr\u00f3, D.: Model transformation by example using inductive \nlogic programming. Software and Systems Modeling, vol. 8, no. 3, July 2009, pp. 347-364 [5] Varr\u00f3, D., \nBalogh, Z.: Automating model transformation by example using inductive logic programming. In Proceedings \nof the 2007 ACM Symposium on Applied Computing, Seoul, Korea, March 2007, pp. 978 984. [6] Strommer, \nM., Wimmer, M.: A framework for model transformation by-example: Concepts and tool support. In Proceedings \nof the 46th International Conference on Technology of Object-Oriented Languages and Systems, Zurich, \nSwitzerland, July 2008, pp. 372 391. [7] Strommer, M., Murzek, M., Wimmer, M.: Applying model transformation \nby-example on business process modeling languages. In Proceedings of Third International Workshop on \nFoundations and Practices of UML, Auckland, New Zealand, November 2007, pp. 116 125. [8] ATL Transformation \nZoo. http://www.eclipse.org/m2m/atl/atlTransformations/ [9] Generic Eclipse Modeling System (GEMS). http://www.eclipse.org/gmt/gems/ \n  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>A common approach toward model transformation is to write transformation rules in specialized languages. However, their usage may present challenges to those who are unfamiliar with a specific model transformation language or a particular metamodel definition. The research described in this paper makes a contribution toward simplifying the creation of model transformations by recording and analyzing the operational behavior exhibited by an end-user.</p>", "authors": [{"name": "Yu Sun", "author_profile_id": "81418595134", "affiliation": "University of Alabama at Birmingham, Birmingham, AL, USA", "person_id": "P1728678", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640036", "year": "2009", "article_id": "1640036", "conference": "OOPSLA", "title": "Model transformation by demonstration", "url": "http://dl.acm.org/citation.cfm?id=1640036"}