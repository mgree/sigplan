{"article_publication_date": "10-25-2009", "fulltext": "\n Polymorphic System Architecture Summary Jeffery Bryson (jeffery.e.bryson@lmco.com) Software Engineer \nStaff Lockheed Martin Simulation, Training &#38; Support Categories and Subject Descriptors C.1.4 Computer \nSystems Organization, PROCESSOR ARCHITECTURES, Parallel Architectures, Distributed architectures ; D.2.11 \nSoftware, SOFTWARE ENGINEERING, Software Architectures General Terms Design. Keywords Abstraction, Architecture, \nPolymorphism, Systems Architecture. Abstract Run-Time polymorphism (RTP) has been used in the software \ncommunity for two decades to satisfy dynamic reconfiguration, plug-n-play, extensibility, and system \nredundancy requirements. RTP is also used to construct software systems of systems. System engineers \nnow have the same requirements applied to large-scale system architecture. A Polymorphic System Architecture \n(PSA) use s the same technology, by applying it to the system architecture. By defining specific polymorphic \nrelationship within the system architecture the system architect can reduce the system complexity and \nsatisfy functional requirement. It is Abstraction and the specific relationships to the abstraction that \nallows the architect to define the Types of building blocks that will make up the system. These specific \nrelationships are Abstract Aggregation and Abstract Inheritance . Figure 1 below illustrates these relationships. \n Permission to make digital or hard copies of all or part of this work for personal or classroom use \nis granted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, or republish, \nto post on servers or to redistribute to lists, requires prior specific permission and/or a fee. OOPSLA \n2009, October 25-29, 2009, Orlando, Florida, USA. Copyright &#38;#169; 2009 ACM 978-1-60558-734-9/09/10 \n$10.00. interface, and a polymorphic mediator. A polymorphic mediator allows the system to dynamically \nconnect and reconnect the building blocks of the system. The mediator is one or more applications in \nthe system that allows a polymorphic user to find and connect to a polymorphic provider. A system architect \ncan create a PSA by defining an abstract interface, having a components or entity use (via aggregation) \nthe interface, and having objects instantiated from subclasses (that inherit) from the abstract interface, \nIt is the relationships of inheritance and aggregation, to abstract classes that allows the system to \nbe constructed of building blocks. It is the definition of these specific relationships and abstract \nclasses that allow the system architect to create a PSA and satisfy specific functional requirements \nwith the architecture. Using a PSA will allow the developers to satisfy the following types of requirements: \n Dynamic reconfiguration of system functionality  Plug-N-Play functionality  Extensibility  System \nRedundancy  System Architecture Reuse The system architect needs to understand these technologies, not \nonly to create the system architecture, but to explain how the system architecture can directly satisfy \nthese types of functional requirements. In software, RTP is dependent on creating Abstract interfaces. \nThis same technology is now being applied to non-software components within the system architectures \nof Service Oriented Architecture and System of System solutions. It is easy to translate functional logic \nto (run-time) polymorphic logic. Structure Case logic, (regardless of software or non-software implemented) \ncan be translated as follows: Case value is when red => doSomething(); when blue => doSomethingElse(); \nwhen green => doAnotherthing(); end case; This can be translated into a PSA as follows and is illustrated \nin Figure 2: The value translates to the abstract interface reference.  Each enumerated value (red, \nblue, and green)   becomes a child classes derived from the abstract interface. Each child develops \nits own implementation of doSomething .  The value of a PSA can be measured by mapping the specific \ntypes of requirements identified above to the Abstract Aggregation and Abstract Inheritance relationships. \nThis measurement should be taken from the objects of the system not the classes. In Figure 1 there are \ntwo controller objects that can control any number of the 102 objects instantiated from the concrete \nclasses. As projects become more complex, there is a growing need to reuse software, hardware, and system \narchitecture. A PSA allows the system architect to create an extensible and reusable system design. With \na PSA satisfying requirements at the architectural level the system complexity can be reduced. The ability \nto apply polymorphic technology to software and non-software systems is dependent on the architects, \ncustomers, and program managements understanding of abstract classes, inheritance, and aggregation relationships \nand how these technologies are applied within the problem space. Full paper at http://www.incose.org/orlando/Attach/200905/Polymorphic \nSystem Architecture.pdf  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Run-Time polymorphism (RTP) has been used in the software community for two decades to satisfy dynamic reconfiguration, plug-n-play, extensibility, and system redundancy requirements. RTP is also used to construct software systems of systems. System engineers now have the same requirements applied to large-scale system architecture. A Polymorphic System Architecture (PSA) use's the same technology, by applying it to the system architecture. By defining specific polymorphic relationship within the system architecture the system architect can reduce the system complexity and satisfy functional requirement.</p>", "authors": [{"name": "Jeffery E. Bryson", "author_profile_id": "81444598486", "affiliation": "Lockheed Martin Simulation, Training & Support, Orlando, FL, USA", "person_id": "P1728319", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640048", "year": "2009", "article_id": "1640048", "conference": "OOPSLA", "title": "Polymorphic system architecture summary", "url": "http://dl.acm.org/citation.cfm?id=1640048"}