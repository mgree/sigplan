{"article_publication_date": "10-25-2009", "fulltext": "\n Agile, Anthropology, and Alexander s Architecture: An Essay in Three Voices Jenny Quillien Pam Rostal \nDave West Laboratory of Anthropology Per.cient Highlands University of NM Santa Fe, New Mexico Minneapolis,Minnesota \nLas Vegas, New Mexico jenny@jqsolutions.org pmrostal@comcast.net ofwest@fastmail.fm Abstract During \nits formative decades the software community looked twice to the theories of Christopher Alexander for \ninspiration, both times failing to completely master the architect s most useful insights. Now a third \nopportunity presents itself with Alexander s recent publication, The Nature of Order. Serious apprenticeship, \nhowever, imposes a prerequisite of sober self-re.ection and evaluation. What, really, is the nature of \nthe developer s tasks? Under what philosophical umbrella has the software community matured until now? \nDo other philosophical traditions offer alternative and perhaps more pertinent epistemologies? What voices, \nbesides Alexander s, might contribute to the community s evolution? We address these questions along \nwith theory building, ethnography, weak links, design heuristics, agility, and complex systems, all of \nwhich combine with Alexander s new theories to suggest different ways of doing what we do, better. ACM \nCategories: K. Computing Milieux, K.7 The Computing Profession, K.7.0 General General Terms: Design; \nHuman Factors; Theory. Keywords: Agile; Alexander; complexity; ethnography; patterns; theory-building; \nunfolding. 1. Flings that Flopped DAVE: Christopher Alexander s theories on architecture have already \nin.uenced the course of programming .rst in the late sixties to support software engineering and again \nin the late eighties to support design patterns. I argue that neither time has been for the better and \nthat it s our own damn fault. Even if our profession was young and still seeking an understanding of \nitself and its task, in both cases we eschewed the tougher, more signi.cant, teachings in favor of the \nmore familiar but lesser ones. Alexander offers now Permission to make digital or hard copies of all \nor part of this work for personal or classroom use is granted without fee provided that copies are not \nmade or dis\u00adtributed for pro.t or commercial advantage and that copies bear this notice and the full \ncitation on the .rst page. To copy otherwise, or republish, to post on serv\u00aders or to redistribute to \nlists, requires prior speci.c permission and/or a fee. OOPSLA 2009, October 25-29, 2009, Orlando, FL, \nUSA. Copyright &#38;#169; 2009 ACM 978-1-60558-734-9/09/10...$10.00 another publication with new insights \nthat might.might. transform how we think about software development. I m interested in a third encounter \nwith Alexander and I don t want to screw it up, so I m laying down the gauntlet. We ve hit a dead end \nwith our overly rationalist engineering mind set. Agile, however, is experimenting with other epistemologies \nand is amenable to enhancement through the Alexandrine-plus-Geertz-Naur-Brooks-Csermely concepts presented \nhere. It s the way forward. PAM: Dave, you may get a chilly reception from developers who have achieved \nsigni.cant results using Alexander s ideas about patterns. There are some notable publications and thousands \nof patterns on the web.an iceberg actually (maybe one-tenth is easily accessible) of useful information \nthat mainly wants for organization, indexing, and cross\u00adcorrelation. Perhaps they would agree, though, \nthat the Achilles heel of software patterns lies in the structural point raised in A Pattern Language \n(APL).that patterns exist at different levels of scale and call to each other to form larger composite \npatterns. Fitting them all together is truly dif.cult. JENNY: Programmers don t have the monopoly on \nthat shortfall. Builders failed as well. Most successful examples of pattern languages are from long-standing \ntraditions where generation after generation of builders slowly worked things out, so let s be clear \nabout how dif.cult it actually is when you re starting fresh. A pattern language, as a set of rules for \nconnectivity, is good only when it is morphologi\u00adcally complete (one can concretely visualize the buildings \nit generates) and functionally complete (when it allows all its inner forces to resolve themselves). \nEach pattern has to solve a problem; it is not a template to be mindlessly copied. People fall into this \ntrap of reproducing appearances rather than dealing with fundamental design issues. You see it in all \nthese tacky buildings that ape some historic period, you know, an English Tudor shopping mall, or, whatever. \nAnother common misreading of APL by builders was to take it prescriptively. Some actually referred to \nit as the Bible. Also, when patterns were all the rage, attention was more on APL and less on the two \ncompanion books. APL, a pragmatic how to book, needs A Timeless Way of Building, which explores the larger \nquestion of what for: a quality of eternality. That was why patterns were interesting in the .rst place \nand QWAN (the Quality Without A Name) became shorthand for this ineffable characteristic. The third volume, \nThe Oregon Experiment put aside the questions of form to explore the hypothesis that if the community \ndecision-making processes were sensible, the forms might sort themselves out, just as traditional towns \nwere built successfully without professional architects and planners.  PAM: The software profession, \nas it stands now, must address evolving theories about systems, design, and creativity. In many traditional \ncourses on Systems Analysis and Design, system means a complicated aggregate of components and relationships; \nanalysis, the deconstruction and mapping of a system into a pre-de.ned set of components; and design, \nthe formal speci.cation of component structure and interfaces. When coupled with a tinker toy interpretation \nof Figure 1. The biggest dif.culty for builders and programmers is moving from pattern to language. \nFor a mathematician s helpful insights on how to structure a network of connections see Nikos Salingaros \nThe Structure of Pattern Languages. Figure 2. QWAN is an emergent quality of honed languages. Here in \nStromness in the Orkney Islands individual patterns about loading docks, roofs, windows, building materials, \nscale of buildings, building shapes, building placement against prevailing winds, all overlap, nest, \nand intersect to form a coherent and satisfying building tradition. engineering, this misleads some developers \ninto thinking they have to deliver large complicated systems where every part is correct, every interface \nmeets speci.cations, and every requirement satis.ed. While looking at the trees, they miss the forest \nthe requirement for QWAN. The results can be like the freeways of Los Angeles: a nearly unusable imposition \nthat impedes the living complex system of the city it is supposed to support. Future generations of developers \nwill need an integrated view of the forest, the trees, and all the relationships among them. DAVE: Exactly. \nAnd Alexander is after precisely the trees/ forest or part/whole relationship. We can get confused, however, \nwith what seems to be a schizophrenic aspect to Alexander s work. In his .rst book, Notes on the Synthesis \nof Form, his preface talks about how his work contained both formalism for design and a bunch of funny \ndiagrams. The software world paid attention to his formalisms and ignored his diagrams. Twenty years \nlater, in the eighties, they paid more attention to APL and less to Timeless Way or Oregon. Will the \nsoftware community see The Nature of Order (NO) as more akin to Timeless Way and not APL and therefore \nignore it? JENNY: They might ignore NO because it runs over 2000 pages and tackles everything building, \nscience, nature, art, religion but not software. But, seriously, the schizophrenia is Alexander s way \nof keeping his eye both on the means and the end. Anyway, it s true that APL fans were looking forward \nto NO as a follow on, which it isn t, but Alexander isn t exactly scuttling APL. Disappointed with the \nfunky incoherent buildings that came out of efforts to apply APL, Alexander went looking for deeper water \nin deeper wells.  2. A Third Twirl? JENNY: In NO the focus shifts from timelessness, eternity, if you \nwill, to wholeness, Holiness, if you will. Building for Alexander is a spiritual endeavor; the search \nfor God is low\u00adkey in the early books but comes out loud and clear in NO. (W)holiness of increased life \nin the built environment is his goal; unfolding is the methodology. Biology, the science of generative \nlife, is his reference of choice. DNA might be an overly deterministic set of instructions to be an ideal \nmetaphor but wholeness unfolds somewhat like an embryo unfolds: the living process is from the inside \nout; each stage is whole in its own terms and contains key information for its future. Alexander is after \na process which is structure preserving from phase to phase but one that does allow for some open-endedness. \nPerhaps we can also use the metaphor of individuation. Just as each of us, over time, becomes more and \nmore ourself, a built environment comes into its own uniqueness. In other words, unfolding is through \ncontext n+1 becoming the context for action n+2, etc.  Unfolding allows for robustness in a system \nand for manageability of the building process. Way back in Notes, Alexander recognizes that the task \nof building a beautiful structure is just too much for one person working on a drawing table far from \nthe construction site. Too many variables. In Notes, the attempt was more mechanical, identifying manageable \nsets and subsets and then re\u00adassembly. In NO it is getting each phase in a sequence right, dealing with \njust the variables present at that phase, and then moving forward sure-footedly without costly backtracking \nlater. In NO working with generative sequences supersedes working with patterns. To be clear about the \ndifference, a pattern comes out of human activity and, to borrow Richard Gabriel s term, is mined. APL \ncould be considered a handy history book of success cases. NO explores, at a much deeper level, how structure \ncomes into being through unfolding a radically different process than subdivision and reassembly. DAVE: \nFor our discussion we could say that Windows or SAP exemplify programs dependant on an up-front subdivision \nand reassembly and, indeed, they suffer from tinker toy fragility and inability to change. Smalltalk, \nas an example of an unfolded system, mimics nature and demonstrates superior robustness and adaptability. \nWhen, as the well-known story goes, Steve Jobs went to Xerox to see a demonstration of Smalltalk, he \ncomplained to Dan Ingalls that the scrolling function was jerky, Ingalls said, Yeah, you re right. Ingalls \nthen made one adjustment to a method within one of the graphic objects which then had a systemic result. \nSo, let s look at what s really going on here. Super.cially the C++ code behind Windows or SAP and the \nSmalltalk code can appear to be very much alike: lists of data and lists of functions. However, the devil \nis in the detail: what counts is which piece of data or function goes where. Smalltalk programmers are \nlooking to the natural world when they ask themselves how to compose an object; while C++ programmers \nuse formally de.ned algorithms and data structures. Since Smalltalk unfolds through the accumulation \nof encapsulation decisions, the chances that a single change in a single cell could yield systemic effect \nincrease. Unfolded systems and programs are profoundly different in this way. Similarly, most computer \nscientists, I m afraid, will want to see unfolding as nothing more than the translation of an expression \ninto an equivalent expression and fail to see unfolding as an emergence of form from a process of interaction. \nJENNY: Then consider an Alfred Whitehead math lesson. Whitehead warns us to be clear about unspeci.ed \ncharacter and the process of individuation. 3+3=6 is not the same as 2+4=6. The discovery of mathematics, \nlike all discoveries, says Whitehead, both advanced human understanding and produced novel modes of error. \nIts error was the doctrine of form, devoid of life and motion. We re talking here about a process wherethe \nchrysalis becomes the butter.yina series of linked steps, this becoming with clear continuity between \nphases guarantees the robustness of both product and process. DAVE: But our obsession with gathering \nrequirements, translating them into specs, all in the context of stand-alone artifacts. . . I doubt that \nAlexander has anything to say about building artifacts in this sense, because he is concerned with systems; \nand to the extent that QWAN is an emergent property, complex systems. JENNY: Alexander would agree that \nQWAN is an emergent property of a complex system. In NO he talks explicitly about life as an emergent \nproperty. Volume Four of NO is a cosmology investigating the numinous in the emergent order of things. \nIn Volume Three, however, he talks a lot about artifacts.cement and trusses and all that.after all, buildings \nare artifacts. But, yes, even if you re concerned with making a humble doorknob, that activity is.and \nmust be.within a coherent view of how the world works and how the doorknob is part and parcel of the \n.eld-like structure you re building. But, you re right, Alexander s most signi.cant contribution may \nbe at a meta-level rather than at the level of artifacts.  3. Anthropology and Affairs of the World \nDAVE: The nature of our task.and we will blow our rendezvous with Alexander if we fail to see it.was \n.rst identi.ed by Fred Brooks. Our focus should be on the conceptual construct rather than the details \nof the artifact. Peter Naur went further and argued that the way to understand software development was \nas a process of theory building. Using Naur s vocabulary, a theory is an individual s (or group  consensus) \nmental understanding of certain affairs of the world [and how they will be] handled by, or supported \nby, a computer program. The emphasis on mental is mine, but it agrees with Naur s and Brook s assertions \nthat theory cannot be reduced to models and diagrams and transmitted to others who were not involved \nin their construction of the theory. JENNY: Well then, the software community might look to NO for some \nanswers, but for others they could more pro.tably turn directly to anthropology, and speci.cally, thick \ndescriptions of a culture, a technique developed by Clifford Geertz. By thick descriptions I mean descriptions \nand stories that can t be reduced to the kind of thin documents programmers are accustomed to working \nwith. Thick descriptions reveal the culture in a way that allows outsiders to intuit how a place actually \nfunctions. Broadly speaking, if you want to understand the Deep South, you ll learn more from reading \nFaulkner or Tennessee Williams than from phone books or bus schedules. Also, when it comes to ethnographic \ntechniques, programmers can pro.tably learn from mistakes in building. Listen to this quote from a 1969 \nlecture by mathematician Jacob Bronowski who saw science and art as complementary epistemologies. Every \nbuilding is an invention, no less and no more. It begins with a problem, which has nothing to do with \nthe look, the construction, or the layout of the building, but asks something more searching: how should \nthe activity which the building is to house be carried out? If the architect is not asked to help think \nthis out, he will build what Britain is now full of: of.ce blocks which are meaningless rows of holes \nlinked by tunnels, power stations and town halls which are indistinguish\u00adable, . . . Just replace building \nby program. And heaven knows, architects build to specs and are often far removed from the actual lives \nof the future inmates. Figure 4. Deadly of.ce buildings. Remember that APL mines patterns from traditions \nthat had no professional architects. Lay builders were constructing directly for themselves and knew \nintimately the theory of their own affairs. APL s strength is that the theory of the matters at hand \nis an intrinsic part of the pattern. You know, like the pattern for a farmhouse kitchen embodies the \nvalues of country living. The phenomeno-logical philosopher Martin Heidegger was talking about this connection \nin Building Dwelling Thinking. We have to know how to dwell in order to build. Here s how he describes \nthe knowledge of dwelling behind the Black Forest farmstead. It placed the farm on the wind-sheltered \nmountain slope, looking south, among the meadows close to the spring. It gave it the wide overhanging \nshingle roof whose proper slope bears up under the burden of snow, and that, reaching deep down, shields \nthe chambers against the storms of the long winter nights. It did not forget the altar corner behind \nthe community table, it made room in its chamber for the hallowed places of childbed and the tree of \nthe dead .for that is what they call a cof.n there: the totenbaum and in this way it designed for the \ndifferent generations under one roof the character of their journey through time. A craft that, itself, \nsprung from dwelling. . . Now, consider what happens when such a theory of the affairs of the world is \ndisrespected. In the old pueblos built by Native Americans of the Rio Grande Valley, adobe cubes were \npiled multi-storied, each room and roof terrace was adapted in the most .ne-grain way to the idiosyncrasies \nof the particular builder s family. The village was organized internally to re.ect the clan structure \nand organized externally to relate to key geographical elements in their cosmology.  Then, anthropologically \nignorant, arrogant, and uncaring, HUD steam rolls in with roads that slashed through essential relationships \nbetween buildings and the land, and requires families to abandon the compact village for shoddy single \ndwellings laid out in suburban fashion. Sitting in treeless tracts of windblown desert, the imposed habitat \nis a social disaster, visually sterile, and ecologically unsound. The new infrastructure destroyed the \nexquisite ecology that was there before and hindered anything good happening afterwards.  4. Software: \nStand Alone or in situ? JENNY: The point is that good buildings .t the cultural needs of the inhabitants \nlike hand and glove and so will good software. Developers should be asking, as Bronowski points out, \nsearching questions about how an activity which the program is supposed to support should be carried \nout. For example, UPS couldn t get a handle on the shipping of packages and was losing money. Ethnographic \ninterviews with the blue collar workers on the tarmac revealed that workers called packages hot potatoes \nand .gured they should never be caught at the end of the day with a hot potato, so they sent packages \non anywhere in the vague direction of its destination. Now, passengers object to getting from Minneapolis \nto Los Angeles by way of Atlanta but a package doesn t care. The solution was a computer program that \ngave second and third itineraries for packages that could get caught up in a scheduling snafu.missed \nplanes and so on. And, surely, Dave, parallels can be drawn between HUD and commercially aggressive software \npackages SAP comes to mind that don t bat an eye at killing off existing ecologies and hogging the .eld \nso that nothing else happens either. DAVE: You bet. VisiCalc is a classic. Imagine you are Dan Bricklin \nworking on your MBA at Harvard. The eve of Christmas break, your instructor hands out a miserable assignment, \nblowing your hopes of time off. The assignment deals with the complicated .nancial implications of an \nacquisition. You need to use ledger sheets also called spreadsheets with potentially hundreds of rows \nand columns that have to be painstakingly .lled in along with results of calculations performed on that \ndata. If any bit of data changed, everything had to be recalculated. Your response? You create VisiCalc \nto run on your inexpensive Apple desktop computer. Bricklin s creation was credited with the desktop \nrevolution motivating millions to purchase desktop computers just to run VisiCalc. It improved the quality \nof life of users and was an elegant response to the theory of the matters at hand. The congruence of \ntheory, metaphor, need, and implementation resulted in a construction that exhibited QWAN. Predictably, \nthe commercial food chain moved in and VisiCalc was superseded by other applications (a long line from \nLotus 1-2-3 to Excel). More like HUD, VisiCalc s successors had no elegance of .t between need and response. \nAll of the successors added features at a furious pace in order to be as general purpose as possible, \nresulting in the same amount of life as one of Dilbert s cubicle farms. To be clear, adding features \nis not in itself a bad thing nor are tools for exploring what if scenarios and Excel permitted complex \nmanipulations not possible with VisiCalc. The point is that the commercial evolution of the spreadsheet \ntook it from an artifact within a context to a complicated collection of features. As plug and play spreadsheets \nevolved to be ever more abstract, they made it possible to say almost anything. The more you can say, \nthe more you can say wrong. But the wrongness is in the semantics not the syntax. Steven Levy discussed \nthis in his article for HARPER S, A Spreadsheet Way of Knowledge, way back in 1984. We could be as arbitrary \nas we wished in our assumptions embedded in our calculations, and if it is a number, it must be real. \nPAM: Levy quotes McLuhan in that article we shape our tools, and then our tools shape us. Any medium \nhas the potential for reversing its gains when it becomes pervasive spreadsheets enable what-if scenarios \nbased on insuf.cient variables, so what-if scenarios become reality with unpredictable results. This \nyear s economic collapse is a prime example. DAVE: Let s look at who us is in the shaping of computer \ntools. I want to argue that programmers must shoulder cross\u00adcultural responsibilities. Take this story \nfrom anthropologist Ed Hall. A Texas border town hired a police of.cer, who, although a U.S. citizen, \nhad been enculturated, really, as Mexican. One of his duties was to enforce the town speed limit of 25 \nmph. Diligent, he issued citations to anyone going 26, 27, 28 mph. Relationships with the townspeople \ndeteriorated to the point that he made his traf.c stops with a drawn pistol. The root problem was how \nthese two cultures dealt with the universal concern of ambiguity between Law and Justice. Mexican culture, \nwhich incorporated Napoleonic Law, resolves the ambiguity after the fact while Americans resolve the \nambiguity before the fact. In the U.S. you remain within the realm of Justice until you exceed the speed \nlimit by some generally well known but implicit amount, like 10 mph. In Mexico, one mile over the limit \nis a clear violation of the law, but Justice is served by the courts who are allowed great latitude in \ndeciding mitigating factors of all sorts. Both cultures arrive at the same place but get there from widely \ndivergent paths. A programmer creating, for example, a code for an automated judge would need to know \nwhich larger cultural code was in place. The automated Anglo-Saxon judge would use binary logic while \nthe Napoleonic judge would require fuzzy logic.  5. The Real Heuristic Gold Mine of NO DAVE: So, clearly \nethnography is germane to our task. Neither IT teams nor their clients want the antagonistic relationships \nthat so often prevails and I don t think we can really improve situations without learning how to construct \nthick descriptions about the user s world. However, I believe that Alexander is talking about design \nissues that transcend individual cultures. If we are to develop a theory we must understand affairs of \nthe world not simply the affairs of some small corner of the world. I know Naur was thinking mostly locally \nat the level of a client organization but his other work makes it clear that he looked at larger cultural \nissues. If NO is to inform the computing world, it must be at the level of improving abilities to build \ntheory. I wonder if NO can lead to the design of a system that is whole and also be .ne-tuned to suit \nlocal circumstances that s where ethnography kicks in. Alexander offers a disciplined foundation for \ntheorizing about organic, emergent, complex and dynamic systems just the kind of systems we have to deal \nwith today. JENNY: Of course, you raise a central concern in anthropology. Ethnographic monographs provide \nthe thick descriptions of particular cultures and then human universals are extrapolated. To explore \nyour hunch about the utility of Alexander s work for the computing world, let s start with the big stuff \nand see if there are any heuristics. So, Alexander s theory investigates how to unfold life taking cues \nfrom the great designer, Mother Nature. Alexander comes at the topic from several directions. First of \nall, life is an attribute of space (he means that quite literally) and how it is organized through geometric \nproperties. He de.nes .fteen of them such as CENTERS, BOUNDARIES, VOIDS, CONTRAST, LEVELS OF SCALE, LOCAL \nSYMMETRY, etc. DAVE: What I m counting on is using Alexander s material to gain a better understanding \nof parts and relationships among parts in order to enable design. Take LOCALSYMMETRY. If LOCALSYMMETRY \nis a property of liveliness, then we should establish bilateral symmetry with software re.ecting the \nworld; if an affair of the world involves certain things in certain relationships, then our software \nshould contain analogous things in analogous relationships. Pam knows that I think relational databases \nare an abomination. My antipathy towards them is partly grounded in an idea of broken symmetry. If you \nare building a database system, you .rst construct a model of data, information, and information aggregates \nalong with relationships among them, which re.ects the user s understanding. Then you contort and restructure \nthat model to be consistent with a mathematical abstraction, which puts it in a form that is in\u00adcomprehensible \nto the user. Further violence is done when individual bits of data are force-.tted into a set of data \ntypes. Then still more contortions are required to implement the model and ensure optimal performance \nfor the end product a relational database. PAM: Come on, Dave. You know an RDBMS never exists in isolation. \nIt s a two dimensional view of a multi\u00addimensional system that s always supplemented by code, messages, \ninterfaces, and, hopefully, decision-makers. I ve been working on a wiki-based tool for mapping representa\u00adtions \nof domain terms at multiple levels of abstraction to each other. When you view the system from a domain \ndictionary s perspective, you see LOCAL SYMMETRY around each term. Of course, you have to zoom out to \nsee the relationships among the terms, but hyperlinks and composition hierarchies help to capture those \nrelationships. The wiki adds dimensions that no spreadsheet or RDBMS can capture that s where the symmetry \nlives.  JENNY: The property LEVELS OF SCALE could spark thought about user interface if we extrapolate \nfrom the work of Nikos Salingaros. Subdivision of a form creates information. We experience information \nunderload when forms have too few subdivisions meaning too large a gap between large and small scale \nand therefore lack of coherence. At the other extreme, when forms have subdivisions that are not distinct, \nthen we can t group the elements into scales and we become frustrated with information overload. For \nexample, most towns sport a couple of hopeless traf.c intersections where the scaling of signs, lights, \nand hardscape make for information overload, confusion, stress, and dangerous driving. When the scaling \nfactor is somewhere between two and three, we take pleasure in an interesting but not incom\u00adprehensible \nworld.  PAM: Information underload perfectly describes Microsoft Vista s .le browser. When you encounter \nit there are no You are here signs or a viable road map. Conversely, Acrobat Reader typi.es information \noverload with too many of everything layers in the menu system, dialogue boxes, tabs. As for just right \nI like Picasa s user interface because of its intuitively clear levels and obvious, discrete menu options. \nDAVE: I want to go back to the Alexandrine concept of unfolding and look at its potential utility in \ndesign refactoring (not code refactoring or test refactoring). In computing you take an expression and \ntransform it, using a set of rules, into another expression. A requirement for transformation is preservation \nof truth or provability. In Agile software, you can transform a code expression, using refactorings, \ninto another expression and preserve correctness, which is de.ned as being able to pass the same tests \nas the original code. Maybe Alexander s properties can be used as refactoring guides to help us unfold \nour designs from one construction to another while preserving life. Here s an example: if the presence \nof an RDBMS is a smell, we could address that smell by refactoring our design to include an object database \ninstead, or we might add an analog to a chaperone protein, an object that adds isolation and protection \nto RDBMS in a way that removes or encapsulates an asymmetry before it does harm to the design. In this \nexploration I am focusing on how Alexander might inform the act of design or theory building. In this, \nI am accepting Brooks comment that it is the conceptual construct that is hard; if you get that right, \nthen the implementation of that construct is relatively easy. So I care about the theory, the design. \nHowever, in Agile there is a strong bias against any activity, like design, that would delay testing \nand coding. Design Refactoring is consistent with Agility. As Kent Beck said (paraphrasing here), agile \ndevelopment does not exclude design, it distributes it. You design a little, code a little, refactor \na little and repeat. I m suggesting here a modi.cation: design a little, code a little, refactor your \ncode a little, and then also refactor your design a little; and, as we ve been discussing, seriously \nengage in the up front task of capturing the affairs of the world so that you get that .t with the user \ns culture. The imperative is to realize that we cannot construe structure to structure correlations. \nWe are talking about heuristics and metaphors. In biology, architecture, culture, or software architectures \nwe are looking at components and the relationship among those components and whether those relationships \nare lively or dead. Design Refactoring does not really provide deep insights into the actual nature of \nunfolding, but suggests only a presumed parallel.  6. Resonance JENNY: Let s move on to another way \nof talking about Alexandrine life which involves evaluating the selfhood of an object or an environment. \nSounds a bit wacky but it works. You compare two objects, say two glasses, two lamps, two streetscapes, \nor perhaps two programming environments, and ask yourself.not which one do you prefer.but which one is \nmost like your self. Frankly, I was taken aback when I really engaged in the experiment for the .rst \ntime. The owner of a Moroccan restaurant I used to frequent had a collection of pots from his home country. \nI had already picked out the vase I liked best: a well shaped one with a deep yellow glaze. When I quietly \nsat a while with the imagined possibility of being one of the pots, the one that was most like my self, \nto my own surprise, was a quiet muddy brown with bands of intricate black lines of decoration. When I \nqueried the owner, who knew his pottery, he said the yellow one was a nice piece but the brown one was, \nas any collector would know, the truly .ne pot. Alexander is counting on our ability as living structures \nourselves to discern between degrees of life in the objects around us and, with practice, to improve \non that ability, making increasingly .ne discernments. PAM: This reminds me of how C.S. Lewis described \njoy as the feeling we get of being at home in a place we ve never been before. Somehow, the Absolute \nin such a place resonates with the Absolute within us. We experience joy because we are drawn into that \nunity which we can never reach except by ceasing to be the separate phenomenal beings called we. JENNY: \nDo you think the mirror-of-the-self test could be a heuristic for software development? PAM: Yes, actually \nI do. We can use our own sensitivity as a measuring device. And you know exactly when you ve struck a \nchord by the client s reaction. DAVE: Resonance and selfness apply directly to software in two ways: \nat the macro-level in terms of programming language choice and at the object design level. Each of the \ngates in the following illustrations expresses a philosophy, a set of values, the post modern gate being \nan example of self-conscious architecture, where values are based in meta-abstractions. Same thing in \nprogramming languages. If you read the ACM s History of Programming Languages, the values behind a given \nlanguage are readily evident. Take Smalltalk and C++. The values behind Smalltalk include exploration, \nplay, dialog, simulation, and metaphor. The values behind C++ are discipline, the computer, ef.ciency, \nspeed, control, and mathematical precision. As an ardent humanist and anarchist, Smalltalk is more like \nmyself than C++. I would also generalize to say that Smalltalk has more life than C++. At the level of \nobject design, there is a principle, an\u00adthropomorphization, which facilitates good object design. By \ngood I mean maximum cohesion, minimal coupling, appropriate specialization, adaptability, reusability, \nand most important of all, isomorphism with the real world. Overall, the principle of anthropomorphization \nsimply means the projection of human qualities onto your software objects. If you look at a set of objects \nthat came into existence from a responsibility-driven approach (one that employs anthro\u00ad pomorphization) \nand a set of objects representing the same domain, but which came into existence through a data\u00addriven \napproach you will see very obvious differences. Plus the objects designed as if there were little intelligent \nbeings will exhibit selfness. The others will be decidedly alien.  JENNY: A third way of thinking about \nAlexandrine life relevant to programming is to say that when an object or environment is alive it leaves \nyou alone. I m just back from Japan so let me take one object and one environment example from there. \nI bought a pair of garden clippers, the shape of the handle .ts comfortably in my hand, the spring works \nwith minimum effort, and unlike the Home Depot versions where the plastic bits break in no time, the \nJapanese one is solid. Basically the clippers are designed to let me pay attention to clipping not to \nthe clippers. As for environments, modern Japan is mostly a bore, but Shisen-do, the 17th century hermitage \nbuilt by the Samurai Miyamoto Musashi touches your soul. The utterly frugal building and garden leaves \nyou free to be with your thoughts. Serenity and solitude would be desired affordances of a hermitage, \nso Miyamoto Musahi s theory of the matters at hand was accurate, as was the theory used by the clippers \ncraftsman. As an end-user of programs I .nd that, for example, Adobe InDesign, like the clippers or the \nhermitage, offers this quality of leaving me undistracted so that I can concentrate on getting my job \ndone. It could be instructive to explore how different products embody different theories about end\u00ad \nusers.  7. Agile Artifacts: Design and Process PAM: So far we ve concentrated on NO s relevance to output, \nbut my interest is in how it applies to process in Agile. First practices, like story cards, that support \nand unfolding process; and then in terms of team organization and weak links. Agile development is characterized \nas iterative, incremental delivery and is an instance of unfolding. In agile processes, a single story \nunfolds to tests, to code, to aggregated integrated code, to application, to integrated applications, \nand to systems. Rather than up-front contractual arrangements, a collaborative process (which de.es the \npredictability of a mechanical process) binds and intertwines disciplines. Let me illustrate with one \nparticular sort of unfolding in the agile approach where a client uses simple 3 x 5 story cards and ordinary \nlanguage to record what the organization needs the program to do. The collection of story cards constitute \na product backlog, but that is a misnomer as it not an inventory of discrete speci.cations. Instead, \nthe product backlog is a dynamic and evolving theory in Peter Naur s sense of the term, of what users \nand developers believe to be true about the world and the role of the future software in that world. \nTelling or clarifying stories, adding, and deleting are actions of theory building, not speci.cation. \nThey comprise a means for everyone involved to become enculturated to learn and share the same worldview, \nand, yes, technologies. According to Naur and Brooks this is both a more satisfying approach than building \nto specs; and is, in fact, the only way to succeed in building usable software at all. JENNY: And I assume \nthis leads to better acceptance tests. Without a solid theory of the client s world, you d be hard pressed \nto write a really telling test. PAM: On the back side of each card, the Agile team .eshes out an example \nof the story with sample data. These unit tests can t tell the whole story they don t de.ne the deliverable, \nbut they help de.ne boundaries between the expectations of success in this story as opposed to those \nin another. Of course, very little software is created by individuals; most is done by teams. This poses \nan obvious problem: how do teams come to have a common shared theory? For Naur, no single member of the \nteam has the entire theory in his head; therefore, sharing can t mean the same head content. Keil-Slawik \ndescribes how teams converge on a common understanding, and then place a marker in their shared environment \nas a reminder. The markers can take the form of models and diagrams but can also include .ne-grained \nartifacts like tests or blocks of code. The environment becomes a kind of shared external memory and \nis not limited to physical space, but includes virtual things like code, running programs, and tools. \nThis external memory is of a different nature than the metaphor might suggest. The artifacts are evocative, \nnot representative. Looking at a diagram on the wall does not move knowledge from the wall back into \nthe observer s head, rather. it evokes in the way that our vacation photos trigger complex memories of \nfamily, relationships and emotions. This is consistent with Brooks assertion that diagrams do not contain \nthe essence of the sensate experience; nor, as Naur s empirical data demonstrates, can any form of documentation \ntransmit understanding between teams.  Agile practices, story cards, big visible charts, information \nradiators, collective code ownership, tests, daily stand-up meetings, create environments conducive to \ncollective theory by linking practices, products, information, and people.  8. Weak Links in Stable \nComplex Systems PAM: Scrum is the Agile methodology I know best and there is a Scrum secret. It rests \non process stabilization due to WEAK LINKS, natural phenomena common to complex system at all scales. \nJENNY: I d like to explore your thinking on WEAK LINKS along with a fourth heuristic which would be around \nthe actual mechanisms of increasing wholeness. The idea harks back to APL with overlapping patterns, \nbut is taken up differently in NO with geometric transformations that, over time, knit the space into \nan increasingly robust whole or .eld-like structure. PAM: Let s de.ne a few basic terms .rst. SIMPLE \nSYSTEMS have only one set of strong interactions, so if any one link breaks, the system goes down. COMPLEX \nSTABLE SYSTEMS, however, can reorganize their WEAK LINKS when strong links fail. Mark Granovetter s 1973 \nstudy of job hunters illustrates the concept of WEAK LINKS. He knew that networking would be important, \nbut was surprised that the most fruitful connections were not with close friends but with people weakly \nlinked to the job seeker. Only 1/5 of the job seekers landed jobs through contacts they saw at least \ntwice a week, 1/4 through contacts they saw less than once a year, with the remainder in between. We \nall know it takes effort to maintain connections with old colleagues or school chums, but in times of \ntrouble, those of us with a richer system of weak ties have a more robust environment to rely on. Weak \nlinks are stabilizers: this is true of jet engines, ecological systems, the internet, and software programs. \nThey also play a role in information management during development as well. For example, the wiki project \nI mentioned earlier was explicitly designed to employ stabilization by WEAK LINKS. Thus, even though \nour goal was to map semantics between systems and rep\u00ad resentations within a single system, we mapped \nthrough a domain dictionary. Although we didn t deliver exactly what was requested (a one-time representation-to-representation \nmapping), we enabled the current goal and minimized the amount of ongoing maintenance work by requiring \na two\u00adstep process. This enabled us to add two new systems on the last day of our engagement. JENNY: \nCan we clarify a problem of vocabulary? In a PLoP article you wrote last year, you experiment with the \n.fteen properties as handy pointers to orderly worlds stabilized through weak linkages. For Alexander, \nhowever, unfolding quite literally takes place through the .fteen properties. Alexander generally presents \nthem as nouns but, really, maybe we d do better to turn them into verbs. They are the transformations, \nnot indicators of something else. In other words, each transformation is about new inter-dependencies \nso as the .eld-like structure evolves it loses the fragility of simple systems. Would using Alexander \ns properties as the actual mechanisms of transformation rather than pointers help us be less Baroque \nin our discussions?  PAM: I m not comfortable with using the properties as the actual transformations. \nFor example, with all we know about genetics, we still don t know how a phenotype that we see at the \nmacro level arises from genotypes at the micro levels. I think we ll have that same problem as we explore \nthe area of weak links, but perhaps Alexander s terms can become a lingua franca across physics, biology, \nand social systems where similar concepts are labelled differently. 9. Questions of Practical Use JENNY: \nOne advantage of Alexander s vocabulary is its everyday familiarity; but that does not make the concepts \neasier to work with. For example, Alexander s de.nition of CENTER seems circular where centers are de.ned \nas being composed of other centers and bootstrapping each other into a stronger .eld-like structure. \nRichard Gabriel takes this up by comparing Alexander s de.nition of centers with his own de.nition of \nsystems, a system is a set of communicating components that work together to provide a comprehensive \nset of capabilities, and Varela s de.nition of an autopoietic system which is organized as a network \nof processes of production of components that produces the components that: (1) through their interactions \nand trans\u00adformations continuously regenerate and realize the network of processes that produced them; \nand (2) constitute it as a concrete entity in the space in which they exist by specifying the topological \ndomain of its realization as a network. Gabriel then establishes the bridge to software, When we put \ntogether an object-oriented thing, it is a system, not a program. The difference between a program and \na system is ALEXANDER S FIFTEEN PROPERTIES: CENTERS The common sense property of centeredness or focal \npoint is the a starting point. The raindrop (a center) falling into a pond creates a focal point in the \nwater; the rug is woven with a central focal point, but is itself composed of smaller locally symmetrical \ncenters. The center of the raindrop splash and the rug s focal point are further de.ned by zones of transition \nor BOUNDARIES (another of precisely the characteristic of a system having many centers or ways of approaching \nit from the vantage point of any subsystem, the rest of the system is a server whereas in a program, \nyou generally have a single way of viewing it, usually from the top down. When I .rst tried to apply \nAlexander s properties I found I was missing a deep understanding of just how these transformations come \ninto play. In NO, Alexander lays out his .fteen properties in the order of his discovery, an interesting \naccount of his intellectual journey for sure, but not all that helpful in .guring out what to do with \nthe stuff. For one thing, the .fteen properties are not equal. The phenomenon of CENTERS, described as \nhis second discovery, is a geometric property but other geometric properties, such as VOIDS, POSITIVE \nSPACE, BOUNDARIES, are also CENTERS. In addition, in the actual practice of design, Alexander takes refuge \nin the arcane mystery of his artistic .air to determine what geometric transformation might be used next \nin a sequence. If we go back to Dave s idea that they can be used in Design Refactoring, would they be \nanything more than ideas you d pull out of a hat to see if they helped? Alexander s properties don t \nhave clear operational de.nitions and don t seem to work all that well in prescriptive modes. However, \nthey re brilliant as descriptors of outcomes and for checking after the fact. If you re building and \nsome of the properties start to appear, it s con.rmation that the process is moving along well. If they \nare not appearing it s symptomatic. You need to re.ect and refactor. PAM: Actually, they do help me think \nprescriptively. When I m recommending that our middleware team integrate mini-teams and pull in a representative \nfrom the legacy system, a systems and a test data analyst, I m thinking WEAK LINKS through thicker BOUNDARIES. \nWhen I recommend using a business analyst in a facilitative role rather than as a translator, I m thinking \nWEAK LINKS through DEEP INTERLOCK AND AMBIGUITY.  I should also clarify that COMPLEX STABLE SYSTEMS \nexhibit characteristics other than the .fteen properties. SMALL WORLDNESS combines the benefits of close \nneighbors (clusters) with the convenience of long-range contacts, optimizing group access to information \nor any other resources. That s because, within their cluster, nodes are connected directly, but any node \nthat has a more distant connection can share that contact a sort of my friend s friend is also my friend \nphenomenon. From Alexander s perspective, a nearby whiteboard supporting an agile team s SMALL WORLD \nconstitutes a CENTER. When people cluster around it, the knowledge they generate there creates information \nGRADIENTS the participants know what they discussed, but others awareness drops off as distance increases. \nNESTEDNESS is another characteristic of COMPLEX STABLE SYSTEMS; it allows a complete network to look \nlike a single leaf from the top network s perspective. Sometimes NESTEDNESS evolves bottom-up, from relatively \nstable independent networks self-organizing into integrated larger networks. In the wiki project, we \ncouldn t map directly to the business dictionary because it was in .ux, but we hope one day to map our \ndictionary terms to theirs. NESTEDNESS can arise top-down by segregating parts of the top network into \nmodules, which can then become top networks themselves. We saw this during service discovery with this \nclient each business service comprised sub-services, then business processes, applications, data .ows, \netc. JENNY: Stabilization in complex systems is also supported by redundancy (duplicate elements) and \ndegeneracy where elements reprogram themselves away from normal functions to do something else. This \nis clear in human languages, biology and in the built environment. Stewart Brand in How Buildings Learn \nis more articulate on the subject than Alexander but there would be no disagreement. When we talk about \nbuildings learning over time, there is always the theory of the matters at hand that is guiding the remodeling, \nextensions, repairs and so on, which takes us right back to Naur and successful pattern languages. PAM: \nYour comment on degeneracy aligns with Richard Sole s .nding that, at any given point in time, engineered \nsystems (e.g., most software architectures) resemble evolved systems. However, they respond very differently \nto disturbance. When thin documentation just covers currently desired functionality we capture surface \nstructure, but miss system stability arising from degeneracy. That s an important omission think how \nlong Granovetter s job seekers would have gone unemployed without their degenerate acquaintances. JENNY: \nI want to point out that Alexander develops his .fteen properties as a means to investigate interactions. \nA .eld-like structure knits its way to wholeness through, say a CENTER strengthening itself with a protective \nBOUNDARY, or through DEEP INTERLOCK AND AMBIGUITY, where a CENTER connects to another by way of a third \nthat belongs to both. But what Pam is adding is that COMPLEX STABLE SYSTEMS exhibit other characteristics \nsuch as SMALL WORLDNESS or NESTEDNESS. These characteristics emerge from interactions among interactions; \nthey are higher level abstractions absent in NO and potentially very useful complements to Alexander \ns work. It clearly pans out in the built environment as well. Take any village you re familiar with and \ncheck out how building placements, paths, gates, or absences of gates where you d expect them, all embody \nthe SMALL WORLDNESS and NESTEDNESS of the social realities. 10. Growing Software: Scaling JENNY: We need \nto address SCALE. In NO, LEVELS OF SCALE have to do with life tending to form multi-level structures \nof systems within systems. So in our body there are cells responding to their internal rules, then there \nare aggregations of cells that exhibit macro-behaviors and constitute new wholes, and then aggregations \nthemselves form larger aggregations again with new behaviors. From cells to tissues to organs to organisms \nto social systems to ecosystems new properties emerge with each new level of complexity. The different \nnested levels help each other, perform different tasks, and are necessary to the functioning of the whole. \nThe characteristics of the whole come from the organizing relations of the parts. Scale is germane to \ncurrent questions of how to grow systems. It is often said that Agile is well suited to small projects \nbut that it doesn t scale. In a world of increasingly large systems, that s the kiss of death.  DAVE: \nBut, in fact, Agile does scale, and I believe we can t do anything else. It has become abundantly clear \nthat the tinker toy approach is doomed. To stick with Scrum, as an exemplary Agile methodology, we have \nscrum teams, like cells, operating within one set of rules, scaling up to systems, with their rules, \nand on to MetaScrum. Each level does its part to keep the whole together and critical to our argument \nhere the fundamental glue is the theory of the affairs of the world being built within the parts and \nthe whole. Now, I m not claiming it s easy or that it has been done a lot. Jeff Sutherland has successfully \ncompleted Scrum projects across continents. He describes Scrum as demonstrating the same rules as complex \nsystems: self organization, no single point of control, interdisciplinary teams, emergent behavior, outcomes \nemerge with high dependence on relationship and context, and performance far greater than sum of individuals. \nI d like to underscore the difference between Agile and mainstream methodologies when it comes to the \nissue of really really big. As humans, we cannot really grasp the truly large and complex.and yet being \nable to construct a concept of the whole is the core competence. Neither math nor modeling gets us there. \nTop down architectural blue-prints don t get us there (either in software or building). Let s look around \nand ask ourselves, well, what has been most successful? The answer is art, myth, and storytelling, i.e., \nactivities that rely on evocation. Agile methodologies create precisely the kinds of environments where \nthis can happen. PAM: But what about Alexander s unfolding, which is at multiple LEVELS OF SCALE? At \nthe house level, unfolding would look different than at the city or regional level. DAVE: We d see differences, \nbut also similarities, because the unfolding is really a series of linear changes punctuated with phase \nchanges that result in a new form. In the .ower pistil example from earlier, you d linearly add cells \nto the pistil one at a time until the addition of the next cell precipitates a catastrophic change to \na new form. The forms we see at each phase can be quite different cool water one degree at a time and \nsuddenly you get a phase transition to a crystalline form, ice. Within each phase the add a cell linear \nprocess may look very different. What is linearly added, for example, might be molecules at one level, \na cell at another, an organ at still another. It is OK to have different incremental rules and to apply \nthem differently in each phase, and something essential has to be preserved in each transition. The second \npoint is probably the most important. Liquid water phase changed into ice is still H2O. At the room, \nhouse, town, or regional level, we d still see the 15 properties. JENNY: Still, it s very mysterious. \nDevelopers can add houses to a subdivision but they can t bring about a phase change to create a neighborhood. \nAnd we re talking about structure-preserving transformations that aren t as pre\u00addetermined as in the \n.ower pistil. PAM: Software architectures in traditional systems depend on module integration, which \nin turn, depends on applying design principles such as maximizing cohesion, minimizing coupling, avoiding \nthe creation of hubs with many dependencies, and minimizing development time. Alexander s framework, \nplus SMALL WORLDNESS, NESTEDNESS, NETWORKS, and WEAK LINKS may provide insights into how these concepts \nrelate to unfolding and degeneracy. Of course, as this enables larger systems, interactions among interactions \nwill increase, but building cross-network shortcuts and local clusters among modules should help resolve \ncomplexity and scale problems. DAVE: Software systems could then exhibit the kind of synergy the chrome-nickel-steel \nalloy possesses. Its tensile strength exceeds the sum of its constituents because new chains form even \nas others break under stress. So, with dynamic relationships, it s no longer true that a chain is only \nas strong as its weakest link. PAM: There are already parallels in software; take object\u00adoriented design. \nObjects are intended to be specialists. Specialist objects form groups that are capable of doing things \nthat none of them could accomplish individually. For example: you might have a form object that is little \nmore than a collection (it can add, delete, reorder, and relay messages to other objects in that collection) \nplus the characteristic of dimension (in this case, area); you have a glyph object which can be a character \nor an image and which knows how to display itself, knows its own extent and other characteristics like \norientation in two dimensional space; and, you have a rule object that enforces constraints imposed on \nthe other objects. These three objects working collectively can exhibit the behavior of a document editor, \nsomething that none of them could do individually. 11. Social and Cognitive Processes JENNY: Pam s main \ninterest is in how organizational processes in.uence the product, and, frankly, NO s strong suit may \nnot be in that arena. The only piece in Alexander s writings dedicated to exploring the possibility that \nhealthy social processes could guarantee good built forms would be the third Alexander book from the \nlate 70 s, The Oregon Experiment. Considered a .op, nobody pays much attention to the book anymore, and \nthe experiment s failure is often glibly put down to lack of leadership. But a more informative autopsy \nwould be about .awed LEVELS OF SCALE and the absence of any kind of idea or existence of homeostatic \nteams that Pam describes as germane to Agile methodologies.  PAM: When teams commit to common goals, \nthey alleviate tensions by mutual accommodation. Without this focus, they revert to fractured communication \nstructures, which Conway s Law says express themselves in fractured systems. Therefore, unless teams \nadopt a shared theory and an organizational structure to support homeostasis and unfolding, the software \nthey build will not exhibit those properties. JENNY: This essay is about Alexander and therefore we fall \ninto Alexander s focus on unfolding form, but our ultimate focus must integrate form and social process. \nPerhaps I could mention one non-Alexander study that might interest programmers. Besim Hakim, a historian \nand urban planner, investigated old Muslim cities where legal/religious codes dictated the social processes \nfor decisions in building. What makes Hakim s study particularly relevant is that it offers an complete \nexample of a coherent building culture where form, technology, and processes of participation and decision \nall stemmed from a shared view of (W)holiness and a common theory of the world. Three aspects of the \nIslamic process are of noteworthy here. First, the codes say nothing about form. The same legal/religious \ncode gave rise to numerous remarkable cities, Cordoba, Algiers, Djenne, to name but a few, and these \ncities were completely different in morphology. Second, the codes were not based on concrete mechanical \nlaws (say a rule that requires separations of 20 feet between houses) but rather general universal laws \nof intention (say a new builder must intend to not disturb a neighbor s privacy). How, exactly, on the \nground, privacy was protected that could be worked out in a thousand different ways. The abstract nature \nof these laws allowed for freedom, innovation, and .ne grain local adaptation by those directly concerned. \nThirdly the success of these cities had nothing to do with professionals. The code embodied the theory \nof the affairs of the world admirably so that it was the cultural intention which guided the hand and \nthe head of the lay builders and town of.cials. DAVE: A lot of things come to mind. I m thinking about \nhow bad codes and zoning ordinances preclude good building and how, in a similar way, you can t write \nlively code inside the con.nes of a dead language. I was also thinking about the consequences of the \ncommand and control metaphor. The Islamic process allows for .ne grain adaptation from the get-go, while, \nin software, we have to set up elaborate processes of exception. We tie our shoelaces together by attempting \nmaster control modules which must include code to decide everything under the sun. Object models of coordination \nand cooperation are far better. And why can t we say, maintain user privacy rather than user password \nmust have 12 characters and 3 numbers? Also, as soon as we set arti.cial and arbitrary rules into place \nwe immediately .nd needed exceptions. In software this is seen with type systems. You inevitably encounter \nthe need to break type or have one thing be one type in one context and another type in another context. \nYou are forced to provide a casting mechanism to resolve the problem. 12. Intuiting Wholeness JENNY: \nI d like to include in our conversation a last Alexandrian topic, which is that of intuiting wholeness. \nEssentially, in building you are .rst sensing an existing whole or underlying coherence (in a plot, valley, \nor streetscape) and intuiting what next actions would preserve essential structures and bring forth the \nlatent life, making it more its individuated self. More art than science. I mentioned that Alexander \nwould retreat behind the maestro magic cap when designing, but I m not dismissing the need for intuitive \n.air. Perceiving latent wholeness is essentially abductive and concrete rather than abstract and general. \nThe process is more that of a talented Sherlock Holmes who can only proceed case by idiosyncratic case. \nEach time, Sherlock divines the probable cause that can pull all disparate pieces of evidence together \ninto a plausible hypothesis about who dunit. One murder is not like the next one and can t be solved \nusing the exact same set of steps. The mystery novels that we enjoy are really thick descriptions seeded \nwith clues. DAVE: My comment on intuiting wholeness would be to highlight a subtext in our discussion. \nThe philosophical tradition behind mainstream computing, as we have seen, is the Cartesian-Leibnizian \none. It leads us unwittingly into a particular kind of epistemology in our systems. We think about integers, \nbasic types, strong type and type checking, homogeneous collections, documents of a type string. Other \nphilosophies, notably phenomenology, work at bridging the subject/object divide. Here is a tradition \nthat opens the way for a different epistemology in our systems: dynamic typing, heterogeneous collections, \nand experimental rather than formal approaches.  I would also like to introduce a slightly different \ntake on the question. Jenny noted that a builder confronts a given context containing various elements, \nsay, a pub here, a road there, a meadow over there, etc. The task is to introduce another element into \nthat context in such a way as to make the entire system more whole. Alexander claimed to be able to immediately \napprehend the correct answer. By that I mean he did not have to perform some kind of analysis based on \nthe .fteen principles he simply saw it. Given that one of our duties is to help people become better \ndesigners, this is a problematic claim. We can accept Richard Gabriel s argument that The Designed is \nthe (Co)Designer. The problem de.nes its solution. Or, we can posit that the ability to instantly recognize \nthe correct solution is nothing more than the compilation of years of experience. The Dreyfus brothers \nassert this is what makes a chess master a master. If you play a suf.cient number of games you transition \nfrom conscious analysis and planning to pattern recognition, to gestalt recognition. This knowledge is \ncompiled in the sense that it has been merged, perhaps, translated, and pushed down into the wiring of \nyour brain in some sense. It is inaccessible in the same way that the source code for a running program \nis unavailable. PAM: Wholeness exists whether we recognize it and capitalize on it or not. I think it \ns easier to build on it when we work in trusting teams where members accommodate each other, the client, \nand the context within which the software will develop and operate. Working in this kind of environment \nresurrects and re.nes our deep intuitions, subjecting them to scrutiny and external in.uences. As our \nintuitions mature, they bump against those of others. This bumping and the resultant adaptation give \nus a whole we can all live with I believe that s what Alexander calls life. The fact that each of us \nhas contributed both strong and weak links makes the structure sustainable, and that s what the software \nindustry needs. JENNY: The bumbing and adaptation thata gives us a whole we can all live with is an interesting \nde.nition of ROUGHNESS, one of Alexander s .fteen properties of liveliness. In artifact building it s \nthe skill of holding complex non-modular elements in three dimensional space with an eye to knowing which \ncenters are most important and which are secondary. This quality is what makes us prize hand-crafted \nover mass produced objects. The old Noli plan of Rome shown in Figure 16 is one visual illustration. \n13. Conclusion JENNY: I ve enjoyed our cross-discipline pollination. Of course there s a lot we did not \ntalk about. In architecture today, the scope of real-world successes of Alexandrians is overshadowed \nby the impact of the New Urbanism movement which, I believe, is due to their cool-headed lucidity about \nthe cast of actors involved in the building industry and all their spoken and unspoken agendas. New Urbanists \nfocus on leverage points for effective change they are savvy about politics in a way that Alexander is \nnot. We can certainly blend the strengths of the New Urbanism approach with our understandings of Alexander \ns ideas to assure much stronger answers to the pragmatic question of how to get from where we are to \nwhere we want to be. PAM: We have accomplished a .rst wake-up call. We ve argued, albeit brie.y, that \nthe way forward for the computing community is through Agile epistemologies and a closer look at Alexander \ns work (both old and new) plus a dash of Geertz, Naur, Brooks, and Csermely. Building on ideas from Naur \nand Brooks, we emphasized the need for software to grow out of an understanding of the user s culture, \njust as successful pattern languages do. The technique of thick description from Geertz can inspire new \nefforts. At a more universal level Alexander s recent work can inform us about designing and refactoring \nsoftware products. We considered the use of ourselves as a measuring device for QWAN and liveliness. \nPhenomenology, with its eye on the subject/object divide, could be a healthy counterbalance to our usual \nCartesian outlook. DAVE: We have also tried to point out which aspects of Alexander s ideas are most \ndeserving of attention. And this is the crux of what the software community needs to do differently. \nThere is an old stereotype that geeks are male and are afraid of girls. There is a deep truth behind \nthis stereotype not that we are literally afraid of girls, but that we, as a community and regardless \nof gender, are afraid of the stereotypically feminine. We favor formality over informality and most of \nus don t even know what aformality means. We are afraid of the creative (read procreative), we are afraid \nof intuition (preferring logic), and we are afraid of unpredictability and lack of control. We are Baconian \nscientists (perhaps the last of that breed, since most of the natural sciences have moved on) determined \nto shape the world to our will. NO offers valuable insights but the truly hard part of applying Alexander \nis grounded in our ability to put aside our presumptions and presuppositions, and actually listen. After \nwe are certain we have heard what is being said, then we should apply our critical faculties to discern \nhow and why it might help us be better software designers.  14. Annotated Bibliography Alexander, Christopher. \nNotes on the Synthesis of Form, Cambridge: Harvard Paperback, 1964. [The book version of Alexander s \nPh.D. thesis. Certainly the most formalistic of his writings. A major theme is understanding the nature \nof the architect s task and how to make it manageable.] Alexander, Christopher, Murray Silverstein, Shlomo \nAngle. Sarah Ishikawa, Denny Abrams. The Oregon Experiment, New York: OUP, 1975. [A detailed account \nof working with the University of Oregon to develop a planning process of piecemeal growth and involvement \nof the end-users.] Alexander, Christopher, Sarah Ishikawa, Murray Silverstein, with M. Jacobson, I. Fiksdahl-King, \nS. Angel. A Pattern Language, New York: OUP, 1977. [A compilation of 253 building patterns and re.ections \non connectivity. The research was funded by the National Institutes of Health interested in exploring \nthe relationship between the built environment and well-being.] Alexander, Christopher. The Timeless \nWay of Building, New York: OUP, 1979. [An essay attempting to get beyond fashion, period architecture \nand speci.c traditions to reach a deeper common ground in good buildings.] Alexander, Christopher. The \nNature of Order, Berkeley, California: CES, 2003-2005. [Adense weaving of re.ections on the natural, \nman-made, and spiritual worlds. Volume One focuses on a static look at the .fteen geometric properties. \nVolume Two on process. Volume Three gives blow by blow accounts of speci.c buildings. Volume Four reaches \nfor a new cosmology.] Brand, Stewart. How Buildings Learn: What happens after they re built? New York: \nPenguin Books, 1994. [A longitudinal study of buildings as they change over time to suit new needs and \nowners.] Bronowksi, Jacob. Architecture as Science, Architecture as Art. in The Visionary Eye: Essays \nin the Arts, Literature, and Science, Cambridge, Massachusetts: MIT Press, 1978. [One of Bronowski s \nlectures showing art and science to be but two aspects of the same human endeavor to create.] Brooks, \nFrederick P. No Silver Bullet: Essence and Accidents of Software Engineering, Computer, Vol.20, No.4 \n(April 1987). [A key background article for this piece arguing for conceptual constructs in software \ndevelopment.] Csermely, P. Weak Links: Stabilizers of Complex Systems from Proteins to Social Networks, \nNew York: Springer, 2006. [Basic text on weak links in all domains.] Gabriel, Richard. Patterns of Software, \nNew York, Oxford University Press, 1996. [A collection of essays, several of which offer interesting \ndiscussions of how to apply Alexander s work to programming. Our quotes on page 11 are from the essay, \nThe Bead Game, Rugs, and Beauty. ] Geertz, Clifford. Toward an Interpretative Theory of Culture, New \nYork, N.Y.: Basic Books, 1973. [A collection of essays, the .rst of which de.nes thick description as \nan ethnographic method.] Granovetter, Mark The Strength of Weak Ties, American Journal of Sociology, \n78, 6. (May 1973). [An article which discussed the signi.cance of secondary ties in social relationships.] \nHakim, Besim. Arabic-Islamic Cities, London: Kegan Paul International, 1986. [A historian s research \non the building codes that gave birth to a multitude of urban pearls around the Mediterranean basin.] \nHall, Edward. Beyond Culture, Port Moody, Canada: Anchor Books, 1976. [An early collection of now classic \nessays in anthropology.] Heidegger, Martin. Building Dwelling Thinking , in Basic Writings, San Francisco, \nCA: Harper Collins, 1993. [A phe\u00adnomenological look at the art of dwelling and how it must be the guide \nto building.] Keil-Slawik, Reinhard. Artifacts in Software Development, in Software Development and Reality \nConstruction, Berlin: Springer-Verlag, 1992. [An examination of how collective documents are created \nand shared.] Levy, Steven. The Spreadsheet Way of Knowledge, http:// homepages.nyu.edu/~ap70/levyss.htm. \n[A history of the evolution of VisiCalc and how spreadsheets in.uence our take on accounting.] Naur, \nPeter. Programming as Theory Building, Micro\u00adprocessing and Microprogramming, 15, (1985). [A key background \narticle for this paper arguing for conceptual constructs in software development.] Rostal, Pam. Thoughts \non Weak Links and Alexandrine Life in Scrum, Nashville, Tenn: PLoP 08. [An article making the connection \nbetween weak links and Alexander s properties as useful indicators of complex stable systems.] Quillien, \nJenny. Delight s Muse: on Christopher Alexander s The Nature of Order, Ames, Iowa: Culicidae Press, 2008. \n[Beginner s cliff notes on the major themes of The Nature of Order.]  Salingaros, Nikos. The Structure \nof Pattern Language, http://sphere.math.utsa.edu/sphere/salingar/urbanstructure. html. Salingaros, Nikos, \nBruce West. The Universal Law of Sizes, Environment and Planning, Vol. 26, 1999. [Salingaros, an ardent \nfan of Alexander s work, develops many themes from his own perspective as a mathematician. We used articles \nwhere the structure of pattern languages and levels of scale are investigated.] Sole, R., Ferrer Cancho, \nR., Montoya, J., and Valverde, S. Selection, tinkering and emergence in complex networks, Complexity, \n8, (January 2003). [An article that allows the interested reader to compare Alexander s concepts with \nsimilar concepts but couched in different vocabulary found in discussions of complex systems.] Whitehead, \nAlfred North. Modes of Thought, New York, N.Y: Free Press edition, 1968. [A collection of basic essays.] \n   \n\t\t\t", "proc_id": "1640089", "abstract": "<p>During its formative decades the software community looked twice to the theories of Christopher Alexander for inspiration, both times failing to completely master the architect's most useful insights. Now a third opportunity presents itself with Alexander's recent publication, <i>The Nature of Order</i>. Serious apprenticeship, however, imposes a prerequisite of sober self-reflection and evaluation. What, really, is the nature of the developer's tasks? Under what philosophical umbrella has the software community matured until now? Do other philosophical traditions offer alternative and perhaps more pertinent epistemologies? What voices, besides Alexander's, might contribute to the community's evolution? We address these questions along with theory building, ethnography, weak links, design heuristics, agility, and complex systems, all of which combine with Alexander's new theories to suggest different ways of doing what we do, better.</p>", "authors": [{"name": "Jenny Quillien", "author_profile_id": "81444607439", "affiliation": "Laboratory of Anthropology, Santa Fe, NM, USA", "person_id": "P1728818", "email_address": "", "orcid_id": ""}, {"name": "Pam Rostal", "author_profile_id": "81100417141", "affiliation": "Perficient, Minneapolis, MN, USA", "person_id": "P1728819", "email_address": "", "orcid_id": ""}, {"name": "Dave West", "author_profile_id": "81414594637", "affiliation": "Highlands University of New Mexico, Las Vegas, NM, USA", "person_id": "P1728820", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1640089.1640131", "year": "2009", "article_id": "1640131", "conference": "OOPSLA", "title": "Agile anthropology and Alexander's architecture: an essay in three voices", "url": "http://dl.acm.org/citation.cfm?id=1640131"}