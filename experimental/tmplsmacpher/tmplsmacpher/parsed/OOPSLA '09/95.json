{"article_publication_date": "10-25-2009", "fulltext": "\n Challenges for Agile Development of Large Systems in the Aviation Industry Martin Glas Bauhaus Luftfahrt \n martin.glas@bauhaus-luftfahrt.net Abstract The current challenges of the aviation industry call for \nthe development of new and revolutionary aircraft concepts. In general, the task of developing new aircraft \nis risky and an extremely complex task, and aircraft manufacturers seek to control this complexity by \nadopting an evolutionary ap\u00adproach. Introducing new ways of controlling this complex\u00adity has the potential \nbene.t of reducing the risk associated with aircraft development and enabling the development of revolutionary \naircraft. One such new way is based on the ap\u00adplication of agile principles. This paper discusses the \napplication of agile principles on aircraft development processes to eliminate to a certain degree the \ninvolved complexity of conventional aircraft de\u00advelopment processes. Categories and Subject Descriptors \nJ.2 [Physical Sci\u00adences and Engineering]: Aerospace; D.2 [Software Engi\u00adneering]: Management General \nTerms Design, Management 1. Introduction The aviation industry today faces two major challenges. On the \none hand, airlines are increasingly under pressure by high and volatile oil prices. On the other hand, \nairports are no longer remote places but enclosed by conurbations. There\u00adfore, area demand and emissions \nplay a disproportionally signi.cant role in public perception relative to the absolute impact of air \ntraf.c in the mobility sector. The societal demands for future air transport with low en\u00advironmental \nfootprint became manifest in stricter regulations and public research agendas like ACARE 1 by the European \n1 Advisory Council for Aviation Research in Europe Permission to make digital or hard copies of all or \npart of this work for personal or classroom use is granted without fee provided that copies are not made \nor distributed for pro.t or commercial advantage and that copies bear this notice and the full citation \non the .rst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires \nprior speci.c permission and/or a fee. OOPSLA 2009, October 25 29, 2009, Orlando, Florida, USA. Copyright \nc &#38;#169; 2009 ACM 978-1-60558-768-4/09/10. . . $10.00 Sven Ziemer Bauhaus Luftfahrt sven.ziemer@bauhaus-luftfahrt.net \nUnion [ACARE 2009] or the Subsonic Fixed Wing project by [NASA 2009]. Both academia and the aviation \nindus\u00adtry have been developing and proposing aircraft concepts that promise to meet these goals. These \nconcepts incorporate components and construction methods which are not yet de\u00adveloped or even require \nrevolutionary system con.gurations. The future of the aviation industry depends on its ability to bring \ninnovative products to market soon. At the present, the aviation industry avoids the risk of developing \nrevolutionary concepts and bringing them to the market. Instead, evolu\u00adtionary improvements of existing \nconcepts are favored at the cost of offering a signi.cant lower potential to meet future demands. Developing \naircraft is a complex task for several reasons: A .rst type of complexity emerges from the process of \ndeveloping and certifying new technology. The evolu\u00adtionary infusion of new technologies into conventional \ndesigns is an approach to handle the increasing complex\u00adity while maintaining the high safety standards. \n Another type of complexity originates from the nature of the product itself. This second type of complexity \nis re.ected in the respective product model and can be limited among others by sound engineering principles \nand the designer s experience.  A third type of complexity arises from the context of the value network \na new aircraft is developed in and from disturbances in the development process. As this kind of complexity \nis coupled with the aforementioned two types of complexity, critical problems cannot be anticipated by \nthe current practice of extensive upfront planning and be\u00adcome apparent late in the process when parts \nof the pro\u00adtotype are already in production. At this stage, counter\u00admeasures like increasing the capacity \nor restructuring are considerably less effective with respect to delivery de\u00adlays, which generally result \nin severe contract penalties.  Using an evolutionary approach is the current practice of managing this \ncomplexity. All tree types of complexity are not clearly delimitable and in.uence each other. Managing \nthe complexity of the product model as well as the technol\u00adogy infusion and certi.cation process are \na major challenge of aircraft development process but are not in the focus of this paper.  This paper \nproposes to apply agile principles to the air\u00adcraft development process in order to better handle product \ncomplexity and process disturbances. 2. Peculiarities of the aircraft development process Before the \napplication of agile principles will be discussed a short description of peculiarities of aircraft development \nis needed. Today the aviation industry bears the reputation of being a conservative business compared \nto other sectors of mobility like the automotive industry. In order to understand this reluctance one \nhas to bear in mind what discriminates aviation from other industries [Esposito and Raffa 2006]: Small \nnumber of sold units: Looking at the number of sold units per type, aircraft are more comparable to ships \nthan to cars. Therefore, economies of scale have a much smaller effect and the development costs are \na signi.cant portion of the price. Late break-even point: It is not unusual that the break even point \nof a new aircraft program is reached only after several decades. Therefore, aircraft programs are cross\u00ad.nanced \nand in.uence each other with respect to the .nancial risk. Specialized assets: As an aircraft type is \nproduced over sev\u00aderal decades the production facilities are dedicated to a speci.c aircraft type. For \nexample the jigs of the .nal as\u00adsembly can only be used for a single aircraft family. Complex product: \nAn aircraft is a very complex system. The amount of knowledge and organizational quality necessarily \nlimits the number of companies which are able to produce aircraft or even to act as suppliers. Ad\u00additionally, \nthese entry barriers inhibit cross-fertilization from other industry sectors regarding new technologies. \nCerti.cation process: Comparing the repercussions of com\u00adponent failure or disaster of an aircraft makes \nit very clear why the certi.cation process poses hard requirements on all components and processes in \nthe aviation industry. On the one hand, the strict certi.cation process is the most important reason \nwhy aviation is one of the safest forms of transportation. On the other hand, when a new product is developed, \na company tries to avoid the certi.cation process whenever possible. Thus, certi.cation in.uences the \ndevelopment of new products, as developers tend to favor evolutionary concepts over revolutionary concepts. \nAll these factors contribute to restricting the innovation of new technologies and processes necessary \nto develop revo\u00adlutionary aircraft. As each aircraft development project only can handle a limited amount \nof new technology infusion a larger amount of innovative aircraft development projects is needed. From \nan aircraft manufacturer s point of view, each air\u00adcraft development project comes with high .nancial, \ntech\u00adnological and management risks. The manufacturer s risk mitigation strategies address mainly the \n.nancial risks. Ad\u00addressing both the technological and process risks is therefore important to increase \nthe number of aircraft development projects. One new way addressing these risks is the appli\u00adcation of \nagile principles to aircraft development that aim at reducing the development process complexity. 3. \nCon.icts between agile methods and aircraft development The Agile Manifesto [Fowler and Highsmith 2001] \nstates several principles which should express the basis of agile methods. The central principle is the \nsatisfaction of the cus\u00adtomer by continuous delivery of valuable software. In the case of new product \ndevelopment valuable software means that all essential components of the usable product are in\u00adtegrated \nas early as possible. This early feedback or early failure intends to promote a maximum coherence between \nthe expectations of the customer and the aimed delivery by the developing provider. An important claim \nof agile methods is the ability to in\u00adcorporate changes into the product development even at a late stage \nof the development process. This ability also en\u00adables the development team to handle other process distur\u00adbances \nmore ef.ciently. Maintaining the relevance of the feedback procedure in this way is an important means \nof customer satisfaction. The organization should support this by the promotion of self organization. \nFace-to-face communication is considered to be superior to other forms of conveying information in the \ndevelopment team. Additionally the organization should aim for a continuous pace and sustainability of \nthe product development process. In several case studies Takeuchi and Nonaka [Takeuchi and Nonaka 1986] \nobserved practices and principles in de\u00advelopment programs of new innovative products that fol\u00adlowed \nagile principles. While these case studies evolved around mechanical and electronic engineering projects \nfrom the automotive and camera industry, the methodology of ag\u00adile development later found resonance \nespecially in the soft\u00adware engineering domain and led to the development of ag\u00adile process models such \nas eXtreme Programming (XP) or Scrum which are increasingly used in industrial software projects. Today, \nthe role of software product models in the devel\u00adopment process of physical systems has become extremely \nimportant and typical software development issues like ex\u00adploding complexity in coincidence with project \ntime delays can be observed. As differences between characteristics of projects from different domains \nhave been diminishing, the process models originally developed for software engineer\u00ad  ing may also \nbe applied to projects leading to a physical product. However, there are general discussions about the \napplica\u00ad bility of agile methods to large scale critical systems [Boehm and Turner 2003, Cao et al. 2004] \nand fundamental prop\u00ad erties of agile methods are in con.ict with several require\u00ad ments of the aircraft \ndevelopment processes. These con.icts can be structured regarding the product itself, formal re\u00ad quirements \nof the development process and the organiza\u00ad tional circumstances in which the process is carried out: \nLarge scale systems: An aircraft is a large and complex system. The reduction of the complexity of an \naircraft through design is limited by its nature, as the compo\u00adnents of an aircraft are highly interdependent. \nMost com\u00adponents serve multiple functions which are not always intuitively obvious. For example the .rst \nclass seats not only serve passenger comfort. Due to their mass and dis\u00adtance to the center of gravity \nthe seats also have strong in.uence on the moment of inertia which is one main pa\u00adrameter for .ight control. \nGenerally, there is a trade-off between weight saving and fail-safety. Agile methods are generally not \napplied to this large scale and degree of complexity. Traceable safety: The aviation industry has established \na certi.cation process to maintain a high level of quality and safety. The mandatory certi.cation of \nall components requires detailed documentation. However, agile methods deliberately keep the amount of \ndocumentation low. In the aviation industry traceability plays its most impor\u00adtant role in the case of \na disaster. Disaster analyses are a sad but important data source for improving designs. In the course \nof a disaster analysis the how-and-why of a disaster is correlated to the how-and-why of a design. The \naim of this analysis is not only to .nd what and maybe who is responsible but also to reveal wrong assumptions \nand extrapolations. If most of the process is undocumented and assumptions are tacit knowledge the disaster \nanalysis process is futile and irresponsible behavior is obscured. Globally distributed development: \nNot only the product itself is complex but also its development process. The conception, development \nand production of new aircraft takes place globally. Despite the use of digital communi\u00adcation layers \nnot only geographic distances but also com\u00adpany boundaries create process inertia. Agile methods, however, \nrely on face-to-face communication, which can only partly be substituted by communication technolo\u00adgies. \nAdditionally, the distributed development process hin\u00adders the establishment of a common virtual product \nmodel throughout the project. Therefore, key method\u00adologies of agile development like refactoring are \nhardly applicable. Consequently, the aviation industry traditionally limits the use of agile principles \nto the conceptual design phase. In this phase only a small number of people usually from the same company \nwork on developing small scale prototypes which have lower requirements concerning safety. In order to \nbring the potential of agile methods into ef\u00adfect, their application has to be extended to the full devel\u00adopment \nprocess. But can agile methods be adapted to the full scale development process of an aircraft maintaining \nthe high quality standards and can they eventually help the avi\u00adation industry to deliver more innovative \nproducts on time? 4. Agile principles and software development To better manage the complexity in the \naircraft development process, the use of agile principles is proposed. The Agile Manifesto de.nes four \ncore values that are to be used in ag\u00adile software development. These principles are .eshed out in more \ndetail by a set of 12 agile principles (see Table 1). Seven of these principles are applied to a aircraft \ndevelop\u00adment process to better manage the process complexity. Satisfy the customer: The customer is satis.ed \nthrough early delivery of a working product or a prototype or some other kind of model. This should provide \nearly feedback. In the case of new product development valu\u00adable software means that all essential components \nof the usable product are integrated at an early stage. This early feedback promotes maximal coherence \nbetween the ex\u00adpectations of the customer and the comprehension of the requirements by the developer. \nIn the context of aircraft development building a func\u00adtional prototype is signi.cantly more expensive \nthen in the context of software engineering. One solution would be to use integrated virtual product \nmodels as substitute for real prototypes. Welcome change: Feedback and changes are relatively easy to \nimplement in an early stage of a development project. In order to keep the feedback productive, the process \nmust be open to change throughout the process. Change in this context may be changing requirements resulting \nfrom customer feedback or unforeseen development dif\u00ad.culties. Generally, agile methods do not make use \nof ar\u00adti.cial design or process freezes. Carrying out modi.cations on a virtual product model is similar \nto modifying software. However, after the .rst metal cut, which is the milestone in the development process \nthe .rst physical components are produced, costs of change rise signi.cantly. Face-to-face communication: \nAgile methods value this form of communication higher than other forms. Face\u00adto-face communication means \nthat individuals commu\u00adTable 1. The 12 principles of the agile manifesto and their in.uence on different \nkinds of complexity (product, process and innovation) nicate directly without intermediate arti.cial \nchannels. Face-to-face communication reduces the complexity as information is exchanged instantly between \nindividuals without intermediate codi.cation.  Principle in short Prod. Proc. Innov. 1. Satisfy the \ncustomer through early and con\u00adtinuous delivery of valuable software + ++ + 2. Welcome changing re\u00adquirements, \neven late in development. 0 ++ + 3. Deliver working soft\u00adware frequently with a preference to the shorter \ntimescale. 0 ++ + 4. Business people and de\u00advelopers must work to\u00adgether daily. 0 + ++ 5. Build projects \naround motivated individuals and trust them to get the job done. 0 + + 6. Practice face-to-face conversation \nas the most ef.cient and effective method of conveying in\u00adformation to and within a development team. \n0 ++ + 7. Working software is the primary measure of progress. ++ + + 8. Promote sustainable de\u00advelopment \nand a con\u00adstant pace. + + + 9. Pay continuous attention to technical excellence and good design. ++ + \n+ 10. Simplicity the art of maximizing the amount of work not done is es\u00adsential. + ++ + 11. Rely on \nself-organizing teams to generate the best architectures, re\u00adquirements, and designs. + ++ 0 12. At regular \nintervals, the team re.ects on how to become more effective, then adjusts its behavior accordingly. 0 \n++ + Agile methods try to keep the number of product and project artifacts low. This is especially important \nif change occurs. As the different artifacts are connected on a semantic level this system of artifacts \nbecomes in\u00adconsistent and in part obsolete. The effort of regaining consistence after a change aggravates \nas the project ad\u00advances. Relying more on the social skills of the team members than on formal procedures \nis an important basis for agile methods. However, as face-to-face communi\u00adcation cannot be substituted \nby arti.cial communication layers completely, it limits the degree of spacial distribu\u00adtion and the number \nof the development team. Most new aircraft programs require the competence of many disciplines, which \ntoday can rarely be found in a single company. Therefore, new aircraft are developed from an early point \non in the context of a value net\u00adwork which may be globally distributed. The number and spatial distribution \nof project participants in an air\u00adcraft project are signi.cantly bigger compared to soft\u00adware projects. \nFace-to-face communication is hard to es\u00adtablish in such an environment. Face-to-face communication in \nthe development team may tempt the team to make decisions or assumptions uncodi.ed and therefore dif.cult \nto trace for an external group. Simplicity: Agility not only stems from simplicity in de\u00adsign, but also \nin the process. Product and process sim\u00adplicity are interconnected. Agile methods value simplic\u00adity as \none of the most important enablers of agility. How\u00adever, the art of maximizing the work not done while \nsat\u00adisfying the customer requires a lot of communication. In the context of critical systems development, \nit also re\u00adquires experience of both the developer and the certi.ca\u00adtion authority, which states of the \nsystem have to be ana\u00adlyzed and tested in depth in order to guarantee the system safety. Self-organizing \nteams: An organization must enable the team to solve problems mostly independent from exter\u00adnal entities. \nOn the one hand the team must develop self\u00adcontrol and self-motivation mechanisms. On the other hand \nself moderation requires a well modularized prod\u00aduct model. If there are too many couplings between the \ncomponents, a big amount of communication and coordi\u00adnation is necessary during the development process. \nThis situation aggravates as the subsystem boundaries re.ect in company boundaries. Additionally, critical \nsystems like an aircraft are subject to external review especially by the certi.cation authori\u00adties. \nTherefore, the autonomy of an aircraft development team is limited.  Sustainable development and constant \npace: Agile meth\u00adods favor small and frequent product increments over sel\u00addom big bang releases. A constant \nworkload is aspired. This is particularly dif.cult to achieve in prerelease situ\u00adations. 5. Towards a \nsubstrate for agile development of aircraft Agile principles and the necessities of aircraft design and \nproduction seem to be incompatible at .rst. However, this approach proposes two steps the aviation industry \ncould take to provide a better substrate for agile development without compromising the high quality \nand performance standards. The approach concentrates on two aspects of agile develop\u00adment: The .rst \none should lead to better situation awareness of all stakeholders of a new product. The ability to react \nto events of disturbance or failure during a project depends signi.cantly on how long it takes until \na person or a group becomes aware of the situation in order to react.  The second aspect concerns the \norganizational ability to start all subprocesses necessary for developing and man\u00adufacturing an aircraft \nat the same time. Despite the wa\u00adterfall process model which is very similar to the cur\u00adrent way of developing \nand producing a new aircraft type, agile development allows all subprocesses to start at the same time. \nThereby, problems of later process steps should become evident earlier.  5.1 Situation awareness Generally, \nsituation awareness means to know one s own sta\u00adtus, deviations from the plan and the next step. Furthermore, \nthe situation of other actors is relevant, whether they are partners or competitors. In order to coordinate \nthe achieve\u00adment of a common goal a strategy is negotiated or imposed depending on the organizational \nstructure. In a regular ori\u00adentation procedure the projected and the actual status are compared in order \nto calibrate the process model. Depend\u00ading on the discrepancy between plan and reality tactical or even \nstrategic changes may be triggered in order to reach the common goal. This matching is especially important \nfor con\u00adcurrent design and production, as a single delay can freeze all processes. A radical approach \nis to push a noti.cation with every change in the project schedule or in the product model. On the one \nhand, this would lead to optimal consistency. On the other hand, in a collaborative decision making structure \nchanges are often associated with time-consuming human negotiation. Therefore, the number of noti.cations \nan orga\u00adnization can process is limited. The usual method to reduce the abundance of noti.cations is \nto limit information ex\u00adchange to de.ned interfaces at system boundaries, enabling organizational units \nto solve problems locally. A team work\u00ading on the design of a fuselage section may commit changes on \nthe primary mechanical structure model without notify\u00ading other design teams as long as the modi.cations \ndo not interfere with adjacent sections or overall aircraft parame\u00adters like mass or center of gravity. \nThese system boundaries are set at the beginning of the project based on experience and may later turn \nout to be suboptimal for the new product. The frequency of change noti.cations at a given interface can \nbe an indicator that two separated systems should be merged or their boundaries shifted. Accordingly, \nif a team responsible for designing and in\u00adtegrating a new .ap system introduces frequent changes to \nthe surrounding wing system which is designed by another team, it should be considered to join both groups \nor broaden the scope of the .rst group in order to improve change prop\u00adagation ef.ciency. Generally, \nthe system boundaries within a product re.ect the boundaries of the involved companies. Therefore, more \ndynamic boundaries may also require more .exibility to change company boundaries during a project. If \nit is necessary to change the boundaries of a given sys\u00adtem in the design phase it should be carried \nout soon, at least before the .rst metal cut. Especially during the project phase when the project team \ntransforms from a small local group to many distributed teams the emerging change management should be \nmonitored carefully in order to support a decision towards a change of the project structure as soon \nas possible.  5.2 Start everything It was one characteristic of the projects observed by Takeuchi and \nNonaka [Takeuchi and Nonaka 1986] to start all project phases from preliminary design to sales at the \nsame time. While it is the usual business for early development phases to explore the design space by \ntesting a huge number of variants, later phases traditionally begin their work when the main product \nparameters are .xed. Consequently, espe\u00adcially for organizational units focused on late development phases \nthe challenge emerges to handle volatile product data. This means that the development effort should \nbe focused on developing automated model generation instead of the manual construction of product models \n[Broy et al. 2008]. One reason why this concept is hardly ever used in me\u00adchanical engineering compared \nto software engineering is the lack of tool integration. There have been several initia\u00adtives to establish \ncommon formats like STEP for product data which are already in use as exchange formats [Zhou 2002]. Tool \nadapters like exchange formats map between data models of different tools against a common standard, \nwhich should comprise every possible aspect of the encom\u00adpassed domain. However, on the one hand a huge \nnumber of tools relevant to the aviation industry use undocumented data formats, on the other hand the \nexchange format stan\u00addards hardly follow the latest tool development. Therefore, in many cases the mapping \nbetween the data models of dif\u00adferent tools cannot be guaranteed. Accordingly, data loss during inter \ntool transactions is an unclear imminent danger.  One approach to tackle this problem is to use a common \ntool system provider throughout a development program. However, as tool system providers have a clear \nscope on a certain domain and development stage, they have shown little effort to establish a generic \nplatform for a complete product life cycle. APIs which could enable the customers to adopt a system to \ntheir speci.c needs are in most cases either not available or very expensive. For other industry branches \nlike software engineering the use of open source platforms has been a successful solu\u00adtion for a nearly \nidentical problem. Initiatives from NASA [Moore et al. 2008], Boeing [OSEE 2009] and Airbus [Farail et \nal. 2006] show that the aerospace industry not only em\u00adbraced the idea of open source but also adopts \nestablished solutions from the software industry like Eclipse [Eclipse 2009] for their domain speci.c \nneeds. 6. Discussion The proposed application of agile principles to an aircraft development process \naims at improving the management of complexity during the development of revolutionary aircraft concepts. \nIn Section 3 the limitations of applying agile prin\u00adciples to aircraft development have been presented. \nAs a re\u00adsult, agile principles can either be applied in insular pro\u00adcess steps or as a substrate throughout \nthe aircraft develop\u00adment process. In the .rst case, agile principles may help to solve local problems \nand challenges in a more ef.cient man\u00adner. This does, however, not make the aircraft development process \nmore agile. Using a substrate2 for agile principles throughout the aircraft development process can mitigate \nthe risks involved in aircraft development. In order to implement such a substrate, the issues of scalability \nand the development of critical complex systems need to be addressed further. 6.1 Scalability Face-to-face \ncommunication plays a central role in agile pro\u00adcess models especially for its ef.ciency and .exibility. \nHow\u00adever, the scalability of this form of communication is limited. Arti.cial network layers like the \nproposed change noti.ca\u00adtion service, generative design and open platforms are based on technologies \nthat are scalable per se but have to substitute the various means of direct human interaction. Therefore, \nit is important that every organizational unit has the technical and organizational ability to establish \nand realign collabora\u00adtion channels. As the communication channels are re.ected in the organization structure \nits realignment is a challenge especially for hierarchic organizations. 2 In this context a substrate \nis a basis or a platform for process models. It consists of organizational framework and technical infrastructure. \nAnother key prerequisite for scaling agile development is the bottom up avoidance of complexity of the \nproduct and especially its virtual model. In agile software engineering an early integration to a prototype \nis not only the basis for early feedback but also avoids unnecessary complexity. In the days of aircraft \ndevelopment without computer technology building and operating a .yable physical proto\u00adtype was a natural \ncounterpart to complexity. The assump\u00adtions about structural integrity and controllability had to reach \na maturity level that convinced a pilot to try a test .ight. In principle, a test .ight is only useful \nif pilot and air\u00adcraft survive. Therefore, the leaps of complexity of the tested material and the procedures \nduring operations were kept to a manageable and thus low level. The concept of prototyping was adopted \ninto the engineering of software with the ana\u00adlogue effects. Today, virtual simulations of physical systems \nplay an increasingly important role in the development of aircraft as the production and modi.cation \nof physical pro\u00adtotypes is very expensive compared to a software model. As long as the product is intangible, \nmodi.cations of parame\u00adters and even structure can be performed automatically by refactoring methods. \nTherefore, a late production of physi\u00adcal prototypes would be favorable. However, the virtual models \nmake simpli.cations and assumptions about reality based on experience. Some of the problems can be anticipated \nwith elaborate simulations. But some problems will not become apparent until the physical components \nare integrated. Therefore, it is common practice to subject subcomponents at an early stage into hardware-in\u00adthe-loop \nsimulations in order to verify the product model. In the trade off between expensive physical prototypes \nand potentially unrealistic simulations, an integrated and co\u00adherent model a virtual prototype may \nbe a compromise. Especially in late development phases maintaining the co\u00adherence between virtual models \nof different disciplines and the respective experimental results is challenging and could effectively \nreduce the complexity of the model.  6.2 Time vs. quality Agile methods comprise concepts for keeping \nsoftware projects on schedule, e.g. time-boxing. Initially, the delivery date of a release version is \nprojected based on experience. If the plan turns out to be too unrealistic and other means of process \nsteering are not applicable, the release date is kept but the product features are reduced. In the military \ncontext deliveries with reduced capability and later retro.tting are common. However, reducing the capabilities \nof a product in order to hold a delivery date is generally not an option for carriers as they take most \nof their ef.ciency out of the standardization of their aircraft operation. It is also unlikely that passengers \nwill accept a half .nished aircraft. However, this principle was not maintained on the com\u00adponent level \nby Airbus and Boeing during the production of the A380 and B787. Due to supply dif.culties in both programs \nsubassemblies could not be .nished on time. To avoid the stall of the whole program, both companies de\u00adcided \nto send the almost .nished fuselage barrels to the .nal assembly site. It turned out that personnel and \nassembly pro\u00adcedures were insuf.ciently transferable to a new production environment. On the one hand, \nthe learning progress on the original serial production process was hereby diminished. On the other hand, \nkey process indicators became obsolete leaving stakeholders unclear about the real progress of the program. \n Probably, the application of a start everything approach would have earlier identi.ed the availability \nof cable brack\u00adets as the critical component during the production ramp up. Agile principles could also \nhave helped maintaining the sit\u00aduation awareness. As the complexity of the developing pro\u00adcess and the \nassociated documents are deliberately kept low, it should have been easier to adapt or even to realign \nthe value chain in order to tackle production problems. The examples not only show that, in retrospect, \nthe sac\u00adri.ce of time in favor of process quality would have been the better choice but also how inevitable \nchanges are for the aircraft development process and even the application of agile principles could not \nhave prevented delays com\u00adpletely. The proposed application of agile principles should help to identify \ndisturbances earlier, adapt processes accord\u00adingly and regain consistent planning more ef.ciently. Even \nthough project delays may be inevitable, their magnitude and risk to the customer should be diminished. \n7. Related work In the .eld of production management the methodology of agile manufacturing shares some \ncommon goals with agile methods, whereas the latter is more related to product devel\u00adopment than production. \nAccording to [Gunasekaran et al. 2002] agile manufacturing is a coordinated combination of lean manufacturing \nand computer integrated manufacturing that should lead to better responsiveness of manufacturing facilities \nto fast changing market needs. In [Jina et al. 1997] the applicability of lean principles on a business \nproducing a high variety and a low volume of products (HVLV), like it can be found in the aviation industry, \nis discussed. [Kettunen 2009] compares agile manufacturing and software product development and concludes \nthat there are not many pro\u00adfoundly new ideas in agile methods in software engineer\u00ading compared to earlier \nmanufacturing/new product devel\u00adopment advances . Another term which is quite important in this paper \nis sit\u00aduation awareness. According to [Durso 2008] the term situ\u00adation awareness is a cognitive process \nor state. In this paper the term was used in the context of project control. How\u00adever, the expression \nis more commonly used in the context of military tactics and man-machine interfaces. An interest\u00ading \ntopic of situation awareness research is the out-of-the\u00adloop-performance (OOP) problem. If an operator \nof a highly automated system does not regularly interact and interfere with the system, his situation \nawareness and performance to operate the system in case of failure decreases dramatically. 8. Conclusion \nand outlook The recent problems of the aviation industry cannot be solved by new technology alone. The \nsuccess of this industry sector also depends on its ability to appropriate innovations from other branches. \nRegarding the management of prod\u00aduct complexity, the software engineering business has found some solutions \nwhich should be adoptable. This paper has discussed how agile principles can be directly applied in the \noverall aircraft development process or in its subunits. Through the application of generative design \nand open tool platforms traditionally late process phases could start earlier and thus increase the probability \nto .nd critical issues sooner. A change noti.cation service which can be maintained locally by the operational \nunits should lead to more consistency and situation awareness even when process disturbances occur. Open \ntool platforms are one solution to promote a com\u00admon coherent product model, a prerequisite refactoring \ntech\u00adnologies throughout the development project. The next step towards this key technology of agile \ndevelopment could be a common domain speci.c product modeling framework. It should be investigated if \nan open source aircraft modeling framework could be the basis for commercial development projects in \nthe aviation industry. The certi.cation process was identi.ed as a strong de\u00advelopment process determinant, \nbut was not the in focus of this paper. However, if the certi.cation authorities could adapt the certi.cation \nprocess more ef.ciently to new con\u00adcepts they would encourage the infusion of new technology. Therefore, \nthe application of agile principles on the certi.\u00adcation process should be investigated. Another interesting \naspect of situation awareness is the transfer of the OOP problem described in Section 7 to the context \nof process control, if the actors in a product devel\u00adopment program perceive a project plan unchangeable \nand do not regularly deal with reshaping and adjusting the plan, their performance in case of disturbances \nwould be dimin\u00adished. As mentioned, the aviation industry will not avert deliv\u00adery delays completely \nby the proposed approach. However, agile development is a promising instrument to diminish the risk of \nthe development process considerably. Progress on this issue will make the aviation industry more open \nfor more product variety and innovation in order to tackle the chal\u00adlenges of future mobility. Acknowledgments \nThanks to Bernd Br\u00a8ugge, Andreas Sizmann and Gernot Stenz for the interesting discussions and their helpful \nad\u00advice.  References ACARE. http://www.acare4europe.org/. 2009. visited on August 19th 2009. Brent Barton. \nEstablishing and maintaining top to bottom trans\u00adparency using the meta-scrum. Agile Journal, 2007. B. \nBoehm and R. Turner. Using risk to balance agile and plan-driven methods. Computer, 36(6):57 66, 2003. \ndoi: 10.1109/MC.2003.1204376. M. Broy, M. Feilkas, Hermannsdoerfer, M.S. M., and D. Ratiu. Seamless model-based \ndevelopment: From isolated tools to in\u00adtegrated model engineering environments. preprint, 2008. L. Cao, \nK. Mohan, P. Xu, and B. Ramesh. How extreme does extreme programming have to be?: Adapting xp practices \nto large-scale projects. 2004. Francis T. Durso. Situation awareness: Understanding dynamic environments. \nHuman Factors: The Journal of the Human Factors and Ergonomics Society, 50(3):442 448, 2008. doi: 10.1518/001872008X288448. \nEclipse. http://www.eclipse.org. 2009. visited on August 19th 2009. Emilio Esposito and Lelio Raffa. \nEvolution of the supply chain in the aircraft industry. In 15th International Annual IPSERA Conference, \n2006. ISBN 0-9779673-0-1. P. Farail, A. Canals, D. Sciamma, X. Cregut, P. Gau.llet, C. Le Ca\u00admus, P. \nMichel, and M. Pantel. The topcased project: a toolkit in open source for critical aeronautic systems \ndesign. Ingenieurs de l Automobile, pages 54 59, 2006. M. Fowler and J. Highsmith. The agile manifesto. \nSoftware Development, 9(8):28 35, 2001. A. Gunasekaran, E. Tirtiroglu, and V. Wolstencroft. An investiga\u00adtion \ninto the application of agile manufacturing in an aerospace company. Technovation, 22(7):405 415, 2002. \nJ. Jina, A.K. Bhattacharya, and A.D. Walton. Applying lean princi\u00adples for high product variety and low \nvolumes: some issues and propositions. Logistics Information Management, 10(1):5 13, 1997. ISSN 0957-6053. \ndoi: 10.1108/09576059710159655. P. Kettunen. Adopting key lessons from agile manufacturing to agile software \nproduct development a comparative study. Technovation, 29(6-7):408 422, 2009. ISSN 0166-4972. doi: 10.1016/j.technovation.2008.10.003. \nStefan Koch. Agile principles and open source software develop\u00adment: A theoretical and empirical discussion. \nLecture notes in computer science, pages 85 93, 2004. Kenneth Moore, Bret Naylor, and Justin Gray. The \ndevelopment of an open source framework for multidisciplinary analysis and optimization. In 12th AIAA/ISSMO \nMultidisciplinary Analysis and Optimization Conference, 2008. NASA. http://www.aeronautics.nasa.gov/fap/sub.xed.html. \n2009. visited on August 19th 2009. OSEE. http://www.eclipse.org/osee/. 2009. visited on August 19th 2009. \nR.W. Rycroft. Does cooperation absorb complexity? innovation networks and the speed and spread of complex \ntechnological innovation. Technological Forecasting &#38; Social Change, 74(5): 565 578, 2007. H. Takeuchi \nand I. Nonaka. The new new product development game. Harvard Business Review, 64(1):137 146, 1986. L. \nZhou. Design of distributed information systems for agile man\u00adufacturing virtual enterprises using corba \nand step standards. Journal of Manufacturing Systems, 21(1):14 31, 2002. ISSN 0278-6125. doi: 10.1016/S0278-6125(02)90009-9. \n   \n\t\t\t", "proc_id": "1639950", "abstract": "<p>The current challenges of the aviation industry call for the development of new and revolutionary aircraft concepts. In general, the task of developing new aircraft is risky and an extremely complex task, and aircraft manufacturers seek to control this complexity by adopting an evolutionary approach. Introducing new ways of controlling this complexity has the potential benefit of reducing the risk associated with aircraft development and enabling the development of revolutionary aircraft. One such new way is based on the application of agile principles. This paper discusses the application of agile principles on aircraft development processes to eliminate to a certain degree the involved complexity of conventional aircraft development processes.</p>", "authors": [{"name": "Martin Glas", "author_profile_id": "81444596732", "affiliation": "Bauhaus Luftfahrt, M&#252;nchen, Germany", "person_id": "P1728328", "email_address": "", "orcid_id": ""}, {"name": "Sven Ziemer", "author_profile_id": "81309501453", "affiliation": "Bauhaus Luftfahrt, M&#252;nchen, Germany", "person_id": "P1728329", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640054", "year": "2009", "article_id": "1640054", "conference": "OOPSLA", "title": "Challenges for agile development of large systems in the aviation industry", "url": "http://dl.acm.org/citation.cfm?id=1640054"}