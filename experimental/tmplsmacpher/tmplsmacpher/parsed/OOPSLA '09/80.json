{"article_publication_date": "10-25-2009", "fulltext": "\n Semantic Framework for DSLs Zekai Demirezen Department of Computer and Information Sciences University \nof Alabama at Birmingham Birmingham, AL 35294-1170 zekzek@uab.edu ABSTRACT Domain-Specific Languages \n(DSLs) enable domain experts to participate in software development tasks and to specify their own programs \nusing domain abstractions. To define programs using domain concepts, rather than programming language \nconcepts, model-based syntax and semantic specification techniques may offer advantages over current \napproaches. The purpose of the research described in this paper is to provide a semantic framework that \ncan be used visually by DSL designers, yet has formal underpinnings such that interoperation with verification \ntools is possible to realize model checking tasks. This research is focused on a visual technique based \non activity diagrams and graph transformation rules to define the semantics of DSLs. Categories and Subject \nDescriptors D.2.4 [Software Engineering]: Software/Program Verification Model checking. D.3.1 [Programming \nLanguages]: Formal Definitions and Theory Semantics, Syntax. General Terms Algorithms, Languages, Verification \nKeywords domain-specific languages, operational semantics, graph transformation systems, activity diagram, \nmodel checking 1. INTRODUCTION Model-Driven Engineering (MDE) has been shown to increase productivity \nand reduce development costs [1]. The concepts advocated by MDE focus on abstractions tied to a specific \ndomain that provides tailored modeling languages for domain experts. Domain-Specific Languages (DSLs), \nused within the MDE context, enable end-users who are domain experts to participate in software development \ntasks and to specify their own programs using domain concepts in the problem space, rather than programming \nlanguage concepts in the technical solution space. However, there remain several challenges that drive \nnew research in DSLs. For example, simulation, code generation, model checking and different kinds of \nanalysis require a precise definition of the semantics of a DSL. Most modeling toolsets do not allow \nthe semantics of DSLs to be defined in a way that would support such desirable analysis and generation \ntasks. DSLs, like any other language, consist of definitions that specify the abstract syntax, concrete \nsyntax, static semantics and dynamic semantics of the language. Specification of abstract syntax includes \nthe concepts that are represented in the language, and the relationships between those concepts. Concrete \nsyntax definition provides a mapping between meta-elements and their textual or Copyright is held by \nthe author/owner(s). OOPSLA 2009, October 25-29, 2009, Orlando, FL, USA. ACM 978-1-60558-768-4/09/10. \n graphical representations. Well-formedness rules, which represent the static semantics of a language, \ncan be defined to check model consistency. The runtime behavior of each syntactical meta-element defined \nin the DSL represents the dynamic semantics of the language, which is often more challenging to specify. \nThe research described in this paper represents an investigation into the design of a semantic framework \nthat enables DSL designers to define semantic specifications using visual models. The proposed framework \nalso addresses issues of model verification and model analysis by defining the verification tasks that \nare specific to a particular domain. 2. RELATED WORK Current platforms and toolsets that have provided \na means for specifying the behavioral semantics of a modeling language often rely on some formalism based \non operational semantics. A common approach is to map the metamodel concepts of a DSL to a mature and \nwell-known existing target semantic domain (e.g., Abstract State Machines (ASM) [2], and Petri Nets [3]). \nIn this context, Agrawal et al [4] and Chen et al [5] utilize what they call a semantic anchoring technique \nto map abstract syntax models to existing ASM semantic domains in the GME platform. Ruscio et al [6] \npropose a similar technique, except the ASM mapping is integrated within the AMMA platform. In these \napproaches, the dynamic behavior of a specific DSL element is modeled as a sequence of ASM state transitions. \nAlthough these kinds of definitions enable the adoption of model checking and simulation activities using \nthe target semantic domain, it is challenging for DSL designers to use such approaches (because of unfamiliar \nformalisms in the target model concepts). Muller et al [7] extended an abstract syntax metalayer with \nan action language to weave a semantic definition within a metamodel. However, the necessity of defining \nthe behavior of each concept in an imperative way results in code that is written in the style of a general-purpose \nprogramming language. Engels [8] provides operational semantics of diagrams by means of collaboration \nand graph transformations. Knapp [9] uses temporal logic; Overgaard [10] advocates the p-calculus to \ndefine semantics. Although the formal structures of these related works are suitable for usage with model \nverification and simulation tools, the specific approaches require expertise in notations and formalisms \nthat are not generally within the skillsets of most designers.  3. RESEARCH GOALS The research described \nin this paper proposes a semantic framework that can be used by DSL designers, yet has a formal foundation \nthat will permit interoperation with model verification tools. A key research question addresses the \nfeasibility of designing a general visual language that can be used to define the dynamic semantics of \na modeling language, which can interoperate with analysis tools to allow designers to verify the correctness \nof models within domain\u00adspecific verification tasks.  4. APPROACH AND METHODOLOGY Existing approaches \nfor defining the formal semantics of programming languages can be used to specify the semantics of DSLs. \nHowever, a critical point of this proposed work is an investigation of the benefits that visual models \noffer to DSL designers in terms of specifying semantics of a new language. A first step of this project \nis to investigate a technique for representing state transitions. Behavioral semantics of DSLs can be \nrepresented by a sequence of state transition rules. This approach divides all semantic concerns into \ndiscrete states and transition relations. In particular, in-place model transformations [11] represent \nan approach for designing state transitions. One of the main characteristics of in-place model transformation \nis that target and source models are always instances of the same metamodel. Graph grammars [3] provide \nvisual rules to specify in-place transformations based on precondition actions and postcondition steps. \nThe notation proposed by AGG [12] to model graph transformations can be used to define these rules visually. \nAGG is a rule-based visual language supporting an algebraic approach to graph transformation. Available \ntools associated with AGG (e.g., Graph Transformation Engine, Graph Pattern Matching, and AGG s analysis \ntechniques for consistency checking) make AGG an attractive candidate for the definition of state translation \nrules. Although each AGG transformation shows one of the state transitions of the runtime behavior, to \ngive complete semantics of DSLs, sequences of state changes should be defined. These sequence definitions \ncontrol what state transitions are to be fired and in what order. Therefore, the second step of this \nproject is to develop a technique for specification of state transition sequences. An activity diagram \nis an appropriate state machine to define these transition sequences. It enables the design of simple \nand compound states, branches, forks, and joins. In the proposed framework, each state transition will \nbe mapped with an activity in the activity diagram. Therefore, each activity diagram will depict state \ntransition configurations. The final step of this project is to facilitate model checking functions by \ninteroperating existing model checking tools with the syntax and semantics of a new modeling language. \nTo enable this capability, an instance model specified in a metamodel must be converted into the formalism \nexpected by an underlying model checking tool. Next, the properties that the model must satisfy need \nto be stated by a logical formalism expressed in the format expected by the verification tool. For example, \nBaresi et al [13] demonstrate how the Alloy [14] tools can be used in graph transformation systems. Graph \ntransformations (described using AGG) can be transformed into an Alloy Model [13]. Therefore, DSL programs \nand verification tasks, which are defined by AGG at the domain level, can be transformed into the lower \nlevel model needed by Alloy. Evaluation. A research question will be considered in the project evaluation \nby using several unique domains that each have a representative DSL. Specification complexities of state \ntransition, sequence of transitions, and verification task definitions, will be checked in detail for \neach domain. An additional step will be needed to compare the proposed semantic framework with other \noperational semantics techniques. Visual modeling, comprehensibility, ease of use, amount of time to \ndesign a new DSL, and compatibility with verification tools will be used as comparison and evaluation \ncriteria. 5. ACKNOWLEDGMENTS This work is supported in part by an NSF CAREER award (CCF\u00ad0643725).  \n6. REFERENCES [1] Vallecillo, A. A Journey Through the Secret Life of Models, In Dagstuhl Seminar: Model \nEngineering of Complex Systems, 2008. [2] Borger, E. High Level System Design and Analysis using Abstract \nState Machines, In FM-Trends 98, Vol. 1641, LNCS, Springer, 1999, pp. 1-43. [3] de Lara, J., Vangheluwe, \nH. Translating model simulators to analysis models. In Fundamental Approaches to Software Engineering, \nVol. 4961, Springer LNCS, 2008, pp. 77-92. [4] Agrawal, A., Karsai, and G., Ledeczi, A. An end-to-end \ndomain-driven software development framework. In Object-Oriented Programming, Systems, Languages, and \nApplications, Anaheim, CA, 2003, pp. 8 15. [5] Chen, K., Sztipanovits, J., Abdelwalhed, S., and Jackson, \nE. Semantic Anchoring with Model Transformations. In Model Driven Architecture Foundations and Applications: \nFirst European Conference, Springer, 2005, pp. 115 129. [6] di Ruscio, D., Jouault, F., Kurtev, I., Bezivin, \nJ., and Pierantonio, A. Extending AMMA for Supporting Dynamic Semantics Specifications of DSLs, Technical \nReport 06.02, Laboratoire d Informatique de Nantes-Atlantique, Nantes, France, April 2006. [7] Muller, \nP.-A., Fleurey, F., and J\u00e9z\u00e9quel, J.-M. Weaving Executability into Object-Oriented Meta-Languages, In \nProceedings of MODELS/UML, 2005, pp.264-278. [8] Engels, G., Hausmann, J. H., Heckel, R., and Sauer, \nS. Dynamic Meta Modeling: A Graphical Approach to the Operational Semantics of Behavioral Diagrams in \nUML. In The Unified Modeling Language: Advancing the Standard. York, UK, Vol. 1939, LNCS. Springer, 2000, \npp. 323 337. [9] Knapp, A. A Formal Semantics of UML Interactions, In Proceedings of the UML Beyond \nthe Standard, Vol. 1723, LNCS. Springer, 1999, pp. 116 130. [10] Overgaard,G. Formal Specification of \nObject-Oriented Meta-Modelling, In Fundamental Approaches to Software Engineering, Berlin, Germany, Vol. \n1783, LNCS, Springer, 2000, pp. 193 207. [11] Czarnecki, K., Helsen, S.: Feature-based Survey of Model \nTransformation Approaches. In: IBM Systems Journal, Vol. 45, Issue 3, July, 2006, pp. 621-645. [12] Beyer, \nM. AGG1.0 Tutorial, Technical University of Berlin, Department of Computer Science, 1992. [13] Baresi, \nL., and Spoletini, P. On the Use of Alloy to Analyze Graph Transformation Systems. In Proceedings of \nthe International Conference on Graph Transformation, Vol. 4178, LNCS, Springer, 2006, pp. 306 320. [14] \nJackson, D., Shlyakhter, I., and Sridharan, M. A Micromodularity Mechanism, In European Software Engineering \nConference, Vienna, Austria, 2001, pp. 62 73.   \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Domain-Specific Languages (DSLs) enable domain experts to participate in software development tasks and to specify their own programs using domain abstractions. To define programs using domain concepts, rather than programming language concepts, model-based syntax and semantic specification techniques may offer advantages over current approaches. The purpose of the research described in this paper is to provide a semantic framework that can be used visually by DSL designers, yet has formal underpinnings such that interoperation with verification tools is possible to realize model checking tasks. This research is focused on a visual technique based on activity diagrams and graph transformation rules to define the semantics of DSLs.</p>", "authors": [{"name": "Zekai Demirezen", "author_profile_id": "81418599405", "affiliation": "The University of Alabama at Birmingham, Birmingham, AL, USA", "person_id": "P1728679", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640037", "year": "2009", "article_id": "1640037", "conference": "OOPSLA", "title": "Semantic framework for DSLs", "url": "http://dl.acm.org/citation.cfm?id=1640037"}