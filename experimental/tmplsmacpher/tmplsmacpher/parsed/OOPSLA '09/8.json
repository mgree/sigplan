{"article_publication_date": "10-25-2009", "fulltext": "\n A Concurrent Dynamic Analysis Framework * for Multicore Hardware Jungwoo Ha TheUniversityofTexasat \nAustin University of Southern California Information Sciences Institute East jha@east.isi.edu Matthew \nArnold Stephen M. Blackburn IBM T.J. Watson Research Australian National University marnold@us.ibm.com \nSteve.Blackburn@anu.edu.au Kathryn S. McKinley The University of Texas at Austin mckinley@cs.utexas.edu \n Abstract Software has spent the bounty of Moore s law by solving harder problems and exploiting abstractions, \nsuch as high\u00adlevel languages, virtual machine technology, binary rewrit\u00ading, and dynamic analysis. Abstractions \nmake programmers more productive and programs more portable, but usually slow them down. Since Moore \ns law is now delivering mul\u00adtiple cores instead offaster processors, future systems must either bear \na relatively higher cost for abstractions or use some cores to help tolerate abstraction costs. This \npaper presents the design, implementation, andeval\u00aduation of a novel concurrent, con.gurable dynamic \nanaly\u00adsis framework that ef.ciently utilizes multicore cache archi\u00adtectures. It introduces Cache-friendly \nAsymmetric Buffer\u00ading (CAB), a lock-free ring-buffer that implements ef.cient communication between application \nand analysis threads. We guide the design and implementation of our framework withamodelof dynamic analysisoverheads.The \nframework implementsexhaustiveand samplingevent processingandis analysis-neutral.Weevaluate the framework \nwith.ve pop\u00adular and diverse analyses, and show performance improve\u00adments even for lightweight, low-overhead \nanalyses. Ef.cient inter-core communication is central to high per\u00adformance parallel systems and we believe \nthe CAB design gives insight into the subtleties and dif.culties of attaining it for dynamic analysis \nand other parallel software. Categories and Subject Descriptors D.3.4[Programming Lan\u00adguages]: Processors \nRun-time environments GeneralTerms Experimentation, Performance, Measurement Keywords Dynamic Analysis, \nPro.ling, Multicore, Instrumentation * This work is supported by ARC DP0666059, NSF CNS-0917191, NSF \nCCF-0811524, NSF CNS-0719966, NSF CCF-0429859, Intel, IBM, and Google. Any opinions, .ndings and conclusions \nexpressed herein are the authors and do not necessarily re.ect those of the sponsors. Permission to make \ndigital or hard copies of all or part of this work for personal or classroom use is granted without fee \nprovided that copies are not made or distributed for pro.t or commercial advantage and that copies bear \nthis notice and the full citation on the .rst page.To copyotherwise, to republish, to post on servers \nor to redistribute to lists, requires prior speci.c permission and/or a fee. OOPSLA 2009, October 25 \n29, 2009, Orlando, Florida, USA. Copyright c &#38;#169; 2009ACM 978-1-60558-734-9/09/10... $10.00 1. \nIntroduction Dynamic analysis is a base technology for performance op\u00adtimization [1, 10, 26], debugging \n[16, 22, 25], software sup\u00adport [14, 32], and security [19, 23]. Binary rewriting systems and Just-In-Time \n(JIT) compilers in managed runtimes need dynamic information about the program to optimize it. They often \nemploytechniques for reducing the overhead, such as sampling, that trade accuracyfor performance. However,dy\u00adnamic \nanalyses used for debugging, software support, and security often require fully accurate analysis. The \noverhead of more expensive analyses limit their use. Multicore architectures offer an opportunity to \nimprove the design and performance of dynamic analysis. As the number of cores on commodity hardware \ncontinues to in\u00adcrease and application developers are struggling to paral\u00adlelize application tasks,exploiting \nunused processorstoper\u00adform dynamic analysis in parallel with the application be\u00adcomes an increasingly \nappealing option. This paper explores the design and implementation of a dynamic analysis framework that \nexploits under-utilized cores by executing analysis concurrently with the applica\u00adtion. In the framework, \nan application produces events, such as paths executed or memory operations performed, and a separate \nconcurrent analysis thread consumes and analyzes them. Figure1comparessequential and concurrent dynamic \nanalysis. Whereas traditional dynamic analysis is performed sequentially when the application produces \none or a group of events, in our framework, the application queues events inabuffer, anda concurrent \nanalysis thread dequeues and analyzes them. The ability to communicate data ef.ciently from one core \nto another is critical to the success of a concurrent dynamic analysis implementation. Unfortunately, \nthe complexity and variety of multicore architectures and memory hierarchies pose substantial challenges \nto the design of an ef.cient com\u00admunication mechanism. We found that a number of vari\u00adables in.uence \nperformance, such as hardware variation, communication cost, bandwidth between cores,false shar\u00ading between \ncaches, coherence traf.c, and synchronization between the producer and consumer threads. \n\t\t\t", "proc_id": "1640089", "abstract": "<p>Software has spent the bounty of Moore's law by solving harder problems and exploiting abstractions, such as high-level languages, virtual machine technology, binary rewriting, and dynamic analysis. Abstractions make programmers more productive and programs more portable, but usually slow them down. Since Moore's law is now delivering multiple cores instead of faster processors, future systems must either bear a relatively higher cost for abstractions or use some cores to help tolerate abstraction costs.</p> <p>This paper presents the design, implementation, and evaluation of a novel concurrent, configurable dynamic analysis framework that efficiently utilizes multicore cache architectures. It introduces Cache-friendly Asymmetric Buffering (CAB), a lock-free ring-buffer that implements efficient communication between application and analysis threads. We guide the design and implementation of our framework with a model of dynamic analysis overheads. The framework implements exhaustive and sampling event processing and is analysis-neutral. We evaluate the framework with five popular and diverse analyses, and show performance improvements even for lightweight, low-overhead analyses.</p> <p>Efficient inter-core communication is central to high performance parallel systems and we believe the CAB design gives insight into the subtleties and difficulties of attaining it for dynamic analysis and other parallel software.</p>", "authors": [{"name": "Jungwoo Ha", "author_profile_id": "81537874156", "affiliation": "University of Southern California - Information Sciences Institute East, Arlington, VA, USA", "person_id": "P1728748", "email_address": "", "orcid_id": ""}, {"name": "Matthew Arnold", "author_profile_id": "81100021720", "affiliation": "IBM T. J. Watson Research, Hawthorne, NY, USA", "person_id": "P1728749", "email_address": "", "orcid_id": ""}, {"name": "Stephen M. Blackburn", "author_profile_id": "81100547435", "affiliation": "Australian National University, Canberra, Australia", "person_id": "P1728750", "email_address": "", "orcid_id": ""}, {"name": "Kathryn S. McKinley", "author_profile_id": "81100402805", "affiliation": "The University of Texas at Austin, Austin, TX, USA", "person_id": "P1728751", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1640089.1640101", "year": "2009", "article_id": "1640101", "conference": "OOPSLA", "title": "A concurrent dynamic analysis framework for multicore hardware", "url": "http://dl.acm.org/citation.cfm?id=1640101"}