{"article_publication_date": "10-25-2009", "fulltext": "\n Weaving Web Applications with WebDSL (Demonstration) Danny M. Groenewegen Software Engineering Research \nGroup, Delft University of Technology, The Netherlands d.m.groenewegen@tudelft.nl Eelco Visser Software \nEngineering Research Group, Delft University of Technology, The Netherlands visser@acm.org Abstract \nWebDSL is a domain-speci.c language for the develop\u00adment of web applications that integrates data-models, \nuser\u00adinterface models, actions, validation, access control, and work.ow. The compiler veri.es the consistency \nof appli\u00adcations and generates complete implementations in Java or Python. We illustrate the key concepts \nof the language with a small web application. Categories and Subject Descriptors D.2.3 [Software Engi\u00adneering]: \nCoding Tools and Techniques; D.3.4 [Program\u00adming Languages]: Processors General Terms Languages Keywords \ndomain-speci.c languages, web application model, data model, data binding, access control 1. Motivation \nThe implementation of web applications comprises many technical concerns, including data representation, \nquerying, and modi.cation, user input, data validation, user interface design, and navigation. These \nconcerns are often addressed by separate languages. For example, in (one con.guration of) the Java web \nprogramming platform we .nd the Java general purpose programming language, the SQL query lan\u00adguage (or \nsome dialect such as HQL), the JavaServer Faces (JSF) presentation language with the EL expression lan\u00adguage \nfor accessing data, the CSS stylesheet language, and other XML schemas for con.guration such as page \n.ow dec\u00adlarations. While separation of concerns and choosing the right lan\u00adguage for the job are conceptually \nappealing, the amalgam of languages used in a single web application project are typ\u00adically poorly integrated, \nwith an adverse effect on productiv\u00adity and software quality caused by boilerplate code, loose coupling, \nand a lack of static veri.cation. Copyright is held by the author/owner(s). OOPSLA 2009, October 25 29, \n2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. 2. WebDSL WebDSL [3] is a domain-speci.c language \nfor the develop\u00adment of web applications that integrates data models, user in\u00adterface models, actions, \nstyling, access control [1], data vali\u00addation, and work.ow [2]. While these different concerns are supported \nby separate domain-speci.c sub-languages, the static semantics of the language veri.es the consistency \nof the different concerns of an application model. The WebDSL compiler generates a complete implementation \nin Java or Python without the need to write further code in these lan\u00adguages. 3. Example: WebTasks We \nillustrate the features of WebDSL with a small web application for managing tasks (WebTasks). During \nthe demonstration we will build this application from scratch, while introducing the concepts of the \nlanguage. The next page illustrates the main concepts with a fragment of the WebTasks application. Figure \n1 shows screenshots of three types of pages from the WebTasks application. Figures 2 to 7 show the WebDSL \ncode for these pages. Acknowledgments This research was supported by NWO/JACQUARD project 638.001.610, \nMoDSE: Model-Driven Software Evolution. References [1] D. M. Groenewegen and E. Visser. Declarative access \ncontrol for WebDSL: Combining language integration and separation of concerns. In D. Schwabe and F. Curbera, \neditors, Eighth International Conference on Web Engineering (ICWE 2008), pages 175 188. IEEE CS Press, \nJuly 2008. best paper award. [2] Z. Hemel, R. Verhaaf, and E. Visser. WebWorkFlow: An object-oriented \nwork.ow modeling language for web applications. In Model Driven Engineering Languages and Systems (MODELS \n2008), volume 5301 of LNCS, pages 113 127. Springer, 2008. [3] E. Visser. WebDSL: A case study in domain-speci.c \nlanguage engineering. In Generative and Transformational Techniques in Software Engineering (GTTSE 2007), \nvolume 5235 of LNCS, pages 291 373, Heidelberg, October 2008. Springer.  (a) task page (b) task edit \npage (c) task list Figure 1. Screenshots of the WebTasks application. entity User { username :: String \n(id, name, validate(isUniqueUser(this), \"Username is taken\")) password :: Secret tasks -> List<Task> \ntodo -> List<Task> := [t | t : Task in this.tasks where !(t.archived)] } entity Task { name :: String \n(name) description :: Text done :: Bool archived :: Bool user -> User (inverse=User.tasks) } Figure \n2. Data model de.nes entities with properties. En\u00adtity declarations are mapped to a database schema and \nob\u00adjects are automatically persisted to the database. Validation constraints (username) pose extra requirements \non entities. A derived property (todo) is a transient property whose value is computed from other properties. \ndefine page task(task : Task) { main{ section{ header{output(task.name)} output(task.description) par{ \n\"Done: \" output(task.done) \"Archived: \" output(task.archived) \"Assigned to: \" output(task.user) } manageTask(task) \n} } } Figure 3. Page de.nition (Fig 1(a)) de.nes view of proper\u00adties of the parameter objects of the \npage. define page edittask(task : Task) { main{ section{ header{output(task.name)} form{ par{ input(task.name) \n} par{ input(task.description) } par{ \"Assigned to: \" input(task.user) } action(\"Save\", save()) navigatebutton(task(task), \n\"Cancel\") action save() { return task(task); } } } } } Figure 4. Data input forms (Fig 1(b)) provide \nautomatic data binding of form .elds to entity properties. define page tasks(user : User) { main{ section{ \nheader{\"Tasks for \" output(user.username) } table{ taskList(user.todo) } par{ addTask(user) } par{ navigate(archive(user)){\"Archive\"} \n} } } } Figure 5. Page de.nition for user task list (Fig 1(c)) with navigation to archive page. define \ntaskList(tasks : List<Task>) { for(task : Task in tasks) { row{ output(task.done) output(task) manageTask(task) \n} } } define addTask(user : User) { var newTask : Task := Task{ done := false } action addtask() { user.tasks.add(newTask); \nnewTask.save(); } form{ input(newTask.name) action(\"Add Task\", addtask()) } } define manageTask(task \n: Task) { action done() { task.done := true; } action undo() { ... } action delete() { var user := task.user; \nuser.tasks.remove(task); task.delete(); return tasks(user); } form{ navigatebutton(edittask(task), \"Edit\") \nif(!task.done) { action(\"Done\", done()) } else { action(\"Undo\", undo()) ... } action(\"Delete\", delete()) \n } } Figure 6. Template de.nitions de.ne page fragments that can be reused in multiple page de.nitions. \naccess control rules principal is User with credentials username, password rule template manageTask(task \n: Task) { securityContext.loggedIn &#38;&#38; task.user == securityContext.principal } Figure 7. Access \ncontrol rules restrict access to pages, tem\u00adplates, or actions using Boolean constraints on the data \nmodel.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>WebDSL is a domain-specific language for the development of web applications that integrates data-models, user-interface models, actions, validation, access control, and workflow. The compiler verifies the consistency of applications and generates complete implementations in Java or Python. We illustrate the key concepts of the language with a small web application.</p>", "authors": [{"name": "Danny M. Groenewegen", "author_profile_id": "81381602656", "affiliation": "Delft University of Technology, Delft, Netherlands", "person_id": "P1728632", "email_address": "", "orcid_id": ""}, {"name": "Eelco Visser", "author_profile_id": "81100561215", "affiliation": "Delft University of Technology, Delft, Netherlands", "person_id": "P1728633", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640020", "year": "2009", "article_id": "1640020", "conference": "OOPSLA", "title": "Weaving web applications with WebDSL: (demonstration)", "url": "http://dl.acm.org/citation.cfm?id=1640020"}