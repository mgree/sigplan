{"article_publication_date": "10-25-2009", "fulltext": "\n By-Example Adaptation of the Generic Model Versioning System AMOR * How to Include Language-Speci.c \nFeatures for Improving the Check-In Process Petra Brosch Martina Seidl Konrad Wieland Manuel Wimmer \nBusiness Informatics Group Vienna University of Technology, Austria lastname@big.tuwien.ac.at Abstract \n We present con.guration mechanisms based on by-example approaches for the adaptable model versioning \nsystem AMOR improving the complete versioning work.ow. The Opera\u00adtion Recorder allows the speci.cation \nof composite opera\u00adtions. Those operation de.nitions are used by the Con.ict Manager supporting the speci.cation \nof potential merge con.icts and suitable resolution strategies. Categories and Subject Descriptors D.2.13 \n[Software En\u00adgineering]: Reusable Software Reuse models General Terms Design, Languages Keywords model \nversioning, by-example con.guration 1. Introduction The development of software systems without version \ncon\u00adtrol systems (VCSs) is nowadays unimaginable. Optimistic VCSs are of particular importance because \nsuch systems ef\u00adfectively manage modi.cations on one software artifact per\u00adformed by multiple developers \nat the same time. To cope with the complexity of modern software systems, model\u00addriven development (MDD) \nhas gained momentum. In this * This work has been partly funded by the Austrian Federal Ministry of Transport, \nInnovation and Technology (BMVIT) and FFG under grant FIT\u00adIT-819584. Funding for this research was provided \nby the fFORTE WIT -Women in Technology Program of the Vienna University of Technology, and the Austrian \nFederal Ministry of Science and Research. Copyright is held by the author/owner(s). OOPSLA 2009, October \n25 29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. Philip Langer Department of Telecooperation \nJohannes Kepler University Linz, Austria philip.langer@jku.at realm, software models are a valuable \nsource of information, not only for traditional documentation purpose but also for the automatic generation \nof code from models (cf. [B\u00b4 ezivin 2005]). Like other software artifacts, models are developed in teams \nand evolve over time. Hence, they also have to be put under version control. Standard VCSs for code usually \nwork at the .le-level and perform con.ict detection by line-oriented text compar\u00adison. When applied to \nthe textual serialization of models, the result is unsatisfactory because the information stemming from \nthe graph-based structure is destroyed and the asso\u00adciated syntactic and semantic information gets lost. \nConse\u00adquently, dedicated VCSs for versioning models have been proposed. However, they either support \ngeneric model ver\u00adsioning and therefore do not consider language-speci.c as\u00adpects, or they are built \nfor a speci.c language and thus are not suitable for other languages. The model versioning sys\u00adtem AMOR \n[Altmanninger et al. 2008] aims at combining the advantages of both types of VCSs providing a generic \nframework with extension points for including language spe\u00adci.c features. 2. Adaptation Techniques To \ncope with the seeming contradiction of language indepen\u00addence and language speci.c features, the extensions \npoints in AMOR support the following adaptation techniques. Composite Operation Speci.cation. The comparison \nof the modi.ed model versions usually detects only the appli\u00adcation of the primitive operations insert, \nupdate, and delete. Composite operations like move and refactorings are often not detected but represented \nas sets of primitive operations. As reported in [Dig et al. 2006], this loss of information is a disadvantage \nfor merging the different versions of a model. Hence, the comparison algorithm has to be extended in \nor\u00adder to detect composite operations. The technical speci.ca\u00adtion of these recurrent composite operations \nshould not only be performed by experts demanding extensive programming effort and deep knowledge of \nthe development environment, but also by modelers who .nally apply the operations.  Con.ict Speci.cation. \nCon.icts are easily detected if the same element is modi.ed in different versions of one model. If one \ncon.ict comprises multiple elements, standard sys\u00adtems are not able to detect this con.ict at all, or \nthey report multiple local con.icts, which further complicates con.ict resolution. In AMOR, it is possible \nto specify potential con\u00ad.icts by example, (i.e., without any programming effort), in order to enable \nthe system to detect and to report complex con.icts in a concise representation. Resolution Speci.cation. \nThe third extension point tar\u00adgets the user-friendly de.nition of resolution strategies. Re\u00adcent VCSs \nindicate where con.icts interfere with the merge process, but they hardly provide any resolution support \nto the user. AMOR provides a simple recommender compo\u00adnent, which offers resolution suggestions. In order \nto specify resolution suggestions, again a by-example approach is fol\u00adlowed, which allows the modeler \nto specify how to resolve a con.ict instead of implementing resolution scripts or de.n\u00ading model transformations. \n3. Realization We develop different tools, that improve the con.ict detec\u00adtion and resolution capabilities \nby specifying composite op\u00aderations, language-speci.c con.icts, and .nally their resolu\u00adtion. In all \nof these steps the speci.cation is derived from an example created directly in the concrete syntax of \nthe mod\u00adeling language and the preferred environment of the user. Therefore, no programming is necessary \nto adapt AMOR. Step 1: Composite Operations. First, the modeler em\u00adpowers the VCS to detect language-speci.c \ncomposite op\u00aderations like refactorings. For this task we developed the Operation Recorder to design \ncomposite operation speci.\u00adcations. The user starts with modeling the initial situation in her preferred \nmodeling environment. Then, this initial model is annotated with unique IDs and copied automat\u00adically \nby the Operation Recorder. On this working copy the modeler performs all operations the composite opera\u00adtion \nconsists of, again in her preferred modeling environ\u00adment. When the modeler con.rms the revised working \ncopy, the Operation Recorder precisely detects all performed op\u00aderations by conducting a state-based \ncomparison relying on the sound ID-based match. Finally, the Operation Recorder derives pre-and postconditions \nnecessary for the applica\u00adtion of the composite operation. The modeler may edit these conditions. For \na more detailed description of the Opera\u00adtion Recorder please see the AMOR project homepage1 and [Brosch \net al. 2009a,b]. Completed operation speci.cations are henceforth used to detect occurrences of speci.ed \nopera\u00adtions in generic model differences obtained by a state-based comparison. The detection mechanism \nis implemented by 1 http://www.modelversioning.org searching for the operation pattern contained in the \nopera\u00adtion speci.cation. If the pattern is found and the model ele\u00adments referenced by the matching operations \nful.ll the pre\u00adand postconditions, an occurrence of the composite opera\u00adtion is at hand. This detection \nallows a more compact rep\u00adresentation of the difference report by folding atomic oper\u00adations that belong \nto a composite one. Thus, detecting com\u00adposite operations enables a faster and better understanding of \nthe original modeler s intention. Furthermore, it enables a smarter con.ict detection and resolution. \nStep 2: Language-Speci.c Con.icts. When two model\u00aders perform overlapping refactorings, con.icts are \noften not detectable by solely applying generic con.ict detection al\u00adgorithms. In AMOR, the Con.ict Manager \nallows to mark speci.c executions of refactorings as potentially con.icting changes. Since only the parallel \nexecution of these refactor\u00adings on overlapping model elements leads to a con.ict, a user-de.ned mapping \nis supported for specifying the com\u00admonly effected model elements. For this sake, the common model elements \nare simply connected to the respective ele\u00adments of the refactorings. Using this con.ict de.nition, the \ngeneric con.ict detection algorithm is capable of marking language-speci.c con.icts. Step 3: Resolution \nStrategies. In the last step a proper resolution strategy is set up to resolve con.icts. One of these \nstrategies is to de.ne an order in which the refactor\u00adings should be applied on the base model. Since \nthe model versioning system is able to perform composite operations on arbitrary models by interpreting \nthe operation speci.ca\u00adtion obtained in Step 1, it is also capable of replaying them. Therefore, the \nreplayed execution of a refactoring originally performed by one modeler encloses changes performed by \nthe other modeler, which leads to a merged model combin\u00ading both intentions and prohibiting merge problems \n[Brosch et al. 2009b, Dig et al. 2006]. References Kerstin Altmanninger, Gerti Kappel, Angelika Kusel, \nWerner Ret\u00adschitzegger, Martina Seidl, Wieland Schwinger, and Manuel Wimmer. AMOR Towards Adaptable Model \nVersioning. In Proc. of MCCM 08 @ MoDELS 08, 2008. Jean Bezivin. \u00b4On the Uni.cation Power of Models. \nJournal on Software and Systems Modeling, 4(2):171 188, 2005. Petra Brosch, Philip Langer, Martina Seidl, \nKonrad Wieland, Manuel Wimmer, Gerti Kappel, Werner Retschitzegger, and Wieland Schwinger. An Example \nis Worth a Thousand Words: Composite Operation Modeling By-Example. Accepted for MoDELS 09, 2009a. Petra \nBrosch, Philip Langer, Martina Seidl, and Manuel Wim\u00admer. Towards End-User Adaptable Model Versioning: \nThe By-Example Operation Recorder. In Proc. of CVSM 09 @ ICSE 09. IEEE, 2009b. Danny Dig, Tien N. Nguyen, \nKashif Manzoor, and Ralph John\u00ad son. MolhadoRef: A Refactoring-aware Software Con.guration Management \nTool. In Proc. of OOPSLA 06. ACM, 2006.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>We present configuration mechanisms based on by-example approaches for the adaptable model versioning system AMOR improving the complete versioning workflow. The Operation Recorder allows the specification of composite operations. Those operation definitions are used by the Conflict Manager supporting the specification of potential merge conflicts and suitable resolution strategies.</p>", "authors": [{"name": "Petra Brosch", "author_profile_id": "81375617498", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728540", "email_address": "", "orcid_id": ""}, {"name": "Martina Seidl", "author_profile_id": "81416596952", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728541", "email_address": "", "orcid_id": ""}, {"name": "Konrad Wieland", "author_profile_id": "81444605783", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728542", "email_address": "", "orcid_id": ""}, {"name": "Manuel Wimmer", "author_profile_id": "81317490231", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P1728543", "email_address": "", "orcid_id": ""}, {"name": "Philip Langer", "author_profile_id": "81436597396", "affiliation": "Johannes Kepler University, Linz, Austria", "person_id": "P1728544", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1639991", "year": "2009", "article_id": "1639991", "conference": "OOPSLA", "title": "By-example adaptation of the generic model versioning system AMOR: how to include language-specific features for improving the check-in process", "url": "http://dl.acm.org/citation.cfm?id=1639991"}