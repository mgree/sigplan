{"article_publication_date": "10-25-2009", "fulltext": "\n Software Cinema: Stories from the Lab Martin Purvis Andrew Long Department of Information Science Department \nof Information Science University of Otago University of Otago Dunedin, New Zealand Dunedin, New Zealand \n mpurvis@infoscience.otago.ac.nz along@infoscience.otago.ac.nz Abstract Film is a useful medium for \nconveying narratives inherent in user scenarios; not only in the physical world as users complete activi\u00adties \nbut also in envisioning how software might support these activities. Film allows for dynamic rendering \nof events, interac\u00adtions, and objects situated in the domain of their use. This pro\u00advides the necessary \ncontext in which to fully realise how the products of software engineering can better meet their user \nre\u00adquirements. This paper and video presents work done in an under\u00adgraduate software engineering project \nmanagement course to evaluate this potential. Categories and Subject Descriptors Primary Classification: \nD. Software; D.2 SOFTWARE ENGINEERING; D.2.1 Require\u00adments/Specifications; Subjects: Tools; Elicitation \nmethods (e.g., rapid prototyping, interviews, JAD). General Terms Documentation, Design, Experimentation, \nHu\u00adman Factors, Verification. Keywords Film; Narrative; Requirements; Modelling. 1. Introduction Computer \ninformation and control systems are designed and de\u00adveloped to interact with real-world processes. Although \nthe de\u00adsign techniques for software systems have traditionally been centred around building a mechanical \nsystem that responds to a fixed, known set of inputs, the complex and interactive nature of real-world \nsystems has always been outside the scope of these design techniques. Thus the traditional modelling \ntechniques have usually started with a static description of the system, even if it is depicted with \nabstract modelling tools (see Figure 1). As software modelling technology has evolved, there has been \na bot\u00adtom-up construction of more and more abstract modelling ap\u00adproaches that are designed to capture \nmore aspects of the real world in which we operate. But the real world in which the system is to operate \nis richer and more complex than what can be encompassed by these tools. There is still a significant \ngap separating the real-world operation from even the highest-level modelling formalisms that are in \nuse today (see Figure 2). In order to facilitate improved software system construction and to minimize \nerrors associated with mis Copyright is held by the author/owner(s). OOPSLA 2009, October 25-29, 2009, \nOrlando, FL, USA. ACM 978-1-60558-768-4/09/10.     Figure 1. conceptualized software specifications, \nit is advantageous to fill this modelling gap with some techniques or scaffolding that can assist the \nsoftware development team. Of course, there have been various attempts to address this gap, such as agile \nsoftware devel\u00adopment, which has deemphasized the time spent on formal model\u00adling and other lower-level \naspects of software development. Instead, these advocates place the greatest emphasis on rapid short-term \ndevelopment cycles so that frequent iterations involv\u00ading consultations with the customers (who implicitly \nmaintain much of the real-world problem conception in their heads) can be carried out. Thus agile software \nengineering recognises the al\u00admost treacherous nature of the gap, but it offers little support for navigating \nacross the gap other than stressing that light-weight development processes and frequent testing can \nfacilitate many rapid crossings, back and forth. Attempts to build a higher layer on top of the existing \nmodel\u00adling hierarchy, or attempts to move more rapidly back and forth across the gap are not very effective. \nThe reason is that the mental frameworks of most of the customers of software systems are firmly situated \nin the complexity of the real world, not in the lin\u00adguistic-based formal structures of most software \nmodelling ap\u00adproaches. What is needed is modelling scaffolding that is located in the richer domain of \nreal-world experiences.     Figure 2.  2. Software cinema Our approach is to employ digital video \ntechnology to visualize the interactive nature of the existing operational environment and how the proposed \nsoftware system will fit into it, or in our terms, software cinema . Software cinema comprises rapid-prototype \ndigital films that attempt to capture the envisioned interactions associated with a proposed software \nsystem. Such films are much more comprehensible to contractors and potential customers if the system \nis presented in the real-world contexts of their own experi\u00adence. In addition, such films can help visualize \nand thus explore potential pitfalls of such systems in ways that might not be obvi\u00adous from simple text-based \nrequirement descriptions or graphical models. These can be then placed in contrast with additional films \nthat are made to capture the existing work practices (i.e. prior to the construction of the proposed \nsystem) and can help identify and remind the viewer of the strengths and weaknesses of those existing \nprocedures. Thus we can say that the software cinema films are like use\u00adcase scenarios. However, they \ndisplay the richness of real situa\u00adtions, rather than simply the schematic diagrams of usual use-case \nscenarios. In addition, they display the real interactiveness that use-case diagrams can only suggest. \nIn addition, the current nonlinear digital video technology makes it relatively straightfor\u00adward to construct \nalternative scenarios and exceptional situa\u00adtions, besides the usual filmed scenarios that record normal \nor anticipated behaviours. 3. Employing software cinema In our third-year Software Project Management \ncourse (SENG 301) at the University of Otago in New Zealand, we dedicate an early portion of the term \nfor student-construction of software cin\u00adema prototypes. The students are divided into small teams and \ngiven elementary instruction concerning digital video film con\u00adstruction. Then each team is tasked with \nthe assignment to pro\u00adpose a mobile information system application and to explore the interactive space \nof their proposed system by constructing a soft\u00adware cinema demonstration film. These films are then \nexamined and critiqued by the class and the course instructors. It is our experience that the production \nof these films stimu\u00adlates the students to think more concretely and perhaps more deeply about the nature \nof the proposed system and how it will operate in an interactive environment. We have observed that software \nsecurity and privacy issues inevitably become more evi\u00addent when the students think in these concrete \nterms and actually construct films that demonstrate the interactions associated with the system. Note \nthat the actual software systems are not implemented at this stage, and, in fact, such an implementation \nis not necessary. One can make a film that envisions the interactive nature of a proposed mobile information \nsystem without the system having been realized. Sometimes, in fact, the students envision a pro\u00adposed \nsystem that stretches the boundaries of current computing technology. This is not necessarily a drawback. \nIt is certainly true mankind has envisioned many technical marvels, such as space travel, well before \nthey were physically realizable. And these visualized speculations undoubtedly stimulated the future \ndevelopment of these technologies.  4. Conclusions The software cinema films we contributed here represent \na brief compilation of these student projects. One should remember that these films are made by essentially \nuntrained, non-professionals. The fact that they are able to make productions in a short space of time \nconfirms our contention that software cinema is a practical and affordable process that is of potential \nwide use in the software engineering arena.   \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Film is a useful medium for conveying narratives inherent in user scenarios; not only in the physical world as users complete activities but also in envisioning how software might support these activities. Film allows for dynamic rendering of events, interactions, and objects situated in the domain of their use. This provides the necessary context in which to fully realise how the products of software engineering can better meet their user requirements. This paper and video presents work done in an undergraduate software engineering project management course to evaluate this potential.</p>", "authors": [{"name": "Martin K. Purvis", "author_profile_id": "81537183856", "affiliation": "University of Otago, Dunedin, New Zealand", "person_id": "P1728395", "email_address": "", "orcid_id": ""}, {"name": "Andrew L.S. Long", "author_profile_id": "81444596160", "affiliation": "University of Otago, Dunedin, New Zealand", "person_id": "P1728396", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640079", "year": "2009", "article_id": "1640079", "conference": "OOPSLA", "title": "Software cinema: stories from the lab", "url": "http://dl.acm.org/citation.cfm?id=1640079"}