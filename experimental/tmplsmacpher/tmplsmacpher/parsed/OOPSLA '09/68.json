{"article_publication_date": "10-25-2009", "fulltext": "\n IBM Altocumulus: A Cross-Cloud Middleware and Platform E. Michael Maximilien Ajith Ranabahu Roy Engehausen \nIBM Almaden Research Center Wright State University IBM Almaden Research Center 650 Harry Road 3640, \nColonel Glenn Highway 650 Harry Road San Jose, CA 95120 Dayton, OH 45435 San Jose, CA 95120 +1 (408) \n927-2124 +1 (706) 614-4324 +1 (408) 927-2708 maxim@us.ibm.com ranabahu.2@wright.edu hengehau@us.ibm.com \nLaura Anderson IBM Almaden Research Center 650 Harry Road San Jose, CA 95120 +1 (408) 927-1120 lca@us.ibm.com \n Abstract Cloud computing has become the new face of computing and promises to offer virtually unlimited, \ncheap, readily available, utility type computing resources. Many vendors have entered this market with \ndifferent offerings ranging from infrastructure\u00adas-a-service such as Amazon, to fully functional platform \nservices such as Google App Engine. However, as a result of this heterogeneity, deploying applications \nto a cloud and managing them needs to be done using vendor specific methods. This lock in is seen as \na major hurdle in adopting cloud technologies to the enterprise. IBM Altocumulus, the cloud middleware \nplatform from IBM Almaden Services Research, aims to solve this very issue of managing applications across \nmultiple clouds. It provides a uniform, service oriented interface to deploy and manage applications \nin various clouds and also provides facilities to migrate instances across clouds using repeatable best \npractice patterns. In this demonstration we will present the latest version of the IBM Altocumulus platform \nand also reveal some of the latest additions on scaling and the ability to perform map-reduce type computations. \nCategories and Subject Descriptors C.5.5 [Computer Systems Organization]: Computer System Implementation \n servers. General Terms Management, Experimentation, Standardization.  Keywords Cloud computing, Cloud \nPlatform, Clouds, Middleware, Web service, Web APIs, Cloud Management  1. Introduction Cloud computing \nallow IT infrastructure resources and application platforms to be exposed and consumed as services. Various \nstyles of compute cloud infrastructure are now available. Copyright is held by the author/owner(s). OOPSLA \n2009, October 25-29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10.  Some expose purely raw \ncomputing resources, some focus on application spaces, and others focus on enabling private and public \nhybrids of the previous. While the heterogeneity of cloud approaches can encourage innovation and some \nlevel of adoption, it also results in islands of uninteroperability and confusions in the marketplace. \nIn this demonstration we will show a new kind of middleware and platform that aims to homogenize the \ndifferent cloud paradigms, thereby helping solve the cloud interoperability issues. 2. Problem The key \nproblem that we are trying to address with our middleware is simply: enabling interoperability amongst \nand across compute clouds. Ideally the interoperation would be for different styles of compute clouds: \n1. Infrastructure-based clouds such as Amazon Elastic Compute Cloud (EC2), RackSpace, and IBM Developer \nCloud. 2. Platform-based clouds such as Google App Engine and Microsoft Azure. 3. Private clouds such \nas IBM CloudBurst, Eucalyptus, and NC State University Virtual Compute Lab (VCL).  Additionally, interoperation \nshould allow different types of workloads and applications to be deployed, managed, and scaled without \nrespect of cloud types and locations. Specifically, we believe that interoperation across clouds should \nenable cloud\u00adagnostic features around: 1. Application frameworks. These include supporting leading Web \napplication frameworks and languages such as: Ruby on Rails, Python/Django, JavaEE, Java/Spring, and \nPHP/Zend, as well as frameworks for scalable batch-mode operations, e.g., Apache Hadoop and Apache Cassandra. \n 2. Deployments of different workloads from the different application frameworks into different clouds. \nTypical deployment workflows such as creating instances, running an image, installing various components, \nconfiguring software  components into running instances, need to be done seamlessly across clouds. \n3. Scalability such that rules, topologies, and best practices around scaling a particular workload can \nbe done reliably and repeated across clouds. 4. Monitoring providing various metrics such as CPU, disk, \nand memory usages across all instances of a deployment. Collected data not only helps with scalability \nrules but also in understanding quality of service and thus decision-making for managing the life-cycle \nof deployments.  In a nutshell, we want to enable cloud best practices (or cloud usage patterns) for \ndifferent workloads that can be utilized in and across different clouds. 3. Altocumulus The IBM Altocumulus \nplatform and middleware is a research project from IBM Almaden Research Center and has been available \nto all IBM employees since July 2009. Release 2 of the Altocumulus project addressed most of the requirements \nlisted in Section 2, except for scaling. The up-coming release 3 addresses scalable deployments via scalable \nbest practices. 3.1 Architecture The IBM Altocumulus uses a distributed architecture that divides the \nplatform into three components: 1. Dashboard is the principal interaction points for end users. There, \nusers can: a) select the best practices that they want to use, b) provide credentials for the different \nclouds to target, and c) deploy and manage their applications into different clouds. 2. API and API \nTester is a Web application that exposes the Altocumulus REST API and gives an easy UI to invoke the \nAPI and browse documentation about it. 3. Core is the back-end orchestrator of the platform. It implements \nthe API which is how the Dashboard (and other Altocumulus applications) can communicate with the Core. \nThe Core contains an elaborated set of scripts, rules, and cloud adapters to allow execution of actions \nseamlessly across different clouds for different users.  Figure 1 illustrates the various components \nof the platform as well as different clouds currently fully supported and in experimental support.  \n3.2Implementation The IBM Altocumulus platform and middleware is fully implemented in Ruby and Ruby \non Rails. The various Web applications (e.g., the Dashboard and API Tester) are implemented in Ruby on \nRails. The API implementation makes use of Rails 2.0 RESTful API support. The Core back-end scripts and \ncloud adapters are implemented in pure Ruby with no specific tie-in dependency with the Rails framework. \nHowever, where useful, various aspect of the Rails philosophy, e.g., small tools, conventions over configurations, \nand metaprogramming, was also used on the scripts and adapters. The current deployment of IBM Altocumulus \nuses the platform itself to deploy a version into an IBM CloudBurst internal private cloud.  4.Discussion \nThe unique aspects of the IBM Altocumulus are its cross-cloud capabilities: APIs and codification of \ncross-cloud best practices for various Web application frameworks. The best practices are knowledge information \nthat comes from communities of users of these frameworks and clouds and is designed to evolve as new \nversions of the frameworks evolve or new frameworks and cloud functionality are added. Future works include \nsupporting additional clouds and supporting automatic scaling between clouds. That is the ability to \ncomplement a private cloud deployment with public cloud resources to match a burst in demand and then \nscaling down when the demand appeases. Another interesting direction is to look into an abstract cloud \napplication service layer which would direct application writers to create applications that are easily \nscalable. 5. Reference [1] Maximilien, E. M., Ranabahu, A., Engehausen, R., and Anderson, L. Toward \nCloud-Agnostic Middlewares. In Proceedings of ACM SIGPLAN International Conference on Object-Oriented \nProgramming, Systems, Languages, and Applications (OOPSLA), Orlando, FL, Oct. 2009.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Cloud computing has become the new face of computing and promises to offer virtually unlimited, cheap, readily available, \"utility type\" computing resources. Many vendors have entered this market with different offerings ranging from infrastructure-as-a-service such as Amazon, to fully functional platform services such as Google App Engine. However, as a result of this heterogeneity, deploying applications to a cloud and managing them needs to be done using vendor specific methods. This \"lock in\" is seen as a major hurdle in adopting cloud technologies to the enterprise. IBM Altocumulus, the cloud middleware platform from IBM Almaden Services Research, aims to solve this very issue of managing applications across multiple clouds. It provides a uniform, service oriented interface to deploy and manage applications in various clouds and also provides facilities to migrate instances across clouds using repeatable best practice patterns. In this demonstration we will present the latest version of the IBM Altocumulus platform and also reveal some of the latest additions on scaling and the ability to perform map-reduce type computations.</p>", "authors": [{"name": "E. Michael Maximilien", "author_profile_id": "81100291935", "affiliation": "IBM Almaden Research Center, San Jose, CA, USA", "person_id": "P1728642", "email_address": "", "orcid_id": ""}, {"name": "Ajith Ranabahu", "author_profile_id": "81339523627", "affiliation": "Wright State University, Dayton, OH, USA", "person_id": "P1728643", "email_address": "", "orcid_id": ""}, {"name": "Roy Engehausen", "author_profile_id": "81444605944", "affiliation": "IBM Almaden Research Center, San Jose, CA, USA", "person_id": "P1728644", "email_address": "", "orcid_id": ""}, {"name": "Laura Anderson", "author_profile_id": "81467647670", "affiliation": "IBM Almaden Research Center, San Jose, CA, USA", "person_id": "P1728645", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640024", "year": "2009", "article_id": "1640024", "conference": "OOPSLA", "title": "IBM altocumulus: a cross-cloud middleware and platform", "url": "http://dl.acm.org/citation.cfm?id=1640024"}