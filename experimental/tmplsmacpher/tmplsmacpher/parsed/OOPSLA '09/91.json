{"article_publication_date": "10-25-2009", "fulltext": "\n Modern Meeting Management and Information Retrieval Automatic Protocol Generation and Meeting Work.ow \nSupport Jennifer Schiller Technische Universitaet Muenchen, Siemens AG schiller@in.tum.de Abstract Communication \nis a key component in the daily software project management. It is the quintessential carrier of se\u00admantic \ninformation. But speech is transient and with it the information exchanged in meetings. To organize a \nsuccessful meeting, some rules have to be fol\u00adlowed. One is to summarize important -said -information \nin a written protocol to externalize the knowledge shared in the meeting. The act of manually writing \nmeeting minutes implicate a lot of problems. The protocol is published too late, inconsis\u00adtent, or incomplete, \ndue to the limited perceptivity and time of the protocol writer. Hence, we focus on an approach to automatically \ngenerate protocols and make them accessible to the right person. Therefore, keyword spotting, based on \na prede.ned and meeting-type dependent grammar, is ap\u00adplied to meeting recordings and the discussed information \nis extracted and accordingly pipelined into the project infor\u00admation work.ow. This paper presents a lightweight \nframework of an in\u00adformation and knowledge management approach to capture communication in meetings. \nCategories and Subject Descriptors D.2.9 [Software En\u00adgineering]: Management -Life Cycle General Terms \nManagement, Documentation, Human Fac\u00adtors, Algorithms Keywords Meeting, Communication, Information Retrieval, \nIBIS, Speech Recognition, Work.ow Support Permission to make digital or hard copies of all or part of \nthis work for personal or classroom use is granted without fee provided that copies are not made or distributed \nfor pro.t or commercial advantage and that copies bear this notice and the full citation on the .rst \npage. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior \nspeci.c permission and/or a fee. OOPSLA 2009, October 25 29, 2009, Orlando, Florida, USA. Copyright c \n&#38;#169; 2009 ACM 978-1-60558-768-4/09/10. . . $10.00 1. Introduction Meetings and verbal collaboration \nhave become an integral part of the workaday life. In Meetings, the current status as well as the project \nprogress is discussed; over problems, de\u00adcisions and changes is talked. Speech is a key component in \nthe project management life. It is the quintessential carrier of semantic information. But communication \nis transient and with it the information discussed in a meeting. In the area of meeting management a \nlot of best prac\u00ad  tices and proceedings were published in the past, that de\u00adscribe how to prepare and \nexecute a successful meeting. Also Issue Based Information Systems (IBIS) [1], invented by Werner Kunz \nand Horst Rittel in 1970, is a method used to support group discussions. IBIS are meant to help coordi\u00adnating \nand planning decision processes. Experiences and theories from the past are still applied in modern meeting \nmanagement, however there are new challenges. The number of meetings today is rising more and more, for \nexample. Especially the emergence of agile methods and practices [2, 3] and their increasing acceptance \nin the software development environment promote the un\u00adwritten communication, e.g. by a Daily Scrum Meeting \n[4]. However, when there are no more documents, an important knowledge management source gets lost, as \ncommunication is volatile. Also traceability of information is impeded. In this context, meeting management \nliterature demands the creation of meeting minutes and protocols, but the magni\u00adtude of meetings per \nday makes it impossible to write all the protocols. The obvious solution, beside the creation of manual \nproto\u00adcols, was to record all meetings and save the audio .les. First evaluations of our projects [5, \n6] admittedly showed that a pure recording of meetings is not enough. The retrieval of speci.c information \nas well as the search through the audio\u00addatabase is painful and often not fruitful. A post-processing \nof the audio .les is indispensable. Aim of our approach is to provide a framework to sup\u00adport meeting \nwork.ows, comprising post-processing, infor\u00admation retrieval and acquisition of information based on \nmeeting recordings. The framework realizes the ideas of IBIS and will embrace the traditional meeting \nmanagement approaches. The idea is to support the whole meeting work\u00ad.ow: from a meeting, its recording \nto the point of extraction of important information out of the meeting and its appro\u00adpriate storage and \ncreation of reports. Therefore, a meeting taxonomy with a dedicated meeting grammar is de.ned, which \nallows our tool to .nd and extract important informa\u00adtion from an audio .le and save them appropriately. \nThis paper gives an overview of our framework, intro\u00adduces our meeting taxonomy, and shows the possible \nappli\u00adcation in a software development project. 2. Related Work and Innovative Ideas Meetings are exercised \nfrom time immemorial. In a meet\u00ading, two or more people come together for the purpose of discussing a \n(usually) predetermined topic. We are a meet\u00ad ing society -a world made up of small groups that come \ntogether to share information, plan, solve problems, criticize or praise, make new decision or .nd out \nwhat went wrong withold ones. [7] In organizations, meetings are an important vehicle for per\u00adsonal contact. \nThey are so common and pervasive in orga\u00adnizations, that many take them for granted and forget that, \nunless properly planned and executed, meetings can be a waste of time and resources. Most meetings have \ntheir roots in some version of par\u00adliamentary procedure, where the manager sits at the head of a conference \ntable, controlling the dicussion, while a secre\u00adtary takes minutes. Parlamentary procedure is .ne for \nformal debate, but it is not at all suited to solving problems more or less informally, collaborating, \nworking together to reach agreement, and coping with complex, interdependent issues. So it s no wonder \nmeetings generally don t work very well. The environment has grown vastly more complex in the last half-century. \n[7] For this reason, a lot of best practices, advices and opti\u00admal meeting procedure have been released. \nThese comprise, having a meeting facilitator, but also to plan the structure of a group session including \nthe purpose, desired outcomes, and procedure, summarized in an agenda. Mining the group gold [8] involves \nalso a meeting recorder and writing a pro\u00adtocol to keep the decisions, brought up problems, etc. Beyond \nthat, the idea of Issue Based Information Sys\u00adtems (IBIS) provides a structured procedure and a rhetori\u00adcal \nmodel for meetings to enhance their outcome. IBIS is designed to support, to document, and to coordinate \ninfor\u00admation processes. It guides the identi.cation, structuring, and settling of issues raised by problem-solving \ngroups, and provides information pertinent to the discourse. The con\u00adcept of IBIS rests on a model of \nproblem solving by co\u00adoperatives as an argumentative process. About an initially unstructured problem \narea or topic a discourse develops. Is\u00adsues are brought up and disputed because different positions are \nassumed. Arguments are constructed in defense of or against the different positions until the issue is \nsettled by convincing the opponents or decided by a formal decision procedure. Elements of the system \nare topics, issues, questions of fact, positions, arguments, and model problems. Issues are the or\u00adganizational \natoms of IBIS-type systems.  IBIS is also a documentation and reporting system which permits fast and \nreliable information on the state of discourse at any time. These representation of the various relations \nbe\u00adtween issues, questions, etc., by graphic display of the state of argument is called an Issue Map. \nThe Issue Map, 1970 style, involved pen and paper. But over the following years, IBIS was re.ned and \nfurther developed. Many of the components of the 1970s version were made obsolete by advances in technology \nand business practices, but Issue Maps in particular, remained. In the 1980s, the era of personal computers \ndawned and later pioneers such as Jeff Conklin, could see the potential that IBIS had by util\u00adising a \ncomputer-based visual display. Independently from Rittel, Conklin was pursuing ways of capturing design \nratio\u00adnale. He adapted IBIS for use in software engineering and created the gIBIS (graphical IBIS) hypertext \nsystem. These days, a skilled IBIS practitioner can make a mas\u00adsive difference in helping a group develop \na shared under\u00adstanding and commitment of a problem. IBIS, at its heart, is a language speci.cally designed \nto break down the of\u00adten convoluted and complex structure of a conversation into something much more \nsimple to understand and digest. The premise of IBIS is that no matter how complex or argumen\u00adtative \nan issue is, we can break it all down to just three basic artifacts: Questions, Ideas, Arguments (pros \nand cons). Ideas respond to questions, offering possible solutions to the question. The arguments argue \nfor and against the various ideas. Questions can then be expanded on or challenge other questions, ideas, \nor arguments. Issue-Based Information Systems are used as a means of widening the coverage of a problem, \nby encouraging a greater degree of perspectives. Additionally, it helps to make the design process transparent. \nTransparency here refers to the ability of observers as well as participants to trace back the process \nof decision-making. It seems that, based on the realization of the meeting man\u00adagment advices and the \napplication of an Issue Based Infor\u00admation System the meeting process should be perfect. But the increasing \nnumber of meetings entail new challenges, chances and problems, which need new approaches. In the following, \nwe will focus on the documentation of meetings and protocol generation, as there are already a lot of \ntools (e.g. [9]) for the creation of agendas. Especially a so\u00adlution for ad-hoc meetings will be presented. \nTraditionally, meeting minutes have to be written manually. This holds a lot of problems just now, where \nmany protocols should be created. The minute taker can t keep up writing and listen\u00ading. So he will probably \nmiss the one or other statement. Additionally, the post processing is time consuming. As a consequence \nmeeting minutes are published too late, incor\u00adrect or imperfect. And then, the protocols pile up on the \ndesk -unread -and information get lost and assigned tasks are not done by the next meeting. Our proposal \nrepresents the combination of existing speech recognition with word spotting techniques and an ad\u00additional \nanalysis, operation, and preparation for an automatic report generation and meeting work.ow support, \nbased on the above mentioned concepts. Therefore,the framework combines speech recognition and meeting \nmanagement the\u00adories. Aim is to instantiate a lightweight, usable and intelli\u00adgent tool for capturing, \nsharing and storage of information. This knowledge management tool has to handle externalized knowledge \nin a software development project and will con\u00adfront speech as a fuzzy input. In a second step it is \ncontemplated, to provide a mobile solution of our system to support ad-hoc meetings. 3. Acquisition of \nInformation from Audio Files This section describes the process of data detection during a meeting and \nthe realized concepts. The system is based on a keyword spotting approach where particular keywords are \nrecognized during a spoken dialog. Therefore, our frame\u00adwork comprises a meeting grammar with de.ned \nkeywords, which allow an improved speech recognition. The specialty is a dynamic extending grammar -a \nself-improving system \u00adwhere the project context is integrated to enhance the speech recognition over \nthe project. 3.1 Meeting Taxonomy Based on Bischof [10] and Bruegge [11] a meeting tax\u00adonomy was de.ned \nand afterwards dedicated keywords for each meeting type determined. First we identi.ed meeting elements \n-smallest, recurring units of a meeting. These are for example status informa\u00adtion , where the status \nof current tasks, project progress, etc. is discussed, or a problem de.nition , the announcement or de.nition \nof an issue. Additionally, decision making , with the elements of IBIS (questions, ideas, arguments and \na solution) is a common meeting element. Planning, con\u00adtrolling, discussions, brainstorming, or the scheduling \nof the next meeting are further units of a meeting. Each meeting type consists of several of those meeting \nele\u00adments. A daily status meeting, for instance comprises sta\u00adtus information , possibly problem de.nitions \n, if a team member face a problem, controlling or the update of the project plan and estimations. Our \nwhole meeting taxonomy tree is illustrated in .gure 1. The meeting grammar is build on the gathered \nmeeting el\u00adements. For each smallest, recurring meeting unit a meeting grammar was de.ned. Thereon the \nkeyword spotting com\u00adponent is based. In the following, exemplarily two grammars are presented. grammar \nstatusChange; /** If the developer takes a Backlog Item to start realization * or it is tested/ .nished, \nthe status of this item changes. * Currently there are three different states open, in progress,  * \nand completed.  * @example: change status of Action Item 2 to completed. */ <statusChange> = <updateCommand>Status \nof [<itemType>]   <BacklogItem>to <status>;  <updateCommand> = update | change | add [new] | re\u00ad \nvise | adjust | modify | set ; <itemType>= Action Item | Backlog Item | Impedi\u00ad  men | Problem | Issue \n| Bug ; <BacklogItem>=1 | 2 | 2453 ; //current Backlog Item iden\u00adti.er <status> = open | in progress \n| completed ;  grammar issue; /** Add new issue to a problem list (e.g. during the daily * status meeting). \n * @example There is a new issue: How can we assure the  * connection to component x?. End of issue. \n*/ <newIssue> = new <issue>: <issuedescription>. End of is\u00ad   sue. ; <issue> = issue | impediment | \nproblem | blocker ;  <issuedescription>= text ; 3.2 Meeting Process Following the process of data \ndetection during a meeting is summarized and how the meeting grammar is used for key\u00adword spotting. At \nthe beginning of a meeting, a video camera or audio recorder is started. Then, continually a video/audio \nis produced which will be processed by the speech recogni\u00adtion engine. Afterwards the document will be \nsearch through for pre-de.ned keywords according to the grammar. If a keyword is found, the kind of keyword \nindicates the fur\u00adther process steps which will be carried out afterwards. We take for instance the daily \nstatus meeting. There, each team Figure 1. Meeting types and their elements member presents its current \nwork progress, whether a task corresponding to a requirement could be completed, is still in progress, \nor a new task was opened. If there are any im\u00adpediments, which kept from doing the work, they will be \nreported, too. Moreover, new action items are de.ned to re\u00adalize a requirement and assigned to a team \nmember. There are special keywords for a daily status meeting to recognize status changes of a task, \nnew action items, and new impedi\u00adments, which are all summarized in the meeting grammar as proposed above. \nThe algorithm searches for these prede.ned keywords, which depend on the meeting type and processes the \nfound information according to the keyword. So it is for instance possible to detect beside all action \nitems current issues, sta\u00adtus changes, as well as decisions, new software development requirements, and \nimprovement ideas. Out of the meeting audio the information is accordingly .led and reports and protocols \nare automatically generated. These reports contain a summary of the meeting; but it is also possible \nto prepare a focused summary, e.g. all decisions and status changes which are connected to a dedicated \nrequirement. 3.3 System Description The system is decomposed into video processing and the meeting framework. \nThe video processing unit accepts the video input, extracts the audio and forwards it to the speech recognition \nengine. Then, the output is send to the meet\u00ading framework, where a key word spotting -according to the \nprede.ned meeting grammar -is done. Afterwards, the found information is extracted and appropriately \n.led in the database, reports or meeting minutes are generated, and the information is forwarded to the \nappropriate project manage\u00adment tool. The whole system is illustrated in .gure 2. In regular intervals, \nthe meeting grammar is extended by new project vocabulary. This is done by the framework by a search \nthrough project tools, like an design tool, for new project words. These are integrated in the meeting \ngrammar, as it is most likely that the team will talk about those con\u00adtents. 3.4 Interfaces The specialty \nand uniqueness of our framework consists on the one hand in the prede.ned grammar to support an easy \ninformation extraction and on the other hand in a connection to other tools for project and document \nmanagement. Information, extracted in the meeting is either handed over to the protocol generator, or \nto the protocol generator and to a project management tool, e.g. a ToDo-List-Tool, if a new task was \ngenerated in the meeting. Consequently the discussed information of a meeting is accordingly .led and \nwill never be lost. This approach improves in addition the collaboration and the information transfer \nbetween participants of distributed  Figure 2. System decomposition projects. Each team member can replay \nthe decisions made in the meeting, even if he didn t attend the session. A special mechanism will notify \nhim, if the requirement, he is working on, was mentioned in the meeting. Decisions, modi.cations, additional \nsub-items, etc. are automatically summarized in a protocol. The system provides spoken information that \ncan be maintained and shared during the life of a requirement. So it is possible to go back and review \nall decisions regard\u00ading a requirement. This procedure is the .rst step to an au\u00adtomatic, companywide \nreporting mechanism and knowledge management approach. 4. Status Quo Currently we are still in an iterative \ndevelopment and eval\u00aduation cycle. The main algorithms and functionalities are developed using the example \nof agile Scrum Meetings to show feasibility and evaluate the practicability of the idea. Additionally \nan interface creation to the CASE tool uni\u00adcase [12] is in progress. Unicase is a tool, integrating models \nfrom the different development activities, such as require\u00adments, use cases, UML models, schedules, bug, \nand feature models into a uni.ed model. This academically developed tool will allow us to create real \naction items for instance, detected in the meeting. They can be assigned to team mem\u00adbers, attached \nwith a due date and noti.cations are send automatically without any manual interaction. So the project \nteam will be relieved by an additional work and rather can focus again on their actual work, creating \nsoftware projects. Moreover, this tool provides in regular intervals project vo\u00adcabulary, which is integrated \nin the speech recognition en\u00adgine to enhance the word detection rate. The present realization of our \nframework is arranged for commercial speech recognition. Currently we are evaluating several speech solutions \nlike MacSpeech Dictate [13], the open source tool Sphinx [14], and Nuance s Dragon Natu\u00adrallySpeaking \n[15]. Our requirements are in particular multiuser and untrained speech recognition, which are at the \nsame time our biggest issues. We are searching for a pragmatic solution. To en\u00adhance the word detection \nrate several attempts are estab\u00adlished, involving, instead of one microphone per room, a microphone per \nmeeting participant and therewith one au\u00addio channel per user. Thus the speech recognition can be done \nper user with a user trained speech recognition, so we can improve the recognition correctness, as long \nthe speech recognition research haven t progressed well enough. The evaluation of the protocol generation \nand meeting work.ow support framework is currently done in a stu\u00addent project at the Technische Universitaet \nMuenchen and is planned for real software development projects with in\u00addustry cooperation partners like \nSiemens for fall 2009. 5. Conclusion and Outlook This paper gave an overview of our framework to support \nan information extraction and retrieval out of meeting record\u00adings. First evaluations showed a consistently \npositive feedback. Our framework is a great assistance in software development projects by an advanced \nmeeting management systems that supports a coherent work.ow for information generation and retrieval. \nOur biggest issue is currently the speech recogni\u00adtion correctness as mentioned above. Despite this, \nthere are a lot of ideas to enhance this frame\u00adwork. As next steps an extension by a linking of the location \nin the audio and the information in a text document, for example is planned. Additionally, we are currently \nenlarg\u00ading our meeting taxonomies (created for the classi.cation of meeting types with associated keywords) \nby software devel\u00adopment independent meetings. The idea is to support also other meeting types, especially \nthe assistance and encour\u00adagement of ad-hoc meetings with a mobile solution of our system is currently \nfocused and re.ned. However, information comes not only from meetings. There are e-mails, forums, chats, \nand lots of other sources where information is exchanged in a communicative way. In a further step, these \nsources have to be integrated in the companywide knowledge and report mechanisms. References [1] Kunz, \nW.; Rittel, H., Issues As Elements of Information Sys\u00adtems. Working Paper No. 131, 1970 [2] Agile Manifesto, \nURL: http://agilemanifesto.org (access: 12.06.2009) [3] Schwaber, K., Beedle, M., Agile Software Development \nwith SCRUM. Prentice Hall, 2001 [4] Mountain Goat Software, URL: http://www.mountaingoat software.com/daily-scrum \n(access: 20.06.2009) [5] DOLLI Project, URL: http://www1.in.tum.de/static/dolli/ (ac\u00adcess: 12.06.2009) \n[6] Bruegge, B., Reiss, M., Schiller, J., Agile Principles in Aca\u00addemic Education: A Case Study, itng, \npp.1684-1686, 2009 Sixth International Conference on Information Technology: New Generations, 2009 [7] \nDoyle, M.; Straus, D., How to make meetings work. Jove Book, 1976 [8] Kayser, T. A., Mining Group Gold \n-How to Cash In On the Collaborative Brain Power of a Group. McGraw-Hill, 1995 [9] Sofotex, Agenda Organizer \nDeluxe, URL: http://www.sofotex.com/ (access: 24.06.2009) [10] Bischof, A., Besprechungen: Effektiv \nund ef.zient. Haufe Verlag, 2007 [11] Bruegge, B.; Dutoit, A. H., Object-Oriented Software Engi\u00adneering: \nUsing UML, Patterns and Java. 2nd edition, Prentice Hall, 2003 [12] Unicase, URL: http://unicase.org/ \n(access: 24.06.2009) [13] MacSpeech Dictate, URL: http://www.macspeech.com/ (ac\u00adcess: 24.06.2009) [14] \nThe CMU Sphinx Group Open Source Speech Recognition Engine, URL: http://cmusphinx.sourceforge.net/html/ \ncmus\u00ad phinx.php (access: 24.06.2009) [15] Nuance, Dragon Naturally Speaking 10, URL: http://www.nuance.de/naturallyspeaking/ \n(access: 24.06.2009)   \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Communication is a key component in the daily software project management. It is the quintessential carrier of semantic information. But speech is transient and with it the information exchanged in meetings.</p> <p>To organize a successful meeting, some rules have to be followed. One is to summarize important - said - information in a written protocol to externalize the knowledge shared in the meeting. The act of manually writing meeting minutes implicate a lot of problems. The protocol is published too late, inconsistent, or incomplete, due to the limited perceptivity and time of the protocol writer. Hence, we focus on an approach to automatically generate protocols and make them accessible to the right person. Therefore, keyword spotting, based on a predefined and meeting-type dependent grammar, is applied to meeting recordings and the discussed information is extracted and accordingly pipelined into the project information workflow.</p> <p>This paper presents a lightweight framework of an information and knowledge management approach to capture communication in meetings.</p>", "authors": [{"name": "Jennifer Schiller", "author_profile_id": "81375612175", "affiliation": "Technische Universit&#228;t M&#252;nchen, Munich, Germany", "person_id": "P1728322", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640050", "year": "2009", "article_id": "1640050", "conference": "OOPSLA", "title": "Modern meeting management and information retrieval: automatic protocol generation and meeting work", "url": "http://dl.acm.org/citation.cfm?id=1640050"}