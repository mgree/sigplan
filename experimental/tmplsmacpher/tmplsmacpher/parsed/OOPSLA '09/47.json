{"article_publication_date": "10-25-2009", "fulltext": "\n S.P.L.O.T. -Software Product Lines Online Tools Marcilio Mendonca Moises Branco Donald Cowan University \nof Waterloo, Canada Banco do Nordeste do Brasil, Brasil University of Waterloo, Canada marcilio@csg.uwaterloo.ca \nmoises@bnb.gov.br dcowan@csg.uwaterloo.ca Abstract This paper introduces S.P.L.O.T., a Web-based reason\u00ading \nand con.guration system for Software Product Lines (SPLs). The system bene.ts from mature logic-based \nrea\u00adsoning techniques such as SAT solvers and binary decision diagrams to provide ef.cient reasoning \nand interactive con\u00ad.guration services to SPL researchers and practitioners. In addition, the system \nprovides a feature model repository containing real and generated models to encourage knowl\u00adedge sharing \namong researchers in the .eld. Categories and Subject Descriptors D.2.2 [Software En\u00adgineering]: Design \nTools and Techniques CASE; D.2.1 [Software Engineering]: Requirements/Speci.cations Tools General Terms \nDesign Keywords Software Product Lines, Feature Models, Auto\u00admated Reasoning, Interactive Con.guration, \nFeature Model Analysis 1. Introduction Software Product Lines (SPLs) [6, 7] is a contemporary ap\u00adproach \nto software development that promotes reuse to a .rst-class citizen aiming at reducing overall development \ntime and cost while improving product quality. Feature mod\u00adels [9] play an important role in SPLs by \nproviding means to represent the commonalities and variabilities within a fam\u00adily of systems which thereby \nallows individual family mem\u00adbers to be safely con.gured. This year, the SPL commu\u00adnity celebrates the \n20th anniversary of feature models as a recognition of its relevance to the .eld. Currently, several \nfeature-based reasoning [14, 11] and con.guration [1, 10, 5] tools are available taking advantage of \nmature logic-based systems such as SAT solvers [12], binary decision diagrams (BDDs) [13] and constraint \nsolvers [3] among others. In this paper, we introduce a new reasoning and con.gu\u00adration system for feature \nmodels called S.P.L.O.T.1 (avail\u00adable at www.splot-research.org). S.P.L.O.T. offers a dy\u00adnamic Web-based \ninterface backed up by a rich set of state\u00adof-the-art algorithms for con.guring and reasoning on Soft\u00adware \nProduct Lines by means of feature models. To the best of our knowledge, S.P.L.O.T. is the .rst internet-based \nsys\u00adtem to deliver such a variety of services for SPL end-users and researchers. Since its launch in \nMay 2009, S.P.L.O.T. has been visited by several research groups from over 15 countries. In the next \nsections, we introduce S.P.L.O.T., its reason\u00ading infra-structure, provided services and the repository \nof feature models. 2. S.P.L.O.T. 2.1 Overview S.P.L.O.T. is a Web-based system developed in Java2 that \nuses an HTML template engine to build highly-interactive Ajax-based reasoning and con.guration user interfaces. \nAs the system is internet-based it strongly facilitates knowledge sharing (e.g. feature model repository) \nand does not require downloading software updates. S.P.L.O.T. is supported by sophisticated con.guration \nengines and ef.cient automated reasoning systems based on public SAT (SAT4J [4]) and BDD (JavaBDD [15]) \nengines. In addition, S.P.L.O.T. of\u00adfers a repository of feature models as discussed later.  2.2 Reasoning \nTechniques Research exploring the connection between feature models and propositional logic [2] has enabled \nthe use of logic\u00adbased techniques such as BDDs and SAT solvers to rea\u00adson on feature models. However, \nit is well-known that those techniques can suffer from space (BDD) and/or time (SAT) intractability problems. \nTo minimize such problems, S.P.L.O.T. makes use of novel BDD heuristics [13] to shrink the size of BDDs \nas much as possible. As well, the system capitalizes on the observed ef.ciency of SAT systems in the \nfeature modeling domain [12] to provide high-performance SAT-based algorithms (e.g. valid domain computation). \n Copyright is held by the author/owner(s). 1 S.P.L.O.T. stands for Software Product Lines Online Tools \nOOPSLA 2009, October 25 29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. 2 Java Servlet \nAPI 2.5  Speci.cally, S.P.L.O.T. uses a BDD engine to count valid con.gurations, to calculate the variability \ndegree of feature models and to perform interactive con.guration. Moreover, a SAT solver is also used \nto support interactive con.guration and to perform debugging tasks such as check\u00ading the consistency \nof feature models and detecting common and dead features. We expect new reasoning techniques and operations \nto be supported in the near future.  2.3 Services Currently, S.P.L.O.T. provides two major services: \nauto\u00admated reasoning and product con.guration. Reasoning fo\u00adcus on automating statistics computation \n(e.g. depth of the feature tree, number of features) and critical debugging tasks such as checking the \nconsistency of feature models and de\u00adtecting the presence of dead and common features. In ad\u00addition, \nreasoning supports measuring properties such as the number of valid con.gurations and the variability \ndegree of feature models. With regards to product con.guration, S.P.L.O.T. currently supports interactive \ncon.guration [8] in which users make a decision at a time and the con.g\u00aduration system automatically \npropagates those decisions to enforce their consistency. This results in a backtrack\u00adfree con.guration \nprocess directly bene.ting users that are never forced to revisit past decisions. Among current op\u00aderations \nsupported are con.guring, undoing, toggling (in\u00adcluding a con.ict resolution strategy), and auto-completing. \n S.P.L.O.T. achieves high performance in interactive con.g\u00aduration by using BDDs and a novel SAT-based \nvalid domain computation algorithm3 that minimizes the number of SAT checks performed.   2.4 Feature \nModel Repository A major issue reported by SPL researchers is the lack of publicly-available feature \nmodels. S.P.L.O.T. tackles this issue by providing a public model repository containing over 20 real \nmodels previously published in the literature and several automatically-generated models with up to 10,000 \nfeatures. We strongly encourage researchers to submit their own models to the repository. 3. Conclusion \nWe presented S.P.L.O.T., a Web-based reasoning and con\u00ad.guration system for Software Product Lines. The \nsystem bene.ts from logic-based reasoning techniques such as SAT solvers and BDDs to provide ef.cient \nreasoning and inter\u00adactive con.guration services to SPL researchers and prac\u00adtitioners. In addition, \na feature model repository containing real and generated models is available to encourage knowl\u00adedge \nsharing among researchers. Currently, S.P.L.O.T. is on experimental stage and we expect many new features \nto be added in the near future. 3 An upcoming paper submission from the S.P.L.O.T. team References [1] \nM. Antkiewicz and K. Czarnecki. FeaturePlugin: Feature modeling plug-in for Eclipse. In OOPSLA 04 Eclipse \nTechnology eXchange (ETX) Workshop, 2004. [2] D. S. Batory. Feature models, grammars, and propositional \nformulas. In Software Product Lines, 9th Int. Conference, SPLC 2005, Rennes, France, September 26-29, \n2005, Proceedings, volume 3714 of LNCS, pages 7 20. Springer, 2005. [3] D. Benavides, P. Trinidad, and \nA. Ruiz-Cortes. Automated reasoning on feature models. In Proceedings of the 17th Conference on Advanced \nInformation Systems Engineering (CAiSE 05), Porto, Portugal, 2005, LNCS. Springer, 2005. [4] D. L. Berre, \nA. Parrain, O. Roussel, and L. Sais. SAT4J: A satis.ability library for Java, 2005. http://www.sat4j.org/. \n[5] D. Beuche. pure::variants Eclipse Plugin. User Guide. pure-systems GmbH. Available from http://web.pure\u00adsystems.com/.leadmin/downloads/pvuserguide.pdf, \n2004. [6] P. Clements and L. Northrop. Software Product Lines: Practices and Patterns. Addison-Wesley, \nBoston, MA, 2001. [7] K. Czarnecki and U. W. Eisenecker. Generative Program\u00adming: Methods, Tools, and \nApplications. Addison-Wesley, Boston, MA, 2000. [8] T. Hadzic, S. Subbarayan, R. M. Jensen, H. R. Andersen, \nJ. M\u00f8ller, and H. Hulgaard. Fast backtrack-free product con\u00ad.guration using a precompiled solution space \nrepresentation. In PETO Conference, pages 131 138. DTU-tryk, June 2004. [9] K. Kang, S. Cohen, J. Hess, \nW. Nowak, and S. Peterson. Feature-oriented domain analysis (FODA) feasibility study. Technical Report \nCMU/SEI-90-TR-21, Software Engineer\u00ading Institute, Carnegie Mellon University, Pittsburgh, PA, Nov. 1990. \n[10] C. Kastner, T. Thum, G. Saake, J. Feigenspan, T. Leich, F. Wielgorz, and S. Apel. FeatureIDE: A \ntool framework for feature-oriented software development. In ICSE 09, pages 611 614, Washington, DC, \nUSA, 2009. [11] M. Mendonca. 4WATREASON -A Feature Model Reason\u00ading Tool, 2008. Available at: http://csg.uwaterloo.ca/ \nmar\u00adcilio/fmcompilation/index.html. [12] M. Mendonca, A. Wasowski, and K. Czarnecki. SAT-based analysis \nof feature models is easy. In Proceedings of the 13th Int. Software Product Line Conference (SPLC), 2009. \n[13] M. Mendonca, A. Wasowski, K. Czarnecki, and D. D. Cowan. Ef.cient compilation techniques for large \nscale feature models. In Int. Conference on Generative Programming and Component Engineering (GPCE 08), \npages 13 22, 2008. [14] P. Trinidad, D. Benavides, A. Ruiz-Cortes, S. Segura, and A. Jimenez. FAMA framework. \nSoftware Product Line Conference, 2008. SPLC 08. 12th Int., pages 359 359, Sept. 2008. [15] J. Whaley. \nThe JavaBDD BDD library, 2003 2007. Available at: http://javabdd.sourceforge.net/.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>This paper introduces S.P.L.O.T., a Web-based reasoning and configuration system for Software Product Lines (SPLs). The system benefits from mature logic-based reasoning techniques such as SAT solvers and binary decision diagrams to provide efficient reasoning and interactive configuration services to SPL researchers and practitioners. In addition, the system provides a feature model repository containing real and generated models to encourage knowledge sharing among researchers in the field.</p>", "authors": [{"name": "Marcilio Mendonca", "author_profile_id": "81100496834", "affiliation": "University of Waterloo, Waterloo, ON, Canada", "person_id": "P1728568", "email_address": "", "orcid_id": ""}, {"name": "Moises Branco", "author_profile_id": "81444596886", "affiliation": "Banco do Nordeste do Brasil, Fortaleza, Brazil", "person_id": "P1728569", "email_address": "", "orcid_id": ""}, {"name": "Donald Cowan", "author_profile_id": "81100594001", "affiliation": "University of Waterloo, Waterloo, ON, Canada", "person_id": "P1728570", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640002", "year": "2009", "article_id": "1640002", "conference": "OOPSLA", "title": "S.P.L.O.T.: software product lines online tools", "url": "http://dl.acm.org/citation.cfm?id=1640002"}