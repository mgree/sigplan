{"article_publication_date": "10-25-2009", "fulltext": "\n MT-Scribe: A Tool for Recording and Inferring Model Transformations Yu Sun and Jeff Gray Department \nof Computer and Information Sciences University of Alabama at Birmingham Birmingham, AL 35294 {yusun, \ngray}@ cis.uab.edu Abstract The traditional model transformation approach is to write transformation \nprograms in a specialized language. Although such languages provide powerful capabilities to automate \nmodel refinements, they still present challenges to those who are unfamiliar with specialized model transformation \nlanguages or metamodels. MT-Scribe is a tool to simplify the creation of model transformations by recording \nand analyzing user\u00adspecified model transformations so that they can be modularized and applied to other \nmodels. This approach does not require users to have knowledge of any model transformation language or \nfamiliarity with a metamodel definition. Through this demonstration, the audience will observe an innovative \napproach to implement model transformations and understand how to apply this approach to simplify endogenous \nmodel transformations tasks to support model evolution. Categories and Subject DescriptorsD.2.2-2.6 [Software \nEngineering]: Design Tools and Techniques; Programming Environments; I.6.5 [Simulation and Modeling]: \nModel Development General Terms Algorithms, Design, Languages. Keywords Model transformation, Demonstration, \nMT-Scribe. 1. Introduction Model transformation plays an essential role in many applications of model \nengineering using domain-specific languages. The traditional and common approach to realize model transformations \nis to write transformation rules and automate transformation processes by using an executable model transformation \nlanguage. Although most existing model transformation languages are powerful enough to implement large-scale \nand complex model transformation tasks for different purposes, they present some challenges to users, \nparticularly those who are unfamiliar with a specific transformation language. First, since these languages \nmay not be at the proper level of abstraction for an end-user, a steep learning curve and high training \ncost are inevitable, especially when the users have little programming experience. Moreover, the transformation \nrules are usually defined at the metamodel level, requiring a clear and deep understanding about the \nabstract syntax and semantic interrelationships between the source and target models. In some cases, \ndomain concepts may be hidden in the metamodel and difficult to unveil (e.g., some concepts are hidden \nin attributes, association ends or enumerations, rather than being represented as first-class entities), \nwhich makes writing transformation rules challenging. Thus, the difficulty of specifying metamodel-level \ntransformation rules and the associated learning curve may prevent some domain experts Copyright is held \nby the author/owner(s). OOPSLA 2009, October 25-29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. \n Jules White Institute for Software Integrated Systems Vanderbilt University Nashville, TN 37203 jules@dre.vanderbilt.edu \nfrom building model transformations for which they have extensive domain experience. To address the challenges \ninherent in using model transformation languages, Model Transformation By Example (MTBE) has been proposed \n[1]. Rather than writing transformation rules manually, MTBE enables users to setup interrelated mappings \nbetween the source and target model instances, and the metamodel-level transformation rules are automatically \ngenerated. However, the current MTBE implementations [1][2] have limitations that prevent them from being \nadopted widely. First, the generation of rules is semi\u00adautomatic and requires user refinement, so users \ncannot be fully isolated from the knowledge of transformation languages and metamodel definitions. Also, \ncurrent approaches focus on directly mapping the corresponding domain concepts between two different \nmetamodels without handling complex attribute transformations (e.g., an attribute in the source model \nis transformed to another attribute in the target model by some arithmetic or string operations). To \novercome such problems and to further simplify the realization of model transformation, we have been \ninvestigating the idea of Model Transformation By Demonstration (MTBD). Tool support, such as presented \nin this demonstration, can assist general model users (e.g., domain experts and non-programmers) in realizing \nmodel transformations without knowing a specific model transformation language or the metamodel definition. \n 2. MTBD Solution The MTBD idea derives from MTBE. Instead of inferring the rules from a set of interrelated \nmappings between the source and target models, users are asked to demonstrate how the model transformation \nshould be done by directly editing (e.g., add, delete, update) the source model to simulate the transformation \nprocess step-by-step. A recording engine captures all of the user s operations during the demonstration. \nAfter the source model is changed into the desirable target model, the system obtains all the necessary \noperations to realize the transformation task. Then, the inference engine infers the user s intention \nand generates a transformation pattern from the recorded operations. This generated pattern can be reused \nand executed by the engine in any model instance to carry out the model transformation. As an implementation \nof the MTBD idea, MT-Scribe is an Eclipse plug-in for GEMS (Generic Eclipse Modeling System) [3]. The \ncurrent version focuses on endogenous model transformations (i.e., both the source and target models \nconform to the same metamodel). It consists of five main steps, as shown in Figure 1. Step 1 - User demonstration \nand operations recording. The demonstration is given by directly editing a model instance. At the same \ntime, an event listener monitors all the operations occurring and related context information.  Step \n2 - Optimize recorded operations. The sequence of operations recorded directs how a transformation should \nbe performed. However, not all operations are meaningful (e.g., a user first adds a new element and then \ndeletes it in another operation, the result being that both operations cancel each other in the transformation \nprocess and therefore are meaningless). An algorithm has been designed to eliminate meaningless operations \nautomatically. Step 3 - Infer the transformation pattern. A transformation pattern is inferred by analyzing \nthe recorded operations. The generated pattern describes the precondition of a transformation (i.e., \nwhere the transformation should be performed) and the actions of a transformation (i.e., how the transformation \nshould be realized). Step 4 - Execute transformation patterns. The inferred transformation patterns can \nbe reused and executed in any model instances. A backtracking algorithm has been implemented to automatically \nmatch a precondition in a selected model instance. After a matching location is found, the transformation \nactions will be replayed to carry out the transformation. Step 5 -Correctness checking. Precondition \nmatching guarantees that operations can be executed with the required operands. However, it does not \nensure that executing them will conform to the metamodel definition. Each applied operation is logged \nand model instance correctness checking is performed after every operation execution. If a certain operation \nviolates the metamodel definition, all executed operations are undone and the whole transformation replay \nis cancelled. Figure 1.Overview of MT-Scribe Throughout the process, users are only involved in Step \n1. All other steps are finished automatically without any manual refinement. Since the user is provided \nwith a high-level domain\u00adspecific GUI to specify the transformation, no model transformation languages \nare used and the generated transformation patterns are invisible to users. Users are completely isolated \nfrom the underlying model transformation specification language and the metamodel definition. In addition, \ncomplex attribute operations can be inferred, making our approach more powerful compared with the MTBE \napproaches. This demonstration will illustrate several practical endogenous model transformations in \ndifferent domains, showing improvement in the efficiency and simplicity of specifying model transformations. \nVideo demonstrations of this process are available at http://www.cis.uab.edu/softcom/mtbd  3. Demonstration \nOverview The Presenters Yu Sun is a Ph.D. candidate in the Department of Computer and Information Sciences \n(CIS) at UAB and member of the SoftCom Laboratory. His research interests include domain-specific modeling, \ndomain-specific languages and model transformation techniques. He is the implementer of the MT-Scribe \nplug-in. Dr. Jeff Gray is an Associate Professor in the CIS Department at UAB, where he co-directs research \nin the SoftCom Laboratory. His research interests include model-driven engineering, aspect orientation, \ncode clones, and generative programming. Dr. Gray is the designer of the MTBD idea. Dr. Jules White is \na Research Assistant Professor at Vanderbilt University. His research focuses on applying model-driven \nengineering and constraint-based optimization techniques to the deployment and configuration of complex \nsoftware systems. Dr. White is the project leader for GEMS. What Will the Audience See The demonstration \nwill be structured to contain the following parts through both a PowerPoint presentation and a live example \nof several case studies demonstrating use of MT-Scribe. Part 1 -Motivation for MT-Scribe. The background \ninformation about model transformation and model transformation languages will be given, followed by \nan introduction to the problems associated with using model transformation languages. We will also briefly \nintroduce MTBE and its limitations to highlight the motivation of MT-Scribe. A transformation sample \nproblem in a simple domain will be used as a motivating example. Part 2 - Overview of MT-Scribe. We will \ngive an overview of MT-Scribe, including the basic MTBD idea and its main steps. Then, we will demonstrate \nhow to use MT-Scribe to solve the motivating transformation example. The demonstration will explain the \nmain implementation details including the GEMS modeling platform, the architecture of MT-Scribe, and \nalgorithms used. Part 3 - More Demos of MT-Scribe. The presentation will proceed by demonstrating several \nendogenous model transformations in two different domains. We will provide MT-Scribe solutions for several \ncommon transformation tasks in a modeling language for describing textual games. Another example domain \nrepresents UML class diagrams. Some typical UML refactoring tasks such as Extract Subclass, Push Down \nMethod, Hide Delegate will be demonstrated to show how MT-Scribe can simplify these refactoring tasks. \n  Acknowledgement This work is supported by NSF CAREER award CCF-0643725.  References [1] Balogh, Z., \nVarr\u00f3, D.: Model transformation by example using inductive logic programming. Software and Systems Modeling, \nDOI 10.1007/s10270-008-0092-1, Springer Berlin / Heidelberg. [2] Strommer, M., Wimmer, M.: A framework \nfor model transformation by-example: Concepts and tool support. In Proceedings of the 46th International \nConference on Technology of Object-Oriented Languages and Systems, Zurich, Switzerland, July 2008, pp. \n372 391. [3] Generic Eclipse Modeling System (GEMS). http://www.eclipse.org/gmt/gems/  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>The traditional model transformation approach is to write transformation programs in a specialized language. Although such languages provide powerful capabilities to automate model refinements, they still present challenges to those who are unfamiliar with specialized model transformation languages or metamodels. MT-Scribe is a tool to simplify the creation of model transformations by recording and analyzing user-specified model transformations so that they can be modularized and applied to other models. This approach does not require users to have knowledge of any model transformation language or familiarity with a metamodel definition. Through this demonstration, the audience will observe an innovative approach to implement model transformations and understand how to apply this approach to simplify endogenous model transformations tasks to support model evolution.</p>", "authors": [{"name": "Yu Sun", "author_profile_id": "81418595134", "affiliation": "University of Alabama at Birmingham, Birmingham, AL, USA", "person_id": "P1728666", "email_address": "", "orcid_id": ""}, {"name": "Jeff Gray", "author_profile_id": "81100403059", "affiliation": "University of Alabama at Birmingham, Birmingham, AL, USA", "person_id": "P1728667", "email_address": "", "orcid_id": ""}, {"name": "Jules White", "author_profile_id": "81339536022", "affiliation": "Vanderbilt University, Nashville, TN, USA", "person_id": "P1728668", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640029", "year": "2009", "article_id": "1640029", "conference": "OOPSLA", "title": "MT-scribe: a tool for recording and inferring model transformations", "url": "http://dl.acm.org/citation.cfm?id=1640029"}