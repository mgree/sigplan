{"article_publication_date": "10-25-2009", "fulltext": "\n The Good, The Bad, and The Ugly Three Ways to Use a Semantic Code Query System Patrycja W.egrzynowicz \nNASK Research and Academic Computer Network, Poland patrycjaw@nask.pl Abstract D-CUBED is a semantic \ncode query system for Java. Its focus is on capturing the semantics of an analyzed program. It provides \nrich support to investigate the call .ow and data .ow of a program by using static analysis techniques \nwith the custom model of symbolic instances. The usage scenarios of D-CUBED include: (1) detection of \ndesign patterns with the focus on code semantics (the good), (2) discovery of bugs, including a range \nof security holes (the bad), (3) assessment and improvement of a design by discovering bad design and \ncode practices (the ugly). Categories and Subject Descriptors 2[Software Engineering]: Distribution, \nMaintenance, and Enhancement; 2 [Software Engi\u00adneering]: Software/Program Veri.cation General Terms Design, \nExperimentation, Languages, Security, Veri.cation Keywords semantic code query system, automatic detection, \nde\u00adsign patterns, bugs, bad practices 1. Introduction Code queries tools facilitate program understanding \nby providing the capability to explore relationships between different elements of a program. As well \nas being useful during the analysis of existing systems (reverse engineering), these tools aid in the \nconstruction of software (forward engineering). A signi.cant number of large software systems that lack \nproper documentation need to be maintained, extended, or modi.ed. In such cases, a reverse engineering \nprocess is usually time\u00adconsuming and error-prone. The code query tools can be used to facilitate this \nprocess via (1) extraction of high-level design con\u00adcepts (e.g., design patterns), (2) detection of bugs, \n(3) discovery of bad practices, or (4) detection of any other implementation facts (e.g., unused methods). \nMoreover, these features can also assist in the construction of a software system (e.g., code review). \nThe existing code query systems for Java (e.g., CodeQuest, JQuery) focus on the structural and call-related \npredicates without any support for data-related predicates. Therefore, a more detailed analysis of a \nprogram using these tools is not feasible. Copyright is held by the author/owner(s). OOPSLA 2009, October \n25 29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. Krzysztof Stencel Institute of Informatics, \nWarsaw University, Poland stencel@mimuw.edu.pl D-CUBED is a semantic code query system for Java (i.e., \na code query system focused on capturing the semantics of a program). It facilitates a detailed analysis \nby enabling an investigation of the call and data .ows of a program. D-CUBED is to be released as an \nopen source program at http://www.dcubed.pl in August 2009. 2. Demonstration The demonstration will present \nD-CUBED, which is a semantic code query system for Java, as well as how it can be used to discover the \ngood (design patterns), the bad (bugs), and the ugly (bad practices) elements in software. We will begin \nwith a brief introduction to D-CUBED and its metamodel of a program by highlighting the innovative elements. \nThe metamodel of symbolic instances, together with graph-based multi-values, permits tracking of the \npropagation of logical in\u00adstances (e.g., parameters, exception, return values) as well as ac\u00adtual instances \n(i.e., those created by a new statement). Graph-based multi-values make the data .ow (top-down, interprocedural, \npath\u00adsensitive) analysis feasible while still providing a suf.cient level of detail. We will also present \nthe key predicates relating to data .ow (e.g., hasInput, hasOutput, isAssignedTo). Then, we will explain \nhow to con.gure D-CUBED and ask code queries. D-CUBED can be used in two main modes: (1) with a relational \ndatabase (PostgreSQL or MySQL) and SQL as a query language and (2) with a deductive database (XSB) and \nProlog as a query language. The core part of the demonstration will include three use cases that prove \nthe usefulness and wide applicability of D-CUBED. Detection of design patterns will be shown using the \nexam\u00adple of the Singleton design pattern. The Singleton pattern prob\u00adably is the most popular pattern \ndetected by existing detection approaches. Its canonical implementation is simple, and its in\u00adtent seems \nstraightforward. However, we can identify many corner cases both among its implementation variants as \nwell as in a usage context. We will present the Singleton query together with various implementation \nvariants of the pattern found in real source code (e.g., JHotDraw). This will be contrasted with other \npattern detec\u00adtors and followed by the discussion of the roots of their failures in the search for the \nSingleton instances. Detection of bugs will include the presentation of a real-world bug regarding con.dentiality \n(i.e., the leakage of sensitive data like a password, credit card number, or other secret data). Due \nto its metamodel of symbolic instances and the hasInput predicate, D-CUBED is able to easily identify \nthe occurrence of such bugs. Bad practices include a wide range of code constructs, ranging from relatively \nsimple ones (e.g., equals without hashCode) to more abstract design concepts (e.g., high coupling). We \nwill present a bad practice known as hourglass .ow (i.e., multiple branching on the same condition to \njoin later), which lowers maintainability of the code and negatively impacts performance. Again, we will \nuse a real-world example to how D-CUBED identi.es such issues.  The conclusions will sum up the areas \nof applicability of D-CUBED while underlining the ability of D-CUBED to detect vari\u00adous design patterns, \nsemantic bugs (including security vulnerabili\u00adties), and bad code practices. 3. Related Work A number \nof code query systems for Java or other program\u00adming languages exist (e.g., [Hajiyev et al. 2005], [McCormick \nand De Volder 2004]). Similar to D-CUBED, they often use a database as an underlying store and logic \nprogramming to formulate code queries. The key difference lies in the D-CUBED metamodel of symbolic instances \nwith multi-values combined with the meta\u00admodel of instructions and data-related predicates. This innova\u00adtion \nbroadens the applicability context of D-CUBED by providing a means by which to analyze the behavior of \na program. References Elnar Hajiyev, Mathieu Verbaere, Oege de Moor, and Kris de Volder. Cod\u00adequest: \nquerying source code with datalog. In OOPSLA 05: Compan\u00adion to the 20th annual ACM SIGPLAN conference \non Object-oriented programming, systems, languages, and applications, pages 102 103, New York, NY, USA, \n2005. ACM. ISBN 1-59593-193-7. doi: http://doi.acm.org/10.1145/1094855.1094884. Edward McCormick and \nKris De Volder. Jquery: .nding your way through tangled code. In OOPSLA 04: Companion to the 19th annual \nACM SIG-PLAN conference on Object-oriented programming systems, languages, and applications, pages 9 \n10, New York, NY, USA, 2004. ACM. ISBN 1-58113-833-4. doi: http://doi.acm.org/10.1145/1028664.1028670. \n \n\t\t\t", "proc_id": "1639950", "abstract": "<p>D-CUBED is a semantic code query system for Java. Its focus is on capturing the semantics of an analyzed program. It provides rich support to investigate the call flow and data flow of a program by using static analysis techniques with the custom model of symbolic instances. The usage scenarios of D-CUBED include: (1) detection of design patterns with the focus on code semantics (the good), (2) discovery of bugs, including a range of security holes (the bad), (3) assessment and improvement of a design by discovering bad design and code practices (the ugly).</p>", "authors": [{"name": "Patrycja W&#553;grzynowicz", "author_profile_id": "81444607481", "affiliation": "NASK Research and Academic Computer Network, Warsaw, Poland", "person_id": "P1728673", "email_address": "", "orcid_id": ""}, {"name": "Krzysztof Stencel", "author_profile_id": "81100603482", "affiliation": "Warsaw University, Warsaw, Poland", "person_id": "P1728674", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640032", "year": "2009", "article_id": "1640032", "conference": "OOPSLA", "title": "The good, the bad, and the ugly: three ways to use a semantic code query system", "url": "http://dl.acm.org/citation.cfm?id=1640032"}