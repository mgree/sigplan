{"article_publication_date": "10-25-2009", "fulltext": "\n Modelling Software Processes -a Focus on Objectives DianaC.Kirk StephenG.MacDonell SoftwareEngineeringResearchLaboratory \nSchoolofComputing andMathematicalSciences AucklandUniversityofTechnology NewZealand dkirk@aut.ac.nz \n/ smacdone@aut.ac.nz Abstract Existing softwareprocessmodelssuch asWaterfall andXP are characterisedby \nunstated assumptions, a consequence of which is that we can not easily compare models or transfer data \nfrom one model to another. This means that software plannershave no mechanismfor selectingprocess activities \nthat arebest suited toindividualprojects.Inthispaper, we propose a frameworkfor modelling softwareprocesses \nthat supports representation and comparison ofdifferentkinds of software process. Our framework is based \non a lift in fo\u00adcusfrom choosing activities to identifyingprojectobjec\u00adtives and selecting activities \nto meet those objectives . We overview some evidenceto supportthe claims of representa\u00adtionand comparisonanddiscussbene.tsandlimitationsof \nthe approach. Categories and Subject Descriptors D.2.9[SoftwareEngi\u00adneering]: Management Life cycle,Software \nprocess mod\u00adels; H.1.0[Models andPrinciples]:General General Terms Design,Standardization,Theory Keywords \nsoftware process modelling, software project planning, softwareprocessimprovement,projectobjectives 1. \nIntroduction Many models of the software development process have beenproposedfor a number ofpurposes.For \nexample, some models are intended to proscribe how software is to be de\u00adveloped, such as Waterfall or \nXP.Some models areintended to help stakeholders understand consequences of decisions, suchas simulationmodels.Athirdsetofmodelssupportsthe \nmanagement of outcomes of softwaredevelopmentprojects, Permission to make digital or hard copies of all \nor part of this work for personal or classroomuseisgranted withoutfeeprovided that copiesarenot madeordistributed \nforpro.tor commercial advantage andthat copiesbearthis notice andthefull citation onthe .rstpage.Tocopy \notherwise,torepublish,topostonserversortoredistribute tolists, requiresprior speci.cpermission and/or \nafee. OOPSLA2009, October25 29,2009,Orlando,Florida,USA. Copyright c &#38;#169; 2009ACM978-1-60558-768-4/09/10. \n. .$10.00 EwanTempero DepartmentofComputerScience TheUniversityofAuckland NewZealand e.tempero@cs.auckland.ac.nz \nsuch asfor cost estimation ordefectprediction.Eachkind of model re.ects aparticularperspective on softwareprocesses \nandtheirinstantiation.Proscriptivemodelsrangefromview\u00ading the software development process as a traditional \nen\u00adgineering process to viewing software development as an activity in which the most important characteristics \nrelate to the humans carrying out the process. Simulation mod\u00adels arebased on several modellingparadigms,for \nexample, system dynamics and event-driven modelling, each charac\u00adterised by a number of strengths and \nlimitations. Predictive modelsgenerally apply statistical manipulations on existing data sets to predict \nfuture outcomes, and apply a variety of techniques to address the sparseness or uncertainty of the availabledata \nsets. Although models differ in kind and approach, they all sharea commoncharacteristicinthateachembeds(oftenun\u00adstated) \nassumptions abouthow theprocess operates or what informationis needed.Fortheproscriptive models,the more \ntraditional models such as Waterfall assume objectives of highqualityandlow cost and realise thesebyimplementing \na de.ned set of engineering activities, for example, spec\u00adi.cation , design , code and test . However, \nif a project is to deliver a newproductbased on novel technology to an early adopter marketplacein advance \nofthe competition,the goal of early delivery may take priority over that of qual\u00adity and a traditional \nprocess may hinder rather than sup\u00adport this prioritisation. Proponents of the agile approaches reject \nthe engineering viewpoint and talk about princi\u00adples and practices ratherthan activities .However,these \napproaches also embed assumptions about objectives and project contexts.For example,itis claimed thatthe \nXP ap\u00adproach reducesrisk and speci.cpracticesaremandated to mitigate against speci.c risks.Onepractice, \nplanninggame, involves a regular meeting between developers and client representative to ensure changing \nrequirements are under\u00adstood. Another practice, pair programming, mandates that alldesign and codeis \ncarried outbytwodevelopersworking together in a speci.c way in order to ensure code quality. Some assumptions \nembedded in the XP approach are that theprojectmustdealwithfast-changingrequirements,an ef\u00adfectiveclient \nrepresentativeis available,anddevelopersare suf.ciently experienced and personality-matched to render \npair programming effective. Again, if the project pro.le is inconsistent with the pro.le assumed by the \napproach, the process willhinder, ratherthan support,projectobjectives.  Simulation models [Drappa and \nLudewig 1999, Lakey 2003,Munch2005,Raffo2005,Storrle2003]generallyde\u00ad.ne a speci.cprocess and supportonly \nsmall,localpertur\u00adbations. Assumptions are thus generally embedded in the model structure and relate \nboth to which activities are car\u00adriedoutandwhichfactorsare mostlikelyto affectoutcomes. For exampleit \nmaybepossible to change the value thatde\u00ad.nes the effectiveness of an inspection, but not to omit the \ninspectionfromthe model. Cost estimation[Boehm1981,Briand et al.1999,Lon\u00addeix1987] anddefectprediction[Khoshgoftaar \net al. 1996, Lanubile andVisaggio1997,ZhangandPham2000]models generallyapply a statistical manipulation \non an existingdata set. However,the activities that were carried out during the process represented by \nthe data set are generally unknown, orareknownonlyby veryhigh-levellabelssuch as design effort . Predictions \nare thus based on assumptions that the processes of thepredictedprojectsinvolvethe same activi\u00adties asthe \noriginal onesfromwhich thedatawas extracted. This is seldom likely to be the case because, even if an \nor\u00adganisationhasa .xedprocessforallprojects,itisunlikely that alldevelopers onthe newproject willhavethe \nsame ex\u00adperience and subject-area knowledge as those from earlier projects. A consequence of the variation \nin implicit assumptions embedded in the different models is that it is not easy to compare models or \ntransfer knowledge derived from one model to another.Thisisproblematicfor thefollowing rea\u00adson.Thereisgeneral \nagreementinthe softwareindustrythat software project outcomes can be maximised by tailoring the process \nto the speci.cs of individual projects. For ex\u00adample, a project manager has heard that applying the ag\u00adile \ntechnique of pair programming results in an increase in qualityin the softwareproduct.(S)he wouldlike \ntoknow whether replacing design inspections by pair programming in a traditional waterfall process would \nimprove quality in the delivered product. In order to model this scenario us\u00ading existing modelling techniques, \na model speci.c to the scenariowouldbebuilt.If theproject managerthen wishes to checkif abetter outcomewouldbe \nachievedby improv\u00ading the testing process, a new model would be be built to describethe new scenario.Theproblemisthat \nwehave no mechanismforchoosing activitiesandparametersina .ex\u00adible way andbuildingprocess-speci.c modelsis \nexpensive and time-consuming[Raffo et al.2005]. We believe that the existence of so many disparate ap\u00adproachesis \naconsequenceof ourlack of a real understand\u00adingofthe softwareprocess.Kitchenham andCairn state that . \n. .before software engineering can mature as an engineer\u00ading discipline, practitioners need a better \nunderstanding of theprocessby which softwareis created [Kitchenhamand Cairn 1990]. We suggest that a \n.rst step towards such un\u00adderstandingisto attemptto create a moregeneral model of theprocess that canbe \napplied and validatedin alocal way, butthatforces a consideration anddeclaration ofthe speci.c factors \nthatcharacterisethelocal application. In this paper, we consider the form and some desired properties \nof such a model and propose a framework that we believe satis.es the properties. The motivation for the \nform of ourframeworkis an observation that all current ap\u00adproaches arebasedon a communalandpersistent \nmindset of we mustde.ne what we mustdo withoutgiving too much thought about what we want to achieve or \nto project con\u00adtexts .We suggestthatbothtraditional and agile approaches represent local solutions to \nunstated process problems , whereprocess authorshave createda set ofactivities orprac\u00adticesbased on speci.c \nreal-world experiences without char\u00adacterising the real-world aspects that informed the process. For \nexample, traditional models have their origin in a mil\u00aditary context, and relate to software projects \nthat were be\u00adlievedtobe relatively stable and were manyperson-yearsin size.Agile modelshave their rootsin \nthe context of smaller software organisations whose projects are inherently less stable and of smaller \nsize and where there is increased re\u00adliance on individuals. The objectives and contexts relating to eachhavebecome \nsecondary to thede.ned activities and practices andsohavebecome unstated assumptions. Webelievethat thefuturefor \nsoftwareprocess modelling lies in a change in paradigm from choosing activities to understanding objectives \nand constraints , a paradigm that inherently forces a more holistic approach to software sys\u00adtem modelling. \nOur proposed framework is based on sys\u00adtem variables-of-interest (SVoI) that makes no assumptions about \nwhat constitutes a process or what the model is in\u00adtended for. In contrast with the activity-centric \nnature of the above models, our approach involves .rst identifying thekey objectivesforthesoftwareproject,forexample \nde\u00adliverhighquality artifacts and increasedeveloperproduct knowledge , and then establishing each as \na system factor\u00adof-interest.Eachkeyfactoristhen operationalisedas atleast one system variable-of-interest(SVoI) \nand assigned an ap\u00adpropriatetargetvalue,forexample, nomorethantenknown defects .Process andmanagementactivities \narethen viewed as transformations on theseSVoI.The aim of a softwarede\u00advelopment process is to move the \nvalues of the SVoI to\u00adwardsthedesired outcome values.Theprogressthatis actu\u00adally madedepends onthe actual \ntransformationsi.e. onthe contexts that affecthow well the engineers are able to carry out tasks. The \nSVoI represent the aspects of the project system in which we have an interest i.e. the state of our project \nsys\u00adtem.This means that transformations arede.nitions of state change and can be applied one after the \nother, as required.  Activitytransformationscanbebasedon available evidence, if some exists,or on expertopinion.This \nmeanstheframe\u00adwork may be applied in projects for which existing organi\u00adsational data is available to \nindicate the expected effects of an activity on, for example, effort or defect numbers, and may alsobe \napplied when nodatais availablebuttheproject manager chooses to estimate expected effects based on ex\u00adperience. \nThe paper is organised as follows. In Section 2, we overview some process frameworks and models that \naim tosupportprocess .exibility.InSection3,weexaminethe kinds of properties we would like our model to \nexhibit, for example, extensibility of objectives and in Section 4, we presentaframework that webelieve \nmeets these objectives. InSection5, wediscuss the claimedbene.ts andlimitations of our approach andpresent \nsome evidence.Finally,inSec\u00adtion 6, we summarise the paper and indicate directions for future research. \n2. Related work InthisSection,we overviewsomeprocessframeworksand models that aim to support the kind \nof process tailoring describedinSection1. 2.1 Modellingand simulation The main source of related work \nis the modelling and sim\u00adulation community. Software process simulation and mod\u00adelling has become an \nincreasingly active research area with growing numbers of publications and related activi\u00adties[Zhangetal.2008].Techniquesappliedincludediscrete\u00adevent \nsimulation and system dynamics.The speci.c models overviewedbelow addresstheissue of.exibilitybybuilding \nprocesses from a number of pre-de.ned activity building blocks . Lakey[Lakey2003] introducesa model to \nsupportsoft\u00adware project prediction and management. The model is in\u00adtendedas atheoreticalframework.Itcomprisesfourbuilding \nblocks, preliminary design , detailed design , code and unittest and subsystemintegrationandtest .Inthisframe\u00adwork, \nproject-speci.c process models are built by creating an appropriate numberofbuildingblocks and calibratingthe \nequations for each with project, process and product data from the project to be modelled. Examples of \nproject fac\u00adtors included are communication overhead , tool support and skill levels . Examples of process \nfactors are defects injected and estimatedcalendarweeks .Productfactorsin\u00adclude size and quality .Astrengthofthisframeworkisthe \ninclusion of cost, schedule andqualityperformanceparam\u00adeters in a holistic system as the primary software \nproject performanceparametersofcost, scheduleandqualityare not independent, andthey cannotbe tracked \nand managedinde\u00adpendently .However, customisationis achievedby copying and renamingbuildingblocksto achieve \nthe correctprocess structure and thenproviding the relevantinput values.This means that thereis nopossibility \nof representing any activi\u00adtiesthatdo not comply with one oftheseblocks.We suggest thatcustomisationthus \nrefersto changinginputvaluesrather than changing theprocess.Anotherlimitationisinthepre\u00adde.nition ofthefactors \nthatarebelievedto affect outcomes. Thebeliefs are effectivelymodel assumptions. Munchapplies apatterns \napproachto thedevelopmentof custom-tailoredprocess models[Munch2005].He believes that Thedevelopmentofhigh-qualitysoftwareorsoftware\u00adintensive \nsystems requires custom-tailored process models that .t the organizational and project goals as well \nas the independent contexts (page1).InMunch ssolution, apro\u00adcess pattern is a reusable fragment of a \nprocess model that represents an activity.Patterns canbe combinedto represent combinations of process \nmodels. Information for each pat\u00adtern includes attributes and a description of how attributes change \nwhen the pattern is applied, for example, causing a changeto reliability [Munch2005].Inthismodelattributes \nmayrelatetoprocessstate(forexample, notinmaintenance activity ) orprocessgoals(forexample, Maximal effortis \nless than 2000 ). Required goals are thus modelled as re\u00adstrictions on project attributes and include \nonly those over which the project has control. This means that the model does not support objectives \nsuch as developer subject area knowledge and otherhuman-relatedgoals.In addition,the rules for transformation \nform an integral part of the model i.e. assumptions are embeddedin the model. Raffo et. al. describe \nan approach for creating Gener\u00adalised Process Simulation Models (GPSM) [Raffo et al. 2005].The approachconsists \nof constructingaprocessfrom a library of generic process building blocks, for example, relating to Design \n, con.guring the inputs to blocks for speci.c environments and viewing outputs relating to time, cost,quality \nandfunctionality.Although the approach sup\u00adports a degree of .exibility in process construction, there \nis an assumption of traditional process and a restriction of outputs to those relating to time, cost, \nquality or func\u00adtionality [Raffo 2005]. This means that the GPSM model as constructed cannotbe usedfor \nsimulatingless traditional processesorformodelling,forexample,theeffectsof team meeting on developerproductknowledge \n.  2.2 Otherframeworks Several authors have proposed approaches that reduce risk by enabling a planner \nto select activities that will support organisational objectives. Models such as Spiral [Boehm 1988]and \nRationalUni.edProcess(RUP)[Kruchten2000] aimto addressriskbyfacilitating.exibilityas regardswhich developmentactivities \nareperformed.However,thereis an assumption of traditional objectives and so the approaches can not represent, \nfor example, architectural discussions to increasedeveloper understanding. Recent contributions from \ncollaborations involving the University of Southern California include combining pro\u00adcess elements[Bhuta \net al.2005],tailoring theprocess ac\u00adcording to business cases [Huang et al. 2006, Yang et al. 2007] and \ndealing with uncertainty by .xing the variable Schedule [Yang et al.2007].The underlyingparadigmfor these \ncontributionsisthatofvalue-basedengineering,where key mechanisms include understanding what is the key \nob\u00adjectivefor aprojectfrom a valueperspective(for example, cost,quality), selecting activities that will \nensure the objec\u00adtive is reached in the most cost-effective way and monitor\u00ading the project to ensure \nboth objective and activity selec\u00adtion remain appropriate.The modelling of objectivesis not formalised \nand so the contributions support .exibility in a limitedway only.  OthertailoringapproachesincludeBasili \nandRombach s approach for tailoring processes towards project goals and environments[Basili andRombach1987].Again, \na speci.c projectobjectiveisidenti.ed and activities selectedthat will ensure the objective is met. However, \nthere is no provision for examiningmultipleprojectobjectivesandtheframework upon which the approach is \nbased contains a number of process-relatedassumptions that constrain .exibility.  2.3 Discussion The \napproachesdescribedabove all contributein some way to the vision of providing project decision makers \nwith a mechanismforde.ningdesired outcomesand selecting ac\u00adtivities according to outcomes and project \ncontexts. Some highlight the need to focus on a speci.c project objective and to select activities mostlikely \nto ensure the objectiveis met; some identify the need to consider multiple objectives in a holistic way; \nsome support modelling at different lev\u00adels of granularity; some acknowledge the need to consider human-related \naspects in addition to technical ones. How\u00adever, each is constrained in some way and the vision is not \nachieved for the general case. The constraints that charac\u00adterise the models relate to assumptions about \nthe kinds of activitiesthattakeplacein softwareprojectsand alimiting of outcomes-of-interesttothe standardprojectoutcomesof \ncost,quality,etc.Theresultis aninability to easily mixac\u00adtivities from both traditional and agile worlds \nor to include objectives and activitiesthat relate topeople andproduct, as well as toproject. In the \nnext section, we consider some properties for a modelthat addressesthe constraintsdescribed above. 3. \nModelproperties Ifwearetomodel softwaredevelopmentprocessesina .ex\u00adible way, we require a model that \nallows us to capture any process model and supports comparison of processes in re\u00adlation to desired objectives \nand construction of new pro\u00adcesses If we are to model software development processes in a .exible way, \nwe need a model that allows us to: cap\u00adture existing processes, provide comparison of processes, and \nconstruct newprocesses.Asa .rst steptowardscreating an appropriate model, wepresent some considerations \nrele\u00advanttothisintent anddraw ontheseto suggest someproper\u00adties we wouldlike our model to exhibit.Our \nconsiderations are sourcedfrom characteristics ofexistingprocesses, model limitations as identi.edinSection2 \nand some observations of real-world situations. 3.1 Holistic approach Holistic considerationsrelatetotheideathatresearchers \nand practitionershaveaninterestin manykindsofobjectivesand these cannotbe consideredinisolation. Traditional \napproaches to modelling the software devel\u00adopment process focus on outcomes such as Cost and ProductQuality \nand viewknowledge asbeingheldin documents.The more recentagile approachesare charac\u00adterisedby agreaterfocus \nonpeople, with concepts such as SharedVision and TeamMemory .  Many models of the softwaredevelopment \nand manage\u00admentprocesses restrict outputsto single variables,for ex\u00adample, NumberofDefects .However,decisionmakers \ngenerally need to understand all of the consequences of a process decision. For example, when considering \nthe effects ofintroducing aninspectioninto theprocess, the decisionmaker may beinterestedin all ofdefect \nreduc\u00adtion, additional cost andincreasein subject-areaknowl\u00adedge[Kitchenham et al.2002].  Product line \nprocesses and management-by-projects re\u00adquirethatthe status of adeliveredproduct andinforma\u00adtion about \nindividuals are available as inputs to subse\u00adquentprojects.  Property 1: Our model must have the capability \nof rep\u00adresenting theeffects of aprocessonanumberoffactors-of\u00adinterest,bothproduct-andhuman-related. \n 3.2 Processde.nition Processconsiderationsrelatetotheideathat manykindsof process arepossible. Different \nstudies use the same term for a task to mean differentthings.Forexample, Design might mean Cre\u00adateformaldesignsfromrequirements \n, Designthecode based on discussions with the client , Create design documents to be formally inspected \n, and the like. This means we cannot easily compare studies andbuild cumu\u00adlativeknowledge.  Some activities, \nfor example, share knowledge , effect changetopeople only(notproduct).  Models and studies involve processes \nof varying granu\u00adlarities,forexample,anXPprocessora Design task.  Property2:Our modelmusthave the capability \nof repre\u00adsenting all existing andfutureprocesses in an unambiguous way and must allowprocesses of anygranularity. \n  3.3 Policysupport Policy considerations relate to the need to support project managerswho mustdecide,for \nexample,whento commence a coding activity or release aproduct. Decision makers often want to specify \nthat an activity can commence before its predecessor is complete, for example, commencecodingwhendesignsare80percent \ncomplete .  Releasemanagersneed tode.ne readinessfordelivery intermsofproductfactors,forexample deliverwhenall \ncriticaldefectshavebeen removed .  Property 3: Our model must provide suf.cient informa\u00adtionfor managers \nto makepolicy-baseddecisions about ac\u00adtivity commencement and completion without dictating pol\u00adicy. 4. \nTheproposed model InthisSection, wepresentan overview of aproposedframe\u00adworkthat exhibitsthe aboveproperties.For \nreasons ofprag\u00admatism, we present a restricted overview only. A full de\u00adscriptionis availablein[Kirk2007]. \n 4.1 Modellingparadigmand context Theframeworkpresentedin thispaperis based on the con\u00adcept ofde.ningthe \nobjectivesthat are relevantfor aproject, representing each as a systemfactor-of-interest(SFoI), oper\u00adationalising \neach SFoI as one or more system variables-of-interest(SVoI)and transformingthe values of theseSVoIby \napplication of activities.Objectives may relate to any aspect of the software system, for example, to \nbusiness-, product\u00ador stakeholder-related objectives. Forourframework,we applythetermRealisedProcesses, \n(RP) to represent a software development process [Kirk 2007].The standarduse of the term process generallyrefers \nto a description of a set of technical or management tasks anddoes notinclude any non-technicalfactors,for \nexample, relatingtohumans.Ourde.nition as transformation onSVoI means that all aspects of the transformation \nare included. If we consider an inspection that transforms Discovered defects and Effort ,weunderstand,forexample,thattwo \nactual inspections will effect different sizes of transforma\u00adtion accordingto the experience of theparticipants. \nAsoftwaredevelopmentprocess RP is modelledas: RP = {V alues, VRP , ActivitiesRP ,s0 , T} where VALUES \nis the set of all possible values, VRP is a set of system variablesofinterest(SVoI), ActivitiesRP is \na set of activities, s0 is the initial state and T is the set of states representing the target of the \nprocess. This model ofaprocesscanbetreated as a(potentiallyin.nite) state machine, with statesimpliedby \nVRP andthetransformation functiongivenbyActivitiesRP . VALUES is the set of all possible values. There \nis no restriction on what constitutes a value(e.g.,tuples, sets, and other structures are allowed). This \nformulation means that the set of valuesis the same across allprocesses modelled. A state is a set of \nVALUES. Different RealisedProcesses may care aboutdifferentparts of the state. We attach meaning to any \ngiven value by associating it with a system variable (usuallyabbreviatedto variable).If a set of states \nhave values associated with the same variable, and those states are consideredtobein some order,then \nthe interpretationis that the variable(potentially)changes value across the states.A system variable \nthen represents apart of the world that we areinterestedin modelling. We can describe a state as a set \nof variables that have values.Wedecide what variables we areinterestedin(the SVoI), andthatdictates the \nstates that are relevantto us. An activity models the actions carried outbydevelopers, such as softwareinspection \n, createrequirements ,and so on.An activity(potentially) causes a changein state, and so can be regarded \nas transforming system variables. Any given activity willprobably only transform a few variables. Forexample,a \nsoftwareinspection activitymaychangethe numberofknowndefects valuebut notthe numberof re\u00adquirements value, \nwhereas a create requirements activity may not change the number of known defects value. For an activity \na, wedenotethe system variablesittransformsby V arsa.Thisgives us,for an activity a, a : StatesV arsa \n-. StatesV arsa An activity is de.ned by the variables it transforms and how it transforms them. If it \nis allowed that new require\u00adments identi.ed in the software inspection activity are to be recorded, then \nthat activity could also change the num\u00adber ofrequirements value, andit wouldbe consideredtobe a different \nactivity to the one that ignores any requirements identi.ed.Thus ourframeworkallows usto explicitlymodel \nvariations on activities that arebased on thedesire to model differentoutcomes. A RealisedProcess RP \nisdeterminedby the set ofSVoI VRP and a set of activities ActivitiesRP that transform some subset of \nVRP . The set of activities in the process together make up the transformation function of the state \nmachine that is the process. Finally, s0 is then a state in StatesVRP representingtheinitial statefor \ntheprocess, and T. StatesVRP is the states indicating the process has reachedthe target valuesfor theSVoI. \n 4.1.1 Illustration As illustration of the basic model, in Figure 1, we de\u00adpict three activities, Code \n, Unit test and Fix defects , changingSVoI Effort and Defects .Inthisillustration,the Code activityincreases \nEffort and anumberof Defects areinjected. UnitTest alsoincreases Effort but nochange iseffected to Defects \n(althoughsomedefectsmaybeun\u00adcovered). FixDefects increments Effort andreduces De\u00ad   Figure1. Activities \nchangingEffortandDefects fects as existingdefects are resolved and a smaller number areinjected as a \nresult of the activity. Note that we are transforming variables, notprocess out\u00adputs, suchasdocuments.In \nour model,documents may con\u00adtain variable-relatedcontent,for example,thequality-related aspects of theprocess \nmaybe capturedin a number ofdoc\u00aduments.However,theSVoIfortheprocess represents an ab\u00adstraction ofqualityin \nwhich wehave someinteresti.e. rep\u00adresentshow we operationalisequality. As canbe seen, ourmodelimposesveryfewlimitations \nor,indeed, meaning.The meaning of variables and activities isdeterminedby the modeller sinterpretationof \nthe values andtransformation of variables.We see this as abene.t.For example, Design could mean many \nthings. The different variations would be modelled as different sets of variables. Forexample, Createformaldesignsfromrequirements \nim\u00adplies SVoI relating to Requirements , Requirements de\u00adsigned and Formality ofdesigns . Designthecodebased \nondiscussionswiththeclient impliesSVoI relatingto Fea\u00adtures and Features coded . As these activities \nchange dif\u00adferentSVoI, theyaredifferent activities. Even when the SVoI are the same, the transformations \nmay be different in different contexts. Organisation A may have agroupofdevelopers all experiencedindescribingde\u00adsigns, \nwhereas Organisation B s group may be less experi\u00adenced.The modelsforthetwo organisationsmay havetwo \nactivities Createdesignsfromrequirements with thesame SVoI Numberof requirementsdesigned butthesizeof \nthe transformations willbedifferent re.ecting thedifferentlev\u00adels of experience.  4.2 Modelproperties \nAlthough the model described above is simple, we submit that the change in perspective from de.ned activities \nto system variables being transformed has a number of ad\u00advantages relating to thepropertiesdiscussedinSection3. \nProperty 1: Holistic approach. As there is no constraint on what aspect of the software system can be \nrepresented as an SVoI, the framework supports the modelling of the traditional objectives, such asquality \nand cost,thehuman\u00adrelated objectives, for example, developer satisfaction , of interest to the agile \ncommunity, and any other objectives, forexample,relating to economicvalue.As we aredealing with system \nstate, the current state, including aspects such as developer experience , may be made available for \nnew projects. Property 2: Process de.nition As an activity is anything thattransformsSVoI, activitycontentandgranularityare \nun\u00adconstrained. This means we may model tasks such as pair programming and team meeting and whole processes, \nsuch as Waterfall. As our de.nition of an activity is unam\u00adbiguous,wehave apowerfulwayto comparetechniquesand \ntools appliedduringactivities.In a set of studies often stated asconcerning PairProgramming ,we.ndthatthereislack \nof realde.nition aboutthetechnique studied and aboutwhat aretheinputto, and outputsfrom,theprocess[Kirk2007]. \nIf wedo notknowhow techniques change the environment, any comparisons we make must inevitably be super.cial. \nOur modelforcesde.nition ofwhatis changed and sopaves the way to more robustinvestigations. Property \n3: System readiness . As our framework is based on system state, policy decisions, for example, re\u00adlating \nto when to start coding or deliver to a client, may be based on state, for example when designs are 80 \nper\u00adcent complete rather than activity completion,for example, whentestingis .nished . 5. Claimedbene.tsand \nevidence Weclaimthat ourproposedliftinfocusfrom choosing ac\u00adtivities to identifyingprojectobjectivesandselectingactiv\u00adities \nto meet those objectives facilitates the representation and comparison of softwareprocessesin a way that \nencour\u00adages modellers to make transparent any assumptions relat\u00adingto objectives and contexts.We suggest \nthat the ability to compare supports: Planning Planners must .rst consider objectives (encour\u00adaging systems \nthinking), how to operationalise these as SVoI and then may select activities thatbest meet objec\u00adtivesby \ncarrying out whatif analysis[Kirk andMac-Donell2009b]. Softwareprocessimprovement(SPI) We have used the \napproachto support a modelforSPIbased on an analogy of humanhealth [Kirk andMacDonell2009a]. Projectmanagement \nOur approach is consistent with the recentinterestin a moreholistic viewpoint of theproject managementfunction[Sauer \nandReich2009]. Software researchmeta-analysis We hypothesise that our modelwillprovideaframeworkto supportmeta-analysis \n  Figure2. Evidenceillustration of formal research studies, for example, pair program\u00adming studies[Kirk2007]. \nWe now consider the issue of accumulating evidence to supporttheproposedframework.Our evidencerestsonthe \nability to capture and compare manydifferentkinds ofpro\u00adcess andprocess models[Kirk2007].Wehave chosen \ntech\u00adniquesthathavebeen appliedinthedomain ofsafety-critical software and which provide a powerful way \nof organising and evaluating evidenceinthewider .eld of evidence-based software engineering[Kitchenham \net al.2005,Weaver et al. 2005]. The techniques involve de.ning objectives (in our case, Represent/Compare/Combine \nany softwareprocess or process model)andaccumulatingin atree structuredifferent kinds ofevidence,for \nexample, case studies, surveys, expert opinion, anecdotes and controlled experiments,to show that objectives \nare met. One strength of the approach is trans\u00adparency as it is clear what evidence objectives have been \nconsidered and what kinds of evidence are available and missing.Asillustration, wehave shown ourpart \nof our evi\u00addencetreeinFigure2[Kirk2007]. Our evidence thusfarincludes representingand compar\u00ading typical \nwaterfall and XP processes, exposing assump\u00adtionsinsome pairprogramming studies,representing sim\u00adulation \nmodelsbased ondifferent modellingparadigms and identifyingrisksinherentinXPprojects[Kirk andTempero 2006]. \n 5.1 Modellimitations A key limitation in the model overviewed in this paper is that atpresentit does \nnotdeal with uncertainty.Itis widely acknowledged that the human-intensive nature of software development \nintroduces uncertainty into the processes ap\u00adplied to create software-intensive products [Connor 2007, \nKitchenham andLinkman1997,Rao et al.2008,Yang et al. 2007].Itis notgenerallypossibleto say exactlyhowmany \ndefects willbeinjectedby an activity or exactlyhow much effort willbe required.Thehandling of uncertaintyisbeing \naddressedinfuture works. A second limitation lies in the inability of the model to includeSVoI whose \nvaluedepends upon whether or not ac\u00adtivities are overlapped. For example, if we consider an ac\u00adtivity \nA with a duration of 5 days to complete and activity B with duration 3 days, we have no idea what is \nthe resul\u00adtant value of the duration variable, because this will de\u00adpend upon how activities are scheduled \ni.e. on the degree of overlap. This is an inherent characteristic of the model and would require some \nkind of implementation overlay forits solution.AllowedSVoIinclude only those which are incremented or \nscaledin a way thatisindependent of other transformations. A .nal limitation, at least for implementation \nof the de\u00adscribed framework, relates to the current lack of evidential datawithintheindustry.Althoughwe \nsuggesttheframework may be used to help with evidence accumulation, there ex\u00adists at the present time \nvery little data to characterise how activitieschangeSVoI orhowbesttooperationalisesystem factors-of-interest.This \nmeansthat theimmediate use ofthe frameworkfordecision supportrelies onthe existence of or\u00adganisationaldatasets \nor expertopinion. 6. Summary andfuturework Inthispaper,we suggestthatexistingsoftwareprocess mod\u00adels \nare characterisedby unstatedassumptionsandthis means that we can not easily compare models or transferdatafrom \nonemodel to another.A consequenceisthatsoftwareplan\u00adnershave no mechanismfor selectingprocess activities \nthat arebest suitedtoindividualprojects.Webelievethat the ex\u00adistence ofso manydisparate modelsis a consequence \nof our lackof a real understandingofthe softwareprocess and sug\u00adgest that,ifwe are toprogress our understandingin \nany real way, we must .rst attempt to create a more general model of the process that can be applied \nand validated in a local way, and that forces a consideration and declaration of the speci.cfactors that \ncharacterisethelocal application. We considertheform andproperties ofsuch a model and propose a framework \nwe believe satis.es these properties. Wepresentsome evidenceto supportthisbelief.Finally, we discuss \nsome currentlimitations ofourproposedframework. Our next steps are to create an implementation of the \nframework and apply thisinthe areasofplanning and soft\u00adwareprocessimprovement.To addressthelimitation \nrelat\u00adingto uncertaintyin activityoutputs,our currentresearchin\u00adcludesstudyofprobabilisticandfuzzytransformationmech\u00adanisms. \nReferences VictorR.BasiliandH.DieterRombach. Tailoring theSoftware Process toProjectGoals andEnvironments. \nIn Proceedings of theNinthInternational Conference onSoftware Engineering. IEEE,IEEEComputerSocietyPress,1987. \nJesalBhuta,BarryBoehm, andStevenMeyers. ProcessElements: Components ofSoftwareProcessArchitectures. InM.Li, \nB.Boehm, andL.J.Osterweil, editors, SPW2005, Lecture NotesinComputerScience(LNCS), volume3840,pages 332 \n346, Berlin,Heidelberg,2005.Springer-Verlag.  BarryBoehm. Software Engineering Economics. Prentice-Hall, \nInc.,1981. ISBN0138221227. BarryW.Boehm. ASpiralModel ofSoftwareDevelopment and Enhancement. IEEEComputer,May(11),1988. \nLionelC.Briand,KhaledElEmam,DagmarSurmann,Isabella Wieczorek, andKatrinaD.Maxwell. AnAssessment and Comparison \nofCommonSoftwareCostEstimationModeling Techniques. In Proceedings of the1999 Conference on Software Engineering.IEEEComputerSocietyPress,1999. \nA.M.Connor. Probabilistic estimation ofsoftwareproject duration. NewZealand Journal ofAppliedComputing \nand Information Technology,11(1):11 22, 2007. A.Drappa andJ.Ludewig. Quantitative modelingfor the interaction \nsimulation of softwareprojects. Journal ofSystems and Software,46(2/3),1999. LiguoHuang,HaoHu,JidongGe,BarryBoehm, \nandJianLu. Tailor theValue-BasedSoftwareQualityAchievementProcess toProjectBusinessCase. InQ.Wang et. \nal., editor, SPW/ProSim2006,LectureNotesinComputerScience(LNCS), volume3966,pages56 63,Berlin,Heidelberg,2006. \nSpringer-Verlag. TaghiM.Khoshgoftaar,EdwardB.Allen,KalaiS.Kalaichelvan, andNishithGoel. EarlyQualityPrediction:ACaseStudyin \nTelecommunications. IEEESoftware,January,1996. DianaKirk. AFlexibleSoftware ProcessModel. PhD thesis, \nUniversity ofAuckland,Auckland,NewZealand,2007. DianaKirk andStephenMacDonell. ASystemsApproach to SoftwareProcessImprovementinSmallOrganisations. \nIn to appear inProceedings of the16thEuropean Systems and Software ProcessImprovement and Innovation \nConference (EuroSPI2009)),2009a. DianaKirk andStephenMacDonell. ASimulationFramework to SupportSoftwareProject(Re)Planning. \nIn to appear in Proceedings of the35thEuromicroConference on Software Engineering Advanced Applications(EuromicroSEAA2009)), \n2009b. DianaKirk andEwanTempero. IdentifyingRisksinXPProjects throughProcessModelling. In Proceedings \nof theAustralian Software Engineering Conference(ASWEC 06),pages 411 420, Sydney,Australia,2006. IEEEComputerSociety \nPress. ISBN0-7695-2551-2. BarbaraKitchenham andRolandCairn. ResearchandPractice: SoftwareDesign methods \nandTools. InJ.-M.Hoc,T.R.G. Green,R.Samurcay, andD.J.Gilmore, editors, Psychology of Programming,pages271 \n284. AcademicPressLtd.,London, U.K.,1990. ISBN0-12-350772-3. BarbaraKitchenham andStephenLinkman. Estimates, \nUncertainty andRisk. IEEESoftware,May/June, 1997. BarbaraKitchenham,DavidBudgen,PearlBrereton, andStephen \nLinkman. RealisingEvidence-Based SoftwareEngineering. In RealisingEvidence-Based Software Engineering \nWorkshop 2005,Workshop co-located withICSE2005,St.Louis, Missouri,2005.KeeleUniversity. BarbaraA.Kitchenham,ShariLawrenceP.eeger,DavidC. \nHoaglin,KhaledElEmam, andJarrettRosenberg. Preliminary GuidelinesforEmpiricalResearchinSoftwareEngineering. \nIEEETransactions onSoftware Engineering,28(8),2002. PhilippeKruchten. TheRationalUni.ed Process:An Introduction,Second \nEdition. Addison-Wesley,UnitedStates ofAmerica,2000. ISBN0-201-70710-1. PeterB.Lakey. AHybridSoftwareProcessSimulationModelfor \nProjectManagement. In Proceedings of the2003 International Workshop onSoftwareProcessSimulationandModeling \n(ProSim 03),Portland,Oregan,U.S.A.,2003. FilippoLanubile andGiuuseppe Visaggio. EvaluatingPredictive \nQualityModelsDerivedfromSoftwareMeasures:Lessons Learned. Journal ofSystems and Software,38,1997. BernardLondeix. \nCostEstimationforSoftwareDevelopment. Addison-Wesley,Cornwall,UK,1987. ISBN0-201-17451-0. JurgenMunch. \nGoal-orientedComposition ofSoftwareProcess Patterns. In Proceedingsof the6thInternationalWorkshop on \nSoftwareProcessSimulation and Modeling(ProSim 05),pages 164 168, St.Louis,Missouri,2005. FraunhoferIRB. \nISBN 3-8167-6761-3. DavidRaffo,UmanathaNayak, andWayneWakeland. ImplementingGeneralizedProcessSimulationModels. \nIn Proceedings of the6th International Workshop on Software ProcessSimulation and Modeling(ProSim 05),pages139 \n143, St.Louis,Missouri,2005.FraunhoferIRB. ISBN 3-8167-6761-3. DavidRaffo. System and methodfor simulatingproductdesign \nanddevelopment. UnitedStatesPatentApplication 20050160103, July2005. UmaSudhakerRao,SrikanthKestur, andChinmayPradhan. \nStochasticOptimization andModeling andQuantitativeProject Management. IEEESoftware,May/June:29 36, 2008. \nC.Sauer andB.H.Reich. RethinkingITproject management: Evidence ofa new mindset anditsimplications. International \nJournal ofProjectManagement, 27:182 193, 2009. HaraldStorrle. MakingAgileProcessesScalable. InProceedings \nof the2003InternationalWorkshop onSoftwareProcess Simulation and Modeling(ProSim 03),2003. RobWeaver,GeorgiosDespotou,TimKelly, \nandJohnMcDermid. CombiningSoftwareEvidence -ArgumentsandAssurance.In RealisingEvidence-Based SoftwareEngineering \nWorkshop 2005, Workshop co-located withICSE2005,St.Louis, Missouri,2005.KeeleUniversity. DaYang,BarryBoehm,YeYang,QingWang, \nandMingshuLi. Coping with theCone ofUncertainty:AnEmpiricalStudy of theSAIVProcessModel. InQ.Wang,D.Pfahl, \nandD.M. Raffo, editors, ICSP2007,Lecture NotesinComputer Science (LNCS), volume4470,pages37 48, Berlin,Heidelberg,2007. \nSpringer-Verlag. HeZhang,BarbaraKitchenham, andDietmarPfahl. Re.ections on10Years ofSoftwareProcessSimulationModeling:A \nSystematicReview. InQ.Wang,D.Pfahl, andD.M.Raffo, editors, ICSP2008, LectureNotesinComputerScience (LNCS), \nvolume5007,pages345 356, Berlin,Heidelberg, 2008.Springer-Verlag. XuemeiZhang andHoangPham. The analysis \noffactors affecting software reliability. Journal ofSystems and Software,50,2000.    \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Existing software process models such as Waterfall and XP are characterised by unstated assumptions, a consequence of which is that we can not easily compare models or transfer data from one model to another. This means that software planners have no mechanism for selecting process activities that are best suited to individual projects. In this paper, we propose a framework for modelling software processes that supports representation and comparison of different kinds of software process. Our framework is based on a lift in focus from 'choosing activities' to 'identifying project objectives and selecting activities to meet those objectives'. We overview some evidence to support the claims of representation and comparison and discuss benefits and limitations of the approach.</p>", "authors": [{"name": "Diana C. Kirk", "author_profile_id": "81100166918", "affiliation": "Auckland University of Technology, Auckland, New Zealand", "person_id": "P1728344", "email_address": "", "orcid_id": ""}, {"name": "Stephen G. MacDonell", "author_profile_id": "81100064060", "affiliation": "Auckland University of Technology, Auckland, New Zealand", "person_id": "P1728345", "email_address": "", "orcid_id": ""}, {"name": "Ewan Tempero", "author_profile_id": "81100213613", "affiliation": "The University of Auckland, Auckland, New Zealand", "person_id": "P1728346", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640061", "year": "2009", "article_id": "1640061", "conference": "OOPSLA", "title": "Modelling software processes: a focus on objectives", "url": "http://dl.acm.org/citation.cfm?id=1640061"}