{"article_publication_date": "10-25-2009", "fulltext": "\n Supporting Model Evolution through Demonstration-based Model Transformation Yu Sun Department of Computer \nand Information Sciences University of Alabama at Birmingham Birmingham, AL 35294 yusun@cis.uab.edu \nAbstract Model evolution is often supported by writing model transformation rules in specialized languages. \nThis presents challenges to those who are unfamiliar with model transformation languages or metamodel \ndefinitions. This poster describes research that simplifies the creation of model evolution transformations \nby recording and analyzing the operational behavior exhibited by end-users. Categories and Subject Descriptors \nD.2.2-2.6 [Software Engineering]: Design Tools and Techniques; Programming Environments; I.6.5 [Simulation \nand Modeling]: Model Development General Terms Algorithms, Design, Languages. Keywords Model transformation, \ndemonstration, MT-Scribe. 1. Background and Motivation With the rapid development of Model-Driven Engineering \n(MDE), managing complex change evolution within the model representation is becoming increasingly important. \nManual model evolution is often tedious and error-prone. Model transformation provides an efficient way \nto automate complex model evolution tasks, transforming a model from one state (i.e., configuration) \nto another [1]. The traditional and common approach toward implementing model transformations is to specify \nthe transformation rules and automate the transformation process by using an executable model transformation \nlanguage [1]. Although most of these languages are already powerful enough to implement large-scale and \ncomplex model transformation tasks, they may present some challenges to users, particularly to those \nwho are unfamiliar with a specific transformation language. Firstly, even though declarative expressions \nare supported in most model transformation languages, they may not be at the proper level of abstraction \nfor an end-user, and may result in a steep learning curve and high training cost. Moreover, the transformation \nrules are usually defined at the metamodel level, which requires a clear and deep understanding about \nthe abstract syntax and semantic interrelationships between the source and target models. In some cases, \ndomain concepts may be hidden in the metamodel and difficult to unveil [2] (e.g., some concepts are hidden \nin attributes or association ends, rather than being represented as first-class entities). These implicit \nconcepts make writing transformation rules challenging. Thus, the difficulty of specifying transformation \nrules at the metamodel level and the Copyright is held by the author/owner(s). OOPSLA 2009, October 25-29, \n2009, Orlando, FL, USA. ACM 978-1-60558-768-4/09/10. associated learning curve may prevent some domain \nexperts from building model transformations for which they have extensive domain experience. The research \ndescribed in this poster aims to simplify the implementation of model transformations, so that general \nusers (e.g., domains experts and non-programmers) are enabled to realize model evolution tasks without \nknowing a specific model transformation language or the metamodel definition.  2. Limitations of Related \nWork Model Transformation By Example (MTBE) [3] is an innovative approach to address the challenges inherent \nfrom using model transformation languages. Instead of writing transformation rules manually, users are \nasked to build a prototypical set of interrelated mappings between the source and target model instances, \nand then the metamodel-level transformation rules will be semi-automatically generated. Because users \nconfigure the mappings at the model instance level without knowing any details about the metamodel definition \nor the hidden concepts, combined with the generated rules, the simplicity of specifying model transformations \ncan be improved using MTBE. Varr\u00f3 and Balogh first introduced the MTBE idea in [3] and later proposed \nan implementation framework by using inductive logic programming [4], [5]. The user-defined interrelated \nmappings between the source and target model instances are first transformed to logic rules and facts. \nThrough an inductive logic programming engine, the metamodel-level mapping rules can be inferred. Similarly, \nStrommer and Wimmer implemented an Eclipse prototype to generate ATL transformation rules from the user-defined \nsemantic mappings between domain models [2], [6], [7]. Rather than applying a logic programming engine, \ntheir inference and reasoning process was based on pattern matching. The current status of MTBE suffers \nfrom several problems, preventing it from being a more accepted model transformation approach. Firstly, \nit only supports semi-automatic generation of rules, requiring further user refinement, which means that \nusers cannot be fully isolated from the knowledge of the transformation languages and metamodel definition. \nFurthermore, the quality of the inferred transformation rules depends on the availability of suitable \nsource and target model instances that can be used to perform the semantic mapping. Also, current MTBE \napproaches only focus on directly mapping the corresponding domain concepts between two different metamodels \nwithout handling complex attribute transformations (e.g., an attribute in the source model is transformed \nto another in the target model by some arithmetic operations). Ignoring this function will undermine \nthe power of model transformations.  3. Solution Approach: MTBD To further simplify the realization \nof model transformations, this poster introduces a new approach Model Transformation By Demonstration \n(MTBD), which derives from the idea of MTBE. Instead of inferring the rules from a set of interrelated \nmappings between the source and target models, users are asked to demonstrate how the model transformation \nshould be done by directly editing (e.g., add, delete, update) the source model to simulate the transformation \nprocess step by step. The source model will be changed into the desirable target model after the demonstration. \nDuring the demonstration process, a recording and inference engine captures all the user operations and \ninfers the user s intention in a model transformation task. Finally, a transformation pattern is generated \nfrom the inference, specifying the precondition of a transformation (i.e., where a transformation should \nbe done) and the actions needed in a transformation (i.e., how a transformation should be done). This \ngenerated pattern can be executed by the engine in any model instance to carry out the model transformation. \nIt can also serve as an intermediate representation that could be used to generate other transformation \nrules and code in different model transformation languages. The prototype of MTBD, a tool called MT-Scribe, \nhas been implemented as a plug-in for GEMS (Generic Eclipse Modeling System) [8], which is a modeling \ntool hosted within Eclipse. The MTBD process consists of five main steps. In the first step, users edit \na model instance to demonstrate a transformation task. A recording engine has been developed to completely \ncapture all user operations and related context. The recorded operations are optimized to eliminate those \nmeaningless operations (e.g., users first add one element and then delete it later. In this case, both \nadd and delete do not change the model and therefore are meaningless). In the third step, by analyzing \nthe recorded operations, the inference engine will generate the transformation pattern, which specifies \nthe weakest precondition and the transformation actions. The fourth step is to reuse the generated transformation \npattern when needed. We have designed an algorithm and realized an execution engine to automatically \nmatch and execute the generated transformation pattern in any model instances. Finally, a correctness \nchecking and undo mechanism will assist in confirming the correctness of executing transformation patterns. \nIf the execution of a transformation pattern leads to a violation of the metamodel definition, the execution \nwill be terminated and the model instance will be restored to its original state. 4. Results and Contribution \nIn our approach, users are only involved in editing a model instance to demonstrate the transformation \nprocess. All of the other procedures (i.e., optimization, inference, generation, execution, and correctness \nchecking) are automated without any manual refinement. No model transformation languages are used and \nthe generated transformation patterns are invisible to users. Therefore, users are completely isolated \nfrom knowing a model transformation language and the metmodel definition. In addition, complex attribute \noperations can be inferred as well, making our approach more transparent to end-users when compared to \ncurrent MTBE approaches. We have applied our approach to successfully implement several practical model \nevolution tasks in different domains without writing any transformation rules or codes, showing improvement \nin the efficiency and simplicity of specifying model transformations. One example is the MazeGame domain, \nwhich describes the structure and organization of a maze game. Various evolution transformations like \nBalance Power Items, Simplify a Game can be realized easily by demonstration. Additionally, we have used \nour approach to infer typical UML refactoring transformations, such as Extract Subclass, Push Down Method. \nMore detailed description about the examples and associated video demos are available at the project \ns web site: http://www.cis.uab.edu/softcom/mtbd. In addition to facilitating model refactoring, the current \nMTBD approach can also contribute to other areas related with model evolution. For instance, in Aspect-Oriented \nModeling (AOM), MTBD can demonstrate the process of weaving a crosscutting concern to the base model \nto simplify aspect weaving; model scalability can be simplified as well through demonstrating the scaling \nprocess and generating the scaling pattern. As future work, implementing MTBD for exogenous model transformations \n(i.e., transformations between two different domains or metamodels) will simplify more applications of \nmodel engineering. In the current version of MT-Scribe, one limitation is that only the basic or the \nweakest precondition can be inferred. Additionally, the attribute operations currently supported are \nonly basic arithmetic operations and string concatenation, without more powerful operations and functions \n(e.g., max() and min()). Hence, to make MTBD more practical, these additional attribute operations should \nbe supported in the demonstration process, and represent areas of future work.  Acknowledgement This \nwork is supported by an NSF CAREER award (CCF\u00ad0643725).  References [1] Sendall, S., Kozaczynski, W.: \nModel transformation - The heart and soul of model-driven software development. IEEE Software, Special \nIssue on Model Driven Software Development, vol. 20, no. 5, pp. 42-45, Sep./Oct. 2003. [2] Wimmer, M., \nStrommer, M., Kargl, H., Kramler, G.: Towards model transformation generation by-example. In Proceedings \nof the 40th Hawaii International Conference on Systems Science, Big Island, HI, January 2007, pp. 285. \n[3] Varr\u00f3, D.: Model transformation by example. In Proceedings of Model Driven Engineering Languages \nand Systems, Genova, Italy, October 2006, pp. 410 424. [4] Balogh, Z., Varr\u00f3, D.: Model transformation \nby example using inductive logic programming. Software and Systems Modeling, vol. 8, no. 3, July 2009, \npp. 347-364. [5] Varr\u00f3, D., Balogh, Z.: Automating model transformation by example using inductive logic \nprogramming. In Proceedings of the 2007 ACM Symposium on Applied Computing, Seoul, Korea, March 2007, \npp. 978 984. [6] Strommer, M., Wimmer, M.: A framework for model transformation by-example: Concepts \nand tool support. In Proceedings of the 46th International Conference on Technology of Object-Oriented \nLanguages and Systems, Zurich, Switzerland, July 2008, pp. 372 391. [7] Strommer, M., Murzek, M., Wimmer, \nM.: Applying model transformation by-example on business process modeling languages. In Proceedings of \nThird International Workshop on Foundations and Practices of UML, Auckland, New Zealand, November 2007, \npp. 116 125. [8] Generic Eclipse Modeling System (GEMS). http://www.eclipse.org/gmt/gems/  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Model evolution is often supported by writing model transformation rules in specialized languages. This presents challenges to those who are unfamiliar with model transformation languages or metamodel definitions. This poster describes research that simplifies the creation of model evolution transformations by recording and analyzing the operational behavior exhibited by end-users.</p>", "authors": [{"name": "Yu Sun", "author_profile_id": "81418595134", "affiliation": "University of Alabama at Birmingham, Birmingham, AL, USA", "person_id": "P1728595", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640011", "year": "2009", "article_id": "1640011", "conference": "OOPSLA", "title": "Supporting model evolution through demonstration-based model transformation", "url": "http://dl.acm.org/citation.cfm?id=1640011"}