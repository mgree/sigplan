{"article_publication_date": "10-25-2009", "fulltext": "\n The Future is Dynamic Adaptive Runtime Resource Management for Heterogeneous Computer Platforms Rogier \nBaert Carolina Blanch Paul Coene Maja D Hondt * ZheMa RoelWuyts IMEC, Leuven {baertr}{blanch}{coene}{dhondtm}{wuytsr}{mazhe}@imec.be \nAbstract Software developers increasingly need to take advantage of heterogeneous hardware resources, \nlike GPUs and DSPs, while coping with dynamic events andquality of service re\u00adquirements. This demonstration \nshows how an adaptive re\u00adsource manager that dynamically assigns components to pro\u00adcessing elements can \ntake advantage of heterogeneous plat\u00adforms, in this case a platform consisting of multiple multi\u00adcore \nCPUs and GPUs.It will also demonstratea simulator that is used to see the impact of different resource \nman\u00adagement strategies and options before actually implement\u00ading them. The application used in the demonstration \nwill bea demanding real-world video processing application that usesthe GStreamerframework,usedtobuild \ncomponentized stream-processing applications, for which wehavebuilt sev\u00aderal CPU-and GPU-accelerated \ncomponents. Categories and Subject Descriptors D.3.4 [Proces\u00adsors]: Run-time environments; C.3[Special-Purpose \nand Application-Based systems]: Real-time and embedded systems; D.4.1[Process Management]: Multiprocessing/\u00admultiprogramming/multitasking; \nC.1.3[Other Architecture Styles]: Heterogeneous (hybrid) systems General Terms Algorithms, Experimentation, \nMeasure\u00adment, Performance Keywords Runtime Resource Management, Embedded Software Engineering, Heterogeneous \nDevices * Af.liated with Vrije Universiteit Brussel, Brussels, Belgium Af.liated with Katholieke Universiteit \nLeuven, Leuven, Belgium Copyright is held by the author/owner(s). OOPSLA 2009, October 25 29, 2009, Orlando, \nFlorida, USA. ACM 978-1-60558-768-4/09/10. 1. Introduction We are moving towards a world where very \nheterogeneous devices are connected -ranging from miniature to big, from mobile to tethered: servers, \nmobile terminals, wireless sen\u00adsors, wearable and implanted devices.Todays systems sup\u00adportever more \ndemanding software applications, and require the addition of more and more heterogeneous hardware re\u00adsources \nto continue to meed these demands. The recent trend of GPU accelerated software illustrates this trend. \nSoftware is also becoming more and more dynamic. Dy\u00adnamism occurs as a result of unpredictable interaction \nwith users or with the environment, event detection, widely vary\u00ading input data, updatable or downloadable \nsoftware, online services, and so on. Furthermore, networked devices bring about all the dynamism inherent \nin distributed systems. Developing software for networked heterogeneous de\u00advices that is optimized and \nmeets quality of service require\u00adments is hard. This demonstration presents the results of our .rststepinsolvingthis \nproblem,whichisfocussedatthede\u00advicelevel.It describesasystemthatmanagesthedevice sre\u00adsources at run time \nas opposed to the traditional design-time approaches. This system combines runtime system monitors that \ncan keep track of device-level execution, an adaptive runtime resource manager that assigns software \ncomponents to the heterogeneous processing elements, and a simulation tool to see the impact of assignments \nand explore solutions. We have applied our runtime resource manager on a real\u00adworld case coming from \na leading-edge networked visual\u00adization systems supplier. The application uses the GStreamer multimedia \nframework to process video streams on a hard\u00adware platforms containing CPU s as well as GPU s. Our runtime \nresource manager is able to adapt the mappings of GStreamer pipeline elements (to scale video frames, \ndecode them,etc.) on processing elements depending on the contex\u00adtual needs (e.g. number of streams that \nare processed, com\u00adplexity of the frames and the application, etc.). 2. Concrete Example Suppose an application \nneeds to be developed to process twenty video streams in parallel, for example to detect (part of) streams \nthat do not meet image quality requirements, or that lack certain information such as the logo of the \nbroad\u00adcasting station. In that case an alarm needs to be triggered and an operator will need to visuallyinspect \nthat part of the problematic stream, while other streams continue to be pro\u00adcessed. Only a few years \nago the hardware of such system would have consisted of a single or few CPU s, possible assisted by a \ndedicated custom-build decoder card. Today however we see that commodity hardware is being used as well, \nresulting in ever more diverse hardware resources that shouldbe taken advantageofbythe software.  This \nexample highlights a number of problems that soft\u00adware developersface that have to implement such systems: \n there are stringent quality-of-service constraints, for ex\u00adample that frames should notbe missed.  \ndeveloping optimized software that can take advantage of the different processing elements is hard. \n the software has to run on various hardware con.gura\u00adtions and has to run ef.ciently on all of these. \n the execution load varies a lot (due to user interaction, difference in video formats, video content, \netc)  different video applications require different processing.  3. Adaptive Runtime Resource Management \nThe typical approach to develop software for such systems istodoaworst-case analysis.Iftheloadvarianceused \nwhile designing the system can be modeled accurately, and the loadvarianceisnottoolarge,thiscanleadtogood \nsolutions. However, for the reasons outlined above this is no longer practical. We demonstrate an approach \nthat is centered around a runtime resource manager that dynamically decides what processing is done where. \nIn the above example the runtime resource manager can for example decide to do the process\u00ading of half \nofthe streams on the DSP board, one quarter on the GPUs and the rest on the CPUs. But when a user starts \nto visually inspectastream,the assignmentof processingel\u00adements can be changed, even to processing elements \nof dif\u00adferent types. An important feature of this approach is that the deci\u00adsion strategy is pluggable \nand can be customized, for ex\u00adample to take application-or platform-speci.c information into account.Moreover, \ncontrary to design-time approaches that can only use static or pro.led information, a runtime resource \nmanagement strategy can also use runtime infor\u00admation. Therefore it can make maximal use of the platform \nto maximize performance, minimize power consumption or memory bandwidth, etc. The ideal situation for \nthe runtime resource manager is that every software component can run on every processing element. It \ncan then take maximum advantage of the plat\u00adform depending on the runtime needs. This would induce a \nhuge development cost, unless OpenCL and its alternatives become mainstream and optimized. Moreover it \nis not al\u00adways clear how much performance isgained when acceler\u00adating software usinga particular processing \nelement.Video decoders, for example, get a boost when parts are GPU\u00adaccelerated,but not whenthe entire \ncodec runs on the GPU. The runtime resource manager also has to use a resource management strategy that \nis both fast and takes good ad\u00advantage of the resources. Many different strategies can be envisioned, \nfrom simple strategies that do forms of load bal\u00adancing to strategies that use machine learning. To solve \nthe two problems of having the possibility to explore resource assignment strategies before making sev\u00aderal \nsoftware versions of components we made a simulator. The simulator is parametrized with a detailed description \nof the hardware platform, a description of the software, and a resource assignment strategy, and will \nshow the runtime be\u00adhaviour that results. This enables experimentation with dif\u00adferent strategies and \nwhat-if analysis before constructing ac\u00adtual software components. 4. Implementation and Demonstration \nWe have implemented a runtime resource manager and simulator in C++. The runtime resource manager manages \nGStreamer plug-ins. We have implemented a number of plug-ins on both CPU and GPU. The resource manager \nmon\u00aditors execution of the plug-ins and uses this information to decide which plug-in uses what processing \nelement. It is therefore not just GPU accelerated video processing,but an infrastructure to manage these \nresources at runtime.We will show the difference between not having GPU accelerated processing, using \nGPU accelerated processing where it is statically decided which parts of the processing are GPU ac\u00adcelerated, \nand our runtime managed approach. Thedemonstrationwillgiveanoverviewofthe addressed problem and solution. \nIt will then show the system in ac\u00adtion, managinga video processing application where thedy\u00adnamism forces \nit to reassign GStreamer components to dif\u00adferent processing elements while processing. It will then \nin\u00adtroduce the simulator, that can be used for what-if analysis, for example: what would happen if we \nadd a second GPU tooursystem?Wewillthencomparethe bene.tsofthisap\u00adproach withdesign-time optimization \napproaches, and show that for dynamic applications there is a need for adaptive runtime resource management. \n5. About the Presenter RoelWuytsisa senior research engineerat IMEC Belgium anda part-time professorinthe \nKatholiekeUniversiteit Leu\u00adven (Computer Science Department).Hewasinvolvedinthe architecture and development \nof this system since the be\u00adginning. In embedded systems his research interests include embedded software \nengineering, speci.cally componentized runtime resource managers and distributed resource man\u00adagers for \nnetworked embedded devices. Other research inter\u00adests include OO language design, object versioning, \naspect\u00adoriented programming, and logic meta programming. He has a PhD in Computer Science from Vrije \nUniversiteit Brussel.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Software developers increasingly need to take advantage of heterogeneous hardware resources, like GPUs and DSPs, while coping with dynamic events and quality of service requirements. This demonstration shows how an adaptive resource manager that dynamically assigns components to processing elements can take advantage of heterogeneous platforms, in this case a platform consisting of multiple multi-core CPUs and GPUs. It will also demonstrate a simulator that is used to see the impact of different resource management strategies and options before actually implementing them. The application used in the demonstration will be a demanding real-world video processing application that uses the GStreamer framework, used to build componentized stream-processing applications, for which we have built several CPU- and GPU- accelerated components.</p>", "authors": [{"name": "Rogier Baert", "author_profile_id": "81363603817", "affiliation": "IMEC, Leuven, Belgium", "person_id": "P1728604", "email_address": "", "orcid_id": ""}, {"name": "Carolina Blanch", "author_profile_id": "81430623027", "affiliation": "IMEC, Leuven, Belgium", "person_id": "P1728605", "email_address": "", "orcid_id": ""}, {"name": "Paul Coene", "author_profile_id": "81100527803", "affiliation": "IMEC, Leuven, Belgium", "person_id": "P1728606", "email_address": "", "orcid_id": ""}, {"name": "Maja D'Hondt", "author_profile_id": "81100105517", "affiliation": "IMEC, Leuven, Belgium", "person_id": "P1728607", "email_address": "", "orcid_id": ""}, {"name": "Zhe Ma", "author_profile_id": "81310499983", "affiliation": "IMEC, Leuven, Belgium", "person_id": "P1728608", "email_address": "", "orcid_id": ""}, {"name": "Roel Wuyts", "author_profile_id": "81100639276", "affiliation": "IMEC, Leuven, Belgium", "person_id": "P1728609", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640015", "year": "2009", "article_id": "1640015", "conference": "OOPSLA", "title": "The future is dynamic: adaptive runtime resource management for heterogeneous computer platforms", "url": "http://dl.acm.org/citation.cfm?id=1640015"}