{"article_publication_date": "10-25-2009", "fulltext": "\n Harmony-Oriented Smalltalk Sebastian Fleissner Elisa Baniassad Department of Computer Science and Engineering \nThe Chinese University of Hong Kong Shatin, N.T., Hong Kong {seb, elisa}@cse.cuhk.edu.hk Abstract Harmony-oriented \nprogramming relaxes encapsulation and infor\u00admation hiding by arranging code snippets in virtual spaces \nand ex\u00adchanging data via diffusion. Harmony-Oriented Smalltalk is a vi\u00adsual development environment used \nin on-going studies to gather evidence that harmony-oriented programs are less prone to brittle\u00adness \nthan object-oriented programs in the context of software evo\u00adlution. Categories and Subject Descriptors \nD.2.6 [Software / Software Engineering]: Programming Environments General Terms Languages Keywords Harmony-Orientation, \nSmalltalk 1. Introduction A harmony-oriented program [1, 2] (.g 1) consists of virtual spaces with two \nor more dimensions that contain code snippets and other spatial constructs. Spaces serve as the runtime \nenvironment of the harmony-oriented program. Each spatial construct is assigned to a speci.c location \nin a space and can interact with the space by putting data into and consuming data from its location. \nSpatial con\u00adstructs are only aware of the space containing them and can not see or interact with other \nspatial constructs. Whenever a space receives data from a spatial construct, it automatically diffuses \nit. Because of the diffusion, the data eventually reaches the locations of other spatial constructs, \nwhich then can consume the data. Hence, the dif\u00adfusion process facilitates indirect data exchange between \nthe spatial constructs in a space. In addition to spatial constructs, concrete harmony-oriented pro\u00adgramming \nlanguages and runtime environments can optionally sup\u00adport object-oriented constructs like classes and \nobjects for the pur\u00adpose of realizing abstract data types and accessing existing appli\u00adcation programming \ninterfaces. As a result, harmony-oriented pro\u00adgramming can be realized as an extension to object-oriented \npro\u00adgramming. However, when writing harmony-oriented programs, the primary decomposition is always in \nterms of spaces and spa\u00adtial constructs, and not objects. Copyright is held by the author/owner(s). OOPSLA \n2009, October 25 29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10.  Harmony-Oriented Smalltalk \n(HOS)1 is a Squeak-based harmony\u00adoriented runtime and visual development environment that allows programmers \nto implement harmony-oriented programs written in Smalltalk. The visual development environment is based \non Mor\u00adphic and provides programmers with tools for inspecting spaces, editing snippets, changing diffusion \nsettings and debugging. Figure 1. A Harmony-Oriented Program 2. Runtime Environment The HOS runtime \nenvironment provides an object-oriented inter\u00adface for creating and running harmony-oriented programs \nconsist\u00ading of two-dimensional spaces and snippets. Spaces provide and implement features like snippet \nscheduling and concurrency, data management, and debugging. In HOS, snippets are pieces of plain Smalltalk \ncode that are assigned to a location within a space. Each time a snippet is executed, it receives a collection \nof objects implementing the so-called snippet runtime interface. These ob\u00adjects allow the snippet to \nexchange data with its space, maintain a state within the space, and to log messages. Here, we consider \none of these objects called named space to illustrate how to im\u00adplement simple snippets that exchange \ndata with their space. The space object provides methods for putting objects (data) into the space, consuming \nobjects (data) from the space, and peeking at / observing objects (data) in the space. When snippets \ninvoke meth\u00adods of the space object to place data into the space, they can attach one or more tags. Listing \n1 shows a simple code snippet that puts three objects into the space. The .rst object is a number with \na tag, the second object is a string without any tags, and the third object is a TaggedData object that \ncontains another number with two tags. The methods provided by the space object for consuming data from \nthe space let the programmer specify the required data type (e.g. Object, Number), required tags, and \nalso allow passing a Smalltalk code block that can be used for implementing more advanced matching. These \nmethods either consume a single matching object 1 http://www.squeaksource.com/hos.html 1 s p a c e p \nu t : 20 t a g : x . 2 s p a c e p u t : H e l l o World ! . 3 s p a c e p u t : ( TaggedData new \n4 v a l u e : 5 0 ; addTag : tagOne ; addTag : tagTwo ) . Listing 1. Snippet putting objects into \nthe space. or set up a loop for consuming all available and future matching objects. Furthermore it \nis possible to instruct the space to wait for a speci.c combination of multiple objects (a set) and then \nconsume it. Listing 2 illustrates a snippet that consumes all number objects and listing 3 demonstrates \na snippet that uses a DataDescription object to consume all strings containing more than ten characters. \n1 s p a c e consume : Number do : [ : num | 2 l o g show : num a s S t r i n g . 3 ] . Listing 2. Snippet \nconsuming numbers. 1 | description | 2 description := DataDescription new 3 type: String; addTag: Name \n; 4 constraint :[: val | val size > 10]. 5 space consume: description do:[: str | 6 log show: str . ]. \nListing 3. Consume strings with 10+ characters. 3. Visual IDE Harmony-Oriented Smalltalk provides a \ncomplete visual integrated development environment. Programmers can create spaces and snippets via drag \nand drop, and examine and change the state of harmony-oriented programs. In particular, the HOS IDE provides \nthe following features: Create spaces and snippets via drag and drop.  Edit, start, stop, and delete \nsnippets (.gure 2).  Scroll and zoom the contents of spaces.  Set diffusion parameters (.gure 3). \n Inspect locations (cells) of the space (.gure 4).  Figures 2, 3, and 4 illustrate some of the tools \nand dialogs for editing and inspecting spaces, snippets, and locations. 4. Summary Harmony-Oriented \nSmalltalk is a visual development environment for harmony-oriented programs as envisioned in [2]. It \nis currently being used for performing studies that evaluate harmony-oriented programming. Figure 2. \nSnippet Editor  Figure 3. Diffusion Inspector Figure 4. Location Inspector References [1] E. Baniassad \nand S. Fleissner. The geography of programming. In OOPSLA 2006 Companion, pages 560 573. ACM Press, 2006. \n[2] S. Fleissner and E. Baniassad. Towards harmony-oriented program\u00adming. In OOPSLA 2008 Companion, pages \n819 822. ACM Press, 2008. \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Harmony-oriented programming relaxes encapsulation and information hiding by arranging code snippets in virtual spaces and exchanging data via diffusion. Harmony-Oriented Smalltalk is a visual development environment used in on-going studies to gather evidence that harmony-oriented programs are less prone to brittleness than object-oriented programs in the context of software evolution.</p>", "authors": [{"name": "Sebastian Fleissner", "author_profile_id": "81339499723", "affiliation": "Chinese University of Hong Kong, Sha Tin, Hong Kong", "person_id": "P1728548", "email_address": "", "orcid_id": ""}, {"name": "Elisa Baniassad", "author_profile_id": "81414615851", "affiliation": "Chinese University of Hong Kong, Sha Tin, Hong Kong", "person_id": "P1728549", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1639995", "year": "2009", "article_id": "1639995", "conference": "OOPSLA", "title": "Harmony-oriented smalltalk", "url": "http://dl.acm.org/citation.cfm?id=1639995"}