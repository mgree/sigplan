{"article_publication_date": "10-25-2009", "fulltext": "\n Declarative Web-Applications without Server Demonstration of How a Fully Functional Web-Application \ncan be Built in an Hour with only HTML, CSS &#38; <angular/> JavaScript Library Mi ko Hevery GetAngular.com \n(BRAT Tech, LLC) misko@hevery.com Abstract Common wisdom in web-application design states that web\u00adapplications \nneed to have (1) a presentation layer (on the browser), (2) a business-logic layer (on the server), and \n(3) a database. In such a design, almost all of the application behavior is specified on the server. \nNow, imagine what an application would look like if the application layer was moved from the server to \nthe browser? The resulting system would have the browser communicating directly with the database server. \nIn this system the behavior of the application would need to be fully described in the HTML itself. By \nembedding declarative tags in HTML the once static HTML can now become an interactive application capable \nof both persistence, and intelligent behavior. The resulting design allows a web-designer (not versed \nin server side technologies and languages) to build interactive web applications in hours rather than \nmonths, which is currently the norm with more traditional methods. Categories and Subject Descriptors \nD.3.3 Software, PROGRAMING LANGUAGES, Language Constructs and Features Frameworks General Terms Algorithms, \nDesign, Languages. Keywords Web-Applications; HTML &#38; CSS; JavaScript; Declarative; AJAX; Web-Designer; \nDatabase; Template 1. What is <angular/> <angular/>, consists of a JavaScript client library which adds \nnew capabilities to the existing browsers, allowing the web-designer to become a web developer. In addition, \n<angular/> is also a service which provides persistence storage for the <angular/> web\u00adapplications. \nAn <angular/> application consists of a collection of static HTML files which act as templates for the \napplication and contain application behavior in the form of <angular/> directives. These directives allow \ndata-binding to take place, making it easy to tie an input field in the HTML to a property in the database. \nEach HTML template must have the <angular/> JavaScript framework loaded in order to take advantage of \nthe behavior. Copyright is held by the author/owner(s). OOPSLA 2009, October 25-29, 2009, Orlando, FL, \nUSA. ACM 978-1-60558-768-4/09/10. Adam Abrons GetAngular.com (BRAT Tech, LLC) adam@getangular.com 1.1 \nGoals Simple: Building web-applications should be as simple as: 1) creating an HTML template, 2) adding \n<angular/> JavaScript to HTML and 3) declaring the name of the database entity in the HTML template. \nAs a web-application creator you should not need to know much beyond the HTML &#38; CSS. In contrast, \ntraditional methods of building even the simplest web\u00adapplications requires knowledge of client: HTML, \nCSS, JavaScript, HTTP; server: Java / PHP / Python / Ruby; database: SQL, and can take weeks to build. \nThe goal of <angular/> is to make simple web-applications, which require basic CRUD (Create, Read, Update, \nDelete) operations, trivial to build. Declarative: HTML is simple because it is declarative. JavaScript \n(like any other programing language) is too complex for most web-designers because it is procedural in \nnature. For this reason <angular/> too is declarative, making it easy to learn. Bookmark-able: The page \nURL should contain all of the necessary information needed to restore the HTML template view to the current \nstate. The page URL updates automatically as the user modifies it, and saves the data to the database. \nAny Look&#38;Feel: There are many existing services which allow CRUD operations on data. However, most \nof them are hosted on closed environments which limited freedom to set the look&#38;feel of the form, \nand are often not embeddable in existing pages. In contrast, <angular/> gives full control of the look&#38;feel \nto the web-designer. Embed-able: The user should have the freedom to host the HTML templates anywhere, \neven in an existing web application. This allows the user to add application-like behavior to existing \ncontent such as blogs, CMS (Content Management Systems) or even emails. This means that the location \nof the HTML template and the <angular/> database need not be on the same domain. Audit-able: The business \nrules execute on the client and therefore, they can not be trusted. As a result, a full audit of all \nmodifications to the data is needed to prevent abuse. Extensible: <angular/> is extensible. If it does \nnot fulfill your needs out of the box, you cans always use JavaScript to extend functionality. This allows \nfree mixing with existing JavaScript libraries and frameworks.  1.2 Non-Goals Because <angular/> business \nrules run on the client, the code can not be trusted, and as a result applications where audit data is \nnot sufficient and require stricter data control are not a good match.  1.3 Life-Cycle The best way \nto describe an <angular/> application is to look at a typical <angular/> application life-cycle: 1. Browser \nloads an HTML template (normal browser behavior) 2. The <angular/> JavaScript, which is included in \nthe template HTML script tag, examines the HTML DOM and looks for <angular/> directives in the form of \ntag attributes or text bindings. The <angular/> directives describe the application visual widgets, behavior, \nform validation, database persistence, and URL encoding strategy. 3. The initialization directives are \nprocessed first, and are used to declare the database entities and load any initial data from the database \nusing the URL key-value pairs, this initializes the application model. The model is the truth of the \ncurrent state of the application. 4. The application enters bind phase, where HTML UI elements and Widgets \nare bound to application model. For all practical purposes the model and the HTML rendering of the model \nbecome one. This means that any changes to the model are reflected in HTML structure, and conversely \nany changes in the HTML structure (such as entering form data) are reflected in the model. 5. User may \ntrigger a save which persists the model to the database.  2. HTML as Template A simple persistable hello-world \nform is show with <angular/> directives bolded: <html> <head> <script src=\"http://misko.getangular.com/ \nangular-1.0a.js#database=oopsla\"> </head> <body ng-entity=\"greeting=Greeting\"> Your name: <input type=\"text\" \nname=\"greeting.name\"/> <input type=\"submit\" value=\"Save\"/> <br/> Hello, {{name}}! </body> </html> The \nabove example displays a form which asks for the user's name. Upon entering a name, such as 'John', into \nthe input field it is immediately visible in the greeting 'Hello, John!', When the user hits the 'Save' \nbutton, the data is persisted to the <angular/> database under the entity 'Greeting', and the URL is \nupdated with 'greeting=123'. This allows you to bookmark the URL for later access or email. When the \nURL is reopened, 'John' is loaded from the database and bound to the appropriate locations on the page. \n3. Persistence, Versioning and Query An application may need a database to store data. Each database \ncontains entities which are declared in the HTML templet. The entity is a collection of JSON documents \nwhich are dynamic (schema free i.e. each document can have a different format). Each document is stored \nas a list of unmodifiable versions allowing for a full audit of all of the edits by different users. \n4. Bindings and Expressions Using the {{expression}} notation anywhere in HTML will cause the express \nto be evaluated during the bind phase of the application execution, and be displayed. An example of the \nbind expression {{total = qty * cost}} calculates a single row in the invoice and saves it in total, \nin addition to displaying it to the user. 5. Filters Filters allow the conversion of the model data into \nrenderable presentation. For example, if you want to split $10,000 between three people, a simple expression \nsuch as {{10000/3}} will evaluate to 3333.33333. However, if you would like to display $3,333.33, this \ncan be achieved with a currency filter such as {{10000/3|currency}}. <angular/> comes with a variety \nof the most common filters used to display data to users. 6. Widgets HTML form widgets fall short of \nmost users' expectations for today's interactive web-application. For this reason, <angular/> includes \nadditional widgets such as repeaters, date-pickers, barcodes, charts, maps, package tracking, and form \nvalidation. New behavior can easily be added through JavaScript. 7. Security <angular/> has security \nand authentication built into the database access and may prompt the user to log in. The security model \nprevents unauthorized access to your data (<angular/> does not control access to the templates, as they \ncan be embedded). When creating a database with <angular/>, read/write permissions can be applied to \nthe database to manage user rights. The HTML template is on a different domain than the <angular/> database, \ntherefore, <angular/> must also supports cross-site communication. However, this opens <angular/> up \nfor cross-site attacks. For this reason, an additional list of hosting sites, which are authorized to \ntalk to database, must be specified when creating a database storage for an <angular/> application. 8. \nGlass Ceiling Very rich applications can be created with nothing more than HTML and <angular/> directives. \nExamples of this include: invoicing, company directory, job estimation, and task lists, to name a few. \nAt some point, it may become necessary to go beyond what the <angular/> directives allow. In this circumstance, \nthe application developer can take full advantage of the JavaScript and use it together with <angular/> \nto build even more complicated applications.   \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Common wisdom in web-application design states that web-applications need to have (1) a presentation layer (on the browser), (2) a business-logic layer (on the server), and (3) a database. In such a design, almost all of the application behavior is specified on the server. Now, imagine what an application would look like if the application layer was moved from the server to the browser? The resulting system would have the browser communicating directly with the database server. In this system the behavior of the application would need to be fully described in the HTML itself. By embedding declarative tags in HTML the once static HTML can now become an interactive application capable of both persistence, and intelligent behavior. The resulting design allows a web-designer (not versed in server side technologies and languages) to build interactive web applications in hours rather than months, which is currently the norm with more traditional methods.</p>", "authors": [{"name": "Mi&#353;ko Hevery", "author_profile_id": "81381609977", "affiliation": "BRAT Tech, LLC, Los Gatos, CA, USA", "person_id": "P1728637", "email_address": "", "orcid_id": ""}, {"name": "Adam Abrons", "author_profile_id": "81444607482", "affiliation": "BRAT Tech, LLC, Los Gatos, CA, USA", "person_id": "P1728638", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640022", "year": "2009", "article_id": "1640022", "conference": "OOPSLA", "title": "Declarative web-applications without server: demonstration of how a fully functional web-application can be built in an hour with only HTML, CSS & Javascript Library", "url": "http://dl.acm.org/citation.cfm?id=1640022"}