{"article_publication_date": "10-25-2009", "fulltext": "\n InTml: A Case Study on Virtual Reality Development Pablo Figueroa Universidad de los Andes, Colombia \n p.guero@uniandes.edu.co Abstract We present the Interaction Techniques Markup Language (InTml), a case \nstudy of the use of Domain Speci.c Languages (DSLs), Model Driven Development (MDD), and Software Product \nLines (SPL) in the .eld of Virtual Reality (VR) applications, a challeng\u00ading domain due a wide variety \nof hardware platforms, computa\u00adtional limitations, and available solutions. We use existing tech\u00adnologies \naround the Eclipse Platform in order to create an IDE in whichfamilies of VR applications can be generated \nand played. Categories and Subject Descriptors D.2.11[Software Engineer\u00ading]: Software ArchitecturesDomain-speci.c \narchitectures; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realis\u00admVirtual reality General \nTerms Design, Languages Keywords InTml,Virtual Reality Development 1. Introduction Virtual Reality applications \noffer new solutions to futuristic and existing challenges in several .elds, such as oil exploration, \nau\u00adtomotive design, and entertainment, among others. They use non\u00adtraditional input and output devices \nto conveyricher and more pro\u00adductive multimodal experiences than counterparts with standard in\u00adterfaces. \nCurrent VR experiences allow users not only to see but also touch, hear, and smell very complex 3D scenarios \nat interac\u00adtive frame rates. It is very challenging to implement solutions for these type of applications, \ndue to the combination of complex concerns that should be addressed: multiple users with non-traditional \ninput and output devices, different hardware platforms that should be ad\u00addressed, forceful interactive \nrates, experimental interaction tech\u00adniques, among other issues. We are interested in applying software \nengineering concepts such as SPL, DSL, and MDD to the .eld of VR applications. First, we believe VR is \na challenging .eld for these technologies due to the huge amount of variability, compared to the one \npresent in tra\u00additional WIMP-based (Windows, Icons, Menus, Pointer) applica\u00adtions. Second, the use of \nthese technologies could create a more uniform and easy environment for VR developers. Third, these technologies \nare now supported by mature enough tools, so SPL, MDD, and DSLs can be more easily and more uniformly \napplied in development than in the past. Copyrightisheldby the author/owner(s). OOPSLA2009, October25 \n29,2009,Orlando, Florida,USA. ACM978-1-60558-768-4/09/10. 2. Selected Related Work There have been previous \nwork on IDEs for VR applications. In [3], authors presented a system with a model of non-WIMP appli\u00adcations \nbased on two formalisms, in order to handle both discrete and continuous events. [5] presents a system \nbased on petri nets. In the .eld of MR applications, APRIL [4] is a system for creat\u00ading MR applications \naround seven main concepts. These and other systems have created interesting approaches for the development \nof VR applications, although their approached have been limited to particular types of applications or \nmodels. We believe that our MDD based development promises to address some of the short\u00adcomings of previous \nresults. 3. A Case Study We have designed InTml as DSL with a very compact set of con\u00adcepts that are \ncommon to any VR application: devices, behavior, and objects. A description of such concepts can be found \nat [1]. All concepts are represented as .lters in a data.ow, which may be executed in parallel. As an \nexample of the use of InTml, let s assume we are interested in navigating and showing information about \nobjects in a small but complex VR of.ce, in three hardware platforms: a linux-based CAVE, a Windows-based \nPC with a joy\u00adstick, and a cell phone with graphics acceleration. If we concen\u00adtrate on the navigation \ntask, it is possible to think on interesting and different implementations for such a task in each platform, \nas follows. In a CAVE, a user can navigate to an interesting object by pointing to it and selecting it. \nThe system should compute a path from the current viewpoint position to a position in front of such an \nobject. In a PC with a joystick, a navigation technique that resem\u00adbles theWALK mode in VRML could be \nused. This mode features collision detection between the user s representation and objects in the environment. \nIn a cell phone, due to computation restrictions and limitations on the platform, it is more convenient \nto select pre\u00adrecorded viewpoints and paths than using the previous navigation techniques. It could be \nalso important to reduce the complexity of the scene as possible. The InTml-based development for such \na family starts with the creation of .lter classes in order to address the required function\u00adality in \neach platform. From those classes, data.ows of .lter in\u00adstances are created in order to address each \nimplementation. Fig\u00adures 1 and 2 show InTml diagrams of such data.ows. They repre\u00adsent with the same \nformalism three ways to approach a particular task depending on the hardware platform available. Notice \nalso that InTml hides the particular details of how to implement classes such as Scene and Viewport, \nwith quite different software frameworks. Once tasks are designed at the InTml level, MDD and code gen\u00aderation \ntechniques are used in order to create runtime environments and class implementations at the desired \nsoftware platforms. In this way, we can retarget a navigation task to speci.c hardware platforms.  \nFigure 1. Navigation in a Cave scene: p P2D2NavInPlane viewport: pos2D q joystick: savedPointsAndPaths \nprev p next scene: Figure 2. Navigation in a PC and a Cell Phone This is an example of a family of \nVR applications, whose members could use different implementations, different hardware platforms, and \ndifferent interaction techniques [2]. Such families have several types of variability, which we try to \ndivide in two: at the level of a domain speci.c language and issues at the level of the language implementation. \nAt the level of the high level language, we allow developers to change input and output devices, types \nof users (as different applications in thefamily, with common tasks), and interaction techniques, depending \non the type of user and devices in use. Such a change consists in the replacement of behavior and content \nrelated to a particular technique from one application to another. This is feasible because .lters clearly \nseparate devices, behavior, and content. Although also important, we hide some variation points in a \nMR application family from InTml designers, since they require skills of anexperienced programmer.Forexample,experienced \nprogram\u00admers could implement advanced realtime rendering techniques, add context awareness to devices, \nor use a particular combination of APIs and frameworks depending on the actual hardware platform. 4. \nTool Support And Evaluation By means of Eclipse, GMF, and OpenArchitectureWare, we pro\u00advide an extensible \nIDE that supports two types of users. Novices can create VR applications by plugging existing .lters, \nand run them inside the eclipse environment, once such an environment has been properly setup. Experts \ncan de.ne new .lter classes in .lter libraries, and generate code templates for the targeted platforms \nin order to ease the development of new implementations. There are three preliminary implementations \nof InTml, in Java, C++, and ActionScript, which can take advantage of particular features of available \nframeworks such as Java3D, VRPN, or VRJuggler. We have started to use this IDE for InTml development, \nand we have conducted some initial prototype tests. An initial study with4 former InTml developers showed \nsome necessary improvements in the interface, which were incorporated as wizards. A second study gave \n1 hour training to 24 non-programmers, and ask them to de\u00adsign a MR application in about 2 hours in groups \nand .ll a ques\u00adtionnaire about the experience. Although they provided interesting feedback, their understanding \nof InTml s semantics was limited. We believe the lack of a more complete experience with design and implementation \nof an application precludes semantic understand\u00ading of a model, and we plan to do more thorough experiments \nin the future. 5. Conclusions and Future Work We have brie.y discussed how we have applied ideas from \nSoft\u00adware Engineering to InTml, and some of the possibilities this ap\u00adproach creates.We are integrating \nmore target implementations for InTml, and we hope in the future to study issues related to auto\u00admatic \nmigration of VR applications over different implementations, an issue we call automatic VR retargeting. \n6. Acknowledgments We thanks funding from the IBMFacultyAwards Program and the Universidad de los Andes. \nReferences [1]P. Figueroa,W.F. Bischof,P. Boulanger,H.J.s Hoover,andR.Taylor. Intml: A data.ow oriented \ndevelopment system for virtual reality appl ications. Presence: Teleoper. Virtual Environ., 17(5):492 \n511, 2008. [2]P. Figueroa,J. Ferreira, andC. Castro. Developmentof mrapplication families: an intml-based \napproach. In VRST 07: Proceedings of the 2007 ACM symposium on Virtual reality software and technology, \npages 221 222, NewYork, NY, USA, 2007.ACM. [3] R. J. K. Jacob, L. Deligiannidis, and S. Morrison. A software \nmodel andspeci.cation language for non-wimp user interfaces. Transactions on Computer Human Interaction, \n6(1):1 46, March 1999. [4] F. Ledermann and D. Schmalstieg. APRIL a high-level framework for creating \naugmented r eality presentations. In Proceedings of IEEE Virtual Reality Conference 2005 (VR 05), pages \n187 194, 2005. [5] S. Smith and D. Duke. The hybrid world of virtual environments. In Eurographics Proceedings, \nvolume 18, pages 298 307. Blackwell Publishers, 1999.  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>We present the Interaction Techniques Markup Language (InTml), a case study of the use of Domain Specific Languages (DSLs), Model Driven Development (MDD), and Software Product Lines (SPL) in the field of Virtual Reality (VR) applications, a challenging domain due a wide variety of hardware platforms, computational limitations, and available solutions. We use existing technologies around the Eclipse Platform in order to create an IDE in which families of VR applications can be generated and played.</p>", "authors": [{"name": "Pablo Figueroa", "author_profile_id": "81100408698", "affiliation": "Universidad de los Andes, Bogota, Colombia", "person_id": "P1728547", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1639994", "year": "2009", "article_id": "1639994", "conference": "OOPSLA", "title": "InTml: a case study on virtual reality development", "url": "http://dl.acm.org/citation.cfm?id=1639994"}