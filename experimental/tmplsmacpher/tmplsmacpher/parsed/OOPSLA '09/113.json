{"article_publication_date": "10-25-2009", "fulltext": "\n The Puppet and the Probe Samvida Nanda Soumya Ramasubramaniam Sumana Ramasubramaniam Srishti School \nof Art, Design and National Law University, Jodhpur Sushant School of Art and Technology soumyaram@gmail.com \nArchitecture samvida@gmail.com sumanaaram@gmail.com Agastya Nanda Mangala Gowri Nanda Jaypee Institute \nof Information Technology IBM Research, India agastya.nanda@jiitu.org mgowri@in.ibm.com Abstract Visualization \nof a program typically entails low level views of the program execution state showing, for example, method \ninvocations or relations amongst heap objects. In most cases, this would imply visualization of the executable \nprogram. However there is a certain genre of programs that analyze or transform other programs. These \nprograms could be com\u00adpilers, static bug detectors, test suite analyzers, model to model transformers \netc. In such cases, very often, it helps to visualize what is happening to the input program rather than \nthe analyzer program. It is for such programs that we describe a con.gurable, analysis framework. For \nease of exposition, we call the analyzer program the manipulate program, and the input program the puppet \nprogram. Us\u00ading out visualization scheme, we are able to (1) gain insight into the manipulate program; \n(2) collect useful information / statistics about the puppet program. We have implemented the visualizer \nin a tool called INSIGHT . We ran INSIGHT on a static debugging tool (the manipulate program) called \nXYLEM. XYLEM applies static analysis to .nd potential null pointer exceptions in a puppet program, as \nfor example, the Apache Ant program. We report the insights gained by run\u00adning XYLEM through INSIGHT \non ANT and other puppet programs. Further, to visualize the concept of a visualizing a puppet program \nby a manipulate program, we present the the puppet and the probe . Copyright is held by the author/owner(s). \nOOPSLA 2009, October 25 29, 2009, Orlando, Florida, USA. ACM 978-1-60558-768-4/09/10. Categories and \nSubject Descriptors D.2.5 [Software Engi\u00adneering]: Testing and Debugging Debugging aids; D.1.7 [Programming \nTechniques]: Visual Programming General Terms Algorithms, Design Keywords Visualization, Analysis 1. \nIntroduction In visualization, it is important to get the right perspective. Often there are several \nangles to be explored. Typically, visu\u00adalization of a program entails stepping through the program execution \nsteps while examining the data structures that it manipulates [Wang et al. 2003, Ruthruff et al. 2003, \nReiss 2003, Reiss and Renieris 2005]. There exist a certain class of programs that analyze other programs. \nWe call the ana\u00adlyzers the manipulate programs and the analyzed the pup\u00adpet programs. In such manipulate \nprograms, we found that a different visualization perspective could help bring fresh in\u00adsight into understanding \nthe working of the program. While our end goal remains the same to understand the working of a given \nmanipulate executable our approach is to visu\u00adalize the analyzed puppet program instead. Based on the \nvi\u00adsualization of the puppet program, we gain a fresh new per\u00adspective on the behavior of the manipulate \nprogram. INSIGHT is a tool that we have built that helps visualize a puppet program as it is analyzed \nby the manipulate program. The .lm is based on the paper [Nanda and Nanda 2009] where one can .nd all \ntechnical details about the three main actors XYLEM [Nanda and Sinha 2009] (a manipulate pro\u00adgram, that \n.nds potential null pointer dereferences in an in\u00adput program)), ANT (an open source program, the puppet \nbe\u00ading manipulated) and INSIGHT (the visualizer that facilitates the visualization of the puppet program). \nIn this paper we describe the visualization of the concept of visualizing one program (the puppet program) \nin order to debug another related program (the manipulate program). We also give an overview of some \nfeatures of INSIGHT.  2. The puppet and the probe In the .lm we build an analogy where the puppet program \nis represented as a space station that is facing some problems. The manipulator program is depicted as \na probe that is sent out to solve the problems. However, the report sent in by the probe has insuf.cient \ninformation. Hence a visualizer program represented by a droid is sent out. The droid sends back visuals \nof the space station and the analysis helps .x problems in the droid. Incidentally, the analysis also \n.xes problems in the space station. The analogy helps explain the concept of visualizing the puppet program \nin order to understand the working of the manipulator program. The connection between the puppet and \nthe manipulator is that the manipulator is working on the puppet program for example, to analyze or transform \nor compile it. 3. Features of INSIGHT In the .lm we show the following features of INSIGHT. 1. Movement: \nPanning and scrolling of the graph. 2. Zoom: Zoom in and out. 3. Animate: Each event consists of a \nspeci.c instruction in a speci.c color. INSIGHT highlights the event by .lling the relevant block in \nthe speci.ed color. In a side pane, all the instructions in the block are displayed in black and the \ncurrent instruction is highlighted in blue.  Animation may be performed step by step or as a simple \nrun or as a run using breakpoints. The breakpoints are typically speci.ed in terms of colors for example, \nbreak when you encounter a speci.c color. As the animation proceeds, the display pans up, down, left \nor right as required if the current block falls out of the current display. Animation may proceed backwards \nor forwards through the graph, or change direction as required at the click of a button. 4. Flow of Path: \nEach path starts at an orange node and terminates at a red, green or yellow node. The magenta lines overlaying \nthe graph depict the .ow of the path as a block is traversed multiple times, the magenta line also gets \nthicker. For visual effect, we also display an image of R2D2 the visualize droid next to the current \nblock that is being highlighted in the animation. 5. Inter-procedural .ow: Currently, each time the \nanimation crosses a method boundary, the new method is rendered and the animation continues at the appropriate \nblock in the method.  We have used INSIGHT on XYLEM and we found that INSIGHT gave us tremendous insight \ninto the working of XYLEM. Currently, INSIGHT is tuned to the requirements of XYLEM. However, we have \nalso designed a generic, con.g\u00adurableframeworkwhere INSIGHT canbeutilizedbyanypro\u00adgram that manipulates \nanother program. 4. Conclusion In this .lm we have presented a tool that helps understand the behavior \nof programs visually. We present a technique that targets programs that analyze other programs. Our tech\u00adnique \nvisualizes the manipulation of a puppet program by a manipulator program. We implemented this tool as \nan aid to understanding a tool called XYLEM, In our speci.c case it has given us tremendous insight into \nthe working model and we believe we can use this insight to improve the ef.ciency of XYLEM. Additionally, \nINSIGHT has been designed to be con.gurable, so it can be hooked up with any manipulator program. In \nthis .lm we depict the manipulator, the puppet and INSIGHT as a space probe (the manipulator) that works \non .xing errors in the space station (the puppet) and INSIGHT is represented as R2D2 , a droid that sends \nback visuals of the puppet program (the space station) and hence helps .gure out how well the manipulator \nprogram (the probe) is working. Thus we give a visual representation of the concept of visualizing a \nprogram in order to debug another related program.  References Agastya Nanda and Mangala Gowi Nanda. \nGaining insight into programs that analyze programs by visualizing the analyzed program. In Proceedings \nof the Onwards! Conference, 2009. (to appear). M. G. Nanda and S. Sinha. Accurate interprocedural null\u00addereference \nanalysis for Java. In Proceedings of the 31st Intl. Conf. on Softw. Eng., pages 133 143, May 2009. Steven \nP. Reiss. Visualizing java in action. In SoftVis 03: Pro\u00adceedings of the 2003 ACM symposium on Software \nvisualization, pages 57 ff, New York, NY, USA, 2003. ACM. ISBN 1-58113\u00ad642-0. doi: http://doi.acm.org/10.1145/774833.774842. \nSteven P. Reiss and Manos Renieris. Jove: java as it happens. In SoftVis 05: Proceedings of the 2005 \nACM symposium on Software visualization, pages 115 124, New York, NY, USA, 2005. ACM. ISBN 1-59593-073-6. \ndoi: http://doi.acm.org/10. 1145/1056018.1056034. J. Ruthruff, E. Creswick, M. Burnett, C. Cook, S. Prabhakararao, \nM. Fisher, II, and M. Main. End-user software visualizations for fault localization. In SoftVis 03: Proceedings \nof the 2003 ACM symposium on Software visualization, pages 123 132, New York, NY, USA, 2003. ACM. ISBN \n1-58113-642-0. doi: http://doi.acm.org/10.1145/774833.774851. Qin Wang, Wei Wang, Rhodes Brown, Karel \nDriesen, Bruno Du\u00adfour, Laurie Hendren, and Clark Verbrugge. Evolve: an open ex\u00adtensible software visualization \nframework. In SoftVis 03: Pro\u00adceedings of the 2003 ACM symposium on Software visualization, pages 37 \nff, New York, NY, USA, 2003. ACM. ISBN 1-58113\u00ad642-0. doi: http://doi.acm.org/10.1145/774833.774839. \n  \n\t\t\t", "proc_id": "1639950", "abstract": "<p>Visualization of a program typically entails low level views of the program execution state showing, for example, method invocations or relations amongst heap objects. In most cases, this would imply visualization of the executable program. However there is a certain genre of programs that analyze or transform other programs. These programs could be compilers, static bug detectors, test suite analyzers, model to model transformers etc. In such cases, very often, it helps to visualize what is happening to the input program rather than the analyzer program. It is for such programs that we describe a configurable, analysis framework. For ease of exposition, we call the analyzer program the \"manipulate\" program, and the input program the \"puppet\" program. Using out visualization scheme, we are able to (1) gain insight into the manipulate program; (2) collect useful information / statistics about the puppet program. We have implemented the visualizer in a tool called \"INSIGHT\". We ran INSIGHT on a static debugging tool (the manipulate program) called XYLEM. XYLEM applies static analysis to find potential null pointer exceptions in a puppet program, as for example, the Apache Ant program. We report the insights gained by running XYLEM through INSIGHT on ANT and other puppet programs. Further, to visualize the concept of a visualizing a puppet program by a manipulate program, we present the \"the puppet and the probe\".</p>", "authors": [{"name": "Samvida Nanda", "author_profile_id": "81444602238", "affiliation": "Srishti School of Art, Design and Technology, Bangalore, India", "person_id": "P1728390", "email_address": "", "orcid_id": ""}, {"name": "Soumya Ramasubramaniam", "author_profile_id": "81444608571", "affiliation": "National Law University, Jodhpur, Jodhpur, India", "person_id": "P1728391", "email_address": "", "orcid_id": ""}, {"name": "Sumana Ramasubramaniam", "author_profile_id": "81444608572", "affiliation": "Sushant School of Art and Architecture, Gurgaon, India", "person_id": "P1728392", "email_address": "", "orcid_id": ""}, {"name": "Agastya Nanda", "author_profile_id": "81444594920", "affiliation": "Jaypee Institute of Information Technology, Noida, India", "person_id": "P1728393", "email_address": "", "orcid_id": ""}, {"name": "Mangala Gowri Nanda", "author_profile_id": "81100183505", "affiliation": "IBM Research, India, New Delhi, India", "person_id": "P1728394", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1639950.1640078", "year": "2009", "article_id": "1640078", "conference": "OOPSLA", "title": "The puppet and the probe", "url": "http://dl.acm.org/citation.cfm?id=1640078"}