{"article_publication_date": "01-25-1982", "fulltext": "\n\t\t\t", "proc_id": "582153", "abstract": "Pipeline interlocks are used in a pipelined architecture to prevent the execution of a machine instruction before its operands are available. An alternative to this complex piece of hardware is to rearrange the instructions at compile-time to avoid pipeline interlocks. This problem, called code reorganization, is studied. The basic problem of reorganization of machine level instructions at compile-time is shown to be NP-complete. A heuristic algorithm is proposed and its properties and effectiveness are explored. The impact of code reorganization techniques on the rest of a compiler system are discussed.", "authors": [{"name": "John L. Hennessy", "author_profile_id": "81100207767", "affiliation": "Stanford University", "person_id": "P144244", "email_address": "", "orcid_id": ""}, {"name": "Thomas R. Gross", "author_profile_id": "81332502168", "affiliation": "Stanford University", "person_id": "PP43124485", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/582153.582166", "year": "1982", "article_id": "582166", "conference": "POPL", "title": "Code generation and reorganization in the presence of pipeline constraints", "url": "http://dl.acm.org/citation.cfm?id=582166"}