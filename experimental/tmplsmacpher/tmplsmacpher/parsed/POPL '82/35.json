{"article_publication_date": "01-25-1982", "fulltext": "\n IS THE INTERESTING pART OF PROCESS LOGIC UNINTERESTING?: A TRANSLATION FROM PL T3 PDL R. Sherman, A. \nPnueli, Department of Applied The Weizmann Institute 76100 Rehovot, Abstract With the (necessary) condition \nthat atomic programs in PL be binary, we preeent an algorithm for the translation of a PL formula X into \na PDL program T(X) such that a finite path satisfies x iff it belongs to T(X) . This reduction has two \nimmediate corollaries: 1) validity in this PL can be testedby testing validity of formulas in PDL ; 2) \nall finite-path program properties expressible in this PL are expressible in PDL. The translation, however, \nseems to be Of non\u00ad elementary time complexity. The significance of the result to the search for natural \nand powerful logics of programs is discussed. 1. Introduction The formalism of dynamic logic [Prl] has \nbeen successfully proposed as a unifying framework for the formal reasoning about programs. It generalizes, \nand at the same time simplifies, previous systems such as Hoare s axiomatic system [HoI J Dijkstra s \npredicate transformers [D], etc. It appears that as logn as we wish to study the input output relatiOns \ncomputed by a program, dynamic logic provides ue with a mathematically complete and elegant system of \nreasoning. However, it was soon pointed out that if one is interested in the continuous behavior of programs \n The research reported here was supported in part by a grant of the Israeli Academy of Science, The Basic \nResearch Foundation. Permission to copy without fee all or part of this material is granted provided \nthat the copies are not made or distributed for direct commercial advantage, the ACM copyright notiee \nand the title of the publication and itsdate appear, andnotice isgiven that copying is by permission \nof the Association for Computing Machinery. To copy otherwise, or to republish, requires afeeand/or specific \npermission. @ 1982ACM0-89791-065-6/82/001/0347 $00.75 347 D. Harel Mathematics of Science Israel and \nnot only in their in-out behavior, then dynamic logic seems inadequate. The need for reasoning about \nsuch behavior arises naturally in the study of non\u00adterminating programs such as operating systems, and \nin the investigation of concurrent systems. Conse\u00adquently, alternative logics have been proposed to formalize \nthe cOntinQus behavior of Pro9rams. One such logic, tempc~ral logic, has been used success\u00adfully in the \nanalysis of concurrent systems [BP]. The problem with some of these alternatives, temporal logic included, \nis th,eir lack of compositionality, a property which is present in such fcmmal systems as Hoare s logic, \npredicate transformers, denotational semantics, dynamic logic, etc. The principle of compositionality \ndecrees that the formalism be syntax directed in the sense that it should derive its treatment of well-structured \nprograms from its treatment of their immediate components. In contrast, the current formalism of temporal \nlogic refers to instructions and labels in a single fixed program as a fixed context and requires the \nanalysis of the program as a whole without the pos\u00adsibility of studying its eubparte. In view of this \napparent dichotomy -a composi\u00ad tional system which cannot deal with mid-execution properties, and a non-compositional \nsystem which can -there were many attempts tO extend One Or the other to yield a system, generically \ncalled process logic, enjoying the advantages of both. Pratt s original process logic [Pr21 , parikh \ns soApL [pal snd Nishimura s lmguage [N], were preliminary f forts in this direction. A recently proposed \nsystem which seems to have unified the basic concepts of both dynamic and temporal logic is the system \nof process logic (PL) presented in [HKpl-It the Pro\u00ad borrows gram constructs and modal operators [ 1 \nand <> frOm dynamic logic, snd the temporal connective f This PDL formula states that there can be \nno com\u00adand suf from temporal logic and combines them putation such that X is false before and after \ninto a single system. each of its atomic instructions. We immediately The declared purpose of this new \nsystem is to note the difference between the two modes of enable compositional reasoning about continuous \nexpressing this property. In PL we say that some\u00adbehavior of programs. AS such, one would expect it \nwhere within a , X is realized; in the equiva\u00adto be able to express properties on the propositional lent \nPDL formalization we have to explicitly state level inexpressible by either PDL or TL , the proposi\u00ad \nthat it is not true that X is not realized at mY tional versions of dynamic snd temporal logic, respec \nof the locations possible during a . tively. Indeed, the PL expression [a] SomeX, for In this paper we \nshow how to apply this basic example, states that in every execution of the prog\u00ad idea systematically \nto produce a translation ram a there must be at least one state satisfying algorithm from PL to PDL. \nHowever, no such trans x. It can be shown [H] that this property cannot lation is possible without ensuring \nthe compatibi\u00adbe expressed in PDL, and of course not in TL (which ty between models of PL and PDL. To \nthis end one has no way of explicitly mentioning programs such as must adopt the locality of atomic formulas, \ni.e. , @ ). that they are basically state formulas, true at Having demonstrated this eignificsntly greater \nstates rather than on paths. Locality was adopted expressibility, PL certainly becomes an attractive \nin [HKP] too and, indeed, by [CHMP] , the decidabi\u00adsystem for study. It is shown in [HKP] that validity \nlity of PL is lost without it. Moreover, one must in (the propositional version of) PL is decidable, \nadopt the atomicity of atomic programs as discuss\u00adby reduction to SnS , the second order theory of n \ned above, i.e. , that they consist of binary rela\u00adsuccessors [R] . This yields a non-elementary tions \nrather th~ arbitrary paths. Atomicity too decision procedure in general, and it is still unknown is necessary \nsince without it by [H] no such trans\u00adwhether an alternative elementary decision procedure lation from \nPL to PDL exists. Accordingly we con\u00adexists. It has also been shown that various small sider BPL, for \nbinary process logic. With the extensions to the system lead to undecidability above restrictions, the \nsame mathematical objects [CHMPI . So much for background. serve as models for both PDL and BPL, the \ndiffer- The investigation reported upon here was ence being only in the way satisfisbility is extend\u00ad \nprompted by the following simple observation. Let ed from atomic formulas to general ones. us reconsider \nthe PL statement [u]SomeX . As Our translation, to be specific, assigns to mentioned, it is inexpressible \nin PDL for an ab-each formula X of BPL a PDL program T(X) such stract a . But suppose we knew the internal \nstruc-that for all finite paths P in any model, p k X ture of a : for example, let a = (a; b)*; c where \nin BPL iff p is a possible computation path of a,b, c are atomic instructions. By assuming that T (X) \nin PDL , i.e. ,p CT(x) . Note that we treat thQy are at Omic, we imply that there are no ObsQrv. finite \npaths only, and indeed we consider only finite able states during the execution of any of them. paths \nin the notion of validity in BPL . It would Thus if X , a state property, ever arises during a perhaps \nbe possible to consider infinite paths if u computation of a it may arise either before or there was \na programming construct, say a which , after an atomic instruction but never during one. would generate \nin PDL infinite computations from Similarly, if X holds before and after every atomic programs. However, \nwe feel that very little atomic instruction of CL it may be considered as pragmatic power is lost clue \nto the locality, atxmdcy holding continuously throughout the execution of a . and finiteness assumptions. \nThus the property [(a;b)*;c]SomeX , stating, that m additional technical matter concerns the X must hold \nsomewhere in every execution of presence in PL of paths which do not arise as a = (a; b]*; c is equivalent \nto the PDL statement: computations of any program, in contrast to PDL where paths are implicitly present \nonly as program [( (-x) ?;a; (-X) ?; b)* ; (-X)?C; (-X) ?l false . computations. To overcome this incompatibility \nT (X) will employ a new atomic program u , under-of expression in the two logics. As already pointed \nstood to stand for the universal program which out above, we simply state [a] SomeX for the natur\u00ad . \nconnects any two states. This idea involves no al utterance: in all executions clf a , X is real loss \nof generality since, after all, the paths somewhere true . T O state the same in PDL we must one is usually \ninterested in are ones which arise have full information about the structure of a and x, and in expressing \nthe statement we must exhaust from executing programs. More over, the two all possible ways of partitioning \na and X . corollaries to our result, which we discuss next, This need for detailed information about \nthe structure make no use of this understanding regarding u . of Cx and X , violates the principles of \nencapsula-The translation of BPL formulas to PDL prog\u00adtion and information hiding, and implies that the \n rams can be utilized in the following two ways. PDL style of expressing this property is by necessity \n First, we show how validity (over finite paths) in a low level one in comparison with the PL style. \nBPL may be reduced to validity in PDL; this is done Section 2 contains the definitions of PDL and by \nshowing that X is satisfiable in BPL iff BPL, Section 3, the main one of the paper contains our <T (X) \n>true is satisfiable in PDL. technical results, and in Section 4 we discuss the As another application, \nconsider using BPL for issue of complexity. the description of program properties. One soon realizes \nthat the properties of interest are state properties referring to the initial state of the computation. \nT!IUS statements of the form: all 2. PDIJ and BPL. computations of program a eventually realize X , Notation: \n30 -the set of atomic formulas. or: there exists an G computation such that all its 6 extensions perform \nsome task etc., are to ZO -the set of atomic programs. be true of the initial state of the computation. \n S@tax and Semantics of PDL (lFLI) : These properties are uniformly expressible in BPL by formulas of \nthe form fX where f is the PL A model is a triple (S, ~ ,P) where: connective first. we will show that \nour transla- S -is a set of states tion is such that for a path P = (PO JPl r... ) t= is a satisfiability \nrelation for atomic formulas p 1= fX in BPL, iff PO b <T (fX) >true , in PDL provided that any test \nappearing in X also P: X. +25XS i s an interpretation for atomic programs describes a program property. \n*US we have a direct translation of formulas of BPL to formulas The Set of PDL formulas @ , the set of \nPDL of PDL for the frequently used formulas of the programs X and their extended interpretations E , \nform fX . P are defined by: Returning to the title of the paper, we believe that in spite of the restrictions \nimposed in BPL, 1. oo~al it retains all the important features of PL, render\u00ad true EOandVsCs, s + true \n ing it an advanced system for reasoning corposition\u00ad ally about the continous behamior of programs. \nYet, fake E CD and V s E S , s v ,fake we have succeeded in showing that properties expressible in BPL \nare in fact expressible in PDL 2. IfX, YEOthenXvYCO too . DOe S this fact there fore detract from our \n and s~ XVY iff sk Xor si= Y interest in process logic? 3. If XE@than-X60ands !=-Xiff S&#38;X Our argument \nis that rather than detract from it, the existence of such a translation should even 4. If. 66 Z, XE0then<8>X \nC@ enhance our interest in systems such as PL. me reason for this is the fact that the trans-and sl=c6>Xiff \n3t, (s, t) EO (5) lation actually emphasizes the difference in modes andtbx A. @O ~ 6 . For a. path \np and atomic formula5. .ZOcx X S @o, P l=p X iff Pol= X , PO the first state of p.e E Z.p (e) is the \nempty set; Uex, trweE3Vp, pk p true p(u) = Sxs i.e. the universal program. fa18e E 6 Vp, p FpfaZ8e 6. \nIfa,@6XthenaU6CZ If X,x C~then XvY~~ andpl=pxVYiff and p(aUf3) = p(a) U P(6) B. P#pXorpl=py 7. Ii ar~ \nCX then a;fl C2 and p(a; e) = c. IfXE~then-XC~and pb -XiffpP X = {(s, t)13t , (Srt ) E p(a), (t rt) E \nP(s)} P P D. IfXE~, 66 ~then<E3>X E~andp+p< B>li 8. Ifa~E then a* EXandp (a*) = u P(cli) i>O iff ~qCR6such \nthat pq~ X. P (p(clo) = {(S,S)ISE s}) if p = (pO.. .pk), q = (qO. ..qL) md pk = qO then pq = (pO. ..pkqqL).qL) \n 9. If XEZthen X? EZandp (X?) = {(s,s) S* X} E. If X6~thenfXE@andp EpfXiff (Po) kp x (P. -the first state \nof p ; Syntax and Semantics of BPL : (Po) the path consisting of PO alone.) A model is a triple (S, \nk, R) where: S, &#38; -as before. F. IfXrYE~thenXsufY E~andpb x Suf Y P R -the interpretation for atomic \nprograms is an iff there exists a path q such that: assignment of sets of paths of length one a. q is \na proper suffix of P (i.e. if (two states) to atomic programs. P = (Po, . . ..Pk) then q = (Pi, . . ..pk) \nfor SOIIE Note that a model for PDL, i.e., a triple (S, !=,p) i > I ) and q~pY is a priori also a model \nfor BPL. R is taken to b. for every r such that r is a proper be simply o itself. suffix of p and q is \na proper suffix of r A path in a model is a finite sequence of states, (r lying strictly between p and \nq), r kp X . with repetitions allowed. We extend ~ to a satis- G. ZOC 6,e E ~ R@= @ (the empty set), \nfiability relation over paths, denoted by ~ , P uG~R = {(s,t)ls,t E s} u and define R -the interpretation \nof BPL programs. fOr a E X. Ra = {(srt) (s, t) E p(a)} . R assigns a set of paths Ra to each BPL program \na , i.e. the set of all paths corresponding to a H. If a,6E=thenaUf3 E=andR C!.UB =Ra~R 6- I. If a,66~thena;6E~and \nPER co~?utations. Note that while PDL formulas are a;c iff 3q 6 Ra, ~r ~ R6 such that p = qr . interpreted \nover states, BPL formulas are interpret- J. If aE~thena*E~and Ra* = U Rai ed over x. j. >o We will use \nk to denote kp when there is (Rao = {(s)\\s E s}, ai+l = a;a=) no danger of confusion. K. X~6then X?~~ad \nRx?= {pip +x} The set of BPL formulas 6 , the set of BPL programs ~ and their extended interpretation \n+P,R are defined by: 350 TO prove this result we will proceed by induction 3. Results on the structure \nof BPL formulas. Thus we will present Definition a sequence of lemmas corresponding to the rules for \n1. For a E ~a BPL program and a path P , P ~ a constructing well formed BPL formulas. iffp~Ra. 2. For \na E Z a PDL program and a path P = (pO,. ..,PI) Leta,BEZ, then a and 6 (defined over ~.  p E a is defined \nby induction on the structure of a: and Zo) are equivalent, denoted by awfi, if: a. Ifa CXOthenp6aiff!t= \nland (pO, pl)E P(a). for every path p in every model over XOJOO , P E u For every pOrPl(POtpl) E u iff \npE@. b. Ifa,66Xthenp6aU6 iffp~aorpE6. c. If a,fi< .Zthen p 6 a;f3 iff ~j, O s j < !such  . Emma 8. \nthat (PO, . ../Pj) E~, (p .,. ..,pL) 66 , 3 To each atomic BPL formula and the special formulas true, \nfake there corresponds a PDL program d. If aEXthen pEci* iff 3i 21such that in the sense of the theorem. \npE ulorL= O (i.e., p= (po)) .  e. If X E X then p ~ X? iffL= O and (PO,PO) E P(X?) Proof: TO an atomis \nBPL fOrmula p E 0 there corresponds the PDL program T(P) = P?;U* . Note th&#38;t for every path P tP~u* \n. obviously, a path P = (PO) P17. ... PL) satisfies p If a is a program with no tests it may be . . ..pL) \nEP?; U* . iff PO t= P iff (p(3rconsidered both as a PDL program or a BPL program. Similarly T(t:rwe) \n= u* and T(fazse) = e . FOr such a program the different notions of p ~ a separately defined for BPL \nand PDL programs coincide. Lemma B. Denote by T ~ z the set of all test Pr09rams# If X,YE5, two BPL formulas, \nalready have i.e. programs of the form X? for XCO. we corresponding translations T(X) ,T (y) E z in the \nsenee define Zu to be the eet of all programs over the of the theorem then so does the formula XVY . \nalphabet T lJ {u} . llms, the only atomic program used in ~ is u . Note, however, that the tests u Proof: \nWe define T(XVY) = T(X) U T(Y) . T appearing in Xu may themselves contain programs Obviously Pk=p XvY \niff P~=p X r P +P x which are not in 1 . iff p 6 T(X) or PET(Y) iff ]?ET(X) ~ ~(y) . u This Lemma can \nbe interpreted as a closure property, Main theorem. namely, that the class of sets of ]?aths definable \nby FOr every BPL formula X 6 @ there exists a E u programs is closed under union. For our next step PDL \nprcgram T(X) E Zu such that P kp X iff we will need another closure of th~Ls ClaSS, namely, p &#38; T(X) \n, fOr every path P in every model. closure under complementation and intersection. It will state that \nto every Zu program a , there 351 corresponds a complementary program a such that p$?cl-pE;. The closure \nunder complementation and intersection is established in Lemmas c1-c7. For a program aEx, denote by Ta \nthe set of tests in a . Then a may be regarded as a regular expression over the alphabet (XO U Tu) . \nWe start by defining a certain normal form for PDL programs. The set of programs in Z formed by alternations \nof atomic programs and tests is denoted by Qr : Qr={ala EX,for every word w in the language defined by \nthe regular expression u, w is of the form W?aw?; . . ..w for some 001 k-l?ak-lwk? k~O~dWi~@,a,E XO}. \n3. We denote by Ma any nondeterministic automation defining a . For CIEQZ, M must be of the general form: \na M=<K1 U K2 U {d} , ~. U Ta,q0,8,F> where: qoEK1, F~K2. If qEK ~, X6 T&#38; then 6(q, X) ~K2 a ~ X. \nthen 6(q, a) = {d} If qEK2, X6Ta then d(q, X) = {d} a E 20 then d(q,a) ~K1 If XETa then 6(d, X) = {d} \n, if aEX. then d(d,a) = {d} . Let E ~ be the set of states leading to a final state: K = {q IqEKl ,~X~ \nTa such that 6(q,X) nF # ~} 1 For any qE :1 define: Ta(q) = {XIX ET 6(q, X) 17F # g}  a Note : For a \nprogram a ~ Qr, path P = (Po, .. ..pk) , p E u iff 3W a word defined by a, w=Wo? a ... a w?such that \npEw :that is, o k-1 k (Pi) E Wi? i.e. pikWi, OSiSk, and pi~pi+l) ~ P(ai) , 0 Si <k . Lemma Cl 1. Let \na,6E Qr then a 1.1 ~~ Qr 2. Let art? C Qr then there exists a program ~E Qr such that ~w ct; B  3. \nLet ctEQr then there exists a program  Proof: 1. Obvious 2. Let Ma, M be the automata defining u,6 \n B respectively: Ma= <K: U K; U {da}, 10 U Tar q:, ~a, Fa> MB= <K! UK: U {de}, X. UT q~r6b,F6> $ define: \nTaAT = iXAYIXETa, Y~TB, X # Y} ~ {Ta fl T6} 6 We define an automaton M ~ by:  ,. . .%.. My = + UK2 U{d},Zo \nUTa UT6 U{Ta A T6},q:, 6,F> where FaUF if AEa (for example, if a is of the .B F= form u; 0< +:) otherwise \n{ 6 . The transition function 6 is given by the following cases: . A) Forq6K1 , if a6 10 then $(q, a) \n= {~} &#38;.a(q, x) . if X 6 Ta-T6 then &#38;(q, X) ={e } { 2 . 6@ (qrx) or x e B-Ta ~(q x) = { {e2} \nfor ZCTaATar!56(q, x) q~K; . d(q,z) =&#38;a(q, x) q~K~-~l ,. d(qo,Y) Z=XAY,X~Ta(q), X# Y qEK1 for X ~ \nTa.fl T6,8(q, X) = 6a(q, X) U 6a(q~, X) if XETa(q) fIT6, q~ ~: d(qo,z) Z C Ta(q) qEK1 6JCI, X) q~~lor \nZ@Ta(q)A,Taand q~~l { 2 if X@ Ta(q) 11T6, q E ~; [ ~=q o . d(q, true) = [ t for zETa AT6-{TU RT6} 1 otherwise \n2 ,. ~6(q&#38;Y), z = xAy, x~ Ta(q) , q ~ ~ For qEK2. d [q,~= ,. if XCTa U{Ta ATa}then 6(q, X) =d {e2 \n} Z j? Ta(q)AT6, q 6 K; or q z ~~ { for aEXO ,. B) For q6K2 . (qra) qEK2 ~(q, a) = for X E Ta (J TB u \n{TaAT6} $(q,x) = {;} q ~ {qt,e21 [ 1 for aEZO For X~Ta U{Ta A Ta}ti ZO ;(d, x) = d . 6a(q,a) qCK~ . d(q,a) \n= 6B (qra) qCK: Let 7 be a program defining the same set of q.e 1 2 words as M . Then TC Qr and obviously \nfor every{ Y A. pathp, pE~iffp Ea* . 1c) FOr X~TaiJT6~l{Ta A T6}UX0 6(d,x) = ~ A program 7 can be defined \nsuch that the set Of Lemma C2 words accepted by M is the set of words defined Y For every PDL program \na ~ ~ there exists a by the regular expression Then, by the program y(a) C Qr :;uch that y(a) s a . 7. \nform of M ?C Qr and obviously p C ~ Y iff pEa;(3 Proof: By induct<.on on the strucure of a : 1. For a \n~ ~. we let y(a) = true?; a; true? 3. Let M be the automaton defining a CY 2. For a =X?where x~~ we let \nY(CL) =a Ma = al UK2 U {d}, Z. UTa, q0,6, \u00ad3. For a= 6U6 we let y(u) = y(~) UY(6) As before we denote \nE= {qlq~ K1,3XE Ta , 1 byLemmaCl y(a) ~ Qrandy(a) =6 U6 =a 6(q, X) f) F# ~} 4. For a = f3;61et Y(6) ,Y \n(8) be the prOgrams IRfine M~ by: ,.7. corresponding to (3,6 by the induction hypothesis. Let M =<Kl \nU K2 U {d}, ZO U Ta 11 {Ta A Ta}LJ {true}, Y .. ~ be the program defined by Lemma Cl for Y(6); Y(6), \nCio # 6,F> where . 1 = K1 U {el} , A K2 = K2 U {~, ez} men we let y(a) = ~: . By Lemma Cl. Y{a) ~ Qr \nand A F= FU{} % y(a) =fY(B)iY(~) $=6; ~ = a FOrq~K ,. 1 : if a E ZO then . 6(q, a) = d 5. For a = @* \n: Let Y(6) be the program for 13 . ~(q, x) q6K1 by the induction hypothesis: Y(6) E Qr and Y(6) N 6. \nfor X Q Ta, &#38;(q, X) = { 2 q=e 1 Let ~be the program corresponding to (Y(6))* by 353 Lemma Cl, th~we \nlet Y(a) = ~ . Then by Lemma Cl Y(a) E Qr and y(a) S+ (y(@) )*NB* = a . n Definition P = {alcl E z end \nfor every word w, wE a ru ?Uw ? k>o, Wi e0} w = 13?uwl?  Twk-l k A program a in Eu is a regular exprssion \nover the alphabet ({u} U Ta) . For u in Pr let Ma be the automaton defining a similar to the automata \ndefining programs in Qr , where the only atomic program allowed is u . I.emma C3 1. Ietarf3EPrthenaU6 \nCPr 2. kt a,6 ~ Pr then there exists a program YE Pr  such that yNu;6 . 3. Let a C Pr them there \nexists a program 7M Pr such that Y~ u* . Proof : Similar to the proof of Lemma Cl. Lemma C4 For every \nprogram acx there exists a u program y(u) i Pr such that y(a) .-a. Proof: Similar to the proof of Lemma \nC2. we would like to define a path deterministic automaton (and later the complement automaton) in the \nsense that a path is accepted by at mOst a single sequence of states of the automaton. consider, for \nexample, the automaton given by: / s -2--s While this automaton is deterministic in the usual sense, \nit is not path deterministic, because, for example, the path P = (pO,PI) where PO ~ XAy , pl k ZAW is \naccepted by both sequences (s., 1,s2, ~ ) , (s., 4, 5, 6) of the automaton. !rhus, while the labels \non the edges originating in are disjoint, there exist paths satisfying XAY o which are compatible with \nboth. As a first step in the definition of a path deterministic automaton, we define an extended alphabet \nof tests TE such that for every state c1 s in a model with a-paths there is one and only one formula \nX~TE such that s~x. a Definition Given T = {X1, . ..rXn} an atomof T a c1 n is a conjunction is either \n~Yi where each Yi i= 1 x. or a negation of xi . 1 TE -The extended alphabet for u is the set a of all \natoms of Ta . Definition Let aCPr Ma = CKl UK2 U {d} , {u} UT , qO,~,F> the a automation defining a , \nthen M: -the (nondeterministic) extended automaton for a , is defined by: AA M: =~lUK2U{d}, {u}U T: ,qo,6E,F> \n,, ,. where: =K1 U{el} , K2=K2 U{e2} ,and 1 TE is the extended alphabet for a , such that: 6E(q,u) = \nd for qCK,, . {Yi}~=l 17 Ta ~ 2 &#38;E(q, : Yi)= i=l U {6(q, Yj)\\Yj = Xj E Ta} { 0\\s4_s s otherwise 56 \nw? u 354 8E(el, i Yi) = e2 i=l ,. By the fact that WE is accepted by ~ it follows Forq~K2, that for every \ni there exists a j = j. such that 1 6E (q, AYi)=d ji n n i= 1 Yi~Ta, otherwise 8E(q, A Yj) = e2 . Since \n.-j=l (Pi) e w:? then (Pi) E y;i, O<iSk, and the j. word w = Yo ?U ... uYk ? is accepted by Ma . ,Iq,u)={ \n(:: ::? k, 2 Thuswshave pea. C For X~ T: U {u}, 8E(d, X) =d Definition Lemma C5 Let a C Pr and let M: \nbe the extended Let aEPr. Let aE be a program defining automaton for a . the same set of words over ({u} \nU Ta) as M: . M: = CKl U K2 U {d},{u} U TE,q(@E,F> . Then : The deterministic automaton for cti, M: , \nis defined 1. aE EPr E from the nondetermi.nistic one in the usual way by:2. U%C4 M: = e: U K; U {d},{u} \nU T~,{qo},ISD,FD> prOOf: D %, ~~ . 2K2 where: =2 1 1. Obvious from the form of M: D F = {~1~~ K; and \n~OF#@ . 2. a. Let P be a path, p = (Po, .. ..pk). pEcl  For then 3wGa ,w=WO?u . . ..uWk? , and and \nif XE T: 6D(q, X) = U {&#38;E(q, X)/q E ~} (pi) ~Wi?, O<iSk For For every X ~ Ta either (pi) E X? or \n(Pi) E (-x)? . It follows that for every i , =d l)~i $k ther-eexist Y~ . . . Y: E Ta UWa such 6D(c3,X). \nand for every XCTE u u} = d o that Y; =W and i Lemma C6 D l)~i~k Let a ~ Pr. Consider s., a program defining(pi) \nE: Y: j=l the words accepted by M: , the deterministic By the definition of M: the word w given by automaton \nfor a . Then: n, WE = (: Y;)?U ... U( A Y;)? 1. C4DE Pr j=l j=l 2. For every word w over ({u} UT:} , \nWE aE is accepted by ~ and (pi) 6 (~Y!)~ for every j=~ 1 D iff Wect. OSi~k; that is, p E CJE . b. Let \np = (pO,. ... pk) PeaE, Pz!oof : E=W;?u ---@JE? then: ~WE ~ CLE, WE ,P~w, 1. Obvious by the form of M: \n. k DE W;ET~; that is, 2. IfwCa them obvious w C a . Suppose w E aE , w = WO?u, . . ..uWk? . By the \nWe know that for every state p. 1 and every formula form of M: X 6 Ta, either (pi) 6 X? or (Pi) E (-X)? \nbut not {6E(q, u)} ~Kl , v q~ K2 both . It follows that ~j i = ~j i 1< j< n , O < i s k . But then \nw = ~ is accepted by both {6E(qrX)}~K2 , Vq~K1 , VXE T: , from which it follows that w is accepted by \nM: M; and ~a , in contradiction with the definition D and we get Wca u We may thus summarize this sequence \nof C-Lemmas Lemma C7 by: Let a6Pr be a program over (XO,OO) with Lemma C tests T Then there exists a \nprogram a ~ Pr If a BPL formula X is translatable into a PDL a over the aphabet ({u} U T:) such that: \nFor every program in Xu in the sense of the Theorem, then so path p in a model over. (XO,OO) : p E ~ \niff p $? a. is-X . Proof: Proof : Let M: be the deterministic automaton for a Let T(x)J be the PDL program \ntranslation of X . M; =<Kl UK2 U{d}, {u} UT~,qO,~D,F> Then we let T(-x) = ? (x) as defined above. Define \nEa by? Ma= UCI U K2 U {d},{u}U T:,q0,6D,K2-F> Even though taking care of union and complementation automatically \nensures closure under intersection , snd let ~ be a program defined by ~a . we do need this property \nin a more general setting. Obviously Z e Pr . We therefore consider next closure under intersection. \nConsider a path P = (PO,. .-~Pk) such that p Q a. Iet TiE T: (O <i sk) be the Ta atom which Lemma D1 \nis true in p. . (Obviously there exists one and 1 A. LetaC1, i3EPr. Then there exists a programonly one \nelement of TE which is true in Pi .) a aflf3EQr such that for every path p is not accepted by OUTIU . \n. uTk pEaClf3iffpEaandp E6. Then the word M: (p 9 ~). Neither does it lead M: to the error B. Leta,BEPr. \nThen there exists a program state d . Hence it leads ME to a state in a D 0n6Epr such that for every \npath p K2-F and is acceptable by ~. There fore pE cl. pEanf3iffpEaand PEf3 D Suppose pE~ and pEa then \np<a . Proof: I&#38;t p = (Po,. ..fPk) A. Without loss of generality we can assume a E Qr by Lemma c2. \nLet M , M be the automata a 5 defining a,f3 respectively. The automaton Mans is defined by: Proof: ,. \n= <il U i2 U {d}, ZO U {Ta A T8}, q0,6, F> Let T(X), T(Y) EXU be the PDL translations tin f3 where: of \nX,Y respectively. By Lemma C4, they are ,. 6 . 8 representable as Pr programs. Hence =Kax K =K~x K 111 \n2 2 .. T(X) fl T(Y) E Pr exists and yields F=&#38;XF@ q. = (q:rcl:) T(XAY) = T(x) n T(Y) . Lemma E for \nZ ~ {Ta A TB}, 6((qa, qB), Z) = 6 If a BPL formula X is translatable into &#38;%a.x) x 6 (qB, Y) Z = \nXAY, x#Y 1 J a PDL program in :Z in the s~nse of the u Cfha,z) X6%6,2) Z~TanT t3 theorem, then so i:s \nf(X) . A for aEZO f 6((qa, q@), a) =d . . Proof:~t (qa, q6) EK2 . . For Z ~ {Ta A TB} , 6((qa, qB), Z) \n= d Let T(X) be the program cc)rresponding to x, then let T(fX) = (T(X) R t13.E?);U* Let p= (po,. ..,pt) \nbe a path p b fx= (PO) + X =S (PO) ~ T(X) . Then certainly Let a () 6 be a program defined by MmB, then \n (PO) E true? * (po) E T(x) n true? +P~(T(X)R true? );u* ct17@~Qr. Let p = (PO, . . ..Pk) be a path. \nFor the other direction, suppose p 6 (t(X) fI true?); u* Then: p C all~-there exists a word w in then \n(pO) E T(X) CJ true? (Po) ET(X) +Po#X+ the language defined by aflf? such that pbfx ~=wo?a . . . ~_lwk? \n, where for each o i=o ,.. .,k (pi) E Wi?, (pi, pi+l) < ai and Definition Wi~TaAT6; that is, 3Xi ~Ta \n,Yi ~T6 such Ba , the partition set for a program a Pr , that, Wi = Xi A Yi -W = xo?aO. ..ak_l\\? a is \ndefined as a subset of Z x X u by induction is accepted by Ma , Wa = YO?U ..-uYk? is u on a: accepted \nby M andp~wa, p~w6spEaand 6 1. B ={(true?,u) , (u, true?) } pE6. 2. B x? = {(true ?, X?) , (x?, true \n?) } B. The proof for a,6 E Pr is similar to the proof 3. B6UB B13uy Yof A except that the alphabet for \nis f-mB 4. = {(@~62;Y) I(61,62) EB6}  6;Y {u} d {Ta A TB} and, consequently, we replace X o u {(!3; \nY1,1Y2)I(Y1JY2) ~ By} by {u} in the proof. a 5. BP* = {(ture?,ture?)} U {(6*81,626*)1 (61,62)EB6} Lemma \nD The intuitive meaning is that B c:ontains all pairs If PL formulas, X and Y are translattile of regular \nexpressinns which when concatenated intO PDL program in X in the sense of the theorem, yield a . u then \nso is XAY . Vo(u#B) = (U; B) u (u; IJ ( (J wI) c; J h(B) Pr then: for every path p and a such that P \n= plP2 , p~a iff ((u; f3) A ( A a2)) ) . t(B) 1 such that pl E al and P2 E a2 . Clearly, UO(U,6) C 1 \nand by C4 there exists a u program ~(a,~) E Pr such that PO( U,6) ~ !-I(@, @) Proof: Tmmediate. o Let \np be a path, P= (Per...,Pk) . Then P ~ lJo(a,E3) iff p E uO(arf3) iff (pi,...rpk) E ~ Lemma F2 or there \nexists some BCB such that a Let a ~ Pr , then there exists a program ac E Pr (continuously a ) such \nthat: pEcYc (P1r. ..rPk) E u (( u ul)c; ((u;~) A ( A a2))) B=B h(B) &#38;(B) iff for every suffix (not \nnecessarily proper) p Ofp, p Ea. iff (PI,... ,pk) C 6 or 3BCB a ~j , 1 < j <k such that (Pi, . . ..p. \n) E ( u Ul)c , 1 h (B) Proof: (Pj,. ... Pk) ~ (U;6) , and (pj, . . ..pk) ~ U2 ,Ya2 ~ t(B) Let ac = ((u; \ntrue? ) ;~) . Then by Lemmas (by Lemma Dl, Part B) iff (Pi,...,pk) c @ or C7, C3 a= E Pr . Let p be any \npath: 3B~BQJqj,l<j~k such that (Pj+l,. . .JPk)cB , p E ac iff p @ (u;true?)*;l iff for every suffix and \nb fl, l<i<j , (P, k . . ..p. ,)EUU h(B) 1 and P of P , P ~ ~ iff for every suffix p of (Pj, ---, Pk) \nE a2 ,VCX2 E t(B) iff (Pi,...,pk) C6 or p,p E u . 0 3BC Bar 3j, l<j$k, such that Lemma F3 Let ~,~ E \nPr then there exists a program such that (Pi,...,pk) E a1;u2 = a iff qq proper u(G, L3) C Pr (the merge \nof a end 6) such that: suffix of p such that q E @ and Vr, r for every path p : PE P(~,@) iff there exists \nproper suffix of p , q proper suffix of r , q , a proper SufflX Of p Such that q~~,and r~a. for every \nr , such that r is a proper suffix of P and q is a proper suffix Of r, rcc 1. Lemma F: If BPL f0131UJlaS \nX and Y are translatable into Proof: PDL programs, in ~u in the sense of the theorem tit B be a nonempty \nsubset of the partition then so is X sufY . set B ~ denote: h(B) = {a113Q2 ,(al, a2) 6 B} Proof: t(B) \n= {a21~al, (ul, a2) C B} Let T(XSUfY) = U(T(X),LI(Y)) of Lemma F3. C Then let Proof of the Main Theorem: \nExamples: By induction on the structure of X : Let X be an atomic formula, and a an atomic By Lemmas \nA-F all we need to prove is the case program. Ihe following are simplified forms of x=<@>Y. We prove \nfirst that for every BPL T(Y) for some sample formulas Y . programs 6 there exists a PDL program Y6 E \nQr 1. -c(<a>X) = X?; U*; (<a>true)? such that Vr , rC R iff rEy 6 2. T([a*l all X) = X?; (u; X?)*; [ \na*; (-K)?;a*~false)? * Define YB by induction on 6 as follows: 3. T(<a*>some X) = u ;x?; u* u u*; (<a*>X)? \nIf 6~ZOtheny@=6 Corollary 1: For every BPL formula X there $ If 6 = Z? then by the main induction and \nLemma C4 exists a PDL formula Y(x) such that X is valid, there e xsts T(Z) ~ Pr such that i.e., true \nof all finite paths in all models, iffrET(Z)iffr+p Z. Thus = T(z) Yz? Y(x) is valid, i.e., true of all \nstates in all models. Proof: We will show that Z ~ BPL is satisfiable To continue the proof, note that \niff <T(Z)>true is !satisfiable in PDL. Accordingly, ppxiff 3qE6suchthat pq!=Y, Y(x) is taken to be [T(ti)]falSe. \nIndeed, assume iff (induction hypothesis and construction P kpZ in some mode:l M . Let M be the extension \nOfy) 0 ~q E Y6 such that pq ~ T(Y) , of M in which u is interpreted as the universal iff 3q E Y@ , 3(a1, \na2) 6 BT (Y) such that program connecting any two states. By the main theorem PEal, qea2 and qO = last \nstate p~ T:z) in M , and hence P. ~ <T(Z) >true in M . of p, Conversely, if s k,:T(Z)>true in some \nmdel M then iff 3(a1, aj) EB = last T (Y) state such of that p and p E al , there is some path p in M \n, with Po = S , such qo that p~T(z). BY the main theorem p bp Z in M . q. k <wB n a2>true (the existence \nof Y~ n C12 is guaranteed by Lemma Dl, o part A), Definition iff p ~ T (X) , where T (X) E Zu is defined \nA program model. is a model in which any two LJ al ;(<y@ n a2>true)? as (a1,u2)6BT(y) states are connected \nby come atomic program. By Lemma C4 there exists T(X) 6 Pr with Corollary 2. T(X) W T (X) and the proof \nis complete. For every BPL formula X there exists a PDL formula Z(X) such that for every state s in any \nprogram model M: M., (s) &#38;p fx iff M,s k Z(X) . PKOOf : REFERENCES Et s be a state in a program model \nM . By [BP] M. Ben Ari and A. Pnueli: Temporal Logic Proofs of Concurrent Programs , TR 80-44 Tel Aviv \nUniversity (1981) the main theorem (s) bp fX in M iff (s) ~ T(fX) M by interpreting u as the [CHMP] A. \nChandra, J. Halpern, A. Meyer, R. Parikh:in the model extending Equations between Regular Terms and an \nLet air. ..ran be all the Application to Process Logic STCC 81, 384-390. universal program. atomic programs \nin X . Define T (fX) to be the [D] E.W. Dijkstra A Discipline of Programming , Prentice-Hall 1976. proqram \nT(fX) where every appearance of the universal n [FL ] M.J. Fischer and R.E. Ladner Propositional is replaced \nby U ai , then by the Dynamic Logic of Regular Programs , J. COmput. i= 1 program u Syst> 18:2. in the \ndefinition of a program model p E T(fX) [H] D. Harel, TWO results on Process Logic , Info. extsnded model \niff p E ~ (fx) in M for anY Proc. Letters, 8:4 (1979), 195-198. path p . Since (S) is of length zero, \nit follows [HKP] D. Harel, D. Kozen and R. Parikh: Process Logic: expressiveness, decidability, complete\u00ad~at \nM,(s) ~ fx iff M,s 1= <T (fx)>true. ness , Proc. 21st FOCS, (1981). P 4. Complexity [Ho] C.A.R. Hoare: \nAu Axiomatic basis for computer programming , CACM, 12 (1969), 576-580. The operator chop was defined \nin [HKPI by [N] H. Nishimura: Descriptively Complete Process p 1= x chop Y iff ~q, r such that P = qr \nand Logic , Acts Informatica, 14, 359-369 (1980). ql=x, rl=Y. A formula containing chop can be [Pa ] \nR. Parikh: A Decidability result for second order process logic , Proc. 19th FOCS easily translated to \na PDL program by (1978), 177-183. T(X chop Y)=TCX);T(Y). Thus, in particular our [Prl] V.R. Pratt: Semantical \nconsiderations of Floyd Hoare Iogic , Proc. 17th FOCS, (1976) result gives a decision prOcedure for \nvaliditY n 109-121. BPL + chop + tests. A simple analysis of the [Pr2 ] V.R. Pratt: Process Logic Proc. \n6th POPL, (1979), 93-100, translation algorithm presented herein shows [N M.O. Rabin: lDecidability of \nsecond order It is unknown Yet theories and automata on infinite trees Trans. AMS 141 (1969), 1-35. \na nonelementary complexity. if validity in BPL + chop is elementary. BY If BPL + chop[CHMP] PL + chop \nis nonelementary. too, thencan be proved to be nonelementaw any translation algorithm must indeed be \nof non\u00ad elementary time complexity.  \n\t\t\t", "proc_id": "582153", "abstract": "With the (necessary) condition that atomic programs in PL be binary, we present an algorithm for the translation of a PL formula X into a PDL program &#964; (X) such that a finite path satisfies X iff it belongs to &#964; (X). This reduction has two immediate corollaries: 1) validity in this PL can be tested by testing validity of formulas in PDL; 2) all finite-path program properties expressible in this PL are expressible in PDL.The translation, however, seems to be of non-elementary time complexity. The significance of the result to the search for natural and powerful logics of programs is discussed.", "authors": [{"name": "R. Sherman", "author_profile_id": "81100372533", "affiliation": "The Weizmann Institute of Science, Israel", "person_id": "PP43133553", "email_address": "", "orcid_id": ""}, {"name": "A. Pnueli", "author_profile_id": "81100648459", "affiliation": "The Weizmann Institute of Science, Israel", "person_id": "PP43130029", "email_address": "", "orcid_id": ""}, {"name": "D. Harel", "author_profile_id": "81100197485", "affiliation": "The Weizmann Institute of Science, Israel", "person_id": "PP43139441", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/582153.582189", "year": "1982", "article_id": "582189", "conference": "POPL", "title": "Is the interesting part of process logic uninteresting?: a translation from PL to PDL", "url": "http://dl.acm.org/citation.cfm?id=582189"}