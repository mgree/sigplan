{"article_publication_date": "01-25-1982", "fulltext": "\n\t\t\t", "proc_id": "582153", "abstract": "Verifying concurrent systems can be difficult because of the complex interactions possible between system components. In this paper, we propose a technique to simplify the task: modular composition of sequential proofs. We model a parallel program as a set of modules that interact by procedure calls. The properties of each module are proved using a sequential-program verification technique. If the modules satisfy a set of constraints presented in this paper, we may compose the modules into a system and the properties of the modules into properties of the system. The constraints ensure that the specifications are <i>robust</i> for each module where they are defined or used, in the sense that they are unaffected by current actions of other modules. A specification can be guaranteed robust for module <i>m</i> by restricting it to local variables of <i>m,</i> or by using monotonic predicates, which once true remain true forever. Our technique can be used to prove safety and liveness properties of parallel programs---the liveness properties are specified using temporal logic.", "authors": [{"name": "Brent Hailpern", "author_profile_id": "81100428339", "affiliation": "IBM T. J. Watson Research Center, Yorktown Heights, New York", "person_id": "PP39042360", "email_address": "", "orcid_id": ""}, {"name": "Susan Owicki", "author_profile_id": "81100374618", "affiliation": "Stanford University, Stanford, California", "person_id": "PP39039997", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/582153.582187", "year": "1982", "article_id": "582187", "conference": "POPL", "title": "Modular verification of concurrent programs", "url": "http://dl.acm.org/citation.cfm?id=582187"}