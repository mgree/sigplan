{"article_publication_date": "10-01-1987", "fulltext": "\n\t\t\t", "proc_id": "41625", "abstract": "<p>An extended record facility is described that supports multi-module records by providing:<list><item><p>incremental and distributed record type definition, allowing field names of a record to be declared in different modules with different subscopes relative to the root record declaration.</p></item><item><p>field-level declaration of access to records by modules and procedures.</p></item><item><p>specification of record representation in terms of the underlying computer memory.</p></item></list></p><p>We also describe the uses of records that motivate these extensions as well as the compiler modifications required to implement this extended record facility.</p><p>From this work, we conclude that the extended record support can be added as a simple, natural extension to existing programming language designs and its implementation entails only modest additions to the compiler and linker with no significant compilation time cost.</p>", "authors": [{"name": "D. R. Cheriton", "author_profile_id": "81100525094", "affiliation": "Stanford University", "person_id": "PP39070288", "email_address": "", "orcid_id": ""}, {"name": "M. E. Wolf", "author_profile_id": "81100334934", "affiliation": "Stanford University", "person_id": "PP31101858", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/41625.41652", "year": "1987", "article_id": "41652", "conference": "POPL", "title": "Extensions for multi-module records in conventional programming languages", "url": "http://dl.acm.org/citation.cfm?id=41652"}