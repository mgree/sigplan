{"article_publication_date": "10-01-1987", "fulltext": "\n\t\t\t", "proc_id": "41625", "abstract": "<p>Imperative assignments are abstractions of recurring programming patterns in purely functional programming languages. When added to higher-order functional languages, they provide a higher-level of modularity and security but invalidate the simple substitution semantics. We show that, given an operational interpretation of a denotational semantics for such a language, it is possible to design a two-level extension of the &#955;<subscrpt><italic>u</italic></subscrpt>-calculus. This calculus provides a location-free rewriting semantics of the language and offers new possibilities for reasoning with assignments. The upper level of the calculus factors out all the steps in a reduction sequence which must be in a linear order; the lower level allows a partial ordering of reduction steps.</p>", "authors": [{"name": "Mattias Felleisen", "author_profile_id": "81100323458", "affiliation": "Computer Science Department, Indiana University, Lindley Hall 101, Bloomington, IN, USA", "person_id": "PP39071699", "email_address": "", "orcid_id": ""}, {"name": "D. P. Friedman", "author_profile_id": "81100636522", "affiliation": "Computer Science Department, Indiana University, Lindley Hall 101, Bloomington, IN, USA", "person_id": "PP39072021", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/41625.41654", "year": "1987", "article_id": "41654", "conference": "POPL", "title": "A calculus for assignments in higher-order languages", "url": "http://dl.acm.org/citation.cfm?id=41654"}