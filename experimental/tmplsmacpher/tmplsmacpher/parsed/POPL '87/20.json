{"article_publication_date": "10-01-1987", "fulltext": "\n\t\t\t", "proc_id": "41625", "abstract": "<p>In programming languages of universal power, the computational integers must be distinguished from the classical integers because of the &#8220;divergent&#8221; integer. Even the equational theory corresponding to evaluation of integer expressions is distinct from the theory of classical integers, and classical reasoning about computational integers yields inconsistencies. We show that there exist &#8220;programming languages&#8221;, actually extensions of the polymorphic lambda calculus, that have tremendous computing power and yet whose computational integers, or any other algebraically specified abstract data type, <italic>coincide</italic> with their classical counterpart. In particular, the equational theory of the programming language is a <italic>conservative extension</italic> of the theory of the underlying base types as given by algebraic data type specifications.</p>", "authors": [{"name": "V. Breazu-Tannen", "author_profile_id": "81100369361", "affiliation": "MIT Laboratory for Computer Science, Cambridge, MA, USA", "person_id": "PP39069733", "email_address": "", "orcid_id": ""}, {"name": "A. R. Meyer", "author_profile_id": "81100572937", "affiliation": "MIT Laboratory for Computer Science, Cambridge, MA, USA", "person_id": "PP40036080", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/41625.41646", "year": "1987", "article_id": "41646", "conference": "POPL", "title": "Computable values can be classical", "url": "http://dl.acm.org/citation.cfm?id=41646"}