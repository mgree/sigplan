{"article_publication_date": "01-07-2008", "fulltext": "\n Relevance Heuristics for Program Analysis K. L. McMillan Cadence Research Labs mcmillan@cadence.com \nAbstract Relevance heuristics allow us to tailor a program analysis to a par\u00adticular property to be veri.ed. \nThis in turn makes it possible to improve the precision of the analysis where needed, while main\u00adtaining \nscalability.InthistalkIwill discussthe principlesby which SAT solvers and other decision procedures decide \nwhat informa\u00adtion is relevant to a given proof. Then we will see how these ideas can be exploited in \nprogram veri.cation using the method of Craig interpolation.The resultisan analysisthatis.nelytunedtoprove \nagiven propertyofa program.Attheendofthetalk,Iwillcover some recent research in this area, including \nthe use of interpolants for verifying heap-manipulating programs. Categories and Subject Descriptors \nF.3.1[Specifying and Verify\u00ading and Reasoning about Programs]: Mechanical veri.cation General Terms Languages, \nTheory,Veri.cation Keywords abstract interpretation, model checking, Craig interpo\u00adlation Summary Static \nanalysis of programs using abstract interpretation methods hasprovedaneffective techniquefor establishingkeypropertiesof \nprograms for compiler optimization or veri.cation purposes. There is, however,an inherent tension in \nthese methods between precision and cost of the analysis. An abstract domain that maintains suf.\u00adcient \ninformation aboutthe program statetoverifyagiven property may be too costly to allow scaling to programs \nof even moderate size. Automated abstraction re.nement methods address this prob\u00adlembytailoringthe abstractiontothe \nproperty.Thisisusuallydone in an iterative manner, by analyzing abstract counterexamples, or failures \nof the abstraction to prove the given property for a partic\u00adular programexecution trace. After each suchfailure, \ninformation isaddedtothe abstract domainthatissuf.cienttopreventthefail\u00adure in subsequent analysis. This \napproach is known as CEGAR, or counterexample-guided abstraction re.nement. Such methods haveshown signi.cant \npromise in analyzing low\u00adlevel software, such as operating system device drivers, and other control-oriented \ncodes.Forexample, the SLAM toolkit from Mi\u00adcrosoft research has proved effective in .nding control errors \n(such as illegal use ofkernel API functions) in real-world device driver Copyright is held by the author/owner(s). \nPOPL 08, January 7 12, 2008, San Francisco, California, USA. ACM 978-1-59593-689-9/08/0001. codes.SLAMisbasedon \npredicate abstraction,aparameterizedab\u00adstract interpretation that effectively computes the strongest \ninduc\u00adtiveinvariantofa programthatcanbeexpressedasaBoolean com\u00adbination of a given set of atomic predicates. \nChoosing the predi\u00adcatesbycounterexample-guided re.nementgives SLAM the ability to focus the abstraction \non information that is relevant to the proof (orfalsi.cation)ofagiven property.This abilityallowsSLAMand \nsimilar tools to scale to real codes of moderate size, albeit only in the case when the property is fairly \nshallow, in the sense that it requires only a small amount of information about the program s state to \nprove it. This talk will focus on the key question in all such methods: how do we know what information \nabout the program is relevant to proving a given property? Though this might seem like an ill\u00adde.ned \nquestion,infact there has beenextensive research into this question in the area of Boolean satis.ability \n(SAT)solvers. This has resulted in algorithms for SATthat are quite effective in focusing proofs on relevantfacts \nand ignoringextraneousfacts. This ability has been exploited in other areas, such as .nite-state veri.cation \nand ground decision procedures (using an approach known as SMT, or SATmodulo theories). The relevance \nheuristics in SATsolvers are based on a simple idea: that facts useful in proving special cases are likely \nto be useful in general, if we can .gure out how to generalize them appropriately. This same idea is \nimplicit in CEGAR. That is, in proving a property of a speci.c program execution, we hope to discover \npredicates that are useful for proving the property for all executions. For program analysis, a useful \nspecial case is typically some restricted execution of the program, which might be obtained, for example, \nby unwinding the program loops a .nite number of times. The .rst part of the talk will cover relevance \nheuristics based on the method of Craig interpolation. In effect, this method allows us to construct \na Floyd/Hoare proof for a loop-free program fragment based on a proof generated by an off-the-shelf decision \nprocedure or theorem prover. This in turn allows us to exploit the prover s built-in relevance heuristics \nto re.ne our abstract domains. We will also observe that relevance heuristics give us a way to prove \nproperties using abstract domains of in.nite height, without the risk of over-widening. The secondpartofthetalkwillfocuson \nrecentdevelopmentsin relevance heuristics for heap-manipulating programs.We will see howtheCraig interpolation \napproachcanbeextendedto handlethe richer logical framework needed to express properties of heaps. In \nparticular, we must be able to handle quanti.ers (to reason about heaps of unbounded size) and reachability \nof linked structures (to express properties such as acyclicity). The talk will outline one po\u00adtential \nsolution to these problems, and show how interpolation in .rst-order logic with transitive closure might \nbe used for abstrac\u00adtion re.nementinverifying heap-manipulating programs.The abil\u00adity to focus such abstraction \nonfacts relevant toagiven property may in turn allow the methods to scale up to programs of practical \nsize. About the speaker Ken McMillan is currently a research scientist at Cadence Berke\u00adleyLabs in Berkeley, \nCalifornia. He works in formal veri.cation, primarily in model checking and compositional methods. He \nholds a BS in electrical engineering from the University of Illinois at Ur\u00adbana (1984), an MS in electrical \nengineering from Stanford (1986) and a Ph.D. in computer science from Carnegie Mellon (1992). He is the \nauthor of the SMV symbolic model checker, and received the 1992ACM doctoral dissertation award for his \nthesis on sym\u00adbolic model checking.For hisworkin this area,he also received an SRC technical excellence \naward (1995), the ACM Paris Kan\u00adnelakis award (1998), and the Alan Newell award from Carnegie Mellon \n(1998). His current research is focused on using Craig in\u00adterpolation methods for software veri.cation. \n \n\t\t\t", "proc_id": "1328438", "abstract": "<p>Relevance heuristics allow us to tailor a program analysis to a particular property to be verified. This in turn makes it possible to improve the precision of the analysis where needed, while maintaining scalability. In this talk I will discuss the principles by which SAT solvers and other decision procedures decide what information is relevant to a given proof. Then we will see how these ideas can be exploited in program verification using the method of Craig interpolation. The result is an analysis that is finely tuned to prove a given property of a program. At the end of the talk, I will cover some recent research in this area, including the use of interpolants for verifying heap-manipulating programs.</p>", "authors": [{"name": "K. L. McMillan", "author_profile_id": "81100137792", "affiliation": "Cadence Research Labs, Berkeley, CA", "person_id": "PP14224475", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1328438.1328440", "year": "2008", "article_id": "1328440", "conference": "POPL", "title": "Relevance heuristics for program analysis", "url": "http://dl.acm.org/citation.cfm?id=1328440"}