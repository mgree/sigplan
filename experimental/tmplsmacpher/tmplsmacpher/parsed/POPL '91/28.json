{"article_publication_date": "01-03-1991", "fulltext": "\n A Logical View of Composition and Refinement Martfn Abadi Gordon D. Plotkint Abstract We define two \nlogics of safety specifications for reac\u00adtive systems. The Iogics provide a setting for the stud y of \ncomposition and refinement rules, and a framework for the use of the modular specification methods that \nthese rules underpin. The two logics arise naturally from extant specification approaches; one of the \nlogics is intuitionistic, while the other one is linear. 1 Introduction Modular, hierarchical methods \nfor specifying reactive systems [HP85] include rules for composing and re\u00adfining specifications (e.g., \n[dBdRR90]). The form of the rules suggests a possible specification logic. In it, the propositions would \nbe system specifications; the notations for combining specifications would be\u00adcome logical connective; \nand the rules for compo\u00adsition and refinement would be formulated as sound inference rules. The logic \nwould thereby provide a setting for the study of composition and refinement rules. It should also provide \na framework for develop\u00ading specifications and for verifying them using these rules. In this paper, we \ndefine and develop such a logic. In fact two logics arise naturally. One of the logics is an intuitionistic \nlogic, while the other one is lin\u00adear [Gir87]. In the intuitionistic logic, a specification is a set \nof allowed behaviors, as in [Lam83a, BKP84]. *Digital Equipment Corporation, Systems Research Center, \n130 Lytton Avenue, Palo Alto, California 94301, USA, tDePt. of GomPuter Science, University of Edinburgh, \nKing s Buildings, Edinburgh EH9 3JZ, UK. This work was completed while at Digital Equipment Corporation. \n Permission to copy without fee all or part of this material is granted provided that the copies are \nnot made or distributed for direct commercial advantage, the ACM copyright notice and the title of the \npublication and its date appear, and notice is given that copying is by permission of the Association \nfor Computing Machinery. To copy other\u00adwise, or to republish, requires a fee and/or specific permission. \n@ 1990 ACM 089791-419-8/90/0012/0323 $1.50 In the linear logic, a specification is a set of al\u00adlowed \nprocesses, much as in the sense of Abraham\u00adson [Abr79]. Composition rules and refinement rules typically \napply to safety properties, and also, sometimes with significant complication, to certain liveness proper\u00adties. \nHere we treat only safety properties. With this restriction, the logics provide a new understand\u00ading \nof some current specification methods, and sug\u00adgest extensions. They are intended as a basis for Lamport \ns transition-axiom method for reactive sys\u00adtems [Lam89]. A reactive system can be expected to operate \ncor\u00adrectly only when its environment operates correctly. For example, a concurrent program module can \nbe expected to exhibit desirable behavior only when its inputs are of the proper types. The environment \ncan\u00adnot be required to operate correctly, but the system s obligations are void when the environment \noperates inco~rectly. An assumption-guarantee specification states that a reactive system satisfies a \nspecification itf if it operates in an environment that satisfies an assumption E; this specification \nis sometimes written EaM. A Composition Principle gives a way of combining assumption-guarantee specifications \nwhile discharg\u00ading their assumptions [MC81, Pnu84, Sta85, AL90]. A simple version of the Principle, applied \nto two re\u00adactive systems pl and pz, says: If pl satisfies M2 ~ Ml and pz satisfies Ml + M2, then when \nthey are run in parallel pl satisfies Ml and p2 satisfies iM2. As stated, the Composition Principle \nis not sound in general. The underlying propositional reasoning is obviously (and intriguingly) circular. \nHowever, the Principle is sound when Ml and Mz are safety properties, and under some additional hy\u00adpotheses. \nFor instance, consider two processes PI and pz that communicate by the distributed, integer vari\u00adables \nxl and *2; it is assumed that only pl writes Z1 and that only pz writes X2. Let AIl be (Z1 never de\u00adcreases \nand h42 be the corresponding assertion for X2, and suppose that pl and p2 satisfy M2 ~ ibfl and Ml + \nM2, respectively. Then it is sound to conclude that Ml and iW2 both hold, that is, that neither xl nor \n%2 ever decreases. An important test for a logic of specifications is whether it can be used to express \nand to illuminate the Composition Principle. Both of our logics are designed to satisfy this criterion. \nFor example, the intuitionistic formulation of the Principle just given is: (M2 ~ Ml) A(Ml ~ M2) FMl \nAiVIZ with a proviso to guarantee that Ml and M2 are speci\u00adfications of separate processes. The Iogics \ncan express also other variants of the Composition Principle; they serve in comparing these variants \nand, occasionally, in discovering new ones. Internal, hidden variables make the writing of spec\u00adifications \neasier. In the specification of a buffer, for instance, it may be convenient to mention the se\u00adquence \nof elements that the buffer contains, which is not directly observable. Unfortunately, hidden vari\u00adables \ncan complicate the proof that one specification implements another, weaker specification. Various re\u00adfinement \nrules have been proposed for these proofs; they are all based on instantiating internal variables. Logically, \nhiding is represented by existential quantifi\u00adcation (e.g., [Lam89]). In order to prove that 3y. JV implements \n%E. M, one gives an instantiation g(y) for the variable z, and then proves that N implements M under \nthis instantiation. The function g is known as a refinement mapping. For specifications of special forms, \nthe basic refinement mappings have been com\u00adplemented by the use of history and prophecy vari\u00adables [AL88], \nand they have been generalized to mul\u00adtivalued mappings [LT87, Mer90]. In our logics, hiding is exactly \nexistential quantifi\u00adcation, and a simple refinement-mapping rule follows easily from the usual logical \nlaws for quantifiers. It reads: N 1-M[g(y)/x] 3y.N t ~x.kf As we consider only safety properties, which \nare closed sets, we obtain an intuitionistic logic. In this we follow Hennessy and Plotkin [HP89] and, \nless di\u00adrectly, Abramsky with his proposal of a general logic of open sets [Abr89]. Parallel composition \ncan be represented by conjunction, as in works of Lamport and Pnueli. Dam [Dam88] and Abramsky [Vic88] \npointed out that in general parallelism will give ex\u00adtra, quantalic structure. This indeed happens when \nwe take specifications to be sets of processes, and then the logic of specifications is linear. Our work \nmay yield some evidence for the relevance of linear logic to concurrency. Other evidence can be found \nin work on Petri Nets (e. g., [MOM89]) and testing equivalence [AV90]. We introduce our logics in the \nfollowing overview. Sections 3, 4, and 5 give formal definitions and de\u00advelop the material further. The \nusual intuitionis\u00adtic and linear Iogics need to be enriched in order to support the assumption-guarantee \nspecification style. And they need to be enriched again, for example with prefixing and fixpoint operators, \nin order to obtain a basis for a complete specification language. The spec\u00adification formalism is considered \nin section 6. Sec\u00adtion 7 compares the logics.  2 Overview We review the basic propositional intuitionistic \nand linear calculi. We describe the usual connective, and motivate the addition of new constructs. The \nlogic fragments covered are those needed for the study of composition rules. 2.1 A calculus of sets of \nbehaviors The intuitionistic logic is inspired by the work of Lamport, Pnueli, and others, where the \nspecification of a system is a set of allowed behaviors. In turn, a behavior is a sequence of states, \nand a state is an as\u00adsignment of values to state components, or variables. Each state transition is attributed \nto an agent, the environment process or system process that caused the state change. Thus, a behavior \nis a sequence SO% S1-%S2JZ . . . where each si is a state and each ai is an agent, and the sequence is \neither infinite or else ends in a state smfor some m>0. The use of agents is motivated by the obvious \nneed to distinguish between actions performed by the en\u00advironment and those performed by the system. \nIn any particular specification, it suffices to consider two agents: the environment and the system. \nHowever! it is preferable to allow arbitrary sets of agents, in order to ease the composition of specifications. \nSince we are concerned only with safety proper\u00adties, we restrict attention to finite behaviors. A safety \nproperty is then a prefix-closed set of behaviors. In the logic, the propositions denote safety properties, \nand F simply stands for ~. The collection of safety properties forms a complete Heyting algebra [Joh82] \nand so the intuitionistic logical operations A, V, and ~ are available. The first two are intersection \nand union. Conjunction serves its usual logical role: a process p satisfies ~A&#38;f if and only if it \nsatisfies both M and M . Further, conjunction represents parallel compo\u00adsition: if pl satisfies Ml and \npz satisfies M2 then pl and p2 in parallel satisfy Ml A M2. Disjunction corre\u00adsponds to nondeterministic \nchoice: if pl satisfies AKl and pz satisfies M2 then a processes that acts like either pl or p2 satisfies \nMl V M2. Implication turns out to be a familiar and handy operation: E -+ M is the set of all behaviors \nthat satisfy M at least as long as they satisfy E. The connective ~ has arisen in works on the Composi\u00adtion \nPrinciple (in [ALWJ], and implicitly in [MC81] and [Pnu84]). Under reasonable hypotheses, the spec\u00adifications \nE ~ M and E + M have the same imple\u00admentations, and hence ~ can be replaced with ~. It is encouraging \nthat the logical formulation naturally yields this connective. The specification of a system cannot require \nthe environment to work properly, and so any environ\u00adment action should be allowed. More precisely, if \na property M is intended to specify the process rep\u00adresented by an agent (or set of agents) p, then any \nbehavior not in M should end with a p state change. When this condition holds, we say that M constrains \nat most p, and write M ~ p. With this notation, the Composition Principle reads: for any Ml and M2, provided \nMl ~pl, M2 dp2, and the sets pl and pz are disjoint The proviso expresses the requirement that Ml and \nM2 describe different processes. (The Principle is not sound otherwise, for example if Ml and M2 are \nthe same.) Note how the logical approach obviates the need for explicit reference either to processes \n(as in [hIC81, Pnu84]) or to the realizable parts of prop\u00aderties (as in [AL90]). hlany variants of the \nComposition Principle can be treated in this framework; for example, we easily obtain: EAM2k E1 EAM1FE2 \n(EI +M1)A(Ez-+ Mz)I-(E+ M, AMz) where Ml a pl, M2 a p2, and pl and p2 are disjoint. Some of these variants \nare well known, while others seem to be new. All of them can be proved equivalent using propositional \nreasoning and a few rules about the constrains relation.  2.2 A calculus of sets of processes In the \nlinear calculus, a proposition denotes a set of processes. We take a process to be a set of sequences \nof state pairs. Intuitively, a process that contains (sl, tl)(~2, ~2)(s3, ~3) . . . can change the state \nfrom S1 to tl, and later from S2 to tz,and later yet from Ss tots,.... In the study of safety, it suffices \nto consider finite sequences of state pairs. We require also that pro\u00adcesses be prefix-closed. It turns \nout that the set of safety properties is isomorphic to the set of processes; thus, we may identify safet \ny properties and processes. The logical operations A, V, and ~ are still mean\u00adingful. They arise as before \nfrom the complete Heyt\u00ading algebra structure of the partial order of safety properties. The property \nill AM allows the processes that are allowed both by M and M ; conjunction does not have any particular \nrelation with concurrency. Dis\u00adjunction corresponds to nondeterministic choice, as before. Finally, M \n--+ M includes the processes that behave like a process in M at least as long as they behave like a process \nin M. Intuitionistic linear logic arises when we consider the parallel composition of two processes. \nThe par\u00adallel composition of pl and pz is the set of shuflies of pl sequences with pz sequences. At the \nlevel of spec\u00adifications, this gives rise to a new logical operation, @, which is the multiplicative \nconjunction in linear logic. A process satisfies Ml @ M2 if it is the parallel composition of an Ml process \nwith an M2 process. Thus, if pl satisfies Ml and p2 satisfies M2 then the parallel composition of pl \nand p2 satisfies Ml @ M2. Associated with the connective @ is a linear impli\u00adcation operation, -o. The \nproperty Ml -o M2 is the largest N such that Ml @ N is a subset of M2. Thus, p E Ml -O M2 if and only \nif the parallel composition of p with any q E Ml satisfies M2. Conjunction and disjunction are then the \nadditive connective of linear logic. The exponential ! is triv\u00adial, but instead a ( )* construct can \nbe added to rep\u00adresent the parallel composition of a number of like processes. In the next subsection, \nwe propose an in\u00adterpretation of the classical constructs. The standard intuitionistic linear connective \ndo not suffice as a basis for assumption-guarantee speci\u00adfications. In particular, p G E -o M is not \nequivalent to the desired p satisfies M in any environment that satisfies E. The assertion p ~ E -O M \nmeans only that the composition of p with any E process q is an M process. It is possible that g is not \nthe whole envi\u00adronment of p-there could be a third process running in parallel; it is also possible that \np does not satisfy M in this environment the parallel composition of p and q does. To remedy this deficiency, \nwe introduce a connec\u00adtive -o. The property All -o M2 consists of the pro\u00adcesses that, when run in parallel \nwith an Ml process (and with nothing else), behave like Af2 processes. The special case of Afl -o M2 \nwhere Ml contains only the null process 1 is of particular interest; {1} ~ M is the set of all processes \nthat behave like a process in M when run by themselves, with no interference from the environment. We \ndenote this property by MO. Now the Composition Principle goes: This formula is valid in our model, \nwithout any addi\u00ad tional proviso. As in the intuitionistic case, a number of variants of the Composition \nPrinciple are available, and for example we have also the more general:  2.3 Testing The linear logic \ndescribed so far is an intuitionistic one. It does not include a constant 1 that resembles falsehood, \nor a negation-like involution ( )1. The no\u00adtion of testing suggests useful 1 and ( )1 constructs, and \ngives rise to a different account of assumption\u00adguarantee specifications. We can view the environment \nof a process as a tester for the process. We distinguish a state fail to represent the result of failed \ntests. A process p passes the test of q if q and p do not yield the state fail when they run in parallel, \nand q fails p otherwise. A pro\u00adcess succeeds if it does not yield fad when it runs in isolation. Thus, \np passes the test of q if the parallel composition of p and q succeeds. Success is a safety property, \nand we write 1 for the set of all processes that succeed. A sort of negation can also be defined: lvl~ \nis the set of all processes that do not fail A4 processes. Naturally, we are par\u00adticularly interested \nin the propositions Af such that M = (M 1 )L, which are called facts. These are the specifications that \nhave sound and complete testers; they can be characterized explicitly with a simple set of closure conditions. \nCertain expressions in this classical linear logic are reminiscent of assumption-guarantee specifications. \nIn particular, (E A ML)L is the set of processes that pass all of the tests that M processes pass, provided \nthese tests are from E. In other words, (E A Ml) 1 includes all of the processes that cannot be distin\u00adguished \nfrom Af processes in E environments (by E tests). It is analogous to the assumption-guarantee specification \nE ~ M, but the obvious analogues of the Composition Principle do not hold. A small correction solves \nthis problem. Let E+ = EU{u(s, fail) Iu GE, sastate} The processes in E+ behave like processes in E, \nex\u00adcept that they may fail the testee at any point. If E and Af are facts, then E+ M=(E+n AfL)L and the \nexpected Composition Principle follows.  3 Intuitionistic Logic The model that underlies the intuitionistic \nlogic is a small variant of that in [AL90]; we refer the reader to this and previous works for additional \nmotivation. We assume given a nonempty set of states, S, and a nonempty set of agents, A. These sets \nare disjoint. A behavior is a finite sequence where each Si is a state and each a< is an agent. If s \nis a state then (s) denotes the sequence with s as its sole element. If a is a sequence, a an agent, \nand s a state, the u. (a, s) denotes the concatenation of a and s at the end of a. The set of all behaviors \nis denoted by l?. A safety property is a set of behaviors closed under prefixes. The set of all safety \nproperties is denoted by sb. Safety properties, as we have defined them, are isomorphic to the safety \nproperties of [AL90], for ex\u00adample, with the caveat that we have not yet treated invariance under stuttering. \nIt is quite natural, and desirable, to add a straightforward condition of in\u00ad variance under stuttering \nto our definitions, as first advocated by Lamport [Lam83b]. For simplicity, we do not do so at this point. \nThe length la I of a behavior a is the number of agents that occur in a. If O < m s Ial then al~ is the \nprefix of a of length m; if m > \\crl, then Ulm = u. Proposition 1 sb is a complete Heyting algebra, where \nA as (1, V as U, and the associated -+ a s M~M ={u lVn~O. ifuln~Mthenaln EM } Hence, the algebra of \nsafety properties is a model for intuitionistic logic. The next two subsections dis\u00adcuss composition \nand refinement in this intuitionistic setting. Composition We say that the safety property Al constrains \nat most the set of agents p, and write M~p, if (i) ifs E S then (s)cM; and (ii) ifucM, scS,and a E ~, \nthen m.(a, s)6M. Note that if Mapthen(lV~M)ap for every N, and that if,u ~ v and Map then MCIV. Further, \nlet MP be the smallest superset of M that constrains at most p. The definition of constrains at most, \n in the form of a monotone closure condition, guarantees that such an MP exists. In fact, a behav\u00adior \nin MP is either a behavior in M extended with arbitrary ~ steps, or simply a behavior that consists exclusively \nof ji steps. We now have enough machinery for formulating the Composition Principle. As an example, we \nbriefly study two variants. Many other variants are possible. In particular, some of them take initial \nconditions into account; initial conditions are useful, but pose no major problem in this calculus. The \nmost basic law that we call a Composition Principle applies to a single specification: (MP+M) I-M (1) \nwhere Map. The soundness of this law can be proved by induction on the length of behaviors. Clearly, \nif s E S then (s) E M, because M 4 p. As an induc\u00adtion hypothesis, assume that if u E (Mp -+ M) then \nu c M, and suppose that u . (a,s) E (MP -+ M), in order to prove that u. (a,s) E M. Since M is a safety \nproperty, r c (MP + M), and the induction hypoth\u00adesis yields cr c M. In the case where a E p, it follows \nthat u .(a, s) G ME, and then a .(a,s) c (MP --t M) implies a . (a,s) c M. In the case where a E ji, \nwe obtain a , (ajs) c M from M ~p. An apparently more general law applies to two specifications: where \nMl a pl, Mz ~ PZ, and the sets PI and P2 are disjoint. This yields (1) as a special case, by letting \nMI = M, LJI = p, M2 = Mp, PZ = ji, and observing that Ml 1-M2. Somewhat surprisingly, the converse holds \nas well: (2) can be derived from (l). Suppose that Ml 4 pl and M2 4 P2, with PI and p2 disjoint, and \nassume that (M2 + Ml) A(Ml + M2). Let N=(Ml + M2) * M2. Since M2 CIp2 and p2 ~ @l, N dfll. Moreover, \nMl 1-N, by propositional reasoning, and hence (lvfl )Jl t- N. Therefore, N + Ml E Ml fol\u00ad lows by (1), \nand then Ml follows from the assump\u00adtion. The proof of Mz is exactly analogous. There\u00adfore, (Mz -+ Ml) \nA (Ml -+ M2) 1-Ml A M2. This logical style of proof is pleasant, we found. It has helped us in deriving \nall of our variants of the Composition Principle for safety properties from (l), which is the simplest. \n 3.2 Refinement To discuss refinement, we need to particularize the choice of the set of states. Let \nVar be a countably infinite set of variables, let V be a set of values, and let S be (Var +-V), the functions \nfrom Var to V. For two states s and s , we write s =X s if s(y) = s (y) for all y different from x. The \nrelation =C is extended to behaviors by requiring the behaviors to have the same length and the corresponding \nstates to be in the relation =Z. A safety property M is x-invariant if for every u E M if u =C r then \nT E M. Further, the exis\u00adtential quantification 3x.M of M along x is the least x-invariant safety property \ncontaining M. Clearly, if N is x-invariant, then we have: MI-N (3) 3x.Mt N and the converse rule is sound \ntoo. In a specification logic, the z-invariance hypothesis would be signalled syntactically by a free-variable \nproviso. Taking N to be 3X .M, the converse yields that: M } 3x,M (4) Now we need substitution in order \nto derive a re\u00adfinement rule. Let f : S -+ S be any function from states to states, and extend it to \nbehaviors in the ev\u00adident way so that ~(a (a, s)) = f(m) . (a, f(s)). Then we have f-l : Sb + Sb. Let \ng : V ~ V; the substitu\u00adtion of g(y) for x in a safety property M is defined by M[g(y)/x] = f 1 (M), \nwhere f(s)(z) equals g(s(y)) if z = y, and s(z) otherwise. As any f-1 is monotone, we get in particular \nthat for any safety properties M and N, MI-N M[g(y)/x] 1-N[g(y)/x] If N is x-invariant then N[g(y)/z] \n= N, that is, N is unchanged by substitution for x. We apply this in (4) and get: M[g(y)/z] !-2x.M Then \ncombining this with (3) we obtain a refine\u00adment rule: N R M[g(y)/m] (5) 3y.lV } 3Z.M There is an evident \ngeneralization to multiple quan\u00adtifications. Refinement principles in the literature deal with properties \nofspecial forms. Forexample, in[Lam89], these properties aregiven byaninitial condition and a next-state \nrelation (and a progress property, which relates only to liveness). Our intention is that such principles \ncan be derived from the treatment of ex\u00adistential quantification above, plus considerations re-Iating \nto the definition ofl.fusing the prefixing con\u00adstruction and recursion, treated below. Refinement functions \nare not enough in general: even if the conclusion of (5) holds, it may be that no suitable g exists. \nThe various known remedies for this incompleteness rely on auxiliary variables, on multivalued mappings, \nor on a combination of these. In a logical setting, auxiliary variables can be in\u00adtroduced with the help \nof two more general forms of semantic substitution. A certain jorward substitu\u00adtion enables the use of \nhistory variables and a baclc\u00ad ward substitution enables the use of prophecy vari\u00adables. Some complications \narise as unlike the stan\u00addard kind of substitution dealt with above the new substitutions can only be \napproximated in the syn\u00adtax of the specification logic (given in section 6). For practical applications, \none should also take account of stuttering and, perhaps, other closure conditions suggested by the work \non classical linear logic (sec\u00adtion 5). We intend to treat these issues in more detail in the full version \nof this paper.   Intuitionistic Linear Logic In this section we develop the intuitionistic linear logic \nproposed in the overview. The study of clas\u00adsical linear logic is postponed to the next section. We assume \ngiven only a set of states S; there is no notion of agent in this calculus. A transition is a pair of \nstates. A process is a prefix-closed set of sequences of transitions. (Note that the empty sequence c \nis allowed.) The set of all processes is denoted by P. A set of processes ill is lefi-closed if q c M \nwhen\u00adever there exists p E M such that q ~ p. A safety property is a set of processes which is both left-closed \nand closed under arbitrary unions. The set of all safety properties is denoted by Sp. Every safety property \nhas a largest process, and in fact: Proposition 2 The function from SP to P that maps a safety specification \nto its largest element is an iso - morphism of partial orders. Below, then, we define some operations \non T rather than on SP. The complete Heyting algebra operations A and V are intersection and union, and \nthe associated -+ is M~M ={u lVn~O. ifuln EMthenuln~ M } where the prefix u In is defined as usual for \nsequences. The empty set (falsehood) is written O. Ifpl and PZ are two processes, their parallel compo\u00adsition \nis PI \\\\PZ, where II is the language shuflle opera\u00adtor. Since processes and specifications are identified, \nthe parallel composition of specifications is defined as shuffle too: itl @ ~ = L1 II Al . Proposition \n3 (SP, U, 1, B) is a commutative quan\u00adtaie, where 1 = {c}. The associated quantalic implication is then \ngiven by MI+ M2={UI ({U} \\\\Ml)~M2} It follows immediately that the algebra of safety specifications provides \na model of intuitionistic linear logic [Yet90]. Parallel composition is the multiplica\u00adtive conjunction \noperation, while A and V are the additives. The exponential ! can be treated too, but it is not interesting: \n!A4 = 1 for all Al # O, and !0 = O. Instead, a ( )* operation is available; M* is defined as Vi ibfi, \nwhere Ali is the i-fold parallel composition of Al with itself, and it represents an arbitrary number \nof A4 processes running in parallel. We have only started to consider existential quan\u00adtifiers and refinement \nin a linear logic; they seem to pose no new problems, We omit their discussion here. Composition A transition \nsequence is chained if it is of the form (s1, Sz) (s2, Ss) . ..(sn-?, sn-l)(sn-l, sn) (The sequences \ne and (sl, S2) are chained,) Intu\u00aditively, chained transition sequences correspond to runs of a system \nby itself, with no interference from the environment. tVe write u =-v (and say that u runs with v) if \nu and v have a chained shuilie. Assumption-guarantee specifications are made pos\u00adsible by a new connective \n-o. We set: Mt={u13v EM. uwv} and Ml -0Adz=Ml ~ A[2 The definition says that if a prefix u of a sequence \nin All *A112 has a chained shuffle with a sequence in MI, then u is in 112. Hence, the sequences in Ml \n-O Af2 cannot be distinguished from sequences in M2 by an Ml environment. Various formulations of the \nComposition Principle are now available. One of the most powerful ones we have considered is: E8M2k M14El \nE8MII-M2-UE2 (Q -oM1)@ (E2 +M,) 1-(-E-oMl C3M2) Another variant applies to the composition of an ar\u00adbitrary \nnumber of like processes that depend on one another, in an environment E: (E@ M*+ M)* E*M* As in the \nintuitionistic calculus, the Composition Principle can be extended to handle initial conditions. This \nextension is less elegant than in the intuitionistic calculus, however, as it requires a generalization \nof the -o connective. Classical Linear Logic With a notion of testing, the linear logic of specifi\u00adcations \ngoes from intuitionistic to classical. The no\u00adtion of testing we adopt is an internal one: a dis\u00adtinguished \nstate fail represents the result of failed tests. As fail represents a fatal failure, we restrict attention \nto transition sequences that do not contain fail except possibly as their last state. In particular, \nthe shuffle operation is redefined to respect this re\u00adstriction; when we shuffle the sequences (sO, fail) \nand (sl, S2), for example, we drop (sl, S2) from the shuffle (s., fail)(sl, S2), and say that (s., fail) \nis a shuffle of (sO, fail) and (sl, S2). For simplicity, we also assume given a fixed initial state start \n# fail, and require chained transition sequences to start at start. A chained transition sequence succeeds \nif it does not end with fail, and fails otherwise. A process suc\u00adceeds if all of its chained transition \nsequences suc\u00adceed. The set of processes that succeed is left-closed and closed under arbitrary unions, \nand hence it is a safety property; we denote this safety property by 1. A process p passes a test q if \np II q succeeds. Note that p passes q if and only if q passes p, and there is no formal distinction between \ntester and test ee. Abramsky has suggested related but opposite def\u00adinitions in a GCS framework [Vic88]. \nHe proposed taking 1 as the set of processes that fail. Our choice of 1, the processes that do not fail, \nis more appropri\u00adate for a calculus of safety properties; in our model, Abramsky s -L is not left-closed. \nA negation-like connective ( )1 is habitually de\u00adfined from 1. For an arbitrary set of processes M, the \nstandard definition gives: M1={pl VqCM. (pllq) El} In other words, Ml is the largest (the hardest) set \nof tests that M processes pass, and it equals M-o 1. clearly, Ml is always a safety property. When M \nis a safety property, it is easy to understand Ml as a process: M1={ul VvEM. notu=v} where we write u \n_ v (and say that u crashes with v) if u and v have a chained shuffle that fails. As usual, we focus \non the facts the propositions M such that (M1 )1 = M. A useful characterization of the facts can be given \nin terms of a relation ~. The relation ~ is defined to be the smallest preorder such that: UVJU u(r, \ns)(s, t)v ~ u(r, t)v Uv g U(S> S)v (start, siart)u ~ u u(s, faii) ~ u(s, t)v A safety property M is \ndownward-closed if v E M whenever there exists u E M such that u ~ v; as we shall see, M is a fact if \nand only if it is downward\u00adclosed. Given a transition sequence u = (sl, tl) . . . (sn, tn), let Ub = \n(t~,sz) . . .(tn-l, sn) if SI = start, and u~ = (start, SI)(il, S2) . . . (tn_l, Sn) otherwise. Now let \nU[ = Ubif tn = fail, and U! = ~b( n, fa2~) oth\u00aderwise. These definitions apply when n = 1, and for example \n(sl, tl)bequals either c or (start, Sl), depend\u00ading on whether start = S1. In the special case n = O, \nlet ~b = c and d = (start, fail). The operations ( )b and ( )! have some convenient properties: Proposition \n4 If w v u then w ~ Ub. Proposition 5Ifw~ uflthen w~u.Ifu_ vand w ~ v then u _ w. Moreover, u _ u!. It \nfollows that ( ) ~ behaves almost like set-theoretic complementation: Proposition 6 If M is a downward-closed \nset of transition sequences, then un @ ML if and only if UEM. We obtain also the desired characterization \nof facts: Proposition 7 The set of transition sequences M is a fact if and only if it is downward-closed. \nIn classical linear logic, the product @ is required to map facts to facts. Thus, from now on, All @ \n&#38;f2 denotes ((lvfl Ij M2)1)L. Similarly, 1 is ({c}l)l. A redefinition is not needed for the additives. \nIf ill and M are facts then ill fl M{ is a fact, and A4 A M is still defined to equal M n M . It follows \nfrom propo\u00adsition 7 that (( MU M )*)L = (M1)l U(M i)L, and hence we can keep M v ill{ = M U M!. These \nproper\u00adties of the additives, together with proposition 6, are interestingly reminiscent of the set-theoretic \nmodels of relevance logic [Dun86]. This concludes the definition of a model of classi\u00adcal linear logic. \nActually, the model can be viewed in two ways, as a quantale of safety properties or as a phase space \nof processes. The latter option makes us consider sets of processes which are not safety prop\u00aderties, \nbut only safety properties are facts; thus, the choice of viewpoint seems unimportant. Composition As \nsuggested in subsection 2.2, let E+= EU{u(s, fa21) IuEE, sES) Note that E+ is not a fact in general, \neven when E is a fact. We obtain: Proposition 8 If E and M are facts then E+ M=(E+n M1)L This description \nof + leads to a general Composi\u00adtion Principle for the classical linear calculus: where E, El, E2, Ml, \nand M2 are facts. The Princi\u00ad ple follows from its analogue in the intuitionistic lin\u00ad ear logic (but \nis not identical to its analogue, because B has been redefined slightly). In particular, the Composition \nPrinciple says that (E+ M)c3(M-oE) t (E63M) . If E63M t-l then it also follows that (E -o M) @ (M -o \nE) 1-1, and hence (E+ M) 1-(M+ E)&#38;. Since the converse can be proved too, ifE@M t-l then (E-+M) = \n(M-oE)l. When E = M, this implies that if M @ M fl then (M --e M) = (M+ M)L, and so (M -o M) is self\u00ad \ndual. Furthermore, all self-duals arise thus: if iV is self-dual, then N @ IV I-J-and IV -o N = N. 6 \nA Specification Language Here we give a language for specifying safety proper\u00ad ties. The language is \nrather minimal, and is intended as a basis for more practical languages. For exam\u00adple, certain temporal \noperators are expressible in the language, and it would be quite natural to add ab\u00adbreviations for them. \nSimilarly, state machines can be coded and some syntax for them might be useful. We treat the calculus \nof behaviors first. As in [Lam90], we assume a fixed first-order signature and assume that there are \ntwo kinds of first-order vari\u00adables, primed and unprimed, with a one-to-one cor\u00adrespondence x H x between \nthe two; these serve for writing act ions. The unprimed variables are those used in section 3.2 above \nto define states. We let A range over the formulas in this language, X over a countably infinite set \nof specification variables, and p over sets of agents. Formulas are ranged over by P and Q, and are given \nby the following grammar: P::= ttlfl]PAQIPVQIP+Ql PP 13x. PI(P:A).P IA-D PIXIPX.P Here we have first \nthe propositional connective, then a p-closure operator, then a hiding operator (the quantification 3X \nbinds x as well as z), then an agent\u00adaction prefix construction, then a guarding construc\u00adtion (where \nno primed variable appears in the guard formula A), and finally, after specification variables, a least \nfixpoint expression (where it is assumed that all occurrences of X are positive, that is, within an even \nnumber of (. + Q) s). The notation M a p could be adopted as part of the formal logic, but here it remains \nin the metalanguage. All expressions denote safety properties, given val\u00adues for their free variables. \nRather than define the semantics formally, we just point out the semantic operations corresponding to \nthe syntactic ones. The denotations of the propositional connective are ob\u00adtained by the appropriate \nHeyting operations, and that of p-closure as in section 3. Existential quantifi\u00adcation is as in subsection \n3.2. For prefixing, we define for any p, R~ S2, and M ESa: (P:R).M = {(s) Is= s}U{(s,a,s ) I a ~p, sRs \n} U{(s, a,s ) . u I a c p,sRs , u ~ M begins with s } where (s, a, s ) . (u . (a , s )) = ((s, a, s ) \n. a) . (a , s ) and (s, a, s ) . (s ) = (s) . (a, s ). For guarding, we define for any G~ Sand M ~&#38;.: \nG + M = {C G M Iu begins with an element of G} Finally, pX.P[X] is interpreted as the least M such that \nP[M] = M. There is no difficulty in giving a similar language for process safety properties. For example, \none may simply add the linear operators @ and -o, plus -+; one drops the p-closure operator and also \nthe reference to p in prefixing. 7 Comparisons Corporation Systems Research Center, 1988. To appear \nin Theoretical Computer The intuitionistic logic and the linear logic are based Science. A preliminary \nversion appeared on different connective, and on different semantic in Proceedings of ihe Third Annual \nSym\u00ad models, yet there is a fairly straightforward trans\u00ad posium on Logic In Computer Science, lation \nbetween them. Let u be a behavior pages 165-177, IEEE Computer Society, Edinburgh, Scotland, July 1988. \nSoasl=+ . ..$n_l Jl!+!+ &#38; [AL90] Martin Abadi and Leslie Lamport. Com- Let tP(a) be the subsequence \nof (so, Sl) . . . (sn-l, s~) posing specifications. Research Re\u00ad such that the transition (si 1, si) \nappears in tp(u)if port 66, Digital Equipment Corporation and only if ai E p. The runs of p with identity \np are Systems Research Center, 1990. A pre\u00ad the behaviors a such that tp(u)E p. This yields a liminary \nversion appeared in [dBdRR90]. map rP : SP -t sb. It has a left-inverse S@ : &#38; --+ SP, which maps \na set of behaviors to the most general [AV90] Samson Abramsky and Steve Vickers. process that implements \nthis set of behaviors, The Quantales, observational logic, and pro\u00ad operations of the two calculi can \nthen be related, and cess semantics. Technical report, Impe\u00ad for example rial College, January 1990. \nibf~ -0 ~~ = s,(rp(kf~) + rp(M~)) [BKP84] Howard Barringer, Ruurd Kuiper, and Amir Pnueli. Now you may \ncompose where p is any nontrivial set of agents. temporal logic specifications. In Six- The intuitionistic \nlogic captures an external view teenth Annual ACM Symposium on The\u00ad of processes, via their behaviors. \nThe notation J4 a p ory of Computing, pages 51 63. ACM, makes it possible to express who is the subject \nof April 1984. a specification. Linear logic specifications describe a process at a time, and hence the \nnotion of constrains at most is unnecessary. On the other hand, it be\u00adcomes more difficult to express \nthat one process is the complete environment of another, and that the sys\u00ad [Dam88] Mads Dam. Relevance \nlogic and concur\u00adrent computation. In Proceedings of the Third Symposium on Logic in Computer Science, \npages 178-185. IEEE, July 1988. tem that they form is closed, Such closed systems are [dBdRR901 J. W. \nde Bakker. W.-P. de Roever, and essential in the notion of testing, which then helps in G. Rozenberg, \neditors. Step wise Re\u00ad the analysis of assumption-guarantee specifications. finement of Distributed Systems: \nMod\u00ad els, Formalism, Correctness, volume 430 Acknowledgements of Lecture Notes in Computer Science, Berlin, \n1990. Springer-Verlag. Luca Cardelli encouraged this work in its initial phase, and tried some of the \nideas in a CCS setting. [Dun86] J. Michael Dunn. Relevance logic and Cynthia Hibbard provided editorial \nhelp. entailment. In D. Gabbay and F. Guen\u00ad thner, editors, Handbook of Philosophical Logic, volume 3, \npages 117 224. D. Rei- References del Publishing Co., 1986. [Abr79] K. Abrahamson. Modal logic of con\u00ad \n[Gir87] J.-Y. Girard. Linear logic. Theoretical current nondeterministic programs. In Computer Science, \n50:1-102, 1987. International Symposium on Semantics of Concurrent Computation, Evian-les\u00ad [HP85] David \nHarel and Amir Pnueli. On the de- Baines, July 1979. velopment of reactive systems. In K. R. Apt, editor, \nLogics and models of concur\u00ad [Abr89] Samson Abramsky. Domain theory in rent systems, volume F13 of NATO \nASI logical form. Annals of Pure and Applied Series, pages 477 498. Springer-Verla.g, Logic, 1989, 1985. \n[AL88] Martin Abadi and Leslie Lamport. The [HP89] Matthew Hennessy and Gordon Plotkin. existence of \nrefinement mappings. Re- Finite conjunctive nondeterminism. In search Report 29, Digital Equipment Petri \nFestschrijl, 1989. [Joh82] [Lam83a] [Lam83b] [Lam89] [Lam90] [LT87] [MC81] [Mer90] [MOM89] [Pnu84] \nP. T. bridge 1982. Johnstone. University Stone Spaces. Cam-Press, Cambridge, [Sta85] Leslie Lamport. \nSpecifying concurrent program modules. ACM Transactions on Programming Languages and Systems, 5(2):190-222, \nApril 1983. Leslie Lamport. What good is tempo\u00adral logic? In R. E. A. Mason, editor, Information Processing \n83: Proceedings of the IFIP 9th World Congress, Paris, September 1983. IFIP, North Holland. [Vic88] ~et90] \nLeslie Lamport. A simple approach to specifying concurrent systems. Commu\u00adnications of the ACM, 32(1):32 \n45, Jan\u00aduary 1989. Leslie Lamport. A temporal logic of actions. Research Report 57, Digi\u00adtal Equipment \nCorporation Systems Re\u00adsearch Center, April 1990. Nancy Lynch and Mark Tuttle. Hi\u00aderarchical correctness \nproofs for dis\u00adtributed algorithms. In Proceedings of the Sixth Symposium on the Principles of Distributed \nComputing, pages 137-151. ACM, August 1987. Jayadev Misra and K. Mani Chandy. Proofs of networks of processes. \nIEEE Transactions on Software Engineering, SE-7(~:417-426, July 1981. M. Merritt. Completeness theorems \nfor automata. In J. W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, Stepwise Refinement of \nDistributed Sys\u00adtems: Models, Forma lismf Correctness, volume 430 of Lecture Notes in Computer Science, \npages 544-560. Springer-Verlag, 1990. Narciso Marti-Oliet and From Petri nets to linear cal Report SRI-CSL-89-4R2, \nnational, December 1989. Jos&#38; Meseguer. logic. Techni-SRI Inter- Amir Pnueli. In transition from \nglobal to modular temporal reasoning about pro\u00adgrams, In Krzysztof R. Apt, editor, Log\u00adics and Models \nof Concurrent Systems, NATO ASI Series, pages 123 144, Berlin, October 1984. Springer-Verlag. Eugene \nW. Stark. A proof technique for rely/guarantee properties. In S. N. Maheshwari, editor, Foundations of \nSoft\u00ad ware Technology and Theoretical Com\u00adputer Science, volume 206 of Lecture Notes in Computer Science, \npages 369\u00ad391, Berlin, 1985. Springer-Verlag. Steve Vickers. Samson Abramsky on lin\u00adear process logics. \nFoundation Workshop Notes, October-November 1988. David N. Yetter. Quantales and (non\u00ad commutative) linear \nlogic. Journal of Symbolic Logic, 55(1):41 64, March 1990.   \n\t\t\t", "proc_id": "99583", "abstract": "", "authors": [{"name": "Martin Abadi", "author_profile_id": "81100547147", "affiliation": "Digital Equipment Corporation, Systems Research Center, 130 Lytton Avenue, Palo Alto, California", "person_id": "PP14190189", "email_address": "", "orcid_id": ""}, {"name": "Gordon Plotkin", "author_profile_id": "81100235459", "affiliation": "Dept. of Computer Science, University of Edinburgh, King's Buildings, Edinburgh EH9 3JZ, UK", "person_id": "PP43117857", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/99583.99626", "year": "1991", "article_id": "99626", "conference": "POPL", "title": "A logical view of composition and refinement", "url": "http://dl.acm.org/citation.cfm?id=99626"}