{"article_publication_date": "01-01-2002", "fulltext": "\n\t\t\t", "proc_id": "503272", "abstract": "Abstraction and composition are the fundamental issues in making model checking viable for software. This paper proposes new techniques for automating abstraction and decomposition using source level type information provided by the programmer. Our system includes two novel components to achieve this end: (1) a behavioral type-and-effect system for the &pi;-calculus, which extracts sound models as types, and (2) an assume-guarantee proof rule for carrying out compositional model checking on the types. Open simulation between CCS processes is used as both the subtyping relation in the type system and the abstraction relation for compositional model checking.We have implemented these ideas in a tool---P<sc>IPER</sc>. P<sc>IPER</sc> exploits type signatures provided by the programmer to partition the model checking problem, and emit model checking obligations that are discharged using the S<sc>PIN</sc> model checker. We present the details on applying P<sc>IPER</sc> on two examples: (1) the SIS standard for managing trouble tickets across multiple organizations and (2) a file reader from the pipelined implementation of a web server.", "authors": [{"name": "Sagar Chaki", "author_profile_id": "81100403331", "affiliation": "Carnegie Mellon University, Pittsburgh, PA", "person_id": "P337074", "email_address": "", "orcid_id": ""}, {"name": "Sriram K. Rajamani", "author_profile_id": "81100468626", "affiliation": "Microsoft Research, Redmond, WA", "person_id": "P266638", "email_address": "", "orcid_id": ""}, {"name": "Jakob Rehof", "author_profile_id": "81100614854", "affiliation": "Microsoft Research, Redmond, WA", "person_id": "P131488", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/503272.503278", "year": "2002", "article_id": "503278", "conference": "POPL", "title": "Types as models: model checking message-passing programs", "url": "http://dl.acm.org/citation.cfm?id=503278"}