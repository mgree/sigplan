{"article_publication_date": "01-01-2002", "fulltext": "\n\t\t\t", "proc_id": "503272", "abstract": "In this paper we propose a scheme that combines type inference and run-time checking to make existing C programs type safe. We describe the CCured type system, which extends that of C by separating pointer types according to their usage. This type system allows both pointers whose usage can be verified statically to be type safe, and pointers whose safety must be checked at run time. We prove a type soundness result and then we present a surprisingly simple type inference algorithm that is able to infer the appropriate pointer kinds for existing C programs.Our experience with the CCured system shows that the inference is very effective for many C programs, as it is able to infer that most or all of the pointers are statically verifiable to be type safe. The remaining pointers are instrumented with efficient run-time checks to ensure that they are used safely. The resulting performance loss due to run-time checks is 0-150%, which is several times better than comparable approaches that use only dynamic checking. Using CCured we have discovered programming bugs in established C programs such as several SPECINT95 benchmarks.", "authors": [{"name": "George C. Necula", "author_profile_id": "81100295630", "affiliation": "University of California, Berkeley", "person_id": "PP14109324", "email_address": "", "orcid_id": ""}, {"name": "Scott McPeak", "author_profile_id": "81100329375", "affiliation": "University of California, Berkeley", "person_id": "P343133", "email_address": "", "orcid_id": ""}, {"name": "Westley Weimer", "author_profile_id": "81100631608", "affiliation": "University of California, Berkeley", "person_id": "PP18002460", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/503272.503286", "year": "2002", "article_id": "503286", "conference": "POPL", "title": "CCured: type-safe retrofitting of legacy code", "url": "http://dl.acm.org/citation.cfm?id=503286"}