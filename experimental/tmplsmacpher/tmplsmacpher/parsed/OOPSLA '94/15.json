{"article_publication_date": "10-01-1994", "fulltext": "\n Workshop Report-Flexibility in System Software Reported by: Helen A. Klein, Przemyslaw Pardyak and Arindam \nBanerji Organizers: Arindam Banerji, Roy Campbell, and David L. Cohn Student volunteers: Helen A. Klein \nand Przemyslaw Pardyak 1. Introduction Perhaps the most consistent characteristic of comput- ing technology \nis change. Hardware capabilities have evolution intervals measured in months, but applica- tion requirements \nchange in milliseconds. To accom-modate these changes and to provide optimal performance, system software \nmust be made flexible and customizable at run-time. Four recent trends have compounded this sit- uation \nmaking the one sizefits all design strategy in- creasingly obsolete. Mobile computers define a dynamic \ncomputing world with intermittent commu-nications, time varying capacities and important new cost considerations. \nUltra-large interconnections of-fer a huge diversity of data, and optimal access is de- pendent on resource \nlimitations, communication connectivity and the user s needs. High-speed work-station networks must use \nadaptive resource exploita- tion to suit the needs of individual applications. Multimedia applications \nand distributed databases en- tail differing, and often conflicting, expectations on system services. \nIn each case, run-time flexibility, that is the ability to specialize or optimize, is needed, and the \nunderlying operating system should provide tools to support this flexibility. Object and language technology \nhave sug-gested methods for building flexible system software components. It is time to begin to transform \nthese ideas from interesting proposals to mature technolo-gy, suitable for day-to-day system software \ndevelopment. The Flexibility in System Software workshop held at OOPSLA 94 conference gathered researchers \ninterested in providing the necessary levels of flexibility in the next generation of operating systems. \n 2. Workshop objectives and format The workshop addressed four major questions whose res- olution is \nessential to the transformation to flexible oper- ating systems: How should we defineflexibility? Is \nit simply applica- tion-specific tuning of system service implementa-tions or should applications be \nable to synthesize new service interfaces? For that matter, should the focus only be on application requirements-how \nshould dy- namic changes in hardware availability be handled? What strategies or abstractions are suitable \nfor build- ing flexible system software? Open implementations are gaining popularity, but simple interposition \nof code has been shown to be remarkably effective. On the other hand, many industry initiatives seem \nto pre- fer use of frameworks to provide a range of implemen- tations. 9 What steps need to be taken \nto ensure the robustness of flexible or extensible systems? In a situation, where common system services \nmay be manipulated by mul- tiple entities - the questions of safety, liveness and ro- busmess become \nparamount. Changes affected by one particular client should not crash or adversely affect other clients \nof the same system. What programming techniques and design policies lead to safely extensi- ble system \nsoftware? What insights have been gainedfrom the construction of flexible system software? Attempts to \nconstruct flexible operating system services go back at least two Addendum tu the Proceedings OOPSLA \n94 decades, if not more.. The collective insights gained from numerous such efforts can help provide \nsome directions for ongoing research work. The workshop consisted of four sessions corre- sponding to \neach of the above-mentioned issues. Each session was opened by an invited talk given to highlight the \nfocus of the session. The talk was followed by a se- ries of short presentations by researchers working \non the aspects of flexibility within the focus of the session. After the presentations gave the background, \npanel dis- cussion with participation from the audience followed. This paper reports on the course of \nthe workshop and summarizes the conclusions drawn by the participants. 3. Definitions and Requirements \nof Flexibility in System Software Keynote Speech: Michael Powell Moderator: David Cohn Speakers: Rodger \nLea, Vinny Cahill, Michael Powell Other participants: Stephen Nicoud, Peter Bahrs, IL Chang, Paul Leach \nMichael Powell opened the discussion by describing the need for flexible software. Everyone seems to \nagree that we need to have flexible systems, but agreeing what that means in terms of deliverables is \ndifficult. The main ra- tionale for flexible software is the fact that one size does not fit all: a fixed \nfunctionality leaves some clients of a system unsatisfied. Flexibility, however, comes at a cost and \ntoo much flexibility can mean placing a burden on a majority who do not need it to please a minority \nwho may. It is necessary to be flexible about how flex- ible the system should be because a little flexibility \ncan go a long way in improving the system s usability and performance, but too much can lead to redundancy \nand reduced performance. Some of the issues that were brought up by the audience in this regard were: \nThe more functionality you pack in to a system in an attempt to meet everyone s needs, the higher the \nlikelihood that you will inhibit flexibility. Modularized functionality, creating many modules that can \nbe delivered independently to meet individ- ual needs, is one way to create very rich systems that can \nmeet the needs of many different users without overwhelming them all with unnecessary functional- ity. \nBy limiting functionality and meeting instead spe- cific and specialized needs we can eliminate the soft- \nware installation questions that plague installers. Systems should be designed in such a way as to let \nthe user grow in sophistication. Users should be able to ask questions of the system when they are ready, \nnot when they are relative neophytes and attempting installation of a new system. Users primary goals \nare to run applications, not to fiddle with operating system functionality. It is important to consider \nwho the user is when we make determinations about how to meet uses needs. Next speaker, Rodger Lea, \ndiscussed three kinds of flexibility: run-time adaptation, build-time tai- loring and evolutionary changes. \nThe trend according to Roger is away from Big Iron systems (mainframes and workstations) towards smaller \nmore specialized operat- ing systems, like those needed to run appliances. These systems are autonomous \nbut are increasingly more con- nected to other systems. These newer kinds of operating systems do not \nneed to incorporate run-time adaptation capabilities, but must be configurable at build time and should \nincorporate download capabilities to allow for longer term evolutionary changes. Some important re-marks \nmade in the discussion that followed included: The trend of going from Big Iron to Appliances does not \nnecessarily mean we need fewer general purpose operating systems. As we explore the appliance op- erating \nsystem world, our needs will probably be- come more and more general; so these smaller more special purpose \noperating systems may eventualIy be just as general as Big Iron operating systems are today. Perhaps, \nwe will need build-time reflectivity to al- Portland, OR October 23-27,19!34 low us to be general purpose \nand specific simulta- neously. Vinny Cahill, the next speaker, identified sev-eral aspects of flexibility: \ncustomizability, extensibility, configurability, tunability and aahptablity. Customiz-ability and adaptability \nare the really important aspects here. To accommodate the first of these, we should think about operating \nsystems as being a collection of services and should provide appropriate tools to cus-tomize them. Concerning \nadaptation, we should recog- nize that there are two ways of considering this: adaptable software is \nsoftware that has knobs and but- tons to turn, and adaptive software is software that knows when and \nhow to turn these knobs. At this point we may not even know what the right knobs are. Some of the issues \nthat arose after Vinny s talk were: . Three other categories of adapting might be: 1) The OS asks the \napplications software and the hardware: tell me what you do so I can adapt; 2) the OS tells the hardware, \nhere is what I can do; and 3) the OS says to the user, please do the following to the hardware. For software \nto be truly flexible, it should accommo- date all of these. An OS should not know about things going \non above it. Rather, the OS should just be aware that it is matching clients to servers and it must do \nwhatever is appropriate to support that match. This is where reflectivity comes in.   4. Safety and \nRobustness in Flexible System Software Keynote Speech: ZM Forman Moderator: Geoff Wyant Speakers: Bob \nAtkinson, Brian Be&#38;ad, DavidGoldsmith Other Participants: Richard Draves, Dylan McNamee, Eric Herness, \nEllen Siegel, Dilma Silva Ira Fonnan from IBM discussed the problems with up- ward compatibility: adding \nnew functionality without taking old functionality away. The problem is to mi- grate from one library \nto another with no changes to ap- plications. A way of achieving it safely is to identify safe transformations \nfor a library. Such transformations define a set of extensions that can be done without vio- lating the \nconstrains imposed by the old functionality. Examples of safe transformations in the procedural world \nare: improve performance, eliminate failures, en- large number of parameters, add procedures, etc. In \n00 world, additional transformations must be possible: new instance variables, new methods, new classes, \nmi- grate classes down, migrate methods upward, retraction of private methods, reordering methods, reordering \nin- stance variables. Problems encountered when imple-menting such transformations in existing languages \nwere described. In the discussion that ensued and which included the rest of the speakers as well as \nthe audience, the following points were made: We are used to building large monolithic systems for specific \npredefmed environments. This is where we have built our experience base. On the other extreme we talk \nabout lego-like systems that will provide us with optimal flexibility. We may need to aim some- where \nin the middle of these two extremes. It is unlikely that humans can design a comprehen- sive OS without \nactually building it and testing it out and then incrementally changing it as we learn from our tests. \nThe key to building flexible systems is creating con- tracts; these are necessary when large numbers \nof people work together to build a system. They also make the system seem more flexible by making it \nclear to users what can be done. . Exposing knobs and dials is an admission of failure. The difficult \nthing is finding the right knobs to incor- porate. Once we can do this, we may be able to jump to designing \nadaptive systems. . It is difficult to describe protocols unambiguously and to prevent users from depending \non some side effect that is not really apart of a contract. It would be nice to create an OS that exposes \njust the right amount so that the user can use the system without going through the back-door. Addendum \nto the Proceedings OOPSLA 94  5. Techniques Philosophies for Building Flexible Systems Keynote Speech: \nGregor K&#38;ales Moderator: Gregor Kiczales Speakers: Brent Welch, Cation Pu, Im Forman Other Participants: \nChris Maeda, David Shang, Dinesh Kulkarni, Karl Lieberherr The keynote speaker, Gregor K&#38;ales, proposed \nreflec- tion as a metaphor that can be used in designing certain kinds of flexible systems. In general \nwe have tried to create simple interfaces for users so that they need not know the contents of the black \nbox they are interfacing to. Reflection is an approach to retaining these simple interfaces, but going \nbeyond them by allowing for a higher level of configurability. Think about reflection in the following \nway: When two people who interface to build widgets decide they need a change in the process they are \nusing, then they shift into meta mode and dis- cuss the process instead of widgets. After that, they \ncan go back to talking about widgets. Reflection is the pro- cess of talking about the standard operating \nprocess and negotiating possibly new approaches. Meta or reflec- tion dialog should be separated from \nbase dialogs. Ira Foreman discussed the meta object protocol in IBM-SOM. He pointed out the need for \ndistinct meta- objects to solve many of the problems arise in imple- menting extensible software. In \nparticular, he discussed the example of re-instantiating an object at a new mem- ory location. He demonstrated \nhow me&#38;objects in SOM, could help avoid some of the pitfalls of such memory reallocation. Next speaker, \nCalton Pu, discussed making commodity software flexible. OS s should be able to deal successfully with \ncommodity hardware and soft- ware, since it is so prevalent. So we should start with an architectuml \nkernel and from this kernel, small pieces of optional functionality can be used to extend the capabil- \nities of the OS to meet specialized needs. In Synthetix, the system built at OGI, such extensions ate \nbeing add- ed to the UNIX system. Brent Welch proposed using interpreters to pm- vide extensibility \nin operating systems. He discussed also the problem of figuring out how to export and rep- resent the \nsemantics of a module, to do so and include the operations, knobs, constraints and rules for use. Karl \nLieberherr, the next speaker, described a means of designing software so that it is optimally flex- ible. \nThe technique uses a class graph to determine overlapping functionality and picks out a class graph for \neach set of functionality. As a result, the program is de- signed by finding generalizations by examining \nthe spe- cific. A number of points were made after each of the presentations: It is difficult to put \na cost on reflection; these kinds of systems are often inefficient, but since reflection seems necessary \nfor certain types of flexibility, one might as well incorporate it in to the system and or- ganize it \nas well as possible. It is necessary to strike a balance between exposing and hiding details. Late binding, \nmaking decisions at the last possible moment makes for greater flexibility.  6. Experiences and Insight \ninto Building Flexible System Software Keynote Speech: David Goldsmith Moderator: Sanjay Radia Speakers: \nWouter Joosen, Jun-ichiro Itoh, Vince Russo Other Participants: Carl Hauser, Doug Schmidt, Keith Loepere, \nMike Jones, Orran Krieger Dave Goldsmith discussed experience gained while building the Taligent system. \nSystem flexibility may support a variety of users/purposes: 1) the systems cm- ator-to add new features; \n2) Independent Software Vendors (ISV s)-to make old systems do new tricks and 3) the end user who wants \nto mix and match soft- ware. We have to balance flexibility and safety. At Tali- gent, the idea is to \nlimit extensions. This may limit creativity, but it prevents future problems. Some basic tenets about \nbuilding flexible software: it is hard to do, one can never foresee everything, when you get it right, \nreuse it, and when it becomes inflexible, throw it away. Next speaker, Jun-ichiro Itoh, described experi- \nence gained from low-level systems programming for the Apertos reflective operating system. The goal \nof the research was to provide a framework in which low-level modules such as device drivers are replaceable \nto en- able dynamic reconfigurability. The conclusion of this research is that isolation provided by \nencapsulating drivers in concurrent objects and reflection that pro- vides the means for manipulating \nthem, enable the right level of flexibility for low-level modules. Wouter Jousen tried to answer the \nquestion how much flexibility can we afford using the experience gained in building a flexible load balancer. \nAn impor- tant observation for dynamic (run-time) flexibility is that it can provide good performance \npayoffs only where the scope of changes can be effectively limited. Vince Russo described experience \nwith the Re- naissance object-oriented distributed system. His posi- tion was that 00 distributed systems \nare just client-server programs and flexibility can be achieved by de- fining substitutability rules \nso as to let client access as many services as possible. Structural subtyping and self-describing objects \nwere used for substitutability in Renaissance. Sanjay Radia presented interface technology applied in \nthe Spring object-oriented system at Sun Mi- crosystems Laboratories. 00 technology including IDL, separation \nof interface and implementation, and interface and implementation inheritance, was used successfully \nto achieve high degrees of flexibility. Some points made during the ensuing discus-sion: How valuable \nis the inheritance of interfaces: It avoids the creation of a new mechanism to create the new class. \nHow can you get around the interface problem, if you have an interface and you change an object that \nyou are passing in that interface how can you not change the interface of the class being inter- faced \nto? Systems accrete because you cannot pull away interfaces that are already in use. You can never retract \nthe things that make applica- tions work now, you can only add to it. There is a kind of evolutionary \nmigration that goes on. Should we identify early on in the design of an OS those parts of the system \nwe want to dump in the fu- ture, the stuff we plan to eventually redesign? The problem of using the right \nlanguage was raised. Using a low level language assures that no bad com- mitments are made. Using a high \nlevel language pro- vides useful abstractions. There is a trade-off involved in supporting multiple languages. \nSuch support may require work at a very primitive level which may lead to sacrificing the quality of \nthe system.  7. Final discussion and conclusions The workshop s success, if attendance is any indication, \nimplies that there is an increasing interest in investigating the issues involved in building flexible \nsystem software. However, in spite of the fact that many attempts have been made to investigate such \nissues, the field in general, is still young. An excellent indication of this is large variance of opinions \non the definition of flexibility in system services. Little agreement could be reached on issues such \nas appropriate degrees of flexi- bility for system software or the kinds of system servic- es that should \nbe made flexible. The importance of safety and robustness was strongly felt and quite a few good techniques \nwere suggested. Many in attendance noted that the performance of system services is critical; therefore \nthe cost of providing flexibility in operating systems should not overwhelm the added benefits. It has \nbecome apparent that although some efforts have been made at applying techniques such as open implementa- \n Addendum to the Proceedings OOPSLA 94 tions and partial evaluation to specific sub-systems within operating \nsystems, many more such efforts are necessary to create mature technology. Alas, this means that there \nare quite a few Ph.Ds yet to come, in this area. The papers from this workshop will be made available \nfor anonymous ftp at invaders.dcrZ.nd.edu:// pub/mix/workshop. For more information contact axb@cse.nd.edu. \n 8. Attendee List David L. Shang (Corporate Software Research and Development, Motorola Inc.), Douglas \nC. Schmidt (Department of Computer Science, Washington Uni-versity, St. Louis), Peter C. Bahrs (Microkernel \nArchi-tecture, IBM), Orran Krieger (Department of Electrical and Computer Engineering, University of \nToronto), Bob Atkinson (Microsoft), Brent Welch (Xerox PARC), Calton Pu (Dept. Of Computer Science and \nEn- gineering, Oregon Graduate Institute), Dylan Mc-Namee (Dept. Of Computer Science and Engineering, \nUniversity of Washington), Przemyslaw Pardyak (Dept. Of Computer Science and Engineering, Univer-sity \nof Washington), Eric Hemess (IBM), Henry Chang (Personal Mobile Systems, IBM T.J Watson Research Center), \nDinesh Kulkami (Dept. Of Computer Science and Engineering, University of Notre Dame), Chris Maeda (School \nof Computer Science, Carnegie Mellon University), Patrick A. Muckelbauer (Department of Computer Sciences, \nPurdue University), Stephen L. Nicoud (Research &#38; Technology, Boeing Computer Services), Rodger Lea \n(Sony Computer Science Lab, Tokyo), S. Radia (Sun Microsystems, Inc.), Ellen Sie- gel (Xerox PARC), Dilma \nSilva (College of Comput- ing, Georgia Institute of Technology), Vinny Cahill (Distributed Systems Group, \nDept. of Computer Sci-ence, Trinity College, Dublin, Ireland), Wouter Joosen (K.E.Leuven, Dept. of Computer \nScience, Leuven, Bel- gium), Geoff Wyant (Sun Microsystems Laboratories, Inc.), Jun-ichiro Itoh (Keio \nUniversity &#38; Sony Comput- er Science Laboratory), Jonathan Walpole (Dept. Of Computer Science and \nEngineering, Oregon Graduate Institute), Vince Russo (Department of Computer Sci-ences, Purdue University, \nWest Lafayette), Arindam Baneji (University of Notre Dame, Notre Dame), Dav- id L. Cohn (University of \nNotre Dame, Notre Dame), David Goldsmith (Taligent), Michael Powell (Sun Mi- crosystems), Ira Forman \n(IBM), Gregor Kiczales (Xe- rox Part), Shigeru Chiba (Xerox Part), Larry Raper (IBM), Helen A. Klein \n(University of Michigan), Ger- ald Baumgartner (Department of Computer Sciences, Purdue University), \nZhixue Wu (University of New- Castle), Keith Loepcre (OSF), Nina Bhatti (University of Arizona), Carl \nHauser (Xerox PARC), Olivier Gru- ber (INRIA, France), Richard Draves (Microsoft Carp), Michael Jones \n(Microsoft Corp.), Paul Leach (Mi-crosoft Corp.), Roy Campbell (University of Illinois -Urbana Champaign), \nBrian Bershad (University of Washington), Brian Foote (University of Illinois, Urba- na Champaign), Karl \nLieberherr (NorthEastem Univer-sity). \n\t\t\t", "proc_id": "260028", "abstract": "", "authors": [{"name": "Helen A. Klein", "author_profile_id": "81339509684", "affiliation": "University of Michigan", "person_id": "PP14060042", "email_address": "", "orcid_id": ""}, {"name": "Przemyslaw Pardyak", "author_profile_id": "81100455788", "affiliation": "Dept. Of Computer Science and Engineering, University of Washington", "person_id": "P228396", "email_address": "", "orcid_id": ""}, {"name": "Arindam Banerji", "author_profile_id": "81100284849", "affiliation": "University of Notre Dame, Notre Dame", "person_id": "P21439", "email_address": "", "orcid_id": ""}, {"name": "Roy Campbell", "author_profile_id": "81100212328", "affiliation": "University of Illinois-Urbana, Champaign", "person_id": "PP15025810", "email_address": "", "orcid_id": ""}, {"name": "David L. Cohn", "author_profile_id": "81100363116", "affiliation": "University of Notre Dame, Notre Dame", "person_id": "PP39039518", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260028.260122", "year": "1994", "article_id": "260122", "conference": "OOPSLA", "title": "Workshop report&#8212;flexibility in system software", "url": "http://dl.acm.org/citation.cfm?id=260122"}