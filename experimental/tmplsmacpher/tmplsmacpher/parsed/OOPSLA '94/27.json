{"article_publication_date": "10-01-1994", "fulltext": "\n Precise Behavioral Specifications In 00 Information Modeling Report by: Haim Kilov (Bellcore) Bill \nHarvey (Robert Morris College) Workshop Co-Chairs: Haim Kilov (Bellcore, haim@cc.bellcore.com) Bill \nHarvey (Robert Morris College, harvey@rmcnet.robert-morrkedu) Hafedh Mili (University of Quebec at Montreal, \nmili@aicha.info.uqam.ca) De ene oorzaak van ellende is dat door verweving met (vermoede) economische \nbelangen het veld van de slogans, reclamekreten, misleidende termen en valse beloften is vergeven: Expert \nSystems, Learning Machines, Teaching Machines, Automatic Program- ming, Higher-Order Languages, Visual \nprogram- ming, Program Animation, Software Engineering, het is allemaal humbug. (E.W.Dijkstra [9])  \nWorkshop Purpose and Goals The purpose of this workshop was to explore behav-ioral modeling in the context \nof object-oriented models, with an emphasis towards: 1) modeling the collective behavior of objects, \nwith a particular interest in declarative constructs, and 2) modeling viewpoints, both along the lines \nof ODP s viewpoints (e.g., enterprise and information viewpoints versus computational viewpoint [ 1,5]), \nand in terms of different aspects of object behavior being of interest to different kinds of users within \nan organization (different domain experts, analysts, developers) or a la [2]. The presentations and discussions \nat the workshop pro-vided both a snapshot of the state of the art and practice, The one cause of misery \nis that, because of (apparent) involvement of economic interests, the field abounds with catchphrases, \nadvertis- ing slogans, misleading terms and false promises: Expert Systems, Learning Machines, Teaching \nmachines, Automatic Programming, Higher-Order Languages, Visual Programming, Program Anima-tion, Software \nEngineering, all of it is humbug. (E.W. Dijkstra) [Translated by Ed de Moel.] including standardization \nactivities, and an outline of open theoretical and practical questions that need to be addressed to advance \nthe state of the art and practice of 00 information modeling. The object-oriented paradigm has solved \nmany problems related to software packaging, but has created its own. With most 00 modeling methodologies, \nespecially data-driven ones, a functional glue has to be grafted back onto object models using additional \nconstructs (e.g. various kinds of contracts). With traditional 00 A&#38;D methodologies, a dogmatic adherence \nto 00 concepts as they are often used in programming precludes us from seeing different user viewpoints \nseparately, and lacks the means to describe their interactions formally. The past few years have witnessed \ntwo emerging trends in 00 modeling: a refunctionalization of data models, and a subjectification of objects. \nBlind faith in the object ideal is making room for healthy multi-paradigmatic cynicism (see e.g. [4] \nand activities related to collective behavior in generalized object models). Our workshop builds on two \nprevious- very popular!-- OOPSLA workshops. All three workshops attracted wide international participation, \nincluding well-known 00 experts. The first workshop dealt with the basics of information modeling concepts \n[6] and identified two major directions: unification of definitions and no- tations in behavioral modeling, \nby contrast to the rel- atively mature static modeling (no surprise there); and modeling inter-object \nbehavior declaratively and early in the lifecycle. The second workshop [3] took up where the first left \noff, and the issue of viewpoints came up under different forms, some of which are addressed below. It \nalso brought some bread and butter issues back on the table: how to acquire and express behavioral requirements \n(e.g., business rules) in a way that domain experts can understand and validate, and in a way that modelers \ncan verify and map to an object information model. A number of participants expressed a strong desire \nto continue at OOPSLA 94, and this workshop had a more pragmatic flavor than the first two. Addendum \nto the Proceedings OOPSLA 94 The following major conclusions of the second work-shop provided an appropriate \nframework for continuity: Precise declarative (formal) definitions of concepts (like events, operations, \nroles, actions, triggers, etc.) and specifications of systems based on these concepts are essential for \nsystem speciJication understanding, val-idation, and unambiguous interpretation. Collective behavior \nis essential for information system modeling. It should not be reduced to isolated object speci$cations. \nAn appropriate frame of reference is essential for un-derstanding (e.g., business rules should be separated \nfrom computer-based implementation). Relations be- tween frames of reference should be explicit. Diflerent \nmodeling approaches should be reconciled using a small set offundamental common concepts. The submissions \nto this OOPSLA 94 workshop show that precise and rigorous (if not formal.. .) behavioral specifications \nof collective behavior are being very se-riously considered and successfully used in industry, both for \nrequirement specification and for program de-velopment. This industrial experience is encouraging: as \nshown in the Proceedings of this Workshop [lo], such diverse application areas as telecommunications, \ndocument management, financial applications, etc., as well as international standardization documents, \nsuc-cessfully (re)use the same small set of fundamental concepts. These concepts provide a good framework \nfor precise and abstract specification of the collective state (invariants) and collective behavior (pre- \nand post- conditions for operations) of several objects. The great- er concern with methodology is the \nconsequence of the fact that computing science is one of the less knowledge- oriented branches of applied \nmathematics [7]. The ap-proaches discussed at this year s workshop will therefore help to substantially \nreduce the amount of reinvention -and corresponding frustration! The following quote set the stage for \nthe workshop: ...many students don t want to be shown effective pat-terns of reasoning, they want to \nbe told what to do. They have been trained to expect another mathematical cookbook, automatically read \ngeneral guidelines as rec- ipes that are supposed to suffice for the next exercise (something they -of \ncourse -rarely do). They expect a exemplified by a rephrased excerpt from an otherwise superb nameless \npaper: the 00 paradigm is excellent for modeling self- contained objects, but cannot be applied for modeling \npersistent relations.. . In this paper, we present a new model.. . Fortunately, the situation is substantially \nbetter: quite a few papers in these Proceedings successfully apply the 00 concepts for specifying per- \nsistent relationships; and an IS0 standard [8] does just that! so-called complete methodology, with each \nnext exer-cise carefully tailored to the potential of the preceding example and complain when they don \nt get what only the quack can provide. [We just addressed a bunch of industrial computing scientists, \nand the above phenom-enon was alarmingly pronounced.] (E.W.Dijkstra. Management and mathematics) The \norganizers have structured the contributions into Approaches , Enterprise understanding , Abstrac-tion \nby specification , Standards , Documents , and Applications . Each contribution was given 10 minutes \n(enforced!) to present the most important ideas. Ques-tions and answers became a basis for discussion. \nAlthough the workshop participants have quite different backgrounds, their presentations and approaches \ncon-centrated on a small number of the same important conceptual issues. What follows is an overview \nof these issues (and discussions), based on the perception of the workshop organizers. We don t even \nattempt to state that this is the only correct perception!  Participants APPROACHES: Doug Bryan (Stanford \nUniversity); B. Cameron, C. Geldrez, A. Hopley, D. Howes, B. Mirek, and M Plucinska, (BNR Canada); John \nDaniels (Object Designers Ltd.); Bent Bruun Kristensen (Aalborg Uni-versity); James J. Ode11 (James Ode11 \nAssociates); David A. Redberg (AT&#38;T Bell Laboratories); Charles Richter (Objective Engineering, Inc.) \nENTERPRISE UNDERSTANDING: Joseph Morabito (Merrill Lynch &#38; Co., Inc.); Jim Ross and Tom Smith (CAP \nGemini America,) ABSTRACTION BY SPECIFICATION: Roger F. Os- mond (Bytex); Dave Thomson (Object Technology \nIn- ternational Inc.) STANDARDS: Colin Ashford (Bell-Northern Re- search, Ltd); Erik Colban and Heine \nChristensen (Bellcore); Haim Kilov and Laura Redmann (Bellcore); Richard Sinnott and K. J. Turner (Department \nof Com- puting Science, University of Stirling) DOCUMENTS: Lillian Cuthbert (Bellcore); Haim Ki- lov \n(Bellcore) APPLICATIONS: Bill Harvey (Robert Morris College), Richard Price (Department of Veterans Affairs), \nand Cameron Schlehuber (Department of Veterans Affairs, VHA Database Administration); Augustin Mrazik \nand Jana Ceredejevova (ArtInAppleS spol. s. r. 0); Stephen L. Nicoud (Boeing Computer Services); Kingsley \nNwo- su (AT&#38;T Bell Laboratories) and Bhavani Thuraising- ham (The MITRE Corporation)  Activities \nSpecifications Specifications were the subject matter of the workshop. The participants discussed both \nthe general properties of specifications and examples and lessons of their use in particular application \nareas. Some properties of a specification should be true for all viewpoints, e.g., internal consistency \nand correctness. Completeness (be- ing able to answer all questions that could be reasonably asked3) \nis defined with respect to a viewpoint. In other words, only viewpoint-specific questions could be asked, \nand therefore the quantitativeness ( how precise... ) is determined by the consumer s viewpoint. It was \nnoted (Redberg) that the work we re doing can be thought of as the analogy to software design patterns \nin the information perspective (see also [7, 12, 151). Indeed, an information modeling construct is nothing \nmore than an information modeling design pattern; it is reusable in application-specific models, it is \nan ab-straction, it solves a real, general problem, and it pre- cisely describes the thing (the objects \nparticipating in the relationship) and how the thing works (the behavior based on the relationship). \n[Unfortunately, not all soft- ware design patterns are defined in a rigorous manner!] Software patterns \nare used to architect software systems by abstracting code. Information modeling constructs are used \nto specify business information systems by abstracting (collections of) real-world entities. There exists \nan obvious need to relate the two viewpoints, and implementation libraries like the ones described in \n[ 121 can be used for this purpose.  The need for abstraction Many participants were quite unhappy \nwith the current state of requirements. Several challenges were men-tioned: requirements provided in \nterms of solutions; thousands of use cases; and no common vocabulary (Cameron et al.). As there is more \nto real world than just software (Redberg, Daniels, and others), the re-quirements need to be formulated \nin terms the customer can understand. Therefore constructs like message send-ing are not an appropriate \nway to write these require-ments: they overspecify (Perhaps, they are as low-level as, in other contexts, \ngoto s, pointers, or hypertext links 3 with a view to requirements modelling, the purpose of a model \nis to ask questions and demonstrate that answers can be given entirely in terms of the model. [ 161 ?he \nneed to separate these concerns has been clearly stated, in particular, in the Open Distributed Processing \nDraft Standard: Spec- ifications and their refinements typically do not coexist in the same system description \n[5]. are [ 131.). The customer has to verify requirements because otherwise the system to be built may \nbe quite different from what the customer wants. Therefore there is a need to clearly separate the concerns \nof the business enterprise from the concerns of the system development. The fundamental purpose of a \nspecification is to com-municate intent. A good specification should be correct, complete, and be in \nthe language of the consumer; and one sentence is preferable to 50 pages describing what the wrong thing \nis (Osmond). The specification should state what business processes and their effects really are, rather \nthan describe 10,000 event traces (Richter). Some customers prefer to present requirements in terms of \nexternal interfaces to currently existing systems. Al-though these presentations do not use system develop-ment \nterms, they reuse forms, charts, etc. from current legacy systems (Ross, Smith, and others). Obviously, \nthis viewpoint on requirements does not properly repre-sent the concerns of the business. As an example \nfrom the document management business (Kilov), paper and electronic document have quite different external \ninter-faces, but solve the same business problems, and there- fore the description of a business should \nnot be based on a particular (legacy or otherwise) electronic document management system. How do we keep \nusers from presenting requirements in terms of solutions? The user often does design instead of analysis, \nand there is a need to distinguish between what the user says ( how ) and what the user wants ( what \n). There is also a need to distinguish a system for hire from a system for sale (Osmond). Analysis deals \nwith things about which you have no choice (Daniels); design is everything else. These things have to \nbe discovered, and walkthroughs (see [ 121) are es-sential for this: they break people out of a box (Ross, \nSmith) by getting them into a meeting room where different viewpoints are merged. Sometimes different \npeople get to know about each other as there is a lot of replication of like functions across different \nlines of responsibility (Ross, Smith, Osmond). Multiple projec-tions from the same specification have \nto be used for multiple consumers (Osmond).  Unrealistic expectations You can t push the button so that \nthe system comes out the other side. And if you can then the user is left behind. (Ross, Smith). In other \nwords, miracles don t happen: the domain expert, modeler, and developer have to think. Obviously, tools \nand object (collection) librar-ies help a lot, but in order to reuse a particular construct, its context \nhas to be understood. Addendum to the Proceedings OOPSLA 94 Precise declarative specifications Many \nparticipants were very unhappy with lack of pre- cision in lots of published work on 00 methods. The \nneed to specify behavioral semantics in a precise and explicit manner has been clearly recognized. Declarative \nspecifications, including invariants for (collections of) objects, as well as pre- and postconditions \nfor operations, have been presented and supported by many participants. These specifications have also \nbeen promoted by IS0 standardization documents on Open Distributed Pro-cessing (ODP) [ 1,5] and General \nRelationship Model (GRM) [8,11]. All examples in the GRM use this ap- proach (by presenting a specification \nin stylized En-glish), and the users accept it if you don t tell them that the specifications are formal \n(Kilov, Redmann). There exist several problems with this approach. Where-as it obviously makes a specification \nprecise (and often quite explicit!), many customers and modelers may not be used to this kind of precision \nas there seems to exist a contention between formality and clarity (Thomson, Bryan, and others). Many \ncustomers (and modelers) will be more comfortable in using precise specifications translated from a formal \nnotation like Z or Object Z into stylized English. Some people close up their minds when they hear about \npre- and postconditions (Richter), but they usually accept stylized English specifications (Kilov, Odell). \nAlmost all of us have encountered precise specifications in real life: think about legal documents, e.g.,, \ncontracts like the one for buying a house (Kilov). Terse specifications are difficult for end users (Bryan), \nand so explanatory comments -as recommended by mature Z users, for example -may be very useful. Visual \nformalisms may augment or be otherwise used in the specification, provided that each element and relationship \nbetween elements of this formalism has been precisely and explicitly defined (Daniels, Redberg, Kilov). \nIf these precise definitions do not exist -as too often happens -then a set of cartoons (diagrams) does \nnot help much: we need to annotate pictures with a little bit more formality (Nicoud). And quite a few \nusers understand that informal integrity constraints are difficult to enforce (Kilov, Redmann). Another \nrelated problem deals with terminology. The same names may denote very different things ( altitude has \ndifferent meanings in different systems (Nicoud), and all of us know that more generic terms like cus-tomer \nare context-dependent). The approach taken by the Reference model for Open Distributed Processing provides \na solution: a name is usable for denoting entities only within a particular, explicitly specified, context \n[5], so that the same entity may have different names in different contexts, and the same name may denote \ndifferent entities in different contexts. Still another problem deals with understandability. It is not \nsufficient for an understandable specification to be precise: even a Smalltalk specification may present \nma-jor problems (Thomson)! Abstraction is needed as well, and precision is applicable at all levels of \nabstraction. A precise, but not abstract, specification is unmanage- able and therefore not understandable. \nEiffel has been successfully used for embedding extractable specifica-tions (Osmond), in particular because \nit has language mechanisms for declarative contract specifications (pre-and postconditions, as well as \nclass invariants). A human, not a machine, maps the specification onto an imple-mentation. Understandability \nis as important -if not more -than verifiability (Richter). The need for a specification to facilitate \ncommunication among people (Thomson) has also been stressed, e.g., in [12, 15, 161. A contract happens \nbecause a meeting of the minds is assured; the same is needed for creating specifications. Precision \nis needed for the minds to meet (not just in adversarial situation), and then the specification is cre- \nated cooperatively, as a team effort (Kilov, Ross, Smith, Harvey, and others). As an example, in the \nVeterans Administration hospital information system, in order to document the intent, email messages \nleading to the integration agreement about the meaning of data are attached to this agreement (Harvey). \nA specification should provide a deterministic answer to user s ques-tions, although at times the question \nmay have no answer at that level. Different viewpoints may refer to different levels of abstraction. \nDifferent sets of questions are asked for different viewpoints. And finally, often the implementors have \nto supplement the specification. Is a precise specification really that complicated? Con-sider Lewis \nCarroll s quote about compositions (Kilov, Redmann): Alice had begun with Let s pretend we re kings and \nqueens; and her sister, who liked being very exact, had argued that they couldn t, because there were \nonly two of them, and Alice had been reduced at last to say, Well, you can be one of them then, and I \nll be all the rest. (Through the Looking Glass) Collections of objects No object is an island (Kilov, \nRedmann, Kristensen, Daniels, Richter, and others). Most OOA methods do not deal with system-level functionality \n(Richter) or with properties of collections of objects. Early allocation of behavior to classes often \npromoted because of tradi- tional 00 programming constructs is bad . There is a need to deal with relationships \nexplicitly by providing a more abstract specification of aggregate behavior and separating it from inner \nobject behavior (Bryan, Richter, and others). Traditional specifications using attributes and isolated \nobject operations ( object-centered method invocations (Kristensen)) are not appropriate (too de-tailed) \nfor understanding, although they may be quite precise (Kilov, Redmann, Redberg, Kristensen, Ash-ford, \nBryan, and others). Various approaches to dealing with collections of ob- jects have been discussed. \nCollective state, for example, is specified in the IS0 General Relationship Model using an invariant \nfor a relationship. This approach is supplemented by specifying pre-and postconditions for operations \napplied to collections of objects (collec-tive behavior). It has been described in more detail in [ 121 \nand has been successfully used to create under-standable and reusable specifications (Kilov, Redmann, \nRedberg, Ross, Morabito, and others). In particular, the same generic relationships (composition, dependen-cy, \nsymmetric relationship, and so on) have been pre-cisely defined and reused in very different application \nareas. For example (Redberg), an attribute-based model for telecommunications network and service operations \n(without easily understandable semantics) has been re-placed with a much more understandable and reusable \nspecification using generic relationships like dependen- cy described in [ 121. This model was provided \nboth to users and developers. Thus, a library of sufficiently rich and expressive information modeling \nconstructs can be specified in a precise and abstract manner, stan- dardized (as in [8,11]) and successfully \nreused. In another approach (Richter), a function is specified using initiator, outgoing signals, and \npre- and postcon- ditions (in pseudo-English): use English, but always talk in terms of object model \nconstructs. Individual object behaviors may be specified later. Similarly (Daniels), behavior is described \ndeclaratively, by means of events and their order; an event has pre-and post- conditions. Similarly (Odell), \nbusiness rules are pre-sented rigorously, in stylized English, using, e.g., oper- ation constraint rules \n(pre- and postconditions), structure constraint rules (invariants), and so on. Similarly (Kris-tensen), \ntransverse activities representing joint behavior have a directive and participants, may be classified \n(generalized and specialized), aggregated [e.g., pre-review, paper-evaluation, and post-review are aggregat- \ned into review-activity], etc. These activities represent idioms useful in analysis, design, and programming. \nActivities, functions, operations, etc., -and invariants! -jointly owned by several objects can be (if \nthere is such a desire!)- implemented using messages attached to particular objects. This is not needed, \nhowever, at the specification level. Certain existing languages (like CLOS) permit implementation of \ncollective behavior.  Standards Some IS0 standards, such as ODP [1,5] and GRM [8,11], explicitly deal \nwith specification of behavioral semantics. They define general concepts and constructs reusable in all \napplication areas. They specify semantics in a precise, and often formal, manner. These spec-ifications \nare written in stylized English, and some es-sential ODP specifications are formalized in [l] using such \nnotations as LOTOS and Z. These standards have been successfully used to specify the TINA-C architecture \n-reusable design patterns for broadband networks (Colban, Christensen). The log- ical framework architecture \nhas been built upon ODP information, computational, and engineering view-points. However, the ODP information \nviewpoint had to be expanded because of the need to specify relation-ships, and therefore the GRM has \nbeen used in the information model. Invariants and pre- and postcondi- tions have been successfully used \nin TINA-C spec-ifications. Several ways of (not one-to-one!) mapping between information and computational \nmodels have been described. The standards themselves have been discussed in some detail (Ashford, Kilov, \nRedmann, Sinnott), with a strong emphasis on the why , i.e., on design considerations. The need for better \nunderstanding and for distinguishing between the ontology and representation (Ashford) has been stressed \nby all participants. Declarative specifica-tions, such as invariants for defining a managed rela-tionship \n(Ashford, Kilov, Redmann) and pre- and post- conditions for the ESTABLISH operation for a managed relationship \n(Kilov, Redmann), provide a way to under- stand and therefore reuse on many levels, from concepts (such \nas invariants) to (fragments of) specifications. The participants stressed the need for formal descrip-tions \nof concepts and constructs, especially referring to the ODP approach (Sinnott) where Part 4 of the ODP \nReference Model [l] provides the architectural seman-tics of ODP through the interpretation of basic \nmodeling and specification concepts of [5] using various formal description techniques. It appears (Sinnott) \nthat Z (or its 00 extensions) is more appropriate for specifying the ODP enterprise and information viewpoints, \nwhereas LOTOS -for the computational viewpoint.  Documents Domain experts, modelers (specifiers), developers, \nand others use documents in their work. These documents are quite complicated and need to be specified \nas well. In modeling a document collection, there exists a need to separate between the contents, logical \nlayout, and Addendum to the Proceedings OOPSLA 94 physical presentation (Kilov). To make documents un-derstandable, \nthe document contents model should cor-respond to the model of enterprises described by these documents. \nExisting technology (such as hypertext link management (Kilov) or SGML (Cuthbert)) solves some problems \nhere, but is not adequate for specifying se-mantics of complex document collections.  Part-whole And \nfinally, there was a heated discussion about whether a system behavior may be defined from its parts \nalone? It appeared that, in addition to parts, we need the de- scription of the relationships between \nparts and the description of the whole as well. Example (Kilov): when a document is created out of components, \nperhaps com-ponents of other documents, not all document properties are defined by the components properties \nor even by the relationships between them. The new whole is not just the sum of the parts (e.g., the \ntitle of a new document is not defined by its parts). Given a high-enough level of components, could \nyou build a system? The users require and describe capabil-ities, parts . Can the specification of system \nbehavior be defined out of specifications of component behav-iors? (Things like relationship objects \n(and perhaps in-variants) are also parts!) Perhaps... pushouts in category theory may provide an answer \n(some workshop partic-ipants have also been students at the category theory tutorial by Jose Fiadeiro \nand Tom Maibaum a day before and highly praised it). Conclusions The workshop considered in detail how \nto meet the demand for a rigorous specification that corresponds appropriately to a form of presentation \nwhose meaning can be validated by domain experts. Particularly pro-ductive was the discussion of the \ntension between the mode of customer requirements presentation and the need for the analyst to receive \nrequirements that are not distorted by speculations on the part of the domain expert that transcend the \nexpert s role and anticipate solutions. Dialog underscored the importance of correct treatment of the \ncollective behavior of objects. We start- ed the discussion on part-whole , made some progress, and want \nto continue at OOPSLA 95.  References 1. ISO/IEC JTCl/SC 21/WG 7, Information Technology -Basic Reference \nModel of Open Distributed Processing -Part 4: Architectural Semantics, International Stan-dards Organization, \nAugust 1994. Working draft. 2. W. Harrison and H. Ossher, Subject-Oriented Pro-gramming: A Critique of \nPure Objects, in Proceedings of OOPSLA 93, pp. 41 l-428, ACM Press. 3. B. Harvey, H. Kilov, and H. Mili, \nSpecification of Behavioral Semantics in Object-Oriented Information Modeling: workshop report, OOPS \nMessenger, ACM Press, 1994. Addendum to the OOPSLA 93 Proceed-ings, pp. 85-89. 4. Geir Magne Hoydalsvik \nand Guttorm Sindre, On the Purpose of Object-Oriented Analysis, in Proceed-ings of OOPSLA 93, pp. 240-255, \nACM Press. 5. ISO/IEC JTClISC21IWG7, Basic Reference Model for Open Distributed Processing -Part 2: \nDescriptive Model (DIS 10746-2, February 1994). 6. H. Kilov and B. Harvey, Object-Oriented Reasoning \nin Information Modeling: Workshop Report, in OOP-SLA 92 Addendum to the Proceedings, pp. 75-79. 7. A.J.M. \nvan Gasteren, On the shape of mathematical arguments. Lecture Notes in Computer Science, Vol.  445. \nSpringer Verlag, 1990. 8. ISO/IEC JTClSC21, Information Technology - Open Systems Interconnection -Management \nInformation Services -Structure of Management Information -Part 7: General Relationship Model. CD ISO/IEC \n10165-7 N 8454. March 30, 1994. 9. E.W.Dijkstra, Voorwoord. EWDl156,9 June 1993. 10. Proceedings of \nthe OOPSLA 94 Workshop on Pre- cise Behavioral Specifications in Object-Oriented In-formation Modeling, \nRobert Morris College, 1994. 11. ISOIJTClISC21 (Open Systems Interconnection, Data Management and Open \nDistributed Processing. OS1 Management) P.Golick, H.Kilov, E.Lin, L.Red-mann. U.S. National Body Comments \non SC21 N 8454, ISO/IEC DIS 10165-7, General Relationship Model. Document number X3T5/94-198, July 11, \n1994. 12. H.Kilov and J.Ross, Information Modeling: an Object-oriented Approach. Englewood Cliffs, NJ: \nPrentice-Hall, 1994. 13. H.Kilov. On understanding hypertext: are links es-sential? ACM Software Engineering \nNotes, Vol. 19, No. 1 (January 1994), p. 30.  14. B.Liskov and J.Guttag. Abstraction and speci$cation \nin program development. McGraw-Hill, 1986. 15. C.Morgan. Programming from specifications. Sec-ond edition. \nPrentice-Hall, 1994. 16. Micheal Mac an Airchinnigh. Tutorial lecture notes on the Irish school of the \nVDM. In: VDM 91. Formal Software Development Methods. Lecture Notes in Com- puter Science, Vol. 552, \nSpringer Verlag, 1991, pp. 141-237.   \n\t\t\t", "proc_id": "260028", "abstract": "", "authors": [{"name": "Haim Kilov", "author_profile_id": "81100225658", "affiliation": "Bellcore", "person_id": "PP31084167", "email_address": "", "orcid_id": ""}, {"name": "Bill Harvey", "author_profile_id": "81100589635", "affiliation": "Robert Morris College", "person_id": "P30438", "email_address": "", "orcid_id": ""}, {"name": "Hafedh Mili", "author_profile_id": "81410594736", "affiliation": "University of Quebec at Montreal", "person_id": "PP39080579", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260028.260186", "year": "1994", "article_id": "260186", "conference": "OOPSLA", "title": "Precise behavioral specifications in OO information modeling", "url": "http://dl.acm.org/citation.cfm?id=260186"}