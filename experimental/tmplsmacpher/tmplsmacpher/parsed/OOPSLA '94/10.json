{"article_publication_date": "10-01-1994", "fulltext": "\n Panel Report: Development of Distributed and ClientlServer Object- Oriented Applications: Industrial \nSolutions Lutz Heuser, Digital Equipment GmbH Introduction Computer networks have been introduced in \nalmost all areas of business. Moreover, connecting local area netwotks through wide area netwotics has \nbecome quite popular. However, the software running on such an infrastructure still seldom use it. Most \noften the problem is the lack of expertise, on the part of the application programmers, in writing such \napplications. The IT industry as well as computer scientists have investigated and evaluated approaches \nthat should help these programmers to make better use of the networks. This panel discussed certain solutions \nthat help to better utilize the network. DSOM [l], OODCE [2], and COM [3] were the systems presented \nby the panelists. The remainder of this report describes the outcome of the panel session. In order to \nget a complete picture I recommend to read the panel paper published in the OOPSLA 94 proceedings [4] \nfirst.  Summary of Presentations The panel started with bad news, unfortunately. Steve Rabin was not \nable to attend the panel session. Since no replacement had been appointed, his position statement was \nnot presented. I started with an introduction statement where I emphasized the purpose of the panel, \ni.e. that application programmers should get some of their questions answered around development of distributed \nand client/server applications. The taxonomy of distribution was discussed to make the audience aware \nof the fact that the client/server approach is not the ,same as the peer-to-peer approach. Major characteristics \nof distribution were presented such as locality of objects and the environment of the application, i.e. \nexternal constraints that require different locations of objects. Interoperability with other applications \nin the network was also mentioned as well as integration of existing applications into new ones and the \nissue of mobility, i.e. moving objects bctwccn diffetcnt locations. Another topic of the discussion was \nthe level of granularity to be supported. Should application-level objects such as documents be treated \nlike programming-level objects such as C++-objects? Is there one unique approach that can be used or \nare the requirements different? Which of the existing approaches can be seen as a de-facto standard? \nThe panelists addressed these questions during their position statement as you can see below. The situation \napplication programmers are faced today with is as follows: The IT-networks are complex and heterogeneous \nsuch that different operating systems and network architectures are used within a given enterprise. PCs \nentered the office and became the most favorite desktop environment with various setver systems at department \nlevel. Recently, a number of new operating systems showed up that Addendum to the Proceedings OOPSLA \n94 increased the complexity of systems and network management. Moreover, the so-called middleware, i.e. \nAPI-based services, became so complex that application programmers could not keep pace. As a result, \nmany features resp. services are poorly used today mainly because of missing expertise. This holds in \nparticular for distributed applications. Therefore, the following requirement was stated: Any given approach \nto support the development of distributed applications should lead to extendible, maintainable and (partially) \nreusable software. I concluded my introduction with the statement that application programmers should \nenforce the development of (de- facto) standards that really work. First panelist to address the issues \nmentioned was Hari Madduri from IBM. He is one of the principle architects of SOM resp. the distributed \nversion DSOM. Hat-i started with describing the criteria of industrial solutions: . An industrial solution \nhas to follow (de-facto) standards. It has to be Language neutral, i.e. the distribution setvice should \nenforce the use of a particular language. . The service has to be open and has to handle evolution. \nIt has to deal with legacy applications. . ... industrial solution needs to address development and \ndeployment needs. Hari stated that he believes that industrial solutions for distribution should be based \non class libraries and frameworks. Distributed programming is hard to do and distributed languages have \nnot caught on. Whereas class libraries can hide nasty aspects of distribution and can extend a language \nad infinitum . Today s problems with class libraries are that they cannot be shipped in binary form, \nthey do not support multiple languages and multiple compilers. Hari stated that SOM is braking these \nbarriers. SOM has a robust object model and provides an open architecture. DSOM is the distributed extension \nof SOM supporting location transparent object invocation, flexible class frameworks and wrapping of legacy \nsoftware. Next panelist was Shawn Woods ftom Digital. Shawn is working on the integration of Microsoft \ns OLE V2 and CORBA called COM (Common Object Model). He agreed to Hari that an industrial solution should \nbe language neutral, open and extendible, and the libraries should be shipped as binaries. Re-compilation \nof applications should be avoided in case of new versions of class libraries. Technical features of COM \ninclude scaleable typing, i.e. strong typing with mixed versions , seamless distribution, and a scalcable \nclass model. Shawn also pointed out some business aspects of COM such as market size, proven technology, \nand the ability to add value by building library extensions. Finally, John Dilley from HP presented his \nposition statement. Different to the two before, he was not in favor of CORBA and criticized the outcome \nof the CORBA Vl specification. He presented OODCE, a new product of HP that relies on OSF-DCE, a set \nof setvices that include remote procedure call, threads, security, naming and time services. Goals of \nOODCE were the support of software development using standard DCE and C++, the encapsulation of functionality, \nand the provision of distributed objects using the DCE object model. They extended the interface description \nlanguage such that C++ class are generated rather than C functions. John stated that the advantages of \nOODCE include simpler development of distributed applications, interoperability with other DCE-based \napplications and the fact that no C code has to be written.  Questions and Answers In this section the \nquestions of the audience are reported as well as the answers of the panelists. In order to focus no \ntranscript of the session is given but the essentials are highlighted. Q: How does security play a role? \nJohn: Secure communication is essential. DCE includes Kerberos. Hari: Kerberos is not the only way to \ngo. Security can be also supported by class libraries. Shawn: Security should go into the object request \nbroker specification. Q: How are highly scaleable distributed applications supported? Hari: Good architectures \nand class libraries are needed. Sham: Middlewam support is not enough. Class libraries have a role in \nthis. John: DCE already has some support for scalability. We do not need to start from scratch. Lutz: \nObject-oriented design leads to peer-to-peer rather than client/server solutions. That helps to scale \napplication. Q: What about fine grained distribution? Hari: DSOM can handle fine grained distribution. \nShawn: Any solution need to support fine grained objects. It is needed to move small objects around respectively \nto decide on a per object base. John: We need to tune for lots of small objects. DCE has some problems \nhere. The semantics of object passing is not understood well. Passing object references is not the right \nsolution for small objects but object migration has too much overhead. Q: Are there any plans for adding \ntransaction monitors? The panelists support the idea but none of them knew of any plans about this. Q: \nHow does object interoperability across languages work? John: This is done by the transport layer and \nthe IDL description. Hari: Through the binary standard of DSOM. Shawn: You cannot map one language to \nanother. Coming up with an object model and maps it to languages means you might not be able to use all \nof the features of a given language. Q: How do you handle network separation or disconnection of nodes? \nShawn: COM handles this for you. Hari: DSOM does it by proxies. John: A hard problem is to handle reference \ncounters, i.e. for garbage collection. DCE contexts can deal with some of the aspects. Shawn: Reference \ncounting and garbage collection need substantial assistance ftom the system. Cyclic references are a \nproblem to address.  Conclusion and Outlook Distribution has become an issue to be addressed by vendors \nand application developers due to the increasing network infrastructure. Communication inside local area \nnetworks has become as popular as using wide area networks such as Internet. Therefore, users demand \nthat their applications make easily use of new services such as WorldWideWeb. In order to do so, application \nprogrammers riced adequate industrial solutions to support the characteristics of distribution mentioned \nearlier. The panel addressed the requirements based on two different approaches: CORBA and DCE. While \nthe CORBA-based approaches easily incorporate the object into their models of distribution they suffer \nftom the fact that CORBA-compliance is no guarantee that applications on heterogeneous networks will \nwork. In fact, the OMG and its members are currently working on CORBA V2 to ovemome such shortcomings \nlike missing interoperability of two and more ORBS based on the same CORBA specification. OODCE overcomes \nthe interoperability constraint by relying on OSF-DCE which supports interoperability even with none \nobject-oriented applications. But, DCE has been specified without an object-oriented approach in mind, \nit is procedural oriented. Therefore, many features such as inheritance, encapsulation, and object integrity \nare not addressed and need to be added by upper layers. There was a common understanding by all panelists \nthat any solution has to be language independent. Hari stated that distributed object-oriented languages \nwere Addendum to the Proceedings OOPSLA 94 good to learn from but would be inadequate as industrial \nsolutions. Based on my experiences with DODL [5] and DOWL [6], a design language and an PI extension \nof Trellis [7], I agree with Maduri but language specific library extensions and tools as in our recent \nsystem, DC++ [4] (distributed C++), are beneficial for those application developers that could concentrate \non one language such as C++. The same WI should hold for OODCE. In summary, industrial solutions for \ndistributed object-oriented applications are available but they 171 have to become more mature and more \nwidely used. CORBA V2, OLE V2, DSOM and OODCE seem to have the best chances to overcome the shortcomings \nmentioned. The solutions are there. What is needed is a common effort that combines the best features. \nI know that sounds like an unrealistic dream but -as stated earlier-application developers should require \nmerging the efforts of the vendors for the sake of simplicity. If the vendors will fail in this, developers \nof distributed applications might step back from the object-oriented approach.  Acknowledgment I like \nto thank Michael KiIian for taking notes during the panel session. I also like to thank Pat O Brien and \nIra Forman for their valuable comments and help. References dustry Solutions, OOPSLA 94 proceedings, \n317ff, October 1994 M. Miihlhauser, W. Gerteis, L. Heuser, DOCASE: A Methodic Approach to Distri-buted \nProgramming, Communications of the ACM, Vol. 36, Nbr. 9, 127ff, September 1993 B. Achauer, The DOWL Distributed \nObject-Oriented Language, Communications of the ACM, Vol. 36, Nbr. 9,48ff, September 1993 T. Cooper, \nB. Bulbs, M. Kilian, C. Wilpolt, C. Schaeffert, An Introduction to Trellis/Owl, OOPSLA 86,9ff, 1986 Cl1 \nI.R. Fotman, S. Danforth, H. Madduri, Composition of Before/ After Metaclasses in SOM, OOPSLA 94 proceedings, \n427ff, October 1994 PI J. Dilley, Object-Oriented Distributed Com-puting With C++ and OSF DCE, DCE -The \nOSF Distributed Computing Environment, A. Schill (ed.), Lecture Notes in Computer Science, Springer, \n256ff, October 1993 [31 K. Brockschrnidt, Press, 1994 Inside OLE2, Microsoft [41 L. Heuser, J. Dilley, \nH. Madduri, S. Rabin, S. Woods, Development of Distributed and Client/Server Object-Oriented Applications: \nIn-   \n\t\t\t", "proc_id": "260028", "abstract": "", "authors": [{"name": "Lutz Heuser", "author_profile_id": "81100317188", "affiliation": "Digital Equipment GmbH", "person_id": "PP37037810", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260028.260116", "year": "1994", "article_id": "260116", "conference": "OOPSLA", "title": "Development of distributed and client/server object-oriented applications (panel): industrial solutions", "url": "http://dl.acm.org/citation.cfm?id=260116"}