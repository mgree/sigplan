{"article_publication_date": "10-01-1994", "fulltext": "\n Report of the Workshop Artificial Intelligence for Object-Oriented Software Engineering Dennis de Champeaux \nOnto00 14519 Bercaw Ln San Jose, CA 95124, USA Corporate Hermann Kaindl Siemens Austria, PSE Geusaugasse \n17 A-l 030 Vienna, Austria Albert Schappert Research &#38; Development, Otto-Hahn-Ring 6 Joachim Laubsch \nHP-Labs 1501 Page Mill Rd, MS 11714 Palo Alto, CA 94304-1181, USA Siemens AG D-81 730 Munich, Germany \n1 Introduction 2 The workshop Artificial Intelligence for Object-Oriented Software Engineering (AI for \n00 SE) was announced and organized by D. de Champeaux, H. Kaindl, J. Laubsch, and A. Schappert for OOP-SLA \n94. The objective of this workshop was to The strengthen the bridges between AI and viding a discussion \nforum on the major ence. In particular, the workshop was . to provide an overview of academic trial activities \n. to serve as a discussion panel for nation of these efforts 00 by pro- 00 confer-intended and indus- \nthe coordi- . to identify research topics of common interest . to identify industrially applicable results \nof current research . to establish a network of people and organiza-tions interested in these questions. \n Participants participants were: Edward Cuoughlin edwardc@netcom.com Frank Coyle email: cozle@seas.smu.edu \nDennis dechampeaux ddc@netcom.com Jiri Dvorak dvorak@serd.cscs.ch Peter van Emde Boas peter@fwi.uva.nl \nRobert Godin godin.robert@uqam.ca Hermann Kaindl kaih@siemens.co.at Jimmie Kelly kelly@cse.uta.edu Joachim \nLaubsch laubsch@hpljl.hpl.hp.com F. Pachet pachet@laforia.ibp.fr Jean Francois Perrot jfp@laforia.ibp.fr \nDean Mackie Brain Phillips brianp@slc.com Albert Schappert Albert.Schappert@zfe.siemens.de Honna Segel \nhonna@bnr.ca, neilt@bnr.ca 3 Agenda Based on the contributions, two major sections could be identified: \n. AI-based tools for object-oriented software engineering and . AI support for object-oriented design. \n 4 Presentations Almost all of these presentations lead to immediate discussions and proposed topics \nto be discussed in the afternoon. Revised and extended papers of the presentations are included in the \nproceedings. J. Kelley introduced a Scenario-Based Engineer-ing Process. Scenario-based engineering offers \na development process for complex systems design, especially for large application systems compiled of \nautonomous components. It includes different analysis paradigms like Structured Analysis and Object-Oriented \nAnalysis. The development en-vironment presented was realized on the basis of different AI techniques. \nIt can be viewed as an in-stantiation of the DSSA (Domain Specific Software Architecture) model. J. Dvorak \npresented A Programming Environ-ment for Massively Parallel Programming called PDE. It is targeting the \ndevelopment of soft-ware for massively parallel computers (with dis- tributed memory). Problems concerning \nparal-lelism should be transparent to programmers. The system includes domain-specific specification \nfor-malisms, a knowledge base of algorithms, and an expert system working on those. User interaction \nis template-based, but the system is able to manage incomplete templates and supports their comple-tion. \nJ.-F. Perrot explained the work of his group on A Meta Modelization Technique. The goal is to bridge \nthe gap between different views on the con-ceptual model of software designs: the user s and the implementor \ns. Central issue is the formula-tion of a modeling technique consisting of meta-models and morphisms \n(i.e., transformations) be-tween them. Since these concepts are still un-der development, they were illustrated \nby examples from the database context (Entity-Relationships-diagrams). R. Godin concentrated on object-oriented \nques-tions, he presented A Tool for Building and Evalu-atiing Class Hierarchies Based on a Concept For-mation \nApproach. The technical basis are Galois-or concept lattices. They provide a means for constructing class \nhierarchies in a formal manner. During the talk several existing class libraries were discussed and it \ncame out, that they have not yet reached an optimal design. 5 Game The final activity of the workshop \nwas a game. Its purpose was to record the very personal feelings of the workshop participants about which \ntechniques of artificial intelligence can significantly influence object-oriented software engineering. \nThe rules of the game were the following: . form groups of 2 people . list 5 important issues of OOSE \n(disregarding AI) . rank them . list 5 important issues of AI (disregarding OOSE) . rank them . join \ngroups by two . merge each of the lists to a single one of 8 topics and rank them . join groups by two \n. merge each of the lists to a single one of 12 topics and rank them . join up and identify the 8 most \nimportant topics of each list . represent them in a matrix and rank their interre-lationship (*) There \nwas only a small amount of time for these activities. As the result of this game the follow-ing two lists \nemerged. It is not intended to give a precise definition of the keywords used (it was just brainstorming). \nThe results of the game at the OOPSLA WS were: Achievements of AI Requirements of OOSE AI for OOSE with \na highly motivated and hetero- 1 knowledge repre-A requirements engi-sentation neering 2 knowledge acqui-B \nreusability sition c class and object 3 reasoning identification 4 learning D tools with traceabil- \nity and consistency 5 intelligent inter-faces E dynamic behavioral specification 6 natural language processing \nF validation and veri-fication 7 planning G metrics 8 case based rea-soning H standardization Establishing \nthe relationship between these topics was done in the plenum. The applicability of AI to OOSE was compiled \nin the following matrix: AIB C D E F G H * * * 1 ** 2 * * * * 1: * * * * 3 ** 4 * * * * * * * * 5 ** \n* * 6 * * * * 7 + * 0 ** This table should be read as follows: The first row expresses that AI techniques \nfor knowledge representation (topic 1) are of importance to the 00 challenges (A) requirements engineering, \n(B) reusability, (D) tools with traceability and consis-tency, (E) dynamic behavioral specification, \nand (F) validation and verification. The workshop ended at 17:O0. The results were summarized in a poster \nfor the main conference.  6 Conclusion There is no single final outcome of the workshop. It was interesting \nand delightful to discuss issues of geneous group. As a complementary activity a sim- ilar workshop had \nbeen organized for the ECOOP 94 conference in Bologna, Italy. That one had ad-dressed especially the \ncommunity in Europe. In comparison to the ECOOP workshop, the interest in the American community for \nthis topic -as shown at OOPSLA 94 -was comparably lower.  Summary of the ECOOP Work-shop At the ECOOP \n94 conference in Bologna a similar workshop was offered in order to provide a discus-sion forum there \nand to collect the European view to those questions. The results of that workshop were quite different \nfrom the OOPSLA workshop. First, far more topics were addressed in that meet-ing, namely a AI for 00 \nanalysis, o AI for 00 design, . AI for 00 knowledge representation, and . AI for 00 development. Second, \nsignificant interest concerning agents for the SE process was formulated. And third, the game lead to \nthe following different result: Achievements of AI Requirements of OOSE 1 concept of agents A process \nsupport for software life cycle 2 knowledge repre-sentation B uniform modeling of extended features 3 \nclassification &#38; learning C reuse 4 searching D frameworks/class li-braries -CASE 5 AI languages \ntools 6 explanation tech- E code generation niques F development 7 problem solving support architectures \nG documentation 8 expert systems H interoperability The applicability of AI to OOSE was compiled in the \nfollowing matrix: ABCDEFGH * * * 1 * 2 ****+ * * * * * 3 * 4 * * * * * 5 * * * * 6 * * * * * * * 7 * \n* 8 *  Postscripturn AI has achieved many important theoretical re-sults, but comparably few real-world \napplications yet. 00 software engineering appears an excel-lent candidate for closer cooperation. Objects \nin the analysis phase are agent-like in that they have a private thread of control. The transition of \nan 00 analysis model to an executable high level de-sign could exploit extended agent languages. Au-tomatic \nprogramming could play a role to replace declarative action specifications in transitions in state charts \ninto executable descriptions. Natural processing could help in the identification of ob-jects in use \ncase and scenario descriptions. In general, we believe that AI can play a much larger role in 00 software \nengineering than is cur- rently the case.  \n\t\t\t", "proc_id": "260028", "abstract": "", "authors": [{"name": "Dennis de Champeaux", "author_profile_id": "81100265123", "affiliation": "OntoOO, 14519 Bercaw Ln, San Jose, CA", "person_id": "PP31034638", "email_address": "", "orcid_id": ""}, {"name": "Hermann Kaindl", "author_profile_id": "81100018139", "affiliation": "Siemens Austria, PSE, Geusaugasse 17, A-1030 Vienna, Austria", "person_id": "PP35022824", "email_address": "", "orcid_id": ""}, {"name": "Joachim Laubsch", "author_profile_id": "81100559295", "affiliation": "HP-Labs, 1501 Page Mill Rd, MS 1U14, Palo Alto, CA", "person_id": "P141481", "email_address": "", "orcid_id": ""}, {"name": "Albert Schappert", "author_profile_id": "81100444853", "affiliation": "Corporate Research & Development, Siemens AG, Otto-Hahn-Ring 6, D-81730 Munich, Germany", "person_id": "P13146", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260028.260173", "year": "1994", "article_id": "260173", "conference": "OOPSLA", "title": "Artificial intelligence for object-oriented software engineering", "url": "http://dl.acm.org/citation.cfm?id=260173"}