{"article_publication_date": "10-01-1994", "fulltext": "\n How Do Teams Shape Objects? -How Do Objects Shape Teams? Panel Session Steven Fraser, Kent Beck, Grady \nBooth, Derek Coleman, Jim Coplien, Richard Helm, and Kenny Rubin Background Each panelist was asked \nto provide his definition of team and a position statement reflecting on: Resolved: That Teams AfSect \nObjects, But Objects Do Not Affect Teams. For the purpose of initial positions, panelists were grouped \nby the chair as: For the proposition: Derek Coleman, Jim Coplien, and Kenny Rubin Against the proposition: \nKent Beck, Grady Booth, and Richard Helm Steven Fraser Panel Chair Bell-Northern Research Ltd., Ottawa, \nOntario, Canada. sdfraser@bnr.ca Teamwork is the most important key to success in almost all software \nprojects. What makes a good team (roles, organization, education, communi -cation bandwidth, management, \nprocess, etc.) remains an open question in many situations. To quote Gerald Weinberg from Understanding \nthe Professional Programmer (Dorset House, 1988): The simple fact is, that we don t know how to assess \nthe d@culty inherent in any meaningful problem. In every useful experiment on program- ming so far performed, \nwhere several program -mers or teams worked on the Same problem, there have been variations of 10 to \nI or more in performance. Usually 30 to I or 50 to I is a more typicalfigure. My own conclusion [Weinberg \ns] from this is that in many cases the concept of problem difjculty makes no sense as a measure- ment. \nThe dtfftculty seems to be a relationship be- tween the problem and the approach to solving it. The goal \nof this panel is to examine how teams affect objects and how objects affect teams. Why should a chicken-and-egg \nchallenge be worthy of debate? Two related questions at the heart of the matter arise: Firstly, is there \na team organization that can facilitate object system development? Secondly, is there an object organization \nthat makes teams more effective? The assumption is that insight into these questions will improve the \nstate of the practice. According to Peter Senge et. al. (The Fifth Discipline Fieldbook, Doubleday 1994) \nthe word team can be traced back to the Indo-European word deuk (to pull); it has always included a meaning \nof pulling together. . . . We [Senge, et. al.] define teams as any group ofpeople who need each other \nto accomplish a result. Tasks performed by a team can be characterized broadly as generation (planning), \nselection (decisions), negotiation (trade-offs), and execution (implementation). Effective team performance \nis dependent on a collective strategy, group motivation, and focused capability that matches skills, \nroles, and responsibilities to the set of tasks. Biography Steven Fraser is on staff at Bell-Northern \nRe-search s Computing Research Laboratory in Ottawa. He is currently on assignment in Pitts - burgh at \nthe Software Engineering Institute (SET) collaborating with the Application of Software Models project \non the development of domain engineering techniques. Since joining BNR in 1987, Fraser has contributed \nto the ObjecTime project, an 00-based CASE-Design Tool and to the BNR BCS software development process. \nFraser completed his doctoral studies at McGill University in Electrical Engineering. He holds a Master \ns degree from Queen s University at Kingston in applied Physics and a Bachelor s degree from McGill University \nin Physics and Computer Science. Fraser is an avid photographer and opera buff. FirstClass Software 70761.1216@compuserve.com \n The most important remaining barrier to pro - grammer productivity is the bandwidth of human communication. \nI am exploring an approach to improving communication called patterns, which encode common usage in simple \nphrases. Objects are an ideal target for patterns because they en- courage deferring some design decisions \nuntil much later than other programming methods. Biography Kent Beck has 10 years of experience in \nobjects. He is best known for his contributions to the CRC object finding technique and for applying \npattern designing and building objects. Grady Booth Rational Software Corporation egb@rational.com For \nthe purpose of this debate, let me broadly de- fine team to include those members of an orga- nization \nthat are either directly responsible for writing software or for supporting those who do. Thus, my definition \nwould include programmers, analysts, toolsmiths, program managers, quality assurance personnel, testers, \nwriters, designers, and architects. Quite intentionally, this definition includes anyone who has an impact \nupon the suc- cess or failure of a software project, particularly as it relates to creating tangible \nproducts and to miti- gating software risks. I first concede the point that teams affect objects. Software \nfolklore, backed up by a few legitimate studies involving some hairy mathematics, clearly shows that \nthe structure of a software product -either good or bad - is directly impacted by the structure of the \nteam that created it. Consider, for example, one Really Large object-oriented project whose analysts \nwere housed in one building, and whose developers were housed in another. I for one was not surprised \nto see this project turn into a classic case of software meltdown. Similarly, the hyper productive projects \nI ve encountered are all characterized by having an open, elegant, and high-energy team structure - and \ntheir software products reflect these same characteristics. However, it is painfully evident that objects \naffect teams (and, not to reduce this debate to personal attacks, my esteemed opponents in this debate \nare clearly pond scum if they consider otherwise). Consider the structure of an organization that de- \nvelops software for a mainframe COBOL applica- tion, versus one that develops software in C++ or Smalltalk \nfor a client/server application. In the successful project, there exist very different roles and responsibilities \namong the members of each of these teams. Indeed, there are certain roles in the object-oriented project \nthat have no analog in the non-object-oriented one. For example, a typical object-oriented project will \ninclude architects (who invent clusters of classes and mechanisms), ab-stractionists (who are skilled \nat discovering classes and objects), and application engineers (who take the components developed by \nthe architect and the abstractionists and assemble them into applica- tions). I ll state my point even \nmore directly: attempting to develop a complex object-oriented software system with a non-object-oriented \nteam will add significant risk to the success of any project.  Biography Grady Booth is Chief Scientist \nat Rational. He has been with the company since its foundation in 1980. Booth has pioneered the development \nof object-oriented analysis and design methods. His work centers primarily around complex software systems. \nBooth is the author of three books published by Benjamin - Cummings, including Software Engineering with \nAda and Software Components with Ada. As a derivative work to his second book, Booth developed foundation \nclass libraries written in Ada and C-t-t. His third book, titled Object-Oriented Analysis and Design, \ndescribes the theory, notation, process, and pragmatics of object- oriented technology. He is currently \nworking on a fourth book, dealing with the management of object-oriented projects. He has also published \nmore than 75 technical articles on object-oriented technology and software engineering. Booth has lectured \non these topics at numerous conferences and workshops in the United States, Europe, and the Pacific Rim. \nBooth is a Distinguished Graduate of the United States Air Force Academy, where he received his B.S. \nin Computer Science in 1977. He received an M.S.E.E. in Computer Engineering from the University of California \nat Santa Barbara in 1979. Booth is a member of the American Association for the Advancement of Science, \nthe Association for Computing Machinery, the Institute of Electrical and Electronic Engineers, and Computer \nProfessionals for Social Responsibility.  Derek Coleman Hewlett-Packard Laboratories Palo Alto California \ndc@hplsrd.hpl.hp.com From experience, I believe teams are more impor- tant than objects for getting successful \nsoftware development. Establishing a shared vision and putting the organization in place to make it happen \nis worth an awful lot of class frameworks - whoever wrote them. Most of us are in the business of delivering \nprod- ucts, thus products, too, count more than objects. Products might be built from objects, but most \ncus- tomers do not care much about objects. Because object teams should focus on product delivery, the \nold roles are still applicable - the analyst who de- fines the required product; the designer who builds \nthe architecture and the implementer who codes the architecture. Prototyping is a good reason for using \nobjects, but prototyping was not invented by objects. So again, object teams adopt the old roles: the \nanalyst proto - typer who helps resolve what the customer wants and the design prototyper who makes proof \nof concept models for difficult technical issues. We should not forget the other key role: the person \nwho makes sure that prototypes are not delivered as products! Software reuse is a much vaunted reason \nfor adopting object technology - but one can get reuse without objects. Plans which call for asset produc- \ning teams and asset consuming teams are very ambitious. Unless the domain is very well under- stood it \nis hard to produce a stable set of really reusable object classes. Even then a large invest- ment is \nrequired to ensure that the objects are truly generic and of high enough quality. Then there is business \nproblem of how to get the return on that investment. Finally, even if all these issues are un- der control, \nwhen push comes to shove, product schedules have a tendency to override asset pro- duction. Probably \nthe most practical form of reuse is the in- cremental development and delivery of product families, i.e. \nreuse constrained by the schedule of delivering products. Incremental delivery relies on having a clear \ndefinition of each product release and then using the product release schedule to drive the scheduling \nof the architecture design and the code production. To plan a product-family planning the features of \neach release need to be precisely specified early on during OOA. (Note: A feature is a stimulus-re- sponse \npair such that if the user provides a stimu- lus then the product responds by changing its state and \noutputting a response.) Precise specifications of features allows them to be prioritized and grouped \ntogether to constitute the releases. Features have dynamic behavior which has to be mapped on to object \ninteractions (the key mech- anisms , contracts, etc.) during OOD. Thus an in- cremental delivery team \nmust work with a notion of architecture that includes object interactions as well as the usual class \nhierarchy or relationship model. Of course, if the software is to be multi- process then each process \nmust also be specified by the architecture. To keep the development on track the architecture must be \nalways visible to the whole team. Its de- velopment needs to be the responsibility of the system architect \nrole whose job it is to maintain the architecture and ensure that it remains consis- tent and that all \nchanges are propagated to other team members. So whichever way I look at it - it seems that it is the \nteam that affects objects and not the other way around. In fact, an even stronger form of the proposition \nmight hold: teams are in business to deliver products, product plans drive architectural development \nand the architecture affects the ob- jects .  Biography Derek Coleman holds a B.Sc (Physics) and an \nM.Sc (Computer Science) from the University of London. He is manager of the Application Engineering Department \nof Hewlett Packard Laboratories, Palo Alto. Before relocating to Palo Alto in 1994, Derek was a project \nmanager in the HP Labs Bristol Research Centre in UK, where he led a team researching into object-oriented \nanalysis and design tech- niques. He is a co-author of Object-oriented Development: the Fusion method \npublished by Prentice-Hall in 1993. Derek is an active member of the object-oriented research community \nand is the author of many papers on software engineering and formal methods. AT&#38;T Bell Laboratories \ncope@research.att.com A team is a group of people who work together toward a common goal, driven by \na complemen- tary set of instincts and talents. As we use the term in software, these people are closely \ncoupled to each other. I acknowledge a wide variety of design techniques and programming languages that \nsupport a spec- trum of design approaches that we collectively call the object paradigm, but they all \nbuild on encap - sulation, instantiation, and polymorphism, and usually on inheritance. A class is a \nunit of encapsulation; an object is an instantiation of a class. The power of the object paradigm is \nin the abstraction it provides through inheritance, and the polymorphism that makes inheritance invisible \nat run time. Objects appear to be neither empirically sufficient nor necessary for teams. In our organizational \nstudies done by AT&#38;T, we have seen highly pro- ductive teams that use object-oriented techniques \n(such as Borland s QPW effort), but have seen equally productive teams that use vanilla C. We have also \nseen object-oriented efforts that lack ef- fective teamwork. To echo Beck s position, communication is \nkey to effective teams. With the advent of objects came the promise of well-documented interfaces that \ncommunicated behavioral intent while hiding im- plementation details. Experience has shown that design \nis more subtle than that. Abstractions be- yond objects dominate the subtleties of design. These include \nthe mechanisms of Booth, the id- iomatic forms of handle/body classes, iterators, and the like, and the \npatterns of message flow in a multi-process or distributed systems. I believe many of these abstractions \ncan be effectively communicated as patterns. Software architecture supports organizational communication \nonly to the extent it leverages Conway s law: that the software and organization structures are mirror \nimages. But human commu-nication and sociological grouping have many limitations and quirks for which \nthere are no soft- ware drivers. We have found that people can main- tain about 5 long-term relationships \n(collaborators) in a development organization. We find character- istically even patterns of coupling \nin productive organizations, with no centralized control and no bottlenecks. We find that good organizations \nhave characteristic shapes of role grouping. In short, we understood good organizations by their patterns, \ntoo. If you step back and look at these organizational principles, they may look familiar as OOD rules- \nof-thumb, if you substitute objects for people. And they are! But the reason they make such good rules \nof thumb for software design is because of what they portend for the people writing the software; the \nobjects don t care about such things. For this reason, I believe that suitable organizational pat- terns \nare key to effective teams. In a given project, these patterns might mirror Beck s software pat - terns, \nbut the focus should be on the people issues. Such patterns comprise not only lines of commu -nication, \nbut aspects of the reward and value sys -tern as well. For example, can the organization learn and introspect? \nThis is reminiscent not only of the reflection work in the 00 community, but also of Frank Buschmann \ns use of reflection in his patterns. Biography Jim Coplien is a member of the Software Production Research \nDepartment at AT&#38;T Bell Laboratories, where he does research in patterns of world-wide software development \norganizations. He is also known for his exposition of advanced design and programming techniques in Advanced \nC+ + Programming Styles and Idioms. He writes a software pattern column for the C++ Report. Richard \nHelm DMR Group. 1200 McGill College Ave., Montreal. QC H3B 4G7. Canada lmcrihe@LMC.ericsson.se  Approaches \nto organizing teams include organiza- tion by deliverable to be produced, or organization by specialization \nand specific activities. Deliver- able-based teams encourage cross fertilization, accountability, responsibility \nfor deliverables across development phases, creativity, and team stability. Object-oriented technology \nimpacts deliverable based team structure because of the deliverables unique to object-oriented development. \nAnalysis and design object models, class hierarchies, tool kits, and frameworks for example are appropriate \ndeliverables around which to organize a team. Designs based on frameworks can have a large impact on \nteam structure. Typically some team members will be responsible for the design and implementation of \nthe key framework abstract classes, their interfaces and the patterns of behav- ior of contracts between \nthem. Once the design and implementation of the framework proceeds then there is an opportunity to develop \nstripes of functionality in parallel by other team members. A deliverable becomes a set of sub-classes \nof frame- work classes with each adding some part of a larger functionality. For example, in a direct \nmanipulation graphical editing framework such as HotDraw or Unidraw, a team member can be made responsible \nfor implementing the stripe consisting of the Circle class and all Tools, Commands and Manipulators that \noperate on and are appropriate to Circles. New functionality will often appear as subclasses of the framework \nand can generally be developed in isolation from other team members developing parallel stripes. A disadvantage \nof deliverable-based organizations is that it can require management of deliverables that are larger \nthan activity-based deliverables. Deliverables requiring months of effort are harder to monitor than \nthe activities that produce the de- liverable. Object-technology helps in that the ob- ject-oriented \nsystems often are decomposable into relatively small pieces. Classes and methods are good examples. Indeed \nthe benefits of encapsula- tion and polymorphism and well defined interfaces carry over to team structure. \nA well designed sys- tem which has well defined interfaces, the classes are encapsulated etc., encourage \nteams which are independent, and encapsulated . However, the distribution, atomization, and local - ization \nof control flow into classes in 00 designs pose the danger that the global flow of the appli- cation \nis not anyone s deliverable. This is impor- tant, particularly when designing frameworks. The application \ns control flow, and the interfaces and relationships between, and functionality of, classes which participate \nin this flow of control are key to the ultimate flexibility, evolution and reuse of a design. Use cases \nare also distributed across mul- tiple classes. Care must be taken to ensure there are team members who \nare assigned to these de- liverables. If not, the soul of the application may be lost. Some deliverables \nspan classes and team members; team members may be responsible for parts of many classes. This gives \npotential for conflicts and hot-spots as multiple team members have responsibility for a single class. \n Biography Richard Helm has been working with object-tech- nology for the past five years. Currently, \nRichard is a Senior Technology Consultant specializing in object-technology with DMR Group, an intema- \ntional information technology and strategy consult- ing firm. Prior to DMR, Richard was a research staff \nmember at IBM s T.J. Watson Research Center in New York, investigating object-oriented design and reuse, \nand setting research directions for object-technology. Richard has numerous in-ternational publications \nin object- technology and was a member of the ACM OOPLSA program committee in 1992. Richard has a Ph.D. \nand a B.Sc. in computer science from the University of Melbourne, Australia. Kenneth S. Rubin ParcPlace \nSystems krubin@parcplace.com I have worked with clients over the past six years to create and manage \ntheir project teams. In addition, as part of writing our book, Succeeding with Objects: Decision Frameworks \nfor Project Management, we have conducted 39 case study interviews of projects and teams that have used \nobject-oriented technology. These experiences are the background for my position. A team is a group of \npeople who work together in a coordinated way to meet a clear set of goals and objectives. A team has \na purpose, to carry-out the activities of a project. Just as there are many dif- ferent types of projects, \nso are there many different types of teams to carry out these projects. The purpose of the team guides \nthe decisions about the team roles, management approach, communica- tions, and structure. Within an organization \nthe following decisions should be made regarding teams: decide which teams are needed identify the roles \nneeded on each team decide on the style for managing each team determine inter/intra-team communication \nmechanisms decide on the structure for each team find team members. I have seen four types of teams \ncommonly em-ployed on object-oriented projects: Application Team. A team responsible for the analysis, \ndesign, implementation, delivery, and sometimes maintenance of an application that fulfills a contractual \nobligation with either an in- ternal or external client. Framework Team. A team dedicated to the con- \nstruction of reusable frameworks and components to support one or more application projects. Cross Project \nTeam. A team whose purpose is to facilitate the sharing of project artifacts among a collection of simultaneous \nprojects. Reuse Team. A team that is responsible for exe- cuting the organization s reuse process model. \nIn addition, within and across these team we have seen the following new team member roles: Analysis \nPrototyper. Develops the executable pro - totypes during the analysis phase. Design Prototyper. Develops \nthe executable proto - types during the design phase. Object Technology Expert. Provides object-ori- \nented technology expertise at several levels. Object Coach. General resource, available to an- swer all \nteam members questions about the use of object-oriented technology in the project. Framework Designer. \nDetermines the architecture for a general description of parts and how they in- teract to form applications \nwithin a specific do- main. Reuse Evaluator. Determines whether or not soft- ware components have been \ndesigned for broad applicability. Reuse Manager. Has overall responsibility for the reuse process model. \nReuse Administrator. Responsible for identifying and acquiring new reusable assets for the corporate \nor project library. Reuse Librarian. Responsible for certifying, clas- sifying and storing new reusable \nassets into the corporate or project library. Reuse Expert. Creates, maintains and updates reusers of \nthe reusable assets.  Biography Kenny Rubin is Manager of Methodology Development at ParcPlace Systems \nwhere he man- ages the development of ParcPlace s Object Behavior Analysis and Design (OBA/D),and Project \nManagement Methodologies and Tools. Previously, he was Manager of Professional Services at ParcPlace \nwhere he directed ParcPlace s consulting and training business. Kenny has co-authored a book on managing \nobject-oriented software projects and has numerous other publications on the topics of managing object-oriented \nprojects, object-oriented analysis and design, artificial intelligence and human-computer interaction. \nHe has publicly spoken on these topics over 100 times at major corporations and conferences around the \nworld. In addition, he is a member of the Editorial Board of Object Magazine and the OMG OOA/OOD SIG, \nas well as a faculty member of the Stanford University Western Institute in Computer Science (WIGS). \nKenny received his B.S. in Computer Science from the Georgia Institute of Technology and his MS. in Computer \nScience from Stanford University.  \n\t\t\t", "proc_id": "191080", "abstract": "", "authors": [{"name": "Steven Fraser", "author_profile_id": "81339499863", "affiliation": "Bell-Northern Research Ltd., Ottawa, Ontario, Canada", "person_id": "PP77049024", "email_address": "", "orcid_id": ""}, {"name": "Kent Beck", "author_profile_id": "81100558273", "affiliation": "FirstClass Software", "person_id": "PP31070029", "email_address": "", "orcid_id": ""}, {"name": "Grady Booch", "author_profile_id": "81100557878", "affiliation": "Rational Booch", "person_id": "PP31047618", "email_address": "", "orcid_id": ""}, {"name": "Derek Coleman", "author_profile_id": "81100290523", "affiliation": "Hewlett-Packard Laboratories, Palo Alto California", "person_id": "PP31035727", "email_address": "", "orcid_id": ""}, {"name": "Jim Coplien", "author_profile_id": "81100241805", "affiliation": "AT&T Bell Laboratories", "person_id": "PP77048553", "email_address": "", "orcid_id": ""}, {"name": "Richard Helm", "author_profile_id": "81100454091", "affiliation": "DMR Group., 1200 Mcill College Ave., Montreal. QC H3B 4G7 Canada", "person_id": "PP79026914", "email_address": "", "orcid_id": ""}, {"name": "Kenny Rubin", "author_profile_id": "81100267648", "affiliation": "ParcPlace Systems", "person_id": "PP31094940", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/191080.191152", "year": "1994", "article_id": "191152", "conference": "OOPSLA", "title": "How do teams shape objects?&#8212;How do objects shape teams?", "url": "http://dl.acm.org/citation.cfm?id=191152"}