{"article_publication_date": "10-01-1994", "fulltext": "\n Object Model Patterns Workshop Report Peter Coad and Mark Mayfield Object Intl., Inc., 8140 N. MoPac \n4-200, Austin TX 78759 USA l-512-795-0202 fax 795-0332 coad@oi.com mayfield@oi.com Abstract This is \na report on the OOPSLA 94 Object Model Patterns workshop. The goal of the workshop was to further each \nof our understanding of object model patterns. The discussions were lively, challenging, and very stimulating. \nThis report expresses our perspective of this invigorating time together. Patterns in other fields To \nset the tone of this investigation, we considered some quotable quotes about patterns: About patterns, \nphilosophers and psychologists have been strangely silent; yet most interesting phenomena are almost \ncertainIy patterned.. . Patterns seem to be precisely the wholes that are more than the sum of the parts.. \n. We find patterns.. .not only in visual and other sensory stimuli but also in language and other symbols, \nin assessments and diagnoses and, in general, in descriptions of any complex domain. - Leonard Uhr, Pattern \nRecognition, 1966 Like a painter or a poet, a mathematician is a maker of patterns; but the special characteristics \nof mathematical patterns are that they are more likely to be permanent bemuse they are made with ideas.. \n. As a young child, he was fascinated by the intricate patterns in an Oriental rug. The resulting visual \npicture seemed to produce a melody with relations among the various parts resonating with one another.. \n. It is the ability to relate a perceived pattern to past patterns, and to envelop the present position \ninto the overall game plan, that is the true sign of talent at chess. - Howard Gardner, Frames ofMind, \n1983 Individual patterns are.. the bricks from which we must build our thoughts.. . There seems to be \nsomething special in the first time we see a pattern... Creativity includes the ability to take a range \nof subpatterns, perhaps from areas not previously linked, and see a new pattern. That pattern had repeated \nunnoticed in the past or can be made to repeat in the future.. . [Summary] Viewed as a whole, these ideas \nresult in a system model of the brain as a modulated pattern extraction hierarchy.. . The justification \nof the system model is threefold. First, it can be mapped into current brain physiology. Second, it can \nprovide convincing descriptions of neurological phenomena.. . Third some experimentally verifiable predictions \nderived from the model can be made. -- L. Andrew Coward Pattern Thinking, 1990 The recognition of natural \npatterns is at the heart of both scientific and artistic exploration. Our buildings, our symphonies, \nour fabrics, our societies---all declare patterns. Artists and scientists alike make it possible for \npeople to appreciate patterns they were either unable to distinguish or which they had learned to ignore \nin order to cope with the complexity of their daily lives. Once you begin to see these patterns, don \nt be surprised if your view.. .tmdergoes a subtle shift.. . Everywhere I looked, I found basic patterns \nrepeating. - Pat Murphy, By Nature s Design, 1993 Portland, OR October 23-27,1994  What is a pattern? \nA pattern is a template. It s a template that is an example worthy of emulation, and something observed \nfrom things in actuality. It s a template to a solution, not a solution. It s a template that has supporting \nguidelines (not so much that it keeps one from seeing how it might be used in novel ways). What is a \npattern family? A pattern family is a group of patterns that often work together. Examples: transaction \npatterns, aggregate patterns, device patterns, interaction patterns. It s very important that people \nsee patterns and patterns consisting of other patterns. It s also important to show examples, typical \nways of combining patterns in a pattern family.  Do device patterns commonly play with transaction patterns? \nYes! Why: device patterns deal with state changes of actual devices; transaction patterns deal with state \nchanges of the business world (albeit many of those objects are conceptual in nature). Comparing and \ncontrasting patterns that compete as alternative solutions We worked in a specific problem domain tank \ncontrol. And we applied and discovered device patterns along the way. We compared and contrasted different \npatterns --and discussed the impact at length (fairly intense discussions here): -sensor - resource - \nactuator (or, simply actuator - sensor) vs. -controller - sensor, actuator We decided that we could \nagree that both patterns could be used, although some of us strongly preferred one over the other.  \nDevice patterns and smarter devices We discussed that in data acquisition and control, one looks for \nsmarter and smarter devices. So it make sense to develop and apply device patterns that encourage an \nobject model that remains more stable over time (even as the devices get smarter and smarter). Transaction \npatterns A transaction is a moment in time, an event that a system must remember. Examples include sale, \npayment, rental, and reservation. The transaction pattern family includes: -actor-participant -participant-transaction \n-place-transaction -specific item - transaction - transaction - transaction line item - transaction \n- subsequent transaction  -item - line item and more. Common transaction - subsequent transaction pattern \ninstances are session - sale and sale - payment. Session objects are nearly always needed (to control \naccess and log resource usage). A transaction may apply to one point in time, a time period, or a common \ninitial time followed by some number of end times. This detail needs to be expressed, either as separate \npatterns or as a single pattern with some companion strategies. Keeping the number of patterns small \nand expressing common variations within each pattern seems more appealing. Patterns and pattern instances \nA pattern is a template (e.g., participant- transaction). A pattern instance is a specific application \nof a pattern (e.g., cashier-sale). Pattern instances are what we develop and snap together, to form a \nspecific object model. Interaction patterns We investigated the subtleties between: -caller - dispatcher \n- caller back, and -request - gatekeeper - resource. Both are patterns with a triad of players. The \nresponsibilities are different. And the message content is different, too. Relate the pattern and its \npattern players to a real-world example. Examples: actor-participant, transaction -transaction line item, \npublisher-subscriber. Observation: this is a good validation point --and shows that the pattern exists \noutside the wonderful world of software. Addendum to the Proceedings OOPSLA 94 Future work with object \nmodel patterns We discussed the long-term impact of patterns on how we build systems. Libraries of pattern \ninstances could become building blocks (like Legos@) for building applications within a specific domain \nthat one is interested in. Associate -other associate When this catch all pattern comes up, take a careful \nlook. You may be looking at a pattern instance of a yet-to-be-discovered pattern. Example-centric workshops \nIt s true, the example teaches (it s a wonder that anything else ever does). Multiple examples are essential, \nfor teaching patterns and for teaching commonly-occurring combinations of patterns. We found that using \nexamples in the workshop is essential. We recommend that future object model pattern workshops at OOPSLA \ndrive all participants to make your point with a specific example. Bibliography Patterns in software \ndevelopment Anderson,Bruce, Patterns: Building Blocks for Object-Oriented Architectures. Software Engineeting \nNotes, January 1994. Beck, Kent, and Cunningham, Ward, A Laboratory for Teaching Object-oriented Thinking, \n OOPSL4 Conference Proceedings. ACM, 1989. Booth, Grady, Patterns. Objectkfuguzine, September 1993. Buschmann, \nFrank; Rohnert, Hans; Stahl, Michael, Sojlwwre Architectuw (working draft). Siemens Corporation, 1993. \nCoad, Peter, Object-Oriented Patterns. CKX4. ACM, September 1992. Cd, Peter, and Mayfield, Mark, (with \nBruce Anderson in 1993), OOPSLA Patterns Workshop Report, OOPSLA Proceedings Addendum. ACM, 1992,1993, \nand 1994. Chad, Peter, North, David; and Maytield, Mark, ObjectModels: Strategies, Patterns, and Applications. \nPrentice Hall, available in February 1995.  Patterns in other fields Alexander, Chris, The Timeless \nWay of Building. A Pattern Language. Oxford Press, 1979. Coward, L. Andrew, Pattern Thinking. Praegezr \nPublishers, 1990. Gardner, Howard, Fmmes of Mind. Basic Books, 1983. teaming with Puttem Blocks. Cuknaire \nCompany of America, White Plains, NY USA, 1992. ( pattern Blocks are a hands-on learning system for exploring \npattems and shapes.) Murphy, Pat and Neill, William, By Nuhrre s Design. Chronicle Books, San Francisco, \n1993. Proctor, Richard M., Principles of Pattern Design. Dover Publications, 1969, reprinted with minor \ncorrections in 1990. Other publications Alexander, Chris, A Foreshadowing of 21st Century Art. Otiord \nPress, 1993. Hayakawa, S.I., Use The Right Word. Funk t Wagnalls, 1968. Portland, OR October 23-27,1994 \n \n\t\t\t", "proc_id": "260028", "abstract": "", "authors": [{"name": "Peter Coad", "author_profile_id": "81100276435", "affiliation": "Object Intl., Inc., 8140 N. MoPac 4-200, Austin, TX", "person_id": "PP31035145", "email_address": "", "orcid_id": ""}, {"name": "Mark Mayfield", "author_profile_id": "81100350240", "affiliation": "Object Intl., Inc., 8140 N. MoPac 4-200, Austin, TX", "person_id": "P190686", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260028.260135", "year": "1994", "article_id": "260135", "conference": "OOPSLA", "title": "Object model patterns: workshop report", "url": "http://dl.acm.org/citation.cfm?id=260135"}