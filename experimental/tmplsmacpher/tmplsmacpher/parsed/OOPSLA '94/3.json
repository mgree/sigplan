{"article_publication_date": "10-01-1994", "fulltext": "\n How to Adapt 00 Development Methods in a Software Development Organization -A Case Study Walson Lee \nMicrosoft Corporation 9 Hillside Avenue Waltham, MA 02154 walsonl @microsoft.com Abstract In 1993, three \n(3) software development projects in different application areas (i.e., Health Care, Telecommunications, \nand Resource Management) participated in the first 00 Technology Pilot Program in Digital Consulting \norganization. This paper summarizes: The knowledge and lessons learned The 00 development process used \n . A set of guidelines for adapting 00 technology to a software development organization Introduction \nAfter many years of refinement and exploration, 00 technology has finally moved into mainstream software \ndevelopment. One of the key issues facing many organizations is how to migrate the software/IS organizations \nfrom the existing development environment to an 00 environment. This paper summarizes the experience \nand lessons learned from Digital Consulting s 00 Pilot Program (March to December 1993). During the period, \nI was the Digital employee who managed the planning and execution of the 00 Pilot Program. The 00 Program \nTeam developed a unique hybrid 00 development approach (combining 3 different 00 methods) which proved \neffective in deploying the 00 technology in software development organizations. Several groups in Digital \ncontinue applying this approach. Since I left Digital and joined Microsoft Consulting Services (MCS), \nI have successfully applied the same approach in two software development projects with different client \norganizations (i.e., an insurance company and a mutual fund company). Background of 00 Pilot Program \nIn early Fall of 199.2, several managers in Digital Consulting interested in 00 technology met a couple \nof times to discuss how to deploy 00 technology. They formed a steering committee in November 1992, to \ninvestigate ways of deploying 00 technology with various U.S. Digital Consulting groups. The steering \ncommittee commissioned two task forces to make recommendations on Training and Technology Transfer Issues \nand on 00 Methods and Development Process. The steering committee made an early decision to focus efforts \non 00 Analysis/Design Methods instead of low-level areas such as 00 programming (e.g., C++ class libraries). \nAlso, the Committee decided to pilot the 00 technology in selected software projects first and to gradually \ndeploy the technology across various software groups. participated the Committee and volunteered to set \nup an 00 Pilot Program in January, 1993. The Pilot Program received five (5) proposals and funded three \nprojects from design to completion. The project work started in early March and completed the 00 designs \nin July. Two projects completed the implementation phase in the November-December time frame, 1993. \n Scope of the Pilot Projects This section provides a general overview of the three participating pilot \nprojects. The intention is to describe enough background for discussion of experience and lessons learned. \nAlthough all three pilot teams went through the same technology transfer process as described later, \nin retrospect each team took different approaches to accomplish its objectives. Voice Response/Telephony \nProject The application is a general call center problem (i.e., incoming phone calls handle by operators \nor agents) which includes both voice and CIT (computer integrated telephony) components. The system capabilities \nincluded: automatic call routing, maintenance of call context information, and generation of call statistics. \nThis type of system can be used at customer support centers or inbound telemarketing agencies. The project \nteam accomplished the goal of creating an 00 design model that can be reused for future releases of the \napplication and other similar custom solutions. Resource Manager Project Resource Manager is an application \nframework for managing and scheduling resources based on a set of resource capabilities and client requirements. \nThe Resource Manager framework can be used in other applications (e.g., Dock Manager, Location Manager) \nto provide resource management functionality. This team followed the 00 development process (described \nlater) from the requirement model all the way to prototyping and implementation. Healthview Project \nThis project analyzes and designs a healthcare end user application that establishes object-oriented \nmethods and expertise to be used again in future releases of the product. The problem this team intends \nto solve is retrieving and storing health care related information, such as patient records and test \nresults in a distributed computing environment.  Key Attributes and Success Factors The objectives \nof this Program were to grow internal 00 expertise and define appropriate 00 development methods and \nprocesses for Digital Consulting. Overall, the Pilot Program achieved the stated objectives. The following \nattributes contributed to the success of the Program: Management Sponsorship and Grass-root Effort Management \nstrongly championed 00 technology, which proved to be the turning point for the Program. The grass-root \neffort by many software engineers within the company was also an important factor. Focused on 00 Analysis/Design \nMethods An early decision to focus efforts on 00 Analysis/Design Methods prior to programming languages \nor tools adoption had a positive impact on the results. Supported the Mainstream of the Project The \nteams brought their real customer or engineering projects to this Pilot Program. They learned to apply \n00 methods, and produced 00 analysis and designs within a specified time frame that ready for implementation. \n Mentoring From the start, each project team had an assigned mentor who facilitated learning and helped \nthe team to meet milestones. Due to the limitation of internal 00 experts, the Pilot Program hired an \noutside consultant (Mike Ackroyd) as well as an internal consultant to guide the mentoring process. \nSpaced and Timely Training Geared to Actual Projects Team members participated in a specially designed \ntraining program: 1 week of 00 Analysis and Design training, 1 week of 00 Methods/Tools (e.g., Objectory) \nspecific training, and C++ training. The training integrated well with the pilot effort by allowing project \nteams to apply the learning immediately to their project work. Concrete Milestones and Deliverables \nThe project teams were able to produce an 00 analysis/requirement model in 6-8 weeks and a design model \n(and optionally a prototype) in 16- 18 weeks. Formalized 00 Software Development Process All three teams \nfollowed a software development process that was tailored for 00 development environment and for this \nparticular Program. Regular Technical Reviews Each team conducted regular reviews every 2-3 week with \nthe mentors and external consultants to ensure the team is on track.  00 Development Methods In the \nearly stage of the Program, an 00 Methods Evaluation Team was commissioned to evaluate and recommend \n00 analysis/design methods to be used in the pilot. The Evaluation Team first defined an evaluation framework, \nwhich was a set of criteria based on our own requirements: key concepts, development life- cycle support, \nnotation (such as expressiveness, syntax, semantics, abstraction, and scalability), modeling paradigm \n(model types, modeling techniques) and development support (including support tools). Based on the evaluation \nframework, the Team reviewed all current 00 methods and narrowed down the final recommendation to the \nfollowing three methods: Ivar Jacobson: Use Case approach Wirfs-Brock, et. al. : CRC approach James Rumbaugh: \nOMT The Use Case approach received high marks during the evaluation. Because of this and the fact that \nother engineering groups within Digital already experimented with the Rumbaugh/OMT method, the Program \nTeam decided to focus on Jacobson s method. The Team invited Ivar to formally present his method to the \nengineering community in Digital. All three pilot project teams adapted Jacobson s method with some modification \n(see discussion in the following 00 Development Process section), and used the Ubjectory tool to capture \nthe 00 models. The CRC approach was also used by two project teams during the analysis phase to clarify \nthe objects relationship and responsibilities. One team experimented with the OMT method (using the ParadigmPlus \ntool). Observations of Jacobson s Method: The pilot teams found that the Use Case approach was indeed \na powerful technique for gathering requirements, for defining problem and system boundaries effectively, \nand for identifying objects and relationships. However, the teams also found the method did not quite \nsatisfy the pilot teams needs during Design. To fill this void, two teams used the Atriom tool (developed \nby Mike Ackroyd) and its associated notation during the design phase.  00 Development Process The Pilot \nProgram Team developed a model-driven, concurrent, and iterative development process which is partially \nbased on the Jacobson s Objectory process manual and partially based on the learning from previous 00 \nprojects in Digital. The 00 models developed in each phase served as both key project deliverables and \nmilestones. All project management activities, such as scheduling and reviewing, focused on 00 models. \nThe development process was iterative in a sense that two or three iterations (from Requirement, prototype \nto design models) were normally required to obtain solid 00 models. Figure 1. Integrated 00 Development \nProcess The following project template illustrates the model- driven process. The process is illustrated \nin Figure 1: Business Model The development of a business model is normally outside the scope of software \nprojects. However, we found that it is important to link the business model with the 00 models. The business \nproblem description objectives connect the business model and the system requirements model. To gather \naccurate requirements, software teams should engage early with business people to understand the business \nprocesses. Requirements model From the business model, the project team should identify and create System \nObjectives and the Problem Statement in a one-page concise document. The team then defines scenarios \nfor system usages (including user interface requirements) and classifies scenarios into Use Case descriptions \nand Actor Diagram. From user s requirements and the use case descriptions, the team develops Domain Object \nModel. Analysis Model The project team needs to generalize use case descriptions and develop different \nviews of participating objects in each use case. After identifying and consolidating major participating \nobjects, the team can generate the Analysis Model -- Use Case Participating Objects Model. Design Model \nThe Design model maps types (which are identified in Requirement or Analysis Model) to classes. Next, \nthe team needs to map the behaviors to executable forms (such as event trace diagram or interaction diagram). \nFinally, the teams should examine the possibility of reusing existing framework components or foundation \nclasses. Construction Model The team starts the 00 programming effort by: mapping associations and relations \nto appropriate programming mechanisms while taking care to minimize implementation coupling. Testing \nand Deployment Model Input events and.data defined from the Use Cases (scenarios) provide the basis to \nboth verify and validate the 00 models. Essentially, use cases provides for a strong traceability from \nthe requirement model all the way to test model.  Results and Benefits All three pilot teams completed \ntheir 00 analysis and design models (the key deliverables of the pilot) on time and within budget. The \npilot facilitated developing in-house 00 expertise (i.e., technology transfer) through a combination \nof mentoring-focused learning and hands-on experience. Better Problem;Solving Techniques for Analysis/Design \nThis development process provided the project teams with a robust and repeatable method that supports \nboth problem/system analysis and design. Using the Voice Response/Telephony (VRT) Project, as an example, \nthe project team successfully demonstrated that 00 problem-solving techniques (such as abstraction, generalization, \npolymorphism, inheritance) can be applied in solving their problem domain as well as extended to new \ncustomer projects. Higher Quality Solutions Using the 00 paradigm alone cannot guarantee high quality \nsoftware. Nevertheless, by applying an 00 model-based and formalized approach, the pilot project teams \nwere able to better understand the customer s requirements, problem definition, and system scope. Good \n00 Analysis/Design Technology requires a rigorous problem definition. The creation of the problem definition \nrequires intimate, prolonged sessions with the customer. This produces a document that exactly defines \nthe What of the problem. Formalize Documentation Methods The formalized problem statement, analysis \nand design procedures lead to formal boiler plate documents that can be pasted into new problem statements \nin the same application domain. A complete problem definition allows for the correct setting of customer \nand engineering expectations. Furthermore, the schedule and cost estimates can be more accurately forecasted, \nand the feature and delivery-time tradeoffs are much more evident. Ease/Speed of Tailoring Existing \nApplications for Other Customer s Again, using the VRT Team as an example, the team undertook two customer-funded \nprojects after the pilot. Armed with these newly acquired 00 techniques, the team came up with a solution \nthat was reusable, extensible, customizable and would greatly reduce testing when changes for a specific \ncustomer were needed. Better Communication, Morale and Team Spirit The 00 development approach (particularly \nuse case discussions) generally resu lted in better communications and morale among the pilot team members. \nThe team spirit actually helped the pilot move forward despite several initial barriers. Other indications \nof morale were the fact that team members were willing to invest long hours of their personal time to \nunderstand the technology and to help each other with difficult problems.  Lessons Learned Learning \nCurve The initial barrier of learning the 00 technology is more difficult than we originally anticipated. \nTo overcome the learning curve, two to four months of training and mentoring program is required. Resistance \nto Change: Old Habits Never Die We encountered various kinds of resistance from some technical staff \nand managers even though they signed up for the Pilot Program initially. Some team members would fallback \n(probably unconsciously) to the old ways of developing software whenever they first encountered some \nlearning barriers. Sometimes, when they were so focusing on the details of a particular solution, they \nforgot the big picture. Jump to Design or Implementation Too Early Some team members had the tendency \nto jump to design or programming issues too early in the project life cycle just because they were familiar \nwith the technical solutions (not necessarily 00 ones). Management Support One project team didnot complete \nthe implementation because the local management decided not to pursue 00 implementation.  Summary and \nRecommendations Understanding business processes and partnering with business people are critical for \ndeploying 00 technology. Management must understand the technology and define the vision and implementation \nstrategy. The organization should be stable and mature enough to undertake the technological change. \nBoth management and technical staff require appropriate education (acquiring knowledge) and training \n(acquiring specific skills). Cultural Change: The organization should have incentives for technical staff \nto learn and adopt the new technology. There should be a strong apprenticeship (mentoring) program to \neffectively jump-start the technology transfer effort. A well-defined software development process should \nbe in place. The selection and planning of the first few pilot projects are critical to overall success \nof adapting the technology. The organization should have plans to migrate existing development process \nand environment. A development team should adapt and tailor an 00 Analysis/Design method based on the \nteam s development requirements. The project teams should have different project structures, roles, responsibilities \nto adapt to the 00 paradigm.  Acknowledgments I would like to thank Mike Ackroyd for his technical guidance \nduring the Pilot Program effort and for his review comments to this paper. Many people in Digital contributed \nto the Program. Steve Briggs and Mitch Tseng sponsored the Program. Louis Marbel served as internal consultant \nand defined the evaluation framework for comparing 00 methods. Dick Spencer established the 00 Training \nProgram. The pilot teams, of course, deserved credits for their outstanding efforts: Steve Frechette, \nDave Peterson, Velda Adams, Paul Vestuto, Mike Ryder, Scott Lepage, and ViJay Nandwala. Special thanks \nto those who reviewed this paper, particularly Mark Garman, Peter Santoro and Bernard Odoy. I also want \nto thank my current management and other consultants at Microsoft Consulting Services (MCS) and my consulting \nclients at Fidelity for their support and encouragement. Reference: 1. Ackroyd, M. and Dana D. (1991) \nGraphical Notation for Object-Oriented Design and Programming, JOOP (Jan./Feb. 1991): 18-28. 2. Jacobson, \nI. (1.992) Object-Oriented Software Engineering --A Use Case Driven Approach, Reading, MA: Addison-Wesley. \n 3. Wirfs-Brock, R., Wilkerson, B., and Wiener, L. ( 1990) Designing Object-Oriented Software, Englewood \nClifs, NJ: Prentice Hall. 4. Rumbaugh, J. et al. (19911) Object-Oriented Modeling and Dfsign. Prentice-Hall. \n \n\t\t\t", "proc_id": "260028", "abstract": "", "authors": [{"name": "Walson Lee", "author_profile_id": "81100384802", "affiliation": "Microsoft Corporation, 9 Hillside Avenue, Waltham, MA", "person_id": "P296107", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260028.260088", "year": "1994", "article_id": "260088", "conference": "OOPSLA", "title": "How to adapt OO development methods in a software development organization &#8212; a case study", "url": "http://dl.acm.org/citation.cfm?id=260088"}