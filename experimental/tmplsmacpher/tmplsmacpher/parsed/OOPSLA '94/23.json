{"article_publication_date": "10-01-1994", "fulltext": "\n Workshop on Multi-Language Object Models* Dennis Kafura and Siva Challa Department of Computer Science \nVirginia Tech, Blacksburg, VA 24061 {kafura,siva}@cs.vt.edu Purpose The workshop on Multi-Language Object \nModels was organized to bring together experts from in-dustry and academia who are using object-oriented \ntechniques to achieve interoperability among appli- cation components that may be implemented in dif- \nferent programming languages, perhaps distributed across heterogeneous architectures. This workshop was \nmotivated by the need for an open, but inte-grated, distributed computing environment and the desire \nfor more effective reuse of software compo-nents implemented in different programming lan-guages. The \nworkshop sought to focus on object mod-els that incorporate more features than the cur-rent least common \ndenominator models and re-main interoperable among different object-oriented languages. Of interest were \nboth new and inter-esting design and implementation techniques (e.g., meta-object protocols, reflection, \ncommon run-time environment) for realizing these models as well as an examination of existing models \nthat offer multi- languages object model features (e.g., SOM, COM). *Information about the workshop, \nthe participants, and the position papers are available online using the WWW lo-catorhttp://actor.cs.vt.edu/uorkshop.html \nGreg Lavender Department of Computer Sciences University of Texas, Austin, TX 78712 lavender@cs.utexas.edu \n2 Organization The workshop was organized into four sessions. The first session, on Current Technologies, \nfeatured a panel consisting of Bob Hodges (TI), Shawn Woods (DEC) and Bill Janssen (Xerox Part). This \nsession sought to identify the strengths and weaknesses of current technologies for achieving interoperability \namong different languages or object models. The second session, on the applicability of re-flection techniques, \nfeatured a panel consisting of Scott Danforth (IBM), Prank Manola (GTE) and Bob Atkinson (Microsoft). \nJohn Lamping (Xerox Part) was invited to make some preliminary re-marks about reflection and meta-object \nprotocols. The third session consisted of presentations on the accepted position papers by those individuals \nnot on a panel session. A brief summary of each presentation is given in Section 4. The concluding session \nwas a general discussion attempting to distill the ideas, themes and issues that arose during the course \nof the workshop. This workshop report is largely based on the topics high- lighted during the concluding \nsession.  3 Discussion 3.1 Nature and Complexity of a Com-mon Object Model While the title of the workshop \nused the phrase multi-language , there was general agreement that no special features were needed to \nqualify as a multi- language object model. It was specifically noted that an object model developed for \nthe purpose of supporting interoperability in a distributed comput-ing environment had to address the \nsame, and pos- sibly additional issues, that would be addressed by a model developed to promote interoperability \namong different languages. Thus, the workshop discussion gravitated toward those issues surrounding interop- \nerability in general without specific focus on lan-guage factors. The complexity of object models intended \nto pro- mote interoperability vary depending on the level and extent of interoperability that is the \nmodel s goal to support. Simple models are preferable when seeking interoperability across languages \nwith dif-ferent paradigms (multi-paradigm programming) or across different computing regiemes (operating \nsys-tems, run-time environments, communciation pro-tocols, etc.). The CORBA object model is an exam- \nple of this kind of model. However, simpler mod-els may not include all of the features needed to support \nthe development of complex applications. Alternatively, a richer object model may be used to better support \nthe application development process, at the expense of imposing additional constraints on the developer \n(e.g., restricted choice of operating system, limited language bindings, or required de-velopment style). \nExamples of the richer-featured models are Microsoft s Component Object Model and IBM s System Object \nModel. The workshop discussion recognized the value of, and the need for, both kinds of object models. \nA more powerful, complex object model is needed to support sub-system or application development and \nto facilitate interoperation between such prod- ucts in a specific computing regieme. In contrast, the \ncontraints imposed by legacy systems and the demands for enterprise integration simultaneously preclude \nthe adoption of single computing regieme and require only a more modest form of interop- erability than \nis offered by complex object models. In such cases, a less capable, more neutral model is needed. 3.2 \nStandards The workshop discussion revealed three concerns re-garding current standards activities. Two \nof these matters relate to the pace of ongoing standards ac-tivities and a third relates to the potential \nincom-patibilities that may arise from lack of coordination among standards making groups. The first \nconcern is that object technology for interoperability at an enterprise level is not devel-oping fast \nenough to fulfill the expectations held by managers/corporate executives. The justification within an \norganization for moving to object technol-ogy has often been made on the basis of this tech-nology s \nability to facilitate enterprise integration. However, the rate at which the needed interopera-ble object \nservices are being developed and made available is slower than what is needed to realize a significant \ndegree of integration across major orga-nizations. The failure to deliver on the promise of enterprise \nintegration can be averted only by an acceleration in the progress of standards setting or-ganizations. \nThe second concern is that if common object standards are not arrived at more quickly, iso-lated communities \nwill arise that have, of necessity, adopted their own (and mutually incompatible) so-lutions. In this \ncase, individual successes will be achieved at the expense of a more global, though longer-term, level \nof interoperability. The third concern is that some of the standards groups may not be operating with \nsufficient coordi-nation to avoid creating incompatible service def-initions. Specific mention was made \nof the Ob-ject Management Group (OMG) and the standards group developing a standard query language for \nobject-oriented databases (SQLS). There is legit- imate concern that the object model emerging from this \neffort will be incompatible with the common object model defined by OMG. 3.3 Flexibility, Transparency \nand the Service Contract While simple, uniform standards and provisions of transparency are valid principles \nfrom a user s per- spective, a service or product developer may re-quire more flexibility or may need \ninformation that violates transparency. Such flexibility and non-transparency are needed to provide the \nservice per-formance that is expected. For example, a devel-oper may want the flexibility to replace \na compo-nent of an existing service or the developer may need the ability to discover location information \nabout equivalent services available from different sites. The means of achieving the needed flexibility \nor non-transparencies are varied. In a model that de-fines services via their interfaces, a service itself \nmay be defined that allows the non-transparent infor-mation to be discovered. Other models allow the \ninterface of the service or object to be queried at run-time. Thus a client may discover the service \ns abilities dynamically and use the service accord-ingly. Systems that provide reflection or a meta-object \nprotocol offer the widest latitude for flexibile manipulation of the service. The discussion of flexibility \nintersected with the discussion on reflection and meta-object protocols. The role of a well understood \ncontract between the service provider and the user of the service was acknowledged. However, there was \nless than uni-versal agreement on the need to negotiate changes to the service contract. Those favoring \nreflection techniques or meta-object protocols, saw a need to occasionally go meta in the sense that \nthe service contract itself became the focus of the interaction between the provider and the user of \nthe service. In this way, great flexibility was achieved. A contrary view is that getting the contract \nunderstood cor-rectly by both parties is difficult enough and more could be gained by focusing on clarifying \nthe ex-isting contract than by adding ways to change the contract.   Individual Presentations Siva \nChalla presented a paper titled Towards an Interoperable, Reflective Common Object Model for Statically \nTyped Object-Oriented Languages authored by Siva Challa. Existing object-oriented software systems have \ninsufficient support for in-teroperability (in distributed, heterogeneous envi-ronments) among objects \ndeveloped in languages with different object models. This impedes reuse and hinders application development. \nImproving interoperability by a broad domain approach, com-bining non object-oriented languages and object-oriented \nlanguages, supports different programming paradigms but provides weaker common object models. A narrow \ndomain approach is chosen that seeks a more powerful object model by including of a subset of object-oriented \nlanguages, specifically statically typed object-oriented languages. A pro- totype is described that allows \nreification of the se-mantics of method invocation in a multi-language environment consisting of the \ntwo statically typed object-oriented languages C++ and Modula-3. Tatsuro Kageyama presented the paper \ntitled C++ Metaobject on CLOS MOP authored by Nobuyuki Saji, Tatsuro Kageyama, and Motohide Tajiri. Many \nuseful class libraries in C++ are avail- able, but C++ is not suitable for user interactive programming. \nSo, HyperScheme, a Scheme imple-mentation augmented with Common Lisp Object System (CLOS) meta object \nprotocol (MOP), is used as a base language for user interactive pro-gramming and is used to implement \nC++ metaob-ject (C++Meta). C++Meta is expected to real-ize the language symbiosis with C++ and Hyper-Scheme. \nC++Meta provides interactive invocation of C++ method and overloaded functions, and dy- namic derivation \nof new classes from existing C++ classes. Shigeru Chiba gave a presentation about Open C++ . Open C++ \nis a variant of the C++ lan-guage, in which method calls and variable access are controlled by the programmer. \nThe program-mer can implement a new language function, such as remote procedure calls on top of C++ using \nthe facilities provided in Open C++. An object is con- trolled by its metaobject and the metaobject can \nalter the behavior of method calls to that object and also access to its variables. Because a metaob- \nject is a C++ object, the programmer can easily define a new metaobject to implement a new func- tion \nand this does not require the compiler to be modified. Andrew Myers presented a paper titled A Meta- \nObject Protocol for Parameterized Types au-thored by Andrew Myers. An important feature of extensible \nobject-oriented systems is a metaob-ject structure that describes a language s types and other system \nfacilities. Parametric polymorphism is also coming to be recognized as an essential pro-gramming abstraction \nmechanism, which comple-ments but is separate from subtype polymorphism and inheritance. A meta-object \nprotocol of Theta, a statically typed object-oriented language, is pre- sented, particularly focusing \non how parameterized types are represented within this structure. The type-object protocol allows client \napplications writ-ten in a variety of languages to manipulate Theta types as first-class objects, and \nto add new types to the system. The ability to manipulate type ob-jects is important for a variety of \nimportant applica-tions, including programming environments, com-pilers etc. T. Ledoux presented the \npaper titled Import-ing SOM Libraries into Classtalk authored by P. Mulet, T. Ledoux, D. Barbaron, F. \nRivard and P. Cointe. A brief overview of CLASSTALK, an en-hanced metalevel architecture for SMALLTALK \nis presented. CLASSTALK is dedicated to the study of structural reflectionand as such can be extended \nto support external accessing of SOM libraries, specified with CORBA IDL and implemented either in C \nor C++. CLASSTALK defines a metaclass called Standard Class from which new semantics can be derived. \nAccess to external libraries into CLASSTALK and the definition of the SOM kernel into CLASSTALK are presented. \n5 Concluding Remarks In the final session of the workshop, an open dis-cussion among all participants \nattempted to dis-till issues and identify probable future directions. Bob Hodges of TI again reiterated \nthe need for coordinated standards activity so that organiza-tions faced with trying to plan for and \nrealize true enterprise-wide integration of heterogeneous hard-ware and software environments aren t \nfaced with an insurmountable task. There was a clear impres- sion that vendors competing in the marketplace \ndo not have the incentive to work together to resolve differences between competing object models (e.g., \nCOM and SOM/DSOM). Therefore, the standards process was necessary as a means for users to en-sure that \nthe industry converges on a compatible solution. An observation was then made that standards bodies are \nperhaps inherently flawed and will prob- ably not succeed in reaching consensus on a com-mon object model, \nother than a model with least common denominator features. For justification of this perception, all \nwe need to do is look at expe-riences with standards bodies attempting to stan-dardize overly complex \nprotocol architectures (i.e. OSI) without paying close attention to the needs and trends in the market. \n If it is then assumed that the market for compo- nent software will be driven by different and com-peting \ncommon object models, all of which claim conformance to a least common denominator stan-dard, how will \norganizations trying to achieve an enterprise integration solution cope? One answer, perhaps, is that \na new object model adapter mar-ket will be enabled that, much like the diverse cable connector market \nof today, will offer plug-and-play compatibility for different desktop computing envi-ronments. Thus, \nif an organization is faced with acquiring and integrating applications on a wide mixture of platforms \nand desktop environments, an appropriate object model adapter can be purchased as the software connector \nequivalent of a cable con-nector. While the proliferation of software adapters used to glue together \ncomponents whose incompatibility has arisen because of a failure to reach consensus on a common object \nmodel standard is not ideal, it probably reflects reality. We might postulate that a single de facto \nmodel will emerge as the market win-ner, but the more likely scenario is that there will be two or more \ncompeting models and the adapter market will arise as a result of user demand for com- patibile components. \n Acknowledgements We would like to thank Bob Atkinson, Shigeru Chiba, John Lamping and Keung Hae Lee \nfor their participation and contributions to the workshop.  References [l] Siva Challa. Towards an Interoperable, \nRe-flective Common Object Model. [2] Scott Danforth and Ira Foreman. Introduc-tion to SOM: The IBM System \nObject Model. [3] Bob Hodges and Craig Thompson. Position Paper for OOPSLA 94 Multi-Language Ob-ject \nModels Workshop. [4] Bill Janssen and Mike Spreitzer. ILU: Inter-Language Unification via Object Modules. \n[5] Frank Manola, Sandra Heiler, Gail Mitchell and Farshad Nayeri. Object Model Interop-erability and \nMulti-Language Object Models. [6] Andrew C. Myers A Meta-Object Protocol for Parameterized Types. [7] \nP. Mulet, T. Ledoux, D. Barbaron, F. Rivard, and P. Cointe. Importing SOM Libraries into Classtalk. [8] \nNobuyuki Saji, Tatsuro Kageyama and Mo-tohide Tajiri. C++ Metaobject on CLOS MOP. [9] Shawn Woods. Position \nPaper: Multi-Language Object Models. \n\t\t\t", "proc_id": "260028", "abstract": "", "authors": [{"name": "Dennis Kafura", "author_profile_id": "81100565123", "affiliation": "Department of Computer Science, Virginia Tech, Blacksburg, VA", "person_id": "PP14195853", "email_address": "", "orcid_id": ""}, {"name": "Siva Challa", "author_profile_id": "81100216904", "affiliation": "Department of Computer Science, Virginia Tech, Blacksburg, VA", "person_id": "P265765", "email_address": "", "orcid_id": ""}, {"name": "Greg Lavender", "author_profile_id": "81100334209", "affiliation": "Department of Computer Sciences, University of Texas, Austin, TX", "person_id": "P99443", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260028.260162", "year": "1994", "article_id": "260162", "conference": "OOPSLA", "title": "Workshop on multi-language object models", "url": "http://dl.acm.org/citation.cfm?id=260162"}