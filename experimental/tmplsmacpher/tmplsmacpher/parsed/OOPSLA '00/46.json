{"article_publication_date": "01-01-2000", "fulltext": "\n Introducing the Project/Process Evaluation and Development Framework Daniel A. Rawsthorne, PhD ACCESS \n3131 Western Ave, Suite 530 Seattle, WA 98121 (206) 285-4994 DrDan@dSIGN.com ABSTRACT Many software \nprojects fail. The main reason they fail is that people don t understand them well enough to make them \nsucceed. The Project/Process Evaluation and Development Framework (PEDF) allows both customers and developers \nto understand their project and its process. It allows them to understand what they re doing, why it \ns supposed to work (or why it won t work), and how to modify it to make it more successful. Keywords \nProcess, development, evaluation, project plan. 1. THE PROBLEM Many software Projects fail. They fail \nin a variety of ways, from big ugly failures to failures that are later declared to be successes. Now, \nin my simple-minded way of looking at things, the definition of a failure is pretty straightforward: \na project fails if it does not deliver an acceptable solution to its users with a reasonable expenditure \nof time and resources. 2. THE PHILOSOPHY The two most important words in this definition ( acceptable \nand reasonable ) are both subjective, so the definition of failure is highly subjective. Even so, I believe \nthat many projects can be made to succeed, but every project can be forced to fail. What makes the difference? \nBasically, projects don t fail people do! Neither customers nor developers understand their projects \nvery often, and this lack of understanding leads to bad decisions and ultimate failure. The first, and \nmost important, thing to do is Understand Your Project. This understanding is crucial to all members \nof the team. Customers and managers must understand in order to be able to measure success and failure \nand make reasoned decisions. Developers must understand in order to make the small decisions every day. \nQA and testers must understand in order to determine Permission to make digital or hard copies of all \nor part of this work for personal or classroom use is granted without fee provided that copies are not \nmade or distributed for profit or commercial advantage and that copies bear this notice and the full \ncitation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to \nlists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota \n(c) Copyright ACM 2000 1-58113-307-3/00/10...$5.00 if things are being done right. And so on The Project/Process \nEvaluation and Development Framework (PEDF) provides the tools one needs to understand a project. It \ndoes this by providing a conceptual framework of factors to consider, as well as providing a list of \nquestions to ask about each of these factors. The answers to these questions provide the basis for understanding \nthe project. 3. UNDERSTANDING A PROJECT Well, what does it mean to understand a project? The factors \nconsidered by the PEDF are given below. 3.1 Purpose Why does the project exist? What is being produced? \nWhat are the success criteria for the project? from the point of view of each of the players? 3.2 Phase \nWhat lifecycle phase is the project in? There are many ways to describe the lifecycle of a project, but \nI prefer the following. 3.2.1 Initial Development Phase This is the phase in which we develop the first \nfunctioning version of the system/solution. It provides two important foundations for subsequent phases: \nteam expertise and system architecture. 3.2.2 Evolution Phase In this phase the system evolves to satisfy \nuser and customer needs, often in major ways. What distinguishes this phase is that the team expertise \nand system architecture developed during initial development are retained, expanded, and enhanced. 3.2.3 \nDecay Phase Often, a system enters a prolonged phase in which maintenance programmers make simple repairs \nand changes. The original team is gone and the architecture is ignored or misused. This represents the \nlingering technical decay of the system, even though it may be the period in which the system has its \nhighest market value.  3.3 Players Who are the players? Who are the people that have an effect on the \nproject? These people are often referred to as stakeholders, and come in three major groups. 3.3.1 Users \nThese are the ultimate consumers of your system. Your system is a solution to some problem[s] users have. \nThe users are usually an unorganized community that doesn t speak with a common voice, but they must \nbe listened to, nonetheless. It is impossible to have a successful system without satisfied users. 3.3.2 \nCustomers Customers are the people that provide the requirements for the system, and (at least technically) \naccept the developed system. There is often a hierarchy of customers, with your immediate customer at \nthe bottom typical customers include marketing and sales personnel, development managers, and actual \ncustomer (in the traditional sense) representatives. Identifying your real customer is often difficult. \nIt often seems that you have more than one. Just remember that the harder he is to identify, and the \nmore inconsistent and indecisive he is, the worse off the project will be. 3.3.3 Developers Finally, \nthis is us. This is our organization, consisting of analysts, designers, coders, testers, QA people, \nand so on. There are many different organizations, from the elegant simplicity of a 2-person shop to \nthe ungainly complexity of a high-ceremony government contractor. In either case, you gotta know who \nis who, and what they do.  3.4 Process The factor that usually gets the most scrutiny (whether deserved \nor not) is the development process. This process is evaluated to determine two things: what are the procedures, \nand what are the principles. This evaluation is conducted by studying the activity areas given below. \n3.4.1 Procedures The procedures are the easy part. They tell you what to do, when to do, how to do, what \ntools to use, and so on. This is the prescriptive part of the process. 3.4.2 Principles The principles \nare the why s why do I do it? why is it supposed to work? Additionally, there are the intangible principles: \nwhat am I thinking about when I do it? how can I modify it without hurting it? 3.4.3 Activity Areas \nIt takes serious work to determine the actual process for a project. The way the PEDF does is this is \nby investigating the following activity areas. It may seem that some of them fall outside the scope of \nyour Project, but they should be understood, anyway. Conception determining the user s view of the problem \nhe has and the solution he needs. Investigation determining the customer s requirements for the system, \nand understanding how this system will provide the necessary solution to the user. Determination developing \nthe system s architecture and determining how the system will be developed. Implementation designing, \nbuilding, and testing the system. Evaluation determining the system s fitness for use, validating and \nmodifying the customer s requirements. Delivery getting the solution into the user s hands.  3.5 Success \nFactors The success factors for your project are things, outside your control, that must occur for the \nproject to succeed. For example, your project may rely on some funding source that is completely outside \nyour control.  4. QUESTIONS TO ASK When studying the activity areas, we ask questions like the following \nabout each of the activities and artifacts that are involved in the Area: What tasks are involved? \n What techniques are used?  How do you verify that you are done with the activity?  What artifacts \nare produced in this activity?  How will this artifact be used?  How do you measure the quality of \nthis artifact?  How do you determine the fitness for use of the artifact?  5. EVALUATING A PROCESS \nIt s not just projects that can be evaluated with the PEDF. It is also used to evaluate processes in \norder to determine their suitability for a project. This is actually pretty straightforward (but not \neasy), and the steps are: Use the activity areas to determine the procedures and derive the principles \nfor the process.  Determine what project[s] the process is designed for.  Determine what phase[s] of \nthe lifecycle the process is applicable to.  Determine what players the process describes and uses. \n Develop the success factors for the process.  This last is the most important. In this case the success \nfactors are statements about the project that must be true in order for the process to be applicable \nand successful. 5.1 Evaluating RUP Sample phrases from an evaluation of RUP include: obviously designed \nfor high-ceremony projects production centric, you must supply your own validation focus relies on team \ndiscipline takes a 80% waterfall approach to the activity areas cycles longer than a year are risky \n5.2 Evaluating XP Sample phrases from an evaluation of XP include: developed for use on low-ceremony \nprojects validation centric coach enforces individual discipline ignores the conception and delivery \nactivity areas highly iterative with respect to the other activity areas requires a very strong coach \nrequires a single customer voice that is readily available  6. CONCLUSIONS The PEDF provides a mechanism \nfor understanding software projects and processes. This understanding is often the difference between \nsuccess or failure of a project.  \n\t\t\t", "proc_id": "367845", "abstract": "<p>Many software projects fail. The main reason they fail is that people don't understand them well enough to make them succeed. The Project/Process Evaluation and Development Framework (PEDF) allows both customers and developers to understand their project and its process. It allows them to understand what they're doing, why it's supposed to work (or why it won't work), and how to modify it to make it more successful.</p>", "authors": [{"name": "Daniel A. Rawsthorne", "author_profile_id": "81100040507", "affiliation": "ACCESS, 3131 Western Ave, Suite 530, Seattle, WA", "person_id": "P59259", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367985", "year": "2000", "article_id": "367985", "conference": "OOPSLA", "title": "Introducing the project/process evaluation and development framework (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367985"}