{"article_publication_date": "01-01-2000", "fulltext": "\n Reinvent the Wheel Lawrence R. Carleton Ir~@aol.com  I present a pattern for deciding when to try \nfor an original solution to a problem instead of applying an available Design Pattern. The practice of \nusing software design patterns is of course frequently very useful. You come upon a problem where there \nare antagonistic forces at play and the pattern gives you a way to resolve them by following practices \nworked out and applied in (perhaps abstractly) similar situations. Instead of \"reinventing the wheel\", \nyon reuse previously successful strategies, and save most of your creative energies for that which is \nnew and different. In Christopher Alexander's architecture of buildings, neighborhoods, etc., there are \nmany patterns, interrelated in pattern languages, which together promote his Timeless Way of Building. \nBut humans have not been building software nearly as long as we have been building houses and cities. \nIn software, it is reasonable to expect that, even in well known situations, it is possible from time \nto time to find a way to resolve some set of conflicting considerations better than the established way. \n(Historical example: three tier architecture for database access, vs. the earlier cfient-server architecture.) \nThe question, then, is how to decide when to try to \"invent a better wheel\", and when to leverage established \nsuccessful practice in building your software product. There are in principle several ways in which available \ndesign  patterns can lead to less than optimal solutions. (1)The list of conflicting forces does not \ncite all forces, only those which seemed significant to the pattern author. (2)The resolution describes \na practice considered successful in at least three somewhat diverse cases, but it was not necessarily \nthe optimal solution in all or even any of the cases. (3)The relative significance of cited conflicting \nforces in a case at hand is different from that for the pattern author. (4)~ are significant forces in \na case at hand which are underestimated or are not to be found in the list for any available design pattern. \nThe design pattern maven may well search his or her vast Permission to make digital or hard copies of \nall or part of this work for personal or classroom use is granted without fee provided that copies are \nnot made or distributed for profit or commercial advantage and that copies bear this notice and the full \ncitation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to \nlists, requires prior specific permission and~or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota \n(c) Copyright ACM 2000 1-58113. 30 7-3/00/10... $5.00 repository of design patterns0 find the best match, \nand apply it to a case at hand. A lot of the time, this will result in a good enough resolution to the \ncase, and the project can move on.. But sometimes a better solution would have made the project noticeably \nbetter. The budding design paw author may well emphasize the novel, and work hard at discovering and \ndocumenting new patterns which in fact improve little if at all on the body of patterns already collected, \nMeanwhile, the project is slowed without producing a noticeably better prc~duet. The observant participant \nwill note that there is an in~l~ between building and winnowing the list of candidate patter~, and analyzing \nand adjusting the problem's requirements, As one (person or group) proceeds one gains a better understanding \nof the problem at hand -what really is involved, what one has to have for an acceptable solution --up \nto a point. Usually some pattern is found which meets the requirements as ~j~sted, the search is done, \nand the problem is solved by appl~qng the pattern. As Herbert Simon described it, we have satJsficed-under \nconditions of bounded rationality .. work~mg with incomplete knowledge and having to m~e a decision -- \nwe have weighed our options until we judged one to meet o~ requirements; we then end the search by choosing \nthat option. But sometimes no pattern in the list quite satisfies the requirements, looking for more \nrelevant patterns gets nowhere, and we can't tweak our reqmrements any more. Then it is time to create \na new solution instead of trying to reuse. Note, though, that in considering candidate patterns and detecting \nwhere they fall short, we also identify where modification is needed. In reconsidering our requirements \nfor an acceptable solution~ wc clarify our understanding of what potential modifications to available \npatterns hold promise. Our failed attempt at satisficing has leR us with raw material, context, and direction \nfor creating the original solution we now\" know we need. I illustrate this process with two examples. \nIn the first, an interdepartmental working group addresses the problem of inefficient ORB transmission \nof structured data. They consider using a noncommercial application, making do with a commercial application, \nand designing interfaces and support to implement a design pattern (idiom) to coordinate transmission \nvia CORBA but do the actual transmission by other, more efficient means (like Schmidt). In this particular \nease, close examination of requirements and how they could be changed shows none of the alternatives \nto be acceptable. The working group hatch a new approach, by which to pass structured data via ORB w-hile \navoiding the high overhead this normally emails. They do this with a commercial ORB by speci~'ing all \narguments to be simple, built in types, while choosing the data format to :itself define its :internal \nstracttm-e. In the ~econd example,, a designer faces a situation in which some kind of Factory clearly \nis desired., but neither the simple kind nor VIi:ssides' PtuggabLe Facfo~' has the kind of durabili~\" \nand flexibility required. Careful consideration of what is really needed lends to the design of a Shopper \nl~eto O, as a slight variation on patterns akeady considered. These examples illustrate how we, under \neondi~ons of bounded rationality, come to the point where it is reasonable to try originality :instead \nof reuse, and how our deliberations prepare the w~' for that creativity. This process is, in I~xt, a \ngood practice which sometimes is derided as remvenang the wheel We could diagrmn this process to look \nlike a spiral development plot: Represent each pass (which will kave phases, e.g., (re)evaluate the list \nof requirements, ereate/upd~ the list of candidates, evaluate the list of candidates ~g~t the requirements) \nas a spiral, each successor sag where its predecessor left off. Successors sweep out larger areas (representing \ndegree of requirement satisfaction) than their predecessors. When the area is large enough, we're done. \nff the area doesn't grow, consider an original solution\u00b0 But I think, that the process is more like neural \nnet cor~titiou, which can be diagramed as a matrix of \"neurons\", with two banks of inputs representing \nrequirements (say, on the left) and candidate solutions (say, along tbe bottom). Each neuron represents \na requirement/solution corabination~ There are more rows than explicit requirements, there are more col~ \nthan identified candidates. As stimulation spreads from inputs mad reverberates among the neurons, each \nneuron gums or loses activation. At some point, one column's total activation reaches a critical level. \nThat column represents the chosen solution and the final set of requirements. The wimamg coktran may \nstand over a candidate solution or not: if it stands over a candidate solution, we have satisficed to \ndetermine oar selection; if there is no candidate solution under this COILrm-, we have chosen an original \nsolution. Some neurons in the witming column are activated above thresh hold, some aren't. The active \nones represent the accepted set of requirements. Some correspond to (are in the same row with) ~xphcit \niaptrt requLnma~ats; those which don't represent discovered requirements. Problem: How ~ decide wh~ ~ \n~op ~mg ~ find a~ acceptable design patl~era aaad ~ ~n original solution inste~ Context: You have a for \n~ich ~re ~r~ sere:HI available design patterns v~orfla \u00a2o~siden:ag No~e seems q~tc ade~ate to yo~ re \nfour 'uh~ ~ You widea your search for prormsmg design p~ttems, but still 'find none w~ch meet your requ \n~ You consider your :~ ~ad make ~jus~n~, bu~ sill] r~one of the available des~gz patterns se.~as ~u,me. \nForm: You s~'ted out with high h~s. and for a ~.Jte you seemed to be geeing \u00a2Ic~se ~ finding ~ .~ de~ \np~m to apply to yo~ problem But ~err wi )~our ~reh grad reeonsidee~ng youx reqm you now ~re ~t making \nreal progress tow~ fi~zling an ,, You do, however, have a more ~iled ~d~d,i:~ of ~\u00a2 ~.t~ ~d what is good \nor bad in ~\u00a2ifi\u00a2 available desi~ l~tte~as~ Solution: Consider ~ original to you:r problem a variaat o~ \nor o~ to s~\u00a2 ~ady considered will yield an ~ptabte s~l~tion, eeez~ though this would :not be ~ establi~&#38;ed \ndesign patt~ Reran|tins Coast: R&#38;#169;~es s~t on in tb~ quest for reuse now ~ foeu~ ~ ~e Considerations \nof avmlable desi~ yielded fitm:il~ty with ~uhmfi~ of ~th\u00a2 ~srobl~ ~ hand ~ld raw maim fo, original solution \n~ vmation or oa candidate pattems~ Rationale: ~gn p~ra seaix:~h did not provide direct t'euse, but did \nimproved u~ding of five problem ~md ideas for possible original probl~ soltttion~ This would :not have \nocc~ wilt the seth for an aceep~e de,ign pattern. Tile trick was to ~ w~ ~ seth h~ what it could, and \nthen to ehmge ~'~ Bibti~phy Alexander, Christopher  Sehmidt, Douglas~:/lwww.:Cs, v~J~L Simon, Herbert \n&#38; Vfissides, John Pluggable faclory, Part 1, 10(10):52056,68. Vlissides, John Pluggcdde fw:tory, \nPart 2, R2):51-55. \n\t\t\t", "proc_id": "367845", "abstract": "", "authors": [{"name": "Lawrence R. Carleton", "author_profile_id": "81100099266", "affiliation": "", "person_id": "P169589", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367933", "year": "2000", "article_id": "367933", "conference": "OOPSLA", "title": "Reinvent the wheel (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367933"}