{"article_publication_date": "01-01-2000", "fulltext": "\n Safely Creating Correct Subclasses without Seeing Superclass Code Clyde D. Ruby Department of Computer \nScience Iowa State University Ames, Iowa 50011 (641) 469-6483 ruby@cs.iastate.edu ABSTRACT A major problem \nfor object-oriented frameworks and class libraries is how to provide enough information about an extensible \nsuperclass so that programmers can safely create new subclasses without studying superclass code. The \ngoal of my work is to determine what information is needed so library providers do not have to give away \nthe code of library superclasses. A closely related goal is to provide guidelines that simplify reasoning \nabout classes that inherit from such frameworks and class libraries. The long-term goal of my research \nis to develop tool support to automatically generate some of the necessary documentation and to assist \nprogrammers in reasoning about how to create correct subclasses.  Keywords Downcall, subclass, semantic \nfragile subclassing problem, subclassing contract, Java language, JML language. 1. PROBLEM Usually, object-oriented \n(OO) frameworks or class libraries do not provide enough documentation to allow programmers to write \nsubclasses; instead, programmers must study the library s source code. The problem my research addresses \nis determining what information is necessary in library documentation, and how to use it to create subclasses \nthat do not exhibit problems such as non-termination or unexpected behavior. A correct superclass method \ncan only have such problems when a new subclass overrides some superclass methods, leading to downcalls. \nA downcall occurs when a superclass method directly or indirectly calls a method that has been overridden \nby the subclass. Problems arise when the overriding subclass method behaves differently than the superclass \nmethod expects. Such downcall problems are closely related to the so-called semantic fragile base class \nproblem [4] [6, pp. 102-104], which is concerned with how to change superclasses without invalidating \nexisting subclasses. The problem being addressed here might be Permission to make digital or hard copies \nof all or part of this work for personal or classroom use is granted without fee provided that copies \nare not made or distributed for profit or commercial advantage and that copies bear this notice and the \nfull citation on the first page. To copy otherwise, or republish, to post on servers or to redistribute \nto lists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota. \nCopyright 2000 ACM 1-58113-307-3/00/10 $5.00. called the semantic fragile subclassing problem, which \ndeals with how to create a valid subclass; that is, how to override superclass methods in such a way \nthat the subclass and its superclass methods are free from problems caused by downcalls. The problems \ncaused by downcalls can be complicated and difficult to detect manually. Thus, another problem is how, \nthrough tools and techniques, to assist programmers who want to specialize or extend library classes. \n 2. GOALS The long-term goal of my work is to discover what makes good quality documentation of frameworks \nand class libraries. The more immediate goals are to develop formal notations and reasoning systems to \nsupport an understanding of quality documentation. To that end, my research has focused on formal rules \nfor determining when it is safe for a subclass to make a superclass call, and when a method must be overridden \nto avoid downcall problems [5]. These rules use new forms of specification that are being embodied in \nthe design of a specification language, the Java Modeling Language (JML) [1], which is tailored to Java \nprograms. I will be developing a tool to extract the information about library classes that is necessary \nto apply the formal rules. This tool will also aid in reasoning by checking the specifications of subclasses, \nand enforcing the rules. Another goal of my research is to determine whether framework and class library \ndesigners and implementers can ease the reasoning problems of their reusers. To this end, I am using \nthe formal rules to develop guidelines for library designers and implementers; our paper in this conference \n[5] shows that such guidelines can significantly simplify the reasoning of reusers. 3. APPROACH The \nfirst step has been to analyze and categorize the different ways that downcall problems can occur when \nnew subclasses are created. So far this has been done using various examples. Many downcall problems \ncan be avoided with the pre- and post\u00adcondition information in specifications, and others can be avoided \nwith some additional information derived from the code of the methods of the superclass. This extra information \nhas been added to JML. If a problem could not be avoided, then some assumptions about the implementation \nmust be made, such as, that methods from other unrelated classes do not access or change instance variables \nof the superclass. The extra information in a JML specification is contained in a subclassing contract \nthat specifies the methods that may be called and the instance variables that can be accessed by a method. \nWe have developed rules showing how the subclassing contract can be used to avoid problems caused by \ndowncalls [5]. These rules and the associated reasoning technique have been used and refined on some \nsmall examples. The next step is to develop a tool to automatically extract the additional information \nfrom superclass code and to add it to the superclass specification. This should help make the technique \npractical for everyday use and for larger examples. The soundness of the rules and reasoning technique \nis an important area for future work. Thus far our research on this front has been based on examples \nand careful thinking about what cases seem possible. The next step is to make this analysis more formal, \nby defining a subset of Java and using it to determine whether the rules cover all possible ways that \ndowncall problems can occur. I plan to formally prove soundness as part of my Ph.D. dissertation. The \nproof of soundness is one important way that the research will be evaluated. I also plan to experiment \nto evaluate the practicality of the technique and its scalability. One way this will be done is to try \nit on parts of various extensible frameworks and libraries. 4. SUMMARY The main benefit of this work \nis that sufficient and unambiguous documentation of OO class libraries and frameworks would allow companies \nto protect their investment in source code; that is, it would enable a company to ship only compiled \ncode and documentation. In addition, such documentation could serve as a contract between reusers and \nlibrary providers with the usual benefits [2, 3], such as the ability to change the implementation of \na library class without endangering any client code. Furthermore, reading the documentation appears to \nbe much less complex for reusers than studying the superclass code, since it abstracts out only the information \nneeded to reason about how to create correct subclasses. Again, the overall goal of my research is to \ndetermine what information is needed in good quality documentation of frameworks and class libraries. \nTo achieve this, the research is focusing on the development of formal systems and techniques that allow \nprogrammers to create correct subclasses without seeing superclass code. Based on these formal systems, \nthe research seeks to provide guidance for designers and implementers that would simplify the reasoning \nof reusers and programmers inheriting from such libraries. The results will then be used as the basis \nof tools to assist designers, implementers and reusers of frameworks and class libraries. The tools will \nautomatically generate part of the documentation (e.g., the subclassing contract that describes some \nimportant features of the implementation code), and will help enforce the formal rules. 5. REFERENCES \n[1] G. T. Leavens, A. L. Baker, and C. Ruby. Preliminary design of JML: A behavioral interface language \nfor Java. Technical Report 98-06i, Iowa State University, Department of Computer Science, Feb. 2000. \nSee also the JML web page at http://www.cs.iastate.edu/~leavens/JML.html. [2] B. Liskov and J. Guttag. \nAbstraction and Specification in Program Development. The MIT Press, Cambridge, MA, 1986. [3] B. Meyer, \nApplying design by contract . Computer, 25(10):40-51, Oct., 1992. [4] L. Mikhajlov and E. Sekerinski. \nA study of the fragile base class problem. In E. Jul, editor, ECOOP 98 Object-Oriented Programming, \n12th European Conference, Brussels, Proceedings, volume 1445 of Lecture Notes in Computer Science, pages \n355-382. Springer-Verlag, July 1998. [5] C. Ruby and G. T. Leavens. Safely creating correct subclasses \nwithout seeing superclass code. To appear in OOPSLA 2000 Conference Proceedings, October 2000. [6] C. \nSzyperski. Component Software: Beyond Object-Oriented Programming. ACM Press and Addison-Wesley, New \nYork, NY 1998.  \n\t\t\t", "proc_id": "367845", "abstract": "<p>A major problem for object-oriented frameworks and class libraries is how to provide enough information about an extensible superclass so that programmers can safely create new subclasses without studying superclass code. The goal of my work is to determine what information is needed so library providers do not have to give away the code of library superclasses. A closely related goal is to provide guidelines that simplify reasoning about classes that inherit from such frameworks and class libraries. The long-term goal of my research is to develop tool support to automatically generate some of the necessary documentation and to assist programmers in reasoning about how to create correct subclasses.</p>", "authors": [{"name": "Clyde D. Ruby", "author_profile_id": "81332524801", "affiliation": "Department of Computer Science, Iowa State University, Ames, Iowa", "person_id": "P49600", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.368062", "year": "2000", "article_id": "368062", "conference": "OOPSLA", "title": "Safely creating correct subclasses without seeing superclass code", "url": "http://dl.acm.org/citation.cfm?id=368062"}