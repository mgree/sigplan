{"article_publication_date": "01-01-2000", "fulltext": "\n The Camp Smalltalk ANSI Test Suite Ralph Johnson Donald MacQueen University of Illinois at Urbana-Champaign \nJWARS johnson@cs.uiuc.edu asmalltalker@who.net Abstract Although there has been an ANSI standard for \nSmalltalk for some years, there has not been a verification suite for it. This has allowed the various \ndialects to deviate from the standard without much notice. One of the first Camp Smalltalk projects was \na test suite for the ANSI standard protocols. It has several thousand tests based on SUnit, a way of \ntesting protocol conformance, and way of reusing protocol-based tests for each of the concrete classes \nthat is supposed to support a protocol. 1. Background The ANSI standard for Smalltalk (NCITS 319-1998) \ndefines the behavior of twenty-nine concrete classes, as well as a number of fundamental protocols such \nas Object, nil, and boolean. Most implementations of Smalltalk conform reasonably well to the standard, \nbut none of them conform exactly to it. Because there has not been a test suite for the standard, it \nhas been hard to measure conformance to the standard. This causes problems when porting from one Smalltalk \nimplementation to another. Until you know what the various Smalltalks have in common, it is hard to write \nportable code. The ANSI standard was supposed to be a guide to what was in common, but it has not had \nthat effect so far, mostly because there is no test suite. One of the things that makes the ANSI standard \ndifficult to test is that it is based on protocols. The standard was not supposed to require a particular \nway of implementing the core classes, which implied that it did not specify inheritance relationships. \nInstead, it specified a set of protocols and then defined a set of concrete classes that met those protocols. \nA test suite must be able to test whether an object conforms to a particular protocol. Also, because \nmany classes conform to the same protocol, it should be possible to write tests for a protocol and then \nto reuse them for many classes. One of the popular ways to test Smalltalk programs is with SUnit. (See \nhttp://ansi-st-tests.sourceforge.net/SUnit.htm). SUnit is a framework for writing unit (and other) tests. \nIt contains a class TestCase. Unit tests are subclasses of TestCase. But if the test for a protocol were \na subclass of TestCase and we tried to reuse those protocol tests for a concrete class by inheriting \nthem, then the class tests would have to be a subclass of all of the protocol tests it was trying to \nreuse. Smalltalk does not allow multiple inheritance. Thus, some other way of reusing tests is necessary. \nPermission to make digital or hard copies of all or part of this work for personal or classroom use is \ngranted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, \nto post on servers or to redistrbute to lists, requires priror specific permission and/or a fee. OOPSLA \n2000 Companion Minneapolis, Minnesota &#38;#169; Copyright ACM 2000 1-58113-307-3/00/10 $5.00 2. Camp \nSmalltalk Camp Smalltalk is an event where Smalltalk programmers work together to solve technical problems \nthat are important to the Smalltalk community. (See http://camp.smalltalk.org). We decided to make a \ntest suite for the ANSI standard for Smalltalk. The testing team met twice, from March 14-18, 2000 and \nfrom July 17-20, 2000. At the first Camp, we examined a test suite developed by Richard Harmon and determined \nthat its model of the ANSI standard protocols was just what we needed, and that many of his tests could \nalso be reused. We refactored the test suite in an attempt to make tests of a protocol more reusable, \nbut ended the week with only a few classes refactored. We also wrote some more tests, and got the existing \ntests to run on several implementations of Smalltalk. In the process, we discovered incompatibilities \nin the various versions of Sunit, and discovered first hand some of the problems of porting code between \nvarious implementations of Smalltalk. During the next few months, Richard Harmon implemented some more \ntests, Sam Schuster made a compatible version of Sunit for every known Smalltalk implementation, we refactored \nsome tests and wrote some more. At the second Camp, we methodically wrote tests for all protocols, often \nby refactoring the tests for existing concrete classes. Then we wrote tests for all the concrete classes. \nMany of them had few tests not reused from the protocols. By the end of Camp, we had tests for every \nmethod of every concrete class. The tests suite currently runs on Dolphin Smalltalk, Squeak, VisualAge, \nand VisualWorks. However, not all the tests pass. Most of the incompatibilities have been fixed, but \na few are either harder to fix (e.g. some of the exception tests) or of questionable importance. 3. \nThe Test Suite Richard Harmon s protocol system provides a class Protocol and MethodProtocol and a complete \nencoding of the protocol information of the ANSI standard. The protocol system can tell whether an object \nmeets a particular protocol, and what the protocol of a return value of a particular method should be. \nThere is a subclass of TestCase (ANSITestCase) that automatically tests the return value of a method \nto make sure that the return value has the right protocol. ANSITestCase has two subclasses, ConcreteTestCase \nand ProtocolTestCase. A ProtocolTestCase is given a set of example objects (of a paritcular class) and \nuses them to run a set of tests for a particular protocl. For example, the Collection protocol tests \nassumes it is given a collection of integers from 1 to 4 and tests methods such as do:, select, and collect:. \nA ConcreteTestCase has a set of ProtocolTestCases that it reuses. It automatically inherits each test \nfrom each of its ProtocolTestCases. When it reuses a ProtocolTestCase, it parameterizes it with some \nexample objects. This effectively allows the ConcreteTestCase to simulate multiply inheriting from each \nof the ProtocolTestCases that it is reusing. The Protocol system is fairly portable across implementations \nof Smalltalk. We are writing it to only use ANSI standard protocols and then it should be completely \nportable. The tests themselves depend on little except SUnit and the Protocol system, so the hard part \nof getting the test suite running is getting these other packages running. The people who worked on the \ntest suite at Camp Smalltalk 1 were Eric Clayberg, Ron Jeffries, Ralph Johnson, Donald MacQueen, Paul \nMcDonough, Doug McPherson, John O Keefe, andSamuel Shuster.. The people who worked on the test suite \nat Camp Smalltalk 2 were Tracy Burdick, Chris Folkers, Jeff Hallman, Ralph Johnson, Donald MacQueen, \nPaul McDonough, John O Keefe, Peter van Rooijen, and Samuel Shuster.  \n\t\t\t", "proc_id": "367845", "abstract": "<p>Although there has been an ANSI standard for Smalltalk for some years, there has not been a verification suite for it. This has allowed the various dialects to deviate from the standard without much notice. One of the first Camp Smalltalk projects was a test suite for the ANSI standard protocols. It has several thousand tests based on SUnit, a way of testing protocol conformance, and way of reusing protocol-based tests for each of the concrete classes that is supposed to support a protocol.</p>", "authors": [{"name": "Ralph Johnson", "author_profile_id": "81330492373", "affiliation": "University of Illinois at Urbana-Champaign", "person_id": "PP39064780", "email_address": "", "orcid_id": ""}, {"name": "Donald MacQueen", "author_profile_id": "81100334809", "affiliation": "JWARS", "person_id": "P68574", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367924", "year": "2000", "article_id": "367924", "conference": "OOPSLA", "title": "The camp smalltalk ANSI test suite (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367924"}