{"article_publication_date": "01-01-2000", "fulltext": "\n An Architecture for the Evolution of Web Applications Paulo Caroli Carlos Jos\u00e9 P. de Lucena Marcus \nFontoura Computer Science Department Computer Science Department Computer Science Department PUC-Rio, \nR. Marqu\u00eas de S. Vicente, PUC-Rio, R. Marqu\u00eas de S. Vicente, Princeton University, 35 Olden Street, 225, \nRio de Janeiro, RJ, Brazil, 225, Rio de Janeiro, RJ, Brazil, Princeton, New Jersey, USA, 08544 22453-900 \n22453-900 mfontoura@acm.org caroli@les.inf.puc-rio.br lucena@inf.puc-rio.br ABSTRACT This work presents \na software architecture that is especially useful for managing the evolution of web applications. Web-based \nsystems are a range of applications for which there are no technological standards and new concepts and \ntools are currently under evolution. Examples of this lack of standards include the transition from CGI \nscripts to Java Servlets and to Java Server Pages (JSP). Therefore, the maintenance and evolution of \nweb applications is an important topic for software developers and the software research community. The \nproposed architecture combines the n-tier, broker, and blackboard architectural patterns. 1. THE ARCHITECTURE \nA 3-layered architecture [1] separates the system functionality into user interface, business logic, \nand persistency. Brokers [4] encapsulate the interface between layers. Finally, a blackboard class repository \nmodels entities that do not naturally belong to any of the three layers. Figure 1 abstractly illustrates \nthis hybrid architecture. The interface layer is responsible only for validating the user interface input \n(e.g. verifying if all required fields have been provided). It does not perform any business operation. \nTechnologies generally used in this layer include HTML, Java Servlets, and JSP. The business layer models \nthe business logic, independently from the access interfaces and persistency models. This layer focuses \non the system behavior the business rules and not on the data being manipulated, which is modeled by \nblackboard classes. The persistency layer is responsible for the physical storage of the data. It may \nuse a wide variety of persistency models, from flat files to complex frameworks for handling heterogeneous \ndatabases [3]. The brokers that implement the interlayer communication are responsible for selecting \nthe required information and converting it to an appropriate format. One of the main responsibilities \nof the interface-business broker is the conversion between strings that come from web forms into business \nobjects that will handle the Permission to make digital or hard copies of all or part of this work for \npersonal or classroom use is granted without fee provided that copies are not made or distributed for \nprofit or commercial advantage and that copies bear this notice and the full citation on the first page. \nTo copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific \npermission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota Copyright ACM 2000 1-58113-307-3/00/10...$5.00 \nHTTP request. The business-persistency broker is responsible for manipulating persistent data to fulfill \nrequests from business objects. Layers Blackboard  Broker Interface -Business  Broker Figure 1. The \narchitecture Classes that do not belong to neither the three layers nor the brokers are placed in the \nblackboard module. These classes model real-world objects, such as employees and managers. Generally \nthey represent persistent information and are used in the business\u00adpersistency communication protocol. \nThis architecture separates data from functionality: the data is provided by the blackboard classes while \neach of the three layers provides the appropriate functionality. Another important aspect is data conversion. \nIn general the business layer and the blackboard will be implemented using OO technology (e.g. Java) \nwhile the interface and persistency layers may use other approaches (e.g. events and relational databases). \nThe brokers are the entities that should make the appropriate conversions, making the interlayer communication \nindependent of the technologies used to implement each layer. The loose-coupled nature of this architecture \nmakes it possible to evolve each layer independently from the others. This is especially useful for web \napplications, for which new techniques and tools are released constantly and no standards are defined \nyet. Figure 2 illustrates abstractly the evolution of an access control system [2]. It was first developed \nwith Java Servlets as the user interface and flat files as the persistency model. A second version of \nthe system was then developed with JSP and relational database. The architecture allowed no changes to \nbe made to the business layer and blackboard classes, when evolving the system. Version 1 Servlets Interface \n-Business Business Business -Persistency Persistency Flat Files Version 2 Interface JSP Interface -Business \nBusiness Business - Persistency Persistency Relational Database Figure 2. System evolution example \n 2. OBSERVED ADVANTAGES We have successfully applied this architecture to several large web-based systems \n[2]. These experiments have shown us some advantages of this approach, which include: Database changes: \nwithin the proposed architecture, changes on the data model require modifications only on the persistence \nlayer, the business-persistency broker, and on the blackboard data classes. In the case that business \nlogic and interface are mixed with the persistency code, any changes in the data model may require changes \nof several parts of the system. In the case of a drastic change (e.g. changing from relational to OO \ndatabase systems) the complete redesign of the system may be required;  Interface changes: changes are \nconfined to the interface layer and to the interface-business broker (e.g. changing from a Java Servlet \nto a JSP solution should not result in a general reengineering of the system - the business layer, persistency \nlayer, business-persistency broker and blackboard should remain the same);  Legacy system integration: \nlegacy systems can be treated as data repositories, and their integration with the rest of the system \ncan be made through specific business-persistency brokers that act as system wrappers. Figure 3 illustrates \nthis situation;  Maintainability and evolution: addition (or elimination) of features and changes of \nimplementation technology are facilitated through the use of the architecture, since changes are encapsulated \nin layers and the system functionality is well distributed in proper modules;  Concurrency: the architecture \nallows better concurrency control, due to the low granularity of data and functionality (e.g. access \npolicies for handling data concurrent requests may be encapsulated on the blackboard module);  Performance \nissues: since the system is well organized, performance bottlenecks can be more easily identified. Moreover, \noptimizations are confined to specific layers;  Management issues: aspects such as team division, code \nownership, cost control, and progress measurement, are also better implemented when a well-defined architecture \nis used.  Business -Pers. System Wrapper   Legacy System Database  Figure 3. Legacy system integration \n 3. CONCLUSIONS AND FUTURE WORK Several case studies have shown that the proposed architecture is effective \nfor the development of web-based applications [2]. It accommodates drastic changes to the data and user \ninterface models smoothly. It also allows for better development practices. We plan to extend UML case \ntools to support the proposed architecture directly. One approach to do that is to mark architectural \ninformation in UML class diagrams, and use this information to generate code with respect to the architecture. \nWe have already started this work using Rational Rose (http://www.rational.com/products/rose) as the \nUML case tool. 4. ACKNOWLEDGMENTS We would like to thank Prof. Sergio Carvalho (in memorian) for his \nimmense contribution to this work. 5. REFERENCES [1] F. Buschman, R. Meunier, P. Sommerlad, and M. Stal, \nPattern-Oriented Software Architecture, A system of Patterns, John Wiley &#38; Sons, 1996 [2] P. Caroli, \nAn Object-Oriented Methodology for Software Projects, M.Sc. Dissertation, Computer Science Department, \nPontifical Catholic University of Rio de Janeiro (PUC-Rio), 1999 (in Portuguese). [3] E. Uch\u00f4a and R. \nMelo, HEROS: A Framework for Heterogeneous Database Systems Integration, in Proceedings of the Tenth \nInternational Conference on Database and Expert Systems Applications (DEXA 99), LNCS 1677, 656-667, Springer-Verlag, \nFlorence, Italy, 1999. [4] M. Shaw and D. Garlan, Software Architecture -Perspectives on an Emerging \nDiscipline, Prentice Hall, 1996.  \n\t\t\t", "proc_id": "367845", "abstract": "<p>This work presents a software architecture that is especially useful for managing the evolution of web applications. Web-based systems are a range of applications for which there are no technological standards and new concepts and tools are currently under evolution. Examples of this lack of standards include the transition from CGI scripts to Java Servlets and to Java Server Pages (JSP). Therefore, the maintenance and evolution of web applications is an important topic for software developers and the software research community. The proposed architecture combines the n-tier, broker, and blackboard architectural patterns.</p>", "authors": [{"name": "Paulo Caroli", "author_profile_id": "81100203755", "affiliation": "Computer Science Department, PUC-Rio, R.Marqu&#234;s de S.Vicente, 225, Rio de Janeiro, RJ, Brazil, 22453-900", "person_id": "P222671", "email_address": "", "orcid_id": ""}, {"name": "Carlos Jos&#233; P. de Lucena", "author_profile_id": "81100226357", "affiliation": "Computer Science Department, PUC-Rio, R.Marqu&#234;s de S.Vicente, 225, Rio de Janeiro, RJ, Brazil, 22453-900", "person_id": "PP15026525", "email_address": "", "orcid_id": ""}, {"name": "Marcus Fontoura", "author_profile_id": "81100436231", "affiliation": "Computer Science Department, Princeton University, 35 Olden Street, Princeton, New Jersey", "person_id": "PP14153436", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367958", "year": "2000", "article_id": "367958", "conference": "OOPSLA", "title": "An architecture for the evolution of Web applications (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367958"}