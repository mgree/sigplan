{"article_publication_date": "01-01-2000", "fulltext": "\n Panel: Cracking the Software Paradox John Daniels, Syntropy Limited, co-moderator Jim Amsden, IBM Larry \nConstantine, Constantine &#38; Lockwood David E. DeLano, AG Communication Systems Martin Griss, Hewlett-Packard \nIvar Jacobson, Rational Else-Marie \u00d6stling, Icon MediaLab Rebecca Wirfs-Brock, Wirfs-Brock Associates, \nco-moderator Introduction Can we develop software faster, cheaper, while remaining in control of quality? \nThe advent of the web and the e-business phenomena mandates that scaleable, highly reliable, user\u00adcentered \nsoftware be developed in a very short time. In this new world, consumers won't accept clunky, clueless, \nbrittle software. We've got to get it right the first time and then be able to rapidly change it to meet \nnew market demands. This panel explores how development processes and tools need to be tuned, tamed or \nreframed in order to crack this development paradox and deliver quality software in e-time. Each panelist \nbrings a unique perspective on the nature of the problem and proposes some solutions. The key to cracking \nthe development paradox is multi-faceted. It involves changes to tools, technologies, platforms, and \nfundamental ways we develop software. This panel will be conducted as a roundtable. Each panelist will \nhave an e-time moment to make an introductory statement, which will then be followed by fellow panelist \nand audience reactions. Panelists will explore ideas in rapid response to a changing set of audience \nand fellow panelists demands!  John Daniels John is a consultant at Syntropy Limited, working on system \narchitectures and development processes. He was previously Application and Technical Architect for Bankers \nTrust in London, and before that Managing Director of consulting and training company Object Designers \nLimited. John is an object technology pioneer, with more than 15 years experience of object modeling \nand implementation in a range of industrial and commercial applications. Permission to make digital or \nhard copies of all or part of this work for personal or classroom use is granted without fee provided \nthat copies are not made or distributed for profit or commercial advantage and that copies bear this \nnotice and the full citation on the first page. To copy otherwise, to republish, to post on servers or \nto redistribute to lists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion Minneapolis, \nMinnesota &#38;#169; Copyright ACM 2000 1\u00ad58113-307 3/00/10...$5.00 Ivar Jacobson Ivar is vice president \nof business engineering for Rational Software Corporation. He is the founder of Objectory AB in Sweden, \nwhich merged with Rational Software in 1995. He was one of the three original designers of the UML, which \nwas officially adopted as a standard by the Object Management Group in 1997. We have heard it many times: \nsoftware needs to be developed faster and at the same time with higher quality. The difference today \nis that in e-business, software is not just a tool for the business. It is the business! And since the \nbusiness changes quickly and has to always work well, the same applies to our software. This time it \nis serious. We need to develop faster and better than ever before we need to crack the software development \nparadox. The solution to our development paradox is obvious: 1) Let every member in the development team \nknow what to do, when to do it, and how to do it effectively. This implies a process accompanied by integrated \ntools that address the whole development lifecycle. 2) While doing it, don't reinvent the wheel. This \nmeans developing for reuse and development with reuse. Reuse of all kinds of assets: requirements, analysis, \ndesigns, implementations, and tests. This time we are on the track to crack it! Martin Griss Martin \nis a Principal Laboratory Scientist at Hewlett-Packard Laboratories, Palo Alto, California. At HP since \n1982, he researches software reuse, object-oriented development, component-based software engineering, \nsoftware agents and e\u00adservice management systems. He is co-author of the book Software Reuse: Architecture, \nProcess and Organization for Business Success. Pervasive web-based mobile appliances, agents and services \nwill have a radical effect on the way we develop novel e\u00adcommerce solutions. We need rapid, systematic \nprocesses to construct high-quality, efficient, and scalable software systems. E-service middleware, \ncomponents, autonomous agents and workflow promise flexible, robust systems. The key is much more systematic \nreuse of architectures, frameworks, patterns, components, agents, classes and aspects. Incremental, model-driven, \nprocesses will incorporate architecture, design and feature-oriented domain analysis to define reusable \nmodels, frameworks and components, and aspect-oriented technology to create and customize compatible \ncomponents and agents using aspect-oriented languages, generators, templates, and code. UML and XML provide \ncompatible representation languages, for design, construction and configuration, and meta-data driven \nexecution. Else-Marie \u00d6stling Else-Marie is Chief Technical Officer at Icon MediaLab. Icon MediaLab \nprovides internet, intranet, extranet, e-commerce and wireless strategies and solutions to clients for \nbusiness-to\u00adbusiness, business-to-consumer and business-to-employee projects. She has over 15 years of \nexperience in methods and process development, with an emphasis on object technology. Everyone in the \neBusiness solution space deals with the same paradox: more aggressive time-to-market needs, and yet more \ninsistent requirements on scalability, and reliability. Currently we can address these challenges with \ngeneric components that are readily available. Nobody builds a custom commerce engine today; instead \nwe make use of reliable, existing components, whether it is a B2B or B2C site. However, as eBusiness \nsolutions become more customized to vertical industries, it will be more difficult to find appropriate \npre-built generic components. To crack the paradox we need to re\u00adaddress how we identify, specify, design \nand build components, such that they can more easily be made generic and reused across projects. Jim \nAmsden Jim is a Senior Software Engineer at IBM. Jim has been involved in developing and using software \ndevelopment methodologies and tools that support them since 1988. He is currently responsible for helping \ndevelop and deploy a tool integration strategy to enable ISVs to integrate their tools with IBM products \nin order to facilitate end-to-end application development. Developers are faced with conflicting demands \nfor high quality applications built in Web time using unstable technologies. Web application design patterns \nhelp manage this complexity and indicate the required tools. Tools need to be integrated and manage the \nrelationships between their associated artifacts. A tool integration platform would provide the required \nintegration-ware enabling the development of products consisting of integrated, configurable, roles appropriate, \nand end-to-end development tools based on best practice design patterns. To reduce acceptance barriers, \nthis integration-ware must be based on open standards as much as possible and Open Source where standards \ndon't exist. To be effective, tools need to be integrated into a common workbench. The workbench and \nintegration-ware must support flexible tool integration appropriate to vendor business objectives by \nproviding various conformance levels of integration. Conformance levels define what any vendor must do \nto integrate at a level, what technologies are required, and any integration expectations. Rebecca Wirfs-Brock \nRebecca, co-inventor of Responsibility-Driven Design, is president of Wirfs-Brock Associates, a firm \nspecializing in the transfer of object analysis and design expertise through consulting, training and \nmentoring. Rebecca co-authored the classic book Designing Object-Oriented Software. The only way to crack \nthe development paradox is to approach development and design differently than we do today. I suggest \nwe divide our work into core, mundane (the 80% of the work that consumes 120% of our time), and revealing. \nCore elements are vital to our success. They can include the \"ilities\"-reliability, scalability or portability. \nSolutions for these \"ilities\" won't emerge on their own-to crack them we need tunable, pre-specified \ndesigns and pre-built components (design solutions in-a-box). We need tools and methods that increase \nproductivity for the bulk of our mundane work. We must spend more quality time developing solid cores \nwhile exploring solutions to revealing problems. Revealing problems are hard because they cover new territory. \nThey require creativity, insight time to think and experiment. To help solve revealing problems we need \na development environment and process that encourages and supports highly creative, non\u00adpredictable side-excursions, \nwhile at the same time getting the rest of the work done. Larry Constantine Larry is a pioneer of modern \nsoftware engineering methods and practices whose career spans nearly 40 years and whose contributions \nin the computer and social sciences are widely recognized. David DeLano David is currently working on \nVoice over IP products at AGCS, which has a long history in the telecommunications business. In this \nnew world, traditional development companies will be forced into acting like small, agile companies. \nHowever, there is a legacy of expectations to maintain quality, robustness, feature content, and support. \nDevelopment must occur in smaller pieces, by fewer people. Processes must become less formal. Quality \nexpectations will be tempered in favor of time to market and cost. Communications between team members \nbecomes critical. Tools used in the past no longer suffice. Individual expertise becomes a critical project \nresource. In the end we have to be careful not to become too informal. The trick is to walk the fine \nline that separates control from chaos.  \n\t\t\t", "proc_id": "367845", "abstract": "", "authors": [{"name": "John Daniels", "author_profile_id": "81100401897", "affiliation": "Syntropy Limited", "person_id": "PP31073656", "email_address": "", "orcid_id": ""}, {"name": "Jim Amsden", "author_profile_id": "81100348140", "affiliation": "IBM", "person_id": "P140209", "email_address": "", "orcid_id": ""}, {"name": "Larry Constantine", "author_profile_id": "81100375146", "affiliation": "Constantine & Lockwood", "person_id": "PP14132845", "email_address": "", "orcid_id": ""}, {"name": "David E. Delano", "author_profile_id": "81100020449", "affiliation": "AG Communication Systems", "person_id": "P61221", "email_address": "", "orcid_id": ""}, {"name": "Martin Griss", "author_profile_id": "81100145121", "affiliation": "Hewlett-Packard", "person_id": "PP31080051", "email_address": "", "orcid_id": ""}, {"name": "Ivar Jacobson", "author_profile_id": "81100030692", "affiliation": "Rational", "person_id": "P117558", "email_address": "", "orcid_id": ""}, {"name": "Else-Marie &#214;stling", "author_profile_id": "81100515185", "affiliation": "Icon MediaLab", "person_id": "P312628", "email_address": "", "orcid_id": ""}, {"name": "Rebecca Wirfs-Brock", "author_profile_id": "81100400353", "affiliation": "Wirfs-Brock Associates", "person_id": "PP17001255", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367890", "year": "2000", "article_id": "367890", "conference": "OOPSLA", "title": "Cracking the software paradox (panel session)", "url": "http://dl.acm.org/citation.cfm?id=367890"}