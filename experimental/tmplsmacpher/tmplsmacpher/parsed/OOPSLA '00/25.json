{"article_publication_date": "01-01-2000", "fulltext": "\n Design Patterns and Real-time Object-oriented Modeling Ross McKegney Dr. Terry Shepard Dept. of Computing \n&#38; Information Science Dept. of Electrical &#38; Computer Engineering Queen s University, Royal Military \nCollege of Canada Kingston Ontario Canada Kingston Ontario Canada mckegney@cs.queensu.ca shepard@rmc.ca \nReal-time object-oriented modeling tools (e.g. Rational Rose-RT, i-Logix Rhapsody) allow developers to \nfocus on software architecture by abstracting away low-level implementation details. We believe that \ndesign patterns can be very beneficial in this context, and present the rationale and concepts behind \na proposal for the extension of such a toolset to support them explicitly. 1. Introduction The design \nand development of real-time software (i.e. software that must ensure timeliness while interacting with \nan external environment) is more difficult than most other software. Modeling tools (e.g. [6,15]) help \ndeal with this complexity, allowing developers to view the system at various levels of abstraction, animate \nthe models in a simulation environment, and even generate the code for a variety of target hardware/ \nRTOS configurations. A natural extension to these tools is to provide support for design patterns (a \nmethod of documenting experience in the form of problem/context/solution triples for recurring problems). \nSuch an extension provides yet another layer of abstraction to the models, and makes explicit the application \nof design patterns. Rational Rose-Realtime (Rose-RT) will be used as the basis for a concrete example \nof how such an abstraction layer might be implemented. 2. Rose-RT Toolset Rose-RT extends the Rational \nRose visual modeling tool with model execution and code generation capabilities from ObjecTime Limited \n[13]. Models are built using active objects (called capsules) that interact with each other through signal\u00adbased \nboundary objects called ports . Each capsule has an associated hierarchical state machine (that specifies \nits behaviour); complex capsules can also contain sub-capsules. Complete C++ based executables can be \ngenerated directly from the models for a variety of hardware/RTOS targets. The Rose-RT toolset is an \nexcellent candidate for the extension proposed for three reasons: first, the tool allows visual modeling \nof component structure and behaviour; second, the tool supports explicit modeling of issues like concurrency, \ndistribution and timeliness; third, the code generation capability means that the design can be followed \nall the way to the target. Permission to make digital or hard copies of all or part of this work for \npersonal or classroom use is granted without fee provided that copies are not made or distributed for \nprofit or commercial advantage and that copies bear this notice and the full citation on the first page. \nTo copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific \npermission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota &#38;#169; Copyright ACM 2000 1-58113-307-3/00/10...$5.00 \n 3. RTOO Design Patterns The patterns concept has proved useful among developers of real\u00adtime software \n(i.e. software that must ensure timeliness while interacting with an external environment). A survey \nof design patterns applicable to real-time object-oriented (RTOO) software is included in [9], and summarized \nbelow. The existing RTOO patterns can be classified as either general purpose or domain specific. The \ngeneral purpose patterns include: Douglass real-time design patterns [5] addressing a variety of issues \nsuch as distribution, state behaviour, safety and reliability; Schmidt et. al. s patterns for concurrent, \nparallel, and distributed systems [16]; and other patterns (e.g. [2,7]). The domain specific patterns \ncan be sub-categorized as process control, tele\u00adcommunications, or embedded computer systems. The process \ncontrol patterns include patterns for assisting the design of avionics control systems [8], and fire \nalarm control systems [11]. The telecommunications domain has a rich set of patterns (e.g. [3,10,14]) \nfor dealing with the performance and robustness required by such systems. Finally, the embedded computer \nsystems patterns (e.g. [1,4,12]) discuss issues such as resource management and optimization, porting \nissues, and scheduling. 4. Proposal We present a proposal for extension to Rational Rose-RT to support \ndesign patterns. The following are the features that we feel are desirable in such a tool: Multiple \npattern repositories: Provide support for multiple pattern repositories, with the possibility to share \nrepositories over a network.  Improved classification mechanism: An improved mechanism for structuring \nthe potentially large sets of patterns to facilitate finding applicable patterns.  Ease of Expansion: \nRelatively easy to add or extend patterns.  Explicit support for pattern languages: Cross-referencing \nbetween patterns in languages, and the ability to specify relationships, including integration issues, \nbetween patterns.  Multiple pattern implementations: Associate multiple concrete implementations with \neach abstract pattern specification.  Multiple implementation types: Allow pattern implementations to \nconsist of Rose-RT behaviour models and/or structure models, or files of another type.  Highlight patterns \nin models: Keep track of where patterns have been used in a model, and make it easy for a developer to \nsee where and how these patterns have been applied.  Pattern verification: Automatically verify whether \nchanges to the model have broken any of the patterns.  Pattern mining: Automatically detect occurrences \nof patterns in a model.  Three methods of pattern implementation: Support top\u00addown, bottom-up, or mixed \npattern implementation (i.e. create Capsules/ Protocols/ Data from one of the stored implementations \nfor the pattern; associate Capsules/ Protocols/ Data from an existing model with those of a stored implementation \nfor the pattern; or use some combination).  HTML publishing: Publish the set of patterns to an Internet \nor Intranet website so they can be shared with others who do not have access to the tool.  Allow patterns \nand modeling tool to exist independently:  Use the patterns tool without Rose-RT, or use Rose-RT without \nthe patterns extension. Convergence of design patterns tools with RTOO modeling tools has great potential; \nhowever, there are some significant issues to be addressed. Compression: A single class may participate \nin multiple patterns; this issue will complicate the pattern detection, verification, and highlighting \nfunctionalities.  Rose-RT Classes: Rose-RT models consist of capsule, protocol and data classes; not \nall patterns will have structure/ behaviour that can reconcile with these class types. Developers may \nhave other patterns that they want included in the repository, but that don t map well to Rose-RT models \n (e.g. process/ organizational patterns, or design patterns/ idioms for components of systems not implemented \nin a language supported by Rose-RT).  Abstract nature of patterns: The mining and verification functions \nwill be very difficult if flexibility of implementation is allowed. Based on the previous two sections, \nwhat appears to be a feasible and appropriate extension to Rose-RT is proposed. It is presented in terms \nof the major design decisions that must be made.  Where should the patterns functionality reside?  \nWhat is the recommended initial set of features?  What other features should be considered?  What pattern \ntemplate should be used?  How should patterns be classified?  How should pattern implementations be \nrepresented?  How will pattern language members be linked together?  How will adding patterns to a \nmodel in top-down, bottom-up and mixed fashions be implemented?  How can the tool facilitate keeping \ntrack of where patterns are used in a model?  What will be published to HTML?  5. Conclusions RTOO \nmodeling tools abstract away the low-level details of systems, allowing developers to focus on the design \nmodel precisely the area where design patterns can be useful. The extension to Rose-RT proposed is meant \nas a basis for a prototype; the complexity of the problem is such that more than one iteration of prototypes \nwill be needed. This proposal is a starting point for that experimentation. Initially, the goal of the \nproposed tool was to extend pattern repository functionality to support Rose-RT models (that can be used \nto capture both the structure and the underlying source code for pattern implementations). However, as \nthe research progressed it became increasingly apparent that tool support can also be beneficial for \ndescribing the inter-relationships between patterns. The proposal thus included repository functionality, \nand pattern grouping, organization and relationship functionality. The result is a proposal for a tool \nthat not only makes the application of individual patterns easier and more explicit, but also encourages \nthe systematic application of multiple related patterns. The refinement and implementation of this proposal \nis a logical next step. References [1] Bottomley, M. A Pattern Language for Simple Embedded Systems \n. In Proceedings of PLoP 99. 1999 [2] Buschmann, F. Real-time Constraints as Strategies, In Proceedings \nof EuroPLoP 98. 1998. [3] DeBruler, D.L. Telecommunications distributed processing patterns. http://www.belllabs.com/people/cope/Patterns/ \nDistributedProcessing/DeBruler/index.html. Avail. 2000. [4] de Champlain, M. Patterns to ease the port \nof micro-kernels in embedded systems. In Proceedings of PLoP 96. 1996. [5] Douglass, B.P. Doing Hard \nTime: Developing Real-time Systems with UML, Objects, Frameworks, and Patterns. Addison-Wesley, Reading, \nMass. 1999. [6] i-Logix Rhapsody Toolset. http://www.i-Logix.com. Avail. 2000. [7] Jim\u00e9nez-Peris, R. \nM. Pati\u00f1o-Mart\u00ednez, and S. Ar\u00e9valo. Multithreaded Rendezvous: A Design Pattern for Distributed Rendezvous. \nIn Proceedings of SAC 99. 1999. [8] Lea, D. Design Patterns for Avionics Control Systems. http://g.oswego.edu/dl/acs/acs/acs.html. \nAvail. 2000. [9] McKegney, Ross. Application of Patterns to Real-time Object-oriented Software Design \n, MSc. Thesis. Department of Computing &#38; Information Sciences, Queen s University. July 2000. [10] \nMeszaros, G. A Pattern Language for Improving the Capacity of Reactive Systems in Vlissides, J.M., J.O. \nCoplien, and N.L. Kerth. (eds.) Pattern Languages of Program Design 2. Addison-Wesley, USA, 1996. [11] \nMolin, P. and L. Ohlsson. Points &#38; Deviations -A pattern language for fire alarm systems. In Proceedings \nof PLoP 96. 1996. [12] Noble, J., &#38; C. Weir. Proceedings of the Memory Preservation Society. In Proceedings \nof EuroPLoP 98. 1998. [13] ObjecTime Corp. http://www.ObjecTime.com. Avail. 2000. [14] Petriu, D. &#38; \nG. Somadder. A Pattern Language for Improving the Capacity of Layered Client/Server Systems with Multi-Threaded \nServers. In Proceedings of EuroPLoP 97. 1997. [15] Rational Rose-Realtime Toolset. http://www.rational.com. \nAvail. 2000. [16] Schmidt, D.C. Patterns for Concurrent, Parallel, and Distributed Systems Home Page \n. http://www.cs.wustl.edu/ ~schmidt/patterns-ace.html. Avail. 2000.  \n\t\t\t", "proc_id": "367845", "abstract": "<p>Real-time object-oriented modeling tools (e.g. Rational Rose-RT, i-Logix Rhapsody) allow developers to focus on software architecture by abstracting away low-level implementation details. We believe that design patterns can be very beneficial in this context, and present the rationale and concepts behind a proposal for the extension of such a toolset to support them explicitly.</p>", "authors": [{"name": "Ross McKegney", "author_profile_id": "81100315747", "affiliation": "Dept. of Computing & Information Science, Queen's University, Kingston, Ontario, Canada", "person_id": "PP14115187", "email_address": "", "orcid_id": ""}, {"name": "Terry Shepard", "author_profile_id": "81100604460", "affiliation": "Dept. of Electrical & Computer Engineering, Royal Military College of Canada, Kingston, Ontario, Canada", "person_id": "P279380", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367932", "year": "2000", "article_id": "367932", "conference": "OOPSLA", "title": "Design patterns and real-time object-oriented modeling (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367932"}