{"article_publication_date": "01-01-2000", "fulltext": "\n Designing a flexible services-based architecture for Internet Applications Vijay Mehra Richard K. Walker \nKPMG Consulting, LLC KPMG Consulting, LLC 99 High Street, 757 Third Ave Boston, MA 02110 New York, NY \n10036 1 617 988 5681 1 212 954 2474  vmehra@kpmg.com rkwalker@kpmg.com ABSTRACT This article describes \na flexible architecture for developing services-based business applications that use component-based \narchitectural services to demarcate the application into various tiers that enable the decoupling of \neach layer, both logically and physically. This provides the speed and flexibility needed to embrace \nnew product ideas, channels, and markets. 1. ARCHITECTURE OVERVIEW The following system architecture \ndescription describes the design of a distributed, object-oriented, multi-tiered, Internet-based application. \nIt describes both conceptual and implementation\u00adspecific views of particular approaches, technologies, \nobject models, and communication protocols. Architectural decisions regarding specific tools and platforms \nthat may be used to construct such an application were made taking into account constraints such as existing \nskill sets, standards set by the organization, and future state architectural direction. This involved \nbuild-versus-buy decisions based on the effort required to integrate and maintain the application. It \nis based on practical experiences that have extracted lessons learned from various projects. The use \nof an eXtensible Markup Language (XML)-enabled architecture created the opportunity to deploy quickly \nand interoperate with a wide variety of business systems  2. ARCHITECTURAL APPROACH The architecture \nconsists of four major layers/tiers of abstraction enabled by the use of eXtensible Markup Language (Client, \nContext Processing, Business Logic, and Legacy systems). This abstraction layer is built on middleware \nthat connects to back end systems by wrapping an adaptor interface layer around legacy systems, thereby \nproviding a standard interface. XML is used for structured data messaging, sending rich, self-describing \nplatform\u00adindependent streams of data between legacy systems and new applications in XML format. Permission \nto make digital or hard copies of all or part of this work for personal or classroom use is granted without \nfee provided that copies are not made or distributed for profit or commercial advantage and that copies \nbear this notice and the full citation on the first page. To copy otherwise, to republish, to post on \nservers or to redistribute to lists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion \nMinneapolis, Minnesota Jeffrey S. Brashear Mohan Tavorath KPMG Consulting, LLC KPMG Consulting, LLC \n99 High Street, 99 High Street, Boston, MA 02110 Boston, MA 02110 1 617 988 1386 1 617 988 5953 jbrashear@kpmg.com \nmtavorath@kpmg.com The architecture strives to: be scalable, flexible, adaptable and extensible to support \nthe changing business environment  support a consistent strategic architectural vision  reduce cost \nof technology ownership  leverage existing assets (platforms, environments, tools, custom development, \nand packages)  reuse, buy, and build needed functionality (in that order)  support short-term tactical \nimplementations and the long-term strategic vision  3. COMPONENT LAYERS The architecture has been separated \ninto four layers, each one completely decoupled from the layers with which it interacts. Communication \nbetween each layer uses XML data streams to ensure that inter-layer messaging is platform-independent. \nCommunication within each layer may use proprietary protocols or XML and these decisions are made contingent \nupon the speed and efficiency requirements of the application.  3.1 Client Layer 3.1.1 Conceptual View \nFor every new request made by the Client Layer, data from the back end database server is processed by \nthe application server and arrives at the web server in the form of a standard extensible Markup Language \n(XML) document. The web server then dynamically generates Hyper Text Markup Language (HTML) from this \nXML using eXtensible Stylesheet Language (XSL) files. This HTML file is then displayed in a browser frame \non the screen. This achieves the important objective of decoupling the format and display characteristics \nof the user interface from the content of the data being displayed. Changing the look of this incoming \ndata is simply a matter of changing the XSL stylesheets. The same XML data content can also be rendered \non any other client User &#38;#169; Copyright ACM 2000 1-58113-307-3/00/10...$5.00 Interface. 3.1.2 \nImplementation View The client-tier displays HTML pages that conform to the HTML 3.2 specification and \nsupports 4.x or higher of either the Navigator or Internet Explorer browsers.  3.2 Context Processing \nLayer 3.2.1 Conceptual View The context processing layer takes the input HTTP request object and converts \ninput parameters into an XML stream that is then passed on to the business logic layer. The business \nlogic layer performs required processing and returns an XML output data stream. The style sheet-rendering \nengine merges the XML data stream with the appropriate XSL template file to render HTML output to the \nbrowser. 3.2.2 Implementation View The user interface controllers are Java Servlets. These are inherited \nfrom a base ancestor Servlet and use an HTTP-Request-to-XML transformer Java component to convert the \nname-value pairs that are intrinsic to the HTTP Request object into an XML stream that represents those \ninput parameters. This provides the flexibility to construct more sophisticated XML streams that more \naccurately represent a business domain or metadata model. This also effectively separates the client-layer \naccess mechanism, e.g. a browser, from the request coming in to the web server. This input data is processed \nby the business logic layer, which returns an XML output stream that represents the output data.  3.3 \nBusiness Logic Layer 3.3.1 Conceptual View The business logic layer accepts an XML data stream with input \nparameters and passes it to a business controller object (BCO). The business controller object uses a \nbusiness object factory (BOF) to instantiate appropriate business objects. Each business object instantiates \nshadow objects that talk to the interface layer. 3.3.2 Implementation View The User Interface Controller \n(a servlet) passes the input data as an XML data stream into the Business Controller Object (a Java object). \nThe business controller object represents business logic associated with a use case (or a set of use \ncases), as defined by the business requirements and use case analysis. The business controller object \nuses a Business Object Factory (BOF) to instantiate Java Business Objects that collaborate to process \nthe required functionality. The business objects have shadow objects associated with them that provide \nan abstraction layer that encapsulates access to back-end or external systems that are accessed. The \nresults are returned as an XML stream to the context-processing layer.  3.4 Interface Layer 3.4.1 Conceptual \nView The interface layer accepts an XML data stream that represents input parameters as criteria to request \ndata from or t persist data to back-end systems. Interface objects communicate with those back\u00adend systems, \nleveraging existing native or open communication protocols to retrieve data and then pass them back as \nan XML data stream to the business logic layer.  3.4.2 Implementation View Interface objects are implemented \nas Java objects that utilize appropriate mechanisms to access back-end systems. These use native and \nXML interfaces to facilitate speed of access and persistence to those back-end systems. Some of these \nwere determined to be reusable across other applications that perform the same function, and were converted \nto component-based services (CORBA-based) with clearly defined interfaces.  4. ARCHITECTURE SERVICES \nLAYER The Application Architecture can be subdivided into services. A service is a collection of classes \nor components that provide some common functionality to be used by the other components across the application. \n4.1 Runtime/Deployment Infrastructure These services represent the runtime environment for the application \nand include the following components: Operating System: The application can be developed on various environments \nsuch as Solaris or Windows NT/2000. This decision is made based upon the software products used for application \ndevelopment. Network Connectivity: The protocol used for the underlying network connectivity. Application \nServer: The runtime environment for the business application is provided using standard Application Servers. \nDatabase Server: Any standard relational database server may be used for the application as per the system \nrequirements. 4.2 Application Architecture Services These services represent the components/classes \nthat provide the common functionality required to support the components that constitute the Application \nServices Layer. The following application architecture services were developed: Database Connections \nand Transaction Management: Database connectivity between the application and the database is maintained \nusing appropriate drivers. Error Handling: The error handling service traps and logs errors related to \napplication business logic, database access and system infrastructure. Security/Encryption: The security \nservice prevents unauthorized users from gaining access to the system or gaining access to personal information \nabout system users. This service is embedded in to the component layer at various levels to prevent unauthorized \naccess to the system. Application Utility Services: These services represent the components that provide \nsupporting services to the Application services layer.  5. SUMMARY The architectural approach outlined \nin this paper delivers technology solutions through the aggregation of granular services and business-based \ncomponents, achieving a high degree of reuse. The use of eXtensible Markup Language (XML) created the \nopportunity to deploy quickly and interoperate with a wide variety of business systems. providing the \nspeed and flexibility needed to embrace new product ideas, channels and markets.  \n\t\t\t", "proc_id": "367845", "abstract": "<p>This article describes a flexible architecture for developing services-based business applications that use component-based architectural services to demarcate the application into various tiers that enable the decoupling of each layer, both logically and physically. This provides the speed and flexibility needed to embrace new product ideas, channels, and markets.</p>", "authors": [{"name": "Vijay Mehra", "author_profile_id": "81100038776", "affiliation": "KPMG Consulting, LLC, 99 High Street, Boston, MA", "person_id": "P291113", "email_address": "", "orcid_id": ""}, {"name": "Richard K. Walker", "author_profile_id": "81547878156", "affiliation": "KPMG Consulting, LLC, 757 Third Ave., New York, NY", "person_id": "P243226", "email_address": "", "orcid_id": ""}, {"name": "Jeffrey S. Brashear", "author_profile_id": "81100227872", "affiliation": "KPMG Consulting, LLC, 99 High Street, Boston, MA", "person_id": "P137584", "email_address": "", "orcid_id": ""}, {"name": "Mohan Tavorath", "author_profile_id": "81100087982", "affiliation": "KPMG Consulting, LLC, 99 High Street, Boston, MA", "person_id": "P202509", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367912", "year": "2000", "article_id": "367912", "conference": "OOPSLA", "title": "Designing a flexible services-based architecture for Internet applications", "url": "http://dl.acm.org/citation.cfm?id=367912"}