{"article_publication_date": "01-01-2000", "fulltext": "\n Object-oriented Design and Implementation of the Multi\u00adagent System AgentTeam* Bora \u00dd. Kumova Dokuz \nEyl\u00fcl University, Dept. of Comp. Eng., 35100 \u00ddzmir, Turkey kumova@cs.deu.edu.tr; cs.deu.edu.tr/~kumova \nKeywords. Object-oriented design; Distributed Systems; Multi-agent Systems Background. In this work, \nwe discuss the multi agent system, AgentTeam, from a software engineering perspective. AgentTeam is a \nframework for agent-based flexible management of distributed relational data; as stored in heterogeneous \ndatabases. In order to fit the inherently distributed application environment of the Internet, it is \ndesigned in an object-oriented fashion. It consists of domain-dependent system concepts and partially \ndomain-independent software design concepts. In this contribution the domain-independent software design \nconcepts are evaluated with respect to re-useability and scalability, and discussed in detail on the \nprototype, CourseMan. Re-useability means that a concept can be used in the design of systems in different \napplication domains. Scalability means that a concept can be used multiple times inside a specific design, \nwhere concepts can be any design abstraction or implementation unit. Software Design Concepts of the \nAgentTeam Framework. Class, Class Relationship, Task, Instance, Object, Object State, Module, Agent, \nAgent Knowledge Representation, Agent Communication Language (ACL), Agent Communication Structure, Agent \nCo\u00adoperation Structure, Agent Co-ordination Structure, Agent Behaviour, Agent Property. We believe that \nthese concepts are highly re-useable and are principally scalable, since they have been built independently \nfrom domain-specific concepts. Class Structures of the CourseMan Prototype. SemanticNode, SemanticNet, \nTemplate, Topic, FIPA ACL, AgentCom, InferenceMechanism, Agent, UserAgent, CMUserAgent, TaskAgent, JavaServer, \nResourceAgent, DatabaseAgent (Fig.1). These are the basic classes implemented in CourseMan. Object Structures \nof the CourseMan Prototype. The MAS CourseMan consists mainly of four agent types, which communicate \nwith each other in a well-defined communication structure. Most of the relationships between objects \nhave variable cardinality, where a concrete cardinality depends on the state of an agent. Each agent \ntype can create one or more instances of FIPA ACL and AgentCom, in order to communicate * Permission \nto make digital or hard copies of all or part of this work for personal or classroom use is granted without \nfee provided that copies are not made or distributed for profit or commercial advantage and that copies \nbear this notice and the full citation on the first page. To copy otherwise, to republish, to post on \nservers or to redistribute to lists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion \nMinneapolis, Minnesota (c) Copyright ACM 2000 1-58113-307-3/00/10...$5.00 Fig.1: Class Diagram of CourseMan \nwith another agent. The role of a task agent is to determine for a given task, the necessary co-operation \nstructures and to co-ordinate the communication. State Transitions of a CourseMan Agent. In sleeping-state, \nthe agent stays persistent, until requested to perform a task. If no task is scheduled, then a busy-wait \nstate is entered. If data is requested from another agent, then the communication-state is entered. While \nperforming a computation, the evaluation-state is entered. Module Structure of CourseMan. The whole CourseMan \nsystem consists of two modules, one for client site, and one for server site. Scalability of modules \nis unrestricted for both, clients and servers. All code is written entirely in Java scripts. On the client \nside, the user agent is embedded in an HTML page as an applet. All agents implement the AgentCom language \ninterface to communicate with each other. Communication between agents, which is compiled to one code, \nis synchronous. Communication between agents over the network can be established optionally in asynchronous \nmode. Some Scenarios. At run-time, the user agent dynamically creates one or more task agents, which \nestablish the network connection to resource agents at server sites. To receive messages from database \nservers asynchronously, the user agent creates a server side skeleton at the client. This listens to \nthe standard port of the RMI system. \n\t\t\t", "proc_id": "367845", "abstract": "", "authors": [{"name": "Bora &#221;. Kumova", "author_profile_id": "81100365963", "affiliation": "Dokuz Eyl&#252;l University, Dept. of Comp. Eng., 35100 &#221;zmir, Turkey", "person_id": "P312472", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367974", "year": "2000", "article_id": "367974", "conference": "OOPSLA", "title": "Object-oriented design and implementation of the multi-agent system AgentTeam (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367974"}