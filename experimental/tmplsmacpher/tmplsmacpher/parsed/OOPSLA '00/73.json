{"article_publication_date": "01-01-2000", "fulltext": "\n Model and techniques to specify, develop and use a framework: a meta modeling approach Pascal Rapicault \nI3S / Universit\u00e9 de Nice 930, route des Colles 06902 Sophia Antipolis - France pascal.rapicault@essi.fr \nABSTRACT Object-oriented frameworks are very popular for the efficiency they provide in reusing software. \nHowever, their use by instantiation, their enrichment by composition, and their extension by specialization, \nare all complicated operations requiring to be simplified by the introduction of new techniques and models. \n General Terms Documentation, Design. Keywords Framework, structural and behavioral dependencies, modeling. \n1. PROBLEM Since the emergence of software engineering, people have tended to reuse pieces of software \nof various size. Of course, the bigger the reused code, the more intricate it is, but the more benefit \none can get. So, we chose to focus on object oriented frameworks. Despite the existence of examples and \ncookbooks, framework instantiation is made complicated by the dependencies between components. Writing \nan application may require the usage of several frameworks. Here, we will only study the framework composition \nproblem which occurs when two frameworks put together are built on the assumption they are in control \nof the event loop [3]. Because, in framework's scope, reuse also means extend, structurally modifying \na piece of a framework implies other non obvious modifications. For example, adding a product-creation \nmethod in a factory class of an abstract factory pattern may imply the addition of a corresponding product \nhierarchy. Permission to make digital or hard copies of all or part of this work for personal or classroom \nuse is granted without fee provided that copies are not made or distributed for profit or commercial \nadvantage and that copies bear this notice and the full citation on the first page. To copy otherwise, \nto republish, to post on servers or to redistribute to lists, requires prior specific permission and/or \na fee. OOPSLA 2000 Companion Minneapolis, Minnesota &#38;#169; Copyright ACM 2000 1-58113-307-3/00/10...$5.00 \nAll theses problems are consequences of the disappearance of design information at the implementation \ntime (which design pattern is used, how does a component behave,...) and, as a result, at \"reuse time\". \nIt is also due to the absence of documentation or bad integration of it in the user development environment. \nIn general it is a consequence of the loss of structural and behavioral dependencies. 2. GOALS The goal \nof this research is to provide models to express the structural and behavioral dependencies of a framework, \nand especially to make those dependencies available at \"(re-)use time\". Based on this model, we are aiming \nat building a tool to better integrate framework design and usage. This framework manipulation tool would \nprovide 2 views: -One for framework designers to help them in creating frameworks and keeping pertinent \ninformation for framework users. For example, which design pattern is used, and what are the ways to \nuse components. Doing so, the developer will specify some parts of a cookbook. -One for framework users \nproviding them with active guidance (using information provided by framework developers) when instantiating \nor extending a framework. It also helps them with techniques and features to compose frameworks, modify \nclass hierarchies or adapt components. In order to give a clear semantic to our models, we shall propose \nnew dynamic diagrams in addition to UML ones to precisely describe the behavior of a class or a component. \n 3. APPROACH First, because there are many common points between frameworks and design patterns [2], \nwe chose to achieve our goals by defining a model to highlight structural dependencies in each design \npatterns from the GoF book. This model must be flexible enough to preserve pattern expressiveness. The \nmodel validation will be done by modeling non GoF patterns (like those published in PLoP books), and \nthen by implementing it in a tool to manipulate patterns. This tool will support 2 operations: instantiation \nand verification of pattern. The verification consists in checking whether a given set of classes together \nwith their role in a given pattern do implement this pattern. This model should adapt to frameworks with \nlow cost and should allow to build the framework manipulation tool described in the previous section. \nTo apprehend the tool advantages in matter of time, framework understanding, and extensibility, we shall \nask two persons to write the same application using a framework, and only one of them will be provided \nwith the tool. In a second step, because frameworks also have to deal with individual component behavior \nas well as interactions between components, we need a model to express behavioral dependencies, and also \nto clarify component usage (which sequences must occur for a component to behave correctly). To make \nthe UML semantics more precise and describe behavioral dependencies, we shall propose some extensions \nto dynamic diagrams. A tool to check the good use of a component will be developed in order to provide \nuser assistance when debugging an application. Once, the study of the two models will have been completed, \nwe shall merge them and look for solutions to smoothly compose frameworks using metaprogramming techniques. \nSome experiments using various techniques will be done, in order to find the less intrusive one. 4. \nSTATUS We proposed a model for design patterns, and a tool using it has been implemented. This modelisation \nresulted in a 3 levels architecture the base of which is a meta model for patterns based on UML and OCL \nsince it manipulates class diagrams elements [4]. This model proposes an abstract representation of design \npatterns exhibiting dependencies among the constituents. This architecture allows any user to create \nhis own patterns, and to extend the provided library of pattern. To clarify UML behavioral semantic and \nrepresent behavioral dependencies, we chose to use a real time system notation called SyncCharts [1] \n(SyncCharts are StateCharts-like diagrams with a mathematically-defined semantics). We are using this \nnotation to precisely describe the usage protocol of a component and its dependencies [5]. Based on this \nnotation a first tool to check whether a component is correctly used has been developed. We are now planning \nto integrate both models and, thanks to this last one, look at the framework composition problem. From \nnow, there are 15 months left, that will be organized as follow: - Model integration : 3 months; - Composition \nproblem : 3 months; - Tool prototyping : 2 months; - Test with users : 1 month; - Thesis dissertation \nwriting: 6 months.  5. ACKNOWLEDGMENTS The author wish to thank his advisors Mireille Fornarino and \nJean-Paul Rigault, and Object Technology International, Inc. for supporting his work. 6. REFERENCES \n[1] Andr\u00e9, C. Representation and analysis of reactive behaviors : a Synchronous Approach. Invited paper, \nCESA'96 (Lille France, July 1996). 19-29. [2] Johnson, R.E. Frameworks = (Components + Patterns). Communic. \nACM 40, 10, 39-42. [3] Mattson, M. and Bosch, J. Framework composition: problems, causes and solutions. \nTOOLS USA 97. [4] Rapicault, P. and Fornarino, M. Instanciation et verifiaction de patterns de conception \n: un m\u00e9ta protocole in proceedings of Langages et Mod\u00e8les \u00e0 Objet 2000 (Mt St Hiliaire CA, January 2000). \nHerm\u00e8s Edition. [5] Rapicault, P. and Mallet F. Behavioral specification of Java component using SyncCharts \nin Workshop on pervasive component systems, ECOOP 2000 (Nice France, June 2000). http://www.essi.fr/~rainbow \n  \n\t\t\t", "proc_id": "367845", "abstract": "<p>Object-oriented frameworks are very popular for the efficiency they provide in reusing software. However, their use by instantiation, their enrichment by composition, and their extension by specialization, are all complicated operations requiring to be simplified by the introduction of new techniques and models.</p>", "authors": [{"name": "Pascal Rapicault", "author_profile_id": "81100523890", "affiliation": "I3S/Universit&#233; de Nice, 930, route des Colles, 06902 Sophia Antipolis, France", "person_id": "P219697", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.368057", "year": "2000", "article_id": "368057", "conference": "OOPSLA", "title": "Model and techniques to specify, develop and use a framework: a meta modeling approach", "url": "http://dl.acm.org/citation.cfm?id=368057"}