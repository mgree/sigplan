{"article_publication_date": "01-01-2000", "fulltext": "\n Application Frameworks Before System Frameworks Jon Hancock patternWare, Inc. 622 Broadway 4th Floor \nNew York, NY 10012 +1 917-864-9496 jhancock@patternware.com ABSTRACT Application development with an \nend-to-end declarative Application Framework has shown the following significant benefits: 80% error \nreduction, 40-80% code reduction, and predictable development cycles by first time object/Java developers. \nThese Application Frameworks may at any point in the development/deployment process sit on top of System \nFrameworks such as CORBA or EJB.  Keywords Application Frameworks, Java, CORBA, EJB, Patterns 1. INTRODUCTION \nThree years ago, we at patternWare had a vision of the next generation Internet Application. It would \nbe built on the heels of over a decade of experience building enterprise three-tier apps in Smalltalk. \nThis new app structure would be built in Java and needed to ensure the following: 1. Ensure programmers \nfocus on the domain model, not the infrastructure (The What , not the How ). 2. Ensure only average \nprogrammer skills are required and training may be segmented by developer role.  2. RATIONAL AND APPROACH \nWe accomplished these goals by developing an integrated suite of Application Frameworks to expose a very \nhigh-level logical three-tier model. The important thing to understand about these frameworks is that \nthey are Application Frameworks , not System Frameworks . Here s how we define the difference: Application \nFrameworks start by creating a high-level declarative interface for all the anticipated application services \nand build down to integrate with lower-level language and system services. System Frameworks build from \nthe bottom up. i.e. They start with the low-level system services such as load balancing, security, and \nobject persistence. Examples of Systems Frameworks are EJB and various CORBA implementations (figure \n1). Permission to make digital or hard copies of all or part of this work for personal or classroom use \nis granted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, \nto post on servers or to redistribute to lists, requires prior specific permission and/or a fee OOPSLA \n2000 Companion Minneapolis, Minnesota &#38;#169; Copyright ACM 2000 1-58113-307-3/00/10...$5.00 Figure \n2 is a high-level logical model of the framework. There are two main problems with building an application \ndirectly on top of a System Framework: 1. They expose a number of services and micro patterns for each \ndeveloper to grapple with in their own way. For large projects, this results in an un-evolveable code \nbase. 2. Developer must have a broad skill set for even simple tasks (figure2)  One solution System \nFramework vendors use to try escaping these innate problems is to provide CASE or modeling tools to forward \nor, partially, round-trip engineer application code that works with the System Frameworks. These tools \ncan be very effective when building a small project or used for certain narrow types of applications. \nHowever, this model breaks down for medium to large projects; developers inevitably find they need to \nbypass the tool to work with the code directly. The dream of an easy tool that provides all the semantics \nand constraints of a language like Java has never been realized. If you don t have programmers with a \nvery broad skill set, what you end up with is an average programmer that is digging through foreign generated \ncode. By supplying the Application Frameworks we draw a firm line at the application layer to ensure \nwe start with a clear set of skills a programmer requires to develop the application. The high-level \napp model exposes the simple collaboration of the Application Controller, View, Business Objects, and \nTransaction Proxies. This high-level focus only works well if the Application Frameworks encourage both \nEnterprise and Project level extensions to the base frameworks. These extensions are made by a few experienced \ndevelopers with broad skills. Narrow Technical Skills/ Broad Domain Knowledge Broad Technical Skills \n Figure 1 Application Frameworks vs. System Frameworks ApplicationController 1st Tier Builder View Framework \nBusiness Object Aware Controls  2nd Tier Business Object Builder Business Object Framework Transaction \nFramework Transaction Builder 3rd Tier Figure 2 High-level logical model CORBA based frameworks exacerbate \nthis problem by exposing language independence and an API that has evolved to support non-object languages. \nThis only increases the programming skills necessary for success with these models.   3. RESULTS The \nresults of supplying these Application Frameworks to programmers are dramatic. Our Java based Application \nFrameworks have consistently delivered the following: -Training and development segmented by role (figure \n3). -Less then 5% framework overhead. This creates a net savings. -Application code that is container \nindependent both EJB and CORBA capable. -Success for developer with a narrow Java skill set. NO: Threads, \nAWT, ORB, CORBA, Helpers, Holders, Queries, Transactions Application Designer Application Programmer \n  Business Object Programmer I &#38; IIApplication  Transaction Programmer I &#38; II  Framework/Tools \nDeveloper -Vertical Frameworks project owned  Framework/Tools Developer -Horizontal Frameworks project \n&#38; vendor owned Vendor ownedCore Technology  Figure 3 Developer roles  4. CASE STUDY RESULTS A \ncase study was done in 1999 with a large project involving a business model that would eventually include \nover 1000 different classes of Business Objects. The project was typical of large enterprise projects \nwe ve seen over the last decade. Here s a synopsis of the project and results: Team: 2 COBOL Programmers, \n1 new programmer, 1 VB Programmer, 1 DBA, 2 Functional Analysts Time: 2.5 months for development. There \nwas 1 month training and design before development started. Results: 191 Views on 144 Business Object \nClasses mapping to 93 Relational Tables with no bugs found in production. Compared to developing similar \nobjects with EJB or CORBA System Frameworks alone: -Smaller client footprint (greater than 50% code reduction) \n-Better client and server performance and resource usage -Significant error/bug reduction. >80% reduction* \n-Significant application code size reduction. 40% - 80% reduction. -Predictable development cycles/timelines \n-More maintainable code -Average programmers were able to develop using a sophisticated architecture. \nAnother large benefit of this approach is that the resultant application is more easily logically partitioned \non the server. Because we have such a high level model, it is easy for the developers to create high \nlevel partitions for the application. This takes a tremendous load off the System Framework. It also \nturns out that for many types of applications, if the logical partitioning is done correctly, there is \nno need for a System Framework or rather the Application Framework can provide lightweight fault-tolerant \nand load balancing services on its own. The benefit of eliminating the EJB or CORBA structure for appropriate \napplication types creates significant server side memory and performance gains. Also, it enables a much \nlighter client application for those that require some client side intelligence. We have found that Application \nFrameworks must exist before System Frameworks such as EJB or CORBA are relevant to the success of any \nmedium to large Object project. The results of this project and the framework architecture as well as \nanother currently in process project leveraging the same frameworks will be shown in October 2000. The \nin-process project is a first class example of an Application Service Provider application capable of \nserving millions of users.  \n\t\t\t", "proc_id": "367845", "abstract": "<p>Application development with an end-to-end declarative Application Framework has shown the following significant benefits: 80% error reduction, 40-80% code reduction, and predictable development cycles by first time object/Java developers. These Application Frameworks may at any point in the development/deployment process sit on top of System Frameworks such as CORBA or EJB.</p>", "authors": [{"name": "Jon Hancock", "author_profile_id": "81540206656", "affiliation": "patternWare, Inc., 622 Broadway 4lt;supgt;thlt;/supgt; Floor, New York, NY", "person_id": "P146898", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367922", "year": "2000", "article_id": "367922", "conference": "OOPSLA", "title": "Application frameworks before system frameworks", "url": "http://dl.acm.org/citation.cfm?id=367922"}