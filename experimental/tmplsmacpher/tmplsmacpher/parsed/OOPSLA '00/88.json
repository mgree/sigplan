{"article_publication_date": "01-01-2000", "fulltext": "\n Implementing NetUnify.com using Squeak Stephen Pair NetUnify.com 817 West Peachtree Street, Suite 210 \nAtlanta, Georgia 30308-1138 spair@netunify.com Abstract NetUnify.com is a hosted service that enables \nits customers to maintain their project related material in a secure fashion over the Internet. They \ncan grant access on a project-by-project basis to their employees, vendors, and customers. In addition, \norganizations can choose to operate their own NetUnify server rather than use the NetUnify.com service. \nThe NetUnify server is implemented in Squeak (see http://www.squeak.org), an open-source, highly portable \nobject oriented environment. The OOPSLA paper titled Back to the Future [2] by the Walt Disney Imagineering \nteam provides an excellent overview of the Squeak story. 1 Background Over the last few years, a new \nkind of web site has emerged called a WikiWikiWeb. These sites allow visitors to easily update pages \non the site, thereby allowing people to engage in asynchronous public discourse over the web. Changes \nare made over existing contents, which enables valuable ideas to evolve, rather than be lost in an endless \nthread of discussion. Ward Cunningham founded the first ever WikiWikiWeb (www.c2.com/cgi/wiki). Over \ntime various clones of the wiki concept began to appear, including a version authored in Squeak. Swiki \n(Squeak + Wiki), as it came to be known, was our first exposure to the wiki concept and was a direct \nconsequence of our interest in the Squeak community. Mark Guzdial and his students at Georgia Tech developed \nSwiki as part of their CoWeb [1] research. Many people have subsequently contributed to this open source \neffort. Our interest in the Squeak community and our own needs for a wiki like product lead us to develop \nSwiki.net and subsequently NetUnify.com. These products allow users to create their own wikis without \nthe need to install or maintain their own dedicated server or software. While Swiki.net attempts to remain \ntrue to the original wiki concept and serve the needs of the software community, NetUnify is targeted \nat companies that have specific needs revolving around the management of project related materials and \ncommunication. 2 Choosing Squeak We were faced with a decision to use a commercial application server, \nor use Squeak and leverage the existing open source Swiki implementation. Through our consulting practice \nwe had a lot of Permission to make digital or hard copies of part or all of this work for personal or \nclassroom use is granted without fee provided that copies are not made or distributed for profit or commercial \nadvantage and that copies bear this notice and the full citation on the first page. Copyrights for components \nof this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy \notherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission \nand/or a fee. experience with application servers. We thoroughly understood the issues in building a \nscalable, robust application server capable of handling a variety of Internet protocols, distributed \nobjects, object-relational mapping, web based UI generation, etc. We were also following Squeak developments \nand were very impressed with the capabilities of the system. To quote the Disney team, there is power \nand inspiration in having all of the code for every aspect of computation and display be immediately \naccessible, changeable, and identical across platforms. We agreed, and after some analysis, we felt that \nSqueak would make an excellent server platform. The Squeak community itself impressed us. There was a \nflurry of activity and new releases were being distributed every day. The Disney team was doing amazing \nthings with Squeak and other startup companies were beginning to use it. There were many people doing \nmany different things with Squeak. In addition, Georgia Tech (located across the street from us) was \nteaching courses using Squeak to all computer science students. We felt the community was strong and \nwould thrive for many years to come. 3 Adapting Squeak Squeak has proven to be a nicely adaptable system. \nIt runs on embedded devices, PDAs, inside web browsers, on many hardware and operating system configurations, \nand even as a stand alone operating system. We needed to adapt Squeak to the unique requirements of an \napplication server. 3.1 Sockets Having a robust and scalable socket interface directly in Squeak was \nthe utmost priority for us. It would enable us to quickly implement and integrate whatever new Internet \nprotocols might emerge in the future. Most important protocols were already implemented (with varying \ndegrees of sophistication). Squeak had the robust part covered; thus, we turned our attention to the \nissue of scalability. We had chosen to operate NetUnify.com on the Window NT platform and use its scalable \nIO APIs. But, when the Windows port of Squeak was designed, it was decided that a single VM should be \ncreated that would run under Windows 9x and NT. That meant that the scalable IO features of NT could \nnot be used. Thus, our first task was to implement a custom socket interface for Squeak on the NT platform \nand build a new VM. Later, with enhancements to the Squeak VM architecture, we were able to extract the \nsocket interface from the VM itself and make it a separately loadable module (DLL). 3.2 Comanche Web \nServer With the Squeak download, you get the Pluggable Web Server (PWS), which is a basic web server. \nStudents at Georgia Tech had begun to work on a more robust web server called Comanche. We used Comanche \nas the basis for the NetUnify server and began examining it. We picked through most of the code from \ntop to bottom trying to spot performance issues, and did some extensive refactoring. We added HTTP 1.1 \nfeatures, advanced session and cookie management, a framework for constructing multi-page dialogs, and \na few other gadgets. Most of this work was incorporated back into Comanche with the help of the students. \n 3.3 Virtual Hosting NetUnify.com supports the ability for customers to mount their projects on virtual \nDNS host names. For example, you could register a project called http://myproject.netunify.com. In addition, \nwe not only wanted to mount projects on virtual host names, but we wanted to be able to mount any object \nin our system. We also wanted to create custom look and feel policies depending on which virtual host \nwas used to access a given object. This would enable us to mount objects on a customer s domain and create \na look and feel tailored to their site. Thus, we modeled the DNS system in Squeak and enabled any object \nto be mounted on any virtual host name with an associated look policy. A simple tree view in Squeak was \ncreated to administer the virtual host mappings. 3.4 Squeak Server Pages (SSP) As the code base matured, \nit became evident that we needed a more robust way of creating and assembling the web based user interfaces. \nWe ultimately employed the Model-View-Presenter (MVP) pattern [3], which allowed us to better separate \ndomain model issues from user interface issues. We also needed a way to better maintain the actual HTML \nbeing created. We wanted the HTML to be generated by methods associated with classes, rather than have \npages that sporadically retrieve their contents from many different objects. We would also be able to \nleverage the benefits of polymorphism in constructing our user interfaces this way. We like aspects of \nASP and JSP, but we wanted to inject a more object-oriented approach into those mechanisms. Thus, we \ndeveloped SSP. It allows us to author HTML directly in a class browser and embed Smalltalk code using \nthe same constructs found in ASP and JSP solutions. In addition, since the HTML is produced by methods \non objects, we are able to maintain better encapsulation and achieve a higher level of reuse. 3.5 Remote \nServer Management Since we are running Squeak on a server, we needed to add a number of tools that aided \nremote management of the server. First, and foremost, we needed a way to capture and debug errors. We \nadded the ability for server administrators to log in to a debugging console through a standard web browser. \nWith this console they can capture errors coming from any IP address. The captured errors are stored \nin the server, where they can be opened and interactively debugged and corrected. 3.6 XML Database We \nfelt that XML was an important standard for interoperability and data storage and thus we set out to \ncreate a robust XML database that could span multiple volumes, be indexed, and be queried. We also wanted \nto make the database flexible such that other storage formats could be used in the future, such as the \nSqueak image segment mechanism. We devised a database that takes advantage of the underlying file system \ns indexing capabilities and used standard file and directory creation and manipulation primitives. Since \nSqueak s file system primitives are portable to all major platforms, we were able to create a platform \nindependent database. The database system includes support for referencing objects across multiple databases, \na global unique identifier scheme for all objects, and garbage collection. It also has a nice mechanism \nfor caching objects in memory for performance as well as a fast, and robust object proxy mechanism. \n 4 Future Work In addition to enhancements to the NetUnify service itself, we will be improving the database \ns support for access from multiple Squeak processes. We intend to employ an architecture where one Squeak \nprocess would manage object locking and consistency, while other Squeak processes would serve the actual \napplication. We plan to scale the server by front-ending these processes with a hardware based load balancer. \nSqueak has the ability to run headless and as an NT service, however, we have chosen to run the process \ninteractively, which enables us to load new features into the server, and debug errors without taking \nthe down the service. Recently, Squeak has been enhanced to allow low level graphics primitives to be \ndispatched over a network to another Squeak process, enabling complete remote control of a Squeak environment. \nWe plan to use this new feature to enable us to run the NetUnify as a headless service without losing \nany of the benefits of running interactively. Finally, the Disney team is doing amazing things with user \ninterfaces and the object environment itself. This technology will lead to a more robust web experience \nand enable us to move beyond HTML documents and into web-based objects. 5 Conclusions We have found \nthe Squeak community to be a very supportive and talented group of individuals and companies. The Squeak \nenvironment has far exceeded our expectations and we are continually amazed by the flexibility and speed \nof development that Squeak enables. With these few relatively straightforward enhancements we think Squeak \nmakes a compelling application server platform. 6 Acknowledgements We wish to thank Squeak Central (Disney) \nand the GA Tech Squeakers for their support and encouragement. We also would like to thank the entire \nSqueak community for countless design discussions and code exchanges. [1] Guzdial, M., Collaborative \nWebsites Supporting Open Authoring, http://guzdial.cc.gatech.edu/papers/CoWeb\u00ad resubmit.pdf, 1998 [2] \nIngalls, D., Kaehler, T., Maloney, J., Wallace, S., Kay, A., Back to the Future, http://st.cs.uiuc.edu/Smalltalk/Squeak/docs/OOPSLA. \nSqueak.html, 1997 [3] Potel, M., MVP: Model-View-Presenter http://www.ibm.com/java/education/mvp.html, \n1996  \n\t\t\t", "proc_id": "367845", "abstract": "<p>NetUnify.com is a hosted service that enables its customers to maintain their project related material in a secure fashion over the Internet. They can grant access on a project-by-project basis to their employees, vendors, and customers. In addition, organizations can choose to operate their own NetUnify server rather than use the NetUnify.com service.</p><p>The NetUnify server is implemented in Squeak (see http://www.squeak.org), an open-source, highly portable object oriented environment. The OOPSLA paper titled &#8220;Back to the Future&#8221; [2] by the Walt Disney Imagineering team provides an excellent overview of the Squeak story.</p>", "authors": [{"name": "Stephen Pair", "author_profile_id": "81100407404", "affiliation": "NetUnify.com, 817 West Peachtree Street, Suite 210, Atlanta, Georgia", "person_id": "P268660", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.368100", "year": "2000", "article_id": "368100", "conference": "OOPSLA", "title": "Implementing NetUnify.com using squeak", "url": "http://dl.acm.org/citation.cfm?id=368100"}