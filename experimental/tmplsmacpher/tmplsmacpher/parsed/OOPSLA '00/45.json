{"article_publication_date": "01-01-2000", "fulltext": "\n Designing XML Vocabularies with UML David A. Carlson Ontogenics Corp. Boulder, Colorado http://www.XMLModeling.com \ndcarlson@ontogenics.com Abstract The tools and processes used to design XML vocabularies (DTD or XML \nSchema) are generally different from those used for application design using UML. In addition, large \nXML vocabularies are often difficult to understand and communicate with business users. This research \nsummary describes the use of UML class diagrams for modeling XML vocabularies and generating XML Schemas \nfrom the UML. e-Business Integration with XML e-Business requires integration of the information and \nprocesses that are necessary to conduct business in real-time. At the consumer level, this means that \non-line catalogs must access the database of inventory; also, credit authorization, order processing, \nand fulfillment must be integrated to deliver the goods to each buyer. Challenges were encountered, but \nthey were conquered and the world moved on with this new, faster channel for sales. Then came business-to-business \nintegration. Supply chain integration of manufacturers and distributors required a deeper introspection \ninto sales forecasts, production scheduling, product configuration, and inventory management. The arrival \nof electronic marketplaces created a brave new world of electronic bidding, auctions, reverse auctions, \nand a steady stream of never previously encountered business processes. And it had to be done yesterday. \nIn order to satisfy these new demands, we must adopt a fundamental change in the way system integration \nis accomplished. We need an infrastructure that supports loose coupling of inter-enterprise and intra-enterprise \ninformation between widely disparate application designs, operating systems, databases, and application \nprogramming interfaces (APIs). The eXtensible Markup Language (XML) has become a solution for many of \nthese issues. XML is not a magic wand that can solve any problem. However, XML enables us to focus on \nthe definition of shared vocabularies for exchanging information that is easily processed by both human \nand computer systems. XML was derived from a document-processing heritage for supporting both computer \nand human communication. Therefore, there are standardized stylesheet processing languages and tools \nfor presenting XML documents to human users in many formats, such as print, multimedia, and synthesized \nvoice. Through these technologies, XML has potential to become the standard platform for convergence \nof information to all types of portals. Permission to make digital or hard copies of all or part of this \nwork for personal or classroom use is granted without fee provided that copies are not made or distributed \nfor profit or commercial advantage and that copies bear this notice and the full citation on the first \npage. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior \nspecific permission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota (c) Copyright ACM 2000 \n1-58113-307-3/00/10...$5.00 XML, by itself, is only a syntax for the exchange of data and text\u00adoriented \ndocuments. Yet we need more than a common syntax for successful communication. Communication requires \nshared models of the underlying domain semantics and shared models of the processes and policies used \nto engage in electronic commerce. These models are the very essence of business-to-business (B2B) integration. \nThey may be implicit in the applications that process the XML documents, or explicit in the definition \nof the model s concepts, relationships, and constraints. Three models comprise the core of a B2B communication \nframework [1]: Modeling system requirements with use cases. These models define the roles of stakeholders, \nor use case actors, that are involved in B2B interactions, plus the functional requirements of those \nstakeholders.  Modeling processes and communication policies. B2B interactions are not limited to sending \na single message, but require a coordinated sequence of activities and expectations of the business partners. \n Modeling business vocabularies. Each message exchanged within a communication process contains information \ncontent that may be short and simple, or very long and complex. Each of these content documents is defined \nby a vocabulary that is shared by the parties engaged in the communication.   Generating XML Schemas \nfrom UML The XML community has developed a number of schema languages for representing business vocabularies. \nThe Document Type Definition (DTD) is the original XML schema language included in the XML 1.0 specification. \nHowever, many individuals have recognized the limitations of this DTD standard for supporting data interchange \nin global e-business applications. The new XML Schema [2] extends the capabilities for validating documents \nand exchanging information with other non-XML system components. The role of XML Schemas is analogous \nto the way that relational database systems use the SQL data definition language to create schemas for \ndatabase tables, attributes, attribute datatypes, and referential integrity constraints. UML class diagrams \nare particularly useful when modeling the element structure and constraints in XML vocabularies. Without \nthe UML, the XML DTD or Schema definitions are limited to textual definitions of the document structure. \nUML models provide a graphical representation for better communication. We can generate an XML Schema \nfrom a UML class diagram, but we must define a mapping from one modeling language to the other [3]. One \npossible mapping is illustrated in Figure 1.   <xs:element name=\"Class3\" type=\"Class3\"/> <xs:complexType \nname=\"Class3\"> <xs:all> <xs:element name=\"Class3.attr\" type=\"xs:float\" /> </xs:all> </xs:complexType> \n<xs:element name=\"Class1\" type=\"Class1\"/> +role3 1..* <xs:complexType name=\"Class1\"> <xs:all>  <xs:element \nname=\"Class1.attr\" type=\"xs:string\"/> <xs:element name=\"Class1.role3\"> <xs:complexType> <xs:element ref=\"Class3\" \nminOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:complexType> </xs:element> <xs:element name=\"Class1.role2\"> \n<xs:complexType> <xs:element ref=\"Class2\" minOccurs=\"0\" maxOccurs=\"unbounded\"/> </xs:complexType> </xs:element> \n+role2 0..* </xs:all>  </xs:complexType> NameEnum <<enumeration>> one two  <xs:element name=\"Class2\" \ntype=\"Class2\"/> <xs:complexType name=\"Class2\"> <xs:all> <xs:element name=\"Class2.name\" type=\"NameEnum\" \n/> </xs:all> </xs:complexType> <xs:simpleType name=\"NameEnum\" base=\"xs:string\"> <xs:enumeration value=\"one\"/> \n<xs:enumeration value=\"two\"/> </xs:simpleType> Figure 1: Mapping the UML to XML Schema All of the XML \nSchema elements shown in Figure 1 are prefixed multitude of information models in a large system when \nthe XML with the 'xs:' namespace. For each UML class in this simple vocabulary is defined as a DTD or \nSchema, and other parts of the model, a complexType is defined in the schema and an system are designed \nusing object-oriented techniques, including element is declared whose type is equal to that the UML. \nWe can overcome these limitations through the use of complexType. Each complexType is defined using the \nUML diagrams that represent all information models within a system, including the XML vocabulary structure. \nIn addition, <all> content model, which includes a list of the elements that UML class, sequence, and \nactivity diagrams can be developed to may be present, subject to their individual multiplicity constraints. \nspecify the XML messages and processes used in B2BBut, unlike the content models used in DTDs, this XML \nSchema communication protocols, all leading to better communicationdefinition validates multiplicity \nwhile allowing the elements to be among stakeholders in a large system design. present in any order \nwithin a document instance. For more information, see: http://XMLModeling.com Notice that XML Schema \nenables accurate datatype declarations for the UML class elements. Class3.attr is declared as type References \nxs:float, Class1.attr is of type xs:string, and Class2.name is of type NameEnum. NameEnum is defined \nas a simpleType 1. D. Carlson. Modeling XML Applications with UML. with enumeration facets. Each element \nwithin the content model is Addison-Wesley, Reading, MA, 2001 (forthcoming). declared with minOccurs \nand maxOccurs multiplicity. If 2. World Wide Web Consortium. XML Schema Part 0: Primer. neither is specified, \nthen they are both equal to 1 by default; if W3C Working Draft 7 April 2000. See only minOccurs is specified, \nthen maxOccurs is equal to http://www.w3.org/TR/xmlschema-0 minOccurs, but not less than 1. 3. Object \nManagement Group. XML Metadata InterchangeIt is difficult to share XML DTD or Schema definitions with \nnon\u00ad(XMI), version 1.1. See ftp://ftp.omg.org/pub/docs/ad/99-10\u00ad technical, or not XML savvy, business \nanalysts because of the 02.pdf unfamiliar and verbose syntax. It s also difficult to integrate the  \n \n\t\t\t", "proc_id": "367845", "abstract": "<p>The tools and processes used to design XML vocabularies (DTD or XML Schema) are generally different from those used for application design using UML. In addition, large XML vocabularies are often difficult to understand and communicate with business users. This research summary describes the use of UML class diagrams for modeling XML vocabularies and generating XML Schemas from the UML.</p>", "authors": [{"name": "David A. Carlson", "author_profile_id": "81539810156", "affiliation": "Ontogenics Corp., Boulder, Colorado", "person_id": "PP14134312", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367982", "year": "2000", "article_id": "367982", "conference": "OOPSLA", "title": "Designing XML vocabularies with UML (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367982"}