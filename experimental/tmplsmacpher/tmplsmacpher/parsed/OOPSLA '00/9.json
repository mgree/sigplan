{"article_publication_date": "01-01-2000", "fulltext": "\n Modelling infection scenarios a fixed-price eXtreme Programming success story Joseph Pelrine Daedalos \nConsulting Bachlettenstrasse 41 4054 Basel, Switzerland Tel. +41 61/281 07 18 jpelrine@acm.org ABSTRACT= \n Is it possible to do fixed-price eXtreme Programming projects? How does one bid on a project with changing \nscope? When is the project finished? These questions and others were addressed in the context of a successful \nproject modeling infection and vaccination scenarios implemented in VisualAge Smalltalk for a noted pharmaceutical \ncompany. Interesting results and answers, as well as a short demonstration, will be presented. Keywords \nDevelopment processes, eXtreme Programming, Smalltalk 1. The Project experience In Spring 1999, the author \nwas approached to implement a simulation program modeling the effects of varicella (chickenpox) infection, \nand various vaccination scenarios, on a population. The client was Outcomes International, a Swiss\u00adbased \ncompany supporting clients in the pharmaceutical, biotechnology and medical device industries in the \nlaunch and commercialization of their products through custom-designed, innovative, and scientifically \n- based medical marketing services. Outcomes had contracted with a major pharmaceutical company to develop \nan economic analysis tool for defining the pricing strategy for a newly developed vaccine against varicella. \nBeing a medical consulting company, they regularly outsourced their software development, and were becoming \nincreasingly dissatisfied with the quality of the software they received from their development partners. \nIn a first meeting, the author described the philosophy behind eXtreme Programming, and suggested that \nit would be an interesting experiment to apply the eXtreme Programming methodology to a fixed-price software \ndevelopment project. Theoretical aspects of fixed-price eXtreme Programming development are discussed \nin [Beck99]; nevertheless, no such projects have yet reported on their success or failure. Our client \nwas willing to take a risk with eXtreme Programming, hoping to learn more about new and different possibilities \nin software development than those to which they were accustomed or (so they said) had inflicted upon \nthem. 1.1 Release Plan and Iteration Schedule A major problem in fixed-price development is for the software \ndevelopers to offer a bid representing a win-win situation for both sides. There is often much uncertainty \nat bid time, since most client companies have not fully specified the product they wish developed, realizing \nthat they a) are not quite sure what they want, or b) realize that what they really want will change \nduring the course of development. From the customer s point of view, eXtreme Programming offers the most \nflexibility, since it takes their situation into account, and makes allowance for changes in focus and \npriority. From the point of view of the software developer, however, the situation is sub-optimal. Unclear \nspecifications represent a high risk factor in the bid process. In order to minimize risk, and get enough \ninformation to tender a bid not representing a risk to the author s company, the author used a variation \nof the Planning Game. This served the purpose of obtaining enough information about the project to give \na common sense estimate of the resources required, while at the same time educating the customer as to \nthe techniques used in release and iteration planning. The modified Planning Game allowed the customer \nto present user stories in moderate detail. Once the stories were clearly defined, the author estimated \nthe time needed to implement the individual stories, and noted the degree of certainty the author had \nin his estimate. The scale ran from 1 (very sure) to 4 (no idea). Any user story task rating 4 would \nrequire implementing a spike solution to clarify the risk and work involved in implementing the story. \nAs was the case, no stories were this diffuse. Stories rated from 1 to 3 received a different load factor, \nreflecting the uncertainty of the estimate. The following table shows the story estimates and the load \nfactor applied to them: Estimate Load Factor 1 1.5 2 2.2 3 3.0 = Permission to make digital or hard \ncopies of all or part of this work for personal or classroom use is granted without fee provided that \ncopies are not made or distributed for profit or commercial advantage and that copies bear this notice \nand the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute \nto lists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota \n&#38;#169; Copyright ACM 2000 1-58113-307-3/00/10...$5.00 The story estimates were then multiplied with \nthe appropriate load factor to give an estimate of the time required for development. Taking the actual \ncosts of previous implementations as a ballpark figure , both our client and we were quite happy with \nthe resulting estimate. Using the eXtreme Programming model of software development is was not necessary \nto plan in additional time for testing after the development cycle was finished. The time required for \nthe Planning Game and estimates was considered as acquisition, and billed (or rather, not billed) accordingly. \nWe estimate that the time required was roughly equal to the time required to analyze specifications and \ndraw up a bid using a conventional methodology. 1.2 Development With very few exceptions, development \nwent by the XP book . The story cards written for the bidding process were revised, and served as the \nbase for iteration planning. As a matter of fact, development went so fast that our customer was eventually \nnot able to keep up with requirements and functional tests, and we ended up taking a forced vacation \nfor two weeks in July. Program development unfortunately suffered from a hurry up and wait philosophy \non the part of our customer s client, who suddenly decided that they didn t need the project that soon \nat all. After 95% of the story cards were finished, in less than the time estimated, the pharmaceutical \ncompany froze development for a few months while they collected comparative data from clinical studies. \nDevelopment crept on for a few months, with us investing an average of 3 hours weekly in development. \nThe program, aimed at the Federal Republic of Germany, was released in March 2000, and is currently being \nadapted for Belgium and Spain, with the rest of the European Community to follow shortly. 1.3 Differences \nfrom the standard eXtreme Programming process As much as we tried, nevertheless this program deviated \nslightly from the optimum eXtreme Programming development process. Both our customer and our company \nwere hesitant at investing in the resources necessary to do pair programming. As a result, the author \ndid > 50% programming alone, albeit doing a bit of guerilla XP with a colleague constantly doing code \nreviews for the reason of increasing truck factor. As development went on, and decreased in intensity, \nthe author spent an average of half a morning each week at our client s site, and tried to pair program \nwith him. This was a very good idea, as it forced the author to make his thoughts so crystal clear that \neven a non-computer scientist could understand the code. Working in Smalltalk helped, as the customer \nhad little problem learning the syntax. After a few weeks, our client had a passive vocabulary in Smalltalk \nthat allowed the author to send him code snippets or methods by email when implementation questions arose. \n 2. A Description of the Simulation Model The decision analytic model is designed to analyse the clinical \nand economic impact of routine mass vaccination against disease as compared to no vaccination. The software \nincludes two basic modules: an age-structured transmission model to calculate the potential epidemiological \noutcomes associated with both medical strategies (vaccination or no vaccination), and a decision tree \nwhich allows to assess the clinical consequences of contracting varicella infection. The dynamic decision \nanalytic model is capable to evaluate the potential effects of vaccination in an entire population and \nto consider herd immunity effects. The approach used for structuring the transmission model is similar \nto that adopted by Halloran [Hallo94]. The transmission model compartments represent the susceptible, \ninfectious and immune health states. All compartments are time-and age dependent, with mixing and transmission \npatterns based on a real age structure. The age- and time-dependent infection rate is a function of the \nnumber of infectious people in the population, their degree of infectiousness, and the assumed mixing \npatterns of the age groups. 2.1 Vaccination strategy For each time point, the model identifies the actual \npopulation which is susceptible to varicella infection. All individuals belonging to this group are candidates \nfor vaccination. Vaccination will, however, be performed dependent on the coverage rate, which defines \nthose vaccination candidates effectively reached by the vaccination program. All possible vaccination \nstrategies can be analyzed, i.e. vaccination of children at a specific age, vaccination of children in \na certain age range (e.g. 1-5 years), or vaccination of children combined with a catch-up strategy in \nadolescents. 2.2 Infectious force The age-and time-dependent infection rate is a function of the number \nof infectious people in the population, their degree of infectiousness, and the assumed mixing patterns \nof the age groups . The model allows computing economic outcomes for both the payer perspective and the \nsocietal perspective. The time frame of analysis can be chosen according to the needs of the user. Per \ndefault, it is set at 30 years. 2.3 The population model Upon starting, the program gathers the current \nuser input (and other) parameters, and creates a population model based on these parameters. This model \nis then pre-aged, and then run through a number of aging iterations. Each iteration describes a discrete \nhalf-year step in aging. The state of the model after each iteration is dumped into a data dictionary \nfor later analysis. The Population Model consists of an Array of populations, each dividing the total \npopulation cohort into half-year age groups. Each population segment carries its own attributes, such \nas number of susceptibles, infecteds, and immunes. Based on user input and other parameters, the model \nis populated based on proportions derived from current statistical tables for the Federal Republic of \nGermany. The model defines the age, percentage of the total population, and percentage of Susceptibles \nfor each age group. For the purpose of initialization, all non-susceptibles are assumed to be immune. \n 3. Conclusion On the whole, the fact that the project was completed to the customer's satisfaction, \nand in budget, makes the project a success. Nevertheless, problems arose with the task estimates not \nhaving the needed precision, and with management not fully supporting the pair-programming philosophy. \nIn both these cases, we consider ourselves to be lucky not to have had any bad experiences. A subsequent \ntuning of the load factors for estimating tasks is planned, and may help reduce risk in proferring a \nbid. 4. Bibliography [Beck99] Beck, Kent. eXtreme Programming explained: embrace change. Addison-Wesley \n1999 [Hallo94] Halloran ME, Struchiner CJ, Watelet L. Epidemiologic effects of vaccines with complex \ndirect effects in an age-structured population. Mathematical Biosciences 1994; 121: 193-225  \n\t\t\t", "proc_id": "367845", "abstract": "<p>Is it possible to do fixed-price eXtreme Programming projects? How does one bid on a project with changing scope? When is the project finished? These questions and others were addressed in the context of a successful project modeling infection and vaccination scenarios implemented in VisualAge Smalltalk for a noted pharmaceutical company. Interesting results and answers, as well as a short demonstration, will be presented.</p>", "authors": [{"name": "Joseph Pelrine", "author_profile_id": "81100210509", "affiliation": "Daedalos Consulting, Bachlettenstrasse 41, 4054 Basel, Switzerland", "person_id": "P149342", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367907", "year": "2000", "article_id": "367907", "conference": "OOPSLA", "title": "Modelling infection scenarios - a fixed-price eXtreme programming success story", "url": "http://dl.acm.org/citation.cfm?id=367907"}