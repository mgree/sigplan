{"article_publication_date": "01-01-2000", "fulltext": "\n Tool-Box Frameworks - the new Challenge beyond Black-Box and White-Box Martin Lippert University of \nHamburg Computer Science Department, SE group &#38; APCON Workplace Solutions GmbH Vogt-K\u00f6lln-Stra\u00dfe \n30 22527 Hamburg, Germany  lippert@acm.org 1 MOTIVATION tools help the developer using, for example, \nthe Tool design metaphor, the Material metaphor, or the Domain Building applications on top of application \nframeworks Value metaphor. can be a painful job. Even if a framework promises Doing this the user can \ndevelop a new Tool on top of higher reuse and better application design, the predefined (black-box and \nwhite-box) classes inside the engineering often has to be done at source-code level framework without \nworking on the class level from the using a simple development environment. We had this beginning, using \nspecialized tools to build the basic experience using our JWAM framework (see [3]), a Java\u00adfoundation \nfor the application. Since the first access to based application framework for large-scale software the \nframework is through the tools provided by the development using the Tools &#38; Materials approach (see \nframework we call this a Tool-Box -Metaphor. [1]). The JWAM framework consists of a number of black-box \nand white-box (see [2]) sub-frameworks. Our experiences 3 TOOLS FOR THE JWAM with these models suggest \nthat they are not efficient FRAMEWORK enough. Often the application developer uses a normal The tools \nfor the JWAM framework generate source code development environment that is not especially designed that \ncan be subject of ongoing work by the application to support exactly this framework. At first glance, \nthis developer. The generated source code is highly readable seems like a fine idea: The development \nenvironment and very similar to the normal code written by an should be independent of the used application \nframework application developer using the framework without the and the application framework should \nbe independent of tools. The tools are themselves built using the JWAM the used development environment. \nThis promises a high framework and its design metaphors. reusability and gives the developer as much \nfreedom of The usage model of the tools is oriented to the tasks the choice as possible. But in practice, \nthe lack of application developer has to do. Examples are: framework-specific support inside the development \n building a tool for a specific task. environment is obvious and painful. From the beginning adding \nan event communication inside a tool. of the development process to the end the developer has adding \nand removing connections between the to work on the level of classes, interfaces, methods and elements \non the user interface and the tool other elements of the black- and/or white-box implementation. frameworks \nand the programming language. building a domain value.  building a form as a special material.  2 \nTHE TOOLBOX METAPHOR There are other tasks that deserve tool support and it is To solve this problem \nwe ve developed a number of still ongoing research to find the right ones. To find the specialized tools \nto support the application developer in right tasks we work in close cooperation with our the underlying \nframework. These tools are specifically application development projects using the framework as built \nfor the JWAM framework and they work on top of well as with industrial partners using the JWAM the design \nmetaphors of the framework: They don t framework. support the developer in using a single black-box class \nor The tools aren t standalone applications. We built small subclassing a white-box class of the framework. \nThe wrappers to integrate them into the JBuilder Foundation Edition 3.5 to enable a smooth application \nof the tools inside the normal development environment. The JBuilder environment integration is only \na demonstration Permission to make digital or hard copies of all or part of this of the principal possibilities. \nIt is ongoing research to find work for personal or classroom use is granted without fee out how close \nthey have to use the exact API of the IDE. provided that copies are not made or distributed for profit \nor commercial advantage and that copies bear this notice and the 4 CONCLUSION full citation on the first \npage. To copy otherwise, to republish, The demonstration will focus on the developed tools. A to post \non servers or to redistribute to lists, requires prior specific permission and/or a fee. small sample \napplication will be developed during the OOPSLA 2000 Companion Minneapolis, Minnesota presentation to \ndemonstrate the usage of the tools and the (c) Copyright ACM 2000 1-58113-307-3/00/10...$5.00 integration \ninto the JBuilder Foundation Edition 3.5 development environment. We show how the Tool-Box Empirical \nStudies of Object-Oriented Design, Vol. metaphor enhances the possibilities using an application 10, \nNo. 2 &#38; 3, 1995, Lawrence Erlbaum Associates framework. Publishers Hillsdale, New Jersey, England, \n1995, pp. 293-336. 2. E. Gamma, R. Helm, R. Johnson, J. Vlissides: REFERENCES Design Patterns Elements \nof Reusable Object\u00ad 1. U. B\u00fcrkle, G. Gryczan, H. Z\u00fcllighoven: Object-Oriented Software, Addison-Wesley, \nReading, Oriented System Development in a Banking Project: Massachusetts, 1994. Methodology, Experiences, \nand Conclusions, in Human-Computer Interactions, Special Issue: 3. The JWAM framework: http://www.jwam.org \n \n\t\t\t", "proc_id": "367845", "abstract": "", "authors": [{"name": "Martin Lippert", "author_profile_id": "81100519018", "affiliation": "University of Hamburg, Computer Science Department, SE group and APCON Workplace Solutions GmbH, Vogt-K&#246;lln-Stra&#946;e 30, 22527 Hamburg, Germany", "person_id": "PP31084935", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.368079", "year": "2000", "article_id": "368079", "conference": "OOPSLA", "title": "Tool-box frameworks - the new challenge beyond black-box and white-box", "url": "http://dl.acm.org/citation.cfm?id=368079"}