{"article_publication_date": "01-01-2000", "fulltext": "\n MixJuice : An object-oriented language with simple and powerful module mechanism (Extended abstract \nof OOPSLA2000 poster session) Yuuji ICHISUGI ichisugi@etl.go.jp http://www.etl.go.jp/ ichisugi/ PRESTO \nJapan Science and Technology Corporation / Electrotechnical Laboratory Abstract This paper describes \nan object-oriented language called MixJuice, which uses the di.erences of class hierarchies as a unit \nof information hiding and reuse. In this language, classes templates of objects and modules units \nof information hiding and reuse are completely orthogo\u00adnal, thus supporting separation of concerns. \nMixJuice is basically based on Java. However, its module mechanis\u00adm is simpler and more powerful than \nthat of Java. The MixJuice programmers can make use of all Java libraries and execution platforms 1 . \n1 Background In current object-oriented languages such as C++ and Java, classes work as modules. Modules, \nwhich are units of information hiding and reuse, are essentially di.erent from classes, which are templates \nof objects. In large\u00adscale programs, various problems actually occur when classes are used as modules. \nFirst, classes are inappropriate as units of information hiding. The relation of class = units of information \nhid\u00ading is only approximately true in small-scale systems[1]. In order to raise the accuracy of approximation, \nmech\u00adanisms such as friend , protected and namespace in C++, and package and inner class in Java, have \nbeen introduced. Such information hiding mechanisms, however, are not enough in some cases. For example, \nas 1Currently tested on IBM JDK1.1.8 on Linux. Permission to make digital or hard copies of all or part \nof this work for personal or classroom use is granted without fee provided that copies are not made or \ndistributed for pro.t or commercial advantage and that copies bear this notice and the full citation \non the .rst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires \nprior speci.c permission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota (c) Copyright ACM \n2000 1-58113-307-3/00/10...$5.00 the number of functions in a software increases, the .eld\u00ads and methods \nneeded in each class must also increase. This enlarges the size of the scope and makes system maintenance \nmore di.cult. Secondly, classes are inappropriate as units of reuse. Generally, the source code related \nto a certain function cross-cuts more than one class[2]. This problem has been recognized among researchers \nof programming languages as the need for separation of concerns. Various program\u00adming styles and programming \nlanguages have been pro\u00adposed to support separation of concerns. However, ev\u00adery proposal has had some \nproblems, e.g. a lack of type checking, no separate compilation or complexity of lan\u00adguage speci.cations. \nIn order to satisfy the needs above, the author has designed and implemented an object-oriented language, \nMixJuice, which completely separates the role of classes from the role of modules. 2 Summary of MixJuice \n2.1 The di.erences are modules In MixJuice, the di.erences of original systems are treat\u00aded as modules. \nThe di.erences are the modi.ed parts of original systems and are similar to patch .les of source code. \nThe target to which the di.erences is added is not a class but the whole class hierarchy. This is di.eren\u00adt \nfrom inheritance in conventional object-oriented lan\u00adguages where the target is a single class. In MixJuice, \nprogrammers can express a function which cross-cuts more than one class as a module to ac\u00adcomplish separation \nof concerns. Each module is sepa\u00adrately compiled and distributed without source-code. At the time of \ncompilation, every unit of module is type\u00adchecked. End-users can select the modules to be used when they \nlaunch the application written in MixJuice. Thus, the module mechanism of MixJuice acts like conditional \ncom\u00adpilation mechanisms (e.g. #ifdef in C) in a more sophis\u00ad module m // the name of this module extends \nm1, m2 // the super modules uses m3, m4 // modules whose names are referred to { // module body delta \nS {...} // differences to the existing class class A extends S {...} // a new class ... } Figure 1: An \nexample of module de.nition ticated way. Each module selected by end-users is auto\u00admatically topologically \nsorted based on dependency, then linearized, linked up with one system and executed. The safety of linked \nsystems is ensured by type consistency checks at the time of linkage. 2.2 Module De.nition Fig.1 shows \nthe de.nition of module m in MixJuice. In this example, extends declares m1 and m2 as the original systems. \nModules m1 and m2 are called m s super modules, modules to which the di.erences are at\u00adtached. In the \nuses declaration, modules that are referred to by module m are declared. This declaration is al\u00admost \nequivalent to the import declaration in module mechanisms in conventional programming languages. All \nclass/method/.eld names visible from the referred mod\u00adules are visible from the referring module. For \nexample, in Fig.1, all names visible from modules m3 and m4 are visible from module m . In the module \nbody, di.erences to the original systems are de.ned. Using delta constructs, programmers can override \nmethods or add methods to classes de.ned at the super modules. The modules containing delta act like \nmixins[3], which enhance .exibility and re-usability of software. 2.3 No collision of names In MixJuice, \ncollision of class/method/.eld names occurs when one module extends or uses multiple modules. In Java, \ncollision problems of class names occurring because of import declarations are solved by the idea of \nful\u00adly quali.ed class names. This solution is also used by MixJuice. For example, programmers can denote \nexact\u00adly one method name using a fully quali.ed name of the method. Otherwise, ambiguous method name \nerror is reported. 2.4 No protected, package and inner class protected , package and inner class declarations \nwere originally introduced to raise the accuracy of ap\u00adproximation of class = module . In MixJuice, however, \nthese functions are no longer necessary because arbitrary name spaces can be described by using multiple \ninheri\u00adtance of name spaces. 2.5 No static .elds and static meth\u00adods Descriptions of .elds and methods \nin special class G of MixJuice are equivalent to the ones of conventional static .elds and static methods. \nAt the launching of a program, an instance of class G is created and this instance is re\u00adferred to by \nall other objects during the execution of the program. The scope of each .eld and method in class G can \nbe controlled by programmers because the de.nitions of class G can be distributed to modules by using \ndelta constructs. In MixJuice, class G is extensible by submodules using delta while static methods in \nJava are not extensible. This feature increases extensibility and .exibility of pro\u00adgrams.  3 Application \nPrior to MixJuice, a prototypical language called Ld-2, which does not have a type-checking mechanism, \nwas im\u00adplemented. EPP[4, 5], the Java Extensible Pre-Processor, was written using Ld-2 and consists of \nabout 15,000 lines. EPP is written in a programming style, as described in this paper, which treats the \ndi.erences as modules, and extends behavior by adding modules. The end-users of EPP can simultaneously \nadd independently developed modules to a system. Although MixJuice is a general-purpose programming language, \nit is especially suitable for building highly ex\u00adtensible software such as EPP.  References [1] Szyperski, \nC.A.: Import is Not Inheritance, Why We Need Both: Modules and Classes , In Proc. of E-COOP 92, pp.19 \n32, 1995. [2] Kiczales, G., Lamping, J., Mendhekar, A., Maeda, C., Lopes, C. V., Loingtier, J.M. and \nIrwin, J.: Aspect-Oriented Programming. Invited Talk. In Proc. of E-COOP 97, LNCS 1241, pp.220-242, 1997. \n[3] Bracha, G. and Cook, W.: Mixin-based Inheritance , In Proc. of ECOOP/OOPSLA 90, pp.303 311. [4] Ichisugi, \nY. and Yves Roudier: The Extensible Java Preprocessor Kit and a Tiny Data-Parallel Java , In Proc. of \nISCOPE 97, LNCS 1343, pp153 160, California, Dec, 1997. [5] Ichisugi, Y.: EPP, http://www.etl.go.jp/ \nepp/  \n\t\t\t", "proc_id": "367845", "abstract": "<p>This paper describes an object-oriented language called <i>MixJuice</i>, which uses the differences of class hierarchies as a unit of information hiding and reuse. In this language, classes &#8212; templates of objects &#8212; and modules &#8212; units of information hiding and reuse &#8212; are completely orthogonal, thus supporting <i>separation of concerns</i>. MixJuice is basically based on Java. However, its module mechanism is simpler and more powerful than that of Java. The MixJuice programmers can make use of all Java libraries and execution platforms<sup>1</sup>.</p>", "authors": [{"name": "Yuuji Ichisugi", "author_profile_id": "81100286329", "affiliation": "PRESTO Japan Science and Technology Corporation / Electrotechnical Laboratory", "person_id": "P308458", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.368000", "year": "2000", "article_id": "368000", "conference": "OOPSLA", "title": "MixJuice (poster session): an object-oriented language with simple and powerful module mechanism", "url": "http://dl.acm.org/citation.cfm?id=368000"}