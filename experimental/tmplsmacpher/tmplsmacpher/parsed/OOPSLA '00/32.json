{"article_publication_date": "01-01-2000", "fulltext": "\n Adaptations to OCL for Ensuring Quality of Geographic Data* Miro Casanova, Thomas Wallet, Maja D Hondt \nSystem and Software Engineering Laboratory - Vrije Universiteit Brussel Pleinlaan 2 - 1050 Brussels - \nBelgium { mcasanov, twallet, mjdhondt } @vub.ac.be This poster illustrates how we use the Unified Modeling \nLanguage (UML) [1] to represent concepts from geographic data, and how we employ the associated Object \nConstraint Language (OCL) [4] to describe quality criteria as complex domain-specific constraints. We \npropose some adaptations to OCL which originated from the geographic domain, though reusable in other \ndomains where complex constraints need to be expressed on a conceptual, knowledge-oriented model. Finally \nwe briefly describe the Business-Rule Enabling Kernel, which is a module of a large distributed quality \nassurance system for the geographic data production process of our industrial partner Tele Atlas Data. \nThis module is used to write the constraints, hereafter also referred to as OCL constraints, that are \nautomatically checked against the persistent geographic data.  1 Geographic Data Digital geographic \ndata is used in sophisticated applications such as Geographic Information Systems (GIS) which operate \non * This research, in collaboration with Tele Atlas Data Ghent NV, is part of the project GeoObjects \n(IWT 990025), funded by the Flemish institute for the Improvement of the Scientific-Technological Research \nin the Industry (IWT). Permission to make digital or hard copies of all or part of this work for personal \nor classroom use is granted without fee provided that copies are not made or distributed for profit or \ncommercial advantage and that copies bear this notice and the full citation on the first page. To copy \notherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission \nand/or a fee. persistent geographic data, obtained from source material such as satellite images or scanned \nmaps. In order to improve the efficiency of capturing and producing geographic data, the Geographic Data \nFiles standard [5] has been developed, thus providing a common reference model for clients and producers \nalike. GDF describes real-world concepts, attributes and relations in the geographic domain in a high-level \nand implementation\u00adindependent way. Nevertheless, current practices skip the high\u00adlevel GDF description \nand immediately enter the data in the persistency layer at the implementation level, thereby amplifying \nthe inevitable impedance mismatch. Moreover, capturing digital geographic data from maps and images induces \nerrors and inaccuracies, thus dramatically reducing data quality. Quality of geographic data is defined \nhere as its integrity and well-formedness. Currently, at the conceptual level quality is specified by \ndomain-specific quality constraints described in natural language, whereas at the implementation level \nit is manually hard-coded in some quality assurance tool. Achieving the highest possible quality is essential \nin producing geographic data. One only needs to consider the consequences of using poor quality data \nin applications such as car navigation, and alarm call and dispatch.  2 Ensuring Quality of Geographic \nData The aforementioned difficulties lead us to the conclusion that a high-level conceptual representation \nof the geographic data is required. This representation of geographic concepts, attributes and relations \nis used for expressing the corresponding constraints, also at a conceptual level. This will ensure implementation \nindependence and a close match with the real-world data in order to minimize loss of information. Moreover, \nexpressing the constraints requires a level of intuitiveness and declarative power comparable to that \nof natural language without losing formality and correctness. However, from this conceptual representation, \nthe Business-Rule Enabling Kernel should automatically generate code that checks if none of the relevant \npersistent geographic data violates this particular constraint. This should be integrated in a larger \nquality assurance system. OOPSLA 2000 Companion Minneapolis, Minnesota Since concepts, attributes and \nrelations of the GDF standard (c) Copyright ACM 2000 1-58113-307-3/00/10...$5.00 seamlessly map onto \nclasses, attributes and associations of the class diagram of UML, this notation was chosen as representation \nmedium. UML s accompanying OCL was selected for expressing the constraints, since it adequately fulfills \nour requirements.  3 Adaptations to OCL The specific domain of this project, and the kind of constraints \nneeded by our industrial partner, induced us to use OCL in a slightly different way than proposed in \nthe UML 1.3 specifications [5]. Since we do not need all the features of the original OCL, we started \nfrom a subset of OCL excluding all the features related to pre- and post-conditions, and defined some \nextensions that we present here. Constraints on Multiple Classes Most of the constraints we use are invariants \ninvolving multiple classes. For this reason we propose a simple way to refer to several classes (contexts) \nwithin the same constraint, as also proposed in [3]. Thus, a constraint is no longer attached to the \ncontext of a single class. Constraints on Multiple Instances Sometimes a constraint involves several \ninstances of the same class at a time, in order to denote some relationship among them. To support this \nin a simple way, we introduce identifiers that can explicitly refer to different instances of a class \nin a constraint. Parametric Constraints Due to the occurrence of similar constraints that operate on \ndifferent types, we propose an extension where it is possible to specify some parametric types for a \nconstraint. A concrete constraint can then be obtained by providing those type parameters. We also provide \na way to bound the type parameters with a where clause. Referencing and Composing Constraints In order \nto refer within an OCL constraint to other constraints, we created a referencing mechanism for constraints, \nwhich provides a powerful way for composing constraints. Constraints can easily be used as atomic OCL \nexpressions and then be composed together using all the expressive power of OCL. This referencing mechanism \nalso provides a way to use a parametric constraint by referencing it and specifying its type parameters. \nFor examples and descriptions of evaluation issues of the resulting OCL, we refer to [2]. 4 The Business-Rule \nEnabling Kernel As a support for the resulting OCL, we developed a Business-Rule Enabling Kernel, which \nis a module integrated in a large quality assurance system of our industrial partner, providing the following \nfunctionalities: Managing and editing OCL constraints Users can create, delete and modify OCL constraints. \nFor each constraint it is possible to edit the corresponding OCL expression, as well as other properties \nassociated. Checking constraint validity Once an OCL constraint is written, our module checks it lexically, \nsyntactically, but also performs type checking. This type checking is done against a UML conceptual model \nof the user-defined classes, in this case the geographic data model. Generating code OCL constraints \nare automatically mapped to code for checking the corresponding constraints against the data of the geographic \ndatabase of our industrial partner. 5 Conclusions We present some adaptations to OCL that make it more \nconcretely and easily usable in the domain of geographic data. The corresponding Business-Rule Enabling \nKernel we developed enables users to write OCL constraints, reasoning about high-level concepts of their \ndomain, in a simple and modular way. These constraints are automatically mapped to code for checking \nthem against persistent geographic data. In a nutshell, we show how to use OCL and UML concretely for \nensuring quality of geographic data. However our adaptations to OCL and our specific use of it can be \nput to use in other knowledge-oriented domains where complex constraints need to be expressed. References \n[1] G. Booch, M. Fowler and K. Scott. UML Distilled: A Brief Guide to the Standard Object Modeling Language \n. 2nd Edition. Addison-Wesley. 1999. [2] M. Casanova, T. Wallet and M. D Hondt. Ensuring Quality of Geographic \nData with UML and OCL . In Proceedings of the <<UML>> 2000 Conference (to appear). Springer-Verlag, 2000. \n[3] S. Gaito, S. Kent and N. Ross. A Meta-model Semantics for Structural Constraints in UML . In H. Kilov, \nB. Rumpe, and I. Simmonds editors, Behavioral specifications for businesses and systems, chapter 9, pages \n123-141. Kluwer Academic Publishers, Norwell, MA, September 1999. [4] A. Kleppe and J. Warmer. The Object \nConstraint Language: Precise Modeling with UML . Addison-Wesley, 1999. [5] The Geographic Data Files \nStandard Technical Committee 278 Road Transport and Traffic Telematics of the Comit\u00e9e Europ\u00e9en de Normalisation. \n[6] UML 1.3 Specifications (including OCL specifications). http://www.omg.org/uml  \n\t\t\t", "proc_id": "367845", "abstract": "", "authors": [{"name": "Miro Casanova", "author_profile_id": "81100150467", "affiliation": "System and Software Engineering Laboratory, Vrije Universiteit Brussel, Pleinlaan 2, 1050 Brussels, Belgium", "person_id": "PP14062791", "email_address": "", "orcid_id": ""}, {"name": "Thomas Wallet", "author_profile_id": "81351595652", "affiliation": "System and Software Engineering Laboratory, Vrije Universiteit Brussel, Pleinlaan 2, 1050 Brussels, Belgium", "person_id": "P281811", "email_address": "", "orcid_id": ""}, {"name": "Maja D'Hondt", "author_profile_id": "81100105517", "affiliation": "System and Software Engineering Laboratory, Vrije Universiteit Brussel, Pleinlaan 2, 1050 Brussels, Belgium", "person_id": "PP31075562", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367942", "year": "2000", "article_id": "367942", "conference": "OOPSLA", "title": "Adaptations to OCL for ensuring quality of geographic data (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367942"}