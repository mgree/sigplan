{"article_publication_date": "01-01-2000", "fulltext": "\n Adaptive Object-Models1 Joseph W. Yoder Reza Razavi University of Illinois University of Paris 6 (LIP6) \njoeyoder@joeyoder.com razavi@acm.org 1. Abstract The unrelenting pace of change that confronts contemporary \nsoftware developers compels them to make their applications more configurable, flexible, and adaptable. \nA possible way to meet such requirements is to use an Adaptive Object-Model (AOM). This poster describes \ncommon architectures for adaptive object-models and summarizes the results from our ECOOP 2000 workshop \n[9].  2. Need for Adaptable Architectures The era where business rules are buried in code is coming \nto an end. Today, users themselves may seek to dynamically change their business rules. Customers require \nsystems that more easily adapt to changing business needs, meet their unique requirements, and scale \nto large and small installations. On the other hand, the same technique is adequate for the slightly \ndifferent purpose of producing a whole line of software products: of course, a line of products may be \nobtained by vari\u00adously instantiating an abstract model, but also by adapting a given initial system to \nvarious requirements that appear simultaneously instead of evolving in time. 3. The Adaptive Object-Model \nApproach Early solutions that have been developed in order to design flexible implementation of business \nrules was provided by black\u00adbox frameworks [2]. A more recent approach to meet such re\u00adquirements is \nto use an Adaptive Object-Model [1], where the object representation of the domain under study has itself \nan ex\u00adplicit object model (albeit partial) that is interpreted at run-time. Such an object model can \nbe changed with immediate (but con\u00adtrolled) effect on the system interpreting and running it. Objects \nhave states and respond to events by changing state. The Adaptive Object-Model defines the objects, their \nstates, the events, and the conditions under which an object changes state. If you change the object \nmodel, the system changes its behavior. For example, such a feature makes it easy to integrate a workflow \nmechanism, which proves useful in many systems. Adaptive Object-Models lets to confront successfully \nthe need for change by casting information like business rules as data rather than code. In this way, \nit is subject to change at runtime. Using objects to model such data and coupling an interpretation mechanism \nto that structure, we obtain a domain-specific lan\u00adguage, which allows users themselves to change the \nsystem fol\u00adlowing the evolution of their business. Metadata is then often used in adaptive object-models \nto de\u00adscribe the object model itself. When runtime descriptions of these objects are available, users \ncan directly manipulate these objects. Since the system can interpret the metadata to build and manipu\u00adlate \nthese runtime descriptions, it is easy to add new objects to the adaptive object-model, and make them \nimmediately available to users. This approach has been validated by several successful in\u00addustrial projects \n[6,7,8].  4. Observation Framework The Observation framework [8] is an adaptive object\u00admodel architecture \nfor dynamically describing different types of phenomenon over a given period of time; this concept is \nwidely applied in a domain related to tests, samples, and measurements. Observations play a large role \nin the medical domain because they make it possible to associate specific conditions and measure\u00adments \nwith people at a given point in time. Some typical medical observations are eye color, blood pressure, \nheight and weight. Medical observations along with their business rules can be de\u00adscribed and stored \nin a database so that any new types of observa\u00adtions or valid values can be made available to the system \nwithout writing new code. 5. AOMs and End-User Programming One way to cope with the rapid need to change \nrules as a re\u00adsult of changes in user requirements is to empower domain ex\u00adperts with adequate tools \nto create, customize, specialize and ex\u00adtend their software applications. From the end users computing \nperspective, a domain expert can be characterized as a non-programmer person who has com\u00adputational needs \nand wants to make serious use of the computers. If s/he is provided with an adequate tool, s/he can change, \nextend and tailor its applications to meet the demands of local conditions. Adaptive Object-Model architectural \nstyle is particularly ade\u00adquate for building end-user programming systems. By providing design patterns \nto create dynamically adaptable systems, they offer an appropriate foundation to the problem of facilitating \npro\u00adgramming for end users and domain experts. Type Cube [7] is a model for building end user programming \nsystems. It provides guidelines for designing object-oriented ap\u00adplications, which can be extended and \npersonalized by domain experts. It deals with dynamic definition of new entity types and behavior. Type \nCube has been validated by two industrial projects. 1 Permission to make digital or hard copies of all \nor part of this work for personal or classroom use is granted without fee provided that copies are not \nmade or distributed for profit or commercial advantage and that copies bear this notice and the full \ncitation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to \nlists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota \n(c) Copyright ACM 2000 1-58113-307-3/00/10...$5.00  6. Other AOM architectures 6.1 Domain Model Engine \nThe Domain Model Engine [4] is an Adaptive Object-Model proposed by R. Johnson and D. Manolescu as a \ncommon infrastructure for product and process models [MJ98a]. The product model provides a framework \nfor defining, by composition, new domain object models at runtime. The process model is designed to support \na large number of rapidly changing business rules. Its application for building a process model for workflow \napplications has led to micro-workflow framework. 6.2 Micor-workflow Micro-workflow [3] is an object-oriented \nframework for adaptive workflow systems that tackles the workflow problem at the object-level. It s a \nspecialized interpreter for application proc\u00adesses (business, administrative, scientific, etc.). It supports \nad-hoc processes and dynamic process models. Micro states for the fact that micro-workflow involves small-scale \nprocesses that execute within applications. As a framework, its features are accessible to developers \nand can be specialized to cover specific requirements. The key characteristic of micro-workflow are: \nsmall kernel that provides basic features; advanced features are provided as plugins. Therefore, software \ndevelopers can pick and choose the features they need.  7. Summary of ECOOP 2000 Workshop This workshop \nwas held in June 2000 at Cannes in France. The participants focused on comparisons of Adaptive Object\u00adModel \ns approach with those of Reflection and Metamodeling. Position papers for all workshop participants can \nbe found at http://www-poleia.lip6.fr/~razavi/aom/papers/. The participants observed that the three domains \nshare the same dimensions of abstractions. The top most level, called L3, represents a language for describing \nlanguages. The next level, L2, represents a domain specific language, derived by applying L3 to the application \ndomain. The L1 level represents the specifica\u00adtion for a particular software (system). Finally, the L0 \nlevel repre\u00adsents is an instance of that specification. Type Cube is an example of this conceptual layering \nfrom Adaptive Object-Model domain. Applying Type Cube to an appli\u00adcation domain delivers a domain specific \nlanguage for that do\u00admain. This language allows experts to specify their applications, which are then \ninstantly executable. The Reflection community has also used similar ap\u00adproaches to provide adaptable \nprogramming languages. Many reflection techniques can be found in Adaptive Object-Models. The Common \nWarehouse Metamodel (CWM), a recently adopted standard of the Object Management Group (OMG) for metadata \ninterchange in the data warehouse and business intelli\u00adgence environments, is naturally another an example \nfrom meta\u00admodeling, that has already adopted this four level architecture. In fact, the MOF ontology, \nmeta-layer stack, and semantics is im\u00adposed on compliant metamodels. CWM extends the OMG's standard MOF/UML/XMI \nmetamodeling architecture with data warehousing and business intelligence domain concepts. CWM supports \na model-driven approach to metadata interchange, in which object models repre\u00adsenting shared metadata \nare constructed according to the specifi\u00adcations of the CWM metamodel. Tools agree on fundamental domain \nconcepts (as defined by the CWM metamodel) and, there\u00adfore, are capable of understanding a wide range \nof models repre\u00adsenting particular metadata instances. The OMG architecture generally allows for the \ncreation of metamodels whose instances readily align with (or reveal or ex\u00adpose) the fundamental patterns \nof Adaptive Object-Models. The CWM metamodel, by directly extending MOF/UML, drives sup\u00adport for Adaptive \nObject-Model patterns into the data warehous\u00ading and business intelligence domains, leading the way for \na new generation of data warehousing and business intelligence tools that are dynamically configurable \nand highly adaptive to changing environments. Such tools would be driven by Adaptive Object-Models, with \nCWM serving as the foundational metamodel guid\u00ading the creation of those Adaptive Object-Models.  8. \nConclusions Relatively large industrial applications using Adaptive Ob\u00adject-Models have been built successfully. \nThey provide domain experts and analysts with tools to make evolve their applications as their business \nevolves. Also, discussions during our workshop at ECOOP 2000 has shown that Adaptive Object-Models share \nthe same abstrac\u00adtion levels with Reflection and the Object Management Group (OMG) metamoldeing architecture. \n 9. References 1. Brian Foote and Joseph Yoder. Metadata and Active Object-Models, Collected papers from \nthe PLoP '98 and EuroPLoP '98 Conference, Technical Report #wucs-98-25, Dept. of Computer Science, Washington \nUniversity, Sept 1998. 2. Don Roberts and Ralph Johnson. Evolving Frame\u00adworks: A Pattern Language for \nDeveloping Object-Oriented Frameworks, Pattern Languages of Program Design 3, Robert Martin, Dirk Riehle, \nand Frank Buschmann, eds., Addison-Wesley, Reading, MA., 1997. 3. Dragos A. Manolescu and Ralph E. Johnson. \nDynamic Object Model and Adaptive Workflow. Metadata and Active Object-Model Pattern Mining Workshop. \nOOPSLA'99, Denver, USA. http://www.uiuc.edu/ph/www/manolesc/Workflow. 4. Dragos-Anton Manolescu and \nRalph E. Johnson. A pro\u00adposal for a common infrastructure for process and prod\u00aduct models. In OOPSLA \nMid-year Workshop on Ap\u00adplied Object Technology for Implementing Lifecycle Process and Product Models, \nDenver, Colorado, July 1998. 5. John Poole -The Common Warehouse Metamodel as a Foundation for Active \nObject Models in the Data Ware\u00adhouse Environment. Position paper to ECOOP 2000 workshop on Metadata and \nActive Object-Model Pat\u00adtern Mining. June 2000, Cannes, France. 6. Ralph Johnson and Jeff Oaks. The \nUser-Defined Prod\u00aduct Framework, URL: http://st\u00adwww.cs.uiuc.edu/users/johnson/papers/udp/ 7. Reza Razavi. \nFoundations of a Framework for Develop\u00ading End User Programming Environments. Position pa\u00adper to ECOOP \n2000 workshop on Metadata and Active Object-Model Pattern Mining. June 2000, Cannes, France. 8. Joseph \nW. Yoder, Federico Balaguer , Ralph Johnson ---From Analysis to Design of the Observation Pattern. Metadata \nand Active Object-Model Pattern Mining Workshop. OOPSLA'99, Denver, USA. URL: www.joeyoder.com/Research/metadata/OOPSLA99 \n 9. Joseph Yoder and Reza Razavi. Metadata and Active Object-Models Workshops Collected papers from \nthe ECOOP2000.  www.joeyoder.com/Research/metadata/ECOOP2000  \n\t\t\t", "proc_id": "367845", "abstract": "<p>The unrelenting pace of change that confronts contemporary software developers compels them to make their applications more configurable, flexible, and adaptable. A possible way to meet such requirements is to use an <i>Adaptive Object-Model (AOM)</i>. This poster describes common architectures for adaptive object-models and summarizes the results from our ECOOP 2000 workshop [9].</p>", "authors": [{"name": "Joseph W. Yoder", "author_profile_id": "81100257036", "affiliation": "University of Illinois", "person_id": "PP39085775", "email_address": "", "orcid_id": ""}, {"name": "Reza Razavi", "author_profile_id": "81319499968", "affiliation": "LIP6, University of Paris 6", "person_id": "PP40036781", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367957", "year": "2000", "article_id": "367957", "conference": "OOPSLA", "title": "Adaptive object-models (poster session)", "url": "http://dl.acm.org/citation.cfm?id=367957"}