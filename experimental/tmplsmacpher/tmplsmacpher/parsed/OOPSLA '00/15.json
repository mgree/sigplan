{"article_publication_date": "01-01-2000", "fulltext": "\n How conceptual system architecture leads to business process Hern\u00e1n Astudillo Soluciones S.A. Agustinas \n814, Of. 909 Santiago, Chile +(56)(2) 639.5643 hernan@acm.org ABSTRACT While designing a global bank's \nMoney-Link, the clustering of non-functional properties suggested two \"lobes\": (1) transactional (enabling \npayments among affiliate banks), which required high\u00adavailability, high-security, and geographical distribution; \nand (2) analytic, with traditional database requirements. These purely architectural components coincided \nwith business processes separately identified by business analysts. Architecture provided problem domain \ninsight. Keywords. Software architecture, business process, distributed system, lobes. 1. INTRODUCTION \nThis Practitioner Report presents our formulation of a system s architecture using clustering of non-functional \nproperties, which suggested a two-part system that closely mirrored the business processes identified \nby the business analysts. This leads us to the conclusion that experienced architects can throw light \nover the problem domain while elaborating the architecture solution. 2. DERIVING A SYSTEM ARCHITECTURE \n2.1 The Domain Problem Money-Link was designed to allow payments from Financial Institutions ( FIs ) \nto various U.S. Federal Agencies ( Agencies ); in actuality, these payments are collected by the Treasury \non behalf of the Agencies and reported to the Federal Reserve Banks ( FRBs ). The FIs themselves may \nbe located anywhere in the world, the Agencies are located mostly in the D.C. area, and there were 37 \nFRBs located across the U.S. Our first step was to identify the top-level system parts with architectural \nmeaning. Although it may seem odd, in practice we have achieved good results by identifying an image \nor metaphor for the system, and explaining our architectural choices and results using the image. We \ndescribe below our image and architecture. 2.2 Imagining the System The Money-Link system was meant \nto support an accounting fiction: (a) that FIs pay to the Agencies, whereas in reality the . Permission \nto make digital or hard copies of all or part of this work for personal or classroom use is granted without \nfee provided that copies are not made or distributed for profit or commercial advantage and that copies \nbear this notice and the full citation on the first page. To copy otherwise, to republish, to post on \nservers or to redistribute to lists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion \nMinneapolis, Minnesota &#38;#169; Copyright ACM 2000 1-58113-307-3/00/10...$5.00 Treasury collects this \npayment, and (b) this collection is itself implemented by transfers between the FRBs accounts for FIs \nand Agencies. The fact that this payment is actually mediated and multi-party results in three kinds \nof business processes: 1. Those that steam from maintaining the \"fiction\", and allow the FIs to pay Agencies \n\"via\" the Treasury, including receiving payments on behalf of Agencies, requesting equivalent transfers \nat the FRB, and providing rich payment handling (e.g. cancellation and tracking). 2. Those that steam \nfrom each participant having its own \"image\" of what payments have been made. This includes maintaining \nthe Treasury s own image, providing rich handling for it (e.g. validations corrections), and allowing \nimage comparisons (i.e. reconciliation). 3. Those that derive from additional uses that the Treasury \ncan do of its own image (e.g. forecasting).  image of an Agency's payments image of Treasury's payments \n Agency Treasury Federal Reserve Bank Figure 1: Key business processes supported by Money-Link These \nflavors of functionality are represented in Figure 1, where the \"transparent payment\" is depicted with \na thick arrow and the \"payment images\" with ovals. Do notice that the Treasury keeps images of the Agencies \n(on behalf of which it receives payments) and of its own transfers to the FRB s. 2.3 Two Different Functional \nHalves The flavors of functionality imposed quite different requirements on the overall system architecture, \nand suggested us two main parts (called lobes as an analogy to brain halves): The payment mediator enables \npayment handling, by processing actual deposit requests and prompting the FRB for action; we think of \na \"payment gopher\", concerned with getting payments carried out.  The analysis enabler supports image \nmaintenance and post\u00adfacto analysis, allowing operations that use data on past payments (reconciliation, \nforecasting, reporting); we think of a \"record keeper\", concerned with keeping and analyzing payment \nhistories.  Figure 2: System overview: The two lobes 2.4 Are Also Non-Functional Halves Besides the \nclear functional differences, the system lobes have key differences (see Table 1) for non-functional \nproperties, including availability, performance, security, and size scalability. (In fact, they would \nprobably be supported with different technologies, though this is not a necessary implication.) Table \n1: Characteristics of the Money-Link Lobes PROPERTY Payment mediator Analysis enabler Timeliness Near-time \nprocessing Batch processing Typical transactions OLTP-like DSS-like Synchronicity Event-driven Data-driven \nAvailability 24x7 Daily Location Distributed, fail-over Centralized (internal replication) Reliability \nExtremely high Plain old high 2.4.1 The payment mediator The payment mediator supports online payment \nprocessing performed for the FIs. It provides deposit collection mechanisms, lifecycle support for payments, \nand routing of transfer requests to the FRB. The key architectural properties for this system are: Near-time \nprocessing: Formerly, FI payments were routed in a matter of days; this can be reduced to minutes.  \nOLTP-like: Given the online nature of payments, they must be supported with permanent high throughput \n(but this does not imply that they be implemented with OLTP products).  Event-driven: Payments arrive \nin an asynchronous manner, and must be processed as they arrive.  High availability: Payments arrive \ncontinuously (24x7), suggesting load-balancing and fault-tolerance capabilities via replicated distribution. \n Multiple locations: Payments must be routed to the FRB corresponding to the FIs location, suggesting \ngeography\u00adbased replication of the payments mediator.  High reliability, integrity and security: The \npayment mediator handles \"actual money\", since it routes transfer requests to FRBs; hence, requires point-to-point \ninformation integrity from the FI initial payment to the FRB transfer.  2.4.2 The analysis enabler \nThe analysis enabler allows to examine, validate, audit and record information on payments. Batch processing: \nMost history-based activity is done in batch mode, although interactive access was also requested.  \nDSS-like: Given the historical analysis capabilities, the flavor of the lobe's core technologies resembles \nDSS (Decision Support Systems). Notice that this similarity does not imply that the chosen technology \nbe DSS products.  Data-driven: Historical analysis was usually triggered in regularly scheduled, large \nsize processing.  Central location: Historical data is maintained by a single institution. Given the \ndata-driven, off-line, large-volume nature of this lobe, we suggested a centralized installation (but \nallowing internal replication and remote caching).  Standard reliability, integrity and security: Requirements \nsuggested an internally replicated installation.   2.5 Different Implementation Strategies Clearly, \nthe two lobes were quite different in their architectural demands, and this lead to different implementation \nstrategies for each of them (no surprise since the lobes were identified by clustering of non-functional \nproperties). The key architecture decisions and recommended technologies were: Payment mediator: fully \ndistributed, fully replicated, fail\u00adover replicated, supporting only payment processing; any historical \nanalysis (and its consequent large volumes of data) must be left to the analysis enabler lobe.  Analysis \nenabler: centralized, internally replicated (for load\u00adbalancing and availability), data-centric architecture; \nany near-time payment processing must be left to the payment mediator lobe.  2.6 A Comment on Lobes \nThe two lobes were identified through the clustering of non\u00adfunctional properties at a system-wide scale. \nWe have already used lobes to describe other systems, and define them as aggregates of business functions \nwith an eye to architectural differences . The key criterion to identify and manage a lobe is that it \nmust aggregate business functions which demand similar mechanisms across several dimensions, such as \navailability, distribution and integrity; for example, high-availability OLTP, or mostly-batch-yet-distributed. \nThe key aspect is that lobes have architectural implications. In a software project, lobes are the starting \npoint and scope for further design refinement, at each step proposing models at different abstraction \nand completeness levels and relegating details to further modeling. The final architecture can be presented \nusing successive levels of increasing detail and concreteness.  3. CONCLUSION The architecture of a \ncomplex distributed system was imagined as consisting of two large lobes , with complementary characteristics \nregarding timeliness, typical transactions, synchronicity, availability, location and reliability. These \ntwo lobes turned out to correspond with the two business processes identified by analysts: the use of \npurely architectural reasoning had led to insights on the business processes being automated. It is our \nbelief that a combination of experienced architects and careful architectural reasoning may lead regularly \nto such insights. Although still unclear, the precise relation between architectural elaboration and \nbusiness processes can be clarified with further examination of similar experiences, and we urge our \ncolleagues to share such experiences.  \n\t\t\t", "proc_id": "367845", "abstract": "<p>While designing a global bank's Money-Link, the clustering of non-functional properties suggested two &#8220;lobes&#8221;: (1) <i>transactional</i> (enabling payments among affiliate banks), which required high-availability, high-security, and geographical distribution; and (2) <i>analytic</i>, with traditional database requirements. These purely architectural components coincided with business processes separately identified by business analysts. Architecture provided problem domain insight.</p>", "authors": [{"name": "Hern&#225;n Astudillo", "author_profile_id": "81442597753", "affiliation": "Soluciones S.A., Agustinas 814, Of. 909, Santiago, Chile", "person_id": "P598136", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367916", "year": "2000", "article_id": "367916", "conference": "OOPSLA", "title": "How conceptual system architecture leads to business process", "url": "http://dl.acm.org/citation.cfm?id=367916"}