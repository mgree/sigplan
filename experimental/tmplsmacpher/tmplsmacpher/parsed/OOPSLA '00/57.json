{"article_publication_date": "01-01-2000", "fulltext": "\n Adding Parametric Polymorphism to the Common Object Request Broker Architecture (CORBA) Wayne L. Bethea \nLehigh University Department of Electrical Engineering and Computer Science 19 Memorial Drive West Bethlehem, \nPA 18015 wlb1@Lehigh.EDU ABSTRACT The research displayed in this poster showcases issues surrounding \nadding parametric polymorphism to CORBA. The merits of parametric polymorphism are widely published, \nyet there is no support for the parametric polymorphism paradigm in CORBA. This research should be of \nspecial interest to C++ programmers, and other programmers accustomed to generic programming, frustrated \nby this lack of support. 1. INTRODUCTION Parametric polymorphism, a form of generic programming, allows \nprogrammers and application developers to better utilize the flexibility, reusability and expressive \npower gained through generic coding. It describes an infrastructure in which types are allowed to be \nparameters to types and functions. Several technologies are adding and/or implementing this powerful \nform of genericity. The research illustrated in this poster deals with adding parametric polymorphism \nto an object-oriented distributed computing programming environment, more specifically the Common Object \nRequest Broker Architecture (CORBA). CORBA is an object-oriented distributed computing enabling layer \nof software, which supports multiple communication protocols, multiple programming languages and multiple \nexecution platforms. It is a technology that raises the bar on programming and development concepts such \nas flexibility, reusability and expressive power. It strives to excel at the same concepts that make \nparametric polymorphism such a desirable characteristic of any programming environment. Parametric polymorphism \nhas become an integral part of many modern programming languages, including most notably C++ Templates. \nThe ability to use parametric polymorphism has not made the transition from single environment programming \nlanguages to object-oriented distributed computing programming environments. CORBA supports programming \nlanguages that implement parametric polymorphism, yet there is no support for the parametric polymorphism \nparadigm in CORBA. It is an Permission to make digital or hard copies of all or part of this work for \npersonal or classroom use is granted without fee provided that copies are not made or distributed for \nprofit or commercial advantage and that copies bear this notice and the full citation on the first page. \nTo copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specification \npermission and/or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota &#38;#169; Copyright ACM 2000 1-58113-307-3/00/10 \n$5.00 environment that may leave C++ programmers in particular, and programmers familiar with generic \nprogramming in general, confined because of the lack of an implementation of parametric polymorphism. \n 2. THE RESEARCH Today's computing environments continue to be highly heterogeneous, highly distributed \nnetworked environments. These heterogeneous distributed networked environments are becoming the prevalent \nprogramming environments for programmers and application developers, and parametric polymorphism should \nbe an essential part of these programming environments. Those programmers familiar with parametric polymorphism \nwill expect it to be part of their distributed programming environments, and those programmers new to \nparametric polymorphism will be rewarded with a very powerful programming tool. CORBA is a set of specifications \nthat details the interfaces and characteristics of the Object Request Broker (ORB), the core of CORBA. \nIt is a sound choice for an object-oriented distributed computing programming environment in which to \nadd parametric polymorphism, since it is the effort of a large standards body, it is open and accessible, \nand it has a significant presence in both research work and practical applications. Currently CORBA supports \na weak form of genericity, a form resembling implicit genericity, also known as the generic idiom. Implicit \ngenericity is the use of a parameter of type Object or some type any in a function or type. The Object \nparameter is a type at the top of a type hierarchy from which all other types are descendents. Thus, \na parameter of type Object can be a parameter of any type in the type hierarchy through type casting. \nCORBA attempts to overcome some of the shortcomings of implicit genericity by including type information \nas part of a data type any.This adaptation overcomes the problem of error-prone run-time type casting, \nbut increases the awkwardness of using this form of genericity, as well as reducing the readability and \nmaintainability of CORBA objects implemented using any types. The implementation of any data types in \nCORBA implementations is awkward, and often incomplete. This research will provide a solution that overcomes \nthe disadvantages of implicit genericity with a solution of explicit genericity. The explicit use of \ntype parameters in the syntax and semantics of type and function definitions characterizes explicit genericity. \n2.1 Approach The implementation of these research ideas and goals will include extending the CORBA Interface \nDefinition Language (IDL), extending a number of CORBA Language Mappings and other core CORBA components, \nand modifying a CORBA implementation. Extending the CORBA IDL will allow programmers and application \ndevelopers to use explicit parametric polymorphism in defining their CORBA object interfaces. Extending \nthe language mappings will translate the concepts involved in the parametric polymorphism paradigm incorporated \ninto CORBA into implementation language concepts. And since CORBA is a set of specifications without \nan accompanying implementation, the extensions must be realized by modifying a CORBA implementation. \nThe following is a list of some of the challenges and issues encountered in adding parametric polymorphism \nto CORBA. Designing a suitable implementation of parametric polymorphism. In order to provide a good \nimplementation of parametric polymorphism within any programming environment, the concepts and issues \nof parametric polymorphism must be well understood. Once the concepts and issues are well understood, \nthe designers must specify an appropriate implementation that is consistent with the programming environment \nto which they are adding parametric polymorphism.  Deciding how this new form of genericity would or \nshould impact the current typing system. One of the goals was to add this programming feature without \nupsetting the current typing system, both within CORBA and within the implementation languages. This \ngoal has been maintained.  Determining the interaction between subtype polymorphism and parametric polymorphism. \nResearchers have written papers and book chapters discussing the interaction between subtype polymorphism \nand parametric polymorphism. It can be one of the more challenging issues in implementing parametric \npolymorphism within a programming environment that supports both forms of genericity. The research outlined \nin the poster models parametric polymorphism implemented in C++, Eiffel and Theta, and borrows ideas \nand concepts from these programming languages to deal with this issue.  The challenge of dealing with \nparametric polymorphism in a distributed programming environment. CORBA has had to tackle all the tough \nissues of handling objects in a distributed programming environment: low-level issues such as data marshalling \nand padding, and high-level issues such as object location and object persistence. But what impact would \nimplementing parametric polymorphism have on those choices and decisions? Would it introduce new choices \nand decisions to supplement or replace the old ones? Or would the current specification remain relatively \nunchanged?  The approach taken has been to produce minimal additions to support parametric polymorphism \nin CORBA, which allow many of the benefits of generic programming without adding too much complexity. \nThen, to expand from there, add more flexibility and features while remaining consistent with the aims \nand goals of CORBA. 2.2 Examples Some examples are provided on the poster. In particular, the poster \nhas examples of programming without generic coding in CORBA, examples of programming with implicit generic \ncoding in CORBA, and examples of programming with parametric polymorphism in CORBA. For additional examples \nsee the paper Adding Parametric Polymorphism to the Common Object Request Broker Architecture (CORBA) \nat http://www.lehigh.edu/~wlb1/research.html. 2.3 Remaining Issues Up to this point in the research \nextensions have been added to the CORBA IDL, extensions have been added to the C++ Language Mapping, \nand modifications have been made to a CORBA implementation for C++. The next task is to implement similar \nextensions in the Java Language Mapping, the C Language Mapping, and possibly the Eiffel Language Mapping. \nOne of the major contributions of this research will be integrating programming languages that support \nparametric polymorphism with programming languages that do not support parametric polymorphism through \nCORBA. This is a unique research opportunity provided by the flexible nature of CORBA, which supports \nmultiple programming languages. Taking advantage of this unique opportunity is part of the reason these \nprogramming language mappings were chosen. An important part of this research that has not yet been completed \nis a critical testing and evaluation of all extensions and modifications. During an intense period of \ntesting and evaluation this research will look at the performance, the choices among alternatives, and \nthe conceptual costs of adding parametric polymorphism to CORBA. Because CORBA is a set of specifications \nwithout an accompanying implementation, less attention is given to performance issues. But it is essential \nto at least talk about performance for those interested in the impact of this research on performance. \nSeveral alternatives were considered at key decision-making periods throughout this research. This research \nwill revisit the consideration of alternatives to evaluate the impact of previous decisions. Finally, \nthis research will look at the conceptual costs of adding parametric polymorphism to CORBA.  3. CONCLUSION \nThis research demonstrates that parametric polymorphism can be added to CORBA with very little cost to \npresent implementations or present usage. This poster illustrates some of the challenges and issues faced \nduring the research work, and provides a window into the effect of adding parametric polymorphism to \nCORBA.  References [1] Agesen, O., S. N. Freund, and J. C. Mitchell, Adding Type Parameterization to \nthe Java Language, Proc. ACM OOPSLA 97, p. 49-65 (October 1997). [2] Cartwright, R., and G. L. Steele \nJr., Compatible Genericity with Run-time Types for the Java Programming Language, Proc. ACM OOPSLA 98, \np. 201-215 (October 1998). [3] Day, M., R. Gruber, B. Liskov, and A. C. Myers, Subtypes vs. Where Clauses: \nConstraining Parametric Polymorphism, Proc. ACM OOPSLA 95, p. 156-168 (October 1995). [4] ISO/ANSI C++ \nDraft Standard, December 1996. [5] Meyers, B., Genericity versus Inheritance, Proc. ACM OOPSLA 86, p. \n(September 1986). [6] Myers, A. C., J. A. Bank, and B. Liskov, Parameterized Types for Java, Proc. ACM \nPOPL 97, p.132-145 (1997). [7] The Object Management Group, Common Object Request Broker: Architecture \nand Specification Revision 2.2, (February 1998). \n\t\t\t", "proc_id": "367845", "abstract": "<p>The research displayed in this poster showcases issues surrounding adding parametric polymorphism to CORBA. The merits of parametric polymorphism are widely published, yet there is no support for the parametric polymorphism paradigm in CORBA. This research should be of special interest to C++ programmers, and other programmers accustomed to generic programming, frustrated by this lack of support.</p>", "authors": [{"name": "Wayne L. Bethea", "author_profile_id": "81100297921", "affiliation": "Lehigh University, Department of Electrical Engineering and Computer Science, 19 Memorial Drive West, Bethlehem, PA", "person_id": "P296877", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.368017", "year": "2000", "article_id": "368017", "conference": "OOPSLA", "title": "Adding parametric polymorphism to the common object request broker architecture (CORBA) (poster session)", "url": "http://dl.acm.org/citation.cfm?id=368017"}