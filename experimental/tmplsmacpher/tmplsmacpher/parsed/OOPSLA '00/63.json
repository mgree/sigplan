{"article_publication_date": "01-01-2000", "fulltext": "\n Deploying Lightweight Processes Jens Coldewey, jens_coldewey@acm.org Jutta Eckstein, jeckstein@acm.org \nPete McBreen, petemcbreen@acm.org Christa Schwanninger, christa.schwanninge@mchp.siemens.de This poster \nwill document the results of the Deploying Lightweight Processes Workshop. It documents the various techniques \nthe workshop participants have found to be useful when deploying lightweight processes. 1. What is a \nlightweight process? In the recent years a process culture has emerged that tries to keep processes as \nlightweight as possible and programming as early as possible. XP and the Crystal series are among the \nyoungest members of this process family. Most lightweight processes substitute interpersonal communication \nand teamwork for the extensive documentation and formal signoffs that are required by heavyweight processes. \n 2. Why lightweight processes? Lightweight processes arise due to the need to speed up delivery, coupled \nwith the desire to follow a disciplined development process. Although large teams might need lots of \nprocess, smaller teams can get away with less process. A key aspect that all lightweight processes have \nto balance is controlling programmers tendencies to code first and ask questions afterwards a Cowboy \nCoder approach that is often incorrectly labeled Hacking . One of the key reasons for adopting a lightweight \nprocess as identified by the position papers is that it is hard to follow a heavyweight process. Managers \nand team leads get overwhelmed by the deliverables required by the process and often have to resort to \nworking late just to make progress on the project. 3. Issues that arise when adopting lightweight processes \nRemembering old times many managers associate early programming with undisciplined hacking and therefore \ndecline lightweight processes without studying the details of the ideas. Project staff on the other hand \nare used to the heavy-weight methodology and - though many of them don't like heavy Permission to make \ndigital or hard copies of all or part of this work for personal or classroom use is granted without fee \nprovided that copies are not made or distributed for profit or commercial advantage and that copies bear \nthis notice and the full citation on the first page. To copy otherwise, to republish, to post on servers \nor to redistribute to lists, requires prior specific permission and/or a fee. OOPSLA 2000 Companion Minneapolis, \nMinnesota (c) Copyright ACM 2000 1-58113-307-3/00/10...$5.00 documentation - often don't know how to \nwork successfully in an environment that works with less (or even without) documents. Many of them are \nin danger of hacking instead of doing a disciplined lightweight process. This is especially difficult, \nbecause in many heavy-weight processes, redundancy and duplication was built in to allow projects to \ngo \"off-process\", but with a light-weight process, going \"off-process\" is risky. 4. Communication skills \nare needed Lightweight processes usually depend on good communication skills of the team members. Techniques, \nsuch as pair programming or collective code ownership, are only feasible if the team members know how \nto communicate effectively. Unfortunately only few organizations select and train their staff regarding \ncommunication skills. It is no longer enough for developers to just do their job , they have to be able \nto communicate with the rest of the team to ensure that the whole project is working. Assuming that producing \na whole pile of process deliverables is sufficient is a mistake that few projects can afford to make. \nAfter all, documents do not communicate, people communicate, and the only way to do this effectively \nis to make the communication two-way. 5. Position paper extracts Issues and questions arising from the \nposition papers will be included as part of the poster. The complete workshop position papers will be \nmade available for discussion. Changing the way people do their daily work is one of the hardest tasks \nin consulting. If you not only want to make single persons change their habits but a complete organization \nyou have to be extremely cautious not to fall in any of the numerous pitfalls. You have to take care \nto pick up the team where it currently is, you have to take care not to loose anyone in the team while \nyou proceed, you have to take care not to loose the trust of the management, and last but not least the \nproject has to deliver good code on time. Being successful here needs experience as well as sensitivity. \nIn my personal experience a smooth change works better than dogmatic preaching. Starting from where the \nteam currently is you have to help them to do the change on their own rather than you doing the change \non them. I use a special workshop series to deploy lightweight processes at clients. The standardization \nof UML and maybe soon of the Unified Software Development Process (USDP) leads to high acceptance of \napproaches employing them both. Often a project would progress faster by using a more lightweight process \nlike eXtreme Programming (XP). But since XP is not widely enough accepted, people are looking for a way \nto introduce XP without mentioning the name of the process at the beginning. Further more - naming is \njust one thing, the other is how to make XP appear as if it would be USDP without being trapped by the \nheavier process. For the managers this was a completely new approach and they wanted to assure the success \nof the project by picking a very strict heavy weight\" process. They had made a big leap forward with \nnew technologies and a defined process, while we still considered their approach rather conservative, \ncompared to what we were used to. They had to deal with new technologies, new developers and fellow managers, \nbecause the project was bigger than the ones they did before. This resulted in some distrust for new, \ntoo revolutionary ideas. The need of management to keep pace with what happened in this big project and \nthe slight distrust made them even more concerned about the process, which couldn t be strict enough. \nThe project leaders were overwhelmed by all the work they had to control their process and therefore \nsoon had no time to care for project parts that seemed to run well. They were content to get the documents \nthe process required on time. Only people who worked with us saw our process and told us that they liked \nit. We managed to follow our own process and convinced the project participants who worked with us that \na software project doesn t need all this controlling to be successful. We tried to convince the project \nleaders by simply showing that our approach works and I hope we were successful in some cases. 6. Tips \nfrom consultants Dealing with these problems over a project's lifetime is the main job of a coach, as \nopposed to a trainer who is specialized in teaching knowledge. Most consultants have a bag of major and \nminor techniques to help their clients to cross the chasm. Potential areas for the poster Training \n Culture Change  The Cost of Change  The role of Documentation in lightweight processes  Staying on-process \n  7. Contraindications for lightweight processes As well as hints and tips for deploying lightweight \nprocesses, the workshop will also be looking at indicators that suggest that lightweight processes are \ninappropriate. 8. Other sources This part will point to other parts of OOPSLA that are related to the \ntopic of deploying lightweight processes, for example the Designing a Light Methodology Tutorial. Links \nto Lightweight processes - SCRUM, XP, EvoFusion, Crystal, Adaptive Software Development  \n\t\t\t", "proc_id": "367845", "abstract": "", "authors": [{"name": "Jens Coldewey", "author_profile_id": "81100395230", "affiliation": "", "person_id": "PP39040874", "email_address": "", "orcid_id": ""}, {"name": "Jutta Eckstein", "author_profile_id": "81100326926", "affiliation": "", "person_id": "PP31037333", "email_address": "", "orcid_id": ""}, {"name": "Pete McBreen", "author_profile_id": "81100548818", "affiliation": "", "person_id": "P223471", "email_address": "", "orcid_id": ""}, {"name": "Christa Schwanninger", "author_profile_id": "81100491219", "affiliation": "", "person_id": "PP37028243", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.368034", "year": "2000", "article_id": "368034", "conference": "OOPSLA", "title": "Deploying lightweight processes (poster session)", "url": "http://dl.acm.org/citation.cfm?id=368034"}