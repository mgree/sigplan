{"article_publication_date": "01-01-2000", "fulltext": "\n Beyond the Hype: Sequel to the Trial of the Gang of Four Moderator Neil Harrison, Avaya Communication \n Panelists Frank Buschmann, Siemens James Coplien, Lucent Technologies David Ungar, Sun Microsystems \nJohn Vlissides, IBM You all saw it last year. Behind an all-star cast of witnesses, attorneys, and judiciary, \nthe notorious Gang of Four was convicted of crimes against computer science. For many, it was the entertainment \nhighlight of OOPSLA 1999. A few considered it the technical highlight as well. But many questions remain \nunanswered. Patterns burst on the software scene in 1994 and have enjoyed wide popularity ever since. \nBut are they all they re cracked up to be? It s a question that lurked beneath the frivolity of last \nyear s kangaroo court. This year, we want to come to grips with it. Here s food for thought: .Patterns \npromise to boost productivity and enhance the expertise of their users. Have they delivered? Is this \nexpectation even reasonable? What should the goal of patterns be? .What are patterns? Many believe that \npatterns should capture only proven solutions, but are patterns anything more than old ideas in new packages? \n.Patterns owe much of their popularity to Design Patterns-the so-called \"Gang of Four\" book. What service-or \ndisservice-has this book done to the software community? .Where will patterns go from here? Where should \nthey go? Panelists (in reverse alphabetical order):  John Vlissides I ve never been comfortable with \nthe hype surrounding patterns. I ve tried to be pragmatic and incremental-\"pragmatic\" in that I believe \npatterns are only as good as the expertise they impart. It s counterproductive to expect patterns to \noffer much beyond what experts already know (but rarely share). I m an incrementalist in that I favor \nslow, steady improvement in software practice over attempting huge leaps. There are existence proofs \nof the latter, but they are few and far between. Incremental Permission to make digital or hard copies \nof all or part of this work for personal or classroom use is granted without fee provided that copies \nare not made or distributed for profit or commercial advantage and that copies bear this notice and the \nfull citation on the first page. To copy otherwise, to republish, or post on servers or to redistribute \nto lists, requires prior specific permission and /or a fee. OOPSLA 2000 Companion Minneapolis, Minnesota \nimprovement is a lot more likely to yield revolutionary benefits in the long run than the pursuit of \na holy grail. Pattern languages are a huge leap, and not many have succeeded. Does that mean we abandon \nthem? Not at all. I merely suggest there are modest precursors to pattern languages that are less apt \nto disappoint, more likely to yield benefits sooner, and ultimately more likely to metamorphose into \ntruly effective pattern languages. Writing up synergies among patterns in pattern form-so- called \"compound\" \npatterns-is an incremental approach I ve used with some success. As for meta-questions of where patterns \nwill go, what they should do, et cetera, I say let s not worry about it. Self- consciousness can paralyze \nyou. Let s focus on writing good patterns and getting them into people s hands. The rest will take care \nof itself. John Vlissides is a research staff member at IBM s T.J. Watson Research Center in Hawthorne, \nNY. He has practiced and preached object technology for over a decade as a designer, implementer, researcher, \nlecturer, author, and consultant. David Ungar Please do not attend this panel. Patterns are not worth \ndiscussing. It doesn t matter if you choose to write in patterns, or not, or if you choose to read a \nbook of patterns or of some other form. The debate about patterns reminds me of the debate over syntax \nin the 70 s. Is \"if then fi\" better or is \"if then begin end\" better? Who cares? What should concern \nyou is the quality of the material in the patterns. Does each pattern go into its pros and cons in depth? \nDoes it explain what it would be like to program in a language that embedded the pattern into the very \nfabric of its computational world? What values does the material promulgate? Some patterns aid reuse, \nothers aid clarity. How much of one would you sacrifice for the other? Does the author come clean about \nhis biases? Does the material put all competing techniques in perspective, or does it skew the presentation \nin favor of one? Many well-known patterns fail to meet these standards, and many well-known non-patterns \nsucceed quite well. (Can you say: \"Knuth?\") If you can t find anything else to do in Minneapolis and \nyou can t get a ride to St. Paul, then by all means feel free to drop in. Just don t count on any substantive \ndebate. Each of the other three panelists will likely explain how much he respects the work of the other \ntwo, and why his own sort of pattern has proven so effective. Unfortunately, the person &#38;#169; Copyright \nACM 2000 1-58113-307-3/00/10?$5.00 who (according to my own interests and tastes) has best used patterns \nto contribute to our field is not even on this panel. Maybe he will show up in the audience and I ll \nget to publicly embarrass him. On the other hand, I m not sure that any amount of praise could embarrass \nthis guy. I suppose that if you do come to the panel you may get to find out whom I am talking about. \nDr. David Ungar works on architectural forms for virtual machines, object-oriented programming languages, \nand environments as a Distinguished Engineer at Sun Microsystems. He is most thankful for the chance \nto have advised his Stanford students, to have worked with the members of the Self project, a programming \nlanguage that built in 80% of GoF s object creation patterns by simplifying Smalltalk, and finally to \nhave contributed to the SPARC port os Sun s Java HotSpot.  James Coplien The OOPSLA 1999 moot court \nfailed to break beyond comic theatre to the more serious issues of the industry setbacks caused by Design \nPatterns. We could grapple with that issue, analyze the cost of these setbacks and allocate guilt and \nall sides could leave equally unhappy. Instead, it might be more useful to take this opportunity to look \nat broader phenomena in computer science and software engineering of which the Design Pattern phenomenon \nis one small component. I want to focus on two failures of software engineering of which the pattern \nexperience is exemplary: failure to address system issues, and failure to dutifully explore prior art. \nI will ignore another important set of issues, which is whether readers of the Design Patterns work understand \nit in terms of the authors own intent; for example, the fact that the OMT diagrams are not the pattern, \nbut just one example of an implementation of the pattern [Gamma1999]. Even a cursory reading of any of \nAlexander s work makes it clear that he s addressing system issues. Architecture is about system issues, \nand coining the term \"micro- architectures\" doesn t legitimize the deviation any more than \"police action\" \nlegitimizes war or \"right-sizing\" legitimizes firings at will. In fact, the articulation of individual \npatterns as individual constructs, void of any semantics of system integration, completely misses the \npoint. The point aside that the GOF form is a mere shadow of the Alexanderian form, the form utterly \nfails to achieve the first goal that Alexander held for the form: \"There are two essential purposes behind \nthis format. First, to present each pattern connected to other patterns, so that you grasp the collection \nof all 253 patterns as a whole, as a language? Second, to present the problem and solution of each pattern \nin such a way that you can judge it for yourself.\" The pattern community is making what I believe to \nbe a pathetic attempt to recover from this failure with concepts called \"compound patterns,\" which simply \nweep for those semantics of pattern languages that so ably rise to the occasion. However, the same is \ntrue of object orientation, whose facilities for reuse are too often rooted in simple inheritance models, \nor for components, which almost often ignore the global relationships domain knowledge that is key to \nsystem understanding. As regards prior art, the Design Patterns book uses the word pattern freely and \nwithout much grounding in the broad foundations in the sciences. The term and its associated semantics \nhave long been used in the sciences: in mathematics [Grenander1996], in classic physics [Mackay1986], \nand particle physics [Mannheim1986]. But again, patterns are not alone in this regard. Objects once had \nnoble origins in type theory and retract theory, roots that were of practical value in programming language \nand environment design. I have tried to recover similarly primitive roots in my recent work on multi-paradigm \ndesign (work which, in fact, sheds substantial doubt about the pattern-ness of many of the GOF patterns) \n[Coplien2000]. But modern efforts such as UML have all but obliterated these original roots, leaving \nits users confused about the semantics of the language, and have hopelessly confused the terminology. \nThese are interesting faults for a community whose work is supposedly providing the formal basis for \nthousands of system designs. So the sins of the Design Pattern community are many. There is other pattern \nwork that I believe is even less sound for its academic aspirations, and other work (such as the work \nat the NRC in Ottawa) which is more sound for its empirical foundations. But these errors are small in \nlight of the broader phenomenon that cuts across all software disciplines. I believe that for the foreseeable \nfuture we ll continue to strive to convert lead into gold. That doesn t mean that we won t get things \nthat don t glitter. But it will rarely be gold, or anything close to what we think it is, or what we \ncall it. [Coplien2000] Coplien, J. Multi-Paradigm Design. Ph.D. Thesis, Vrije Universiteit Brussel, May \n2000. [Gamma1999] Personal interview with Erich Gamma, 10 June, 1999. [Grenander1996] Grenander, U. Elements \nof Pattern Theory. Baltimore, Maryland: Johns Hopkins University Press, &#38;#169;1996. [Mackay1986] \nMackay, A. L. Generalized Crystallography. In Computers &#38; Mathematics With Applications, 12B(1/2). \nExeter, UK: Pergamon Press, 1986. [Mannheim86] Mannheim, P. D. Symmetry and Spontaneously Broken Symmetry \nin the Physics of Elementary Particles. In Computers and Mathematics with Applications, 12B(1/2). Exeter, \nUK: Pergamon Press, 1986, 169-183. Jim Coplien is a Distinguished Member of Technical Staff of the Software \nProduction Research Department at Bell Laboratories. He has conducted pattern research programs at Bell \nLabs over the past seven years and is currently conducting research into pattern foundations. He is the \nauthor or editor of several books on patterns and software design. Frank Buschmann Patterns have taken \nthe software community by storm. They are a hot topic in almost every larger software development project, \nand at many conferences, not just OOPSLA. Experience shows that using patterns in software development \ncan succeed, and that it can fail. The reasons why patterns can succeed or fail are: From the perspective \nof using patterns success/failure depends on understanding the concept, the right expectations of patterns, \nawareness of whether patterns are applicable at all, and if so, which patterns are applicable, and last \nbut not least appropriate skills in implementing them.  From the perspective of the pattern concept \nand concrete patterns, success/failure is dependent on whether or not the patterns used in the project \nare correctly and sufficiently described, and whether the particular description of the pattern concept \nthat motivated a team to use patterns is correct and sufficient, raising the right expectations, etc. \n This summary is very abstract, so let us start discussing what I think patterns are and are not. To \nme, a pattern is a known and proven software concept, consisting of roles and behavior, accompanied by \nguidelines to create this concept, as well as its relationships to other concepts. I use patterns for \nbuilding software by adapting and applying the patterns underlying idea to the problems arising in the \ndevelopment of a particular system. Similarly I can rephrase the above text so that it fits for the structure \nand behavior of organizations or the structure and workflow of certain application domains. That s it! \nNot more, and not less! I started working on patterns because I wanted to remember what I learned on \nvarious projects, as problem/solution pairs. Yet I didn t always remember all the details of the solution, \nsuch as its effects or its rationale. So I started documenting them. I have done this for 8 years, and \nit has helped me a lot! I did not always succeed, but I succeeded many more times than I failed. On the \nother hand, if I see patterns as a panacea, then I will likely fail. Don t we remember the same wrong \narguments when talking about object technology, just a few years ago? And don t we know that people who \nbelieved in these arguments failed using OO? Didn t the press tear objects to shreds? Now that discussion \non objects has calmed down they can do their real job. And they do it well. I wish patterns were that \nfar. So keep your expectations realistic! Think of patterns as a \"reification\" of known and proven knowledge, \nincluding relationships between different pieces of this knowledge. Patterns won t boost your software \ndevelopment productivity by a factor of X. Yet they help you to not lose your head when confronted with \nmany implementation details of a given problem, and allow you access to expert knowledge gained over \na longer period of time. Very importantly, do not try to solve everything with patterns, in particular \nnew problems. When innovation is needed sticking to patterns may hinder you. Patterns are more than a \nsolution to a problem in a context. They are not blueprints, reusable entities, or fixed designs with \nattached reference implementations. They do not relieve you of the responsibility of solving all complex \nsoftware analysis, design, implementation, validation, and optimization problems. Ultimately there is \nno substitute for human creativity, experience, discipline, diligence, and judgment. Patterns won t do \nthe job for you, but they can help you do your job. Frank Buschmann is Principal Senior Software Engineer \nat Siemens Corporate Technology in Munich, Germany. His research interests include object technology, \nsoftware architecture, frameworks, and patterns. He has published widely in all these areas, most visibly \nas co-author of volumes one and two of \"Pattern-Oriented Software Architecture\".  \n\t\t\t", "proc_id": "367845", "abstract": "", "authors": [{"name": "Neil Harrison", "author_profile_id": "81100009933", "affiliation": "Avaya Communication", "person_id": "PP31080888", "email_address": "", "orcid_id": ""}, {"name": "Frank Buschmann", "author_profile_id": "81100407462", "affiliation": "Siemens", "person_id": "P85749", "email_address": "", "orcid_id": ""}, {"name": "James Coplien", "author_profile_id": "81100241805", "affiliation": "Lucent Technologies", "person_id": "PP14093301", "email_address": "", "orcid_id": ""}, {"name": "David Ungar", "author_profile_id": "81100365263", "affiliation": "Sun Microsystems", "person_id": "P64183", "email_address": "", "orcid_id": ""}, {"name": "John Vlissides", "author_profile_id": "81100247410", "affiliation": "IBM", "person_id": "P146418", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367898", "year": "2000", "article_id": "367898", "conference": "OOPSLA", "title": "Beyond the hype (panel session): sequel to the trial of the gang of four", "url": "http://dl.acm.org/citation.cfm?id=367898"}