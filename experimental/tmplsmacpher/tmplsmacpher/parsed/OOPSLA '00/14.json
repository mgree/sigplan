{"article_publication_date": "01-01-2000", "fulltext": "\n A Decade of Modeling Financial Vehicles William F. Frank Anil Karunaratne Chief Scientist, Financial \nSystems Architects Chief Architect, Foreign Exchange, Citibank, NA wff@fsarch.com anil.karunaratne@citicorp.com \n Abstract While building nine object-oriented financial systems since 1989, we evolved techniques for \nmodeling financial vehicles (bonds, contracts, real estate, racehorses). We specify each particular financial \nvehicle and vehicle type by combining objects that model the fundamental ideas behind financial vehicles. \nThese techniques enable installed systems to accommodate new kinds of financial vehicles. Many normal \nsoftware design techniques proved ineffective. Keywords financial instrument, domain, type, inheritance, \ndimension, role 1. OVERVIEW 1.1 Projects Electronic Joint Venture Bond Evaluator 1989; Citibank Enterprise \nBusiness Model 1990 93, Enterprise Data Model and Forex Sales Tracking 1995 98, Forex Operational Data \nStore 1998-99; Fidelity Enterprise Architecture and TradeOrder Management 1993 94, CAD Portfolio Recordkeeper \n1998, Wealth Management Technologies Position Consolidator 2000. 1.2 Problem Financial vehicles are \nproducts of the mind; and business people play with them in astounding ways. They redefine and reorganize \nthem over time, across organization units, and across geography. And design new, more complicated ones. \nFor example, about 25 years ago, an investment bank cut the interest coupons off a bond, then sold the \ncoupons and the bonds separately, defining a new product called a \"strip\". In a strip, the coupons and \nthe bonds, which were before very different types of things, are now of the very same type. Soon, many \ninvestment banks were doing this. A new kind of instrument is invented about once a week. Most do not \nsurvive for a year. People support financial vehicles with Excel or Access (one operation we looked at \nused more than 200 such applications ) and kludge their main systems. 1.3 Conclusions and Approach Financial \nvehicles consist of reusable parts. The parts can be classified hierarchically, but not the vehicles \nthemselves. We found the parts by examining more and more of the perspectives of different parties interested \nin financial vehicles. Accounting for all the classifications used by business people is a separate problem \nfrom constructing useful vehicle software classes. Permission to make digital or hard copies of all or \npart of this work for personal or classroom use is granted without fee provided that copies are not made \nor distributed for profit or commercial advantage and that copies bear this notice and the full citation \non the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires \nprior specific permission and/or a fee OOPSLA 2000 Companion Minneapolis, Minnesota &#38;#169; Copyright \nACM 2000 1-58113-307-3/00/10...$5.00  2. DEFINING VEHICLES A financial vehicle is something people use \nas a repository of monetary value. A financial instrument is a special kind of contract used as a financial \nvehicle. A fungible vehicle, such as IBM stock or No.1 wheat, exists in units, all of which are the same. \nSecurities are fungible instruments. An instance of a security, such as IBM stock, models a considerably \nabstract entity - something that acts more like a metric than a thing, as in 100 shares of IBM common \nstock. Our goal: an elegant structure of type definitions that maps effectively to classes. 2.1 Using \nInheritance and Composites Vehicles can be typed so that instances vary only in the values of some of \ntheir attributes. For example, the 2030 Treasury zero instance is of the 30 yr Treasury zero type. The \n2030 is only unique in its maturity date. We started with the idea that each such type of instrument \nwas a different software class. We ran into problems when we tried to construct a class hierarchy. There \nare corporate bonds, zero coupon bonds, high yield bonds. But a typical leaf node is corporate high yield \nzero coupon. In fact, there is almost a complete multiple inheritance relationship between such abstract \nclasses and the leaf classes of bonds. An ugly combinatorial explosion. It was simpler to build up bonds \nfrom these abstract types, not specialize from them. We modeled each very general instrument type as \na composite of different kinds of terms for example, maturity terms (when, and what happens when, the \nbond is due to be paid). The lowest level security class was simply bond, with another set of classes: \nterms, such as maturity terms and interest terms. Each instance of bond contained a different selection \nof term instances. This model organized vehicles according a single discriminator: the ownership rights \nassociated with the vehicle. For example, a bond is a debt instrument, since it reflects a loan to the \nbond issuer. Accordingly, the kinds of terms that can apply to any particular bond are those that are \nrelevant to a debt, such as maturity and interest, but not voting. So, a zero-coupon bond is not a special \nclass, it is simply a bond containing no interest terms. Composition of terms is the key to the model \ns flexibility: new ideas are accommodated at run time by selecting different combinations of terms. \n2.2 Using Multiple Subtype Sets This hierarchy of vehicles according to ownership rights reflects what \nis important to an investor-someone wishing to own the vehicle. But as soon as we needed to create a \nmodel that was to be shared between investment managers (representing investors), traders, and custodians, \nwe found that this single discriminator was not adequate. For a trader, the most important thing about \na vehicle is its degree of marketability, from fungible (bonds and gold bars), to reversible with compensating \ntransactions (futures contracts), to unique (real estate), to unsellable (some loans). So, for an investor, \na bond bought and a loan made are very similar, while for a trader, they are very different. And for \na custodian, whose job is to establish and maintain possession of whatever the investor buys, the most \nimportant thing about a vehicle is whether it is physically held by the custodian, immobilized in a depository, \nor exists only as a book entry. Each of these different constituencies deals with different aspects of \nfinancial vehicles, and treats the features related to these aspects as the immutable differences between \nthe vehicles. To reflect this, we assigned each perspective on vehicles its own discriminator. Hence, \nwe subtyped financial vehicles simultaneously in multiple ways. The root of this hierarchy we called \nan investment vehicle (note the continuing investor bias). We subtyped using the ownership rights discriminator \ninto tangibles (e.g., railroad cars), intellectual property (patents), franchises (seats on a stock exchange), \nand financial instruments; at the same time, using the marketability discriminator, into fungibles, reversibles, \nuniques, and enchatteled. For financial instruments, the next rights level yielded debt, equity, derivatives, \ncompounds (e.g., convertible bonds), and parts (e.g., the interest on a mortgage pool). No more bonds. \nA bond is just a fungible debt with special restrictions on its terms. We left the mapping between these \nsubtype sets and the software classes to the programmers (a big mistake partly rectified by then doing \nthe mapping ourselves). 2.3 Using Multiple Roles What behaviors might all investment vehicles share? \nWe proposed valuation . But, like everything else we have examined, the valuation method depends on your \nperspective: an investor holding for profit (the present value of risk-adjusted return), a trader buying \nand selling (what people are paying), an issuer raising money (how much can be/has been raised with the \nvehicle). The problem is that the very same thing (for example, a bond) plays different roles. It is \nan investment vehicle a mechanism for using money to the bondholder, but a funding vehicle a mechanism \nfor raising money to the bond issuer. The behaviors exhibited in each of these roles are very indirectly \nconnected with the behaviors of the underlying thing. So, we modeled each of these financial role types \nas a class. An object playing the role (for example, a railroad car being used as an investment vehicle) \nis an instance of this class. This model differs from the investor s intuitive model.\u00b9 For the investor, \nthere is only one thing, a freight car, which also is, for him, an investment vehicle. In our model, \nthere are two software objects representing that one thing: aFreightCar itself, which has railroading \nbehaviors, and anInvestmentVehicle (based on aFreightCar), which only has investment vehicle behaviors. \nWe identified three distinct financial role types, and no common behaviors for all three. Still, the \nbehaviors of a thing in these different roles must be consistent. FinancialVehicle manages this consistency, \nmaking it a composite of the financial roles (funding, trading, investing) that the thing may be playing \nfor different constituencies.  3. CLASSIFYING VEHICLES This structure still does not account for the \nfull richness of the types used by business people, or their dynamism. Our goals: to create 1) all the \nadditional type definitions businesses use 2) new type definitions at run-time 3) new instances from \nthese run-time defined types [we have not realized this goal]. 3.1 Supporting Business Classifications \nBusiness people combine and recombine the fundamental types we have defined. For varying needs, they \nwill use a number of alternative and complex classifications, based on values of specific attributes, \nor values of attributes of related objects. A bond may be a long bond , if it matures far enough in the \nfuture, and also an energy bond if it issued by Texaco. These types also determine the calculations and \nrules that apply to the bonds for example, you calculate accrued interest differently for government \nbonds and corporate bonds. But these business\u00addefined types make very poor software classes. We treat \neach such type as a singleton classifier object, which tells you whether or not a vehicle is of the specified \ntype. And each such classifier, in turn, belongs to a classification scheme, composed from a set of consistent \nclassifiers. 3.2 Supporting Run-Time Classifications New types are invented for existing vehicles. For \nexample, bonds issued in the US for companies domiciled elsewhere are specially taxed, so for investment \nmanagers, trying to maximize the return on their client s portfolios, it is important to distinguish \nthis type of bond, the \"Yankee\". The Yankee, in turn, may be taxed differently depending on where the \nobligor is domiciled, giving subtypes of Yankees such as \"Maple Leafs\", \"Sushis\" and \"Marimbas\". Inside \na classifier object is a method that uses a number of selection criteria. To make new classifiers at \nrun time, then, you need to construct selection criteria. And this method must refer to attributes and \nrelationships. For instance, to define a Sushi at coding time, we could invoke to the method tellIssuer, \nwhich would return aLegalEntity, and then invoke the method tellDomicile on that object, and finally \ndetermine that the result was the object unitedStates. But at run time, you need to somehow dynamically \nattach sushi to the country of domicile of the issuing legal entity. We did this by modeling these attributes \nand relationships as singleton objects in their own right. For example, issuer would be an object, with \nthe method issuer.of, which returns a legal entity when supplied a financial instrument. This allows \nus to construct functions, such as issuer.of(o), (where o is a variable ranging over objects) and then \nconstruct Boolean combinations of these, to finally construct the selection criterion for the classifier. \nFor effective implementation, we have relied on object-relational mapping tools to create objects that \nmanipulate table and column names, rather than manipulating objects and attributes. 3.3 Supporting Dynamic \nObject Templates New instruments, selected by combining unique terms and conditions, give rise to new \nclassifiers, and copycat instruments instantiated from these classifiers. For example, in 1998, a financial \nadvisor to David Bowie issued a bond collateralized by his future royalty stream. This gave rise to a \nnew industry, which issues Bowie bonds for artists, and suggests the need to create new instances that \nconform to a classifier. We call a classifier that can be used to instantiate other objects a template \n. Here, we search for a good solution. This solution may focus on supporting the vehicle designer s \ninstantiation process, rather than on more static modeling. \u00b9 We have used three types of models: intuitive \nmodels, structured these into semantic domain models, and mapped those to software models.   \n\t\t\t", "proc_id": "367845", "abstract": "<p>While building nine object-oriented financial systems since 1989, we evolved techniques for modeling &#8220;financial vehicles&#8221; (bonds, contracts, real estate, racehorses). We specify each particular financial vehicle and vehicle type by <i>combining</i> objects that model the fundamental ideas <i>behind</i> financial vehicles. These techniques enable installed systems to accommodate new kinds of financial vehicles. Many normal software design techniques proved ineffective.</p>", "authors": [{"name": "William F. Frank", "author_profile_id": "81100370019", "affiliation": "Financial Systems Architects", "person_id": "PP14131473", "email_address": "", "orcid_id": ""}, {"name": "Anil Karunaratne", "author_profile_id": "81100248211", "affiliation": "Foreign Exchange, Citibank, NA", "person_id": "P19113", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/367845.367914", "year": "2000", "article_id": "367914", "conference": "OOPSLA", "title": "A decade of modeling financial vehicles", "url": "http://dl.acm.org/citation.cfm?id=367914"}