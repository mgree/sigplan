{"article_publication_date": "01-25-1995", "fulltext": "\n Structural Decidable Extensions of Bounded Quantification Sergei G. Vorobyov * Max-Planck-Institut fur \nInformatik Im Stadtwald, D-66123, Saarbriicken, Germany (e-mail: svtlmpi-sb.mpg.de) Abstract We show \nhow the subtype relation of the well-known system F<, the second-order polymorphic A-calculus with bounded \nu~lversal type quantification and subtyping, due to Cardelli, Wegner, Bruce, Longo, Curien, Ghelli [6, \n2, 8], proved un\u00ad decidable by Pierce [12], can be interpreted in the (weak) monadic second-order theory \nof one (Buchi), two (Rabin), several, or infinitely many successor functions [13, 14]. These (W) SnS-interpretations \nshow that the undecidable system F< possesses consistent decidable extensions, i.e., F< is not essentially \nundecidable (Tarski et. al., 1949, [17]). We demonstrate an infinite class of structural decidable extensions \nof F<, which combine traditional subtype in\u00adference rules with the above (W) SnS-interpretations. All \nthese extensions, which we call systems F~ti, are still more powerful than F<, but less coarse than th~ \ndirect (W) SnS\u00adinterpretations: F< C F~&#38; C (lV)SnS-interpretations The main distinctive features \nof the systems F~fi are: 1) decidabilit y, 2) closure w.r.t. transitivity; 37 structured\u00adness, e.g., \nthey never subtype a functional type to a universal one or vice versa, 4) they all contain the powerful \nrule for subtyping boundedly quantified types: Key words: second-order polymorphic typed A-calculus, \nsubtyping, system F<, bounded universal type quantifica\u00ad tion, parametric and ~nheritance polymorphisms, \n(un-)deci\u00ad dability, essential undecidability, (weak) monadic second\u00ad order theory of several successor \nfunctions (W)SnS. 1 Introduction The advantages and usefulness of strict typing disciplines in programming \nwith static typing and rigid compile-time This work was done while the author was at the Centre de Recherche \nen Informatique de Nancy, France Permission to copy without fee all or part of this material is granted \nprovided that the copies are not made or distributed for direct commercial advantage, the ACM copyright \nnotice and the title of the publication and its date appear, and notice is given that copyin is by permission \nof the Association of Computing Machinery. 9 o copy otherwke, or to republish, requires a fee and/or \nspecific permission. POPL 951/95 San Francisco CA USA @ 1995 ACM 0-89791 -692-1/95/0001 ....$3.50 type \ncontrol have been widely accepted, studied, and advo\u00adcated in Software Engineering [10, 6, 4, 11] since \ncreation of Simula-67, Algol-68, Pascal, Clu, Alphard, Modula, ML, Ada, etc. Typeful programming should \nbe based on power\u00adful and, preferably, decidable type systems. The system F< is the polymorphic second-order \ntyped A\u00adcalculus with =ubtyping, combining the universal (or para\u00admetric) polymorphism of Girard s system \nF with Cardelli s calculus of subtyping (inheritance polymorphism [3]). Intro\u00adduced in [6], later improved, \nsimplified, and investigated by many researchers [2, 1, 8, 12, 7, 5], the system F< serves a core calculus \nof type systems with subtyping and =model to represent polymorphic and object-oriented features in pro\u00adgramming \nlanguages. F< is an extension of F with subtyping. In addition to the usual functional and universal \ntype formation of F, the sys\u00adtem F< allows one to form boundedly quantified types: Va < &#38;ound. body, \nSuch type is a function on types trans\u00adfor~lng any subtype u of a bound into a type body[afa]. As F< \nalso contains the largest type T, the unbounded type quantification of F is included as a particular \ncase: VcY<T. a. The system F< consists of two components. The first one ax\u00adiomatizes the=ubtyping relation \non types r b u ~ ~. The second generates the typing relation 17 E t : a.Both com\u00adponents interact by \nmeans of the rules as (Subsumption), allowing one to derive the judgment 17 1-t:T from rt-t :uand I t-u~r. \nIn [12] Pierce proved that already the subtyping component of F< is undecidable, and hence the typing \nrelation in F< is un-decidable too. Using Ghelli s example of divergence =f F<-subtyping algorithm (mainly \ndue to the subtle interac\u00adti~n between the quantifier rule (All) above and transitiv\u00adity), he succeeded \nto encode instances of the termination problem into F<-subtyping judgments. Given an undecidable theory \nT one usually tries to weaken it to get a decidable subtheory Tdec ~ T. Accordingly, at\u00adtempts were made \nto restrict F< to get decidable subsys\u00adtems. In [7] the general quantifier rule (All) above was re\u00adplaced \nby its weaker version:  r+7-1<~1 r, ff<Tt-u2 <r (All-Top) rk (va<al. cJ2)< (VCI<TI.T2) Subtyping in \nthe resulting subsystem F< c F< is de\u00adcidable, In [9] a decidable subsystem of P< is obt~lned by restricting \nbounds in bounded quantification to be T-free (with some relaxations to allow unbounded quantification). \nAn extensive discussion of different other weakening of the powerful rule (All) is contained in [7]. \n For an undecidable theory T there sometimes exists another possibility, to reinjorce it (instead of \nweakening) in order to obtain a consistent decidable extension T&#38;C ~ T. This works only if T is not \nessentially undecidable, i.e., possesses consistent decidable extensions (A. Tarski, 1949, [17]). Curiously \nenough, F< appears to be undecidable, but not essentially [18], with infinitely many nontrivial consistent \ndecidable extensions. This reopens the possibility for ob\u00adtaining good decidable systems relative to \nF< without sacri\u00adficing the general quantifier rule (AU) or somehow restricting the form of bounds in \nbounded quantification. The first infinite class of such extensions was introduced in [18], where it \nwas shown that there exist infinitely many ways to translate F <-subtyping judgments into formulas of \nRabin s S2S. Each such translation maps the ~~-axioms to valid S2S-formulas, and each F<-inference rule \npreserves validity with respect to any S2S-t~anslation. It follows that everything provable in F< is \nvalid in any S2S-interpretation. Consequently, F< is no~essentially undecidable; any S2S\u00adtranslation \nis a consistent decidable extension of F <. S2S\u00adinterpret ations generalize for recursive t ypes [19]. \nPrecautions, however, should be taken concerning consis\u00adtency. For theories based on predicate calculus \nconsistent means do not prove everything . For theories, which are not based on predicate calculus, like \nF<, consistent might mean do not subtype any pair of types -(weak consistency) or do not subtype too \nmany types (strong consistency). S2S-interpretations appeared to be weakly, but not strongly consistent. \nThey are coarse in the sense that they do not make fine distinction between differently structured types, \nand subtype too many of them, which is undesirable in strict typing disciplines. In this paper we remedy \nthis drawback by combining our S2S-interpretations with the traditional F<\u00adlike subtype inference rules. \nThese rules guarantee the so\u00adcalled strict structural subtyping , where the subtype re\u00adlation is defined \nby co(ntra)variant induction on type struc\u00adture. Thk prevents us from subtyping differently structured \ntypes, e.g., universal and functional ones. The main idea of our systems F~&#38; is that they disable \nthe infinite alternations of applicat~ons of the rule (AU) and the transitivity rule. This alternation \nis the source of non\u00adtermination and undecidability of F<, [12]. Instead, we prune proof tree branches, \nwhich may lead to infinite al\u00adternations, and decide the remaining judgments by inter\u00adpreting them in \n(W)SnS. Of course, as F< is undecidable, and F~&#38; are decidable extensions of F< ,-sometimes they \n accept-F< -unprovable judgments. But t~is is a reasonable price for ittaining decidability. The scenario \nof the presentation is the following. Section 2 recalls the system F<. (Un) decidabilit y results concerning \nF< are listed in Sec~ion 3. Section 4 introduces systems F~&#38;. Section 5 describes the decision procedure. \nIn Sec\u00adti;n 6 we show infinitely many ways to interpret the sub\u00adtype relation in any (W)SnS. Section \n7 discusses the con\u00adsist ency of F~&#38;. In Section 8 we explain the rule inver\u00adsion principl< the main \ntool of our proofs of the inclu\u00adsion F< c F~@ and the transitivity of F~fi. In Sec\u00adtions 9 and 10 w= \nshow that the inversion prin~ple does not hold for SnS-interpretations, but holds for systems F~fi. In \nSections 11, 12, and 13 we prove the inclusions F<-c F~&#38; c ( W) SnS-interpretations and the transitivity \nof all F~fi. Section 14 discusses further improvements of F~&#38;. In-Section 15 we sketch problems for \nfuture research. ~p\u00adpendices A and B contain the reference material on second\u00adorder monadic theories \nand on Curien-Ghelli s algorithmic variant of F<. The proofs are collected in Appendix C.  In this paper \nwe deal only with the subtyping relation. Com\u00adbinations with typing and related problems, like subject \nre\u00adduct ion [20], typing proof normalization, the least type prop\u00aderty, strong normalization are in the \ncourse of study and will be considered elsewhere. Added in Proof. In [21] we continued the study of decid\u00adable \nextensions of the F< subtyping relation and developed the general theory of con~erging hierarchies of \nstructural de\u00adcidable extensions of the F<-subtyping. The systems F~ti presented in this paper for m \njust the first level of the_hi\u00aderarchies from [21]. In [22] we combined these Klerarchles with the standard \nF< term typing rules and obtained an infinite family of the ~xtensions of the polymorphic system Fc where \nboth subtyping and typing are decidable. 2 System F< For complete and exact reference see, e.g., [8, \n12, 5]. We just briefly remind the essential definitions, retaining the notation of [12]. Definition \n2.1 (Types) The set oj F< -types is defined by the jollowing abstract grammar: TSdfVITIT+ TIVVST.~ whe? \ne: 1. V is a set of type variables denoted by Greek letters cr, P7 -Y; 2. T is the largest type majorazing \nany other type, u ~ T; 3. + is the functional type constructor, u + r is the type of functions with \ndomain of type u and codomain of type r; 4. VII< p.r is a polymwphic boundedly quantified type, i.e., \na function assigning to each subtype u of p, u ~ p, the type T[u/cY] obtained from r by substituting \nu in\u00adstead oj free occurrences of cr (with usual non-clashing preconditions on free variables). In Va \n~ p. T the bound p does not contain Q free.  The ,letters r. u. o from the end of the Greek alphabet \nde\u00adnote arbitrary (va ri;b!e OT compound) F< -types; V/3.r ab\u00adbreviates V,6~ T.T; FV(U) denotes the s~t \nof jree variables in u. Definition 2.2 (Contexts) An F2 -context is an oniered sequence crl ~ al, . . \n. . CYn ~ un of s-relations between type variables and F< -types such that: 1. all CY, are diffeTent \ntype variables, and 2. for each i, FV(a, ) ~ {al,... ,~t-l}. Contexts are denoted by capital Greek r, \nDom(I ) is the set of type variables appearing to the left of ~ in r. We write I (a) = u if I contains \na < u and call u abound of a in r. We define I * (cr) as I (a) ~f the latter is not a variab~e, and \nas r (r(a)) otherwise. 0 Definition 2.3 (Subtyping Judgments) An F< -subt yping judgment is a figure \nof the form:  rku <r, where FV(U) u FV(~) G Dorn(r). !3 The intuitive semantics of a judgment r 1-u \n~, 7 is: a is a subtype of ~ provided that all a, mentioned m r are subtypes of their respective bounds \na,. Definition 2.4 (Subtyping Rules) The FS -swbtyping re\u00adlation is generated by the system of 3 azioms \nand 3 inference rules, shown in Figure 1. r~r<T (Refl) rt-T<T (Top) r~~<r(~) (TVar) rkT1<72rt-T2<T3 (Trans) \n(Arrow) (All) Figure 1: F< subtyping axioms and inference rules Let kp< denote the least three-place \nrelation I? > u ~ T containing all particular cases of the F< -axioms and closed with respect to the \nF< -inference rules. ~ometimes, by abus\u00ading notation, we deno te by F< the set of subtyping judgments \nprovable in F<. 0 Definition 2.5 (Variants of F<) 1) Original Fun [6] re\u00ad places the (All) rule by the \nweaker rule (All-Fun) (Fig\u00ad ure 2). 2) System F: [7] replaces the rule (All) by its particular case (Ail-Top~ \n(Figure 2). 3) System FS 1\u00b0CaL [7] replaces the rule (All) by its modifica\u00ad tion (All -1ocal) (Figure \n2). By I-FUn, I-FZ and t-F< I... I we denote the corresponding subtyping Telajions. 0 r, ff<pkuz<rz (Ail-Fun) \nr t-(v~<p.az) S (VCISP. T2) Figure 2: Variants of the (All) rule 3 (Un)Decidability The interesting facts \nabout F< are: Theorem 3.1 (Undecidability of F<, [12]) The relation kFc is undecidable. 0 The weakening \nof F< are however decidable: Theorem 3.2 (Decidability of Fun and F: [7]) Both relations ~FWZ and kF~ \nape decidable. -0 Nothing is known about decidability of FStOca~ [7]. In [18] we demonstrated that the \ndecidability of F< could be reached also by reinforcement, and not only by ~eakening, as opposed to systems \nF: and Fun. Definition 3.3 (Essential Undecidability, [17]) A con\u00adsistent theory T is essentially undecidable \nifi it has no con\u00adsistent decidable extensions T ~ T. 0 Definition 3.4 (Consistency) An eztension of \nF< is con\u00adsistent iff it is closed with respect to the F< infere~ce rules and does not subtype any two \ntypes. -0 Remarks. 1)Further we replace any two types by any two differently structured types getting \nthe stronger con\u00adsistency, 2) As we are interested only in the extensions of F<, the closure with respect \nto the F<-inference rules seems natural and meaningful. It would not be the case for F~ and Fun. n Theorem \n3.5 (Fs Is Not Essentially Undecidable, [18]) There exist infinitely many different consistent decidable \nex\u00adtensions of FF5 . 0 This result was obtained by interpreting the F<-subtyping relation in S2S, the \nmonadic second-order logic of two suc\u00ad cessors due to M. Rabin [13, 14]. The corresponding in\u00ad finite \nclass of extensions of F< (which we call the S2S\u00adinterpretations) and their prop~rties are studied in \n[18]. The main objection (by L. Cardelli and others) against these extensions was that they were too \ncoarse and non-structural. S2S-interpretations subtype too many types, sometimes differently structured \nones (i.e., universal and functional ones). In this paper we introduce a new infinite class of decidable \nextensions of F< refining the S2S-interpretations . We call these extension; systems F~fi. We also (reintroduce \nthe S2S-interpretations in a si7ghtly more general setting and call them SnS-interpretations (with S2S \nbeing a particular case of SnS for n = 2), We prove that all systems F~fi are more powerful than F5, \nbut being structural (they do not subtype differently structured types any more), they are less coarse \nthan SnS-interpretations: F< C F~&#38; C SnS-interpretations Again note that the decidable system F: \nintroduced in [7] is weaker than F<: F: C F<. 4 System F ~fi Definition 4.1 The system F~&#38; is defined \nby the collec\u00adtion of subtyping azioms and ifiference rules shown in Fig\u00adure 3, supposed to be applied \nbottom-up in the order of theiT presentation. **~See Figure 3 *** The DECIDE component in the nde (Var-All-Decide) \nand the whole F< ~-decision ppocedure are described in the fol\u00adlowing Secti;ns. 0 Roughly speaking, the \nsystem Fzfi is F< without the gen\u00aderal transitivity rule (Trans) rep~aced by a built-in decision procedure \nDECIDE. Remarks and Explanations 1. Our intention is to define the decision and not semide\u00adcision procedure \nfor subtyping judgments. That is why we are going to apply rules bottom-up and introduce two constants \nTRUE and FALSE to treat both the accepting and rejecting cases. 2. Rules (Reji), (Top), and (TVar) correspond \nexactly to their F< counterparts. We formulate them as rules with the premises TRUE just to be able to \ntreat sym\u00admetrically the negative case FALSE in other rules of F~&#38;.  3. Rules (ArTow) and (All) \nare the same as in F<. 4. Motivation for the rules (ToYJ-L) and (TVar-R-2) is: the conclusions of these \nrules are NOT provable in F< (Proposition 4.2). 5. Motivation for the rules (V ~ +) and (+ ~ V) is the \nsame: the conclusions of these rules are underivable in F<. 6. The (Var-Arrozv) rule is just a half \n(with only arrow\u00adtypes on the right of ~) of Curien-Ghelli s algorithmic transitivity rule (AlgTrans), \nsee [8] and Appendix B.  7. The crucial difference with F~ is the absence of the general rule (Trans) \nor of its algorithmic equivalent (AlgTrans) for universal types (see the rule (Vcm-A@ below). Transitivity \nin this case is dealt separately, by means of a DECIDE procedure. Note that we do not weaken the general \nF%~antifier rule (All), which remains the same as in F< . 8. The built-in procedure DECIDE appearing \nin the premise of the rule (Var-All-Decide) is a parameter of the system. Below we define infinitely \nmany different such procedures. Note, in particular, that if we define the DECIDE procedure recursively, \nas F~fi plus the second half of Curien-Ghelli s transitivity-rule:  r t-r(a) s (vBs U.7) (Var-All) r~a<(v~<a.r) \nthen we will get exactly F<! 0  Proposition 4.2 Subtyping judgments of the forms: l<rl-T<T (~#T), 2.rt-u<~ \n(u non-variable, a variable), where r is any context, are not provable in F<. 0  Proof . See Appendix \nCl. 0 5 Decision Procedure The rules of the system F~W read bottom-up can be seen as a decision procedure \n(w%h a built-in DECIDE oracle). Given a subtyping judgment, the rules of F$fi apply deter\u00administically \nin ordered manner (e.g., (VaT-All-Decide) does not apply before (Var-AlL2)). The rule application process \nalways terminates, provided that the built-in DECIDE pro\u00adcedure is finitely terminating, and this is \nthe fundamental difference with F<, see [12], Proposition 5.1 (Finite Termination of F~W) For eve\u00ad ry \nsubtyping judgment r k u ~ T any F~@ -~roof tree is finite. 1 Proof . The complexity of judgments decreases \nas one moves bottom-up. 0 So the termination of the whole decision procedure depends on termination of \nits DECIDE component. Irreducible leaves of F~ti-proof trees are either: 1.TRUE or 2. FALSE or 3. \nof the form DECIDE( J ), where J is a subtyping judgment in the F~d-noTmai form, i.e.:  J ~df al < al \n...Cr~~V~ ~ ~~T, (3) where al, . . . . cx~, @ are type variables, al,..., an are arbitrary types, and \nI-is a universal type. rku<u TRUE rl-f7<T FALSE 17 ET<T (fm t-# T) rkr(p)<a (for different um-iables \nCY, /3) r~p<a FALSE (u non-variable, a variable) r~u<a FALSE TRUE 17 1-FALSE (if 17(a) is T or an + \n-type) r~a<(vp<u.r) rbu1+u2 ST1+T2 Figure 3: System F~&#38; (Refl) (Top) (ToP-L) (TVar-R-1) (TVar-R-2) \n(v g+ ) (-+ -g v) (Var-Arrow) (TVar) (Var-AWl) (Var-AlL2) (Var-AILDecide) (Arrow) (All) Obviously: SnS. \nEach FS-type u is assigned a SnS-formula S(m) with just one free object variable x, and each subt yping \nrelation if all leaves of a F~&#38;-proof tree are TRUE, we declare a < T is translated into Va(S(Z) \no T(z)), where S(x) and the input judgmeiit valid; T(x) are SnS-formulas assigned to types a and r. \n if one of the leaves of F~&#38;-proof tree is FALSE, we Our translation satisfies the following properties: \ndeclare the input judgm~nt invalid;  1.all axioms of F< are transformed into valid formulas otherwise, \nbefore announcing our verdict we analyze of Sns; F~fi-normal forms (3) using the built-in DECIDE pFocedure. \n2. all F< -inference rules preserve validity with respect to any %S, i.e., whenever both premises of \na rule are translated into valid SnS-formulas, then the conclu- To decide normal forms (3) we use a method \n[18] of in\u00adsion of the rule is also translated into such formula. terpretations in monadic second-order \ntheories of successor functions [14]: 3. consequent ly, by 1 and 2, any F<-subt yping judgment is interpreted \nas a true formul= of SnS, and, hence\u00ad first, we compile F~ti-normal forms (3) in a monadic forth, F< \nis not essentially undecidable, i.e., possesses second-order theory, consiste~t decidable extensions; \nany SnS-translation of F< satisfying the above properties is such an exten\u00ad  second, we decide them \nusing a decision procedure for  sion. this theory. It remains to show that the needed SnS-translations \nof F< Therefore, instead of remaining in the undecidable F< we with the above properties exist. We show \nit in the rest of th~ forget it and work in the decidable F~&#38;, which replaces Section. The idea is \nquite simple: interpret type variables the transitivity rule (Trarw) by the tr%sitivity implicitly as \ncorresponding SnS-at omit formulas A(z), B(x), present in a monadic second-order theory. As we show be\u00ad \n~>P7... . . . . choosing a new predicate variable for each new type low, the proper choices of the DECIDE \ncomponent lead variable. Then knowing that S(x) and T (z) interpret a and to decidable extensions of \nF< (Theorem 11.1), closed with r respectively, interpret: respect to transitivity (Theor~m 12.1). c a \n+ r as S(z) ~ T(z), or, more generally, as 6 Interpreting F jfi-Normal Forms in SnS S(x) o T(f(z)), In \n[18] we introduced an infinite class of direct interpreta\u00adtions of F< into S2S, the monadic second-order \narithmetic Va s a. 7 asV2A {Vlx[A(x) o S(Z)] o T(x)}, or, more of two suc~essor functions [13, 14]. These \ndirect S2S-inter\u00adgenerally, as pretations do not use any inference rules (as opposed to F< or F~fi), \nimmediately translating F<-judgments into S2S\u00adformfilas. Like this we established ~hat F< possesses in-V2A \n{V X[A(Z) o S(x)] o T(g(z))} , finitely many different consistent decidable ~xtensions, i.e., is not \nessentially undecidable. where f, g are arbitrary strings composed of SnS\u00ad successors. The drawback \nof the direct S2S-interpretations of F< is that they subtype too many types (see [18] and below)~in par- \nIntroduction of parameters f and g allows us to define in\u00ad ticular, differently structured types. The \nsystems F~fi are finitely many diflerent interpretations of F< in SnS, see [18]. more subtle. By their \nvery definition they do not s-ubtype Surprising, but it works! We now proceed to formal defini\u00addifferently \nstructured types. They cannot prove a subtypin ,3 tions. between, say, an ~-type and a V-type. The systems \nF< apply the method of interpretations only to normal for-ins, i.e., to judgments of the form (3) inside \nthe DECIDE pro-Definition 6.1 (SnS[F<](f, g)-interpretations ) Let f cedure. and g be two arbitrary strings \ncomposed of successor func\u00adtion symbols of SnS. Both may be equal to the empty string There is only a \nminor difference in defining the S2S-inter\u00ad &#38;. pretations only for normal forms (3) and for general \nF<\u00adsubtyping judgments, so we give a complete definition of For an arbitrary type p of F5, the Types-As-Propositions\u00adS2S-int \nerpret ations of F<. Also, S2S-int erpretations gener-Interpretation of p in SnS with parameters f and \ng (the alize straightforwardly to SnS-interpretations for arbitrary SnS[F<](f, g) -interpretation for \nshort) is dejined as an SnS \u00adn 6 N or even SWS. formula [ p ]!(x) with unique distinguished free object \nvari\u00ad able x by induction on the structure of p: sor junction(s), say, Biichi arithmetic S1S, Rabin \ns arith\u00admetic S2S, . . . . SnS, SWS, or their weak counterparts, with second-order quantifications restricted \nto finite sets (see Ap\u00adpendix A). Choose and fix any monadic second-order theory of succes- The intuition \nbehind interpretations of F< into SnS is ex\u00adtremely simple. We interpet the F< types ~s propositions \nof A(z) (a new predicate 1. [cl J@) ~df variable A for each type variable a); 2. [ T ]:(z) ==df x=x; \n 3. [a+ T]j(x) =df [ a ]j(~) ~ [ ~ ]~(f(x)); 4. [va<cr.7 ];(2) = df  V2A {V z (A(x) 2 [ a &#38;)) 1 \n[ T ]:(g(~))}. The SnS[F<](f, g) -interpretation is extended to all subtyp\u00ading judgments by: 5. [as ~]~ \n~df VIZ([ a J@ 3 [ ~ ]&#38;44); ~n<an~a<@=df6. u~l~~l... [cM~a@#%~a.]&#38; ~nS [a@D Definition 6.2 (Theory) \nDefine the SnS[F S](f, g) -theory as: SnS[F<](f, g) ~df {r~ 0<7 I [r+ a<~]~} Further we will freely say \nthat a typing judgment is true or valid in (or with respect to ) a SnS[F<] (f, g) -interpretation iff \nit belongs to the set SnS[F<](f, g) . 0 Remarks. In SnS[F<](f, g)-interpretation we use just one\u00advariable \nrestricted fragment of SnS. If f = g = s then this fragment is also function-free (and can be seen as \nthe propo\u00adsitional second-order logic). x is the only free object vari\u00adable of any SnS[F <](f, g)-interpretation \nof any type. Sub\u00adtyping judgments =re interpreted as statements about SnS\u00adsemantical consequence relation \n~ns containing no free object variables at all, Any SnS[F <](f, g) is decidable. 0 The SnS-interpretations \nenjoy the following important prop\u00adert ies: Lemma 6.3 (Embedding) 1)All axioms of FS are valid with respect \nto any SnS[F<] (f, g). 2) All inference rules of F< preserve validity with respect to any SnS[F<](f, \ng), i.e., if both premises of a rule are valid in SnS[F<]~f, g), then so is the conclusion of the ruie. \n0 Proof . Straightforwardly rephrasing the proof from [18]. As a direct consequence we have, [18]: Theorem \n6.4 (On Decidable Extensions of F<) Any SnS[F<] (f, g) is a consistent decidable theory conta~ning all \nF< -de~vable subtyping judgments. Henceforth, F< is not es\u00adse ntially undecidable possessing consistent \ndecidable exten\u00adsions. l Definition 6.5 (F< fi(f, g)) Define a system F~ti(f, g) as a combination of \ntlie inference rules from Figu>e 3 and a DECIDE procedure for SnS[F<](f, g). El Below, in Theorems 11.1 \nand 12,1 we show that all systems F ~@(f, g) also extend F< but are less coarse than SnS\u00adin~erpretations, \ni.e., - FS c F~fi(f, g) c SnS[FS](f, g) (4) 7 Consistency and WeH-Structuredness of F~fi Proposition \n7.1 All systems F~ti aTe consistent: they do not prove, e.g., E T < (T -+ T). Neither do they subtype \nany pair of differently structured types. 0 Proof . Immediate by definition. 0 8 Inversion Principle \nThe main tool of the proofs of inclusions (4) (Theorems 11.1 and 12. 1) and of the transitivity of F~fi(f, \ng) (Theorem 13.1) is the well-known inversion principl~. The rule invertibility is the fundamental principle \nof the cut-free Gentzen-type derivation systems, see, e.g., [15]. The inversion principle is the key \nproperty needed to prove the minimal typing property for FS. In fact, this is almost all what is needed \nto reconstruct F<-inferences into normal forms, [8]. The inversion principle can be formulated as follows: \nfor an inference rule of a system S r+o rkv (Rule) rko if a sequent 17 + @ from the conclusion is derivable \nin S then the premises are also derivable in S. The inversion principle is important for goal-oriented \nproof\u00adsearch procedures, which are guaranteed to be complete just stupidly applying inference rules bottom-up. \nProofs in systems satisfying the inversion principle are direct, con\u00adstructed from subproofs of subformulas \nof goal formulas, do not contain insights and roundabout ways. The inversion principle is not evident, \nor even fails for sys\u00ad tems with the CUT rule: rFA3c rl-c3B (cut) rt-A3B In the presence of (Cut), one \ncannot always be sure that a provable formula @ of the form A o B is obtained by some (Rule) or by the \n(Cut). But applying (Cut) requires ingenuity to find intermediate formulas C, unattainable for mechanic \ntheorem provers. Note that the usual transitivity rule of F< 11 Fjti is More Powerful than F< has the \ndefinite (Cut) form. ProDosit ion 8.1 (Inversion for F<. [81) In F< the rules (Ar~ow) and (All) are invertible. \n  = 0 This may be seen as a good structural property. 9 Failure of the Inversion Principle for SnS[FS](f, \ng) The inversion principle fails for SnS-interpretations. In fact, we can have [rt-(d-+ 7)s(/-+#)]~ \nWITHOUT having [r+a <a]~and[r+r<r ]~ Take, for example, the judgment a< Tt-(a-+T)<(T+T) with the valid \nSnS-translation, but the SnS-translation of a< TFT<a is false: VIZ(AX o x = x) &#38; VIX(C = x o Ax). \n10 Inversion Principle for F ~@ Inversion principle trivially holds for F:*: Lemma 10.1 (Inversion Principle) \nIn any F~&#38;(f, g): ijl? } U1 + U2 < rl + T2 is provable, then 17 t-rl < al and J7 + uz < m are also \nprovable;  if J7 !-(VCI < UI . az) < ( da < ~1 . T2) is provable, then 17+T1s q and 1?, CY< rl 1-U2 \n< TS ape also provable. 1  Proof . Immediate by definition. In F~&#38; there are no other ways to subtype \ntwo +-or V-types-except applying (Arrow) or (All) (or by the (Re$l), in which case the con\u00adclusion is \nstraightforward). 1 The proofs in F:* are direct, one needs not subtype any\u00ad thing which do lot belong \nto a goal subtyping judgment, proofs are conducted without roundabout ways and insights, completely deterministically. \n Now we prove two strict inclusions: F< c F~@(f, g) c SnS[F<](f, g) So. the svstems F~fi OCCUDV an intermediate \nDosition be\u00ad -7 . .. . , tween F< and SnS-interpretations: they are more strong than F< and more subtle \nthan SnS-interpretations. Note that the decidable system F: lies to the left of F~ in the above diagram. \nRemark. F~&#38; is an infinite family of systems. To decide normal form;each system uses a parametric \nSnS[F<] (f, g)\u00adinterpretation , For each f and g we have different para\u00admetric F~fi(f, g). In fact, for \nthe same f, g we have the above inclusion F~@(f, g) C SnS[F<](f, g). In general, F~&#38;(f, g) and Sn~[F<](f \n, g ) are unr~ated [18].  Theorem 11.1 (F< c F~@) Each system F~fi(f, g) is stpictly more powerful than-F< \nis: if a subtypin~ judgment is provable in F< then it is al~o provable in F~&#38;(f, g); the converse \nis not true in general. 0 Proof . See Appendix C.2. El s~ Are Less Coarse than SnS-interpretations12 \nF< We prove that F~&#38;(f, g) subtypes strictly less types than the correspondin~ SnS[F<](f, g)-interpretation: \nTheorem 12.1 (F~ti(f, g) C SnS[F<](f, g).) Each SyS\u00ad tem F~ti(f, g) is s~ictly less powerful than the \ncorrespond\u00ading in~erpretation SnS [F<] (f, g): whatever is provable in F~fi(f, g) is ako true in ~nS[F<](f, \ng); the converse in gen\u00ad e;l does not hold. In particular, F{~ does not subtype dif\u00adferently structured \ntypes (e.g., a un~emally quantified and a functional type). 0 Proof . See Appendix C.3. 0 13 Transitivity \nof F:* Changing F< for F<ti we gain decidability and do not lose transitivity! Transii3vity is an indispensable \nproperty needed for many purposes, in particular, for proof normalization, see [8, 21, 22]. Theorem 13.1 \n(Transitivity of F~fi) All systems F~ti(f, g) are closed with respect ~ the transitivity Pule (Trans): \nwhenever r k IS< randI?} T < parepTovable in F~fi(f, g), then r 1-u < p is also provable in F<:ti(f) \nd. 0 Proof . See Appendix C.4. 14 Improvements [16], the class PSPAC E coincides with the class of lan\u00ad \nguages recognizable by the so-called interactive proof sys-The F<&#38;-decision procedure may be obviously \nrefined as tems. These systems are probabilistic algorithms exchang\u00adfollows; instead ofpruning the F<tg-prooftreel \non the first ing messages in order to get convinced whether a given string belongs to a language with \na given probability. It is chal\u00ad application of (Var-All-Decicie), one may fix k c N and lenging to introduce \nprobabilistic algorithms in the domainallow k applications of (Var-All) on each branch of a sub\u00ad of type \nsystems. typing proof tree before applying (Var-All-Decide), which invokes the brute force SnS-decision \nprocedure for normal forms. Denote the resulting system F~ti(f, g)(k). Acknowledgments. I am greatly \nindebted to Luca Cardelli, Benjamin Pierce, Martin Abadi, Roberto Amadio, Philippe Consider a simple \nexample. The non-modified procedure de Groote, Didier Galmiche, Jean-Luc R6my, Hubert Comon, analyzing \nthe normal form Michel Parigot for invaluable remarks, ideas, and discus\u00adsions. I am grateful to my anonymous \nreferee for his sub- r,a<(V~(T -+ T)-+-T)l-cY<(V/J. T -+T) stantial help. To produce proof trees I used \nPaul Taylor s 14T&#38;macro package. This work was done when I was at returns TRUE. But if we allow just \none application of CRIN (Centre National de Recherche en Informatique de (Var-Ali), we get 17... I-( \nT+ T)+ T< T+T, Nancy, France), which provided me the excellent research then J7 t-T < T -+ T, and, finally \nFALSE, which opportunities. corresponds exactly to the F<-proof.  With these modifications we still \nhave for all k E w References F< C F~ti(f, g)(k) p] BREAZU-TAIWEiN, V., COQUAND, T., C., G., AND SCEDROV, \nA. Inheritance ss implicit coercion. Mathematical Structures in Computer Science 93 (1991), 172 221. \n It is not difficult to notice that [2] BRUCE, K. B., AND LONGO, G. A modest model of records, F :fi(f, \ng)(k + 1) c F:~(f, g)(k) inheritance and bounded quantification. Information and Computation 87 (1990), \n196-240. and F~fi(f, g)(m) = F<. [3] CARDELLI, L. A semantics of multiple inheritance. Informa\u00adtion and \nComputation 76 (1988), 138-164. The general theory of the converging sequences [4] CARDELLI, L. Typeful \nprogramming. Research Report 45, { F~fi(f, g)(k) }~0 is systematically developed in [21], Digital Equipment \nCorporation System Research Center, 1989. 15 Conclusion [5] CARDELLI, L., MARTINI, S., MITCHELL, J., \nAND SCEDROV, A. An extension of system F with subtyping. Information In this paper we concentrated exclusively \non the the sub\u00ad and Computation (1994). To appear, preliminary version in LNCS 526, 1991, pp.550-570. \n typing relations more powerful than in F<. When combined with the usual F<-term typing rules, OU; subtyping \nexten-[6] CARDELLI, L., AND WEGNER, P. On understanding types, sions produce sys~ems, which type strictly \nmore terms than data abstraction, and polymorphism. Computing Surveys F<. Let I E u < r be F<&#38;-provable \nbut F<-unprovable. 17, 4 (1985), 471-522. T~en I , x:u, f: r+;+ f x:rin F~&#38;, butis [7] CASTAGNA, \nG., AND PIERCE, B. C. Decidable bounded quan\u00aduntypable in F<, tification. In 21d, ACM Symp. on Princip \nlea of P70gram\u00ad  ming Languages (1994), pp. 151 162. Therefore, the problems of subject reduction, strong \nnormal\u00ad [8] CURIEN, P.-L., AND GHELLI, G. Coherence of subsumption, ization, and minimal typing are \nnontrivial for our extensions. minimum typing, and type checking in F<. Mathematical If the general \nanswers appear to be negative, it might be Structures in Compute, Science 2 (1992), %5-91. interesting \nto investigate restricted classes and/or to mod\u00ad [9] KATIYAR, D., AND SANKAR, S. Completely bounded quan\u00ad \n ify senses in which we understand the above properties, It tification is decidable. In ACM SIGPLAN Workshop \non ML would also be interesting to construct models of F~&#38;. The and itsApplications (1992). work \non these problems has been started [21, 22, 20]. [10] LEIVANT, D. Polymorphic type inference. In 10th \nACM As shows the example in Section 14, the systems F~&#38; (and Symp. on Principle, of PTog,amming Language, \n(1983), pp. 88 98. hence SnS-interpretations) do not separate the sefi of F<\u00adprovable and F<-finitely \ndisprovable subtyping judgmen;s. [11] MITCHELL, J. C. Type theory for programming languages. So, the \nproblem is: whether these two sets are recursively In Handbook of Theoretical ComputeT Science (1990), \nJ. van separable. If yes, the separating cover of F< will be a bet- Leeuwen, Ed., vol. B, Elsevier, pp. \n365-458. ter substitute for the DECIDE compone;t of the F~&#38;-[12] PIERCE, B. C. Bounded quantification \nis undecidable. In  decision procedure. 19th ACM Symp. on Principles of Programming Language8 (1992), \npp. 305-315. In a particular case, when f = g = s, our SnS-interpretations [13] RABIN, M. Decidability \nof second order theories and au\u00ad of F<-subtyping are just interpretations into the second\u00ad tomata on \ninfinite trees. Tranaactiona of the American orde~ propositional logic. As it was established by Shamir \nMathematical Society 141 (1969), 1-35. 1F.#g is the Curien-Ghelli algorithmic equivalent formulation \nof [14] RABIN, M. O. Decidable theories. In Handbook of Mathemat\u00adical Logic (1977), J. Barwise, Ed., \nStudies in Logic and the F<, s;e [8] and Appendix B Foundations of Mathematics, North Nolland, pp. 595-630. \n[15] SCHWICHTENBERG, H. Proof theory: some applications of cut-elimination. In Handbook of Mathematical \nLogic (1977), J. Barwise, Ed,, Studies in Logic and the Foundations of Mathematics, North-Holland Publishing \nCompany, pp. 867\u00ad  895. [16] SHAMIR, A. PSPACE=IP. In l+-... .91.t IEEE FOCS (1990), IEEE, pp. 11-15. \n[17] TARSKI, A., MOSTOWSKI, A., AND ROBINSON, R. M. Un\u00addecidable theorieg. Studies in Logic and the Foundations \nof Mathematics. North-Holland Publishing Company, 1953. Third printing, 1971. [18] VOROBYOV, S. F<: Bounded \nquantification is NOT essen\u00adtially undecidable: Technical Report CRIN 94-R-018, Cen\u00adtre de Recherche \nen Informatique de Nancy, January 1994. FTP: FsubTAPI.[dvi,ps].Z . [19] VOROBYOV, S. F< with recursive \ntypes: Types-As-Propositions Interpretations in M. Rabin s S2S. Technical Report CRIN 94 R 035, Centre \nde Recherche en Informa\u00adtique de Nancy, February 1994. FTP: FsubREC.[dvi,ps].Z [20] VOROBYOV, S. @pT-subject \nreduction and stucklessness for perfectly-structured second-order type systems with subtyp\u00ading. In preparation, \nApril September 1994. [21] VOROBYOV, S. Hierarchies of decidable extensions of bounded quantification. \nResearch Report INRIA-RR-2354, Technical Report CRIN 94 R 120, Centre de Recherche en Informatique de \nNancy, August -September 1994. FTP: INRIA RR-2354.ps.Z, FsubHi.[dvi,ps].Z . [22] VOROBYOV, S. Extensions \nof F< with Decidable Typing. Technical Report CRIN 94 R 12T , Centre de Recherche en Informatique de \nNancy, September 1994. FTP: FsubDec-Typing. [dvi,ps].Z . Note. Papers with mention FTP: f ileneme are \navailable by anony\u00admous ftp f tp. loria. fr directory pub/l oria/prograis/vorobyov or via URL f tp: f/f \ntp. loria. fr/pub/loria/prograi, s/vorobyov (mosaic). A Monadic Second-Order Arithmetics We briefly recall \nbasic definitions and facts about decidable (weak) monadic second-order theories of one or several successors. \nFix arbkrary n c w U {w}. The alphabet of n-successor monadic second-order arithmetic SnS consists of: \n1) infinitely many object variables z, y, z, . . .. 2) the equality predicate symbol =, 3) in\u00adfinitely \nmany unary (monad,c) predicate variables A, B, X, Y,..., 4) one, several, or countably many successor \nfunction symbols {SUCC, },<n, 5) all usual boolean connective, parentheses, 6) uni\u00adversal and existential \nfirst-and second-order quantifiers: #, 31, V2, Y. Tewna are constructed as usual, starting from object \nvariables by applying the successor function symbol(s). Atomic formulas are either equahties of terms \nor expressions of the form A(t), where A is a predicate variable and t is a term. Fo~mulas are constructed \nfrom atomic ones by the usual rules using boolean connective, parentheses, first-and second-order quantifiers: \nVl x +, 31x @, V2X ~, 12X +, (where x is an object and X is a predicate variable). Interpretation. For \nan n-successor theory SnS consider the in\u00adfinite n-ary tree T nm. Interpret: 1) object variables as nodes \nof the tree, 2) SUCC,(t)asthe i-th son of the node interpreting t,3) equality, boolean connective, and \nfirst-order quantifiers as usual, 4) predicate variables as arbitrary sets of nodes, 5) atomic for\u00admula \nA(t) as the membership relation %he node t is in the set A ; 6) second-order quantifiers as quantifiers \nover sets of nodes. Denote by i h2 (SnS) or simply by SnS the set of all formulas valid under the above \ninterpretation. Replacing the interpretation 6) of the second-order quantifiers above by the following \nclause 6 ) second-order quantifiers are interpreted as quantifiers over fi\u00adnite sets of nodes, we get \nthe weak monadic second order arithmetic of n euccewors, denoted by WSnS. All theories WSnS and SnS are \ndecida61e. The most well known of all these are: Biichi s arithmetic S1S, Rabin s arithmetic S2S, and \ntheir weak counterparts WSIS, WS2S. The theory S2S is strictly more powerful than WS2S, S1S, and easily \nencodes all SnS. For details see [13, 14]. B F$g: Curien-Ghelli s Algorithmic Variant of F< Curien and \nGhelli [8], Sect. 6.1, suggested F<tg, an alternative equivalent formulation of FS. We present it following \n[12]: (Top) r E a < a (a is a variable) (Refl) rEr(a)<T (AlgTrans) rkCr<T r~T1<u1r+02<T2 (Arrow) rt-ul+oz \n<T1-+T2 r+Tl<cTlr,CY<Tlhaz< T2 (All) r E ( v cY<c71 .02) < (VCY<TI. T2) of < (Re.f~) is unlike (Re.f~ \nof F< is restricted to variables, 2) tram sitivit y (Trans) is replaced by (AlgTrans); 3) rules are applied \nin ordered manner (e.g., (Alg Trans) never applies if (Rejl) is applicable). Three differences FA2 , \nss compared to F< are: 1) reflexivity Remark. Note that the inversion principle trivially holds for the \n(Arrow) and (All) of F~lg: a conclusion of each rule is prov\u00ad able iff so are the premises. Proofs in \nF<tg are dkect, without roundabout ways. Lemma B.1 (F<lg = F<, [8]) The systems F< and F~lg are equivalent: \na sub~yping judgment is derivable in F< iff it i; deriv\u00ad able in F~lg. As an immediate consequence we \nhave the following Lemma B.2 (Inversion Principle for F<) In F<: if171-Cl+02<71+T2isprovable, thenr~TI<UI \nand r E U2 <72 are also p~ovable;  if 1? E (Va < UI . 02) < ( da < 71 . T2) is provable, then I? t-TI \n< q and 17, a < rl t-uz <72 are also provable.  Proof. Using equivalence of F< and F~lg. Let r h U1 \n-+ U2 ~ C.3 Proof of Theorem 12.1  T1 + T2 be provable in F<. Then it is provable in F~ig. But the \nonly way to prove it in F~lg consists in proving I R 71 ~ al and 17 1-q ~ 72 in F~ig (s;nce inversion \nprinciple holds for F.$g). Henceforth, by eq~lvalence, r k TI < al and I? + oz ~ T2 are provable in F<. \nThe proof of the second claim is exactly the same. 0 C Proofs  C.1 Proof of Proposition 4.2 Proof , \n(l). Is obvious. To prove (2) suppose, on the contrary, that a judgment of the form (2) is provable in \nF<, i.e., there exists  a proof, i.e, a sequence of judgments Jo, J1, . . .. J., ..<, J~=r ku~cr, (5) \n where each J$ is either an F<-axiom, or is obtained from some Jk and Jl (k < i and 1 < i) in the sequence \nby application of one of the F<-rules: (Arrow), (All), or (Trans). Without loss of generality-we can \nsuppose that J~ is the first appearance of the judgment of the form (2) in the proof (5); otherwise, \nwe can move left to select the first judgment of this form. It remains to notice that Jn cannot be an \naxiom, since there are no F<-axioms of the form (2). Next, neither (Arrow), nor (All) can ~roduce a judgment \nof the form (2) (both produce types of the same structure). Therefore, (2) is obtained by (Trans). But \nto derive (2) by (7 rans) one needs either Jk = r E a ~ T and Jl~r k r<a(Tnon-variable type), orJksr \n~ c~~ and J1 -I E ~ ~ a (~ is a type variable). Therefore, .lk has the form (2) and appears in (5) before \n.J~. But this contradicts to the choice of Jn. 0 C.2 Proof of Theorem 11.1 Let a subtyping judgment \nJ 0 r 1-u ~ T be provable in F<. Then, by equivalence of F< and F&#38;g (Lemma B. 1), it is provafie \nin F~ g. Consider the F~g tree of J. If this tree does -reference not ~ontain applications of the rule \n(AlgZ rans) corresponding to the (Var-A/l-Decide) rule, then this tree is also the F~ti\u00ad inference tree \nof J and we are done. Suppose now that the F~lg -inference tree T of J does contain applications of (AlgTran~) \ncorresponding to the (Var-All-Deci&#38;) rule. Transform this tree T as follows. Start\u00ading from the root \nJ follow each branch till the first applica\u00adtion of (AlgTrans) (if any), and cut it on thk application \nso as the conclusion of (AlgTrans) remains in the tree, Denote by T (J1 , . . . . Jn ) the resulting \ntree, where J1 ,., , , Jn are all leaves\u00adconclusions of (AigTrans) remaining after the above pruning. \nNote that T (JI ,, , ., J~ ) is exactly the F~fi-inference tree, and Jl, ..., .l~ are precisely F~fi-normal \nfor&#38;. Instead of applying (AlgTrans), the F~&#38;-de&#38;ion procedure transforms JI, . . . . Jn \ninto SnS-formulas-and decides them. So, to finish our proof we have to prove that JI, . . . . J~ are \ninterpreted sa true SnS\u00adformulas. To do this, notice, that by equivalence of F< and ~~tg, sJl the judgments \nJI ,. ... Jm are provable in F<. ~ut by TXeorem 6.4 above everything provable in F< is true %Ith respect \nto any SnS\u00ad . interpretation. The strictness of inclusion is simple: since F~ti is decidable and F< \nis not, there should certainly exist F ~a-provable and not F~-provable subtyping judgments. - 1 Again \napplying Theorem 6.4 above, all F ~fi-inference rules pre\u00adserve validity with respect to any S nS-i~terpretation. \nAs nor\u00admal forms of F~ti are decided by the same SnS-decision pro\u00adcedure, they ar~ simultaneously true \nwith respect to an SnS\u00ad interpretation SnS [F<] (f, g) and F~fi (f, g). By definition, F~fi(f, g) does \nnot subtype differen~ly structured types, whereas SfiS-interpretations do, e.g., E T + T ~ Vci.T is true \nin any SnS-interpretation.  C.4 Proof of Theorem 13.1 By induction on complexity of subtyping inference. \nSuppose the premises of the theorem hold, i.e., I? k o~ rand r &#38;T< pareF~&#38;-provable. We must \nshow that soisr 1-0s p. We have to consider several cases: 1.p is T; 2. p is a type variable; 3. p \nis an arrow or a universal type, both u and T are type variables; 4. T and p are both arrow types and \nu is a type variable; 5. T and p are both universal types and a is a type variable; 6. a, 7, and p \nare all arrow types; 7. a, T, and p are all universal types.  Case 1. Vacuous: 17 + u ~ T, always. \nCase 2. If p is a type variable then u and r should also be type variables; otherwise the rule (TVar-R-2) \nwould disprove one of the premises of the theorem. So we should demonstrate that F~fi-provability OK \nr+a~~, (6) r~p~v (7) imply the F~ti-provability of rka~? (8) for type variables a, L?, ~. Note that \nthe F~ti-proofs of (6) and (7) are just finite sequences of (Z Var-R-1)-~pplications finishing by an \napplication of (l?ej/). These two sequences could be easily merged into just one such sequence proving \n(8). Indeed, starting from the judgment (8) by backward applications of (TVar-R-1) we are guaranteed \n(by provability of (6)) to reach ~ on the left of ~, i.e., we reach (7), which is provable by hypothesis. \nCase 3. Suppose that p is either an +--or a V-type, u and T are type variables a and @ respectively. \nWe transform the proofs of rt-a~p, (9) rko~p (lo) into the proof of rka~p (11) as follows. Starting from \nthe judgment (11) we first repeat (back\u00adwards) exactly the same sequence of steps as in the proof of \n(9), which leads to r b @ ~ ~ (but applying (Var-Arrow) or (Var-Al&#38;l ) instead of (Z Var-R-1) ). \nThis gives the inference of (11) from (10) used as axiom. We then repeat the proof of the latter judgment, \nw~lch exists by assumption. The result is the desired proof. Case 4. Suppose r+a s T1+T2, (12) rpTl+7z \n~ pl+pz (13) are Fs&#38;-provable. We must prove that so is < r+a~p1+p2 (14) The proof of (12) is a finite \nsequence of (Var-Arrow) followed either a) by (Refl) or b) by (Arrow). In the Case 4.a we construct the \nproof of ( 14) (in a backward man\u00adner) first applying to (14) exactly the same sequence of (Var-Arrow) \napplications until (Re.fl), as in the proof of (12). Thk gives a subinference of (14) from (13) used \nas an axiom. We then com\u00adplete the latter sublnference by including the proof of ( 13) (whkh is Fj&#38; \n-provable by assumption). In the Case 4.b we construct the proof of (14) as follows. Consid\u00adering the \nfinal part of the inference of (12) till the first application of (Arrow):   r+ al-+02 ST1+T2 (/) r~a \n~T1+T2 (15) CY<TI+T2 J we see that (12 is provable property for F<@ (Theorem iff (~) 10. 1) is provable. \nthis implies By the inversion provability of rkTl<Ul, (16) rk02<T2 (17) Similarly, provability of (13) \nimplies provability of rEpl S71, (18) r+T2 <p2 (19) Applying the inductive hypothesis to (18) and (16), \nthen to (17) and (19) we get the F~&#38;-provabilit y of r k P1 < m and rku2sp2. But thk means that \nal + L72 < pl + PZ is also F~fi-provable. This allows us to transform the proof (15) into the proof of \n(14) by simple replacement of -rl + 72 by PI + p2. Case 5. Suppose r k a < (v@< T1. T2), (20) r \\ (v@< \nT1. T2) < (v~<P1. P2) (21) are F~ti -provable. We have to prove that rEa < (vf35P1. P2) (22) The proof \nof (20) is a finite (possibly empty) sequence of (Var-Ail-1) followed either a) by (TVar) or b) by (Var-AILDecide). \nIn the Case 5.a we construct the proof of (22) first applying to it the same sequence of ( Var-All-1) \nas in the proof of (20), until (Z V.r). This gives a subinference of (22) from (21) used as ax\u00adiom. We \nthen complete the latter subinference by including the proof of (21) (which is F~&#38;-provable by assumption). \n In the Case 5.b we construct the proof of (22) as follows. Con\u00adsider the final part of the inference \nof (20) till the application of (Var-AtLDecide): r + DECIDE(r t-a s V.D < .I .T2)(<) r K a < (V9<T1. \nT2) (23) a < (Vf3<T1. T2) We see that (20) is provable iff the F~ti-normal form in (~) is valid in a \nchosen theory SnS [F<] (f, g): As each SnS [F<] (f, g) is more powerful than the correspondhg F ~&#38; \n(f, g) (Theorem 12.1), the F~fi (f, g)-provability of (20) impli&#38; that: (24) [ r n&#38; +SncJ Vl$[A \n(~) ~ [ @~ T1. T2 ]~(d] sw (f, g)-provability of (21) implies Similarly, the F< Henceforth, by syllogistic, \n(24) and (25) imply (26) [r]: ~ns v dA (~) > [v~ < PI .P2 ]~(~)] Now, to construct the inference of (22) \nwe start by the sequence of the same (Var-Ali) applications as in (23) till 1? K a ~ (VP <PI . P2). After \nthat we should apply either the rule (TVar) (in this case we are done), or the rule (Var-All-Decide) \ngetting DECIDE(r k a < (V6 < pl . p2)). But in the latter case DECIDE should necessarily return the result \nTRUE (by (26)), and the desired F~&#38; (f, g)-proof is completed. Case 7. Let r b (VP< OI. 02) < (vP<T1. \nT2), (27) r ~ (V@< T1. T2) < (vb<P1. P2) (28) We have to show r k (vP501. c2) s (VDSP1. P2) (29) By Inversion \nprinciple (Lemma 10.1) from (27) and (28) we get: r~Tl<C71 (30) r,~<Tl &#38;U2 < T2 (31) rkpl <Tl (32) \n(33) r,@<Pl k72 < P2 From (32) and (30) by induction hypothesis we get rhpl <al (34) From (31), (32) \nand (33) by induction hypothesis we get (35)r,asp1k02s02 (each time instead of using the hypothesis ~ \n< TI we use the hypothesis ~ < PI and (32)). But (34) and (35)~mply (29). Case 6 is completely analogous \nto the preceding one. \n\t\t\t", "proc_id": "199448", "abstract": "", "authors": [{"name": "Sergei G. Vorobyov", "author_profile_id": "81100102178", "affiliation": "Max-Planck-Institut f&#252;r Informatik, Im Stadtwald, D-66123, Saarbr&#252;cken, Germany", "person_id": "P261985", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/199448.199479", "year": "1995", "article_id": "199479", "conference": "POPL", "title": "Structural decidable extensions of bounded quantification", "url": "http://dl.acm.org/citation.cfm?id=199479"}