{"article_publication_date": "09-27-2010", "fulltext": "\n ML: Metalanguage or Object Language? A talk in honour of Robin Milner Mike Gordon University of Cambridge \nComputer Laboratory Mike.Gordon@cl.cam.ac.uk Abstract My talk will celebrate Robin Milner s contribution \nto functional programming via a combination of reminiscences about the early days of ML and speculations \nabout its future. Categories and Subject Descriptors D.3.3 [Programming Languages]: Functional Programming \n General Terms Languages, theory Keywords Functional programming, proof assistants, ML, LCF, metalanguage, \nobject language, types, polymorphism Copyright is held by the author/owner(s). ICFP 10, September 27 \n29, 2010, Baltimore, Maryland, USA. ACM 978-1-60558-794-3/10/09.  Background ML was designed by Robin \nMilner in the 1970s as the language for scripting interactive proof commands for the Edinburgh LCF theorem \nprover.1 He used the term metalanguage (abbreviated to ML ) for this scripting language and object language \nfor the formal logic in which theorems were proved.2 This .rst version of ML evolved, over the years, \ninto several general-purpose functional programming languages, though its role as a theorem prover meta\u00adlanguage \nhas also continued and grown. A prominent member of the ML family, Standard ML (SML), was designed in \nthe 1980s by a team lead by Milner. SML is speci.ed with a formal semantics; this formed the basis for \na considerable body of research on the metatheory of programming languages, leading to many insights \nand advances. The semantics of SML also provide, in principle, a rigorous foundation for reasoning about \nindividual ML programs, though the complexity of the full language semantics make this very challenging \nin practise. To make the analysis of functional programs more tractable, some descendants of Milner s \noriginal LCF system have object logics whose terms are inspired by ML programs, but which are simpli.ed \nso that they are easier to reason about than terms based on full SML. Thus ML is now both a metalanguage \nof interactive theorem provers, and an inspiration for object languages. 1 The acronym LCF abbreviates \nLogic for Computable Functions . The Edinburgh LCF system was the successor to the Stanford LCF system \nthat was implemented by Milner and Weyhrauch at Stanford University. The ob\u00adject language of Stanford \nLCF was a monomorphically typed .-calculus de\u00adsigned for reasoning about recursively de.ned functions \non Scott domains. Stanford LCF had a .xed set of commands for creating proofs interactively, but no metalanguage \nfor programming combinations of commands. 2 The object language of Edinburgh LCF was called PP. , which \nabbrevi\u00adated Polymorphic Predicate .-calculus . It was an extension of the object language of Stanford \nLCF, with a polymorphic type system devised by Mil\u00adner similar to the Hindly-Milner type system of ML. \nI don t know whether Milner .rst conceived his theory of polymorphic types for ML or for PP., but I think \nthat the design of PP. was completed before that of ML.  \n\t\t\t", "proc_id": "1863543", "abstract": "<p>My talk will celebrate Robin Milner's contribution to functional programming via a combination of reminiscences about the early days of ML and speculations about its future.</p>", "authors": [{"name": "Michael J.C. Gordon", "author_profile_id": "81342495975", "affiliation": "University of Cambridge, Cambridge, United Kingdom", "person_id": "P2338132", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1863543.1863545", "year": "2010", "article_id": "1863545", "conference": "ICFP", "title": "ML: metalanguage or object language?", "url": "http://dl.acm.org/citation.cfm?id=1863545"}