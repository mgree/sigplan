{"article_publication_date": "09-27-2010", "fulltext": "\n\t\t\t", "proc_id": "1863543", "abstract": "<p>Functional programming presents several important advantages in the design, analysis and implementation of parallel algorithms: <ul><li>It discourages iteration and encourages decomposition.</li> <li>It supports persistence and hence easy speculation.</li> <li>It encourages higher-order aggregate operations.</li> <li>It is well suited for defining cost models tied to the programming language rather than the machine.</li> <li>Implementations can avoid false sharing.</li> <li>Implementations can use cheaper weak consistency models.</li> <li>And most importantly, it supports safe deterministic parallelism.</li></ul></p> <p>In fact functional programming supports a level of abstraction in which parallel algorithms are often as easy to design and analyze as sequential algorithms. The recent widespread advent of parallel machines therefore presents a great opportunity for functional programming languages. However, any changes will require significant education at all levels and involvement of the functional programming community.</p> <p>In this talk I will discuss an approach to designing and analyzing parallel algorithms in a strict functional and fully deterministic setting. Key ideas include a cost model defined in term of analyzing work and span, the use of divide-and-conquer and contraction, the need for arrays (immutable) to achieve asymptotic efficiency, and the power of (deterministic) randomized algorithms. These are all ideas I believe can be taught at any level.</p>", "authors": [{"name": "Guy E. Blelloch", "author_profile_id": "81100282539", "affiliation": "Carnegie Mellon University, Pittsburgh, PA, USA", "person_id": "P2338205", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1863543.1863579", "year": "2010", "article_id": "1863579", "conference": "ICFP", "title": "Functional parallel algorithms", "url": "http://dl.acm.org/citation.cfm?id=1863579"}