{"article_publication_date": "09-09-2012", "fulltext": "\n\t\t\t", "proc_id": "2364527", "abstract": "<p>We present a framework of dynamic programming combinators that provides a high-level environment to describe the recursions typical of dynamic programming over sequence data in a style very similar to algebraic dynamic programming (ADP). Using a combination of type-level programming and stream fusion leads to a substantial increase in performance, without sacrificing much of the convenience and theoretical underpinnings of ADP.</p> <p>We draw examples from the field of computational biology, more specifically RNA secondary structure prediction, to demonstrate how to use these combinators and what differences exist between this library, ADP, and other approaches.</p> <p>The final version of the combinator library allows writing algorithms with performance close to hand-optimized C code.</p>", "authors": [{"name": "Christian H&#246;ner zu Siederdissen", "author_profile_id": "81542674556", "affiliation": "University of Vienna, Wien, Austria", "person_id": "P3804347", "email_address": "choener@tbi.univie.ac.at", "orcid_id": ""}], "doi_number": "10.1145/2364527.2364559", "year": "2012", "article_id": "2364559", "conference": "ICFP", "title": "Sneaking around concatMap: efficient combinators for dynamic programming", "url": "http://dl.acm.org/citation.cfm?id=2364559"}