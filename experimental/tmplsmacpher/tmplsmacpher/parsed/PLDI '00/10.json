{"article_publication_date": "05-01-2000", "fulltext": "\n OptimalInstructionSchedulingUsingIntegerProgramming KentWilkenJackLiuMarkHefernan DepartmentofElectricalandComputerEngineering \nUniversityofCalifornia,Davis,CA95616 fwilken,jjliu,meheffg@ece.ucdavis.edu Abstract{Thispaperpresentsanewapproachto \nlocalinstructionschedulingbasedonintegerprogramming thatproducesoptimalinstructionschedulesinareasonable \ntime,evenforverylargebasicblocks.Thenewapproach frstusesasetofgraphtransformationstosimplifythedata\u00addependencygraphwhilepreservingtheoptimalityofthefnal \nschedule.Thesimplifedgraphresultsinasimplifedinteger programwhichcanbesolvedmuchfaster.Anewinteger\u00adprogrammingformulationisthenappliedtothesimplifed \ngraph.Varioustechniquesareusedtosimplifytheformu\u00adlation,resultinginfewerinteger-programvariables,fewer \ninteger-programconstraintsandfewertermsinsomeofthe remainingconstraints,thusreducinginteger-programsolu\u00adtiontime.Thenewformulationalsousescertainadap\u00adtivelyaddedconstraints(cuts)toreducesolutiontime.The \nproposedoptimalinstructionschedulerisbuiltwithinthe GnuCompilerCollection(GCC)andisevaluatedexperi\u00admentallyusingtheSPEC95foatingpointbenchmarks.Al\u00adthoughoptimalschedulingforthetargetprocessorisconsid\u00aderedintractable,allofthebenchmarks'basicblocksareop\u00adtimallyscheduled,includingblockswithupto1000instruc\u00adtions,whiletotalcompiletimeincreasesbyonly14%. \n1Introduction Instructionschedulingisoneofthemostimportantcompiler optimizationsbecauseofitsroleinincreasingpipelineuti\u00adlization.Conventionalapproachestoinstructionscheduling \narebasedonheuristicsandmayproduceschedulesthatare suboptimal.Priorworkhasconsideredoptimalinstruction \nscheduling,butnoapproachhasbeenproposedthatcan optimallyschedulealargenumberofinstructionsinreason\u00adabletime.Thispaperpresentsanewapproachtooptimal \ninstructionschedulingwhichusesacombinationofgraph transformationsandanadvancedinteger-programmingfor\u00admulation.Thenewapproachproducesoptimalschedules \ninreasonabletimeevenforschedulingproblemswith1000 instructions. ThisresearchwassupportedbyEquatorTechnologies,Men\u00adtorGraphics'EmbeddedSoftwareDivision,MicrosoftResearch,the \nNationalScienceFoundation'sCCRDivisionundergrant#CCR\u00ad9711676,andbytheUniversityofCalifornia'sMICROprogram. \nPermission to make digital or hard copies of all or part of this work for personal or classroom use is \ngranted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, or republish, \nto post on servers or to redistribute to lists, requires prior specific permission and/or a fee. PLDI \n2000, Vancouver, British Columbia, Canada. Copyright 2000 ACM 1-58113-199-2/00/0006 $5.00. 1.1LocalInstructionScheduling \nThelocalinstructionschedulingproblemistofndamin\u00adimumlengthinstructionscheduleforabasicblock.This instructionschedulingproblembecomescomplicated(inter\u00adesting)forpipelinedprocessorsbecauseofdatahazardsand \nstructuralhazards[11].Adatahazardoccurswhenanin\u00adstructioniproducesaresultthatisusedbyafollowingin\u00adstructionj,anditisnecessarytodelayj'sexecutionuntil \ni'sresultisavailable.Astructuralhazardoccurswhena resourcelimitationcausesaninstruction'sexecutiontobe \ndelayed. Thecomplexityoflocalinstructionschedulingcande\u00adpendonthemaximumdata-hazardlatencywhichoccurs \namongthetargetprocessor'sinstructions.Inthispaper, latencyisdefnedtobethediferencebetweenthecycle inwhichinstructioniexecutesandthefrstcycleinwhich \ndata-dependentinstructionjcanexecute.Notethatother authorsdefnelatency(delay)tobethecyclediferencemi\u00adnusone,e.g.,[2,17].Wepreferthepresentdefnitionbe\u00adcauseitnaturallyallowswrite-after-readdatadependencies \ntoberepresentedbyalatencyof0(write-after-readdepen\u00addentinstructionscanexecuteinthesamecycleonatypical \nmultiple-issueprocessor,becausethereadoccursbeforethe writewithinthepipeline). Instructionschedulingforasingle-issueprocessorwith \namaximumlatencyoftwoiseasy.Instructionscanbe optimallyscheduledinpolynomialtimefollowingtheap\u00adproachproposedbyBernsteinandGertner[2].Instruc\u00adtionschedulingformorecomplexprocessorsishard.No \npolynomial-timealgorithmisknownforoptimallyschedul\u00adingasingle-issueprocessorwithamaximumlatencyofthree \normore[2].OptimalschedulingisNP-completeforrealistic multiple-issueprocessors[3].Becauseoptimalinstruction \nschedulingforthesemorecomplexprocessorsisconsidered intractable,productioncompilersusesuboptimalheuristic \napproaches.Themostcommonapproachislistscheduling, whereinstructionsarerepresentedasnodesinadirected acyclicdata-dependencygraph(DAG)[15].Agraphedge \nrepresentsadatadependency,anedgeweightrepresentsthe correspondinglatency,andeachDAGnodeisassigneda priority.Critical-pathlistschedulingisacommonvariation, \nwhereaninstruction'spriorityisbasedonthemaximum\u00adlengthpaththroughtheDAGfromthenoderepresenting theinstructiontoanyleafnode[15].Whilecritical-pathlist \nschedulingisusuallyefective,itcanproducesuboptimalre\u00adsultsevenforsmallschedulingproblems.ConsidertheDAG \ninFigure1,takenfrom[17],whereeachedgeislabeledwith itslatencyandeachnodeislabeledwithitscritical-path \n 22 2 22 22 00 Figure1:Simpleexamplewherecritical-pathlistscheduling canproduceasuboptimalschedule. \npriority.ForthisDAG,nodesA,BandCallhavethesame priority,sotheschedulercanarbitrarilyselecttheorderof \ntheseinstructions.IftheinitialorderisA,C,BorC,A, B,thenextcyclewillbeastallbecausethelatencyfromB toDorfromBtoEisnotsatisfed.OtherordersofA,B \nandCwillproduceanoptimalschedulewhichhasnostall. 1.2OptimalInstructionScheduling Althoughoptimalinstructionschedulingforcomplexproces\u00adsorsishardintheory,inpracticeitmaybepossibletoop\u00adtimallysolveimportantinstancesofinstructionscheduling \nproblemsinreasonabletimeusingmethodsfromcombinato\u00adrialoptimization.Priorworkhasusedvariouscombinatorial \noptimizationapproachestooptimallyscheduleinstructions forcomplexprocessors.Howevernoneoftheseapproaches \ncanoptimallyschedulelargebasicblocksinreasonabletime. ErtlandKrall[8]useconstraintlogicprogrammingand \nconsistencytechniquestooptimallyscheduleinstructionsfor asingle-issueprocessorwithamaximumlatencygreater \nthantwo.Vegdahl[23]andKessler[13]usedynamicpro\u00adgrammingtooptimallyscheduleinstructions.Chouand Chung[6]andTomiyamaetal.[22]useapproachesthat \nimplicitlyenumerateallpossibleschedulestofndanopti\u00admalschedule.Forefciency,[6]and[22]proposetechniques \ntoprunetheenumerationtreesothatredundantorequiv\u00adalentschedulesarenotexplicitlyenumerated.Experimen\u00adtalresultsforthesevariousapproachesshowthattheyare \nefectiveonlyforsmalltomedium-sizedbasicblocks(30in\u00adstructionsorless). Priorworkhasalsousedintegerprogrammingtoopti-mallyscheduleinstructions.Anintegerprogramisalinear \nprogram,withtheaddedrequirementthatallproblemvari\u00adablesmustbeassignedasolutionvaluethatisaninteger. Liketheotherapproachestooptimalinstructionschedul\u00ading,priorworkusingintegerprogramminghasonlypro\u00adducedapproachesthatareefectiveforsmalltomedium\u00adsizedschedulingproblems.Arya[1]proposesanintegerpro\u00adgrammingformulationforvectorprocessors,althoughthe \nbasicapproachisgeneralandcanbeappliedtootherpro\u00adcessortypes.Theexperimentalresultsin[1]suggestthe formulationcansignifcantlyimprovetheinstructionsched\u00adule.However,theresultsarelimitedtoonlythreesmallto \nmedium-sizedproblems(12to36instructions).Onlythe smallestproblemissolvedoptimally,withtheotherprob\u00adlemstimingoutbeforeanoptimalsolutionisfound.Leupers \nandMarwedel[14]proposeanintegerprogrammingformu\u00adlationforoptimallyschedulingamultiple-issueprocessor. \nAlthoughtheirworkfocusesonDSPprocessors,againthe basicapproachisgeneralandcanbeusedforotherprocessor \ntypes.Theexperimentalresultsin[14]arealsolimitedtoa fewsmalltomedium-sizedproblems(8to37instructions). \nWhilethesolutiontimemightbeacceptableforthelargest problemstudied(37instructionssolvesin130seconds),the \nsolutiontimedoesnotappeartoscalewellwithproblemsize (thenextsmallerproblem,24instructions,solvesin7sec\u00adonds).Thustheapproachdoesnotappearpracticalforlarge \ninstructionschedulingproblems.Chang,ChenandKing[5] proposeanintegerprogrammingformulationthatcombines \nlocalinstructionschedulingwithlocalregisterallocation. Experimentalresultsaregivenforonesimple10-instruction \nexamplewhichtakes20minutestosolveoptimally.These resultssuggestthattheapproachhasverylimitedpractical\u00adity. \nAlthoughpriorworkusingintegerprogramminghaspro\u00adducedlimitedsuccessforoptimalinstructionscheduling,in\u00adtegerprogramminghasbeenusedsuccessfullytooptimally \nsolvevariousothercompileroptimizationproblems,includ\u00adingarraydependenceanalysis[19],datalayoutforparal\u00adlelprograms[4]andglobalregisterallocation[9].Inte\u00adgerprogrammingisthemethodofchoiceforsolvingmany \nlarge-scalereal-worldcombinatorialoptimizationproblems inotherfelds[16],includingotherschedulingproblemssuch \nasairlinecrewscheduling.Thissuccessfuluseofinteger programmingelsewheresuggeststhatimprovedintegerpro\u00adgrammingformulationsmaybethekeytosolvinglarge-scale \ninstructionschedulingproblems. Thispaperpresentsanewapproachtooptimalinstruc\u00adtionschedulingbasedonintegerprogramming,thefrstap\u00adproachwhichcansolveverylargeschedulingproblemsin \nreasonabletime.Thepaperisorganizedasfollows.Section 2describesabasicinteger-programmingformulationforop\u00adtimalinstructionscheduling,whichisrepresentativeoffor\u00admulationsproposedinpriorwork.ThematerialinSection \n2providesthereaderwithbackgroundonhowinstruction schedulingcanbeformulatedasanintegerprogramming problem,andprovidesabasisforcomparingthenewinteger\u00adprogrammingformulation.ExperimentalresultsinSection \n2showthatthebasicformulationcannotsolvelargeinstruc\u00adtionschedulingproblemsinreasonabletime,whichisconsis\u00adtentwiththeresultsfrompriorwork.Section3introduces \nasetofDAGtransformationswhichcansignifcantlysim\u00adplifytheDAG,whilepreservingtheoptimalityofthesched\u00adule.ThesimplifedDAGleadstosimplifedintegerpro\u00adgramswhichareshownexperimentallytosolvesignifcantly \nfaster.Section4introducesanewinteger-programmingfor\u00admulationthatsimplifestheintegerprogrambyreducingthe \nnumberofinteger-programvariables,reducingthenumber ofinteger-programconstraints,andsimplifyingthetermsin \nsomeoftheremainingconstraints.Thesimplifedinteger programsareshownexperimentallytosolvedramatically faster.Thelastsectionsummarizesthepaper'scontribu\u00adtionsandoutlinesfuturework. \n2BasicInteger-ProgrammingFormulation Thissectiondescribesabasicinteger-programmingformula\u00adtionforoptimalinstructionscheduling,whichisrepresenta\u00adtiveofformulationsproposedinpriorwork.Thebasicfor\u00admulationprovidesbackgroundfortheDAGtransformations \npresentedinSection3andthenewinteger-programming formulationpresentedinSection4. 2.1OptimalInstructionScheduling,BasicFormulation \nInthebasicformulation,thebasicblockisinitiallysched\u00aduledusingcritical-pathlistscheduling.ThelengthUofthe \nresultingscheduleisanupperboundonthelengthofan optimalschedule.Next,alowerboundLontheschedule lengthiscomputed.GiventheDAG'scriticalpathcand \ntheprocessor'sissuerater,alowerboundontheschedule forabasicblockwithninstructionsis: x,x,...,x1 1 1 \n2 1 n C1 x,x,...,x1 2 2 n 22 C2 x,x,...,x1 3 3 2 3 n C3 x,x,...,x1 4 4 2 4 n C4 x,x,...,x1 2 5 n 5 5 \nC5  mm Cm x,x,...,x m 12 n Figure2:Thearrayof0-1schedulingvariablesforabasic blockwithninstructionsforascheduleofmclockcycles. \nL=1+maxfc,dnlre-1g IfU=L,thescheduleisoptimal,andanintegerprogram isunnecessary.IfUL,anintegerprogramisproduced(as \ndescribedbelow)tofndalengthU-1schedule.Iftheinte\u00adgerprogramisinfeasible,thelengthUscheduleisoptimal. \nOtherwisealengthU-1schedulewasfoundandasecond integerprogramisproducedtofndalengthU-2sched\u00adule.Thiscyclerepeatsuntilaminimum-lengthscheduleis \nfound. Toproduceanmclock-cyclescheduleforann-instruction basicblock,a0-1integer-programschedulingvariableiscre\u00adatedforeachinstruction,foreachclockcycleintheschedule. \nTheschedulingvariablexjrepresentsthedecisiontosched\u00ad i ule(1)ornotschedule(0)instructioniinclockcyclej.The \nschedulingvariablesforthecorrespondingclockcyclesare illustratedinFigure2. Asolutionfortheschedulingvariablesmustbecon\u00adstrainedsothatavalidscheduleisproduced.Aconstraint \nisusedforeachinstructionitoensurethatiisscheduledat exactlyoneofthemcycles,amust-scheduleconstraintwith \nthefollowingform: m X xij=1 j.1 Additionalconstraintsmustensuretheschedulemeets theprocessor'sissuerequirements.Considerastatically \nscheduledr-issueprocessorthatallowsanyrinstructions toissueinagivenclockcycle,independentoftheinstruc\u00adtiontype.Forthisr-issueprocessor,anissueconstraintof \nthefollowingformisusedforeachclockcyclej: n X xj.r i i.1 Ifamultiple-issueprocessorhasissuerestrictionsforvar\u00adioustypesofinstructions,aseparateissueconstraintcanbe \nusedforeachinstructiontype[14]. Asetofdependencyconstraintsisusedtoensurethat thedatadependenciesaresatisfed.Foreachinstructioni, \nthefollowingexpressionresolvestheclockcycleinwhichi isscheduled: m X j*xj i j.1 Becauseonlyonexivariableissetto1andtherestare \nsetto0inanintegerprogramsolution,theexpressionpro\u00adducesthecorrespondingcoefcientj,whichistheclockcycle \ninwhichinstructioniisscheduled.Usingthisexpression,a dependencyconstraintofthefollowingformisproducedfor \neachedgeintheDAGtoenforcethedependencyofinstruc\u00adtionioninstructionk,wherethelatencyfromktoiisthe constantLki: \nm m X X j*xj k+Lki . j*xj i j.1 j.1 Priorworkhasproposedabasicmethodforsimplifying theintegerprogramandhencereducinginteger-programso\u00adlutiontime.Upperandlowerboundscanbedetermined \nforthecycleinwhichaninstructionicanbescheduled, therebyreducinganinstruction'sschedulingrange.Allofi's \nschedulingvariablesforcyclesoutsidetheschedulingrange setbyi'supperandlowerboundsareunnecessaryandcan \nbeeliminated.Afterschedulingrangereduction,ifanyin\u00adstruction'sschedulingrangeisempty(itsupperboundis \nlessthanitslowerbound),nolengthmscheduleexistsand anintegerprogramisnotneeded. Chang,ChenandKingproposeusingthecriticalpath \ndistancefromanyleafnode(anyrootnode)orthenumber ofsuccessors(predecessors)todetermineanupperbound (lowerbound)foreachinstruction[5].Forther-issuepro-cessordefnedabove,alowerboundLioni'sscheduling \nrangeissetby: Li=1+maxfcri,d(1+pi)lre-1g (1) wherecriisthecriticalpathdistancefromanyrootnode toi,andpiisthenumberofi'spredecessors.Similarly,an \nupperboundUioni'sschedulingrangeissetby: Ui=m-maxfcli,d(1+si)lre-1g(2) wherecliisthecriticalpathdistancefromitoanyleafnode, \nandsiisthenumberofi'ssuccessors. Collectively,thereducedsetofschedulingvariables,the must-scheduleconstraints,theissueconstraints,andthede\u00adpendencyconstraintsconstituteabasic0-1integerprogram\u00admingformulationforfndingascheduleoflengthm.Applied \niterativelyasdescribedabove,thisformulationproducesan optimalinstructionschedule. 2.2BasicFormulation,ExperimentalResults \nThebasicformulationisbuiltinsidetheGnuCompilerCol\u00adlection(GCC),andiscomparedexperimentallywithcritical\u00adpathlistscheduling.Asshownin[2],optimalinstruction\u00adschedulingforasingle-issueprocessorwithatwo-cyclemax\u00adimumlatencycanbedoneinpolynomialtime.However, \noptimalschedulingforasingle-issueprocessorwithathree\u00adcyclemaximumlatency,thenextharderschedulingproblem, \nisconsideredintractable[2].Ifthiseasiesthardschedul\u00adingproblemcannotbesolvedoptimallyinreasonabletime, \nthereislittlehopeforoptimallyschedulingmorecomplex processors.Thus,thispaperfocusesonoptimalschedul\u00adingforasingle-issueprocessorwithathree-cyclemaximum \nlatency. TheSPEC95foatingpointbenchmarkswerecompiled usingGCC2.8.0withGCC'sinstructionschedulerreplaced \nbyanoptimalinstructionschedulerusingthebasicformula\u00adtion.ThebenchmarkswerecompiledusingGCC'shighest levelofoptimization(-O3)andweretargetedtoasingle\u00adissueprocessorwithamaximumlatencyofthreecycles.The \ntargetprocessorhasalatencyof3cyclesforloads,2cycles forallfoatingpointoperationsand1cycleforallinteger \n operations.TheSPEC95integerbenchmarksarenotin\u00adcludedinthisexperimentbecauseforthisprocessormodel therewouldbenoinstructionswitha2-cyclelatency,which \nmakestheschedulingproblemseasiertosolve. Theoptimalinstructionschedulerisgivena1000second timelimittofndanoptimalschedule.Ifanoptimalsched\u00aduleisnotfoundwithinthetimelimit,thebestimproved \nscheduleproducedusingintegerprogramming(ifany)isse\u00adlected,otherwisethescheduleproducedbylistschedulingis \nselected.TheintegerprogramsaresolvedusingCPLEX6.5, acommercialinteger-programmingsolver[12],runningon \nanHPC3000workstationwitha400MHzPA-8500proces\u00adsorand512MBofmainmemory.Theexperimentalresults forthebasicformulationareshowninTable1. \nBasicFormulation TotalBasicBlocks(BB) BBfromListScheduling showntobeOptimalw/oIP BBPassedtoIPFormulation \nBBIPSolvedOptimally BBIPTimedOut BBIPImprovedandOptimal BBIPImprovedbutNon-Optimal TotalCyclesIPImproved \nTotalSchedulingTime(sec.) 7,402 6,885 517 482 35 15 0 15 35,879 Table1:Experimentalresultsusingthebasicintegerpro\u00adgrammingformulation. \nVariousobservationsaremadeaboutthesedata.First, usingonlylistschedulingmostoftheschedules,6,885(93%), \nareshowntobeoptimalbecausetheupperboundUequals thelowerboundLorbecauseafterschedulingrangereduc\u00adtionforascheduleoflengthU.1,aninstruction'sschedul\u00adingrangeisempty.Thisisnotsurprisingbecausethisgroup \nofbasicblocksincludessuchtrivialproblemsasbasicblocks withoneinstruction.Forthe517non-trivialproblemsthat \nrequireanintegerprogram,482(93%)aresolvedoptimally and35(7%)arenotsolvedusingatotalof35,879CPUsec\u00adonds(10.0hours).Asapointofreference,theentirebench\u00admarksuitecompilesin708seconds(11.8minutes)whenonly \nlistschedulingisused.Thus,thebasicformulationfailsin twoimportantrespects:notallbasicblocksarescheduled \noptimally,andtheschedulingtimeislong.Only15ofthe basicblocks(3%ofthenon-trivialbasicblocks)haveanim\u00adprovedschedule,andthetotalstaticcycleimprovementis \nonly15cycles,amodestspeedup.Speedupwillbemuch higherforamorecomplexprocessor(longerlatencyand widerissue).Forexample,resultsin[21]forthemultiple\u00adissueAlpha21164processorshowthatlistschedulingissub\u00adoptimalformorethan50%ofthebasicblocksstudied.The \nproperconclusiontodrawfromtheresultsinTable1isnot thatoptimalinstructionschedulingdoesnotprovidesig\u00adnifcantspeedup,butthatthebasicinteger-programming \nformulationcannotproduceoptimalschedulesinreasonable time,evenfortheeasiestofthehardschedulingproblems. \nAmuchbetterapproachtooptimalinstructionscheduling isneeded. 3DAGTransformations Asetofgraphtransformationsisproposedwhichcansim\u00adplifytheDAGbeforetheintegerprogramisproduced.These \ntransformationsarefast(low-orderpolynomialtimeinthe sizeoftheDAG)andareshowntopreservetheoptimality ofthefnalschedule.Theintegerprogramproducedfroma \ntransformedDAGissignifcantlysimplifedandsolvesmuch faster. 3.1DAGStandardForm Thetransformationsdescribedinthefollowingsectionsare \nforDAGsinstandardform.ADAGinstandardformhas asinglerootnodeandasingleleafnode.ADAGwith multipleleafandrootnodesistransformedintoaDAGin \nstandardformbyaddinganartifcialleafnodeandanar\u00adtifcialrootnode.Theartifcialrootnodeistheimmediate predecessorofallrootnodes.Alatency-oneedgeextends \nfromtheartifcialrootnodetoeachrootnodeintheDAG. Similarly,anartifcialleafnodeistheimmediatesuccessor \nofallDAGleafnodes.Alatency-oneedgeextendsfrom eachleafnodeoftheDAGtotheartifcialleafnode.These artifcialnodesdonotafecttheoptimalschedulelengthof \ntheoriginalDAGnodesandareremovedafterschedulingis complete. 3.2DAGPartitioning SomeDAGscanbepartitionedintosmallersubDAGswhich \ncanbeoptimallyscheduledindividually,andthesubDAG schedulescanberecombinedtoformaschedulethatisop\u00adtimalfortheentireDAG.Partitioningisadvantageousbe\u00adcausetheinteger-programsolutiontimeissuper-linearin \nthesizeoftheDAG,andthusthetotaltimetosolvethe partitionsislessthanthetimetosolvetheoriginalprob\u00adlem.Partitioningisalsoadvantageousbecauseeventhough \ntheoriginalDAGmayrequireanintegerprogramtofnd itsoptimalschedule,oneormorepartitionsmaybeoptimal fromlistschedulingandanintegerprogramisnotrequired \nforthosepartitions. ADAGcanbepartitionedatapartitionnode.Apar\u00adtitionnodeisanodethatdominatestheDAG'sleafnode \nandpost-dominatesitsrootnode.Apartitionnodeforms abarrierintheschedule.Nonodesaboveapartitionnode maybescheduledafterthepartitionnode,andnonodes \nbelowthepartitionnodemaybescheduledbeforetheparti\u00adtionnode.Anefcientalgorithmforfndingpartitionnodes \nisdescribedinSection3.5.1.Thealgorithm'sworst-caseex\u00adecutiontimeisO(e),whereeisthenumberofedgesinthe \nDAG. Figure3ashowsaDAGwhichcanbedividedintotwo partitionsatpartitionnodeD.NodesA,B,C,andD formonepartition,andnodesD,E,F,andGformthe \notherpartition.Asillustrated,thetwopartitionsareeach optimallyscheduled,andtheschedulesarethencombined \ntoformanoptimalschedulefortheentireDAG. 3.3RedundantEdgeElimination ADAGmayincluderedundantedges.Anedgebetween \nnodesAandB(edgeAB)isredundantifthereisanother pathPAB fromAtoB,andthedistancealongPABisgreater thanorequaltothedistanceacrossedgeAB \n.Thedistance alongapathisthesumofthelatenciesofthepath'sedges. Thedistanceacrossanedgeistheedge'slatency.Inasched\u00aduleoftheDAGnodes,edgeAB \nenforcesthepartialorderof AandBandtheminimumlatencybetweenAandB.How\u00adever,becausePABenforcesbothoftheseconditions,edgeAB \nisunnecessaryandcanberemoved.EachDAGedgerequires adependencyconstraintintheintegerprogram.Therefore, \n InFigure4,edgeBisaredundantedgewhichcanbe removed.WhenedgeE isremoved,theDAGisreducedto BE theDAGshowninFigure3,whichcanthenbepartitioned. \n3.4RegionLinearization RegionlinearizationisaDAGtransformationwhichorders thesetofnodescontainedinaregionoftheDAG.Aregion \nRisdefnedbyapairofnodes,theentrynodeAandthe exitnodeB.RisthesubDAGinducedbynodeA,node B,andallnodesthataresuccessorsofAandpredecessors \nofB,nodeswhicharecalledtheregion'sinteriornodes.R mustcontaintwodisjointpathsfromAtoBandeachpath mustincludeanodeotherthanAorB.Figure5shows \nthreeexampleregionsinsidetherectangles.ForregionEI inFigure5b,nodeEistheentrynode,nodeIistheexit node,nodesF,G,andHaretheinteriornodes,andnode \nXisexternaltotheregion. Inregionlinearization,listschedulingisusedtoproduce aschedulefortheinstructionsineachDAGregion.Under \ncertainconditions(describedbelow),theoriginalregionsub\u00adDAGcanbereplacedbyalinearchainoftheregion'snodes \nintheorderdeterminedbylistscheduling,whilepreserving theoptimalityofthefnaloverallschedule.Thiscansignif\u00adicantlysimplifytheDAG,andhencetheintegerprogram. \nThispaperconsidersregionlinearizationforasingle-issue processor.Regionlinearizationformultiple-issueprocessors \nisalsopossibleandwillbeconsideredinafuturepaper.   (a) (b) (c) Figure5:ExampleregionsinaDAG. 3.4.1Single-EntrySingle-ExitRegions \nAnorderOofthenodesinaregioncanbeenforcedwhile preservingoptimalityifforeveryoptimalscheduleofthe DAG,theregion'snodescanbereorderedtotheorderO, \nproducingavalidschedulewiththesamelength.Anorder Othatsatisfesthisconditionisadominantorderforthe region.Thesimplesttypeofregionforwhichadominantor\u00addercanbefoundisasingle-entry,single-exit(SESE)region. \nAnSESEregionisaregionwheretheentrynodedominates theinteriornodes,andtheexitnodepost-dominatesthein\u00adteriornodes.Figure5aillustratesanSESEregion.SESE \nregionscanbefoundinO(n)time[18]. Theorem1:IfthescheduleofanSESEregionmeetsthe followingconditions,thentheschedule'snodeorderOisa \ndominantorderoftheregion'snodes: .Thescheduleoftheinteriornodesisdense.Aschedule isdenseiftheschedulecontainsnoemptycycles. \n.ThefrstinteriornodeinorderOhasanincomingedge intheDAGthatisoneoftheminimum-latencyedges outgoingfromtheentrynodetotheregion'sinterior. \n.ThelastinteriornodeinorderOhasanoutgoingedge intheDAGthatisoneoftheminimum-latencyedges incomingtotheexitnodefromtheregion'sinterior. \nProof:AssumeanoptimalschedulewheretheSESEre\u00adgion'snodesareinorder.Removetheregion'snodes O0 fromtheschedule.ThenodesinorderOcanalwaysbe \nplacedinthevacanciesleftbytheremovednodes.Theen\u00adtrynodeinorderOwillremainthefrstregionnodeinthe scheduleandtheexitnodewillremainthelastregionnode \nintheschedule.Thus,orderOsatisfesthelatenciesbe\u00adtweentheregion'snodesandtheexternalnodes.Avacancy cannotoccurwithintheminimumlatencyfromtheentry \nnodetotheinteriornodes,norwithintheminimumlatency totheexitnodefromtheinteriornodes.Therefore,thela\u00adtenciestothefrstinteriornodeandfromthelastinterior \nnodeinorderOaresatisfed.Ifthescheduleofthevacan\u00adciesleftbytheinteriornodesinorderO0 isdense,thenthe interiornodeschedulefororderOcanbeplaceddirectlyin \nthevacancies.Or,ifthescheduleofthevacanciesleftby theinteriornodesoforderO0 isnotdense,thedensesched\u00aduleoforderO'sinteriornodescanbestretchedtomatch \nthescheduleofthevacancies.Thelatenciesinthestretched schedulebetweentheinteriornodesaresatisfed,because \nthelatenciesaregreaterthanorequaltothelatenciesin thedensescheduleoftheinteriornodesoforderO.2 AdominantorderforanSESEregioncanbeenforced \ninaDAGbyreplacingtheregionsubDAGbyasubDAG withtheregion'snodesinthedominantorder.Theinterior   2 22 \n  1 1 11 1 1 32 2 2 (a) (b) (c) (d) Figure6:Examplesofregionlinearizationtransformation. nodesinthetransformedregionareseparatedbylatencyone \nedges.Theentrynodeisseparatedfromthefrstinterior nodeandthelastinteriornodeisseparatedfromtheexit nodebythesameedgesthatoccurbetweenthesenodesin \ntheoriginalDAG.FortheDAGinFigure6a,thenodeorder A,B,C,D,E,Fisadominantorder.Figure6bshowsthe regionafterthelinearizationtransformation. \n3.4.2Non-SESEregions RegionswhicharenotSESEregionscontainside-exitnodes andside-entrynodes.Aside-exitnodeisaninteriornode \nwithanimmediatesuccessorthatisnotaregionnode.A side-entrynodeisaninteriornodewithanimmediatepre\u00addecessorthatisnotaregionnode.Figures5band5care \nexamplesofnon-SESEregions.InFigure5b,nodeGisa side-entrynode.InFigure5c,nodeKisaside-exitnode. Theconditionsforlinearizingnon-SESEregionsaremore \nrestrictivethanthoseforSESEregionsbecauseoftheaddi\u00adtionaldependenciestoandfromnodesoutsidetheregion. \nTheorem2:Ifthescheduleofanon-SESEregionmeets thefollowingconditionsthentheschedule'snodeorderOis adominantorderoftheregion'snodes: \n.TheorderOsatisfestheconditionsforadominant orderofanSESEregion. .Allnodesthatprecedeaside-exitnodeinorderOare \npredecessorsoftheside-exitnodeintheDAG. .Allnodesthatfollowaside-entrynodeinorderOare successorsoftheside-entrynodeintheDAG. \nProof:Assumeanoptimalschedulewiththeregion'snodes inorder.Removetheregion'snodesfromtheschedule. O0 Theregion'snodesinorderOcanalwaysbeplacedinthe \nvacanciesleftbytheremovednodes.TheorderOsatisfes theconditionsforadominantscheduleforanSESEregion. Therefore,followingtheproofofTheorem1,thedependen\u00adciesbetweeninteriornodesaresatisfed.Similarly,thede\u00adpendenciesbetweennodesoutsidetheregionandtheregion \nentryandexitnodesaresatisfed.Onlythepredecessors ofaside-exitnodeintheDAGprecedetheside-exitnode inorderO.Therefore,theminimumnumberofnodespre\u00adcedeeachside-exitnodeinorderO.Iftheregionnodesare \nremovedfromthescheduleandreorderedinorderO,aside\u00adexitnodecannotbeplacedinavacancylaterthantheorigi\u00adnallocationoftheside-exitnodeintheschedule.Therefore, \nthedependenciesfromtheside-exitnodetonodesoutside theregionaresatisfed.Asymmetricargumentprovesthat 1 \n1 1 2 2 1 1 1 Figure7:ExampleDAGwithnodesinalinearsequence. thedependenciestoside-entrynodesfromnodesoutsidethe \nregionarealsosatisfed.2 AnalgorithmforfndingalloftheregionsinaDAGpar\u00adtitionisdescribedinSection3.5.3.Thealgorithm'sworst\u00adcaseexecutiontimeisO(nPeP)wherenPisthenumberof \nnodesandePisthenumberofedgesintheDAGpartition. InSection3.5.4,analgorithmforlinearizingaregionisde\u00ad 2 \nscribedwhichhasaworst-caseexecutiontimeofO(eP+nR), wherenRisthenumberofnodesintheregion. Figure6cshowsanon-SESEregionwithaside-entry \nnodeKandasideexitnodeI.ThenodeorderG,H,I, J,K,L,Misadominantorderfortheregion.Figure6d showstheregionafterthelinearizationtransformation. \n3.5EfcientAlgorithmsforDAGTransformations Thissectiondescribesasetofefcientalgorithmsforper\u00adformingtheDAGtransformationsdescribedinSection3.2 \nthroughSection3.4. 3.5.1DAGPartitioningAlgorithm Analgorithmisproposedforfndingthepartitionnodesof aDAG.IfaDAGisdrawnasasequenceofnodesina \ntopologicalsort[7],thenalledgesfromnodesprecedinga partitionnodeterminateatorbeforethepartitionnode. \nFigure7showstheDAGfromFigure3aredrawnasalinear sequenceinthetopologicalsortA,B,C,D,E,F,G.No edgeextendsacrossthedashedlinesatthepartitionnodes1. \nAnefcientalgorithmforfndingpartitionnodesiterates throughthenodesoftheDAGinatopologicalsortO= (N1::: \nNn),wherenisthenumberofnodesintheDAG. Avariablelatestismaintainedacrosstheiterationsofthe algorithm.latestequalsthelatestimmediatesuccessorof \nanynodebeforethenodeofthecurrentiteration.Initially, latestissetequaltotherootnode.Partitionnodesare \ndeterminedandlatestisupdatedasfollows: fori.1ton ifNi=latest Niisapartitionnode foreachNk2S(Ni) ifNkislaterinOthanlatest \nlatest.Nk whereS(Ni)isthesetofimmediatesuccessorsofNi. TheoriginalinstructionorderoftheDAGnodesbefore \ninstructionschedulingcanbeusedasthetopologicalsort forthealgorithm.EachDAGedgeandnodeisconsidered onlyonceintheexecutionofthealgorithm.Therefore,the \nalgorithmrunsinO(n+e)time,wherenisthenumberof nodesandeisthenumberofedges. Table2illustratestheexecutionofthealgorithmonthe \nexampleDAGinFigure7.Thecolumn`currentlatest' indicatesthevalueoflatestatthestartoftheiteration. Thecolumn`newlatest'indicatesthevalueoflatestat \ntheendoftheiteration. 1TherootandleafnodesofaDAGare,bydefnition,partition nodes. iterationi Ni currentlatest \nnewlatest partition node? 1234567 ABCDEFG ACDDFGG CDDFGGG yes no no yes no no yes Table2:Executionofthepartitioningalgorithmonthe \nDAGinFigure7. 3.5.2AnAlgorithmforFindingRedundantEdges Anefcientalgorithmisproposedforfndingtheredundant \nedgesofapartition.Thealgorithmiteratesthroughall nodesinthepartitionexceptthelastnode.Ateachitera\u00adtion,eachedgeextendingfromthecurrentnodeiscompared \nwithparallelpathsintheDAG.LetO=(N1,:::,NnP)be atopologicalsortofthepartitionnodes,wherenPisthe numberofnodesinthepartition.Redundantedgesarede\u00adterminedasfollows: \nfori.1tonP-1 foreachNj2S(Ni) foreachNk2S(Ni),whereNk=6Nj ifl(edgeNiNk)+D(Nk,Nj):l(edgeNiNj) edgeNiNjisredundant \nwhereS(Ni)isthesetofimmediatesuccessorsofnodeNi intheDAG,andl(edgeNiNk)isthelatencyofedgeNiNk. D(Nk,Nj)isthecritical-pathdistanceintheDAGfrom \nnodeNktonodeNj.D(Nk,Nj)=-1ifnopathexists fromNktoNi. Theeliminationofredundantedgesrequiresthecritical\u00adpathdistancebetweenallnodesinthepartition.Analgo\u00adrithmdescribedin[7]calculatesthecritical-pathdistance \nfromonenodeofaDAGtoeveryothernodeintheDAG. Theworst-caseexecutiontimeofthisalgorithmisO(eP), whereePisthenumberofedgesintheDAGpartition. \nTherefore,theworst-caseexecutiontimeforcalculatingthe critical-pathdistancesbetweenallnodesofthepartitionis \nO(nPeP),wherenPisthenumberofnodesintheparti\u00adtion.Oncecritical-pathdistancesarecalculated,thealgo\u00adrithmforfndingredundantedgesiteratesthrougheachedge \nedgeNiNjofthepartitiononce.Ateachiteration,edgeNiNj iscomparedwithallotheredgesextendingfromthesame nodeNi.Thenumberofedgeswhichmayextendfroma \nsinglenodeisO(nP).Therefore,theworst-caseexecution timeoftheredundant-edgefndingalgorithmisO(nPeP). 2 \nAlthoughthenumberofedgesinapartitioncanbeO(nP), theDAGsfromtheexperimentsdescribedin2.2generally haveO(nP)edges. \n3.5.3AnAlgorithmforFindingRegions Anefcientalgorithmisproposedforfndingtheregionsin apartition.Section3.4defnesaregionbyconditionson \nthepathsfromtheregion'sentrynodetoitsexitnode.A regionmaybeequivalentlydefnedbyrelativedominance. NodeCdominatesnodeBrelativetonodeAifeverypath \nintheDAGfromAtoBincludesC,andC6A. =Under thisdefnition,nodeBdominatesitselfrelativetoA.Let R(A,B)bedefnedasthedominatorofBrelativetoAwhich \nisearliestinatopologicalsort.IfAisapredecessorofB, R(A,B)isuniquelydefnedbecauseeachdominatorofB relativetoAisnecessarilyapredecessororsuccessorofany \notherdominatorofBrelativetoA.IfAisnotapredecessor ofBorA=B,R(A,B)isundefned. Theorem3:NodesAandBdefnearegionifandonly \nifthereexisttwoimmediatepredecessorsofB,nodesI1 andI,forwhichR(A,I)andR(A,I)aredefnedand 212 R(A,I)=6R(A,I). \n12 Proof:LetI1andIbeimmediatepredecessorsofB,and 2 R(A,I1)andR(A,I2)aredefnedandR(A,I1)6R(A,I). =2 BecauseR(A,I1)6R(A,I),acommondominatorofI1and=2 \nI2relativetoAdoesnotexist(excludingA).Accordingly, theremustexistdisjointpathsPAI1fromAtoI1andPAI2 fromAtoI2.PAI1concatonatedwithedgeI1BandPAI2 \nconcatonatedwithedgeI2BdefnetwodisjointpathsfromA toB.Therefore,AandBdefnearegion. LetnodesA0 andB0 defnearegion.Bydefnition,there \nexisttwodisjointpathsPA0B0 andA0B0 fromand. P0 A0 B0 P0 PA0B0 andA0B0 musteachincludeadiferentimmediate \npredecessorof,nodesandrespectively.Aisapre- B0 I0 I0 I0 I0 12 decessorofand2 soR(A,I0)andR(A,I20)aredefned, \nandR(A,I0)6R(A,I0)becausethereexistdisjointpaths 1=1 I10 2I0 fromAto1 andfromAto2 .2 LetO=(N1,::,Nn)beatopologicalsortofthenodes \ninapartition.ThevalueR(A,B)foreachpairofnodesA andBinthepartitioncanbedeterminedasfollows: fori.2ton \nforj.1toi ifR(Nj,Nk)isundefned8Nk2P(Ni) ifNj2P(Ni) R(Nj,Ni).Ni else R(Nj,Ni).undefned elseifR(Nj,Nk1)6=R(Nj,Nk2), \nforsomeNk12P(Ni),Nk22P(Ni)where R(Nj,Nk1)andR(Nj,Nk2)aredefned R(Nj,Ni).Ni NjandNidefnearegion else forsomeNk2P(Ni)whereR(Nj,Nk)isdefned \nR(Nj,Ni).R(Nj,Nk) whereP(Ni)isthesetofimmediatepredecessorsofnode NiintheDAG. Foreachiterationioftheouterloop,everyedgeter\u00adminatingatanodeprecedingNiinorderOisconsidered \nO(1)times.Therefore,theworstcaseexecutiontimeofthe algorithmisO(nPeP). 3.5.4AnAlgorithmforRegionLinearization \nAnalgorithmforregionlinearizationisproposedwhichuses critical-pathlistschedulingtofndascheduleSforaregion \nR.IfnodeorderOofSisadominantorderfortheregion RasdefnedinSection3.4thenOisenforcedbylinearizing theregionnodesintheDAG. \nTheregionfndingalgorithmdescribedinSection3.5.3 fndstheentrynodeandexitnodeforeachregionofaparti\u00adtion.Theinteriornodesoftheregioncanbedeterminedby \nperformingaforwarddepth-frstsearchfromtheentrynode andareversedepth-frstsearchfromtheexitnode.Nodes whicharetouchedinbothsearchesareinteriornodesofthe \nregion.Thesearchescanalsoidentifyside-entrynodesand side-exitnodes. ByTheorem2,inschedulinganon-SESEregionR,noin\u00adteriornodemaybescheduledbeforeaside-exitnodewhichis \nnotapredecessoroftheside-exitnodeintheDAG.Symmet\u00adrically,nointeriornodemaybescheduledafteraside-entry \nnodewhichisnotasuccessoroftheside-entrynodeinthe DAG.Toenforcetheseconstraintsduringregionscheduling, \ntemporaryedgesareaddedtotheregionsubDAG.Latency oneedgesareaddedfromeachside-exitnodetoeachinterior nodewhichisnotapredecessoroftheside-exitnode.Sim\u00adilarly,latencyoneedgesareaddedtoeachside-entrynode \nfromeveryinteriornodewhichisnotasuccessoroftheside\u00adentrynode.Ifthereexistsacycleinthedependencygraph \nTotalBasicBlocks(BB) 7,402 BBOptimalfromListScheduling 6885 BBOptimalfromDAGTransformations 143 BBPassedtoIPFormulation \n374 BBIPSolvedOptimally 368 BBIPTimedOut 6 BBIPImprovedandOptimal 23 BBIPImprovedbutNotOptimal 1 TotalCyclesIPImproved \n31 TotalSchedulingTime(sec.) 7,743 Table3:ExperimentalresultsusingDAGtransformationsafterthistransformation,nodominantorderfortheregion \nandthebasicinteger-programmingformulation. solvethemorevaluableproblemswithlargercycleimprove\u00ad ments.Overallthesedatashowthatgraphtransformation \nisfound.Thetemporarydependenciesareremovedafter schedulingtheregion. Afteraddingthetemporarydependencies,theregion \nnodesarescheduledusingcritical-pathlistscheduling.If thenodeorderOoftheresultingregionscheduleisadom\u00ad \ninantorderoftheregion,thentheregionislinearizedas describedinSection3.4. isanimportanttechnologyforproducingoptimalinstruc- \nFindingtheinteriornodesofaregionrequirestwodepth\u00adfrstsearchesofthepartition.Theworst-caseexecution timeofthesearchesisO(eP).Anon-SESEregionmay \nhaveO(nR)side-exitandside-entrynodes,wherenRisthe numberofnodesintheregion.Eachside-exitandside\u00adentrynodemayrequiretheadditionofO(nR)temporary \ndependencestoandfromotherregionnodes.Therefore, addingandremovingtemporarydependenciestoaregion tionschedulesinreasonabletime.Howeveradditionalnew \ntechnologyisclearlyneeded. 4AdvancedInteger-ProgrammingFormulation Thissectiondescribesanadvancedformulationforoptimal \ninstructionschedulingwhichdramaticallydecreasesinteger\u00adprogramsolutiontimecomparedwiththebasicformulation. \nhasaworst-caseexecutiontimeofO(n).Critical-pathlist R schedulingoftheregionhasaworst-caseexecutiontimeof \n4.1AdvancedScheduling-RangeReduction 2 O(n )[15].Ifadominantorderisproducedbylistschedul- R ing,replacingtheregionsubDAGwithalinearizedsubDAG \n2 AsdescribedinSection2.1,thebasicformulationusesa techniquethatcanreduceaninstruction'sschedulingrange, \nandhencethenumberofschedulingvariables.Signifcant additionalscheduling-rangereductionsarepossible. requiresthedeletionofO(nR)edgesandtheinsertionof \nO(nR)edges.Collectively,therefore,theworst-caseexecu\u00ad tiontimeoftheregionlinearizationalgorithmisO(eP \n2 +n R ). Thebasicformulationusesstaticrangereductionbased oncritical-pathdistanceorthenumberofsuccessorsand \n3.6DAGTransformations,ExperimentalResults TheexperimentdescribedinSection2.2wasrepeatedwith predecessors.Thistechniqueistermedstaticrangereduc\u00adtionbecauseitisbasedonstaticDAGproperties.Anaddi\u00ad \nGCC'sinstructionschedulerreplacedbyanoptimalinstruc\u00adtionschedulerthatincludestheDAGtransformationsand \nthebasicinteger-programformulation.Asbefore,eachba\u00adsicblockisfrstscheduledusinglistschedulingandtheba\u00adsicblockswithschedulesthatareshowntobeoptimalare \nremovedfromfurtherconsideration.Forthisexperiment, theDAGtransformationsarethenappliedtotheremaining \nbasicblocks,andthebasicblocksarescheduledagainusing listscheduling.Theresultingschedulesarecheckedforopti\u00admalityandthosebasicblockswithoutoptimalschedulesare \nthensolvedusingintegerprogramming.Theresultsfrom thisexperimentareshowninTable1. Variousobservationscanbemadebycomparingthedata \ninTable3withthedataobtainedusingonlythebasicfor\u00admulationinTable1.TheDAGtransformationsreducethe totalnumberofintegerprogramsby28%,to374from517. \nTheDAGtransformationsreducethenumberofintegerpro\u00adgramsthattimeoutby83%,to6from35.Totaloptimal schedulingtimeusingtheDAGtransformationsisreduced \nbyaboutfve-fold,to7743secondsfrom35,879seconds.The numberofbasicblocksthathaveanimprovedscheduleus\u00adingtheDAGtransformationsincreasesby60%,to24from \n15.Thereisa1cycleaveragescheduleimprovementfor the15blockswhichimprovedusingthebasicformulation alone.Theadditional9basicblockswhichimprovedusing \ntheDAGtransformationshaveanaverageimprovementof 1.8cycles.ThissuggeststhattheDAGtransformationshelp tionalcriterionforstaticrangereductionisproposedwhich \nusesthenumberofpredecessors(orsuccessors)andthemin\u00adimumlatencyfrom(orto)anyimmediatepredecessor(or successor).Forther-issueprocessordefnedearlier,ifin\u00adstructionihaspipredecessors,thepredecessorswilloccupy \natleastbpi/rccycles.Iftheminimumlatencyfromaprede\u00adcessorofitoiispredminli,icanbeschedulednosooner thancycle1+bpi/rc+predminli.Giventhisadditional \ncriterion,Equation1canbeextendedtocreateatighter lowerboundLioni'sschedulingrange: Li=1+maxfcri,d(1+pi)/re-1,bpi/rc+predminlig \nSymmetrically,Equation2canbeextendedtocreatea tighterupperboundUioni'sschedulingrange: Ui=m-maxfcli,d(1+si)/re-1,bsi/rc+succminlig \nwheresuccminliistheminimumlatencyfromitoasuc\u00adcessorofi. Anewrangereductiontechnique,iterativerangereduc\u00adtion,isproposed.Iterativerangereductionusesinitiallogi\u00adcalimplications(describedbelow)toreducethescheduling \nrangeofoneormoreinstructions.Thisrangereductionmay inturnallowtherangesofpredecessorsorsuccessorstobe \ntightened.Aninstructioni'slowerboundcanbetightened byselectingthemaximumof:   ThestaticlowerboundLi,or \n .Foreachimmediatepredecessorj,j'slowerboundplus thelatencyofedgeji. Thesecondcriterionallowsi'slowerboundtobetight\u00adenediterativelyasthelowerboundsofi'simmediatepre\u00addecessorsaretightenediteratively.Similarly,instructioni's \nupperboundcanbetightenedbyselectingtheminimumof: .ThestaticupperboundUi,or .Foreachimmediatesuccessorj,j'supperboundminus \nthelatencyofedgeij. Followinganinitiallogicalimplication,thepredecessor andsuccessorrangereductionsmayiterativelypropagate \nthroughtheDAGandmayleadtoadditionallogicalimpli\u00adcationsthatcanreduceschedulingranges.Thesenewlogical \nimplicationsmayinturnallowadditionalpredecessorand successorrangereductions.Thisprocesscaniterateuntil \nnofurtherreductionsarepossible. Forther-issueprocessordefnedearlier,alogicalim\u00adplicationcanbemadeforinstructionsthathaveaone-cycle \nschedulingrange.Ifaninstructionihasaone-cycleschedul\u00adingrangethatspanscycle,imustbescheduledatcycle Ck \nCk .Ifrinstructionswithone-cyclerangesmustbesched\u00aduledatcycle,nootherinstructioncanbescheduledat Ck Ck \nCk cycle.Thus,cyclecanberemovedfromtheschedul\u00ad ingrangeofanyotherinstructionjwhichincludescycleCk . Basedonj'srangereduction,therangesofj'spredecessors \nandsuccessorsmaybereduced.Thismayleadtoadditional instructionswithone-cycleranges,andtheprocessmayit\u00aderateforfurtherrangereductions. \nIterativerangereductioncanleadtoschedulingranges thatareinfeasible,whichimpliesthatnolengthmschedule \nexists.Twoinfeasibilitytestsare: .Theschedulingrangeofanynodeisemptybecauseits upperboundislessthanitslowerbound. \n.Foranyk-cyclerange,morethanrkinstructionshave schedulingrangesthatarecompletelycontainedwithin thekcycles,i.e.,theschedulingrangesviolatethepi\u00adgeonholeprinciple[10]. \nFigure8illustratesiterativerangereductionusingthe one-cyclelogicalimplicationforasingle-issueprocessor.Fig\u00adure8ashowseachnodelabeledwiththelowerandupper \nboundsthatarecomputedusingstaticrangereductionfor ascheduleoflengthsix2.NodesA,C,EandFhaveone\u00adcycleranges,sothecorrespondingcycles(1,2,5and6)are \nremovedfromtheschedulingrangesofallothernodes,re\u00adsultingintheschedulingrangesshowninFigure8b.Prede\u00adcessorandsuccessorrangescanthenbetightenedusingthe \niterativerangereductioncriterion,producingtheschedul\u00adingrangesshownin8c.Theresultingschedulingrangesare \ninfeasiblebecausenodeB'sschedulingrangeisempty. Asecondlogicalimplicationbasedonprobingisused toreduceschedulingrange.Probingisageneralapproach \nthatcanbeusedforpreprocessingany0-1integerprogram toimproveitssolutiontime[20].Probingselectsa0-1inte\u00adgerprogramvariableandattemptstoshowthatthevariable \ncannotbe1byassumingthevariable'svalueis1andthen showingthattheresultingproblemisinfeasible.Iftheprob\u00adlemisinfeasible,bycontradiction,thevariable'svaluemust \n2Listschedulingproducesalength7scheduleforthisDAG,so anintegerprogramisproducedtofndthenextshorterschedule,as \ndescribedinSection2.1. [1,1] [1,1] [1,1] 1111 11 [2,3] [2,2][2,2] [3,3] [2,2] [3,2] 2 32 32 3 [5,5][5,5] \n[4,4] [5,5] [4,4][4,5] 11 11 11 [6,6] [6,6] [6,6] (a) (b) (c) Figure8:Exampleschedulingrangereductionbasedonone\u00adcycleschedulingrange. \nbe0andthevariablecanbeeliminatedfromtheproblem. General-purposeprobingisusedincommercialsolvers,but hasaveryhighcomputationcost[12]. \nAspecifcprobingtechniquecalledinstructionprobing isproposedforreducinginstructionschedulingranges.In\u00adstructionprobingiscomputationallyefcientbecauseitex\u00adploitsknowledgeoftheinstructionschedulingproblemand \nexploitstheDAG'sstructure.Instructionprobingisdone foreachinstructioni,startingwithi'slowerbound.Alower\u00adboundprobeconsistsoftemporarilysettingi'supperbound \nequaltothecurrentlowerbound.Thishastheefectof temporarilyschedulingiatthecurrentlowerbound.Based oni'sreducedschedulingrange,therangesofi'spredeces\u00adsorsaretemporarilytightenedthroughouttheDAG.Ifthe \nresultingschedulingrangesareinfeasible,theprobeissuc\u00adcessfulandi'slowerboundispermanentlyincreasedby1. \nBasedoni'snewlowerbound,therangesofi'ssuccessors arepermanentlytightenedthroughouttheDAG.Ifthere\u00adsultingschedulingrangesareinfeasible,theoverallschedul\u00adingproblemisfeasible.Otherwise,thenewlowerboundis \nprobedandtheprocessrepeats.Ifalower-boundprobeis unsuccessful,i'slower-boundprobingiscomplete.i'supper \nboundisthenprobedinasymmetricmanner. Figure9illustratestheuseofinstructionprobingfor asingle-issueprocessor.Figure9ashowsthescheduling \nrangesthatareproducedusingstaticrangereductionfor ascheduleoflength8.Figure9bshowsthetemporary schedulingrangesthatresultfromprobingnodeB'slower \nbound.Basedontheone-cyclelogicalimplication,cycle2 isremovedfromnodeC'srange.NodeC'sincreasedlower boundinturncausesthelowerboundsfornodesE,GandH \ntobetemporarilytightened.BecausenodeEhasaone-cycle range(cycle5),cycle5isremovedfromnodeD'srange, whichinturncausesnodeF'slowerboundtobetightened. \nNodesFandGmustbescheduledatthesamecycle,which isinfeasible.Thus,nodeBcannotbescheduledatcycle 2andcycle2ispermanentlyremovedfromB'sscheduling \nrange.TheconsequenceofB'spermanentrangereduction isshowninFigure9c.BasedonB'stightenedlowerbound, thelowerboundsofnodesD,FandHarepermanently \ntightened.BasedonnodeB'sone-cyclerange,cycle3is removedfromnodeC'srange.DuetonodeD'sone-cycle range,cycle6isremovedfromnodeG'srange.Theresult\u00adingrangesareinfeasiblebecausenodesFandGmustbe \nscheduledatthesamecycle,thusno8-cyclescheduleexists fortheDAG. 4.2OptimalRegionScheduling ForaregionasdefnedinSection3,thecritical-pathdistance \nbetweentheregion'sentryandexitnodesmaynotbesuf\u00adcientlytight.Thiscanleadtoexcessiveinteger-programso\u00adlutiontimebecausetheintegerprogramproducedfromthe \n   [1,2] 1 1 [3,3] [3,3] [2,2] 3 [2,3] [2,2][2,3] 3 32 22 [5,5] [6,6] [4,5] 1 [4,5] [6,6][5,6] 21 \n221 [7,7] [7,7] [7,7][6,7] [6,7] [7,7] 1 11 111 [7,8] [8,8] [8,8] (a) (b) (c) Figure9:Exampleschedulingrangereductionusinginstruc\u00adtionprobing. \n [1,2] [1,2] [1,2] [2,4] 2 [2,4] [2,4] 22 [4,6][4,6] [4,6] [9,9] 2 [7,9] [8,9] 22 [11,11][9,11] [10,11] \n[11,12] [12,12] [12,12] (a) (b) (c) Figure10:Examplepseudoedgeinsertion. DAGisunder-constrained.Aregionislooseifthecritical\u00adpathdistancefromtheregion'sentrynodetoitsexitnode \nislessthanthedistancefromtheentrynodetotheexit nodeinanoptimalscheduleoftheregion.Clearlyinany validoverallschedule,aregion'sentryandexitnodescan \nbenocloserthanthedistancebetweenthesenodesinan optimalscheduleoftheregion.Alooseregioncanbetight\u00adenedbycomputinganoptimalschedulefortheregionto \ndeterminetheminimumdistancebetweentheregion'sentry andexitnodes.Apseudoedgecanthenbeaddedtothe DAGfromtheentrynodetotheexitnode,withalatency \nthatequalsthedistancebetweenthesenodesintheoptimal regionschedule.Pseudoedgesmayallowthescheduling rangesoftheentryandexitsnodestobereduced.These \nrangereductionsmaytheniterativelypropagatethroughthe DAGasdescribedintheprevioussubsectionandmayresult \ninschedulingrangesthatareinfeasibleforschedulingtheba\u00adsicblockinmcycles.Eveniftheoverallschedulingproblem \nisnotshowntobeinfeasible,theproblemwillsolvefaster becauseofthereducednumberofschedulingvariables. TheapplicationofregionschedulingisillustratedinFig\u00adure10.Figure10ashowstheschedulingrangesforasched\u00aduleoflength12.TheregionAFisaninstanceoftheregion \ninFigure8,whichhasanoptimalscheduleoflength7.Thus, afterregionschedulingisappliedtoregionAFalatency6 \npseudoedgeisaddedfromnodeAtonodeF,asshownin Figure10b.Thepseudoedgecausesthelowerboundsfor nodesF,G,H,I,JandKtobetightenedtotheranges \nshowninFigure10b.BasedonnodeH'sone-cyclerange,cy\u00adcle8isremovedfromnodeG'srange.Theincreaseinnode G'slowerboundcausesnodeI'slowerboundtoincrease. \nTheresultingrangesareshowninFigure10c.Theseranges areinfeasiblebecausenodesIandJmustbescheduledat thesamecycle.Thus,theoverallscheduleisshowntobe \ninfeasiblebasedontheoptimalscheduleofonlyoneinner region. Optimalregionschedulesarecomputedstartingwiththe \nsmallestinnerregions,progressingoutwardtothelargest outerregion,theentireDAGpartition.Optimalschedules \nfortheinnerregionscanusuallybefoundquicklyusingthe infeasibilitytests.Ifanoptimalregionschedulerequiresan \nintegerprogramandtheinnerregionshavepseudoedges,a dependencyconstraintisproducedforeachpseudoedge,in \nthemannerdescribedinSection2.1.Astheoptimalregion schedulingprocessmovesoutward,theadditionalpseudo edgesprogressivelyconstraintheschedulingofthelarge \nouterregions,allowingtheoptimalschedulingoftheouter regionstobesolvedquickly,usuallyusingonlytheinfeasi\u00adbilitytests. \n4.3Branch-and-Cut Typically0-1integerprogramsareinitiallysolvedasalin\u00adearprogram(LP)inwhichthesolutionvaluescanbenon\u00adintegers[24].Ifavariableintheinitialsolutionisanon\u00adinteger,branch-and-boundcanbeusedtofndanallinteger \nsolution[24].Branch-and-boundselectsabranchvariable, whichisoneofthevariablesthatwasnotanintegerinthe \nLPsolution.Twosubproblemsarecreatedinwhichthe branchvariableisfxedto0andto1,andthesubprob\u00adlemsaresolvedasLPs.Thecollectionofsubproblemsform \nabranch-and-boundtree[24].Therootofthetreeisthe initialLPoftheintegerprogramandeachnodeisanLP subproblemwithsomevariablesfxedtointegervalues.By \nsolvingtheLPsubproblems,thebranch-and-boundtreeis traverseduntilanallintegersolutionisfound,ortheprob\u00adlemisdeterminedtobeinfeasible[24]. \nForsomeintegerprogrammingapplications,thenum\u00adberofnodesinthebranch-and-boundtreethatmustbe solvedtoproduceanoptimalintegersolutioncanbedra\u00admaticallyreducedbyadaptivelyaddingapplication-specifc \nconstraints,orcuts,totheLPsubproblemateachnode inthebranch-and-boundtree.Thecutsaredesignedto eliminateareasofthesolutionspaceintheLPsubprob\u00adlemwhichcontainnointegersolutions.Thisenhancement \ntothebranch-and-boundmethodiscalledbranch-and-cut [24].Twotypesofcutsareproposedforsolvinginstruction \nschedulingintegerprograms:dependencycutsandspreading cuts. 4.3.1DependencyCuts InanLPsolution,aninstructionmaybefractionallysched\u00aduledovermultiplecycles.Foraninstructionkthatisdata \ndependentoninstructionj,fractionsofjcanbescheduled afterallcyclesinwhichkisscheduled,withoutviolatingthe \ncorrespondingdependencyconstraint.Thisisillustratedin Table4,whichshowsapartialLPsolutionforaschedul\u00adingproblemthatincludesinstructionsjandk,wherekis \ndependentonjwithlatency1.Thesolutionsatisfesthede\u00adpendencyconstraintbetweenjandkbecausejisscheduled atcycle1*0:5+5*0:5=3,whilekisscheduledatcycle \n4.Howeverafractionofjisscheduledafterallfractionsof k.Thisinvalidsolutioncanbeeliminatedinthesubsequent \nLPsubproblemsbyaddingthefollowingdependencycutfor cyclec,thelastcycleinwhichjcanbescheduledgiventhe positionofthelastfractionofkinthecurrentLPsolution: \ncc+ljk XX xji>xki i=LB(j) i=LB(k) whereLB(j)andLB(k)aretheschedulingrangelower boundsforjandk,respectively,andljkisthelatencyof \nthedependencybetweenjandk. Forexample,thefollowingdependencycutcanbeadded forcycle3forthesolutioninTable4topreventjfrom \nbeingfractionallyscheduledafterafractionkincycle4in subsequentLPsubproblems: 123234 xj+xj+xj>xk+xk+xk \nclockcycle variables C1 x 1 j0:5 C2 C3 C4 x 4 k1:0 C5 x 5 j0:5 Table4:ExampleLPsolutiontoillustrateadependency \ncut. 4.3.2SpreadingCuts InanLPsolution,aninstructionkmaybefractionally scheduledclosertok'simmediatepredecessorsthanthela\u00adtenciesallowinanintegersolution,butstillsatisfythecor\u00adrespondingdependencyconstraints.Thisisillustratedin \nTable5,whichshowsapartialLPsolutionforascheduling problemwhichincludesinstructionsi,j,andk.Instruction \nkisdependentonbothiandjwithlatency2.Thesolution satisfesthedependencyconstraintsoftheLPbecausekis scheduledatcycle3*0:5+4*0:53:5,andiandjare \nscheduledatcycle1*0:5+2*0:51:5.However,incycle3, afractionofkisscheduledclosertoiandjthanthelatency allowsinanallintegersolution.Thisinvalidsolutioncan \nbeeliminatedinthesubsequentLPsubproblemsbyadding thefollowingspreadingcutforcyclec,thelowestcyclein whichafractionofkisscheduledinthecurrentsolution: \nc XX ic-l+1 x+xI:1 k i=c-l+1I2P(k) whereP(k)isthesetofimmediatepredecessorsofinstruc\u00adtionk. Forexample,thefollowingspreadingcutcanbeadded \nforcycle3forthesolutioninTable5toforcethefractions ofiandjtobespreadfurtherapartfromafractionofkin cycle3insubsequentLPsubproblems: \n2322 x+xk+x+xj:1 ki clockcycle variables C1 x 1 i 0:5 x 1 j0:5 C2 x 2 i 0:5 x 2 j0:5 C3 x 3 k 0:5 C4 \nx 4 k 0:5 Table5:ExampleLPsolutiontoillustrateaspreadingcut. Symmetricspreadingcutscanbeusedtopreventin\u00adstructionsfrombeingfractionallyscheduledclosertotheir \nimmediatesuccessorsthanthelatenciesallowinaninteger solution. [1,1] 1 1 [2,3] [2,3] 22 [5,6] [5,6] 1 \n1 [7,7] Figure11:ExampleDAGwithredundantdependency edgeCD. 4.4RedundantConstraints Someconstraintsintheintegerprogrammayberedundant \nandcanberemoved.Thissimplifestheintegerprogram andreducesitssolutiontime. Ifaninstructionihasaonecycleschedulingrangeat \ncycleC,themust-scheduleconstraintforinstructionican beeliminated,andtheissueconstraintforcycleCcanbe \neliminatedforasingle-issueprocessor. Theintegerprogramincludesadependencyconstraint foreachDAGedge.Thedependencyconstraintensuresthat \neachinstructionisscheduledsufcientlyearlierthananyof itsdependentsuccessors.However,iftheschedulingranges \nofdependentinstructionsarespacedfarenoughapart,the datadependencybetweenthetwoinstructionswillneces\u00adsarilybesatisfedinthescheduleproducedbytheinteger \nprogram.Inthiscase,thedependencyconstraintforthe correspondingedgecanberemovedfromtheintegerpro\u00adgram.Moreprecisely,ifaninstructionkisdependenton \ninstructionjwithlatencyL,thenthejtokdependency constraintisredundantif: L+Upperboundofj:Lowerboundofk \nFortheexampleDAGinFigure11,thedependencycon\u00adstraintforedgeCDisredundantbecausetheupperbound fornodeCiscycle3,thelowerboundfornodeDiscycle5 \nandthelatencyofedgeCDis1. 4.5AlgebraicSimplifcation Analgebraicsimplifcationreducesthenumberofdepen\u00addencyconstrainttermsandreducesthesizeofthecoef\u00adcientsoftheremainingterms.Thebasicdependencycon\u00adstraintforedgejkhasonetermforeachcycleinj'srange \nandonetermforeachcycleink'srange.Thedependency constraintissimplifedtoincludetermsonlyforcyclesin whichj'sandk'sschedulingrangesoverlap.Thesimplifed \nconstraintsallowtheintegerprogramtosolvefaster. SupposeinstructioniisdependentonkwithlatencyL. Theschedulingrangesforkandiare[a,b]and[c,d],re\u00adspectively,andthedependencyconstraintisnotredundant. \nThatis,c+1:b+L.Thebasicdependencyconstraintis: bd XX j*xj+L:j*xj (3) ki j=aj=c Subtractingcfrombothsidesof(3)yields: \nbd XX j*xj+L-c:j*xj-c kij=aj=c Becausethexkandxivariablesarenonzeroforonlyone cyclej: bd XX (j+L.c)*xkj:(j-c)*xij \n(4) j=aj=c Afterschedulerangetightening,a:c-L,andbecause thedependencyconstraintisnotredundant,c-L+1:b. \nAccordingly,(4)maybeexpandedto: c.Lbd XXX j jj (j+L-c)*xk+(j+L-c)*xk:(j-c)*xi(5) j=aj=c.L+1 j=c Therightsideof(5)isnonnegative.Ifxjisnonzerofora \nk cyclej:c-L,theleftsideof(5)isnonpositive.Then,the inequalityisnecessarilysatisfedindependentofthevalues \nofthexivariables.Therefore,theleftsummationonthe lefthandsideof(5)maybeeliminated,andthedependency constraintbecomes: \nbd XX (j+L-c)*xj:(j-c)*xj (6) ki j=c.L+1 j=c LetM=b+L-c.Therighthandsideof(6)canbe transformedasfollows: \ndd XX (j-c)*xji=M-(M-j+c)*xji j=cj=c Becausethelefthandsideof(6)isatmostM,allright handsidecyclesafterb+L-1don'tafecttheconstraint \nbecausetheyhavenegativecoefcientsandwillproducea righthandsideresultthatisgreaterthanM.Thustheright handsideof(6)canbesimplifedto: \nb+L.1 X M-(M-j+c)*xij (7) j=c Substituting(7)fortherighthandsidein(6),yieldsthe simplifedconstraint: \nbb+L.1 XX (j+L-c)*xkj:M-(M-j+c)*xij j=c.L+1 j=c Toillustratethesimplifcation,assumekhasscheduling range[8,15],ihasschedulingrange[14,78],andiisdepen\u00addentonkwithlatency1.Theoriginaldatadependency \nconstraint: 15 78 XX j*xj+1:j*xij k j=8 j=14 issimplifedto: 15 15+1.1 XX (j+1-14)*xkj:(15+1-14)-(15+1-j)*xij \nj=14.1+1 j=14 whichis: 1415 1415 xk+2*xk:2-2*xi-xi Beforesimplifcationthedependencyconstrainthas74 terms.Aftersimplifcationthereareonly4variableterms. \nThemaximumsizedcoefcienthasbeenreducedto2from 74. 4.6AdvancedIPFormulation,ExperimentalResults Theexperimentdescribedin2.2isrepeatedwithGCC'sin\u00adstructionschedulerreplacedbyanoptimalinstructionsched\u00adulerthatincludestheDAGtransformationsandthead\u00advancedinteger-programformulation.Theexperimentalre\u00adsultsinTable6showthedramaticimprovementprovided \nbythenewoptimalscheduler.Allbasicblocksaresched\u00aduledoptimallyandtheschedulingtimeisveryreasonable. Thegraphtransformations,advancedrangereductionand \nregionschedulingtechniquesreduceto22thenumberof basicblocksthatrequireanintegerprogram,downfrom 517usingthebasicformulation.These22mostdifcult \nproblemsrequireatotalsolvertimeofonly45seconds,an averageofonly2secondseach.Thetotalincreaseincom\u00adpilationtimeisonly98seconds,a14%increaseintotal \ncompilationtime,whichincludesthetimeforDAGtrans\u00adformations,advancedrangereductionandregionscheduling. \nTotalschedulingtimeisreducedbymorethan300foldcom\u00adparedwiththebasicformulation.Theimprovementincode qualityismorethan4timesthatofthebasicformulation, \n66staticcyclescomparedwith15cycles.Theadditional6 basicblocksthataresolvedoptimallyusingtheadvanced formulationallhaveimprovedschedules,withtheaverage \nimprovementof5.8cycles.Thissuggeststhatthehardest problemstosolvearethosewhichprovidethemostperfor\u00admanceimprovement. \nTotalBasicBlocks(BB) 7,402 BBOptimalfromListScheduling 6,885 BBOptimalfromGraphsTransformation 143 BBOptimalfromAdvancedRangeReduction \nandfromRegionScheduling 353 BBPassedtoIPFormulation 22 BBIPSolvedOptimally 22 BBIPTimedOut 0 BBImprovedandOptimal \n29 BBImprovedbutNotOptimal 0 TotalCyclesImproved 66 TotalSchedulingTime(sec.) 98 Table6:ExperimentalresultsusingDAGtransformations \nandtheadvancedintegerprogrammingformulation. Thenewapproachcanoptimallyscheduleverylargeba\u00adsicblocks.ThescattergraminFigure12showsadotfor \neachofthe517basicblocksthatareprocessedbythegraph transformationsandtheadvancedintegerprogrammingfor\u00admulation.Theaxesindicatetheblock'ssizeandthetime \ntooptimallyschedulethatblock.Thisfgureshowsthat manyverylargeblocks,aslargeas1000instructions,are optimallyscheduledinashorttime. \n5Summary Thispaperpresentsanewapproachtooptimalinstruction schedulingwhichisfast.Theapproachquicklyidentifes \nmostbasicblocksforwhichlistschedulingproducesanop\u00adtimalschedule,withoutusingintegerprogramming.For theremainingblocks,asimplifedDAGandanadvanced \ninteger-programmingformulationleadtooptimalschedul\u00adingtimeswhichaverageafewsecondsperblock,evenfora benchmarksetwithsomeverylargebasicblocks.Thesere\u00adsultsshowthattheeasiestofthehardinstructionscheduling \n Total Scheduling Time (secs.) 1000 100 10 1 0.1 0.01 0.001 Figure12:Scatter-gramofbasic-blocksizeversusoptimal \nschedulingtime. problemscanbesolvedinreasonabletime.Thisisanimpor\u00adtant.rststeptowardsolvingharderinstructionscheduling \nproblemsinreasonabletime,includingschedulingverylarge basicblocksforlong-latencymultiple-issueprocessors.The \nproposedapproachwillalsoserveasasolidbaseforfuture workonoptimalformulationsofcombinedlocalinstruction \nschedulingandlocalregisterallocationthatcanbesolved inreasonabletimeforlargebasicblocks. References [1]S.Arya.AnOptimalInstruction-SchedulingModelfor \naClassofVectorProcessors.IEEETransactionson Computers,C-34(11):981{995,November1985. [2]D.BernsteinandI.Gertner.SchedulingExpressions \nonaPipelinedProcessorwithaMaximalDelayofOne Cycle.ACMTransactionsonProgrammingLanguages andSystems,11(1):57{66,January1989. \n[3]D.Bernstein,M.Rodeh,andI.Gertner.On theComplexityofSchedulingProblemsforParal-lel/PipelinedMachines.IEEETransactionsonCom\u00adputers,38(9):1308{1313,September1989. \n[4]R.Bixby,K.Kennedy,andU.Kremer.AutomaticData LayoutUsing0-1IntegerProgramming.InProceedings ofConferenceonParallelArchitecturesandCompila\u00adtionTechniques,August1994. \n[5]C-MChang,C-MChen,andC-TKing.UsingInte\u00adgerLinearProgrammingforInstructionSchedulingand RegisterAllocationinMulti-IssueProcessors.Com\u00adputersandMathematicswithApplications,34(9):1{14, \nNovember1997. [6]H.ChouandC.Chung.AnOptimalInstructionSched-ulerforSuperscalarProcessors.IEEETrans.onParal\u00adlelandDistributedSystems,6(3):303{313,March1995. \n[7]T.Cormen,C.Leiserson,andR.Rivest.Introduction toAlgorithms.McGraw-Hill,1989. [8]A.ErtlandA.Krall.OptimalInstructionSchedul\u00adingUsingConstraintLogicProgramming.InProgram\u00admingLanguageImplementationandLogicProgram\u00adming(PLILP).Springer-Verlag,1991. \n[9]D.GoodwinandK.Wilken.OptimalandNear-Optimal GlobalRegisterAllocationUsing0-1IntegerProgram\u00adming.Software|PracticeandExperience,26(8):929{ \n965,August1996. [10]J.Grossman.DiscreteMathematics.Macmillan,1990. [11]J.HennessyandD.Patterson.ComputerArchitecture: \nAQuantitativeApproach.MorganKaufmann,1996. SecondEdition. [12]ILOG.ILOGCPLEX6.5User'sManual.ILOG,1999. \n[13]C.Kessler.SchedulingExpressionDAGsforMin\u00adimlRegisterNeed.ComputerLanguages,24(1):33{53, April1998. \n[14]R.LeupersandP.Marwedel.Time-ConstrainedCode CompactionforDSPs.IEEETransactionsVLSISys\u00adtems,5(1):112{122,March1997. \n[15]S.Munchnick.AdvancedCompilerDesignandImple\u00admentation.MorganKaufmann,1997. [16]G.Nemhauser.TheAgeofOptimization:Solving \nLarge-ScaleReal-WorldProblems.OperationsRe\u00adsearch,42(1):5{13,Jan.{Feb.1994. [17]K.PalemandB.Simons.SchedulingTime-CriticalIn\u00adstructionsonRISCMachines.ACMTransactionson \nProgrammingLanguagesandSystems,15(4):632{658, September1993. [18]K.PingaliandG.Bilardi.OptimalControlDependence \nandtheRomanChariotsProblem.ACMTransactions onProgrammingLanguagesandSystems,19(3):462{ 491,May1997. [19]W.Pugh.TheOmegaTest:AFastandPracticalInte\u00adgerprogrammingAlgorithmforDependenceAnalysis. \nInProceedingsSupercomputing'91,pages18{22,Nov 1991. [20]M.Savelsbergh.PreprocessingandProbingforMixed \nIntegerProgrammingProblems.ORSAJournalof Computing,6(4):445{454,Fall1994. [21]P.SweanyandS.Beaty.InstructionSchedulingUs-ingSimulatedAnnealing.InProc.3rdInternational \nConferenceonMassivelyParallelComputingSystems (MPCS'98),1998. [22]H.Tomiyama,T.Ishihara,A.Inoue,andH.Yasuura. \nInstructionSchedulingtoReduceSwitchingActivityof O.-ChipBusesforLow-PowerSystemswithCaches. IEICETrans.onFundamentalsofElectronics,Com\u00admunicationsandComputerSciences,E81-A(12):2621{ \n2629,December1998. [23]S.Vegdahl.LocalCodeGenerationandCompaction inOptimizingMicrocode.PhDthesis,CarnegieMellon \nUniversity,December1982. [24]LaurenceA.Wolesey.IntegerProgramming.JohnWi\u00adley&#38;Sons,Inc.,1998.  \n\t\t\t", "proc_id": "349299", "abstract": "<p>This paper presents a new approach to local instruction scheduling  based on integer programming that produces optimal instruction schedules in a reasonable time, even for very large basic blocks. The new approach first uses a set of graph transformations to simplify the data-dependency graph while preserving the optimality of the final schedule. The simplified graph results in a simplified integer program which can be solved much faster. A new integer-programming formulation is then applied to the simplified graph. Various techniques are used to simplify the formulation, resulting in fewer integer-program variables, fewer integer-program constraints and fewer terms in some of the remaining constraints, thus reducing integer-program solution time. The new formulation also uses certain adaptively added constraints (cuts) to reduce solution time. The proposed optimal instruction scheduler is built within the Gnu Compiler Collection (GCC) and is evaluated experimentally using the SPEC95 floating point benchmarks. Although optimal scheduling for the target processor is considered intractable, all of the benchmarks' basic blocks are optimally scheduled, including blocks with up to 1000 instructions, while total compile time increases by only 14%.</p>", "authors": [{"name": "Kent Wilken", "author_profile_id": "81100446006", "affiliation": "Department of Electrical and Computer Engineering, University of California, Davis, CA", "person_id": "P160587", "email_address": "", "orcid_id": ""}, {"name": "Jack Liu", "author_profile_id": "81452599194", "affiliation": "Department of Electrical and Computer Engineering, University of California, Davis, CA", "person_id": "P130564", "email_address": "", "orcid_id": ""}, {"name": "Mark Heffernan", "author_profile_id": "81100550599", "affiliation": "Department of Electrical and Computer Engineering, University of California, Davis, CA", "person_id": "P190391", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/349299.349318", "year": "2000", "article_id": "349318", "conference": "PLDI", "title": "Optimal instruction scheduling using integer programming", "url": "http://dl.acm.org/citation.cfm?id=349318"}