{"article_publication_date": "05-01-2000", "fulltext": "\n Unifation-basedPointerAnalysiswithDiretionalAssignments ManuvirDas manuvir mirosoft.om MirosoftResearh \nRedmond,W ....... Thispaperdesribesanewalgorithmforfowandontext insensitivepointeranalysisofCprograms.Ourstudiesshow \nthatthemostommonuseofpointersinCprogramsisin passingtheaddressesofompositeobjetsorupdateable valuesasargumentstoproedures.Therefore,wehavede\u00adsignedalow\u00adostalgorithmthathandlesthisommonase \naurately.Intermsofbothpreisionandrunningtime,this algorithmliesbetweenSteensgaard'salgorithm,whihtreats \nassignmentsbi\u00addiretionallyusingunifation,andAnder\u00adsen'salgorithm,whihtreatsassignmentsdiretionallyus\u00adingsubtyping.Our\"onelevelfow\"algorithmusesare\u00adstritedformofsubtypingtoavoidunifationofsymbols \natthetoplevelsofpointerhainsinthepoints\u00adtograph, whileusingunifationelsewhereinthegraph.Themethod saleseasilytolargeprograms.Forinstane,weareable \ntoanalyzea1.4MLOC(millionlinesofode)programin twominutes,usinglessthan200MBofmemory.Atthe sametime,thepreisionofouralgorithmisveryloseto \nthatofAndersen'salgorithm.Onalloftheintegerbenh\u00admarkprogramsfromSPEC95,theonelevelfowalgorithm andAndersen'salgorithmprodueeitheridentialoressen\u00adtiallyidentialpoints\u00adtoinformation.Therefore,welaim \nthatouralgorithmprovidesamethodforobtainingpreise fow\u00adinsensitivepoints\u00adtoinformationforlargeCprograms. \n............ ProgramswritteninCtypiallymakewidespreaduseof pointervariables.Inordertoanalyzeaprogramthatuses \npointers,itisneessarytoperformapointeranalysisthat omputes,ateverydereferenepointinaprogram,asu\u00adpersetofthesetofsymbolsormemoryloationsthatmay \nbeaessedviathegivendereferene.Thepreisionofa pointeranalysisisdeterminedbythesizesofthese\"points\u00adto\"sets.Points\u00adtoinformationisusefulforanysubsequent \nprogramanalysis,whetherthislientanalysisisanoptimiza\u00adtionalgorithm,aodebrowsingtool,oraprogramtrans\u00adformation.Experimentshaveshownthatthepreisionof \nPermissiontomakedigitalorhardopiesofallorpartofthis workforpersonalorlassroomuseisgrantedwithoutfeepro\u00advidedthatopiesarenotmadeordistributedforproftorom\u00admerialadvantageandthatopiesbearthisnotieandthefull \nitationonthefrstpage.Toopyotherwise,orrepublish,to postonserversortoredistributetolists,requirespriorspeif \npermissionand/orafee. PLDI2000,Vanouver,BritishColumbia,Canada. Copyright2000 CM1-58113-199-2/00/0006...$5.00. \npoints\u00adtoinformationangreatlyimpattheperformane andusefulnessofsubsequentanalyses[SH97a]. Thefousofthispaperisfowandontextinsensitive \npointeranalysis.Withinthisdomain,therearealgorithms suhasSteensgaard'sunifation\u00adbasedapproah[Ste96b] \n(almostlinearrunning\u00adtime),whihsalewelltolargepro\u00adgramsbutproduerelativelyimpreiseresults.Onthe otherhand,algorithmssuhasAndersen'ssubtyping\u00adbased \napproah[And94](worst\u00adaseubirunning\u00adtime)produe muhmorepreiseresults,butdonotsalewelltolargepro\u00adgrams.Thehallengehasbeentodesignananalysisthathas \nthesalingpropertiesofSteensgaard'sanalysisandthepre\u00adisionofAndersen'sanalysis.Whilesomealgorithmshave \nbeenproposedintheliterature,itisunlearwhetheranyof themprovidestherightsolution(seeSetion5). OurmanualstudiesofCprogramsindiatethatbyfar \nthegreatestuseofpointersinCprogramsisinpassingthe addressesofompositeobjetsorupdateablevaluesasargu\u00admentstoproedures.Insuhases,amethodthatprodues \naurateinformationfor\"toplevel\"pointers(i.e.,point\u00adersthatarenotthemselvespointedtobyotherpointers) anyieldthesamepreisionasamethodthatisaurate \nforallpointers.Therefore,wehavedesignedanewlow\u00adostalgorithmforpointeranalysisthathandlesthisom\u00admonaseaurately.Ouronelevelfowalgorithmimproves \nuponSteensgaard'sunifation\u00adbasedalgorithmbyavoiding unifationofsymbolsatthetoplevelsofpointerhainsin \nthepoints\u00adtograph.Themethodanalsobeinterpretedas arestritionofAndersen'ssubtypingrulesatassignments toonelevelinthetypestruture. \nInthispaper,wedesribeouralgorithm.Wemakethe followingontributions: .Wepresenttheonelevelfowalgorithm,anewpointer \nanalysisalgorithmthatliesbetweenthealgorithmsof SteensgaardandAndersen,intermsofbothrunning\u00adtimeandpreision.Itsasymptotiomplexityis \nquadratiinthesizeoftheprogram. .OuralgorithmisasimpleextensionofSteensgaard's algorithm,andiseasytoimplementquiklyandor\u00adretly.Inanbeaddedtoanyunifation\u00adbasedpointer \nanalysisalgorithm. .Wedemonstratethatinpratie,thealgorithmhasthe salingpropertiesofSteensgaard'salgorithm,andthe \npreisionofAndersen'salgorithm. .Onallofourtestprograms,inludingtheinteger programsfromSPEC95anda1.4MLOCpro\u00ad \nfoo(&#38;s1); foo(&#38;s2); bar(&#38;s3); foo(struts*p){*p.a=3;bar(p);} bar(struts*q){*q.b=4;} (a) . \n. . . .. .. .. ... .. ..... 81 8 2 8 3 81 82 83 . . . . () (d) qpp ====p.q.q** &#38;s1; &#38;s2; p; \n&#38;s3; a=3; b=4; (b) . . 838182 ..  .. (e) Figure1:TwoprogramsthatillustratethediferenebetweenthealgorithmsofSteensgaardandAndersen.Theprogramin \n(a)aboverepresentstheommonaseinCprograms,whiletheprogramin(b)aboveisavariantoftheprogramwithout proedurealls.Figures(),(d)and(e)aboveshowthepoints-tographsomputedbySteensgaard'salgorithm,Andersen's \nalgorithm,andouronelevelfowalgorithm,respetively,fortheprogramin(b)above.Theedgelabeledwith*isafow edge. \ngram(MirosoftWord97),theonelevelfowal\u00adgorithmsaleslinearlyinbothtimeandspae requirements.Itusestwieasmuhtimeand \nmemoryasSteensgaard'salgorithm. OnallofourtestprogramsexeptWord97,to whihAndersen'salgorithmdoesnotsale,the \nonelevelfowalgorithmandAndersen'salgorithm provideeitheridentialorverysimilarpreision. WeompareouralgorithmwithAndersen'salgorithm \nonreal,largeprograms,upto140,000LOC(g).Be\u00adyondomparingpreisionintermsoftheaveragesizes ofpoints-tosetsatstatidereferenepoints,weshow \nthatforeahbenhmark,theentiredistributionsof points-tosetsizesusingthetwoalgorithmsarevery similar. Therestofthepaperisorganizedasfollows:InSetion \n2,wepresentamotivatingexample,andweusethisexample toexplainthemainideaofouralgorithm.InSetion3,we desribeouronelevelfowalgorithmindetail.InSetion \n4,wedesribeourexperimentalframework,andpresentour empirialresults.WedisussrelatedworkinSetion5,and makeonludingremarksinSetion6. \n2Example Example1AfragmentofaCprogramisshowninFigure 1(a).Thisprogramrepresentsthemostommonaseof pointerusagearossourtestprograms.Avariantofthis \nprogramwithoutproedureallsisshowninFigure1(b).A fowandontextinsensitivepointeranalysiswouldprodue thesamepoints-tosetsforbothvariantsoftheprogram. \nFigure1()showsthepoints-toinformationomputed bySteensgaard'salgorithmfortheprograminFigure1 (b).Thepoints-tographshownontainsnodesrepresent\u00adingequivalenelassesofsymbolsandedgesrepresenting \npointerrelationships.Everynodeontainsasinglepointer edge.Steensgaard'salgorithmproessesassignmentsbi\u00addiretionally:Thelefthandsideandrighthandsidemem\u00adoryloationsinanassignmentareonstrainedtoholdthe \nsameontents..Fortheexampleprogram,theefetofthe assignmentfromptoqistoforebothpandqtopointto theequivalenelassontaining81,82,and83,eventhough \npannotpointto83inanyexeutionoftheprogram. Figure1(d)showsthepoints-toinformationomputed byAndersen'salgorithm.Inthisase,everynodeisasso\u00adiatedwithasinglesymbolandontainsasetofpointer \nvalues.Assignmentsareproesseddiretionally:Theon\u00adtentsoftherighthandsideloationareopiedtotheleft handside.Thismethodproduesmoreauratepoints-to \nsetsasaresult.Intheexampleprogram,pisnotrequired topointto83. Figure1(e)showsthepoints-toinformationomputed \nbyouronelevelfowalgorithm.Ourpoints-tographissim\u00adilartothatofSteensgaard,butinludesspeial\"fow\"edges betweennodes.Flowedgesareintroduedatassignments, \nonelevelbelow(inthepoints-tograph)thesymbolsinvolved intheassignment.Intheexampleprogram,theassignment \nfromptoqintroduesafowedgefromthepointertar\u00adgetnodeofptothepointertargetnodeofq.Afowedge fromonenodetoanotherindiatesthatallofthesymbols \nassoiatedwiththefrstnodemustbeassoiatedwiththe seond.Thus,thepointertargetnodeofpontains81and 82,whereasthepointertargetnodeofqontainsbothof \n.Alimitedformofsubtypingallowsanexeptiontothisrule,in aseswheretherighthandsidedoesnotholdanypointervalue. \nthosesymbols,aswellas83.Allofthenodesrelatedby fowedgesareonstrainedtohaveequalontents;thatis, theyarerequiredtoholdpointerstothesamenode.Ifany \nof81,82or83pointtoagivensymbol,ouralgorithmwillre\u00adquirethatallof81,82and83pointtothatsymbol,thereby losingpreisionomparedtoAndersen'salgorithm. \nAndersen'salgorithmahievesdiretionalityinassign\u00admentsbyusingsubtypingrules.Inordertoaommodate diretionality,itisneessarytoallowunlimitedfanout,or \noutdegree,inthepoints-tograph.Thisleadstotreeswith fanoutatalllevels.Thealgorithmisexpensivebeauseof \ntheworkrequiredtotrakthesubtypingrelationsindued atalllevelsofthepoints-tograph.Steensgaard'salgorithm \nusestypeequalityrulestomerge(unify)equivalenelasses ofsymbolsatassignments,leadingtonodeswithsingleout\u00addegreeinthepoints-tograph.Theuseoftypeequalityrules \nmakesSteensgaard'sanalysisinexpensive,butapproximate. Thediferenebetweenthetwoalgorithmsanbeviewed intermsofthefnalpoints-tograph,orintermsoftheanaly\u00adsisitself.ShapiroandHorwitzviewedthedifereneinterms \nofthefnalpoints-tograph.Therefore,theydesignedanal\u00adgorithmthatallowsk-limitedoutdegreeatalllevelsofthe \npoints-tograph[SH97b].Webelievetheinterestingdifer\u00adeneisreallyintheanalysisitself.Therefore,ouralgorithm \nallowssomeamountofdiretionality(usingsubtyping)at assignments.Intermsofthefnalpoints-tograph,oural\u00adgorithmanbeviewedasallowingunlimitedoutdegreeina \nfewritialareasofthegraph,whilerestritingoutdegree tosingleedgeseverywhereelse. 3Onelevelfowalgorithm \nInthissetion,wepresentouronelevelfowalgorithm.We frstdesribethealgorithminformallyasanextensionof Steensgaard'sunifation-basedapproah,andthenpresent \nthealgorithmformallyasasetofnon-standardtypeinfer\u00adenerulesoverapointerlanguage.Weshowhowouralgo\u00adrithmanbeviewedasarestritionofAndersen'salgorithm. \nFinally,wedisussorretnessandasymptotiomplexity. 3.1Algorithmdesription Apointeranalysisanbethoughtofasanabstratompu\u00adtationthatmodelsmemoryloations.EveryloationTis \nassoiatedwithalabelorsetofsymbols'andholdssome ontentsa(anabstratpointervalue)(Figure2).Aloation \"points-to\"anotheriftheontentsoftheformerisapointer \ntothelatter.Informationaboutloationsanbeenoded asapoints-tograph,inwhihnodesrepresentmemorylo\u00adationsandedgesrepresentpoints-torelationships. \nInSteensgaard'salgorithm,theefetofanassignment fromytoxistoequatetheontentsoftheloationsas\u00adsoiatedwithyandx.Thisisahievedbyunifying(i.e., \nequatingtheirlabelsandontents)theloationspointed-to byyandxintoonerepresentativeloation(Figure2).This \nunifationmayfurtherrequirethepointed-toloationsof thepointed-toloationstobemerged,andsoon,resulting inhainsinthepoints-torepresentation.Theunifation \nisrepresenteddelarativelythroughthetyperuleinFigure 2(d).Therulesaysthattheprogramisorretlytyped (thatis,symbolsareassoiatedwithorretpoints-tosets) \nifandonlyifthepointed-toloationsofyandxareidenti\u00adal.Steensgaard'salgorithmisextremelye\u00c6ient,beause pointed-toloationsanbefoundandunifedinlosetoon\u00adstanttime(amortized).Ithasalinearspaerequirement, \nandalmostlinearrunning-time(inthesizeoftheprogram). OuronelevelfowalgorithmextendsSteensgaard'sal\u00adgorithmbypushingtheefetofassignmentproessingone \nleveldownthehainsinthepoints-tograph(Figure3).The efetofanassignmentfromytoxistointrodueaspeial \"fow\"edgefromthepointed-toloationofytothepointed\u00adtoloationofx,andtoequateonlytheontentsofthetwo \npointed-toloations(Figure3(b)).Thefowedgerelatesthe labelsofthepointed-toloations:Foreveryfowedge,allof \nthesymbolsinthelabelofthesoureoftheedgemustbe inludedinthelabelofthetargetoftheedge.Assignment proessingisrepresenteddelarativelythroughthetyperule \nin3(d).Thisrulesaysthattheprogramisorretlytyped ifandonlyifthepointed-toloationsofyandxhavethe sameontents,andifthelabelofthepointed-toloation \nofyisasubsetofthelabelofthepointed-toloationofx. Theruleallowsadegreeofsubtypinginthelabelsofthe pointed-toloations.Therefore,ouralgorithmisdiretional \nuptoonelevelbelowsymbolsrelatedbyassignments.It hasthesameefetasSteensgaard'salgorithmatalllower levelsinthepoints-torepresentation. \n3.2Delarativespeifation Wepresentthealgorithmasasetofnon-standardtypein\u00adferenerulesoverasimplelanguageofpointerrelatedas\u00adsignments(Figure4).Theserulesaresimilartotherules \nusedbySteensgaard[Ste96b,pp.35].EveryruleinFigure 4extendstheorrespondingrulefrom[Ste96b]byintrodu\u00adinganewformoftypeinequalityattheassignmentlevel,as \nillustratedinFigure3.Thedomainsforthetypeinferene desribedbytheserulesareasinFigure3(d). Theruleforx=ysaysthatthepointed-toloationof \nxmustinludethesymbolyinitslabel,andthispointed-to loationmusthavethesameontentsastheloationofy. Theruleforx=.ysaysthatthepointed-toloationofy \nandtheloationofxarerelatedbyanassignment,whilethe rulefor.x=ysaysthattheloationofyandthepointed-to loationofxarerelatedbyanassignment. \nTherulesshowninFigure4operateonatoypointerlan\u00adguage.However,theyrepresenttheesseneofthepointer analysis.Theompletealgorithminludesrulesforfuntion \ndefnitionsandalls,funtionpointers,andindiretfuntion alls.Thetyperulesareextendedtohandlethesefeatures \nexatlyasinSteensgaard'sanalysis.Funtionallsgiverise toimpliitassignmentsfromargumentstoformalparame\u00adtersandfromreturnexpressionstoallingontexts.These \nimpliitassignmentsareproessedwithoneleveloffow,in exatlythesamemannerasexpliitassignments.Weomit detailsoftheextensionsforbrevity. \n3.3Operationalalgorithm Everysymbolreferenedintheprogramisassoiatedwitha uniqueloationondemand.Theprogramisproessedone \nassignmentatatime,inludingimpliitassignmentsgener\u00adatedbyfuntionalls.Ateveryassignment,loationsare unifedasneessarytosatisfytherequirementsimposedby \ntherulesinFigure4.Wedelayproessingofthesubseton\u00adstraintsbetweenlabelsbyintroduingfowedgesbetween loations,asshowninFigure3().Theloationresulting \n(a){x {y (b) y {y { ()                (d)sESymbols .Ix:(r a).Iy:(r.a.) TELoations::=(r \na) a. =a rEIds::={s. s. aEValues::=ptr(T) .Iwelltyped(x=y) Figure2:AssignmentproessinginSteensgaard'salgorithm.Thegraphsin(a)and()aboverepresentpoints-toinformation \nbeforeandafterproessingx=y.Figure(b)depitstheunifationations,shownusingdashedboxes,triggeredbythe assignment.Thetyperulein(d)abovedesribesassignmentproessingdelaratively. \n (a){x {y (b){ {y () {y  sym sym            (d)sESymbols TELoations::=(r a) r..) rEIds::={s. \ns. .Ix:(r a).Iy:(a aEValues::=ptr(T) a. <a .Iwelltyped(x=y) ptr(r a)<ptr(r.a)<r<r. Figure3:Assignmentproessingintheonelevelfowalgorithm.Thegraphsin(a)and()aboverepresentpoints-to \ninformationbeforeandafterproessingx=y.Figure(b)depitstheationstriggeredbytheassignment.Theedgelabeled \nsymisafowedgerelatinglabelsofloations.Thedomainsandtyperulein(d)aboveprovideadelarativespeifationof assignmenthandling. \n Afx:( ,a)Afy:( .,a.) a. <a Afwelltyped(x=y) Afx:( ,a)Afy:( .,ptr(T)) ....) T=( ,a a.. <a Afwelltyped(x=*y) \nFigure4:Theonelevelfowalgorithm,expressedasasetassignments. fromtheunifationoftwoloationsinheritsthefowedge \nsuessorsofboththeunifedloations.Oneproessingof theentireprogramisomplete,labelsareomputedforall oftheloationsinthepoints\u00adtorepresentationbyafowpro\u00adessingstep:Everysymbolisassoiatedwitheveryloation \nthatisreahable,viafowedges,fromtheloationinitially assoiatedwiththesymbol. 3.4ComparisonwithAndersen'salgorithm \nTheonelevelfowalgorithmanbeviewedasarestrition ofAndersen'salgorithm,inthefollowingway:Weintro\u00adduesubtypingrulesinthelabelomponentofloations. \nAndersen'salgorithmintroduessubtypingintheontents omponentofloationsaswell.Theefetofanassignment fromytoxinAndersen'salgorithmisshowninFigure5. \nTheruleinFigure5(a)saysthattheprogramisorretly typedifandonlyifthelabelofthepointed\u00adtoloationofy isasubsetofthelabelofthepointed\u00adtosetofx,andthe \nontentsofthepointed\u00adtoloationofyisasubtypeofthe ontentsofthepointed\u00adtoloationofx.Thestruturalsub\u00adtypingrelationsintroduedbyAndersen'salgorithmmakeit \nexpensive,butalsoleadtogreaterpreision.Hisalgorithm hasaworst\u00adasequadratispaerequirement,andworst\u00adaseubirunningtime. \nThus,theonelevelfowalgorithmobtainsthepreision ofAndersen'salgorithmfortoplevelpointers,whileitob\u00adtainsthesamepreisionasSteensgaard'salgorithmforall \notherpointers.Theonelevelfowalgorithmisnotalways lesspreisethanAndersen'salgorithmonpointed\u00adtopoint\u00aders.ConsidertheprograminExample1.Theonelevel \nfowalgorithmfores81,82,and83toholdthesameon\u00adtents.Suppose81,82,and83areloals.Thentheyan bereferenedwithinfaaandbaronlyindiretly,via*pand \n*q.EvenafullydiretionalanalysissuhasAndersen's algorithmmusttreataessesof*pand*qidentially,be\u00adauseupdatesof*pmustberefetedin*q,andvieversa. \nThus,thereisnofurtherlossofpreisioninthisasebe\u00adauseofunifationatlowerlevels.Ontheotherhand,if 81isupdatedexpliitlytoholdapointervalue,Andersen's \nalgorithmwillavoidassoiatingthisvaluewithexpliitref\u00aderenestothevaluesof82and83,therebygainingpreision \novertheonelevelfowalgorithm.Ourempirialevidene suggeststhatthisaseoursinfrequentlyinCprograms. Afx:( \n,a)Afy:T ptr(T)<a Afwelltyped(x=y) Afx:( .,ptr(T))Afy:( ,a) ....) T=( ,a a<a.. Afwelltyped(*x=y) oftypeinferenerulesoverasimplelanguageofpointerrelated \n3.5Corretness WelaimthatthetyperulesinFigure4representaor\u00adretfow\u00adinsensitivepointeranalysis.Thisfollowsfromthe \nobservationthateveryruleinFigure4anbeviewedas arestritionoftheorrespondingrulefromatypesystem desribingAndersen'salgorithm,whihweassumetobe \norret.Theoperationalalgorithmreordsfowedgesat assignmentstorepresentthesubsetrelationshipsonlabels imposedbythetyperules.Whentheentireprogramispro\u00adessed,everysubsetonstraintisrepresentedbysomefow \nedgeinthepoints\u00adtograph.Theonlyexeptioniswhen twonodesinitiallyonnetedbyafowedgeareunifedinto asinglenode,inwhihasethesubsetonstraintistriv\u00adiallysatisfedbytheresultingnode.Thefnalfowstepis \nimplementedasreahabilityonfowedges.Thisensures thatafteralllabelsareomputed,thelabelsateverypair ofnodesonnetedwithafowedgesatisfythesubseton\u00adstraintrepresentedbytheorrespondingfowedge. \n3.6Complexity Thealgorithmhastwosteps:Anassignmentproessing step,whihproduesapoints\u00adtographwithfowedges,and \nafowpropagationstep.Thefrststephasthesameom\u00adplexityasSteensgaard'salgorithm:Linearspae,andalmost linearrunning\u00adtime(inthesizeoftheinputprogram).The \nnumberofnodesreatedduringthefrststepisproportional tothenumberofassignmentsintheprogram.Everynode hasasinglepointeredge.Finally,everyassignmentintro\u00adduesasinglefowedge.Therefore,thespaerequirement \nforthefrststepislinear.Therunning\u00adtimeisdetermined bytheostofassignmentproessing.Everyassignmentre\u00adquireslookupoffourpointed\u00adtoloations,theadditionof \nasinglefowedge,andaunifationstep.Asingleunif\u00adation,whihtakesonstanttime,maytriggerotheruni\u00adfations,butthetotalnumberofunifationsisbounded \nbythenumberofdistintnodes.TheamortizedostofN lookupoperationsandJunifationoperationsusingafast\u00adunion\u00adfndstrutureisO(Na(J,N))whereaistheinverse \nAkermann'sfuntion[Tar83].Therefore,theinitialphase ofthealgorithmhasalmostlinearrunningtime. Thefowstepinvolvesreahabilityoverthelineargraph \nstruture,foreverysymbolassoiatedwithanodeinthe (a)sESymbols (b) TELoations::=(r,a,a) rEIds::={s. ,,s.} \naEValues::=ptr(T)    sym ptr(r,a,a)<ptr(r.,a.,a.) _ < _ r<r. 1a<a. 1a. <a on  r..,a.).Ix:(r,a,a).Iy:(,a \na. .I ll yp (x=y) Figure5:AssignmentproessinginAndersen'salgorithm.Thedomainsandtyperulein(a)above,takenfrom[FFSA98], \nprovideadelarativespeifationofassignmenthandling.Thegraphin(b)aboverepresentstheefetoftheassignment ation,whihistoinduesubtypingrelationshipsbetweenthepointed\u00adtoloationsofyandx.Thesearerepresentedpitorially \nbyedgeslabeledsymandon,whiharefowedgesrelatinglabelsandontents,respetively.Notethatthegraphin(b)is  \n  asimplifationofthetyperulein(a),whihinduesfowedgespoints\u00adtorepresentation. graph.Intheworstase,eahsymbolisaddedtothesetof \nsymbols(usingonstant\u00adtimeappendoperations)atevery node.Therefore,thisstephasworst\u00adasequadratitimeand \nspaerequirements.Thefowstepanalsobeperformed inademand\u00addrivenmanner.Thepoints\u00adtosetatasingle dereferenepointanbeobtainedbyasinglelinearwalkof \nthepoints\u00adtorepresentation. 4Experiments Inthissetion,wefrstdesribeourimplementationofthe onelevelfowalgorithm,andourexperimentalsetup.We \nthenpresentourresults. 4.1Implementationandexperimentalsetup WehaveproduedamodularimplementationofSteens\u00adgaard'salgorithmusingtheASTToolkit[AST],whihis \nitselfanextensionoftheMirosoftVisualCompiler.Our implementation,whihinludesalientandalinker,han\u00addlesallofthefeaturesofC.Thelientanalyzesindividual \nompilationunits,andproduesobjetflesofaspeialkind. Eahobjetfleontainsapartialpoints\u00adtograph,andata\u00adblethatassoiatessymbolsandfuntionswithnodesinthe \ngraph.Thelinkerproduesglobalpoints\u00adtoinformationby unifyingloationsorrespondingtothesamesymbolorfun\u00adtionfromdiferentobjetfles.Loalandstatisymbols, \nwhiharealsopassedontothelinker,areassignedglob\u00adallyuniquenames.Wemodellibraryfuntionsforwhih soureodeisnotavailableusinghand\u00adodedstubfun\u00adtionsthatsimulatethepointerefetsoftheorresponding \nlibraryfuntions.Wetreatlibraryfuntionspolymorphi\u00adally,byloningthepartialpoints\u00adtographsorresponding tothesefuntionsatallsites.Inordertomodelalloator \nfuntions,weautomatiallyreateadummysymbolrepre\u00adsentingauniquememoryloationateahalltoanalloator funtion.Wedonotmodelonstantstrings. \nOurimplementationinludesagarbageolletor,whih periodiallyreleasesmemoryassoiatedwithloationsthat areforwardedbyunifation.Garbageolletionisanim\u00adportantfeatureofoursalablepointeranalysis;itallowsus \ntoproessa1.4MLOCprogramwithoutdiskthrashingon onontentsinbothpositiveandnegativediretionsinthe amahinewith256MBofmemory.Ourbaseimplementa\u00adtioninludesavarietyofpreision\u00adenhaningfeatures(in\u00adludingpendinglists,struturelayoutmapping,k\u00adlimited \noutdegree,andflteringofindiretallsusinglengthsofar\u00adgumentlists),whihanbeenabledusingommandline swithes.Inordertomeasuretheefetivenessofourteh\u00adniqueaurately,wedidnotenableanyofthesefeatures \n(exeptpendinglists)inourexperiments. Weimplementedtheonelevelfowalgorithmbyextend\u00adingtheassignmentruleinourbaseanalysis,andaddinga \nfowomputationsteptothelinkphase.Thesehangestook lessthanadaytoimplement.Apartfromalloftheusual testing,weverifedtheorretnessofourimplementationin \nthreeways:First,weomparedourimplementationagainst anindependentimplementationofSteensgaard'sanalysis \nproduedbyourgroup[FRDOO],andagainstanimplemen\u00adtationofSteensgaard'sanalysisproduedusingtheBANE frameworkatUCBerkeley[FFSA98].Allthreeimplemen\u00adtationsprodueidentialpoints\u00adtoinformationforallofthe \nSPECINT95benhmarkprograms.Seond,wetestedour implementationofthefowomputationstepbytreating fowedgesbi\u00addiretionallyandverifyingthatweobtainex\u00adatlythesamepoints\u00adtoinformationaswithSteensgaard's \nalgorithm.Third,thestrikingsimilaritybetweenthepoints\u00adtoinformationomputedbytheonelevelfowalgorithmand \nAndersen'salgorithmprovidesastrongindiationoftheor\u00adretnessoftheonelevelfowalgorithm. 4.1.1ComparisonwithAndersen'salgorithm \nAlthoughwehaveimplementedSteensgaard'salgorithmand theonelevelfowalgorithm,wehavenotimplementedAn\u00addersen'salgorithm.Therefore,weusedanimplementation \nofAndersen'salgorithmbasedontheBANEframeworkto obtainpreisionmeasurementsforAndersen'salgorithmon allofourbenhmarkprograms(exeptMirosoftWord,to \nwhihAndersen'salgorithmdoesnotsale).TheBANE frameworkdoesnotinludeanimplementationoftheone levelfowalgorithm.Further,BANEusesadiferentfront\u00adendthanourinfrastruture.Thisraisesanaturalques\u00adtionaboutthevalidityofourexperiments,whihompare \nthepoints\u00adtoinformationproduedbyallthreealgorithms onasetofbenhmarkprograms.Inordertoanswerthis Program \nLOC ASTnodes Analysistime(ses) Averagethru\u00adderefsize Ste96 Flow Ste96 And94 Flow ompress 1,904 2,234 \n0.03 0.05 2.1 1.22 1.22 li 7,602 23,379 0.43 0.67 287.7 185.62 185.62 m88ksim 19,412 65,967 0.79 1.22 \n86.3 3.19 3.29 ijpeg 31,215 79,486 0.97 1.51 17.0 11.76 11.78 go 29,919 109,134 0.89 1.42 45.2 14.79 \n14.79 perl 26,871 116,490 1.21 2.12 36.1 22.22 22.22 vortex 67,211 200,107 3.35 5.66 1,064.5 45.54 59.30 \ng 205,406 604,100 5.70 9.45 245.8 7.71 7.72 Word97 2,150,793 5,961,129 61.34 126.83 27,258.6 11,219.5 \n Table1:Experimentaldata.Foreahbenhmarkprogram,thetableaboveshowsthelinesofodeandASTnodeount,the runningtimeofSteensgaard'salgorithm(Ste96)andtheonelevelfowalgorithm(Flow),andtheaveragesizeofpoints\u00adto \nsetsatstatidereferenepointsforSteensgaard'salgorithm(Ste96),Andersen'salgorithm(And94),andtheonelevelfow \nalgorithm(Flow). question,wespentseveralmonthssynhronizingthetwoin\u00adfrastruturessothattheyprodueidentialpoints\u00adtoinfor\u00admationusingSteensgaard'sanalysis.Thisproessinvolved \nmakingseveralhangestothetwoinfrastruturestoensure thatlibraryfuntionsaretreatedpolymorphially,symbols \nareountedsimilarly,et.Beausethetwoinfrastrutures havenowbeen\"normalized\"toprodueidentialpoints\u00adto informationforSteensgaard'sanalysis,itispossibletodi\u00adretlyomparethepreisionoftheonelevelfowalgorithm \nwiththatofAndersen'salgorithm. 4.1.2Benhmarkprograms Table1showsourbenhmarkprograms,onsistingofthein\u00adtegerbenhmarksfromSPEC95,andaversionofMirosoft \nWord.Foreahbenhmark,welistthetotallinesofodein sourefles(inludingommentsandblanklines),aswellas thenumberofASTnodes,whihwefeelisamoreaurate \nmeasureofprogramsize..Eahbenhmarkwasanalyzed usingSteensgaard'sanalysis,theonelevelfowalgorithm, andAndersen'salgorithm.Wereporttheanalysistime,av\u00aderagedover5runs,forSteensgaard'sanalysisandtheone \nlevelfowalgorithm.Analysistimeinludestimetoanalyze eahompilationunit(notinludingparsetime),timeto writeoutobjetfles,andtimetakenbythelinkphase.Link \nphasetimeinludestimetoreadinalloftheobjetfles,per\u00adformunifations,fowsymbols,andomputepoints\u00adtosets exhaustivelyatallstatidereferenepointsintheprogram. \nAllofourexperimentswereondutedonaDell610desk\u00adtopPCrunningWindowsNT4,with512MBRAManda single450MhzIntelXeonproessor.Wereporttheaverage \nsizeofpoints\u00adtosetsatstatidereferenepointsusingall threealgorithms.Asmentionedearlier,weareunableto runAndersen'salgorithmonMirosoftWord.Wedonot \nonsiderarrayaesses(whiharedeterminedusingthede\u00adlaredtypesintheprogram)asdereferenepoints.Weomit dataforpoints\u00adtosetsatindiretallsites,althoughtheone \nlevelfowtehniqueanalsobeappliedtofuntionpointers. 4.2Results Inthissubsetion,wepresentresultsthatsupportthefol\u00adlowinglaim:Theonelevelfowalgorithmhasthesaling \n.Word97andgontainroughly1.4MLOCand140,000LOC respetively,exludingommentsandblanklines. propertiesofSteensgaard'salgorithm,andthepreisionof \nAndersen'salgorithm. 4.2.1PerformanevsSteensgaard'salgorithm InFigure6,weharttherunningtimesfromTable1for \nSteensgaard'salgorithmandtheonelevelfowalgorithm. Weusetheratioofrunning\u00adtime(milliseonds)toprogram size(ASTnodeount).Thehartshowsthatforbothal\u00adgorithms,thisratioisfairlysteadyasprogramsizegrows, \nindiatingthattheanalysessalelinearlywithprogramsize. Theonelevelfowalgorithmhastwodiferentoverheads whenomparedwithSteensgaard'salgorithm:Theoverhead \nofreadingandwritinglargerobjetfles(fewerunifations areperformed),andtheoverheadofthefowstep.Theone levelfowalgorithmrequiresroughlytwieasmuhtimeas \nSteensgaard'salgorithmoverallofthetestprograms. Wereduedthetimerequiredforthefowstepusinga simplefatoringtehnique:Weidentifythenodewiththe \ngreatestnumberofoutgoingfowedges,viaasinglelinear sanofthepoints\u00adtograph.Wethenperformreahability fromthisnodeexatlyone,appendingthelistofsymbols \nthatreahthisnodetothelistofsymbolsateverynode reahablefromthisnode.Thisoptimizationeliminatesre\u00adpeatedsansofalargeportionofthepoints\u00adtograph.Itis \npossibletoextendthisideatomorethanasinglenode,but wedidnotfndthatneessary. Tosavespae,wedonotpresentdataonspaeonsump\u00adtion.Theonelevelfowalgorithmrequiresmorememory \nthanSteensgaard'salgorithm,beausefewerloationsare relaimedbythegarbageolletorduringthelinkphase, andbeausesymbolsmaybeassoiatedwithmultiplelo\u00adationsafterthefowstep.Spaeonsumptionisstillvery \nlow.Forinstane,theonelevelfowalgorithmrequiresless than200MBofspaeforWord97. 4.2.2PreisionvsAndersen'salgorithm \nInFigure7,weharttheaveragesizesofpoints\u00adtosetsat dereferenepoints,usingAndersen'salgorithmandtheone levelfowalgorithm.Thesizeofthepoints\u00adtosetataderef\u00aderenepointismeasuredasthenumberofprogramsymbols, \ninludingdummysymbolsproduedatalloationsites,in thepoints\u00adtosetofthedereferenedexpression.Beause theaveragesvarygreatlyarossthetestprograms,wehave \nnormalizedtheaveragesagainstSteensgaard'salgorithmto Analysis time (ms per 1000 nodes) 30 20 10 0  Figure6:Salingofthemilliseondsinoneper \n1000ASTnodes.Thelowestis omputationstep. 100 80 60 40 20 0 Average points-to set size (normalized) Benchmark \nOne level flow Andersen Figure7:Preisionoftheonelevelfowalgorithm,relativetoAndersen'salgorithm.Foreahbenhmark,thefgureshows \ntheaveragesizeofpoints-tosetsatstatidereferenepoints,usingtheonelevelfowalgorithmandAndersen'salgorithm.In \nordertoindiatetheextenttowhihtheonelevelfowalgorithmbridgesthegapinpreisionbetweenSteensgaard'salgorithm \nandAndersen'salgorithm,wehavenormalizedtheaveragesizestoasalewheretheaverageusingSteensgaard'salgorithm \nis100foreverybenhmark.Forreferene,wehavelabeledtheolumnsfortheonelevelfowalgorithmwiththeatualsizes fromTable1. \nAnd94Flow  44 6 5 And94Flow 5 6  55   4  59 6  9 6     5  6 ompress m88ksim And94Flow \n   4 6 6  5 6  4  6 And94Flow  9  4 5 5 6 6 li perl And94Flow  6   5  66 9 49 9 \n  5 And94Flow 5  5 9 4 45 5 5 go ijpeg And94Flow 95 66 946  4  4 9 56 9  9 49 69 6 54 \n   6 4 554 6 And94Flow 9   5  4 4 5 6 9   5  55 6  4 4 4 4 g And94Flow 65   6 4 4 \n  4 5 9 655 9 4 9   5   9 4  5 6  4 5 94 And94   6 46 5 6 9   9  5 6 9 44 46 \n 49 5 5 4 95 5 4 Flow    5 5 5 vortex Figure8:Distributionsofpoints-tosetsizesatdereferenes.Eahtableaboveshows,foragivenbenhmark,thenumberof \nstatidereferenesitesassoiatedwithpoints-tosetsofgivensizesbyAndersen'salgorithmandtheonelevelfowalgorithm. \nEntriesfortheonelevelfowalgorithmareshownasdeviationsfromtheentriesforAndersen'salgorithm.Onlynon-zero \ndeviationsareshown.Thedistributionforvortexontainstoomanydiferentsizesforthemalltobelistedindividually. \n4565 4666 59 94 959 Ste96Flow 555 6 499 5 6 5 95 4  49 4 6 4 4 4 4 59 Word97.allstatidereferenes \n 6 6  44 Ste96Flow 4  9 44 45 4565 46 49 6 4 4 54 9 9 66 69 6 4 Word97.updatesthroughstatidereferenes \n6 6 59 94 959 45 Figure9:Distributionsofpoints-tosetsizesatdereferenesinWord97.Thefrsttableaboveshowsthenumberofstati \ndereferenesitesinWord97assoiatedwithpoints-tosetsofgivensizesbySteensgaard'salgorithmandtheonelevelfow \nalgorithm.Theseondtableinludesonlydereferenesrepresentingupdates. 43 20 16 12 Percentage of all mod derefs \nPercentage of all derefs 8  4 0 0 1 2 3 4 5 6-10 11-100 0 1 2 3 4 5 6-10 11-100 Points-to set size Points-to \nset size Steensgaard One level flow Steensgaard One level flo w (a) (b) Figure10: Distributionsofderefereneswithsmallpoints\u00adto \nsets inWord97. Thehartin(a)above s h ows theperentage ofstatidereferenesitesinWord97assoiatedwithpoints\u00adtosetsofvarioussmallsizesbySteensgaard'salgorithmandthe \nonelevelfowalgorithm.Thehartin(b)aboveinludesonlydereferenesrepresentingupdates. representtherelativeimprovementsobtainedbythetwoal\u00adgorithms.Allthreeanalyseswererunwiththesameset\u00adtings,inludingpolymorphilibraryfuntions,andpending \nlists(notneededforAndersen'sanalysis).Thehartshows thatthepreisionoftheonelevelfowalgorithmisverylose \ntothatofAndersen'salgorithmforallofourtestprograms. Figure8showsthedistributionofdereferenes,using thetwoalgorithms,foralloftheSPECINT95benhmark \nprograms.Forsixoftheseprograms(ompress,m88ksim, li,perl,go,ijpeg),thedistributionsareeitheridentialor \nalmostidential.Forg,theonlydifereneisthatAnder\u00adsen'salgorithmomputesmoreemptypoints\u00adtosetsthan ouralgorithm.Emptypoints\u00adtosetsareproduedatderef\u00aderenepointsbeauseoftwoprimaryreasons:First,the \nbenhmarksontainfuntionsthatareneveralled.Some ofthesefuntionshavepointerparametersthatarederefer\u00adened.Seond,wedonotmodelonstantstrings. \nTheimplementationofAndersen'salgorithminBANE islazy:Ifapointerphasnopoints\u00adtoset,anditspoints\u00adto target.pisassignedapointervalue,theassignedpointer \nvalueisnotpropagatedtodereferenes..p.Ouralgorithm sometimespropagatessuhvalueseagerlyviaunifations, andproduesfeweremptypoints\u00adtosetsasaresult.This \nefetisseeninthedistributionforg. Intuitively,therearetworeasonswhytheresultsofthe onelevelfowalgorithmsoloselymimitheresultsofAn\u00addersen'salgorithm:First,ouralgorithmisaspreiseasAn\u00addersen'salgorithmfortoplevelpointers(i.e.,pointersthat \narenotthemselvespointedtobyotherpointers).Toplevel pointersdominateinrealode,beauseofparameterpass\u00ading.Seond,eveninaseswheretherearepointed\u00adtopoint\u00aders,theseoftenarisebeauseaddressesofpointer\u00advalued \nobjets(orstrutureswithpointer\u00advaluedfelds)arepassed tofuntions.AspointedoutinSetion3.4,Andersen'sal\u00adgorithmmusttreataessesthroughdereferenesofthese \npointersbi\u00addiretionally. Theonlybenhmarkwithnon\u00adtrivialdiferenesinthe distributionsisvortex.Thisisbeausevortexontainssev\u00aderalinstanesofpointerstopointerswherethetargetsym\u00adbolsofthetoplevelpointersarebothupdatedandrefer\u00adeneddiretly. \n4.2.3 lo erlookatord97 ThedistributionsinFigure8showthattheonelevelfow algorithmrepresentsamethodforobtainingessentiallythe \npreisionofAndersen'salgorithminamannerthatsales easilytolargeprograms.However,itmaybearguedthat fortheonlyverylargeprograminourtestsuite,theaverage \nobtainedusingouralgorithmistoolargefortheanalysis tobeuseful,evenifthisaverageismuhlowerthanthat obtainedusingSteensgaard'salgorithm. \nFigure9showsthedistributionofdereferenesforWord 97,usingSteensgaard'salgorithmandtheonelevelfowal\u00adgorithm.Weshowthedistributionforalldereferenesand \nupdatesthroughdereferenes.Thefgureshowsthatoural\u00adgorithmhastwoefets:Itreduesthesizeofthedominant points\u00adtoset,anditshiftsthedistributiontoinludemore \nsmall\u00adsizedpoints\u00adtosets.Thelatterefetshowsthevalue oftheonelevelfowalgorithm.Theshiftindistributionis \nshownvisuallyinFigure10.Forinstane,thedistribution ofupdatesthroughdereferenesusingouralgorithmisbi\u00admodal:Overfortyperentoftheseupdateshaveverysmall \npoints\u00adtosets.Alientstatianalysisantakeadvantageof thepreiseinformationattheseupdates,whilemakingthe \nusualonservativeassumptionsthatareneessarywhenno pointerinformationisavailableattheremainingupdates. \n5Relatedwork Inreentyears,therehasbeenmuhworkinthedesign ofpointeranalysisalgorithms.Tehniquesdesribedinthe \nliteratureomeinavarietyoffavours:Flow\u00adsensitiveanal\u00adyses,suhas[LR92,CBC93],takeintoaounttheorderin whihstatementsareexeuted,whilefow\u00adinsensitiveanal\u00adyses,suhas[And94,Ste96b],assumethatstatementsan \nexeuteinanyorder.Similarly,ontext\u00adsensitiveorpoly\u00admorphianalyses[EGH94,WL95]keepdiferentallsitesto thesamealleefuntionapartintheanalysis,whileontext\u00adinsensitiveanalysesdonot.Eahofthesehoiesintrodues \natradeofbetweensalingandpreision.Inaddition,the preisionofanypointeranalysisanbeimprovedthrough theuseoforthogonaltehniquessuhasstruturelayout \n mapping[Ste96a,YHR99,RFT99],orshapeanalysisofheap alloateddatastrutures[GH96,SRW99]. Ourgoalisanalgorithmthatsalestolargeprograms, \nwhileprovidingpreisionomparabletoAndersen'salgo\u00adrithm.Thepreviousworklosesttooursisthemultiple outdegreealgorithmofShapiroandHorwitz[SH97b],whih \nattemptstobridgethegapbetweenSteensgaard'sandAn\u00addersen'sanalysesbyk\u00adlimitingtheoutdegreeofnodesin thepoints\u00adtograph.Beausetheaverageasememoryre\u00adquirementoftheiralgorithmisktimesthatofSteensgaard's \nalgorithm,onlysmallvaluesofkanbeusedforlargerpro\u00adgrams.However,largeprogramsrequirelargefanoutinthe points\u00adtograph,asthesameutilityfuntionsarealledfrom \nmoreallsites.Tooveromethisproblem,ShapiroandHor\u00adwitzproposeashemeinwhihthek\u00adlimitedalgorithmis runmultipletimes.Thisshemereliesonperforminginter\u00adsetionsofpoints\u00adtosetsfrommultipleruns,whihanbe \nexpensive.Itisalsoritiallydependentonthemannerin whihsymbolsarepartitioned.Webelievethatouralgo\u00adrithmismorepratialthantheirmultiplerunalgorithm \nbeauseouralgorithmappearstosalebettertolargerpro\u00adgrams,bothintermsoftimeandspaerequirementsandin termsofpreision. \nTheprograminFigure1(a)isanexampleofaommon aseofpointerusageinvolvingproedurealls.Analterna\u00adtivemethodforimprovingpreisioninsuhasesistousea \nontext\u00adsensitiveversionofunifation\u00adbasedpointeranaly\u00adsis.Oneapproah,exemplifedbyRehof'simplementation \nfrom[FRDOO],istousepolymorphitypeinferenetobuild aninstantiationgraphthatreordsfowinformation.This approahhasbeenfoundtosaletolargeprogramsinpra\u00adtie.LiangandHarroldhavedevelopedaseondapproah \nthatoperatesonanexpliitallgraph[LH99].However, theyhaveonlytestedthisapproahonverysmallprograms withoutindiretalls.Wehavefoundthatinlargerpro\u00adgrams,whihontainmanyindiretallsandlargepoints\u00adto \nsetsforfuntionpointers,allgraphsbeomeunmanageably large.Wehavefoundthistobetrueevenafterusingthe flteringtehniquesproposedin[AG98].Therefore,webe\u00adlievethatpolymorphitypeinfereneisthebestoptionfor \nsalableontext\u00adsensitivepointeranalysis. Thedrawbakofaontext\u00adsensitiveextensionofSteens\u00adgaard'sanalysisisthatitintroduesdiretionalityonlyat \ntheimpliitassignmentsinduedbyfuntionalls,while expliitassignmentsaretreatedbi\u00addiretionally.Thismay limitpreisionimprovement.Forinstane,wehavefound \nthatpolymorphismreduestheaveragesizeofpoints\u00adtosets atdereferenesingfromSPEC95toapproximately1OO,as omparedtotheaverageof8produedbytheonelevelfow \nalgorithm.Ontheotherhand,therearesituationswherea polymorphianalysiswouldprovidepreisiongainsnotpro\u00advidedbytheonelevelfowalgorithm.Anaturalquestion \nthatarisesiswhetherthetwotehniquesanbeombined formaximumbeneft.Onesolutionistousethetehnique ofpolymorphifowanalysisproposedin[FRD99]. \nMuhworkhasalsobeendonefromtheotherdire\u00adtion,namelyonimprovingthesalingbehaviourofAnder\u00adsen'salgorithm.TheimplementationofAndersen'sanaly\u00adsisdevelopedatUCBerkeleyuseson\u00adlineyleelimination \n[FFSA98]andprojetionmerging[SFAOO]tospeedupthe analysissubstantially.RountevandChandrahaveuseda pre\u00adproessingsteptofurtherimproveperformanebyafa\u00adtoroftwo[RCOO].Inspiteoftheseeforts,Andersen'salgo\u00adrithmdoesnotyetsaletoprogramsbeyond5OOKLOC.We \nbelievethatouruseofahighlye\u00c6ientunifationengine atallbuttheritialregionsofthepoints\u00adtographavoids mostofthe\"wasted\"workdonebyAndersen'salgorithm. \nWearrivedatouronelevelfowalgorithmbyexamining largeamountsofode,anddevelopingasuessionofal\u00adgorithmsthateahwentonestepfurtherthantheprevious \nalgorithmintermsofimprovingpreisionoverSteensgaard's approah.Theonelevelfowtehniquethatresultedfrom thisexeriseisanexampleofsubtypingrestritedtoone \nlevelinthetypestruture.Thisideahasbeenpreviously usedinotherontexts.Itisalled\"simplelosureanalysis\" in[Hen92]andisthebasisofe\u00c6ientbinding\u00adtimeanalysis \n[Hen91],losureanalysisanddynamitypeinferenealgo\u00adrithms.Inasubtypesetting,therestritiontotoplevelis haraterizedbytheabseneof\"indued\"or\"deep\"subtyp\u00adingrules.Ourworkshowsthatthisrestritionofsubtyping \nhasausefulappliationinthedomainofpointeranalysis. 6Conlusions Webelievethatouronelevelfowalgorithmprovidesapra\u00adtialmethodforobtainingpreisefowandontextinsensi\u00adtivepoints\u00adtoinformationonlargeCprograms.However, \nthisisonlythefrststepinourlongtermagendaofim\u00adprovingthepreisionofsalablepointeranalysis.Thereare severallogialnextstepsinthisdiretion: \n.Combiningtheonelevelfowtehniquewithpolymor\u00adphipointeranalysis,usingthetehniqueofpolymor\u00adphifowanalysis[FRD99] \n.Combiningtheonelevelfowtehniquewithorthogonal preisionenhanementssuhasstruturefelddisam\u00adbiguationandallfltering \n.Extendingtheonelevelfowtehniquebyintroduing approximationstofow\u00adsensitivitysuhasSSAform Ouralgorithmisatehniquethatexploitsoneom\u00admonaseofpointerusageinCprograms.Therearelikely \nmanyremainingopportunitiesforimprovingthepreision ofpointeranalysis. Theonelevelfowtehniqueprovidesasimplemethod \nforimprovingthepreisionofanyunifation\u00adbasedanalysis. WehavefoundthatpointeranalysisofCprogramsisone settinginwhihthisapproahprovidessubstantialbeneft; \nthereareprobablymanyothers. Aknowledgements WewouldliketothankDanielWeise,ManuelFahndrih, JakobRehof,andBjarneSteensgaardofMirosoftResearh \nformanyusefuldisussionsonpointeranalysis.JefFos\u00adterofUCBerkeleyprovidedhisimplementationofAnder\u00adsen'salgorithm.SuanYongofUWisonsinspentseveral \nmonthshelpingusimprovethepreisionofSteensgaard's algorithm.TheSemantis\u00adBasedToolsgroupatMirosoft ResearhprovidedtheASTToolkit.Wethanktheanony\u00admousrefereesfortheirarefulreviewsoftheoriginaldraft \nofthispaper. Referenes [AG98]D.AtkinsonandW.Griswold.Efetivewhole\u00adprogramanalysisinthepreseneofpointers.In \n ProeedingsoftheACMSIGSOFT98Sympo\u00adsiumontheFoundationsofSoftwareEngineer\u00ading,1998. [And94]L.Andersen.Programanalysisandspeializa\u00adtionfortheCprogramminglanguage.PhDthe\u00adsis,DIKU,UniversityofCopenhagen,May1994. \nDIKUreport94/19. [AST]ASTToolkitdoumentation. //researh.mirosoft.om/sbt/asttoolkit/ast.htm [CBC93]J.D.Choi,M.Burke,andP.Carini.E\u00c6\u00adientfow-sensitiveinterproeduralomputation \nofpointer-induedaliasesandside-efets.In ConfereneReordoftheTwenty\u00adFourthACM SymposiumonPriniplesofProgrammingLan\u00adguages,1993. \n[EGH94]M.Emami,R.Ghiya,andL.Hendren.Context\u00adsensitiveinterproeduralpoints-toanalysisinthe preseneoffuntionpointers.InProeedings \noftheACMSIGPLAN94ConfereneonPro\u00adgrammingLanguageDesignandImplementation, 1994. [FFSA98]M.Faahndrih,J.Foster,Z.Su,andA.Aiken. \nPartialonlineyleeliminationininlusionon\u00adstraintgraphs.InProeedingsoftheACMSIG\u00adPLAN98ConfereneonProgrammingLanguage \nDesignandImplementation,1998. [FRD99]M.Faahndrih,J.Rehof,andM.Das.From polymorphisubtypingtoCFLReahability: \nContext-sensitivefowanalysisusinginstantia-tiononstraints.TehnialReportMSR-TR-99\u00ad84,MirosoftResearh,Redmond,WA,Novem\u00adber1999. \n[FRDOO]M.Faahndrih,J.Rehof,andM.Das.Salable ontext-sensitivefowanalysisusinginstantiation onstraints.InProeedingsoftheACMSIG\u00adPLAN2000ConfereneonProgrammingLan\u00adguageDesignandImplementation,2OOO. \n[GH96]R.GhiyaandL.Hendren.Isitatree,aDAG, orayligraph?Ashapeanalysisforheap\u00addiretedpointersinC.InConfereneReordof \ntheTwenty\u00adThirdACMSymposiumonPriniples ofProgrammingLanguages,1996. [Hen91]FritzHenglein.E\u00c6ienttypeinferenefor \nhigher-orderbinding-timeanalysis.InPro. Conf.onFuntionalProgrammingLanguages andComputerArhiteture(FPCA),Cambridge, \nMassahusetts,pages448.472.Springer,August 1991.LetureNotesinComputerSiene,Vol. 523;alsoDIKUSemantisReportD-88. \n[Hen92]FritzHenglein.Simplelosureanalysis.DIKU SemantisReportD-193,DIKU,Universityof Copenhagen,Universitetsparken1,DK-21OO \nCopenhagenEast,Denmark,Marh1992. [LH99]D.LiangandM.Harrold.E\u00c6ientpoints-toanal\u00adysisforwholeprogramanalysis.InProeedings \nofthe7thEuropeanSoftwareEngineeringCon\u00adfereneand7thACMSIGSOFTSymposiumon theFoundationsofSoftwareEngineering,1999. \n[LR92] W.LandiandB.Ryder.Asafeapproximateal\u00adgorithmforinterproeduralpointeraliasing.In ProeedingsoftheACMSIGPLAN92Confer\u00adeneonProgrammingLanguageDesignandIm\u00adplementation,1992. \n[RCOO] A.RountevandS.Chandra.Of-linevariable substitutionforsalingpoints-toanalysis.In ProeedingsoftheACMSIGPLAN2000Confer\u00adeneonProgrammingLanguageDesignandIm\u00adplementation,2OOO. \n[RFT99] G.Ramalingam,J.Field,andF.Tip.Aggre\u00adgatestrutureidentifationanditsappliation toprogramanalysis.InConfereneReordofthe \nTwenty\u00adSixthACMSymposiumonPriniplesof ProgrammingLanguages,1999. [SFAOO] Z.Su,M.Faahndrih,andA.Aiken.Proje\u00adtionmerging:Reduingredundaniesininlu\u00adsiononstraintgraphs.InConfereneReordof \ntheTwenty\u00adSeventhACMSymposiumonPrini\u00adplesofProgrammingLanguages,2OOO. [SH97a] M.ShapiroandS.Horwitz.Theefetsofthepre\u00adisionofpointeranalysis.InLNCS1302,4thIn\u00adternationalSymposiumonStatiAnalysis,1997. \nSpringer-Verlag,September1997. [SH97b] M.ShapiroandS.Horwitz.Fastandaurate fow-insensitivepoints-toanalysis.InConferene \nReordoftheTwenty\u00adFourthACMSymposium onPriniplesofProgrammingLanguages,1997. [SRW99] M.Sagiv,T.Reps,andR.Wilhelm.Parametri \nshapeanalysisvia3-valuedlogi.InConferene ReordoftheTwenty\u00adSixthACMSymposiumon PriniplesofProgrammingLanguages,1999. \n[Ste96a] B.Steensgaard.Points-toanalysisbytypein\u00adfereneofprogramswithstruturesandunions. InLNCS1060,Proeedingsofthe1996Inter\u00adnationalConfereneonCompilerConstrution, \npages136.15O.Springer-Verlag,1996. [Ste96b] B.Steensgaard.Points-toanalysisinalmostlin\u00adeartime.InConfereneReordoftheTwenty\u00adThirdACMSymposiumonPriniplesofPro\u00adgrammingLanguages,1996. \n[Tar83] R.E.Tarjan.Datastruturesandnetworkfow algorithms.RegionalConfereneSeriesinAp\u00adpliedMathematis,CMBS44,1983. \n[WL95] R.WilsonandM.Lam.E\u00c6ientontext\u00adsensitivepointeranalysisforCprograms.InPro\u00adeedingsoftheACMSIGPLAN95Confereneon \nProgrammingLanguageDesignandImplementa\u00adtion,1995. [YHR99] S.Yong,S.Horwitz,andT.Reps.Pointeranal\u00adysisforprogramswithstruturesandasting.In \nProeedingsoftheACMSIGPLAN99Confer\u00adeneonProgrammingLanguageDesignandIm\u00adplementation,1999.  \n\t\t\t", "proc_id": "349299", "abstract": "<p>This paper describes a new algorithm for flow and context insensitive  pointer analysis of C programs. Our studies show that the most common use of pointers in C programs is in passing the addresses of composite objects or updateable values as arguments to procedures. Therefore, we have designed a low-cost algorithm that handles this common case accurately. In terms of both precision and running time, this algorithm lies between  Steensgaard's algorithm, which treats assignments bi-directionally using unification, and Andersen's algorithm, which treats assignments directionally using subtyping. Our &#8220;one level flow&#8221; algorithm uses a restricted form of subtyping to avoid unification of symbols at the top levels of pointer chains in the points-to graph, while using   unification  elsewhere in the graph. The method scales easily to large programs. For instance, we are able to analyze a 1.4 MLOC (million lines of code) program in two minutes, using less than 200MB of memory. At the same time, the precision of our algorithm is very close to that of Andersen's algorithm. On all of the integer benchmark programs from SPEC95, the one level flow algorithm and Andersen's algorithm produce either identical or essentially identical points-to information. Therefore, we claim that our algorithm provides a method for obtaining precise flow-insensitive points-to information for large C programs.</p>", "authors": [{"name": "Manuvir Das", "author_profile_id": "81100143266", "affiliation": "Microsoft Research, Redmond, WA", "person_id": "PP14060503", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/349299.349309", "year": "2000", "article_id": "349309", "conference": "PLDI", "title": "Unification-based pointer analysis with directional assignments", "url": "http://dl.acm.org/citation.cfm?id=349309"}