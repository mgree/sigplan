{"article_publication_date": "05-01-2000", "fulltext": "\n BitwidthAnalysiswithApplicationtoSiliconCompilation MarkStephenson,JonathanBabb,andSamanAmarasinghe \nMassachusettsInstituteofTechnology LaboratoryforComputerScience Cambridge,MA02139 fmstephen,samang@lcs.mit.edu,jbabb@princeton.edu \nAbstract ThispaperintroducesBitwise,acompilerthatminimizes thebitwidth|thenumberofbitsusedtorepresenteach \noperand|forbothintegersandpointersinaprogram.By propagatingstaticinformationbothforwardandbackward intheprogramdatafowgraph,Bitwisefreestheprogram\u00admerfromdeclaringbitwidthinvariantsincaseswherethe \ncompilercandeterminebitwidthsautomatically.Because loopinstructionscomprisethebulkofdynamicallyexecuted \ninstructions,Bitwiseincorporatessophisticatedloopanaly\u00adsistechniquesforidentifyingbitwidths.Wefndarichop\u00adportunityforbitwidthreductioninmodernmultimediaand \nstreamingapplicationworkloads.Fornewarchitecturesthat supportsub-worddata-types,weexpectthatourbitwidth \nreductionswillsavepowerandincreaseprocessorperfor\u00admance. Thispaperalsoappliesouranalysistosiliconcompila\u00adtion,thetranslationofprogramsintocustomhardware,to \nrealizethefullbeneftsofbitwidthreduction.Wedescribe ourintegrationofBitwisewiththeDeepCSiliconCompiler. \nBytakingadvantageofbitwidthinformationduringarchi\u00adtecturalsynthesis,wereducesiliconrealestateby15{86%, \nimproveclockspeedby3{249%,andreducepowerby 46{73%.Thenexteraofgeneralpurposeandreconfg\u00adurablearchitecturesshouldstrivetocaptureaportionof \nthesegains. 1Introduction Thepioneersofthecomputingrevolutiondescribedin StevenLevy'sbookHackerscompetedtomakethebestuse \nofeverypreciousarchitecturalresource.Theyhand-tuned eachprogramstatementandoperand.Incontrast,today's \nprogrammerspaylittleattentiontosmalldetailssuchas thebitwidth(e.g.,8,16,32)ofdata-typesusedintheirpro\u00adgrams.Forinstance,intheCprogramminglanguage,itis \ncommontousea32-bitintegerdata-typetorepresentasin\u00adgleBooleanvariable.Wecoulddismissthisshiftinempha\u00adsisasaconsequenceofabundantcomputingresourcesand \nexpensiveprogrammertime.However,thereisanotherhis- Permissiontomakedigitalorhardcopiesofallorpartofthisworkfor \npersonalorclassroomuseisgrantedwithoutfeeprovidedthatcopies arenotmadeordistributedforproftorcommercialadvantageand \nthatcopiesbearthisnoticeandthefullcitationofthefrstpage.To copyotherwise,orrepublish,topostonserversortoredistributeto \nlists,requirespriorspecifcpermissionand/orafee. PLDI2000,Vancouver,BritishColumbia,Canada. Copyright2000ACM1-58113-199-2/00/0006...$5.00. \ntoricalreason:asprocessorarchitectureshaveevolved,the useofsmalleroperandseventuallyhasprovidednoperfor\u00admancegains.Datapathsbecamewider,buttheprocessor's \nentiredatapathwasexercisedregardlessofoperandsize. Infact,theadditionaloverheadofpackingandunpacking \nwords|nowonlytosavespaceinmemory|actuallyre\u00adducesperformance. 1.1ANewEra:Software-ExposedBits Threenewcompilationtargetsforhigh-levellanguagesare \nre-invigoratingtheneedtoconservebits.Eachofthesear\u00adchitecturesexposesubwordcontrol.Thefrstisthereju\u00advenationofSIMDarchitecturesformultimediaworkloads. \nThesearchitecturesincludeIntel'sMultiMediaeXtension (MMX)andMotorola'sAltivec[20,25].Forexample,in Altivec,datapathsareusedtooperateon8,16,32,or64 \nbitquantities. Thesecondclassofcompilationtargetsconsistsofem\u00adbeddedsystemswhichcanefectivelyturnofbitslices[7]. \nThestaticinformationdeterminedatcompiletimecanbe usedtospecifywhichportionsofadatapathareonorof duringprogramexecution.Alternatively,formoretradi\u00adtionalarchitecturesthissameinformationcanbeusedto \npredictpowerconsumptionbydeterminingwhichdatapath bitswillchangeovertime. Thethirdclassofcompilationtargetscomprisesfne\u00adgrainsubstratessuchasgateandfunction-levelreconfg\u00adurablearchitectures|includingFieldProgrammableGate \nArrays(FPGAs)|andcustomhardware,suchasstandard cellASICdesigns.Inbothcases,architecturalsynthesisis requiredtosupporthigh-levellanguages.Therehasbeen \narecentsurgeofbothindustrialandacademicinterestin developingnewreconfgurablearchitectures[18]. Unfortunately,therearenoavailablecommercialcom\u00adpilersthatcanefectivelytargetanyofthesenewarchitec\u00adtures.Programmershavebeenforcedtoreverttowriting \nlow-levelcode.MMXlibrariesarewritteninassemblyin ordertoexposethemostsub-wordparallelism.IntheVer-ilogandVHDLhardwaredescriptionlanguages,theburden \nofbitwidthspecifcationliesontheprogrammer.Tocom\u00adpeteinthemarketplace,designersmustchoosethemini\u00admumoperandbitwidthforsmaller,faster,andmoreenergy\u00adefcientcircuits. \n1.2BeneftsofAutomatingBitwidthSpecifcation Automaticbitwidthanalysisrelievestheprogrammerofthe burdenofidentifyingandspecifyingderivablebitwidthin\u00ad \nformation.Theprogrammercanworkatahigherlevelof1.6Organization abstraction.Incontrast,explicitlychoosingthesmallest \ndatasizeforeachoperandisnotonlytedious,butalsoer\u00adrorprone.Theseprogramsarelessmalleablesinceasimple changemayrequirehandpropagationofbitwidthinforma\u00adtionacrossalargesegmentoftheprogram.Furthermore, \nsomeofthebitwidthinformationmaybedependentona particulararchitectureorimplementationtechnology,mak\u00adingprogramslessportable. \nEveniftheprogrammerexplicitlyspecifesoperandsizes inlanguagesthatallowit,bitwidthanalysiscanstillbevalu\u00adable.Forexample,bitwidthanalysiscanbeusedtoverify \nthatspecifedoperandsizesdonotviolateprograminvari\u00adants{e.g.,arraybounds. 1.3TheBitwiseCompiler Bitwiseminimizesthebitwidthrequiredforeachstaticoper\u00adationandeachstaticassignmentoftheprogram.Thescope \nofBitwiseincludesfxed-pointarithmetic,bitmanipulation, andBooleanoperations.Itusesadditionalsourcesofinfor\u00admationsuchastypecasts,arraybounds,andloopiteration \ncountstorefnevariablebitwidths.Wehaveimplemented BitwisewithintheSUIFcompilerinfrastructure[26]. Inmanycases,Bitwiseisabletoanalyzethebitwidth \ninformationasaccuratelyasthebitwidthinformationgath\u00aderedfromrun-timeprofles.Onaveragewereducethesize \nofprogramscalarsby12{80%andprogramarraysbyup to93%. 1.4ApplicationtoSiliconCompilation Inthispaperweapplybitwidthanalysistothetaskofsil\u00adiconcompilation.Inparticular,wehaveintegratedBitwise \nwiththeDeepCSiliconCompiler.Thecompilerproduces gate-levelnetlistsfrominputprogramswritteninCand FORTRAN.Wecompareend-to-endperformanceresultsfor \nthissystembothwithandwithoutourbitwidthoptimiza\u00adtions.Theresultsdemonstratethattheanalysistechniques \nperformwellinarealsystem.Ourexperimentsshowthat Bitwisefavorablyimpactsarea,speed,andpowerofthere\u00adsultingcircuits. \n1.5Contributions Wesummarizethispaper'scontributionsasfollows: .Weformulatebitwidthanalysisasavaluerangeprop\u00adagationproblem. \n.Weintroduceasuiteofbitwidthextractiontechniques thatseamlesslyperformbi-directionalpropagation. .Weformulateanalgorithmtoaccuratelyfndbitwidth \ninformationinthepresenceofloopsbycalculating closed-formsolutions. .Weimplementthecompileranddemonstratethatthe \ncompile-timeanalysiscanapproachtheaccuracyof run-timeprofling. .Weincorporatetheanalysisinasiliconcompiler \nanddemonstratethatbitwidthanalysisimpactsarea, speed,andpowerconsumptionofasynthesizedcircuit. Therestofthepaperisorganizedasfollows.Section2 \ndefnesthebitwidthanalysisproblem.Bitwise'simplemen\u00adtationandouralgorithmsaredescribedinSection3.Sec\u00adtion4providesempiricalevidenceofthesuccessofBitwise. \nNext,Section5describestheDeepCSiliconCompilerand Section6discussestheimpactthatbitwidthanalysishas onsiliconcompilation.Finally,wepresentrelatedworkin \nSection7andconcludeinSection8. 2BitwidthAnalysis Thegoalofbitwidthanalysisistoanalyzeeachstaticin\u00adstructioninaprogramtodeterminethenarrowestreturn \ntypethatstillretainsprogramcorrectness.Thisinforma\u00adtioncaninturnbeusedtofndtheminimumnumberof bitsneededtorepresenteachprogramoperand. \nLibrarycalls,I/Oroutines,andloopsmakestatic bitwidthanalysischallenging.Inthepresenceofthesecon\u00adstructs,wemayhavetomakeconservativeassumptions \naboutanoperand'sbitwidth.Nevertheless,withcareful staticanalysis,itispossibletoinferbitwidthinformation. \nStructuressuchasarraysandconditionalstatements provideuswithvaluablebitwidthinformation.Forin\u00adstance,wecanusetheboundsofanarraytosetanindex \nvariable'smaximumbitwidth.Otherprogramconstructs suchasAND-masks,divides,rightshifts,typepromotions, \nandBooleanoperationsarealsoinvaluableforreducing bitwidths. (1)index+=indexTable[delta]; (2)if(index<0)index=0; \n(3)if(index>88)index=88; (4)step=stepsizeTable[index]; (5) (6)if(bufferstep){ (7)outputbuffer=(delta<<4)&#38;0xf0; \n(8)}else{ (9)*outp++=(delta&#38;0x0f)| (10) (outputbuffer&#38;0xf0); (11)} (12)bufferstep=!bufferstep; \nFigure1:SampleCcodeusedtoillustratethefundamentals oftheanalysis.Thiscodefragmentwastakenfromtheloopof \nadpcm coderintheadpcmmultimediabenchmark. TheCcodefragmentinFigure1exhibitsseveralsuch constructs.Thiscode,whichisanexcerptoftheadpcm \nbenchmarkpresentedlaterinthispaper,istypicalofim\u00adportantmultimediaapplications.Eachlineofcodeinthe fgureisannotatedwithalinenumbertofacilitatethefol\u00adlowingdiscussion. \nAssumethatwedonotknowtheprecisevalueofdelta, referencedinlines(1),(7),and(9).Becauseitisusedasan indexvariableinline(1),weknowthatitsvalueisconfned \nbythebaseandboundsofindexTable1.Thoughwestilldo notknowdelta'sprecisevalue,byrestrictingtherangeof valuesthatitcanassume,weefectivelyreducethenumber \nofbitsneededtorepresentit.Inasimilarfashion,thecode 1 Ouranalysisassumesthattheprogrambeinganalyzediserrorfree.Ifthe \nprogramexhibitsboundviolations,arithmeticunderflow,orarithmeticoverflow, changingoperandbitwidthsmayalteritsfunctionality. \nDR max <, 1>< +1, INT> INTmin INTmax INTmin max . INTmin min INT) ( <INTmin , INT> max = = = 32 . BL \n. BL . BL   1 10 10 <INTmin , INTmax 2>< INTmin +1, INTmax 1><INTmin +2, INT> max 1  0 BW .BL .BL \n<, >< +1, +1> < 1, 1><, ><, > < INT 1, INT 1>< INT, INT> .BL INTmin INTmin INTmin INTmin 0011max max \nmax max .BW .DR (a) (b) (c) Figure2:Threealternativedatastructuresforbitwidthanalysis.Thelatticein(a)representsthenumberofbitsneededtorepresent \n. avariable.Thelatticein(b)representsavectorofbitsthatcanvaluesthatcanbeassignedtoavariable. onlines(2)and(3)ensurethatindex'svalueisrestricted \ntobebetween0and88. TheAND-maskonline(7)ensuresthatoutputbuffer's valueisnogreaterthan0xf0.Similarly,wecaninferthat \ntheassignmentto*outponline(9)isnogreaterthan0xff (0x0f|0xf0). Finally,weknowthatbufferstep'svalueiseithertrue \norfalseaftertheassignmentonline(12)becauseitisthe resultoftheBooleannot(!)operation. 3BitwiseImplementation \nThissectiondescribestheinfrastructureandalgorithmsof Bitwise,acompilerthatperformsbitwidthanalysis.Bitwise \nusesSSAasitsintermediateform.Itperformsanumeri\u00adcaldatafowanalysis.Becausewearesolvingforabsolute numericalbitwidths,themorecomplexsymbolicanalysisis \nnotneeded[23]. Wecontinuebycomparingthecandidatedata-fowlat\u00adticesthatwereconsideredinourimplementation. \n3.1CandidateLattices Weconsideredthreecandidatedata-structuresforpropa\u00adgatingthenumericalinformationofouranalysis.Figure2 \nvisuallydepictsthelatticethatcorrespondstoeachdata\u00adstructure. Propagatingthebitwidthofeachvariable:Figure2(a)is \nthemoststraightforwardstructure.Whilethisrepresenta\u00adtionpermitsaneasyimplementation,itdoesnotyieldac\u00adcurateresultsonarithmeticoperations.Whenapplyingthe \nlattice'stransferfunction,incrementingan8-bitnumberal\u00adwaysproducesa9-bitresultant,eventhoughitmaylikely \nneedonly8-bits.Inaddition,onlythemostsignifcantbits ofavariablearecandidatesforbit-elimination. Maintainingabitvectorforeachvariable:Figure2(b)is \namorecomplexrepresentation,requiringthecomposition ofseveralsmallerbit-lattices[8,21].Althoughthislattice \nallowseliminationofarbitrarybitsfromavariable'srep\u00adresentation,itdoesnotsupportprecisearithmeticanaly\u00adsis.Asanexampleofeliminatingarbitrarybits,considera \nparticularvariablethatisassignedthevaluesfromtheset f0102,1002,1102g.Afteranalysis,thevariable'sbit-vector \nwillbe[TT0],indicatingthatwecaneliminatetheleast beassignedtoavariable,andthelatticein(c)representstherangeof \nsignifcantbit.Likethefrstdatastructure,thearithmetic isimprecisebecausetheanalysismuststillconservatively \nassumethateveryadditionresultsinacarry. Propagatingdata-ranges:Figure2(c)isthefnallatticewe considered.Thislatticeisalsotheimplementationchosen \ninthecompiler.Adata-rangeisasingleconnectedsubrange oftheintegersfromalowerboundtoanupperbound(e.g., \n[1..100]or[-50..50]).Thusadata-rangekeepstrackofavari\u00adable'slowerandupperbounds.Becauseonlyasinglerange \nisusedtorepresentallpossiblevaluesforavariable,this representationdoesnotpermittheeliminationoflow-order \nbits.However,itdoesallowustooperateonarithmetic expressionsprecisely.Technically,thisrepresentationmaps \nbitwidthanalysistothemoregeneralvaluerangepropaga\u00adtionproblem.Valuerangepropagationisknowntobeuseful \ninvalueprediction,branchprediction,constantpropaga\u00adtion,procedurecloning,andprogramverifcation[19,23]. \nFortheBitwisecompilerwechosetopropagatedata\u00ad ranges,notonlybecauseoftheirgenerality,butalsobecause mostimportantapplicationsusearithmeticandwillbeneft \nfromtheirexactprecision.Unlikearegularsetunion,we defnethedata-rangeunionoperation(t)tobetheunion overthesingleconnectedsubrangeoftheintegerswhere \nhal,ahithbl,bhi=hmin(al,bl),max(ah,bh)i.Wealsode\u00ad fnethedata-rangeintersectionoperation(u)tobetheset \nofallintegersinbothsubrangeswherehal,ahiuhbl,bhi= hmax(al,bl),min(ah,bh)i.Theintersectionoftwonon\u00ad overlappingdata-rangesyieldsthevalue.DR,whichcanbe \nusedtoidentifylikelyprogrammererrors(e.g.,arraybound violations).Additionally,notethatthevalueTDR,apartof \nthelattice,representsvaluesthatcannotbestaticallydeter\u00ad mined,orvaluesthatcanpotentiallyutilizetheentirerange \noftheintegertype. 3.2Data-RangePropagation Asconcludedinthelastsection,ourBitwiseimplementation propagatesdata-ranges.Thesedata-rangescanbepropa\u00adgatedbothforwardandbackwardoveraprogram'scontrol \nfowgraph.Figure4showsasubsetofthetransferfunc\u00adtionsforpropagation.Theforwardpropagatedvaluesin thefgurearesubscriptedwithadownarrow(#),andthe \nbackwardpropagatedvalueswithanuparrow(\").Ingen\u00aderalthetransferfunctionstakeoneortwodata-rangesas inputandreturnasingledata-range. \n a0 = a0 <2,= <2, 8> 8> agationwearriveatthefollowingdata-ranges: a0 = input () a0 = <INTmin,INT> max \na1 = a0+1 a1 = < +1,INT> a0=hINTmin,INTmaxi a1=hINTmin+1,INTmaxi INTmin max a1 = a1 (< 1, 1> ,<1,<> \n09)= 9> a2=hINTmin+1,-1i a3=hINTmin+2,0i a1 <0 a4=h0,INTmaxi a2 = a2 < 1, 1>= < 1, 1> a2 = < ,> a4= \n<0,INT> minmax a5=hINT+2,INTi INTmin +1 1 max c0=h0,INTmaxi  c0 = <0,INT> max Letusassumeweknowthatthelengthofthearray,array, \nc0 = <> 09 ,is10fromitsdeclaration.Wecannowsubstantiallyreduce a4 = a1 :a1 (=0) c0 = a4 a2 = a1 : (a1 \n< 0) a3 = a2+1 a3 = a3 a5 = <> 00 ,  propagation.Weusearray'sboundinformationtoclamp a5 = < +2,INT> \na3'sdata-rangetoh0,9i.Wethenpropagatethisvalue a5 = f( , a3 a4) INTmin max  a3 = <INTmin +2,0> 09 ,<> \na4 a4 a5 = = thedata-rangesofthevariablesinthegraphwithbackward backwardinreversebreadth-frstorderusingthetransfer \nb0 array a5 [] a5 = <> 09 , = Figure3:Forwardandbackwarddata-rangepropagation.The numbersdenotetheorderofevaluation.Applicationofforward \npropagationrulesareshowninwhite,whilebackwardpropaga\u00adtionrulesareshowninblack.Weusearray'sboundsinformation \ntotightentherangesofsomeofthevariables. Initially,allofthevariablesintheSSAgraphareini\u00adtializedtothemaximumrangeallowablefortheirtype.In-formally,forwardpropagationtraversestheSSAgraphin \nbreadth-frstorder,applyingthetransferfunctionsforfor\u00adwardpropagation.Becausethereisoneuniqueassignment \nforeachvariableinSSAform,wecanrestrictavariable's data-rangeiftheresultofitsassignmentislessthanthe maximumdata-rangeofitstype. \nTomoreaccuratelygatherdata-ranges,weextendstan\u00addardSSAformtoincludethenotionofrange-refnement functions.Foreachnodethatiscontroldependent,afunc\u00adtioniscreatedwhichrefnestherangeofcontrolvariables \nbasedontheoutcomeofthebranchtest.ConsidertheSSA graphshowninFigure3.Range-refnementfunctionshave beeninsertedineachofthenodesdirectlyfollowingthe \nbranchtest.Bytakingcontrol-dependentinformationinto account,thesefunctionsfacilitateamoreaccuratecollection \nofdata-ranges.Thus,ifthebranchinthefgureistaken,we knowthata1'svalueislessthanzero.Similarly,a1'svalue \nhastobegreaterthanorequaltozeroifthebranchisnot taken. Forwardpropagationallowsustoidentifyasignifcant \nnumberofunusedbits,sometimesachievingnearoptimal results.However,additionalminimizationcanbeachieved \nbyintegratingbackwardpropagation2.Forexample,when wefndadata-rangethathassteppedoutsideofknownar\u00adraybounds,wecanback-propagatethisnewreduceddata\u00adrangetoinstructionsthathavealreadyuseditsdeprecated \nvaluetocomputetheirresults.Beginningatthenodewhere theboundaryviolationisfound,wepropagatethereduced \ndata-rangeinareversebreadth-frstorder,usingthetransfer functionsforbackwardpropagation.Thishaltswheneither \nthegraph'sentrynodeisreached,orwhenafxedpointis reached.Forwardpropagationresumesfromthispoint. Forwardandbackwardpropagationstepshavebeenan\u00adnotatedonthegraphinFigure3toeasethefollowingdis\u00adcussion.Thenumbersonthefgurechronologicallyorder \neachstep.Thestepnumbersinblackrepresenttheback\u00adwardpropagationofdata-ranges.Withoutbackwardprop\u00ad 2 SSAformisnotanefficientformforperformingbackwardpropagation[13]. \nBitwisecurrentlyrevertstostandarddata-flowanalysistechniquesonlywhen analyzinginthereversedirection.Ifefficiencyinthelesscommoncaseofback\u00adwardpropagationisaconcern,ourformofSSAcouldreadilybeconvertedto \nSSIform,whichwasdesignedforbi-directionaldata-flowanalyses[1]. functionsforbackwardpropagation.Inourexample,prop\u00adagatinga3'snewvaluebackwardyieldsthefollowingnew \ndata-ranges: a0=h-2,8i a1=h-1,9i a2=h-1,-1i a3=h0,0i a4=h0,9i a5=h0,9i c0=h0,9i Reversepropagationcanhaltaftera0'srangeisdetermined \n(step13).Becausec0usestheresultsofavariablethat haschanged,wehavetotraversethegraphintheforward directionagain.Afterweconfnec0'sdata-rangetoh0,9i \nwewillhavereachedafxedpointandtheanalysiswillbe complete. Inthisexampleweseethatdata-rangepropagationsub\u00adsumesconstantpropagation;wecanreplacealloccurrences \nofa3withtheconstantvalue0. 3.3Loops Optimizationofloopinstructionsiscrucial|theyusually comprisethebulkofdynamicinstructions.Traditionaldata \nfowanalysistechniquesiterateoverbackedgesinthegraph untilafxedpointisreached.However,thistechniquewill \nsaturateeventhesimplestloop-carriedarithmeticexpres\u00adsion.Thatis,becausethemethoddoesnottakeintoaccount \nanystaticknowledgeofloopbounds,suchanexpressionwill eventuallysaturateatthemaximumrangeofitstype. Becausemanyimportantapplicationsuseloop-carried \narithmeticexpressions,anewapproachisrequired.Tothis end,ourimplementationoftheBitwisecompileridentifes \nloopsandfndsclosed-formsolutions.Weeaseloopidentif\u00adcationinSSAformbyconvertingall\u00a2-functionsthatoccur \ninloopheaderstot-functions[10].Thesefunctionshave exactlytwooperands;thefrstoperandisdefnedoutside theloop,andthesecondoperandisloopcarried.Wetake \nadvantageofthesepropertieswhenfndingclosed-formso\u00adlutions. 3.3.1Closed-FormSolutions Tofndtheclosed-formsolutiontoloop-carriedexpressions, \nweusethetechniquesintroducedbyGerleketal.[10].These techniquesallowustoidentifyandclassifysequencesin \nloops.Asequenceisamutuallydependentgroupofinstruc\u00adtions.Inotherwords,asequenceisastronglyconnected component(SCC)oftheprogram'sdependencegraph.We \nb#=hbl,bhi b\"=b#uhal-ch,ah-cli (a) c#=hcl,chi# c\"=c#uhal-bh,ah-bli ab+c # a\"=hal,ahi a#=a\"uhbl+cl,bh+chi \nb#=hbl,bhi b\"=b#uhal+cl,ah+chi (b) c#=hcl,chi# c\"=c#uhal+bl,ah+bhi ab-c # a\"=hal,ahi a#=a\"uhbl-ch,bh-cli \nb#=hbl,bhi b\"=b# (c) c#=hcl,chi c\"=c# # ab&#38;c () #-2n-1,2n-1 a#=a\"u-1, a\"=hal,ahi wheren=min(bitwidth(b#),bitwidth(c#)) \n(d)b=hbl,bhi b=bua # ab # a=hal,ahi a=aub (e)x=hal,ahi x=xuhxl,xhi # fxl:x:xhg # b bba x#=hbl,bhi x\"=x#ux\" \n(f)c cca x#=hcl,chibc x\"=x#ux\" xx &#38;. abc x= (x,x) a # aabc x\"=hal,ahi x#=x\"u(x#tx#) (g) x a #=hal,ahi \ny#=hyl,yhi x a x a \"=x a #u(x b \"tx c \") # x a y . &#38; x b \"=hbl,bhi x c \"=hcl,chi x b x c x b #=x \na #ux b \"ux c #=x a #ux c \"u hal,yh-1i hyl,ahi Figure4:Aselectedsubsetoftransferfunctionsforbi-directionaldata-rangepropagation.Intermediateresultsontheleftareinputs \ntothetransferfunctionsontheright.Thevariablesinthefgurearesubscriptedwiththedirectioninwhichtheyarecomputed.The \ntransferfunctionin(a)addstwodata-ranges,and(b)subtractstwodata-ranges.Bothofthesefunctionsassumesaturatingsemantics \nwhichwillconfnetheresultingrangetobewithintheboundsofthetypeonwhichtheyoperate.TheAND-maskingoperationfor \nsigneddata-typesin(c)returnsadata-rangecorrespondingtothesmallestofitstwoinputs.Itmakesuseofthebitwidthfunctionwhich \nreturnsthenumberofbitsneededtorepresentthedata-range.Thetype-castingoperationshownin(d)confnestheresultingrangeto \nbewithintherangeofthesmallerdata-type.Becausevariablesareinitializedtothelargestrangethatcanberepresentedbytheirtypes, \nrangesarepropagatedseamlessly,eveninthecaseoftypeconversion.Thefunctionin(e)isappliedwhenweknowthatavaluemustbe \nwithinaspecifedrange.Forinstance,thisruleisappliedtolimitthedata-rangeofavariablethatisindexingintoastaticarray.Note \nthatrules(d)and(e)arenotdirectionallydependent.Rule(f)isappliedatmergepoints,andrule(g)isappliedatlocationswhere \ncontrol-fowsplits.Inrule(g),weseethatxbcorrespondstoanoccurrenceofxasuchthatxay.Wecanusethisinformationto \nrefnetherangeofx bbasedontheoutcomeofthebranchtest,x ay. LSS:InstListListXIntCurXRangeTrip XSSAVarSentinel!RangeXInt \nRangeR+h0,0i Inti+Cur whileijListjdo ifList[i]hasformhak=l(al,am)withtripcounttcithen ak+al hR,ii+LSS(List,i+1,tcXDRTrip,am) \nelseifList[i]hasformhak=allinopCithen ak+allinopCXDRTrip elseifList[i]hasformhak=\u00a2(al,am)ithen ak+altam \nifak=Sentinelthen returnhak,ii i+i+1 returnhR,ii ClassifySequence:InstListList!Void RangeVal ifjListj=1then \nEvaluateInst(List[0]) else SeqType+SequenceType(List) ifSeqType=Linearthen hVal,xi+LSS(List,0,h1,1i,NIL) \nforeachInstI2Listdo ak+ValwhereakisdestinationofI elseif::: . . . elseifSeqType=.Sequence Fix(List,MaxIters) \n Figure5:Pseudocodeforthealgorithmthatclassifesandsolves closed-formsolutionsofcommonlyoccurringsequences.The \nSequenceTypefunctionidentifesthetypeofsequenceweare considering.Basedonthesequencetype,wecaninvoketheap\u00adpropriatesolver.Weprovidepseudocodeforthelinearsequence \nsolver(LSS).Thefixfunctionattemptstofndafxed-point solutionforunidentifablesequences. canexaminetheinstructionsofthesequencetotryandfnd \naclosed-formsolutiontothesequence. Thus,thealgorithmbeginsbyfndingallthesequences intheloop.Wethenorderthemaccordingtodependences \nbetweenthesequences.Atthispointwecanclassifyeach sequenceinturn.Thealgorithmforclassifyingsequencesis \nshowninFigure5. Asequence'stypeisidentifedbyexaminingitscompo\u00adsitionofinstructions.Thisfunctionalitycorrespondstothe \nSequenceTypeprocedurecalledinFigure5.Weprovidea sketchofourapproachinSection3.3.2. Oncewehavedeterminedthetypeofsequencethecom\u00adponentrepresents,thealgorithminvokesasolvertocom\u00adputethesequence'sclosed-formsolution.Foreachtype \nofsequence,adiferentmethodisneededtocomputethe closed-formsolution.Ifnosequenceisidentifed,thealgo\u00adrithmresortstofxedpointiterationuptoauserdefned \nmaximum. 3.3.2SequenceIdentifcation Wesketchoursequenceidentifcationalgorithmasfollows. First,wecreateapartialorderonthetypesofexpressions \nwewishtoidentify.WeemploytheExpressionlattice(Fig\u00adure6)toordervariousexpressionsaccordingtosetcontain\u00adment.Forexample,linearsequencesarethecompositionof \naninductionvariableandloopinvariants,andpolynomial sequencesarethecompositionofloopinvariantsandlin\u00adearsequences.Thetopofthelattice(Tsequence)represents \nsequence invariant linear polynomial geometric . sequence Figure6:Alatticethatorderssequencesaccordingtosetcon\u00adtainment. \nanundeterminedexpression,andthebottomofthelattice (Jsequence)representsallpossibleexpressions. Next,wecreatetransferfunctionsforeachinstruction \ntypeinthesourcelanguage.Atransferfunction,which operatesonthelattice,isimplementedasatablethatis indexedbytheexpressiontypesofitssourceoperands.The \ndestinationoperandisthentaggedwiththeexpressiontype dictatedbythetransferfunction. Weproceedbyclassifyingthesequencebasedonthe \ntypesofitsexpressionsanditscompositionof\u00a2-and t-functions.Forinstance,alinearsequencecancontain anynumberofloads,stores,additions,orsubtractionsof \ninvariantvalues.Inaddition,linearsequencesmusthave atleastonet-function3 .Rememberthatt-functionsdefne \nloopheaders,andthusdenotethestartofallnon-trivialse\u00adquences.Trivialsequencescontainexactlyoneinstruction, \nandthus,thesequenceitselfrepresentstheclosed-formso\u00adlution. 3.3.3SequenceExample Figure7isanexampleloopandFigure8isitscorresponding \nSSAgraph.Inthisexampleallt-functionsareannotated withtheloop'stripcount(h0,64i).Whilewecanrestrict therangeoftheloop'sinductionvariablewithoutthean\u00adnotations,knowingthetripcountallowsustoanalyzeother \nunrelatedsequences. Thenextstepistofndallofthestronglyconnected componentsintheloop'sbodyandcreatethesequencede\u00adpendencegraph.Thesequencedependencegraphforthe \nloopinFigure7isshowninFigure9. Wethenanalyzeeachofthesequencesaccordingtothe dependencegraph.Thealgorithmclassifesthesequence \nbasedonthetypesofitsconstituentexpressions.Thecom\u00adponentbelow,fromtheexample,isdeterminedtobealinear \nsequencebecauseitcontainsat-functionandalinear-type expression: Sequence Sum addr1=t(addr0,addr2)h0,0i \n addr2=addr1+4h4,4ih0,64i=h0,256i Basedonthetripcountofthet-function(h0,64i)and addr0'srange(h0,0i),thefunctionLSSinFigure5fnds \nthemaximumrangethatanyofthevariablesinthelinear sequencecanpossiblyassume.Thefunctionstepsthrough thesequencesummingupalloftheinvariants.Thissumis \n3 Gerleketal.processinner-loopsfirstandprovidemechanismstoprop\u00adagateclosed-formsolutionstoenclosingloopnests.Weconsiderallloops \nsimultaneously. 0 tripcount=<0,64> addr1 = \u00b5(addr0 addr2) , addr 0; 4 line2 = addr2 &#38; 0x1c addr2 \n= addr1 + 4 1 word1 = \u00b5(word0 word3) even 0; , line 0; word2 = word1 : (word1 < 64) for(word 0;word<64;word++){ \n3 2 line1 = \u00b5(line0 line2) even1 = \u00b5(even0 even2) word3 = word2 + 1 , , addr addr+4; even !even; line \naddr&#38;0x1c; } Figure7:Exampleloop. addr0 = 0 even0 = 0 line0 = 0 word0 = 0 addr1 = \u00b5(addr0 addr2) \n, even1 = \u00b5(even0 even2) , line1 = \u00b5(line0 line2) , word1 = \u00b5(word0 word3) , word1 < 64  tripcount=<0,64> \n word2 = word1 : (word1 < 64) addr2 = addr1 + 4 even2 = ! even1 line2 = addr2 &#38; 0x1c word3 = word2 \n+ 1 Figure8:SSAgraphcorrespondingtoexampleloop. multipliedbythetotalnumberoftimestheloopinquestion willbeexecuted.Forthisexample,thefunctiondetermines \nthemaximumrangetobeh0,256i.Atthispointwesetall ofthedestinationvariablesinthesequencetothisrange, andthesequenceissolved. \nObtainingthisconservativeresultissimplerthanfnding thepreciserangeforeachvariableinthesequence.Because \nthereistypicallylittlevariationbetweenrangesofdestina\u00adtionvariablesinthesamesequence,thismethodworkswell \ninpractice. Unlikelinearsequences,notallsequencesarereadily identifable.Insuchcasesweiterateoverthesequenceuntil \nafxedpointisreached.Forexample,thesequencelabeled (2)inFigure9,willreachafxedpointafteronlytwoit\u00aderations.Notsurprisingly,sequencesthatcontainBoolean \noperations,AND-masks,left-shifts,ordivides{allcommon inmultimediakernels{canquicklyreachafxed-point.The \nfollowingsectionaddressesthecaseswhenafxed-pointis notreachedquickly. 3.3.4Termination Forcasesinwhichwecannotfndaclosed-formsolution, \nlatticeheightcouldleadtoseeminglyboundlessiteration. Forexample,bytraversingback-edgesinthecontrolfow \n232 graph,itcouldtakenearlyiterationstoreachafxed pointfortypical32-bitintegers. Inordertosolvethisproblem,weconsiderwhathappens \ntoadata-rangeafterapplyingatransferfunctiontoastatic assignment.Thedata-rangeeither: reachesafxedpoint,or \n monotonicallydecreases.  even2 = !even1 tripcount=<0,64> Figure9:Adependencegraphofsequencescorrespondingto \nthecodeinFigure7.Thesequenceslabeled(3)and(4)are trivialsequences.Inotherwords,thesequencesarethemselves \ntheclosed-formsolution.Usingthetripcountoftheloop,wecan calculatethefnalrangesforthelinearsequenceslabeled(0)and \n(1).ThoughwedonotidentifyBooleansequencessuchasthe onemarked(2),theyquicklyreachafxedpoint. Thusitispossibletoaddauser-defnedlimittothenum\u00adberofiterations.Wheniterationislimited,theresulting \ndata-rangewillbeanimprovedbutpotentiallysub-optimal solution. 3.4ArraysandPointers IntraditionalSSAform,arraysandpointersarenotre\u00adnamed.SpecialextensionstoSSAformhavebeenpro\u00adposedthatprovideelement-leveldatafowinformationfor \narrays[15].WhilesuchextensionstoSSAformcanpo\u00adtentiallyprovidemoreaccuratedata-rangeinformation,for bitwidthanalysisitismoreconvenienttoconservatively \ntreatarraysasscalars.Thefollowingsectionsdescribefur\u00adtherimplementationdetailsrelatedtoarraysandpointers. \n3.4.1Arrays Whentreatinganarrayasascalar,ifanarrayismodifed wemustinsertanew\u00a2-functiontomergethearray'sold \ndata-rangewiththenewdata-range.Aside-efectofthis approachisthatauniformdata-rangemustbeusedforevery elementinthearray.Anotherdrawbackofthismethodis \nthata\u00a2-functionisrequiredforeveryarrayassignment, increasingthesizeofthecode.However,def-usechainsare \nstillinherentintheintermediaterepresentation,simplifying theanalysis.Furthermore,whencompilingtosiliconthis \nanalysisdeterminesthesizeofembeddedRAMs. 3.4.2Pointers Pointerscomplicatetheanalysisofmemoryinstructions,po\u00adtentiallycreatingaliasesandambiguitiesthatcanobscure \ndata-rangediscovery.Tohandlepointers,weusetheSPAN pointeranalysispackagedevelopedbyRaduRuginaand MartinRinard[22].SPANcandeterminethesetsofvari\u00adables|commonlyreferredtoaslocationsets|thata \npointermayormustreference.Wedistinguishbetweenref\u00aderencelocationsetsandmodifylocationsets.Areference \nlocationsetisalocationsetannotationthatoccursonthe righthandsideofanexpression,whereasamodifylocation \nsetoccursonthelefthandsideofanexpression. Asanexample,considerthefollowingCmemoryinstruc\u00adtion,assumingthatp0isapointerthatcanpointtovariable \na0orb0,andthatq0isapointerthatcanonlypointtovari\u00adableb0: *p0 *q0+1 C or Fortran Program Bitwidth Analysis \n Bitwidth Reports Silicon Compiler Backend Figure10:Compilerfow:includesgeneralSUIF,Bitwise,sili\u00adcon,andCADprocessingsteps.TheraisedstepsarenewBitwise \norDeepCpasses,andtheremainingstepsarere-usedfrompre\u00adviousSUIFcompilerpasses. Thelocationsetthattheinstructionmaymodifyis \nfa0,b0g,andthelocationsetthattheinstructionmustref\u00aderenceisfb0g.Sinceb0istheonlyvariableintheinstruc\u00adtion'sreferencelocationset,theinstructionmustreference \nit.Also,becausetherearetwovariablesinthemodifyloca\u00adtionset,eithera0orb0maybemodifed. KeepingtheSSAguaranteethatthereisauniqueas\u00adsignmentassociatedwitheachvariable,wehavetorename \na0andb0intheinstruction'smodifylocationset.Fur\u00adthermore,sinceitisnotcertainthateithervariablewillbe modifed,a\u00a2-functionhastobeinsertedforeachvariable \ninthemodifylocationsettomergethepreviousversionof thevariablewiththerenamedversion: fa1,b1g=fb0g+1 a2=\u00a2(a0,a1) \nb2=\u00a2(b0,b1) Ifthemodifylocationsethasonlyoneelement,theel\u00adementmustbemodifed,anda\u00a2-functiondoesnotneed \ntobeinserted.ThisextensiontoSSAformallowsusto treatde-referencedpointersinexactlythesamemanneras scalars. \nBitwiseResults Thissectionpresentsresultsfromastand-aloneBit\u00adwiseCompiler.Thecompileriscomposedofthefrstfour \nstepsshowninFigure10.Furtherresults,afterprocessing withthesiliconcompilerbackend(thelastfourstepsinthe \nfowchart),arepresentedinSection6. Thefrontendofthecompilertakesasinputapro\u00adgramwritteninCorFORTRANandproducesabitwidth\u00adannotatedSUIFfle.Afterparsingtheinputprograminto \nSUIF,thecompilerperformstraditionaloptimizationsand thenpointeranalysis[22].Thenexttwopasses,labeled \n\\BitwidthAnalysis\",aretherealizationofthealgorithms discussedinthispaper.Here,theSUIFintermediaterepre-sentationisconvertedtoSSAform,includingtheextensions \n Benchmark Type Source Lines Description softfoat Emulation Berkeley 1815 FloatingPoint adpcm Multimedia \nUTdsp 195 AudioCompress bubblesort Scientifc Raw 62 BubbleSort life Automata Raw 150 GameofLife intmatmul \nScientifc Raw 78 Int.MatrixMult. jacobi Scientifc Raw 84 JacobiRelation median Multimedia UTdsp 86 MedianFilter \nmpegcorr Multimedia MIT 144 FromMPEGKernel sha Encryption MIT 638 SecureHash bilinterp Multimedia MMX \n110 BilinearInterp. convolve Multimedia MIT 74 Convolution histogram Multimedia UTdsp 115 Histogram intfr \nMultimedia UTdsp 64 IntegerFIR newlife Automata MIT 119 NewGameofLife parity Multimedia MIT 54 ParityFunction \npmatch Multimedia MIT 63 PatternMatching sor Scientifc MIT 60 5-pointStencil Table1:Benchmarkcharacteristics \n discussedinSection3.Finally,thedata-rangepropagation passisinvokedtoproducebitwidth-annotatedSUIFalong \nwiththeappropriatebitwidthreports.Intotal,theycom\u00adpriseroughly12,000linesofC++code.Wefrstdiscussthe bitwidthreportsthataregeneratedafterthesepasses. \n4.1Experiments Theprototypecompilerdoesnotcurrentlysupportrecur\u00adsion.Althoughthisrestrictionlimitsthecomplexityofthe \nbenchmarkswecananalyze,itprovidesadequatesupportof programswrittenforhigh-levelsiliconsynthesis. Table1liststhebenchmarkspresentedinthissection. \nThesourcecodeforthebenchmarkscanbefoundat[6]. Weincludeseveralcontemporarymultimediaapplications aswellasstandardapplicationsthatcontainpredominantly \nbit-levelorbyte-leveloperations,suchaslifeandsoftfoat. 4.2RegisterBitElimination Figure11showsthepercentageoftheoriginalregisterbits \nremainingintheprogramafterBitwisehasrun.Register bitsareusedtostorescalarprogramvariables.Thelower bound|whichwasobtainedbyproflingthecode|isin\u00adcludedforreference.Fortheparticulardatasetssupplied \ntothebenchmark,thislowerboundrepresentsthefewest numberofbitsneededtoretainprogramcorrectness.That is,itformsalowerboundontheminimumbitwidththat \ncanbedeterminedbystaticanalysis,whichmustbecorrect overallinputdata-sets.Thegraphassumesthateachvari\u00adableisassignedtoitsownregister.However,downstream \narchitecturalsynthesispassesincludearegisterallocator. Ifvariableswithdiferingbitwidthssharethesamephysi\u00adcalregister,thefnalhardwaremaynotcaptureallofthe \ngainsofouranalysis.Ourmetricisausefuloverallgauge becauseregisterbitwidthsafectfunctionalunitsize,data \npathbitwidths,andcircuitswitchingactivity. Ouranalysisdramaticallyreducesthetotalnumberof registerbitsneeded.Inmostcases,theanalysisisnearop\u00adtimal,whichisespeciallyexcitingforapplicationsthatper\u00adformabundantmulti-granularcomputations.Forinstance, \nBitwisenearlymatchesthelowerboundforlifeandmpeg\u00adcorr,whicharebit-levelandbyte-levelapplicationsrespec\u00adtively. \nTheonlyapplicationsinthefgurewithsubstantially sub-optimalperformancecomparedtothedynamicprofle with \nBitwise dyamic profile aremedianandsoftfoat.Inthecaseofmedian,thean\u00adalyzerwasunabletodeterminethebitwidthoftheinput \ndata,thusvariablesthatweredependentontheinputdata assumedthemaximumpossiblebitwidths.Althoughdy\u00adnamicproflingofsoftfoatshowsplentyofopportunitiesfor \nbitwidthreduction,theseopportunitiesarespecifctopar\u00adticularcontrolfowpathsandwerenotdiscoveredduring \nourstaticanalysisofthewholeprogram. with Bitwise dynamic profile 100% 80%  60% 40% Figure12:Percentageoftotalmemoryremaining:post-bitwidth \nanalysisversusdynamicprofle-basedlowerbound. 20% havethebestprospectforpackingvaluesintosub-wordin\u00ad \n0% Figure11:Percentageoftotalregisterbitsremaining:post\u00adbitwidthanalysisversusdynamicprofle-basedlowerbound. \n4.3MemoryBitElimination Figure12showsthepercentageoftheoriginalmemorybits remainingintheprogram.Herememorybitsaredefnedas \ndataallocatedforstaticarraysanddynamicallyallocated variables.Thisisanespeciallyusefulmetricwhencompil-ingtonon-conventionaldevicessuchasanFPGA,where \nmemoriesmaybesegmentedintomanysmallchunks.In addition,becausememorysystemsareoneoftheprimary  softfloatadpcmbubblesortlifeintmatmuljacobimedianmpegcorrshabilinterpconvolvehistogramintfirnewlifeparitypmatchsor \n withoutwith withoutwith withoutwith withoutwith withoutwith withoutwith withoutwith withoutwith withoutwith \nwithoutwith withoutwith withoutwith withoutwith structions. 32 bits 16 bits 8 bits 1 bit softfloat adpcm \nbubblesort life intmatmul jacobi median mpegcorr sha bilinterp convolve histogram intfir withoutwith \nnewlife withoutwith parity withoutwith withoutwith pmatch sor 116 consumersofpowerinmodernprocessors,thisisauseful \nmetricforestimatingpowerconsumption[14]. Inalmostallcases,theanalyzerisabletodetermine near-optimalbitwidthsforthememories.Thereareacou\u00adpleofcontributingfactorsforBitwise'ssuccessinreducing \narraybitwidths.First,manymultimediaapplicationsini\u00adtializestaticconstanttableswhichrepresentalargeportion \nofthememorysavingsshowninthefgure.Second,Bitwise capitalizesonarraysofBooleanvariables. 4.4BitwidthDistribution \nItisinterestingtocategorizevariablebitwidthsaccording tograinsize.ThestackedbarchartinFigure13shows thedistributionofvariablebitwidthsbothbeforeandafter \nbitwidthanalysis.WecallthisdistributionaBitspectrum. Tomakethegraphmorecoherent,bitwidthsarerounded uptothenearesttypicalmachinedata-typesize.Inmost \ncases,thenumberof32-bitvariablesissubstantiallyreduced to16,8,and1-bitvalues. Forsiliconcompilation,thisfgureestimatestheoverall \nregisterbitsthatcanbesaved.Aswewillseeinthenext sections,reducingregisterbitsresultsinsmallerdatapaths \nandsubsequentlysmaller,faster,andmoreefcientcircuits. Compilersformultimediaextensionscanutilizebitwidth \ninformationtoextracthigherdegreesofparallelism[16].In thiscontext,thespectrumshowswhichapplicationswill \nsoftfloat bubblesort intmatmul median sha convolve intfir parity sor adpcm life jacobi mpegcorr bilinterp \nhistogram newlife pmatch Figure13:Bitspectrum.Thisgraphisastackedbarchartthat showsthedistributionofregisterbitwidthsforeachbenchmark. \nWithoutbitwidthanalysis,almostallbitwidthsare32-bits.With Bitwise,manywidthsarereducedto16,8,and1bitmachine \ntypes,asdenotedbythenarrower16,8,and1bitbars. 5DeepCSiliconCompiler Thusfarwehaveshownthatbitwidthanalysisisagener\u00adallyefectiveoptimizationandthatourBitwiseCompileris \ncapableofperformingthistaskwell.Wenowturntoacon\u00adcreteapplication.Wehaveappliedbitwidthanalysistothe difcultproblemofsiliconcompilation.Forlackofspace, \nthissectiongivesbrieftreatmenttothedesignofahigh-level siliconcompiler.Thefollowingsectiondiscussestheimpact \nofbitwidthanalysisinthiscontext. 5.1Overview WehaveintegratedBitwisewiththeDeepCSiliconCom\u00adpiler[4].DeepCisaresearchcompilerunderdevelopment \nthatiscapableoftranslatingsequentialapplications,written ineitherCorFORTRAN,directlyintoahardwarenetlist. \nThecompilerautomaticallygeneratesaspecializedparallel architectureforeveryapplication.Tomakethistransla\u00adtionfeasible,thecompilationsystemincorporatesthelat\u00adestcodeoptimizationandparallelizationtechniquesaswell \nasmodernhardwaresynthesistechnology.Figure10shows thedetailsofintegratingBitwiseintoDeepC'soverallcom\u00ad \npilerfow.Afterreadingintheprogramandperforming traditionalcompileroptimizationsandpointeranalysis,the \nbitwidthanalysisstepsaretheninvoked.Thesestepswere  Total Bits describedindetailinSection3.Theadditionalstepsofthe \nsiliconcompilerbackendareasfollows.First,loop-levelpar\u00adallelizationsareapplied,followedbyanarchitectural-level \npartition,place,androute.Atthispointtheprogramhas beenformedintoanarrayofcommunicatingthreads.Then anarchitecturalsynthesissteptranslatesthesethreadsinto \ncustomhardware.Finally,thecompilerappliestraditional computer-aided-design(CAD)optimizationstogeneratethe \nadpcmbubblesortconvolvehistogramintfirintmatmuljacobilifemedianmpegcorrnewlifeparitypmatchsor fnalhardwarenetlist. \n5.2ImplementationDetails TheDeepCCompilerisimplementedasasetofover50 SUIFpassesfollowedbycommercialRTLsynthesis.The \ncurrentimplementationusesthelatestversionofSynopsys DesignCompilerandFPGAcompilerforsynthesis.Alarge \nsetoftheSUIFpassesaretakendirectlyfromMIT'sRaw compiler[17],whosebackendisbuiltonHarvard'sMach\u00adSUIFcompiler[24].ThebackendVeriloggeneratorisimple-mentedontopofStanford'sVeriSUIF[9]datastructures. \nDespitethelargenumberofSUIFpasses,CADsynthesis toolsconsumethemajorityofthecompiler'srun-time. 5.3VerilogBitwidthRule \nBecauseourcompilergeneratesRTLVerilogforcommercial tools,bitwidthinformationmustbetotallycommunicated \nviaregisterandwirewidths.Weexpectconformationto Verilog'soperationbitwidthrule:thebitwidthofeachop\u00aderationissettothemaximumbitwidthofthecontaining \nassignmentexpression'sinputandoutputvariables.Forex\u00ad ample, the bitwidth of the expression A = B +C is \nthe maximum bitwidth of A,B, and C. 5.4Usage Therehasbeenalimitedreleaseofthecompileranditis inusebyresearchersatMIT,Princeton,andtheUniver\u00adsityofMassachusetts.Wearestudyingbothreconfgurable \ncomputingandembeddedsystem-on-a-chipdesign.When usedforreconfgurablecomputing,thecompileriscoupled withfurthersiliconcompilationtools,suchastheVirtu\u00adaLogic[12]emulationsystemfromIKOS,orsoftwareand \ndriversforAnnapolisSystem'sWild-onePCIcard[2].For useinembeddedchipdesign,downstreamCADtoolsac\u00adceptingalogicnetlistthenperformphysicalplaceandroute, \nmappingthedesignontoaspecifcsiliconsubstrate. 6ImpactonSiliconCompilation Asdescribedintheprevioussection,theDeepCSilicon \nCompilerhastheopportunitytospecializememory,register, anddatapathwidthstomatchapplicationcharacteristics. \nWeexpectbitwidthanalysistohavealargeimpactinthis domain.However,becausebackendCADtoolsalreadyim\u00adplicitlyperformsomebitwidthcalculationduringoptimiza\u00adtions(suchasdeadlogicelimination),accuratemeasure-mentsrequireend-to-endcompilation.Afaircomparison \n Figure14:Registerbitsafterbitwiseoptimization.Inevery caseBitwisesavessubstantialregisterresourcesinthefnalsilicon \nimplementation. istomeasurefnalsiliconbothwithandwithoutbitwidth analysis. Weintroduceourbenchmarksinthenextsection,then \ndescribethedramaticarea,latency,andpowersavingsthat bitwidthanalysisenables4. 6.1Experiments Wepresentexperimentalresultsforaninitialsetofappli\u00adcationsthatwehavecompiledtohardware.Foreachap\u00adplication,ourcompilationsystemproducesanarchitecture \ndescriptioninRTLVerilog.Wefurthersynthesizethisarchi\u00adtecturetologicgateswithacommercialCADtool(Synop-sys).InthispaperwereportareaandspeedresultsforXil\u00adinx4000seriesFPGAs,andpowerresultsforIBM'sSA27E \nprocess{a0.15micron,6-layercopper,standard-cellpro\u00adcess. Thebenchmarksusedforsiliconcompilationareincluded \ninTable1.Theseapplicationsaregenerallyshortbench\u00admarks,butincludemanymultimediakernels.Itisimpor\u00adtanttonotethattherelativelysmallsizeofthebenchmarks \nisdictatedbythecurrentsynthesistimeofourcompilation approachandnotBitwise.Alsonotethatthereareslight \nvariationsfromthebenchmarkspresentedinSection4. 6.2RegistersSavedinFinalSilicon Wefrstcompiledeachbenchmarkintoanetlistcapableof \nbeingacceptedbyeitherXilinxorIBMCADtoolstopro\u00adduce\\fnalsilicon.\"ThememorysavingsreportedinSec\u00adtion4translatedirectlyintosiliconmemorysavingswhen \nweallowaseparatesmallmemoryforeachprogramvariable. Thissmallmemorypartitioningprocessisfurtherdescribed \ninearlierwork[4]. Registersavings,ontheotherhand,varyasadditional compilerandCADoptimizationstransformtheprogram's \nvariables.Variablerenamingandregisterallocationalso distortthefnalresultbyplacingsomescalarsinmorethan \noneregisterandothersinasharedregister.Figure14shows thetotalFPGAbitssavedbybitwidthoptimization.For XilinxFPGAcompilation,thefxedallocationofregisters \ntocombinationallogicwilldistorttheexacttranslationof thissavingstochiparea,assomeregistersmaygounused. \n4Notethatwealsofoundconsiderablesynthesiscompiletimesav\u00adingswhicharenotreportedhere. 100% 1800 80% 1600 \n1400 60%  adpcm (8)bubblesort (32)convolve (16)histogram (16)intfir (32)intmatmul (16)jacobi (8)life \n(1)median (32)mpegcorr (16)newlife (1)parity (32)pmatch (32)sor (32) CLB Count 1200 1000 40% 800 600 \n20% 400 200 0% 0 Figure15:Registerbitreduction,afterhigh-levelanalysisversus fnalsilicon.Thefuctuationinbitwidthsavingsbetweenfnal \nsiliconandhigh-levelanalysisisduetofactorssuchasvariable renamingandregisterallocation. Ourfndingsareverypositive|theearlierbitwidth \nsavingstranslateintodramaticsavingsinfnalsilicon,de\u00adspitethepossibilitiesforlossofthisinformationorpotential \noverlapwithotheroptimizations.However,becausethereis notaone-to-onemappingfromprogramscalarstohard\u00adwareregisters,theexactsavingsdonotmatch.Examining \nFigure15,weseethatthepercentageofbitssavedbyhigh\u00adlevelanalysisaresometimesgreaterandsometimeslessthan \nthosebitssavedinfnalsilicon.Weexplainthesediferences asfollows.First,therearemanycompilerandCADpasses \nbetweenhigh-levelanalysisandfnalsilicongeneration.If inanyofthesepassesthebitwidthinformationis\\lost\", \nforexamplewhenanewvariableiscloned,thenthefull complementofsavedbitswillnotberealized.Ontheother hand,thebackendpasses,especiallytheCADtools,arealso \nattemptingtosavebitsthroughlogicoptimizations.Thus thesepassesmayfndsavingsthatthecurrenthigh-level passisnotfnding.Finally,variablerenamingandregister \nsharingalsochangethepercentages. 6.3Area Registerbitssavedtranslatedirectlyintoareasaved.Area savingsalsoresultfromthereductionofassociateddatap\u00adaths.Figure16showsthetotalareasavingswithBitwise \noptimizationsversuswithout.Wesavefrom15%to86%in overallsiliconarea,nearlyan8.savingsinthebestcase. NotethatintheDeepCCompilationsystempointers \ndonotrequirethefullcomplementof32-bits.Usingthe MAPS[5]compilerdevelopedforRaw,arrayshavebeenas\u00adsignedtoasetofequivalenceclasses.Bydefnition,agiven \npointercanonlypointtooneequivalenceclass,andthus P needstobenowiderthanlog Sa,whereSaisthesizeof eachmemoryarrayspecifedina \ntheequivalenceclass.This techniqueisfurtherdescribedin[3]. 6.4ClockSpeed Wealsoexpectbitwidthoptimizationtoreducethelatency \nalongthecriticalpathsofthecircuitandincreasemaximum systemclockspeed.Ifcircuitstructuresarelinear,suchas \naripplecarryadder,thenweexpectalinearincrease.How\u00adever,commonstructuressuchascarry-saveadders,multi\u00adplexors,andbarrelshiftersaretypicallyimplementedwith \nlogarithmiclatency.Thus,bitwidthreductiontranslates Figure16:FPGAareaafterBitwiseoptimization.Registersav\u00adingstranslatedirectlyintoareasavingsforFPGAs.Inthefgure, \npost-synthesisCLBcountmeasuresthenumberofinternalcombi\u00adnationallogicblocksrequiredtoimplementthebenchmarkwhen \ncompiledtoFPGAs.Combinationallogicblocks(CLBs)eachin\u00adclude2fourinputlookuptablesand2fip-fopregisters.Wasted \nCLBsduetoroutingdifcultiesduringvendorplaceandroute arenotincludedinthisresult,butshouldreduceproportionally. \nThenumberinparenthesisbyeachbenchmarkistheresulting bitwidthofthemaindatapath. intoaless-than-linearyetsignifcantspeedup.Figure17 \nshowstheresultsforafewofourbenchmarks.Thelargest speedupisforconvolve,inwhichthereductionofconstant multiplicationsincreasedclockspeedsbynearly3..Onthe \notherhand,theMPEGcorrelationkerneldidnotspeedup becausetheoriginalbitwidthswerealreadyclosetooptimal. \n6.5Power Asexpected,theareasavedbybitwidthreductiontrans\u00adlatesdirectlyintopowersavings.Ourfrsthypothesiswas \nthatthesesavingsmightbelessenedbythefactthatin\u00adactiveregistersanddatapathswouldnotconsumepower. Ourexperimentsshowotherwise.Themuxesandcontrol \nlogicleadingtotheseregistersstillconsumepower.Fig\u00adure18showsthereductioninpowerachievedforasubset ofourbenchmarks.Inordertomakethesepowermeasure\u00adments,wefrstranaVerilogsimulationofthedesignto \ngatherswitchingactivity.Thisswitchingactivityrecords wheneachregistertogglesinthedesign.Thisinformation \nisthenusedbylogicsynthesis,alongwithaninternalzero delaysimulation,todeterminehowofteneachwirechanges \nstate.Thesynthesizerthenreportsaveragedynamicpower consumptioninmilliWatts,whichwereporthere.Notethat \nwedonotincludethepowerconsumptionofon-chipmemo\u00adries.Furthermore,wedonotattempttodecreasethetotal cyclecountwithbitwidthreduction,givingatotalenergy \nreductioninproportiontototalpowersavings. Wemeasuredpowerforbubblesort,histogram,jacobi, pmatch,andnewlife.Newlifehadthelargestpowersavings, \nreducedfrom14mWto4mW,whiletheotherfourbench\u00admarkshadmoremodestpowersavings.Weexpectthat atleastaportionofthesesavingscanbetranslatedtothe \nprocessorregime,inwhichpowerconsumptionistypically hundredsoftimeshigher. adpcmbubbles ortconvolvehis \ntogramintfirintm atm ul jacobilife medianmpegcorrnewlifeparitypm atchsor we assumea200MHZclockforthe.15micronIBMSA27Eprocess. \nThetotalcyclecount(numberofclockstickstocompleteeach benchmark)isnotafectedbybitwidth,andthustotalenergy \nwillscaleproportionally.Thesenumbersdonotincludepower Figure17:FPGAclockspeedafterBitwiseoptimization.Bench\u00ad \n consumed marksareuniversallyfasterafterbitwidthanalysiswhencompiled toXilinxXC4000FPGAs(-09speedgrade)withSynopsys.Clock \nbyRAM. speedisdeterminedbytheworstcasedelayreportedduringsyn\u00adthesisanddoesnotaccountforskew,etc.Theactualnumberof \nCLBsonthecriticalpaths,rangingfrom15-38beforebitwidth optimizationand7-16afterwards,isthekeyfactorindetermining \nclockspeed. 6.6Discussion Forreconfgurablecomputingapplications,bitwidthsav\u00adingscanbea\\makeorbreak\"diferencewhencomparing \ncomputationaldensity{performanceperarea{tothatof conventionalprocessors.BecauseFPGAsprovideanaddi\u00adtionallayerofabstraction(emulatedlogic),itisimportant \ntocompile-throughasmanyhigherlevelsofabstractionas possible.Staticallytakingadvantageofbitwidthinforma\u00adtionisaformofpartialevaluation.Itcanhelptomake \nFPGAscompetitivewithmoretraditional,butlessadap\u00adtive,computingsolutions.Thus,bitwidthanalysisisakey technologyenablerforFPGAcomputing. \nForASICimplementations,bitwidthsavingswilldirectly translateintoreducedsiliconcosts.Ofcourse,manyofthese \ncostsavingscouldbecapturedbymanuallyspecifyingmore precisevariablebitwidths.However,manualoptimization \ncomesatthecostofmanuallabor.Additionally,reduc\u00adingtheprobabilityoferrorsisinvaluableinanASICenvi\u00adronment,wherecompanieswhomisswithfrstsiliconoften \nmissentiremarketwindows.Asweapproachthebillion\u00adtransistorera,raisingthelevelofabstractionforASICde\u00adsignerswillbearequirement,notaluxury. \n7RelatedWork Brooksetal.,dynamicallyrecognizeoperandswithnarrow bitwidthstoexploitsub-wordparallelism[7].Theirresearch \nconfrmsourclaimthatawiderangeofapplications,par\u00adticularlymultimediaapplications,exhibitnarrowbitwidth \ncomputations.Usingtheirtechniques,theyareabletode\u00adtectandexploitbitwidthinformationthatisnotstatically \nknown.However,becausetheyaredetectingbitwidthsdy\u00adnamically,theirresearchcannotbeappliedtoapplications \nthatrequireaprioribitwidthinformation. ScottAnanianalsorecognizedtheimportanceofstatic bitwidthinformation[1].Heusesbitwidthanalysisinthe \ncontextofaJavatosiliconcompiler.Becausebitwidthanal\u00ad ysisisnotthemainthrustofhisresearch,heusesasimple \ndatafowtechniquethatpropagatesbitwidthinformation. Ourmethodofpropagatingdata-rangesisamoreprecise methodfordiscoveringbitwidths. \nRahulRazdandevelopedtechniquestosuccessfullyana\u00adlyzebitwidths[21].His\\functionwidth\"analysisisacombi\u00adnationofforwardandbackwardanalysesonavectorofbits. \nInthissense,hisanalysisissimilartotraditionalCADdead\u00adbiteliminationalgorithms.Furthermore,withtheexception \noftheloopinductionvariables,hisanalysisdoesnothan\u00addleloop-carriedexpressionswell.Razdan'sfunctionwidth \nresultsforhisPRISCarchitectureachievemodestspeedups whenusedincombinationwithotherlogic-leveloptimiza\u00adtions. \nBudiuetal.[8]alsoperformbitwidthanalysis.Theyuse methodssimilartoRazdan'stoimproveperformanceina reconfgurabledevice. \nThedata-rangepropagationtechniquespresentedbyJa\u00adsonPatterson[19]andWilliamHarrison[11]aresimilarto thosepresentedinthispaper.Whiletheirworkprovedtobe \nefective,theydidnotconsiderbackwardpropagationand theirtechniquesfordiscoveringloop-carriedsequencesdo \nnotincludethegeneralmethodsdiscussedinthispaper. 8Conclusion Accuratebitwidthanalysisofhigh-levelprogramsrequires \nsophisticatedcompilertechniques.Priortothiswork,only simpleorad-hocapproachestoautomaticbitwidthanalysis \nhavebeenapplied.Inthisworkwehaveformalizedbitwidth analysisasavaluerangepropagationproblem.Wehavede\u00adscribedalgorithmsforbi-directionaldata-rangepropagation \nandforfndingclosed-formsolutionsofloop-carriedexpres\u00adsions.Wehavepresentedaninitialimplementationwhich \nworkswell:ourcompile-timeanalysisapproachestheaccu\u00adracyofrun-timeprofle-basedanalyses.Whenincorporated \nintoasiliconcompiler,bitwidthanalysisdramaticallyre\u00adducedthelogicareaby15{86%,improvedtheclockspeed by3{249%,andreducedthepowerby46{73%ofthe \nresultingcircuits.Anticipatedfutureusesofthistechnique includecompilationforSIMDandlowpowerarchitectures. \n9Acknowledgments WereceivedgeneroushelpfromtherestoftheComputer ArchitectureGroupatMIT,especiallyMattFrank,Michael \nZhang,SamLarsen,DerekBruening,AndrasMoritz,Ben\u00adjaminGreenwald,MichaelTaylor,andStephanieLarsen. SpecialthankstoRaduRuginaforprovidinguswithhis \npointeranalysispackage. ThisresearchwasfundedinpartbytheNSFgrant EIA9810173andDARPAgrantDBT63-96-C-0036. \nReferences [1]C.S.Ananian.TheStaticSingleInformationForm. TechnicalReportMIT-LCS-TR-801,MassachusettsIn\u00adstituteofTechnology,1999. \n[2]AnnapolisMicroSystems,Inc.,Annapolis,MD.WILD\u00adONE(tm)ReferenceManual,1999.Revision3.3. [3]J.Babb.High-LevelCompilationForRecon.gurable \nArchitectures.PhDthesis,EECSDepartment,MIT, DepartmentofElectricalEngineeringandComputer Science,May2000. \n[4]J.Babb,M.Rinard,A.Moritz,W.Lee,M.Frank, R.Barua,andS.Amarasinghe.ParallelizingApplica\u00adtionsIntoSilicon.InProceedingsoftheIEEEWorkshop \nonFPGAsforCustomComputingMachines(FCCM), NapaValley,CA,April1999. [5]R.Barua,W.Lee,S.Amarasinghe,andA.Agarwal. \nMaps:ACompiler-ManagedMemorySystemforRaw Machines.InProceedingsofthe26thInternational SymposiumonComputerArchitecture,Atlanta,GA, \nMay1999. [6]BitwiseProject.http://www.cag.lcs.mit.edu/bitwise. [7]D.BrooksandM.Martonosi.DynamicallyExploiting \nNarrowWidthOperandstoImproveProcessorPower andPerformance.In5thInternationalSymposium ofHighPerformanceComputerArchitecture,January \n1999. [8]M.Budiu,S.Goldstein,M.Sakr,andK.Walker. BitValueinference:Detectingandexploitingnarrow bitwidthcomputations.InProceedingsoftheEuroPar \n2000EuropeanConferenceonParallelComputing,Mu\u00adnich,Germany,Aug.2000. [9]R.French,M.Lam,J.Levitt,andK.Olukotun.AGen\u00aderalMethodforCompilingEvent-DrivenSimulations. \n32ndACM/IEEEDesignAutomationConference,June 1995. [10]M.P.Gerlek,E.Stoltz,andM.Wolfe.BeyondIn\u00adductionVariables:DetectingandClassifyingSequences \nUsingaDemand-DrivenSSAForm.ACMTransactions onProgrammingLanguagesandSystems,17(1):85{122, January1995. \n[11]W.Harrison.CompilerAnalysisoftheValueRangesfor Variables.IEEETransactionsonSoftwareEngineering, 3:243{250,May1977. \n[12]IKOSSystems,Inc.VirtuaLogicEmulationSystem Documentation,1999.Version3.0.4. [13]R.JohnsonandK.Pingali.Dependence-BasedPro\u00adgramAnalysis.InProceedingsoftheSIGPLANCon\u00adferenceonProgrammingLanguageDesignandImple\u00admentation,pages78{89,1993. \n[14]J.Kin,M.Gupta,andW.H.Magione-Smith.The FilterCache:AnEnergyE.cientMemoryStructure. Micro-30. [15]K.KnobeandV.Sarkar.ArraySSAformanditsuse \ninParallelization.InPrinciplesofProgrammingLan\u00adguages(POPL98),pages107{120. [16]S.LarsenandS.Amarasinghe.ExploitingSuperword \nLevelParallelismwithMultimediaInstructionSets.In ProceedingsoftheSIGPLANConferenceonProgram\u00admingLanguageDesignandImplementation,Vancou\u00adver,BC,June2000. \n[17]W.Lee,R.Barua,M.Frank,D.Srikrishna,J.Babb, V.Sarkar,andS.Amarasinghe.Space-TimeScheduling ofInstruction-LevelParallelismonaRawMachine.In \nProceedingsoftheEighthACMConferenceonArchi\u00adtecturalSupportforProgrammingLanguagesandOp\u00aderatingSystems,pages46{57,SanJose,CA,Oct.1998. \n[18]OpenSystemCInitiative.http://www.systemc.org. [19]J.Patterson.AccurateStaticBranchPredictionby ValueRangePropagation.InProceedingsoftheSIG-PLANConferenceonProgrammingLanguageDesign \nandImplementation,volume37,pages67{78,June 1995. [20]A.PelegandU.Weiser.MMXTechnologyExtension toIntelArchitecture.16(4):42{50,Aug1996. \n[21]R.Razdan.PRISC:ProgrammableReducedInstruc\u00adtionSetComputers.PhDthesis,DivisionofApplied Science,HarvardUniversity,(HarvardUniversityTech\u00adnicalReport14-94,CenterforResearchincomputing \ntechnologies),May1994. [22]R.RuginaandM.Rinard.PointerAnalysisforMul\u00adtithreadedPrograms.InProceedingsoftheSIGPLAN \nConferenceonProgramLanguageDesignandImple-mentation,pages77{90,Atlanta,GA,May1999. [23]R.RuginaandM.Rinard.AutomaticParallelization \nofDivideandConquerAlgorithms.InProceedingsof theSIGPLANConferenceonProgramLanguageDe-signandImplementation,Vancouver,BC,June2000. \n[24]M.D.Smith.ExtendingSUIFforMachine-dependent Optimizations.InProceedingsoftheFirstSUIFCom\u00adpilerWorkshop,pages14{25,Stanford,CA,Jan.1996. \n[25]J.Tyler,J.Lent,A.Mather,andH.V.Nguyen.Al\u00adtiVec(tm):BringingVectorTechnologytothePow\u00aderPC(tm)ProcessorFamily.Phoenix,AZ,February \n1999. [26]R.Wilson,R.French,C.Wilson,S.Amarasinghe, J.Anderson,S.Tjiang,S.-W.Liao,C.-W.Tseng, M.Hall,M.Lam,andJ.Hennessy.SUIF:AnInfras\u00adtructureforResearchonParallelizingandOptimizing \nCompilers.ACMSIGPLANNotices,29(12),Dec.1996. \n\t\t\t", "proc_id": "349299", "abstract": "<p>This paper introduces <italic>Bitwise</italic>, a compiler that minimizes the bitwidth the number of bits used to represent each operand for both integers and pointers in a program. By propagating 70static information both forward and backward in the program dataflow graph, Bitwise frees the programmer from declaring bitwidth invariants in cases where the compiler can determine bitwidths automatically.  Because loop instructions comprise the bulk of dynamically executed instructions, Bitwise incorporates sophisticated loop analysis techniques for identifying bitwidths. We find a rich opportunity for bitwidth reduction in modern multimedia and streaming application workloads. For new architectures that support sub-word data-types, we expect that our bitwidth reductions will  save power and increase processor performance.</p><p> This paper also applies our analysis to silicon compilation, thetranslation of programs into custom hardware, to realize the full benefits of bitwidth reduction. We describe our integration of Bitwise with the DeepC Silicon Compiler. By taking advantage of bitwidth information during architectural synthesis, we reduce silicon real estate by 15 - 86%, improve clock speed by 3 - 249%, and reduce power by 46 - 73%. The next era of general purpose and reconfigurable architectures should strive to capture a portion of these gains. </p>", "authors": [{"name": "Mark Stephenson", "author_profile_id": "81100072491", "affiliation": "Massachusetts Institute of Technology, Laboratory for Computer Science, Cambridge, MA", "person_id": "P191158", "email_address": "", "orcid_id": ""}, {"name": "Jonathan Babb", "author_profile_id": "81100262309", "affiliation": "Massachusetts Institute of Technology, Laboratory for Computer Science, Cambridge, MA", "person_id": "P147128", "email_address": "", "orcid_id": ""}, {"name": "Saman Amarasinghe", "author_profile_id": "81100533031", "affiliation": "Massachusetts Institute of Technology, Laboratory for Computer Science, Cambridge, MA", "person_id": "PP14184970", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/349299.349317", "year": "2000", "article_id": "349317", "conference": "PLDI", "title": "Bidwidth analysis with application to silicon compilation", "url": "http://dl.acm.org/citation.cfm?id=349317"}