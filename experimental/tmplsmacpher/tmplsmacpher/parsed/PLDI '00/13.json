{"article_publication_date": "05-01-2000", "fulltext": "\n Compiler Analysis of Irregular Memory Accesses Yuan Lin Department of Computer Science University of \nIllinois at Urbana-Champaign yuanlin@uiuc.edu ABSTRACT Irregulararrayaessesarearrayaesseswhosearraysub\u00adsriptsdonothavelosed-formexpressionsintermsofloop \nindies.Traditionalarrayanalysisandlooptransformation tehniquesannothandleirregulararrayaesses.Inthis \npaper,westudytwokindsofsimpleandommonases ofirregulararrayaesses:single-indexedaessandindi\u00adretarrayaess.Wepresenttehniquestoanalyzethese \ntwoasesatompile-time,andweprovideexperimentalre\u00adsultsshowingtheefetivenessofthesetehniquesinfnding moreimpliitloopparallelismatompile-timeandimproved \nspeedups. 1. INTRODUCTION High-levellanguageanalysisandoptimizationtehniques havebeenusedtodetetparallelism,privatizedata,enhane \nloality,andredueommuniationosts.Mosttraditional methodsoperateondoloopsandrequirethatarraysub\u00adsriptexpressionsinsidetheloopsontainonlyloopindies \nandloopinvariants.Inaddition,mostmethodsrequirethe subsriptexpressionstobea\u00c6ne.However,manyimportant \nsientifprogramsontainirregulararrayaesses.Wede\u00adfneanarrayaessasirregularifnolosed-formexpression, intermsoftheloopindies,forthesubsriptoftheaessed \narrayisavailableatompile-time.Beauseurrentanaly\u00adsistehniquesannothandleirregulararrayaesses,many odesareleftunoptimized. \nConsider,forexample,arrayprivatization[12,19,23,30], animportanttehniqueforloopparallelization.Anarray \nanbeprivatizedif,withinagiveniteration,itselementsare alwaysassignedbeforetheyareread.Thus,ineahiteration \noftheoutermostloopdokinFig.1Oa),anyelementofxO) readatstatementO3)inloopdojisdefnedatstatements O1)andO2)inthewhileloop.Therefore,arrayxO)anbe \nprivatizedforloopdok.Beausethereisnodependene, loopdokanbeparallelized.However,beauseurrent privatizationtestsrequirealosed-formexpressioninorder \ntoomputethesetionofarrayelementsreadorwritten Permission to make digital or hard copies of all or part \nof this work for personal or classroom use is granted without fee provided that copies are not made or \ndistributed for pro.t or commercial advantage and that copies bear this notice and the full citation \non the .rst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires \nprior speci.c permission and/or a fee. PLDI 2000, Vancouver, British Columbia, Canada Copyright 2000 \nACM 1-58113-199-2/00/0006 ..$5.00 David Padua Department of Computer Science University of Illinois at \nUrbana-Champaign padua@uiuc.edu do k = 1, n do i = 1, n p = 0 p = 1 i = link(1,k) t(p) = .. while (i \n!= 0) do loop do i = 1, np = p+1 p = p+1 do j = 1, mx(p) = y(i) (1) t(p) = .. x(j) = ..i = link(i,k) \nif (..) then end do if (cond(k,i)) then loop do k = 1, pp = p+1 if (p>=1) then y(i,k) = x(pos(k))x(p) \n= y(i) (2) .. = t(p) end do end if p = p-1end do end do end if do j = 1,p end loop dz(k,j) = x(j) (3) \n end if end do end loop end do end loop (a) (b) (c) Figure1:ExamplesofIrregularArrayAesses inaloopandbeause,inthisexample,thereisnosuh \nexpressionforp,thesetehniquesanonlydeterminethat setion[1:p]ofxO)isreadinloopdoj.Theyannot determinethatthesamesetionalsoiswritteninthewhile \nloopand,therefore,failtoprivatizexO). AseondexampleispresentedinFig.1O).Inloopdok, arrayxO)isindiretlyaessedviaanotherarrayposO).Ifit \nouldbedetetedatompile-timethatthevaluesinpos[1: p]areinsidetheinterval[1],thentheompilerwouldbe abletoprivatizexO)forloopdoiandparallelizetheloop. \nUserassertions[24,18]andrun-timetests[32,27,26]have beenproposedasalternativestostatianalysisforirregular \nmemoryaesses.However,informationusefulforaom\u00adpilermaynotbeofinteresttoaprogrammer.Inserting assertionsisatediousjobandanleadtoerrorsthatare \ndi\u00c6ulttodetet.Apossiblestrategyistouserun-time analysismethods.However,thesemethodsintrodueover\u00adheadthatisnotalwaysnegligibleandalsoinreasetheode \nsize,sinetheunoptimizedversionmustalsobeavailablein asethetestsfail.Whileuserassertionsandrun-timetests \nareusefulandimportant,ompile-timeanalysisislearly preferableandthereforeshouldbeusedwheneverpossible. \nInthispaper,wepresenttehniquestoanalyzeirregular arrayaessesandshowhowtousetheresultsoftheanalysis toenhaneompileroptimizations.Westudytwolassesof \nirregulararrayaesses. 1.Irregularsingle\u00adindexedaess:Theaessesofanar\u00adrayinagivenlooparesingle\u00adindexedifthearrayis \nalwayssubsriptedbyasinglevariableandthatvari\u00adableisthesamethroughouttheloop.Arrayx()is single\u00adindexedinthewhileloopinFig.1(a)andin \ntheloopinFig.1(b). ... 2.Simpleindiretarrayaess:Anarrayisindiretly\u00adaessedifitissubsriptedbyanarrayelement.We \nallthearrayitselfthe\"hostarray\",andthearray inthesubsriptthe\"indexarray\".Anindiretarray aessissimpleiftheinnermostenlosingloopisa \n.. loop,sayL,andthesubsriptoftheindexarrayisthe loopindexofloopL.Thereferenetoarrayx()in loopinFig.1()isasimpleindiretarrayaess. \n... Thesetwolassesofirregulararrayaesseswerehosen beausetheyarisefrequentlyinsientifodes. Thispapermakesthefollowingontributions: \n1.Itpresentsexamplesshowingthatompile\u00adtimeanaly\u00adsisofirregulararrayaessesanenhaneotheranaly\u00adsesandoptimizations,suhasdatadependenetests, \nprivatizationtests,andloopparallelization. 2.Itpresentstwoompile\u00adtimetehniquestoanalyzethe twoommonasesofirregulararrayaessesjustdis\u00adussed.Thesetwotehniquesaresimpleandefe\u00adtive.Theytakeadvantageofthefatthat,inreal \nprograms,irregulararrayaessesoftenfollowafew fxedpatternsandhavedetetableproperties.Wealso demonstratetheimportaneofusingthesetwoteh\u00adniquestogetherinanalyzingirregulararrayaesses. \nForirregularsingle\u00adindexedaess,aboundeddepth\u00adfrstsearhmethodisusedtotraetheevolutionofin\u00addexvariablesbetweentwoarrayaesses.Twolasses \nofindexevolutionsanbeidentifed:onseutively\u00adwrittenandstakaess.Forsimpleindiretarray aess,anarraypropertyanalysismethodisused.It \nperformsinterproeduralarraydatafowanalysisfol\u00adlowingademand\u00addrivenapproah. 3.Itdesribestheimplementationofthetehniquesin \naresearhompilerandpresentsexperimentalresults showingtheefetivenessofthetehniquesindetet\u00adingloopparallelismatompile\u00adtime.Thankstothe \nnewtehniques,nineloopsinfverealprogramsthat ouldnotbehandledbythetraditionalmethodswere foundparallel.And,beauseoftheparallelizationof \ntheseloops,theperformaneoffouroftheprograms improvedsignifantly. Therestofthispaperisorganizedasfollows.Setions2and \n3presentthetehniquestoanalyzesingle\u00adindexedarraya\u00adessesandindiretarrayaesses,respetively.Setion4 desribeshowtousethetwotehniquestogether.Setion \n5disussestheimplementationandexperimentalresults. Setion6onludesthepaper.Relatedworkismentioned throughoutthepaper. \nbDFS(u) 1visited[u]: true; 2fpro(u); 3if(notfbound(u)){ 4foreahadjaentnodevofu{ 5if(fjailed(v)) 6returnfailed; \n7if((notvisited[v])and(bDFS(v) failed)) 8returnfailed; 9} 10} 11returnsueeded; Beforethesearhstarts,visited[]issettofalseforallnodes. \nFigure2:Boundeddepth-frstsearh 2. IRREGULAR SINGLE-INDEXED ARRAY ACCESSES Thissetionpresentsabriefdesriptionofamethodtoan\u00adalyzeirregularsingle\u00adindexedarrayaesses.Adetailedde\u00adsriptionanbefoundin[22]. \nInirregularsingle\u00adindexedarrayaesses,theindexvariable mayhavediferentvaluesatdiferentpointsofthebodyof \naloop.Forexample,inFig.1(a),theindexvariablephas diferentvaluesatstatements(1)and(2)whiharewithin thebodyofthewhileloop.Itisimportanttoexaminehow \nthevalueofanindexvariablehangesbetweenonseutive aessestoanarrayreferenesubsriptedbythevariable. Withinaloop,thehangesanbemonotoniornon\u00admonotoni. \nInthemonotoniase,suhaspinthewhileloopinFig.1(a), theloationofarrayelementsaessedinreaseorderease duringexeution.Nosuhorderexistsinthenon\u00admonotoni \nase,suhaspinthebodyofloopinFig.1(b).Forthe ...monotoniase,wewanttodeterminewhetherthisarrayis onseutivelywritten.Inthenon\u00admonotoniase,wewant \ntodeterminewhetherthisarrayisusedasastak. 2.1 Bounded Depth-.rst Search Wefrstdesribeaboundeddepth\u00adfrstsearh(bDFS)al\u00adgorithmthatwillbeusedlaterusedtobuildtheanalysis \nalgorithmforirregularsingle\u00adindexedarrays.ThebDFSal\u00adgorithm,showninFig.2,doesadepth\u00adfrstsearhonaon\u00adtrolfowgraph(VVE),whereVisthesetofvertiesandE \nisthesetofedgesinthegraph.Itusestwofuntionstoon\u00adtrolthesearh.Thesetwofuntions,fbound()andfjailed(), aredefnedbeforethesearhstarts.fbound()mapsVonto \n(trueVfalse).Supposetheurrentnodeisnoduringthe searh.Iffbound(no)istrue,thenbDFSdoesnotsearhthe nodesadjaenttono.Thenodeswhosefbound()valuesare \ntruearetheboundariesofthesearh.fjailed()alsomapsV onto(trueVfalse).If,fortheurrentnodeno,fjailed(no)is \ntrue,thenthewholebDFSterminateswithareturnvalue offailed.Thenodeswhosefald()valuesare jitrueause e anearlyterminationofthebDFS. \n 2.2 Consecutively Written Array Accesses Anarrayisonseutivelywritteninaloopif,duringthe exeutionoftheloop,alltheelementsinaontiguoussetion \n ofthearrayarewrittenininreasingordereasingorder.. Forexample,inthewhileloopinFig.1(a),arrayelement x(2)isnotwrittenuntilx(1)iswritten,x(3)isnotwritten \nuntilx(2)iswritten,andsoon.Thatis,x()isonseutively writteninthe1-2-3-order. Theknowledgethatanarrayisonseutivelywrittenina \nloopanbeusedtoenhanemanyanalysesandoptimiza\u00adtions,suhasarrayprivatizationtestsanddatadependene tests[22].ForthearrayprivatizationexampleinFig.1(a), \nthe\"onseutivelywritten\"propertyisveryimportantbe\u00adauseitguaranteesthatthewritesoverthereadsinthe sameiteration. \nTodeterminewhetherasingle-indexedarrayx()within\u00addexvariablepisonseutivelywritteninaloop,wefrst hekwhetherpiseverdefnedinanywayotherthanbeing \ninreasedby1intheloop.Ifso,weassumethearrayis notonseutivelywritten.Thenwehek,byperforming bDFSsstartingfromeahofthe\"p=p+1\"statementson \ntheontrolfowgraphoftheloop,whetherthereexistsa pathfromone\"p=p+1\"statementtoanother\"p=p+1\" statementandthearrayx()isnotwrittenonthepath.If \nsuhapathexists,thentheremaybe\"holes\"inthesetion wherethearrayisdefnedand,therefore,thearrayisnot onseutivelywritteninthesetion.Toaomplishthis,the \nbDFSalgorithmanbeusedwithfbound(n)settotrueonly whennreferstoxandfJailed(n)settotrueonlywhennis oftheform\"p=p+1\". \nWolfeetal[31,13]havepresentedanalgorithmtoreognize andlassifysequenevariablesinaloop.R.Guptaand M.Spezialetti[28]haveextendedthetraditionaldata-fow \napproahtodetet\"monotoni\"statements.Whileboth ofthesemethodsanreognizetheindexvariablepinthe whileloopinFig.1(a)asamonotonivariable,noneofthem \nandeterminethatthearrayx()isonseutivelywritten inthewhileloop.Thereasonisthatthesemethodsare notdesignedtostudytheefetofindexvariablesonarray \naesses.Bothmethodsanreognizeawiderlassofsalar variablesthanourmethod,butsofarwehavenotfoundany asewherethisextrapowerimprovesarrayaessanalysis. \n 2.3 Stack Access Manyprogramsimplementstaksusingarraysbeauseitis bothsimpleande\u00c6ient.Weallstaksimplementedin \narraysarraystaks.Figure1(b)illustratesanarraystak. Inthebodyofloopdoi,arrayt()isusedasastakandp istheindexofthetopofthestak. \nTheknowledgethatanarrayisanarraystakanbeused toimprovemanyoptimizations.Again,onsiderarraypri\u00advatization.Whenanarrayisusedasastakinthebody \nofaloop,thearrayelementsarealwaysdefned(\"pushed\") beforebeingused(\"popped\")intheloop.Diferentitera\u00adtionsoftheloopwillreusethesamearrayelements,butthe \nvalueofthearrayelementsneverfowsfromoneiteration totheotherifthestakpointerisalwaysresettothesame positionatthebeginningofeahiteration.Therefore,array \nstaksinaloopbodyanbeprivatized.Forexample,in .Tobeonise,wedisussonlytheinreasingaseinthis paper. offset(1) \noffset(2) offset(3) offset(4) offset(n) offset(n+1) data() length(1) length(2) length(3) length(4) length(n) \n(a) do200i=1,n offset(1)=1 do300j=1,length(i) do100i=1,n data(offset(i)+j-1)=.. offset(i+1)=offset(i)+length(i) \nenddo enddo enddo (b) () Figure3:Exampleoflosed-formdistane Fig.1(b),arrayt()anbeprivatizedinloopdoi.In[22], \nwealsodesribehowtousethestakaessinformation toimproverun-timearraybounds-hekingeliminationand loopinterhanging. \nToidentifystakaesses,thealgorithmlooksforprogram regionsinwhihthesingleindexvariablepisdefnedin onlyoneofthefollowingthreeways:1)p:=p+1;2) \np:=p-1;3)p:=Cbottom,whereCbottomisaonstantin theprogramregion.Thealgorithmhekswhetherasingle\u00adindexedarrayisusedasastakintheregionbyheking \nwhetheranypathoriginatingfromstatementsintheleft olumnofTable1reahesastatementinthesetSbound(n) beforeitreahesastatementinthesetSJailed(n).Thisan \nbedonebyperformingbDFSsontheontrolfowgraph oftheprogramregion.Intuitively,theorderinTable1 ensuresthatforanarraystakx()withindexp,pisfrst \nsettoCbottombeforeitismodifedorusedinthesubsript ofx(),thevalueofpnevergoesbelowCbottom,andthatthe aessofelementsofx()followsthe\"last-written-frst-read\" \npattern.  3. INDIRECT ARRAY ACCESSES IntheirstudyofthePerfetBenhmarks,BlumeandEigen\u00admannfoundthatindexarraysoftenhavesomeproperties[7] \nthatanbedetetedstatiallyandthatenableprogram parallelization.Similarresultsalsowereobtainedbytheau\u00adthorsinastudyofseveralsparseandirregularprograms[21]. \nByidentifyingtheseproperties,ompilersanavoidmaking onservativeassumptionsintheanalysesofindiretarray \naesses. Forexample,intheCompressedColumnStorage(CCS)for\u00admatforsparsematries,thenon-zeroelementsofasparse \nmatrixarestoredinaone-dimensionalhostarray.The hostarrayisdividedintoseveralsegments,asillustrated inFig.3(a).Eahsegmentorrespondstoaolumn.The \nstartingpositionandthelengthofeahsegmentaregivenby indexarraysoffset0 andlength0 ,respetively.Figure \n3(b)showsaommonlooppatternaessingtheelements inthematrix.Thelooptraversesthehostarraysegmentby segment.Figure3()showsaommonpatternusedtode\u00adfneoffset0 \n.Loopdo200doesnotarryanydependenes iflength(i)?0beause offset(i)+length(i)-1offset(i+1),where1:in, whihanbederivedfromtheloopinFig.3(). \n n ba (n)  (n) p-p 1 {x(p) -..,p-Cbattam} {p-p 1, p-p-1,..-x(p)} p-p-1 {p-p 1, , p-Cbattam} {p-p-1,x(p) \n-..,..-x(p)} x(p) -.. {p-p 1, ..-x(p),p-Cbattam} {p-p-1,x(p) -..} ..-x(p) {p-p-1,p-Cbattam} {p-p 1, x(p) \n-..,..-x(p)} Table1:OrderforArra aks Givenanarray,ifthedifereneofthevaluesofanytwoon\u00adseutiveelementsanalwaysberepresentedbyalosed\u00adform \nexpression,wesaythearrayhasalosed-formdistane[5]. Theotherpropertiesofindexarraysthatanbeusedby ompilersareinjetivity,monotoniity,havingalosed-form \nvalue,andhavingalosed-formbound.Anarraya()isinje\u00adtiveifa(i) ia(j)wheni ij.Anarraya()ismonotonially non\u00addereasing(non\u00adinreasing)ifa(i):a(j)(a(i)?a(j)), \nij.Anarrayhasalosed\u00adformvalueifallthevaluesofthe arrayelementsanberepresentedbyalosed\u00adformexpres\u00adsionintermsofarrayindiesandonstantsatompile\u00adtime. \nAnarrayhasalosed\u00adformboundifalosed\u00adformexpres\u00adsionisavailableatompile\u00adtimeforeitherthelowerbound ortheupperboundofthearrayelements'values. \nTodeterminewhetheranindexarrayhasoneoftheproper\u00adtieslistedabove,itisneessarytohekallthedefnitions oftheindexarrayreahinganindiretlyaessedarrayref\u00aderene.Iftheprogrampatternsatallthedefnitionsites \nimplythattheindexarrayhasthepropertybeingstudied, andnoneofthestatementsinbetweenthedefnitionsites andtheusesiteredefnesanyvariablesthatareusedtoex\u00adpresstheproperty,thenwesaythatthepropertyisavailable \nattheusesite.Otherwise,itisassumedthattheproperty isnotavailable. Ourstrategyistoperformademand\u00addriveninterproedu\u00adralarraypropertyanalysistosolvetheavailableproperty \nproblem.Theanalysisisdoneinterproedurallybeause, inmostrealprograms,indexarraysoftenaredefnedin oneproedureandusedinotherproedures.Theanalysis \nisdemand\u00addrivenbeausetheostofinterproeduralarray reahingdefnitionanalysisandpropertyhekingishigh. Theompilerperformstheanalysisonlywhenitmeetsan \nindexarrayanditheksonlythepropertythattheusesite suggests.Forexample,inFig.3,theompilerwouldhek onlythepropertyofhavingalosed\u00adformdistaneforthe \nusesites3. 3.1 Data.ow Model for Query Propagation Wemodelourdemand\u00addrivenanalysisoftheavailableprop\u00adertyasaquerypropagationproblem[11].Aqueryisatuple \n(st,setion),wherestisastatementorabasiblokand setionisanarraysetion.fortheindexarray.Givenanin\u00addexarrayandapropertytobeheked,aquery(st,setion) \nraisesthequestionwhethertheelementsoftheindexarray insetionalwayshavethedesiredpropertywhentheontrol \nreahesthepointafterst. .Anarraysetionanberepresentedasaonvexregion[29],anabstratdataaess[2,25],oraregularsetion[17]. \nOurmethodisorthogonaltotherepresentationofthear\u00adraysetion.Anyrepresentationanbeusedaslongasthe aggregationoperationusedinSet.3.2.5isdefned. \nAqueryispropagatedinthereversediretionoftheon\u00adtrolfowuntilitanbeverifedtobetrueora se.LetT(S)bethesetionofindexarrayelementstobeexam\u00adinedatstatementorbasiblokS,GEN(S)bethesetion \nofindexarrayelementspossessingthedesiredpropertybe\u00adauseoftheexeutionofS, (S)bethesetionofthe indexarrayelementsverifednottohavethepropertybe\u00adauseoftheexeutionofS,andN(S)bethesetionofthe \nindexarrayelementsthatannotbeverifedtopossessthe propertybyexaminingSand,thus,shouldbehekedagain atthepredeessorsofS.Thegeneraldatafowequationsfor \nthereversequerypropagationare T (S) . N (T), Ti.a.UC..orof N (S)  T (S).GEN(S) Foraquery(st,setion),initially,T(st)isetionandT(s)i0foranystatementorbasibloksotherthanst. \nIf,afterthepropagationfnishes,wehaveN(entry) i0, whereentryistheentrynodeoftheprogramontrolfow graph,orthereexistsastatementorbasiblokssuhthatT(s)n \n(s)i 0,thentheanswertotheoriginal queryisa se.Otherwisetheansweristrue. Ourapproahofmodelingademandforpropertyheking \nasasetofquerieswasinspiredbytheworkofE.Duester\u00adwaldetal.[11].Theyproposedageneralframeworkforde\u00advelopingdemand\u00addriveninterproeduraldatafowanalyzers. \nTheyuseaniterativemethodtopropagatethequeriesand anhandleonlysalars.Weuseastruturalanalysisand workonarrays,whihispossiblebeauseavailableproperty \nisaspeifdistributivedatafowproblem. 3.2 Demand-driven Interprocedural Array Property Analysis 3.2.1 \nOverview Werepresenttheprograminahierarhialontrolgraph (HCG),whihissimilartothehierarhialsupergraph[15]. \nEahstatement,loop,andproedureisrepresentedbya node,respetively.Therealsoisasetionnodeforeah loopbodyandeahproedurebody.Eahsetionnode \nhasasingleentrynodeandasingleexitnode.Weassume thattheonlyloopsintheprogramaredoloops,andwe deliberatelydeletethebakedgesintheontrolfowgraph. \nHene,theHCGisdiretedayli.Wealsoassumenopa\u00adrameterpassing,valuesarepassedbyglobalvariablesonly, andifonstantnumbersarepassedfromoneproedureto \nanother,thealleeisloned.Tehniquestohandleparame\u00adterbounding,arrayreshaping,andvariablealiasingarewell \nknownandanbefoundin[10,16,9,25].  Figure4:Theomponentsofarraypropertyanaly\u00adsis Method: QuerySolver(query,nroot) \nInput: 1)aqueryquery=(ninit,setinit) 2)arootnodenrootthatdominatesninit Output: (anykilled,setremain) \nBegin: 1 worklist:=0; 2 addu((ninit,setinit),worklist); 3 anykilled:=alse; 4 whileworklist =0do 5 removeanelement(n,set)fromtheworklist \n; 6 if(nisnroot)then 7 setremain:=set; 8 break; 9 endif 10 (anykilled,setremain):=QueryProp(n,set) ; \n11 if(anykilled)thenbreak; 12 if(setremain =0)then 13 foreahnodemEpred(n) 14 addu((m,setremain),worklist); \n15 endfor 16 endif 17 endwhile 18 return(anykilled,setremain); End Figure5:QuerySolver Ourdemand\u00addriveninterproeduralanalysismethodon\u00adsistsofthreeparts,asshowninFig.4.TheDemandGener\u00adator,whihisinorporatedintheanalysismethods,issues \naquerywhentheanalysisneedstoverifywhetheranin\u00addexarrayhasaertainpropertyataertainpoint.The QueryChekeraeptsthequeryandthenusesQuerySolver \ntotraversetheprograminthereversediretionoftheon\u00adtrolfowtoverifythequery.ItusesthePropertyChekerto gettheGENandKILLinformation. \n 3.2.2 QuerySolver ThemajoromponentofQueryChekerisQuerySolver,whih returnsatuple(anykilled,setionremain)whengivenaquery \n(nquery,setionquery)andarootnodenrootthatdominates nquery.Theanykilled,whihisaboolean,istrueifthe propertyofsomeelementinsetionquerymightbekilled \nwhentheprogramisexeutedfromnroottonquery.When anykilledisalse,setionremaingivesthearrayelements whosepropertiesareneithergeneratednorkilledfromnroot \ntonquery.Inordertohekiftheindexarrayelements insetionqueryatnodenqueryhavethedesiredproperty, QueryChekerinvokesQuerySolverwiththenrootbeing \ntheentrynodeofthewholeprogram.Ifanykilledistrue orifanykilledisalsebutsetionremainisnotempty,then weassumethattheindexarraydoesnothavethedesired \nproperty.Otherwise,ithasthedesiredproperty. Method: Q u ery P rop(n,setion) Input: Aquery(n,setion) Output: \n(anykilled,setionremain) Begin: 1 ( ill,G en ) := Summarize(n) ; 2 setionrem ain :=setion-Gen; 3 a n \ny k illed :=(( illnsetion) =0) ; 4 return(anykilled,setionremain); End Figure6:Ageneralframeworkofreversequery \npropagationQueryProp Figure5showsthealgorithmforQuerySolver.Aworklist whoseelementsarequeriesisused.Thealgorithmtakesa \nquery(n,set)outoftheworklist.Thequery(n,set)asks whetheranyarrayelementinsetanhavethedesiredprop\u00adertyimmediatelyaftertheexeutionofn.Thisisheked \nbyreversequerypropagationQueryProp.QueryPropre\u00adturnsatuple(anykilled,setremain),whihhasameaning thatissimilartothetuplereturnedbyQuerySolver.The \nanykilledissettotrueifthepropertyofoneormoreel\u00adementsinsetiskilledwhennisexeuted.Inthisase, theanswertotheoriginalqueryisalse;thus,nofurther \nanalysisisneededandthealgorithmreturns.Thisisan early\u00adtermination.Whenanykilledisfalse,newqueriesare \nonstrutedfromthesetremainandthepredeessorsofn andareinsertedintotheworklist.Thisproessrepeatsuntil theworklistbeomesemptyortherootnodeismet.The \nuseofaworklistmakesearly\u00adterminationpossible. Theworklistisapriorityqueue.Alltheelementsaresorted inreversetopologialorder(rTop)ofitsnodeintheontrol \nfowgraph(whih,asstatedabove,isaDAG).Therefore,a nodeisnothekeduntilallitssuessorshavebeenheked. Thisensuresthatthequerypresentedtoanodeisomposed \nofthequeriespropagatedbyitssuessors. Queriesareinsertedintothelistbyusingaddu().Theop\u00aderationaddop(),whereopanbeeithernorU,isdefned \nasfollows:ifthereexistsaquery(n,setion')inthework\u00adlist,thenreplae(n,setion')with(n,setionopsetion'); \notherwise,insert(n,setion)intotheorklistaordingto therToporder.  3.2.3 Reverse Query Propagation Coneptually,reversequerypropagationQueryPropom\u00adputesN(setionremain)fromT(setion),GENand \n.Figure6showsageneralframeworkofQueryProp. Coneptually,reversequerypropagationQueryPropom\u00adputesNfromT,GENand \n.Figure6shows ageneralframeworkofQueryProp.TheQueryPropuses Summarizetosummarizetheefetofexeutinganode. \nTheefetofexeutingastatementanberepresentedby the(ill,Gen)tuple. TheillandGenevaluatedbythesummarizationmethod \nareoftenapproximatevalues.Therearetworeasonsfor this.First,theindexarraymaybeassignedvariableswhose valuesorrelationshipswithothervariablesannotbede\u00adterminedbytheompiler;therefore,thesetionofthear\u00adrayelementsbeingaessedannotberepresentedpreisely. \n a..statement,3)nisa...statement,4)nisa proedurehead,and5)otherwise. new_section= [1:n-1] new_section= \nf query query property: st1 a(n) = n*(n-1)/2 st2 a(i) = i*(i-1)/2  section = [1:n] section = [1:n] \nquery query Figure8:Anexampleofsimplereversequeryprop\u00adagation Seond,thesummarizationmethodworksonarraysetions, \nbutthesetoperationsbeingusedusuallyarenotlosedon themostpopularsetionrepresentations.Hene,theresults \nanbeonlyapproximated.Inordernottoauseinorret transformations,theapproximationmustbeonservative.illisaMAYapproximationandGenisaMUSTapprox\u00adimation.Intheworstase,illanbetheuniversalsetion \n[-0,0]andGenanbe0. TheSummarymethodanonlybeappliedtostatementsor basibloks.Infat,therearefvediferentlassesofnode, \nasillustratedinFigure7.Eahasehastobehandledbya diferentreversequerypropagationmethodasdesribedin thenextthreeSubsetions. \n 3.2.4 Simple Reverse Query Propagation Inase5,thenodenisastatementotherthana..state\u00adment,adonode,a...statement,oraproedurehead.In \nthisase,theefetofexeutingnodenanbederivedby examiningnalone.QueryPropsimpleusesthesameframe\u00adworkasQueryPropinFigure6withSummarizebeingre\u00adplaedbySummarizeSimpleNode,whihalsoistheinter\u00adfaebetweentheQuerySolverandthePropertyCheker(see \nSet.3.2.8). .......1.InFigure8,statementsst1andst2aresim\u00adpleassignmentsofarraya().Thepropertytobehekedis \na(i)=i*(i-1)/2.Hene, SummarizeSimpleNode(st1)=(ill=0,Gen=[n:n]) SummarizeSimpleNode(st2)=(ill=[1:1],Gen=0) \nThus,afterthepropagation,forstatementst1wehave: anykilled=false,setionremain=[1:n-1]. And,forstatementst2wehave: \nanykilled=true,setionremain=0. Method:SummarizeProgSetion(n) Input:Asetionnoden Output:(Kill,Gen) Begin: \n1Letnenhrybetheentrynodeofsetionnand letnexihbetheexitnodeofsetionn. 2Gen:=0; 3Kill:=0; 4 orkList:=0; \n5addn((nexih,0), orklist); 6while orkList= 0do 7takeanelement(n,gent)outofthe orklist; 8if(n=nenhry)then \n9 Gen:=gent; 10break; 11endif 12beginase 13asenisa...statement: 14 (kill,gen):=SummarizeProedure(n); \n15asenisadonode: 16 (kill,gen):=SummarizeLoop(n); 17otherwise: 18 (kill,gen):=SummarizeSimpleNode(n); \n19endase t 20if(ndominatesnexih)Gen:=gen; 21if(kill=-0,0 )then 22 Kill:=kill; 23break; 24endif 25Kill:=KillU(kill-gent); \n26foreahmEpred(n) 27 addn((m,gentUgen), orkList); 28endfor 29endwhile 30return(Kill,Gen); End Figure9:SummarizeProgSetion \n 3.2.5 Loop Analysis Cases1and2dealwithloops.Arraydatafowanalysisisdif\u00adferentfromsalaranalysisbeausediferentarrayelements \nmightbeaessedindiferentiterationsofaloop,while thesamesetofsalarsareusuallyaessedinalliterations. Tosummarizetheefetoftheloops,aggregationmethods \nsuhasthoseproposedbyGrossandSteenkiste[14](for onedimensionalarrays)andbyGuetal.[15](formulti\u00adpledimensionalarrays)anbeusedtoaggregatethearray \naess. Givenanarraysetion,setioni,expressedintermsofin\u00addexi,aggregatelow.i.up(setioni)omputesthesetionob\u00adtainedbyaggregatingsetioniwithirangingfromlo \nto up. Inase1,theinitialqueryomesfromoutsidetheloop. Likethesimplenodease,theframeworkinFigure6anbe used.Theonlydifereneisthatwesummarizetheefet \nofexeutingthewholeloopratherthanasinglestatement. Let(illi,Geni)betheefetofexeutingtheloopbody, upbetheupperboundofloopm,andlo \nbethelower boundofloopm.Then, Kill Aggregatelow.;.up(Kill;) Gen Aggregatelow.;.up(Gen;.Aggregate;+l.j.up(Killj)) \n Method:QueryProPdoheader(m,set) Input:Aquery(m,set),wheremisanodeof ..statementnode Output:(anykilled,setremain) \nBegin: 1Letnbethesetionnodeoftheloopbody,and assumenrepresentstheithiterationoftheloop; 2(illi,Geni):=SummarizeProgSetion(n); \n3LetuPbetheupperboundofloop,andlo bethe lowerboundofloop; 4if(setnAggregatelow<j<(i_l)(illj) =0)then \n5return(true,0); 6endif 7setremaini:=set-Aggregatelow<j<(i_l)(Genj); 8setremain:=Aggregatelow<i<up(setremaini); \n9return(false,setremain); End Figure10:QueryPropdoheader WhenillandGenareomputed,thedatafowequations \nanbeapplied. (illi,Geni)isomputedbyusingtheSummarizeProgSedion methodshowninFig.9.Itomputestheefetofexeuting \nasetionbyreversepropagationoftheillandGenset fromtheexitnodetotheentrynode.Italsousesawork\u00adlistsimilartotheoneusedinQuerySolver.Theelements \n(n,gen)intheworklist,however,arenotquerieshere.The genisthesetionofarrayelementsthathavebeengener\u00adatedbeauseoftheexeutionoftheprogramfromtheexit \nofnodentotheexitofthesetion.Anotherdifereneis thatelementsareinsertedintotheworklistbyusingaddn insteadofaddu.Theefetofasetionalsoouldbeom\u00adputedintheforwarddiretion.Weuseabakwardmethod \nherebeauseitismoree\u00c6ient.Itanearly\u00adterminateone thekillinformationisover\u00adapproximatedtobetheuniversal \nsetion(lines21\u00ad24). SummarizeProgSedionusesSummarizeSimpleNode,Sum\u00admarizeProedure,andSummarizeLoopreursivelydepend\u00adingonthetypeofstatementsusedintheloopbody[20]. \nSummarizeProeduresummarizestheefetofallingapro\u00adedure.Withoutonsideringparameterboundings,Summa\u00adrizeProedureanbeomputedbyusingSummarizeProgSe\u00adtiononthebodyoftheproedurebeingalled. \n Inase2,theinitialqueryomesfromoneiterationofthe loop,sayiterationI.Themethodissomewhatmoreom\u00adpliatedthantheframeworkofFigure6.Whentheloop \nheaderisfound,asummarizationismadeofiterationspre\u00adedingiterationI.Itisusedtoomputethenewquery setionorrespondingtooneiteration,whihshouldthen \nbeaggregatedinordertogetthequerysetionforthepre\u00addeessorsoftheloop.ThemethodQueryProploopheaderis showninFigure10. \n 3.2.6 Interprocedural Analysis Theinterproeduralreversequerypropagationalsoinvolves twoases(i.e.,ases3and4inFigure7). \nInase3,thenodenisaallstatement.Weonstruta newqueryproblemwiththeinitialquerynodebeingtheexit nodeofthealleeandtherootnodebeingtheentrynode \n  procedure proc node root ...  QuerySolver((node ,section ),node )exit node init init query root \nsection query Figure11:ReusingQuerySolverforQueryPropproall procedure pa procedure pc call pd call \npd end end Figure12:Querysplitting ofthealler,asillustratedinFigure11.AQuerySolveris usedtopropagatethequery.TheQuerySolverwillearly\u00adterminatewhenanyarrayelementinquerysetionisfound \nnottohavethedesiredpropertyorallofthemarefound tohavetheproperty.Noteinthisase,theQuerySolver alwaysterminateswhentheheaderofthealleeisreahed. \nInase4,thenodenistheheaderofaproedure.Ifnis nottheprogramentry,thenthequerywillbepropagated intotheallersofthisproedure.Weuseaquerysplitting \nmethodillustratedinFigure12. Supposethepropertyqueryattheentrynodenofapro\u00adedureprois(n,sedquery),andtheallsitesofproare \nnl,n,n, ,andnm.Ifnistheprogramentry,thenthear\u00ad 23 rayelementsinsedqueryarenotgeneratedinthisprogram and.Asaresult,ifsedqueryisnot0,thepropertyanaly\u00adsisterminatewiththeanswerbeingfalse.Ifnisnotthe \nprogramentry,thequeryissplitintomsub\u00adqueries,eah ofwhihhasasetofinitialqueriesas{(n',sedquery)In'E pred(ni)}.Theoriginalqueryhasadrueresultwhenallthe \nsub\u00adqueriesterminatewithadrueresult.Otherwise,the initialqueryhasafalseresult. Ofthethreemajoromponentsofarraypropertyanalysis, \ntheQueryChekerisagenerimethod,whiletheQuery\u00adGeneratorandthePropertyChekerarespeiftothebase problem,suhasdependenetestsorprivatizationtests,and \nspeiftothepotentialpropertythearrayislikelytohold. Inthenexttwosub\u00adsetions,weuseadatadependenetest problemtoillustratehowtoonstrutaQueryGenerator \nandaPropertyCheker.  3.2.7 Generating Demands Anewdependenetest,alledtheoffet\u00adlengthtest[20], hasbeendesignedtodisprovedatadependenesinloops \nwhereindiretlyaessedarraysarepresentandtheindex arraysareusedasofsetarraysandlengtharrays,suhas theoffset0 \nandthelength0 inFig.3.Theoffet\u00adlength testneedsarraypropertyanalysistoverifytherelationship betweentheoffetarraysandthelengtharrays.Therefore, \ntheoffet\u00adlengthtestservesasaquerygenerator. Wetestwhetheradatadependeneexistsbetweentwoarray aessesa(f())anda(g())withadependenediretionve\u00ad \n so:doi=1,n doj=2,iblen(i) dok=1,j-1 s1: x(pptr(i)+k-1)= enddo enddo doj=1,iblen(i)-1 dok=1,j s2: =x(iblen(i)+pptr(i)+k-j-1) \nenddo enddo enddo Figure13:AloopformDYFESM torO=.,=.,...,=t.., =t,*,...,*))inaloopnest.Weassume thattheindexarraysintheloopnestOinludingarraysin \ntheloopbounds)arearrayswhosesubsriptsareexpressions oftheindiesofthetoutermostloop. WefrstomputetherangesofvaluesoffOi,...,it,*,...,*) \n. andgOi,...,it,*,...,*)wheni.,i,...,itarekeptfxed.Be\u00ad . . ausetheindexarraysarearraysofonlytheoutermostt \nloops,theloopindiesi.,i.,...,itandtheindexarraysan betreatedassymbolitermsintherangeomputation.If, exeptfortheindexarrays,fO)orgO)isana\u00c6nefuntionof \ntheloopindies,therangeanbealulatedbysubstituting theloopindieswiththeirappropriateloopbounds,aswith Banerjee'stest[3].Otherwise,therangesanbealulated \nwiththemethodusedinsomenonlineardatadependene tests,suhastherangetest[8]. IftherangesoffOi.,...,it,*,...,*)andgOi.,...,it,*,...,*)an \nberepresentedas[xOit)flow,xOit)yOit)fup]and [xOit)glow,xOit)yOit)gup],respetively,wherexO) andyO)aretwoindexarrays,and \nflow=eOi.,...,it..).,fup=eOi.,...,it..)-d., glow=eOi.,...,it..).,gup=eOi.,...,it..)-d., eOi.,...,it)isanexpressionofindiesi,i.,...,it..and \n.. . indexarraysoftheoutermostt-1loops,and.and . aresomenon\u00adnegativeintegers,dandd.aresomeposi\u00ad . tiveintegers,thenthereisnolooparrieddependenebe\u00adtweenthetwoarrayaessesifindexarrayxO)hasalosed\u00adformdistaneyO)andthevaluesofyO)arenon\u00adnegative. \nIntuitively,thereisnodependenebeausetherangeof fOi.,...,it,*,...,*)doesnotoverlapwiththerangesoffOi.,..., \nit\u00b1k,*,...,*)andgOi.,....,it\u00b1k,*,...,*)forkO. .......2.Figure13showsaloopnestexerptedfrom thesubroutineSOLXDDofPerfetBenhmarkodeDYFESM. \nWewanttohekifthereisanyloop-arrieddependene betweenstatementst1andstatementst2fortheoutermost loopdoi. \n Here,fOi,j,k)=pptrOi)k-1andgOi,j,k)=iblenOi) pptrOi)k-j-1.Bysubstitutingtheloopindieswith theloopbounds,weanomputetherangesoffO)andgO) \nwheniisfxed,whihare[pptrOi),pptrOi)iblenOi)-2]and [pptrOi)1,pptrOi)iblenOi)-1],respetively.IfpptrO) hasalosed-formdistaneofiblenO),whihisnon-negative, \nthenfortheoutermostloopsOthereisnofow-dependene froms1tos2,noanti-dependenefroms2tos1,andno output-dependenefroms1tos1. \n 3.2.8 Checking Properties Givenapropertytobeverifedandanassignmentstate\u00adment,thepropertyhekerPropertyChekerhekswhether \ntheassignmentwillauseanyarrayelementstobegener\u00adatedorkilled.Inthissubsetion,weshowhowtousea simplepatternmathingtehniquetohekthelosed-form \ndistane. Supposethegivenpropertytobeverifedis x(i1) x(i)y(i),for1:i:n-1. ThePropertyChekerantakethefollowingstepstoin\u00adspetanassignmentstatement. \n1.Iftheleft\u00adhandsideOLHS)oftheassignmentisnei\u00adtherthearrayxO)northearrayyO),thennothingis generatedorkilled. \n2.IftheLHSisanarrayelementxOi),thentheassign\u00admentandtheotherstatementsinthesurroundingloops arehekedtoseeiftheymathanyofthefollowing \ntwopatternsshownbelow.Ifnot,thenallelementsof xO)arekilled.Otherwise,xOi)isgenerated. t= x(1)= doi=1,n \ndoi=2,n x(i)=t x(i)=x(i-1)+y(i-1) t=t+y(i) enddo enddo (a) (b) 3.OtherwiseOthisinludestheasewhentheLHSisan \narrayelementofyO)andtheasewhentheLHSisan arrayelementofxO)butthesubsriptisnotasimple index),allelementsofxO)arekilled. \nIngeneral,thelosed-formdistaneanbedetetedbyusing abstratinterpretation,suhasthereurrenereognition methodproposedbyZ.AmmarguellatandW.Harrison[1]. \nComparedwithabstratinterpretation,ourpatternmath\u00adingmethodissimplerand,thus,onservative.However,we foundourmethodtobeveryefetiveinpratie. \n4. USING IRREGULAR SINGLE-INDEXED ARRAY ACCESS ANALYSIS TO CHECK PROPERTIES ArraypropertyanalysisusesPropChekertoexaminethe \nreahingdefnitionsitesanddeterminewhetheranarrayhas thepropertiesinthequery.ConstrutingthePropCheker isfailitatedbythefatthat,inrealprograms,indexar\u00adraysthathaveompiler\u00addetetablepropertiesusuallyhave \nafewfxeddefnitionpatterns.Oftentimes,simplepattern mathingmethodsliketheonespresentedintheprevious setionsu\u00c6e.Ontheotherhand,theanalysisisompli\u00adatedbythefatthattheaessesofindexarraysinthe \ndefnitionloopsareusuallyirregularand,therefore,tradi\u00adtionalarrayanalysismethodsannotbeused.Theirregu\u00adlarsingle\u00adindexedarrayaessanalysismethoddisussedin \nSet.2anbeusedtodealwiththisase. Twousefulkeypropertiesofindexarraysareinjetivityand havinglosed-formbounds.Detetingwhetheranarrayse\u00adtionhasanyofthetwopropertiesisdi\u00c6ultingeneral. \n dok=1,n q=0 doi=1,p if(x(i)>0)then q=q 1 ind(q)=i endif enddo doj=1,q jj=ind(j) z(k,jj)=x(jj)*y(jj) \nenddo enddo Figure14:Anexampleofaloopwithaninnerindex gatheringloop However,inmanyases,weonlyneedtohekwhetherthe \narraysetionisdefnedinanindexgatheringloop,suhas theloopdoiinFig.14.Inthisexample,theindiesofthe positiveelementsofarrayxO)aregatheredinarrayindO). \nAfterthegatheringloopisexeuted,allthearrayelements insetionx[1:q]aredefned,thevaluesofthearrayele\u00admentsinarraysetionx[1:q]areinjetive,andthelower \nboundofthevaluesofthearrayelementsinsetionx[1:q] is1andtheupperboundisp. Withthisinformationavailableatompile\u00adtime,theom\u00adpilernowisabletodeterminethatthereisnodatadepen\u00addeneinloopdojandarrayindO)anbeprivatizedinloop \ndok.Thus,theompileranhooseeithertoparallelize loopdokonly,parallelizeloopdojonly,parallelizeboth, orparallelizeloopdokandvetorizeloopdoj,depending \nuponthearhitetureonwhihtheoderuns. Anindexgatheringloopforanindexarrayhasthefollowing harateristis:1)theloopisadoloop,2)theindexarrayis \nsingle\u00adindexedintheloop,3)theindexarrayisonseutively writtenintheloop,4)theright\u00adhand\u00adsideofanyassignment \noftheindexarrayistheloopindex,and5)oneassignment oftheindexarrayannotreahanotherassignmentofthe indexarraywithoutfrstreahingthedoloopheader.The \nfourthonditionaboveensuresthatthesameloopindex valueisnotassignedtwietotheelementsoftheindexarray. ThisonditionanbeverifedbyusingabDFS. \nAfteranindexgatheringloop,thevaluesassignedtothein\u00addexarrayintheloopareinjetive,andtherangeoftheval\u00aduesassignedisboundedbytherangeofthedoloopbound. \n5. IMPLEMENTATION AND EXPERIMEN-TAL RESULTS Compile\u00adtimeanalysisofirregularmemoryaessesanen\u00adabledeeperanalysisinmanypartsofanoptimizingom\u00adpiler.Toevaluateitsefetiveness,wemeasureditsimpat \ninfndingmoreimpliitparallelism.Inthissetion,wede\u00adsribetheimplementationoftheirregularsingle\u00adindexedar\u00adrayanalysisandtheimplementationofthedemand\u00addriven \ninterproeduralarraypropertyanalysisinthePolarisparal\u00adlelizingompiler[6].Wealsoshowtheimpatofourteh\u00adniquesontheparallelizationoffvebenhmarkprograms. \n  5.1 Implementation 5.1.1 Reorganization of the Phases in Polaris sanner; inlining; interproeduralonstant \nsanner; propagation; inlining; foreahprogramunitdo interproeduralonstant programnormalization; propagation; \nindutionvariablesub\u00ad foreahprogramunitdo stitution; programnormalization; onstantpropagation; indutionvariablesub\u00adforwardsubstitution; \nstitution; deadodeelimination; onstantpropagation; enddo forwardsubstitution; foreahprogramunitdo deadodeelimination; \nprivatization; privatization; enddo redutionreognition; foreahprogramunitdo datadependenetest; redutionreognition; \nenddo enddo postpass; foreahprogramunitdo datadependenetest; enddo postpass (a)before (b)after Figure15:ReorganizationofthephasesinPolaris \nThehigh\u00adlevelstrutureoftheoriginalPolarisompileris showninFigure15Oa).Exeptfortheinliningandinterpro\u00adeduralonstantpropagation,allotherphasesareintrapro\u00adedural.Foreahprogramunit,Polarisperformsasequene \nofanalysesandtransformationsinorder.Thisstrutureis goodfordataloalityand,therefore,goodforthee\u00c6ieny ofPolaris.Thisorganizationisnotappropriateforinter\u00adproeduralarraypropertyanalysis.Itisbettertoapply \nthesamesetoftransformationstoallprogramunitsbefore theanalysisstarts.We,therefore,reorganizethephasesin \nPolarisasshowninFigure15Ob).This\"loopdistribution\" reorganizationispossiblebeauseofthemodularityofthe \nphasesimplementedinPolaris. Wedidnotremovetheinliningphasebeausemostanalyses inPolariswerenotinterproeduralandreliedoninliningto \nproduepreiseresults.Weusedthedefaultautoinlining funtioninPolaris,whihinlinesproeduresthatontainno I/Ostatementsandontainlessthanfftylinesofode.Be\u00adausenotallproeduresareinlined,theinterproeduralpart \nofourarraypropertyanalysisisstillrequiredandprovedto beuseful.  5.1.2 Single-indexed Array Access Analysis \nSingle\u00adindexedarrayaessanalysiswasimplementedintwo diferentplaes.Onewasinthearrayprivatizationphaseto \nfndonseutively\u00adwrittenarraysandtherangesofthearray elementsbeingwritten.TheotherwasinthePropetyCheker \nparttodetetthepropertiesofinjetivityandhavinglosed\u00adformbounds. 5.1.3 Array Property Analysis as a Demand-driven \nTool Arraypropertyanalysisisnotastand\u00adalonephase.Itis implementedasanindependenttoolthatanbeinvokedon \ndemand. Thearraypropertyanalysesthathekdiferentproper\u00adtiesareimplementedasdiferentsublassesofaommon PropertySolverlasswhihrealizesthepropertyindepen\u00addentQuerySolverdisussedinSetion3.2.2.Thesublasses \n implementthepropertydependentparts,suhastheProp\u00adertyCheker.Whenanarraypropertyistobeheked,an objetofoneofthesublassesisreated,arraysetionsin \nthequeryarepassedtotheobjet,andthentheanalysisis invoked. InPolaris,thearraypropertyanalysisisusedinthepriva\u00adtizationphaseandinthedatadependenetestphase. \n 5.1.4 Array Privatization TheprivatizationphaseinPolarisprivatizesarrayswhose upwardexposedreadsetsineahiterationareempty[30]. \nToomputetheupwardexposedreadset,thesetsofarray elementsthatarereadorwrittenbyeahstatementare alulated.Asetofarrayelementsisrepresentedasan \narraysetion.Toapproximateinthesafediretion,aread setionanbeasupersetofitsorrespondingrealreadset, andawritesetionanbeasubsetofitsorrespondingreal \nwriteset. Intheoriginaldesign,thearraysubsriptsmustbelinear expressionsandthesurroundingloopsmustbeloops. \n..Thearrayaessesannotbeirregular;otherwise,theread sethasbetoapproximatedto[-0,0],andthewriteset to0. \nWeextendedtheomputationmethodfortheread/write setionssothatitanhandletheonseutively\u00adaessedar\u00adraysandsimpleindiretly\u00adaessedarrays.Themethods \ndesribedin[22]areusedtogettherangesoftheindex variablesinonseutively\u00adaessedarrays.Forthesimple indiretly\u00adaessedarrays,arraypropertyanalysisisused \ntoverifytheboundsoftheindexarrays.Asetofindiretly\u00adreadarrayelementsnowanbeapproximatelyrepresented inarraysetions.Forexample,{a(p(i))11:i:n}isap\u00adproximatedtoa[ \n :high],where =min(p(i))and high=max(p(i))for(1:i:n).Althoughthisapproxi\u00admationworksforreadsetsonly,ithasproventobeuseful \ninourexperiments. 5.1.5 Data Dependence Test AnimportantdatadependenetestusedinPolarisisthe rangeteft[8],whihisasymbolidatadependenetest \nthatanidentifyparallelloopsinthepreseneofertain nonlineararraysubsriptsandloopbounds. Weextendedtherangetestsothatitouldfuntionlike \ntheoffet-lengthtest(disussedinSetion3.2.7)whenthe indexarrayswereusedasofsetsandlength.Wefoundthe rangetestanaturalplaetoinorporatetheofset\u00adlength \ntestbeauseitalsoomputedthesymbolirangeofsub\u00adsriptexpressionswhihwereusedintheofset\u00adlengthtest. Wealsoimplementedastand\u00adalonefimpleoffet-lengthtest \nthattestedthesubsriptsoftheform\"a(ptr(i)+j),.Itould beusedwhentheuserwantedtoavoidtheoverheadofthe extendedrangetest,thoughitwaslessgeneral.Aninje\u00adtivetestwasalsoaddedfortheasewhenthesubsriptwas \nasimpleindexarraylike\"a(p(i)),.Alltheextendedand newlyaddedtestsneedpropertyanalysisofindexarrays.  \n 5.2 Experimental Results Table2showsthefveprogramsusedinourexperiments. TRFD,BDNAandDYFESMarefromthePerfetBenh\u00admarksuite.P3Misapartile\u00admeshprogramfromNCSA. \nTREEisaBarnes\u00adHutN\u00adbodyprogramfromtheUniver\u00adsityofHawaii[4].Theompilationtimeoftheprograms usingPolarisislistedinolumnfour.Thearrayproperty \nanalysisinreasestheompilationtimeby4.5%to10.9%3. ThesedataweremeasuredonaSunEnterprise4250Server withfour248MHzUltraSPARC\u00adIIproessors.Thesequen\u00adtialexeutiontimeoftheseprograms(measuredonanSGI \nOrigin2000withffty\u00adsix195MHzR10kproessors)islisted inolumnthree. Table3showstheanalysisresults.Columntwoshowsthe \nloopswithirregulararrayaessesthatanbeanalyzedby Polarisnow.Theloopswitha\"*,arethenewlyparallelized loops.Theloopswithouta\"*,arenotparallelized,buttheir \nanalysisresultsareusedtohelpparallelizetheloopswitha \"*,.Thepropertiesoftheirregulararrayaessesarelisted \ninolumnsfveandeight.Columnnineshowstheteststhat wereusedasthequerygeneratorsinthearraypropertyanal\u00adysis.Columntenshowstheperentageoftotalsequential \nprogramexeutiontime(ontheOrigin2000)aountableto theloopsinolumntwo.And,olumnelevenshowstheper\u00adentageoftotalparallelprogramexeutiontimeaountable \ntotheseloopsiftheloopswerenotparallelized(thenumber afterthe%signisthenumberofproessorsused).Oneto thirty\u00adtwoproessorswereused. \nFigure16showsthespeedupsoftheseprograms.Weom\u00adparethespeedupsoftheprogramsparallelizedbyPolaris, withandwithoutirregulararrayaessanalysis,andthe \nprogramsompiledusingtheautomatiparallelizerprovided bySGI.DYFESMusedatinyinputdatasetandsufered fromtheoverheadintroduedbyparallelization.Theperfor\u00admaneofallthreeversionsworsenedwhenmultipleproes\u00adsorswereused(Fig.16(e)).Wealsomeasuredspeedupson \naslowerSGIChallengemahine(four200MHzR4400Pro\u00adessors),andgotaspeedupof1.6(fourproessors)when theextraloopswereparallelized(Fig.16(f)).LoopINT\u00adGRL/do140inTRFDaountedforonly5%ofthetotal \nsequentialexeutiontime.However,parallelizingitstillin\u00adreasedthespeedupsfromfvetosixwhen16proessors wereused(Fig.16(a)).ForBDNA,P3MandTREE,the \nspeedupsimprovedsignifantly.  6. CONCLUSION Irregulararrayaessesarearrayaessesthatdonothave losed\u00adformexpressionsofarraysubsripts.Traditionalloop \nandarrayanalysismethodsannothandleirregulararraya\u00adesses,andmanyodesareleftunoptimized.Inthispaper, wepresentedsimpleandefetivetehniquestoanalyzetwo \nommonasesofirregularaesses:irregularsingle\u00adindexed aessesandsimpleindiretarrayaesses.Wealsoshowed howtousetheresultsoftheseanalysestoenhaneother \nanalysesandoptimizations.Wedemonstratedtheirefe\u00adtivenessbymeasuringtheirimpatinfndingmoreimpliit loopparallelism.Ninemoreloopsinfveprogramswere \nfoundparallel,andthespeedupsoffourprogramsinreased onsiderablyaftertheseloopswereparallelized. Thetehniqueswepresentedarenotsilverbullets.They \narebasedontheobservationthat,inrealprograms,irregular 3ThedataofP3MisforsubroutinePPonly.   Lines ofCodes \n (SGIOrigin2000) Program Analysis % TRFD 380 4.4s 181.3s 8.1s 4.5% DYFESM 7650 3.2s 302.3s 19.4s 6.4% \nBDNA 4896 9.7s 465.7s 31.2s 6.7% P3M. 2414 355.8s 73.1s 8.0s 10.9% TREE 1553 8.3s 25.7 1.71 6.7%   \n  Table2:CompilationtimeusingPolaris.Thefourtholumnshowsthewholeprogramompilationtime. Thefftholumnisthetimespentinarraypropertyanalysis. \n    Single-indexedAess IndiretlyArrayAess ProgramLoops  ArrayIndexPropertyHostIndexPropertyTest %___ \n%___    TRFDINTGRL/do140* - - - x ia CFV DD 5% 24%32  DYFESMSOLXDD/do4*---xdd,zpptr,CFDDD20%7%8 \nSOLXDD/do10* r,y iblen SOLXDD/do30* z SOLXDD/do50* xdd HOP/do20* xdplus, xplus,xd   BDNAACTFOR/do240* \n- - - xdt ind CFB PRIV 32% 63%32  ACTFOR/do 236indlCW------     P3MPP/do100* - - - x0,ind0 jpr \nCFB PRIV 74% 76%8 r2,ind  PP/goto10ind0,x0np0CW-----\u00adPP/do50 ind0,x0np0 CW PP/do57 jprnprCW    \n  TREEACCEL/do10* stak sptr STACK - - - - 90% 90%32 Table3:Programsusedinourexperiment.CW\u00adlosed-formvalue,CFB-losed-formbound,CFD\u00addatadependenetest. \narrayaessoftenfollowsafewfxedpatternsandhavegood properties.Thesetehniquesanbeusedtogetherwithuser assertionsandrun-timeteststoprovideompletesupportto \noptimizeodeswithirregularmemoryaesses. AknowledgmentsWewishtothanktheanonymousreferees fortheirmanyusefulommentsandsuggestions.Thisworkissup\u00adportedinpartbyArmyontratDABT63-95-C-0097;Armyontrat \nN66001-97-C-8532;NSFontratNSFACI98-70687;andaPartner\u00adshipAwardfromIBM.Thisworkisnotneessarilyrepresentativeof \nthepositionsorpoliiesoftheArmyorGovernment.Thisworkalso waspartiallysupportedbyNationalComputationalSieneAlliane \nandutilizedtheNCSASGIOrigin2000.  7. REFERENCES [1]Z.AmmarguellatandW.L.Harrison,III.Automati reognitionofindutionvariablesandreurrenerelationsby \nabstratinterpretation.InPLDI'90,pages283-295,NY,June 1990. [2]V.BalasundaramandK.Kennedy.Atehniquefor \nsummarizingdataaessanditsuseinparallelism-enhaning transformations.InPLDI'89,pages41-53,Portland,OR,June \n1989. [3]U.Banerjee.Datadependeneinordinaryprograms.Master's thesis,Dept.ofComputerSiene,UniversityofIllinoisat \nUrbana-Champaign,November1976.ReportNo.76-837. [4]J.Barnes.ftp://hubble.ifa.hawaii.edu/pub/barnes/treeode/. \nTehnialreport,InstituteforAstronomy,UniversityofHawaii, 1994. [5]W.Blume.Symbolianalysistehniquesforefetive \nautomatiparallelization.PhDthesis,UniversityofIllinoisat Urbana-Champaign,June1995.  onseutivelywritten,STACK-stakaess,CFV\u00adlosed-formdistane,PRIV-privatizationtest,DD\u00ad \n[6]W.Blume,R.Doallo,R.Eigenmann,J.Grout,J.Hoefinger, T.Lawrene,J.Lee,D.Padua,Y.Paek,B.Pottenger, L.Rauhwerger,andP.Tu.Parallelprogrammingwithpolaris. \nIEEEComputer,29(12):78-82,Deember1996. [7]W.BlumeandR.Eigenmann.Anoverviewofsymbolianalysis tehniquesneededfortheefetiveparallelizationoftheperfet \nbenhmarks.InProeedingsofthe23rdInternational ConfereneonParallelProessing.Volume2:Software,pages 233-238,BoaRaton,FL,August1994.CRCPress. \n[8]W.BlumeandR.Eigenmann.Therangetest:Adependene testforsymboli,non-linearexpressions.InProeedingsofthe \nConfereneonSuperomputing,pages528-537,LosAlamitos, November1994.IEEEComputerSoietyPress. [9]D.CallahanandK.Kennedy.Analysisofinterproeduralside \nefetsinaparallelprogrammingenvironment.Journalof ParallelandDistributedComputing,5(5):517-550,Otober \n1988. [10]B.CreusilletandF.Irigoin.Interproeduralarrayregion analysis.InProeedingsofthe8thInternationalWorkshopon \nLanguagesandCompilersforParallelComputing(LCPC'95), volume103ofLetureNotesinComputerSiene,pages 46-60.OhioStateUniversity,Colombus(Ohio),August1996. \n[11]E.Duesterwald,R.Gupta,andM.Sofa.Apratialframework fordemand-driveninterproeduraldatafowanalysis.ACM \nTransationsonProgrammingLanguagesandSystems, 19(6):992-1030,November1997. [12]P.Feautrier.Arrayexpansion.InProeedingsoftheSeond \nInternationalConfereneonSuperomputing,St.Malo, Frane,July1988. [13]M.Gerlek,E.Stoltz,andM.Wolfe.Beyondindution \nvariables:Detetingandlassifyingsequenesusinga demand-drivenSSAform.ACMTransationsonProgramming LanguagesandSystems,17(1):85-122,January1995. \n[14]T.GrossandP.Steenkiste.Strutureddatafowanalysisfor arraysanditsuseinanoptimizingompiler.SoftwarePratie \nandExperiene,20(2):133-155,February1990. 7 6 5 4 Speedups 3 2 3    1.5 1.5 Speedups 1.5 1 1 0.5 \n0.5 0 0 0 Number of Processors Number of Processors Number of Processors (d) (e) (f) Figure16:Speedups:IAA-irregulararrayaessanalysis,APO-usingtheautomatiparallelizationoption \nintheSGIF77ompiler [15]J.Gu,Z.Li,andG.Lee.Symboliarraydatafowanalysisfor arrayprivatizationandprogramparallelization.InProeedings \nofthe1995SuperomputingConferene,SanDiego,CA, 1995. [16]M.Hall,S.Amarasinghe,B.Murphy,S.Liao,andM.Lam. \nDetetingoarse.grainparallelismusinganinterproedural parallelizingompiler.InProeedingsofthe1995 SuperomputingConferene,SanDiego,CA,1995. \n[17]P.Havlak.InterproeduralSymbolianalysis.PhDthesis,Rie University,May1994. [18]K.Kennedy,K.S.MKinley,andC..W.Tseng.Analysisand \ntransformationintheParaSopeEditor.InProeedingsofthe 1991ACMInternationalConfereneonSuperomputing, pages433-447,Cologne,Germany,June1991. \n[19]Z.Li.Arrayprivatizationforparallelexeutionofloops.In Proeedingsof1992InternationalConfereneon Superomputing,DC,pages313-322,1992. \n[20]Y.Lin.Compileranalysisofsparseandirregular omputations.PhDthesis,UniversityofIllinoisat Urbana.Champaign,May2000. \n[21]Y.LinandD.Padua.Ontheautomatiparallelizationof sparseandirregularfortranprograms.InPro.of4th WorkshoponLanguages,Compilers,andRun\u00b7timeSystems \nforSalableComputers(LCR'98),volume1511ofLeture NotesinComputerSiene,pages41-56.Springer.Verlag, Pittsburgh,PA,1998. \n[22]Y.LinandD.Padua.Analysisofirregularsingle.indexedarray aessesanditsappliationsinompileroptimizations.In \nProeedingsofthe9thInternationalConfereneonCompiler Constrution,Berlin,Marh2000. [23]D.Maydan,S.Amarasinghe,andM.Lam.Array.datafow \nanalysisanditsuseinarrayprivatization.InProeedingsof theTwentiethAnnualACMSymposiumonPriniplesof ProgrammingLanguages,Charleston,SouthCarolina,pages \n2-15,January1993. [24]K.MKinley.Dependeneanalysisofarrayssubsriptedby indexarrays.TehnialReportTR91.162,Dept.ofComputer \nSiene,RieUniversity,June1991. [25]Y.Paek,J.Hoefinger,andD.Padua.Simplifationofarray aesspatternsforompileroptimizations.InPLDI'98,pages \n60-71,Montreal,Canada,June1998. [26]L.Rauhwerger.Run\u00b7timeparallelization:aframeworkfor parallelomputation.PhDthesis,UniversityofIllinoisat \nUrbana.Champaign,1995. [27]J.H.Saltz,R.Mirhandaney,andK.Crowley.Run.time parallelizationandshedulingofloops.IEEETransationson \nComputers,40(5):603-612,May1991. [28]M.SpezialettiandR.Gupta.Loopmonotonistatements. IEEETransationsonSoftwareEngineering,21(6):497-505, \nJune1995. [29]R.Triolet,F.Irigoin,andP.Feautrier.Diretparallelizationof allstatements.InProeedingsoftheSIGPLAN'86 \nSymposiumonCompilerConstrution,pages176-185,Palo Alto,CA,July1986. [30]P.TuandD.Padua.Automatiarrayprivatization.In \nProeedingsofthe6thInternationalWorkshoponLanguages andCompilersforParallelComputing,LetureNotesin ComputerSiene,pages500-521.Springer.Verlag,August \n12-14,1993. [31]M.Wolfe.Beyondindutionvariables.InPLDI'92,pages 162-174,July1992. [32]C..Q.ZhuandP..C.Yew.Asynhronizationshemeandits \nappliationsforlargemultiproessorsystems.InInternational ConfereneonDistributedComputingSystems,pages \n486-493,1985.  \n\t\t\t", "proc_id": "349299", "abstract": "<p>Irregular array accesses are array accesses whose array subscripts  do  not have closed-form expressions in terms of loop indices. Traditional array analysis and loop transformation techniques cannot handle irregular array accesses. In this paper, we study two kinds of simple and common cases of irregular array accesses: single-indexed access and indirect array access. We present techniques to analyze these two cases at compile-time, and we provide experimental results showing the effectiveness of these techniques in finding more implicit loop parallelism at compile-time and improved speedups.</p>", "authors": [{"name": "Yuan Lin", "author_profile_id": "81339513636", "affiliation": "Department of Computer Science, University of Illinois at Urbana-Champaign", "person_id": "PP42050476", "email_address": "", "orcid_id": ""}, {"name": "David Padua", "author_profile_id": "81452612804", "affiliation": "Department of Computer Science, University of Illinois at Urbana-Champaign", "person_id": "P63208", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/349299.349322", "year": "2000", "article_id": "349322", "conference": "PLDI", "title": "Compiler analysis of irregular memory accesses", "url": "http://dl.acm.org/citation.cfm?id=349322"}