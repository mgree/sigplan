{"article_publication_date": "05-01-2000", "fulltext": "\n TranslationValidationforanOptimizingCompiler GeorgeC.Neula UniversityofCalifornia,Berkeley neula s.berkeley.edu \nAbstrat Wedesribeatranslationvalidationinfrastrutureforthe GNUCompiler.Duringtheompilationtheinfrastruture \nomparestheintermediateformoftheprogrambeforeand aftereahompilerpassandverifesthepreservationofse\u00admantis.Wedisussageneralframeworkthattheoptimizer \nanusetoommuniatetothevalidatorwhattransforma\u00adtionswereperformed.Ourimplementationhoweverdoesnot relyonhelpfromtheoptimizeranditisquitesuessfulby \nusinginsteadafewheurististodetetthetransformations thattakeplae. Themainmessageofthispaperisthatapratialtrans\u00adlationvalidationinfrastruture,abletohektheorret\u00adnessofmanyofthetransformationsperformedbyarealisti \nompiler,anbeimplementedwithabouttheeforttypially requiredtoimplementoneompilerpass.Wedemonstrate thisintheontextoftheGNUCompilerforanumberof \nitsoptimizationswhileompilingrealistiprogramssuhas theompileritselfortheLinuxkernel.Webelievethatthe \nprieofsuhaninfrastrutureissmallonsideringthequal\u00aditativeinreaseintheabilitytoisolateompilationerrors \nduringompilertestingandmaintenane. 1Introdution Despitealargebodyofwork[CM75,MP67,Mor73,Moo89, You89,WO92]intheareaofompilerverifationweare \nstillfarfrombeingabletoproveautomatiallythatagiven optimizingompileralwaysproduestargetprogramsthat aresemantiallyequivalenttotheirsoureversions.Butif \nThisresearhwassupportedinpartbytheNational SieneFoundationGrantNo.CCR\u00ad9875171,NSFInfras\u00adtrutureGrantNo.EIA\u00ad9802069,andgiftsfromAT&#38;Tand \nIntel.Theinformationpresentedheredoesnotneessarily refetthepositionorthepoliyoftheGovernmentandno o\u00c6ialendorsementshouldbeinferred. \nPermissiontomakedigitalorhardopiesofallorpartofthisworkfor personalorlassroomuseisgrantedwithoutfeeprovidedthatopiesare \nnotmadeordistributedforproftorommerialadvantageandthatopies bearthisnotieandthefullitationonthefrstpage. \noopyotherwise, orrepublish,topostonserversortoredistributetolists,requiresprior speifpermissionand/orafee. \nPLDI2000,anouver,BritishColumbia,Canada. Copyright2000CM1\u00b758113\u00b7199\u00b72/00/0006...$5.00. weannotprovethataompilerisalwaysorretmaybe \nweanatleasthektheorretnessofeahompilation. Thisobservationhasinspiredthetehniqueoftranslation validation[PSS98]whosegoalistohektheresultofeah \nompilationagainstthesoureprogramandthustodetet andpinpointompilationerrorson\u00adthe\u00adfy.Inthispaper wepresentafewtehniquesthatanbeusedtoimplement \ntranslationvalidationandwedisussourinitialexperiene withatranslationvalidationinfrastruturefortheGNUC \noptimizingompiler. Onemightarguethaterrorsinommerialompilersare theleastlikelysoureofheadahesformostprogrammers. \nWhilethismaybetrue,ompilermanualsontainwarn\u00adingslikethefollowing:\"Optimizingompilersansome\u00adtimeshangeyourodetosomethingyouwouldn'texpet. \n[...]Developershavebeenabletotraethebadodebeing generatedwhenoptimizationsareonbylookingatthea\u00adtualassemblyodegeneratedforafuntion.\"[Mi99]While \nthiswarningsuggestsahorrifyingsenarioforanenduser, itis,unfortunately,onlyanauratedesriptionofthestate \noftheartinompilertestingandmaintenane.Andom\u00adpilertestingisboundtobeomemoreimportantandmore tediousasmoredemandingarhiteturesarebeingusedas \ntargets. Ourpreliminaryexperienesuggeststhat,withefortsim\u00adilartothatrequiredforimplementingoneompilerpass,a \nompiler\u00addevelopmentteamouldbuildanefetivetransla\u00adtionvalidationinfrastruture(TVI).Suhaninfrastruture \n\"wathes\"theompilationasittakesplaeandpointsout preiselythemismathesbetweenthesemantisofthepro\u00adgrambeingompiledandthesemantisofthesamepro\u00adgramafteranindividualompilerpass.Wehaveimple\u00admentedaprototypetranslationvalidatorfortheGNUC \nompiler.Ourprototypeisabletohandlequitereliablymost oftheintraproeduraloptimizationsthatgperforms,suh \nasbranhoptimization,ommonsubexpressionelimination, registeralloationandodesheduling,whileompilingreal\u00adistiprogramssuhastheompileritselfortheLinuxkernel. \nAsanempirialvalidationoftheinfrastruturewewereable toisolateaknownbugingversion2.7.2.2.Inourexper\u00adimentsthetranslationvalidatorslowsdownompilationby \nafatoroffour.InsomeasesTVIreportserrorsthatare notatualsemantimismathes,butareduetotheinabil\u00adityofTVItounderstandpreiselywhattransformationtook \nplaeorwhythetransformationisorret.Werefertosuh InstrutionsExpressionsOperators Merory EopJ    t.E1t.[E]1[El].E21t.all(EE \n)label(L)1jurp(L)1E?jurp(Ll)jurp(L2) t1&#38;g1n1ElopE21sel(JE) +1 1*1&#38;1 1 1:1<1\"\"\" m1upd(JElE2)1updall(JEEE) \n1 return(e) 1 Figure1 TheabstratsyntaxoftheILintermediatelanguage errorsarefalsealarms.Formostoptimizationstheratioof \nfalsealarmsisverylowbutforsomeothersthereisafalse alarminabout1O%oftheompiledfuntions.Whilethere isertainlyroomforimprovementintheseresultsandaneed \nformoreexperimentalvalidation,webelievethattranslation validationisapromisingtehniqueforahievingaqualita\u00adtiveinreaseinourabilitytoisolateompilationerrorsdur\u00adingompilertestingandmaintenane,andonsequentlyto \ninreasethereliabilityofourompilers. Translationvalidationdoesnotobviatetheneedforexten\u00adsiveompilertestingsuitesbutisinsteadatoolforgreatly \ninreasingtheirefetivenessforompilertestingandmainte\u00adnane.Inatraditionalompilertestproedure,atestsoure \nprogramisompiledand,iftheompilerdoesnotreportan internalerror,theresultingprogramisrunonafewinput valuesforwhihtheoutputisknown[Cyg].Inmostases, \nhoweveritisstillthetaskofthetestertoinspetmanually theoutputprogramandtospotsubtleompilationerrors. Forexample,exeptionhandlingodeisbothhardtoom\u00adpileorretlyandalsoveryhardtotestexhaustively.TVI \nautomatesthistaskbyomparingtheoutputprogramtothe inputprogram,ortoanunoptimizedversionofthetarget program,andreportingtheexatnatureandpositionofa \nsemantimismath,withoutrequiringanytestasesforthe ompiledprogram. Chekingprogramequivaleneisanundeidableproblem, \nandthusweannothopetohaveaompleteequivalene hekingproedure.However,equivalenehekingispossi\u00adbleiftheompilerproduesadditionalinformationtoguide \nthetranslationvalidationinfrastruture.Oneontribution ofthisworkisaframeworkinwhihsuhinformationanbe expressedasasimulationrelation.Weshowonanexample \nhowahekingalgorithmwouldmakeuseofthesimulation relation,andwedisussafewguidelinesforompilerwriters onhowtogeneratesuhsimulationrelations. \nTypially,eahompilerpasstransformstheprogramin alimitedway.Bylookingattheprogrambeforeandafter thetransformation,weanhopetodetetthetransforma\u00adtionthattookplae,possiblyusingheuristisorknowledge \naboutthekindoftransformationsthattheompilerper\u00adforms.Aseondontributionofthisworkisatwo\u00adstepin\u00adferenealgorithmthatusessimpleheurististomaththe \nontrol\u00adfowgraphsoftheinputandoutputprogramsand thenusessymbolievaluationalongwithonstraintsolving toompletetheheking.Onewaytoviewthisalgorithmis \nasaninferenerforsimulationrelations. Someoftheadvantagesoftranslationvalidationanbe realizedwithaweakerinfrastruturethatdoesnotattempt \ntoverifyfullsemantiequivalenebutverifesonlythatthe outputhasertainexpetedproperties.Forexample,the Touhstoneertifyingompiler[NL98]provesthetypesafety \nofitsoutputwhenompilingatype\u00adsafesubsetoftheC programminglanguage.Similarly,SpeialJ[CLN+OO]does thesameforJava,andPoporn[MCG+99]foryetanother \ntype\u00adsafesubsetofC.Inspiteofitsobviouslimitations,this formofresulthekinghashelpedwiththeearlydisovery \nofnumerousTouhstonebugs,someeveninodethatwas reusedfrommatureompilers.Atthattimewewereasked ifoneouldbeneftfromtheresult\u00adhekingtehniquesof \nTouhstoneeveninompilersforunsafelanguagesandfor hekingmorethanpreservationoftypesafety,ideallywith onlyminormodifationstotheompiler.Webelievethere \nishopetoahievesomeofthesegoals,andtheurrentpaper desribesourinitialexperienealongthispath. Inthenextsetionwedisusstheequivaleneriterion \nbasedonsimulationrelationsthatoutTVIuses.Thenwe introdueanexampleprogramandargueinformallythatits semantisispreservedbyaseriesoftransformations.Start\u00adinginSetion4weformalizethisproessbyshowingfrst \nthesymbolievaluationpassthatolletsequivaleneon\u00adstraints,followedinSetion5bythedesriptionoftheon\u00adstraintsolver.InSetion6wereportonourpreliminary \nexperienewiththeimplementationofourprototypeinthe ontextoftheGCCompiler. 2SimulationRelationsandtheEquiva\u00adleneCriterion \nForexpositionpurposesweonsiderthatprogramsarewrit\u00adtenintheintermediatelanguage(IL)whosesyntaxisshown \ninFigure1.AfuntionbodyisasequeneofILinstru\u00adtions.Amonginstrutionswehaveassignmentstotem\u00adporaryregisters,memoryreads,memorywrites,funtion \nallsandreturns,labels,unonditionaljumpsandondi\u00adtionalbranhes.Thefrstargumentofafuntionallde\u00adnotesthefuntiontobealledandE \ndenotesasequene ofexpressions.(Throughoutthispaperwearegoingtouse anoverbarnotationtodenoteasequeneofelements.)The \nexpressionlanguageisalsorelativelysimpleontainingref\u00aderenestotemporariesandtoglobalnames,integerliter\u00adals,andompositeexpressionsusingavarietyofoperators. \nThislanguageisatuallyverylosetotheILintermediate languagethattheGNUCompileruses. OnediretioninwhihILdifersfromtypialinterme\u00addiatelanguagesisthatthestateofmemoryisrepresented \nexpliitly.Inpartiular,upd(JEE2)denotesthestateof l memoryafterawriteinpreviousmemorystateJatad\u00addressElofvalueE2.Andupdall(JEE \n)denotesthe stateofmemoryafteraallinmemorystateJtofuntion EwithargumentsE .Theexpressionsel(JE)denotesthe \nontentsofmemoryaddressEinmemorystateJ.Wewill oasionallyusevariablesmtorangeovermemorystates. AsimulationrelationrelationbetweentwoILprograms \n SandT(thesoureandthetarget)isasetofelements oftheform(pes,peT,E ),wherepesandpeTareprogram pointsinSandTrespetivelyandE \nisasequeneofboolean expressionsreferringtotemporariesliveinSandTatthe respetiveprogrampoints.Intheurrentversionofoursys\u00adtemallsuhbooleanexpressionsareequalitiesthatontain \nonlytemporariesfromSontheleft\u00adhandsideandonlytem\u00adporariesfromTontheright\u00adhandside. Informally,asimulationrelationdesribesunderwhat \nonditionstwoprogramfragmentsareequivalent.Thereare quiteafewpossibleequivaleneriteriaforILprograms.A \nriterionthatistoofnegrained(e.g.,onethatrequiresthe samesequeneofmemoryoperations)mightpreventpossible \nompileroptimizations.Onethatistoooarse(e.g.,ifthe soureismemorysafethensoisthetarget,suhasheked bytheTouhstoneertifyingompiler)doesnotallowthe \ndetetionofsubtleerrorsintheoptimizer. Inordertodefneequivaleneofprogramfragmentswe frstdefneequivaleneofapairofexeutions.Inthiswork \nwesaythattwoexeutionsareequivalentifbothleadtothe samesequeneoffuntionallsandreturns.Tworeturnsare thesameifthereturnedvalueandthestateofthememory \narethesame.Twofuntionallsarethesameifthestateof thememorypriortotheall,theargumentsandtheaddress ofthealledfuntionarethesameinbothases. \nThenotionofequivaleneofmemorystatesdeservessome furtherdisussionbeausewedonotwanttoonstrainitto inludethestateofmemoryloationsusedasspillslots. \nSuhaonstraintwouldnotallowTVItohektheopera\u00adtionoftheregisteralloator.Weaddressthisissuebyassign\u00adingnamesoffreshtemporariestothespillslotsfollowedby \nrewritingoftheprogramtohangespillinginstrutionsinto operationsusingthesenewtemporaries.Thisefetivelyun\u00addoesthespillingoperation.Animportantaddedbeneftof \nthisoperationisthatthelakofaliasingbetweenspillslots andothermemoryloationsismadeexpliit.Thisrenaming \noperationisatuallyquitesimplesinemostompilersuse onlysimpleindiretaddressingfromaframepointertoa\u00adessthespillslots.Intheontextofanunsafelanguagelike \nCitisnotpossibletoguaranteethataloationintendedas aspillslotwillnotbehangedbya\"normal\"memoryop\u00aderation.Weignorethispossibility,justlikeanyCompiler \ndoes,onthegroundsthatthebehaviorofsuhaprogramis undefned.Allwearedoingistoadoptthesamenotionof \"undefned\"astheompilerdoes. \nThus,ourequivaleneriterionisanequivaleneofob\u00adservablebehaviorswherethesetofobservableeventsare funtionallsandreturns.Thisequivaleneriterionisin\u00adtendedtooverallintraproeduralprogramtransformations, \nsuhasthoseperformedbytheGNUCompiler.l Finally,asimulationrelationEbetweenSandTisorret ifforeahelement(pes,peT,EE)EEallpairsofexeutions \nofSstartedatpesandofTstartedatpeT,instatesthat satisfyallbooleanonditionsE ,areequivalent.Thus,a simulationrelationisawitnessthattwoprogramfragments \nareequivalent.Notethatbythisriterionthetwoprogram lItispossibletoextendthesetofobservableeventsto inludememorywritestotheheap.Also,inordertohandle \norretlytheRTLintermediatelanguageofgweextend thesetofobservableeventstoinludememoryreadsand writestovolatileloations. \nfragmentsarealsorequiredtohavethesameterminationbe\u00adhavior.Oneanimagineanoptimizingompilerproduing asimulationrelationasawaytoexplaintoanobserverhow \ntheprogramhangedthroughthetransformation.Allthat isneededthenisawaytohekeasilysuhsimulationrela\u00adtions.Inthispaperwegoonestepaheadandweshowthat \nforamoderately\u00adaggressiveoptimizingompilerlikegitis atuallypossibletoinferthesimulationrelationandthusto \navoidmodifyingtheompiler.Butindoingthiswehaveto aeptthattherewillbeadvanedoptimizationsforwhih theinferenemahinewillnotwork,resultinginfalseom\u00adpilationerrorsbeingreported.Wedisussinformallyinthe \nnextsetionhowanexampleofasimulationrelationan behekedandthewegoontoformalizethisproessand desribetheinfereneengine. \n3AnExample ConsidertheprogramshowninintermediateforminFig\u00adure2(a)andthenagaininFigure2(b)afterafewtypial \ntransformations.Thisprogramwritesthevaluesg*i+ atindexiinthearrayofbytesa,forirunningfrom0to n-1.Hereaandgareglobalvariables;alloftheother \nvariablesareloalsrepresentedastemporariesintheinter\u00admediatelanguage.Theprogramissplitintobasibloks labeledbotob3. \nFigure2(b)showsthesameprogramafterafewoptimiza\u00adtions.Theregisterrowasalloatedtoholdtemporaryi, andregisterr2toholdv.Thetemporarynwasspilledto \nthememoryloation\"Bp-4\",whereBpdenotestheframe pointerregister.Theloopwasinvertedandthetermination testdupliated.Sineiisanindutionvariableandweas\u00adsumethereisnoaliasing2between[&#38;g]and[&#38;a+i],vis \nalsoanindutionvariable.Finally,theompilerhoistsout oftheloop(toblokb6)theomputationof[&#38;g]andstores \nitsresultinthespillslot\"Bp-8\". Weassumethatwearegiventhesimulationrelation showninFigure2()andwehavetohekitsorretness. \nWeomitfromthisexampleanadditionalbooleanexpres\u00adsionineahelementofthesimulationrelationstatingthat thememorystatesshouldbeequivalentinthesoureand \nthetargetattherespetiveprogrampoints.Notethatthe frstelementofthesimulationrelationsaysthatthetwopro\u00adgramsareequivalentonlyiftheyarestartedinstateswhen \n\"n[Bp-4]\". Chekingequivaleneanbeaomplishedbyhekingin turnalltheelementsofthesimulationrelation.Foreah \nrow,weexaminethedefnitionsofthebloksinvolved,and weproeedforwardinparallelinboththesoureandthe targetprograms.Westopwhenwehitareturninstrution \nonbothsides,inwhihasewehekthatthestateofmem\u00adoryandthereturnedvaluearethesameonbothsides,or anotherpairofrelatedbloks,inwhihasewehekthe \nonstraintsofthisnewpair.Ifallthesehekssueedthen weanshowbyanindutiveargumentthattheprogram fragmentsareequivalentmodulotheonstraintsfromthe \nstartrowintheequivalenerelation.Sinethehekingpro\u00adessforeahelementstopswhenwereahprogrampoints 2Thisaliasingassumptionouldinfatbewrongsinethe \nindexiisnothekedagainstthearraybounds.Nevertheless manyCompilersmakethisassumption. b4 ro 0 [BP-4].0 \nbo  1 bo b4 n=[BP-4] 2 bl b4 i=0,n=[BP-4] 3 b2 b5 i=ro 4 b3 b6 i=ro,n=[BP-4] 5 b3 b7 i=ro,n=[BP-4] \n[&#38;g]=[BP-8], [&#38;g]*i+3=r2  b3 .  i b2  t [&#38;g] u t*i v u+3 [&#38;a+i] v i i+1  .  (a)Originalprogram(b)Transformedprogram()Simulationrelation \nFigure2:AnexampleILprogrambeforeandafteraseriesoftransformations,inludingloopinversion,strengthredution, \nregisteralloationwithspilling,andinstrutionsheduling.Ontherightsidewehavethesimulationrelationforthispairof \nprograms. relatedbyanotherelement,weanensureterminationof thishekingproessbyrequiringthatwehave\"enough\" \nelementsintherelation.Wewillpostponetheformalization ofthisnotionuntilwedisusstheinferenealgorithm. Toillustratethehekingproessweshowtheheking \nofelement1(aneasyone)andelement5(themostdi\u00c6ult one).Tohekelement1,westartbyassumingthatits onstraintshold.Then,fromtheontrol\u00adfowgraphsand \nthesimulationrelation,wenotiethatweneedtoadvane toblokblonthesouresideandstayinplaeonthetarget side,inordertohitelement2ofthesimulationrelation.We \nnowhavetohekthattheonstraintsofelement2aremet. Thefrstonstraint\"i=0\"isevidentlymetsinewehave assigned0toiinblokbo.Theseondonstraintismet \nbeausewehavenotmodifednorthememory,andwean thususetheassumptiondiretly. Tohekelement5,weassumeagainthatitsonstraints \nhold,andthenwelookforpairsofrelatedpathsinthesoure andthetargetfromtheurrentblokstoanotherpairofre\u00adlatedbloks.Therearetwosuhpairs:b3-bl-b2relatedto \nb7-b5,andb3-bl-b3relatedtob7-b7.(Howexatlywe disoverthesepathsisexplainedinSetion5.2.)Forboth pairswehavetohekthattheyaretakenunderthesame \nonditionsandthattheyestablishtheonstraintsofthere\u00adlatedblokstheyreah.Weshowonlytheheksrelated totheseondpairofpaths.Weusetheprimednotationto \nrefertovaluesoftemporariesattheendofthepath. Firstwehavetohekthepathonditions,i.e.,thati. < n. r. =o<[BP-4].,orequivalentlythati+1<n= \nro+1<[BP-4]..Usingourassumptionsthisreduesto provingthat[BP-4]. =[BP-4],whihweanbedonenoting thatthememorywritefromblokb7annothangeaspill \nslot.(Reallthatwetreatspillslotsastemporariesandnot asmemoryaddresses.) Nowwehekthelastonstraintinelement5,i.e.,that \n*i. r. [&#38;g]. +3=2,orequivalentlythat[&#38;g]. *(i+1)+3= (r2+[BP-8]).Thisisabittrikybutanbedonewith \nknowledgethattheompilerdoesstrengthredution.In thisasetheruleofdistributivityofmultipliationisused followedbyarithmetisimplifationtoreduethegoalto \n[&#38;g].*i+[&#38;g].+3=r2+[BP-8].Itremainstoprovethat [&#38;g]. =[&#38;g]whihrequiresarguingthataddresses&#38;a+iand \n&#38;garenotaliased.GCCmakesthisassumption(beauseit involvesaddressesoftwodistintglobals)andsodoesour \nTVI.Nowweanreduethegoalto[&#38;g]*i+[&#38;g]+3= r2+[BP-8]whihfollowsimmediatelyfromtheassumptions [&#38;g]*i+3=r2and[&#38;g]=[BP-8]. \nThisexampleshowsthatTVImusthavesimilarknowl\u00adedgeofthealgebrairulesandaliasingrulesthattheom\u00adpileritselfhas.AsampleoftherulesthatourTVIusesto \nhekequivaleneofbooleanexpressionsappearinginsim\u00adulationrelationelementsisshowninFigure3.Wehave rulesforprovingthefatsthattheompileritselfprovesim\u00adpliitlyintheproessofoptimization:useofassumptions, \nommutativityofadditions,et.Wealsohavetheusual rulessayingthatequalityisaequivalenerelationandthe ongruenerules.Thelasttworulesinthissetionareused \ntoreasonabouttheontentsofmemoryreads;thefrstone referstotheontentsofamemoryloationthatwasjust written,andtheseondonemakesusedof\"annotalias\" \ninformation(fEl l)toprovethatagivenmemoryup\u00ad =E. dateannotafettheontentsofanothermemoryloation. Notethatwehavenorulesforreasoningabouttheontents \nofamemoryloationarossafuntionall.Thisisonein\u00adompletenessinoursystemmotivatedbyoururrentfous onintraproeduraloptimizations. \nInthebottompartofFigure3weshowrulesforreason\u00adingabouttheequivaleneofmemorystates.Forgeneral\u00adity,weextendtheequivalenejudgmenttobeoftheform \nfM=.M. tosaythatthestatesdenotedbyMandM. Booleanexpressionsatisfability:fE prepresentsthesumofliteralsnandm \nfEl+E2=E2+ElfE+=EfE?Efn+m=p . E. =E. =E. =E..E..E. fEllfE22 fEl lfsel(MMEl)=2 fsel(upd(MMElME2)MEl)=2fsel(upd(MMElME2)MEl)=2 \nMemoryequivalene:fM=\"M. E.=E.M. fE2=sel(M.ME) lELfEllfM=\"lfM=\"U{E.}M' fupd(MMElME2)=\"M. fupd(MMElME2)=\"M' \nfM=\"M'fEl=El'fE2=E2'fE=E'fM=\"M'fE =E ' ''' fupd(MMElME2)=\"upd(M'MElME2)fupdall(EMMME )=\"updall(E'MMME \n') Figure3:Afewrepresentativerulesthatdefnetheequivaleneheking. areequivalent,exeptpossiblyatthoseaddressesontained \ninthesetL.Thefrsttworulesinthissetionaretypial substitutivityrules.Iftheompilerdoesnotreordermem\u00adorywritesanddoesnoteliminateredundantmemorywrites \nthenonlythesetworulesareneessary.Theothertworules andtheLannotationareneessarytoreasonabouttrans\u00adformationsthathangethesequeneofmemorywrites.The \nthirdrulehandlestheaseof\"don'tare\"memoryloation beingwritten;thefourthonesaysthatMafterwritingof E2toaddressElisthesameasM'ifthelatteralready \nontainsE2atthataddressandisotherwiseequivalentto M. Eahoftheserulesmustbedesignedtomaththeseman\u00adtisoftheintermediatelanguage.Weneedenoughrulesto \ndesribeallpropertiesoftheILthattheompileritselfuses whentransformingtheprogram.Thisdoesnotmeanthat TVImustbeasomplexastheompiler.Aompileristyp\u00adiallymoreomplexbeauseitmustalsodeidewhihofthe \nrulestouseandwhen.Also,inourimplementationofTVI thehekerisessentiallyapatternmatherwitheahpat\u00adternbeingadirettransriptionoftheorrespondinglogial \nrule.Asaresultofthisimplementationsheme,andalso duetooneorderofmagnitudedifereneinthesizeofTVI andtheompiler,webelievethatitismuheasiertohek \nbyinspetiontheoperationofthetranslationvalidatorthan itistohektheimplementationoftheompiler. Theattentivereaderhasnotiedthatthehekingproess \nisquitesimplebeauseinfatthedi\u00c6ultyliesinoming upwiththesimulationrelation.Themostreliablewayto dothatistohaveitproduedbytheompiler.However, \nevenformoderatelyaggressiveompilers,suhasthe Compiler,itispossibletoinferthesimulationrelation,as explainedinthenextsetion. \n4SymboliEvaluation Inthissetionwestartdesribingthetranslationvalidation algorithminmoredetails.First,aprogramintheILform \nissplitintobasibloks,whihstartatalabelandendwith areturn,ajumporabranhinstrution.Aorefeatureof ourapproahistheuseofsymbolievaluationtoompute \ntheefetofabasiblok.Toillustratethemajorbeneftof symbolievaluationonsiderthetwobasibloks: tl.5;t6.i*5; \nt2.tl+i;t7.5+i; t3.i*tl;t8.t7+t6; t4.tl+i;returnt8 t5.t4+t3; returnt5 Thesebloksmightseemdiferentifonetakesapurely \nsyntatiallookatthem.However,ifweevaluatebothof themsymboliallyweseethattheyarebothequivalentto \"return(5+i)+(i*5)\".Ourpointisthatsymbolieval\u00aduationabstratsovermanyminorsyntatidetailssuhas \napermutationofindependentinstrutions(e.g.,instrution sheduling),arenamingofloaltemporaries(e.g.,register \nalloation),orevenahangeintheorderofomputinginde\u00adpendentsubexpressions(e.g.,ommonsubexpressionelimi\u00adnation).Thisobservationishardlynew;ithasappeared \nbeforeunderseveraldisguisessuhasprediatetransform\u00aders[Dij76]andvalue\u00addependenegraphs[WCES94].Butits useforhekingorretnessofprogramtransformationsap\u00adpearstobenew. \nAsymbolievaluationstateSonsistsofaprogrampoint alongwithasetofsymbolivaluesE fortheliveregistersat thatpoint.Inourtranslationvalidationshemeitisenough \ntoonsideronlyonlythreekindsofstates,orrespondingto end\u00adpointsofthethreekindsofbloks,asfollows: S::=ret(MME)Ib(MME \n)IE?b(MME ):b'(M'ME ') Thefrstformrepresentsareturninstrutioninmemory stateMandwithreturnedvalueE,theseondrepresents \najumptoblokbinmemorystateMandwiththevalues ofliveregistersbeingE ,andthethirdaonditionalbranh withguardEandsuessorbloksbandb'withE \nandE ' beingthevaluesofliveregistersofbandb'respetively. Foreahbasiblokb,weomputethesymbolistateat endofblokasafuntionofthevaluemofthememoryand \nEoftheliveregistersattheblokstart.Forthispurposewe reateaninitialsymboliregisterstatePb=[t-mM Eb- E] \nmappingaspeialmemoryregistertandtheliveregisters E btotheirinitialvalues.Thenweinvokeasymbolievalu\u00adationfuntionSE(iE(b)MPb)onthesequeneofinstrutions \n SE(t.E;Ii,p) SE(iI,p[t-pE]) SE(t.[E];Ii,p) SE(Ii,p[t-sel(pf,pE)]) SE([El].E2;Ii,p) SE(iI,p[f-upd(pf,pEl,pE2)]) \nSE(t.all(E,Ei);Ii,p) SE(iI,p[f-updall(pf,pE,pEi),t-all(pf,pE,pEi)]) SE(return(E),p) ret(pf,pE) SE(jurp(b),p) \nb(pf,pi b) SE(E?jurp(bl):jurp(b2),p) pE?bl(pf,pi b.)):b2(pf,pi b.)) Figure4:Thesymbolievaluationalgorithm \nontainedinbandontheinitialsymboliregisterstate.The resultofthesymbolievaluationfuntionisasymbolieval\u00aduationstatepossiblydependingonthevariablesmand \ni. Thisallowsustodefne,foreahblokb,theevaluation stateattheendoftheblokasatransferfuntionb(m, i), asfollows: \n... b(m, i) SE(I(b),[f-m,i b- i]) whereI(b)denotesthesequeneofinstrutionsofblokb, andi bisthesetofliveregistersatstartofblokb. \nThesymbolievaluationfuntionSEisdefnedinFig\u00adure4.Dependingonthekindofinstrutionathand,the symbolievaluationstateismodifedaordinglyandthe \nfuntionSEisinvokedreursivelyonthenextinstrution. WewritepEtodenotetheexpressionobtainedbyapplying thesubstitutionptoE.Wewritep[t-E]todenotethe \nstateobtainedfrompaftersettingttoE.Notethatthe memorywriteinstrutionsetsthememoryregister,andthe allinstrutionmodifesboththememoryregisterandthe \nregisterwheretheresultoftheallisplaed.Thelastthree asesorrespondtoterminalinstrutionsandbuildsymboli \nstatesdiretly.Forexample,thetransferfuntionoftheba\u00adsiblokb3fromFigure2(b)is: ... b3(m,i,n) bl(upd(m,&#38;a+i,(sel(m,&#38;g)*i)+),i+,n) \nandofthebasiblokblis: ... bl(m,i,n) in?b2(m,i):b3(m,i,n) Analternativeviewofthesymbolievaluationstrategy \ndesribedhereisasarewritingofthebodyofanILfun\u00adtionasapurelyfuntionalprogramomposedofaseries ofmutuallyreursivefuntiondefnitions(thebasiblok \ntransferfuntions).Thebeneftisthatequivaleneofsuh programsiseasiertoverifyduetolakofsideefets.Fur\u00adthermore,assuggestedbytheexamplefromthebeginning \nofthissetion,symbolievaluationproduessyntatially identialtransferfuntionsformanybasibloksthatdifer inthenamesofregistersorintheorderofnon\u00addependent \ninstrutions. Symbolievaluationsimulatessymboliallytheruntime efetsofasequeneofinstrutionsandmustmodelau\u00adratelytheseefets.Butsineitperformsmostlysubstitu\u00adtionthesymbolievaluationphasedoesnothavetomake \nanydeisionsbasedonthesemantisofvariousoperators. Allsuhdeisionsarepostponedtohekingphase,whihis disussednext. \n5ChekingSymliStateEquivalene Wedesignedtwoequivalenehekingalgorithms.Onerelies onthesimulationrelationbeingavailable(weallthisthe \nhekingalgorithm)andanotherthatdoesnotrelyonsuh information(theinferenealgorithm).Thehekingalgo\u00adrithmistheoretiallymorepowerfulanditonstitutesboth \naorretnessriterionandaompletenessgoalfortheinfer\u00adenealgorithm.Inthisstageoftheprojetwedidnotwant tomodifygandwewantedinsteadtoexplorehowau\u00adratelyoneaninferthesimulationrelationbyjustpassively \nobservingtheompilation.Oururrentinferenealgorithm hasthefollowingtwolimitationswithrespettotheheking \nalgorithm: allbranhesinthetargetprogrammustorrespondto branhesinthesoureprogram,and  allonstraintsinthesimulationrelationmustbeequal\u00adityonstraints. \n Bothoftheselimitationsmakeourinferenealgorithmsuit\u00adableforallbutoneofthetransformationsthatgperforms. \nTheexeptionisloopunrolling,andthenonlyinoneofthe fourversionsofunrollingthatguses.Sinetheheking algorithmisasimplerversionoftheinferenealgorithmwe \ndisussonlythelatterhere. Theinferenealgorithmhasthreeomponents.Oneom\u00adponent,alledSan,walksthesoureandthetargetpro\u00adgramsinparallelandolletsequivaleneonstraints.An\u00adotheromponent,alledBranh,assistsSanindetermining \nwhetherabranhinthesoureprogramwaseitherelimi\u00adnated,andthenwhihsidewasretainedorifitwasopied tothetargetprograminthesameformorinreversedform. \nWearenothandlingtheasewhenabranhinthetar\u00adgetprogramdoesnotorrespondtoabranhinthesoure program.Thethirdomponentoftheinferenealgorithm, \nalledSolve,isinvokedlasttosimplifythesetofequivalene onstraintsproduedbySanuntilnoneareleft.Inthis asewedelaresuess.FailuresanourintheBranh \nmoduleorintheSolvemodule.InbothasesTVIpoints outtheexatnatureofafailuresoahumananasertain whetherwehaveunoveredindeedaompilerbugorjustan \ninompletenessissueinourtool.Inthelatterasewean updatethetoolorjustmakeanotethatvalidationisknow tofailforaertaintestase. \n5.1ColletingConstraints Therearethreefavorsofonstraintsthatweolletinthe setC.ExpressionequivaleneonstraintsE \nE. relatetwo expressionswhosevaluesareequalforallsubstitutionsof freevariableswithvaluesthatsatisfyC.Memoryexpres\u00adsionequivalene1 \n1. relatestwomemoryexpressions thatdenotememorystateswhoseontentsoinides.3Fi\u00adnally,symbolistateequivaleneS=S. \nrelatestwostates that,foranysubstitutionoftheirfreevariableswithvalues thatsatisfyC,leadtothesamesequeneoffuntionalls \nandreturns.Twofuntionallsorreturnsarethesameif theyareexeutedinthesamememorystatewiththesame arguments. \nThemainentrypointInferandtheSanomponentare bothshowninFigure5.Weuseprimednotationtoreferto entitiesfromthetargetprogram.Theinferenealgorithm \nmaintainstwolistsofpairsofbloks.Doneontainsthose pairsofrelatedbloksthathavebeenproessedalreadyand ToDothosepairsthathavebeenenounteredbutnotyet \nproessed.Thelatterlistisinitializedwiththestartbloks ofthesoureandtargetrespetively.Foreahpairstilltobe \nproessed,wereatenewparameterstostandforthevalues ofliveregistersonentryandthenweinvokethesanner. TheSanproeduretakes,inadditiontothesoureand \ntargetstates,thesequeneofILinstrutionsleadingtothese statesfromthestartoftheurrentpairofrelatedbloksbe\u00adingproessed.Sanfrstfollowsjumpsinboththesoure \nandthetarget(thefrsttwoasesofSan)untilonboth sideswereaheitherabranhorareturn.Intheproess,the symbolistateandthesequeneofleadinginstrutionsare \naumulatedaordingly.ThenSanexaminesthesoure state,andifthatisareturn(thethirdaseofSan)itex\u00adpetsareturnonthetargetsideaswell.Santerminatesin \nthisasebyaddingtwoonstraintstoC. Theinterestingaseiswhenthesourestateisabranh. Therearefourpossibilitieshere,namedELIMT,ELIMF,EQ, \nEQR,meaningthateitherthebranhwaseliminatedandthe trueorthefalsesidewasretained,orthebranhorresponds toatargetbranheitherinthesamediretionorreversed. \nThedeisionofwhihaseappliesismadebythefuntion Branh(disussedinSetion5.2)basedontheontrol\u00adfow graphandthesequenesofinstrutionsleadingtothebranh \npoints.IntheELIMTasetheonstraint-E=0(where-is thenegationoperator)isaddedtosaythatthesourebranh onditionisalwaystrue,andsanningontinueswiththe \ntrueside.IntheEQasethetargetmustalsobeabranhand aonstraintisaddedsayingthatthetwobranhesalways gointhesamediretion.ThehelperfuntionMarkRelated \naddsastateequivaleneonstraintandthenaddsthetwo blokstotheToDolist. NotiethatSanisguaranteedtoterminatebeauseit \nneverlooksatapairofbloksmorethanone.Furthermore, inpratieveryfewbloks(thosethathavebeendupliated) appearinmorethanonepair.Thenumberofonstraints \nproduedinthisstageisalsorelativelysmall.Wetypially haveoneonstraintperonditional,twoonstraintsforeah \nreturninstrutionandforeahjoinpointwehaveasmany stateonstraintsastherearesuessors.Itisnotasur\u00adprisethatonstraintgeneration,inludingBranh,isdone \ninabout10seondsontheompletegsoures.Additional onstrainsaregeneratedduringonstraintsolvingbutbefore movingontothatstagewedesribebriefytheoperationof \ntheBranhmodule. 3Weatuallyuseamoregeneralformthatallowsthe twomemorystatestodiferonagivensetofaddresses,as \ndesribedinSetion3. . FuntionInfer(bo,bo)is Done=0 ToDo={(bo,b. o)} C=0 while(b,b.)EToDo ToDo=ToDo\\{(b,b.)} \nDone=Done{(b,b.)} reatenewparametersm, E,m., E. San(b(m, E),0,b.(m., E.),0) done Solve(C) FuntionSan(S,IE,S.,IE.)is \n... ifS=b(M,E )andb(m, E)=SYthen E E. San([M/m,/ ElSY,IE.I(b),S,IE.) =b.(M.=S. elseifS. ,E .)andb.(m, \nE)...Ythen [M.EE.I. San(S,IE/m,/EY,E.I(b.)) , lS.elseifS=ret(M,E)andS. =ret(M.,E.)then C=C{M=M.,E=E.} \nelseifS=E?bY(MY,E Y):b2(M2,E 2)then swithBranh(IE,IE.)of ... aseELIMTandbY(m, E)=SY C=C{-E=0} EEY. San([MY \nlSY,IE.I(bY),S,IE.) /m,/E ... aseELIMFandb2(m, E)=S2 C=C{E=0} EE2. San([M2/m,/ ElS2,IE.I(b2),S,IE.) \naseEQandS. =E. ?b.Y,E Y.):b.2,E . Y(M.2(M.2) C=C{E=E.} . MarkRelated(bY(MY,E Y),bY(M.,E .)) b.2,E 2. \nYY MarkRelated(b2(M2,E 2),2(M.)) aseEQRandS. ?b.,E . :b.2,E . =E. Y(M. )2(M.2) YY C=C{E=-E.} MarkRelated(bY(MY,E \nY),b.2,E . 2(M.)) 2 . MarkRelated(b2(M2,E 2),bY(M.,E .)) YY default fail else fail FuntionMarkRelated(b(M,E \n),b.(M.,E .))is C=C{b(M,E )=b.(M.,E .)} if(b,b.) then EDone ToDo=ToDo{(b,b.)} Figure5:Themainentrypointtotheinferenefuntion \nandtheSanomponent. 5.2NavigatingBranhes TheBranhmoduleisinvokedwhentheSanmodulede\u00adsribedbeforeenountersabranhinthesoureprogram. \nTheroleoftheBranhmoduleistodisoverwhetherthe branhwaseliminatedorifitwaskeptinthetargetpro\u00adgram.WedesribehereanimplementationofBranhbased \nonheurististhatwerefoundefetiveinourexperiments. TheinputofBranhonsistsoftheinstrutionsequenes IleadingtoabranhBinthesoureand \nI. leadingeither toabranhB. ortoareturnR. inthetarget.First,in ordertoexposemoreinstrutions,wefollowjumpsafterthe \nbranhesuntileahsideofabranhendswithareturnor withanotherbranh.Thetwopossibleresultingsituations areshownbelow: \n theyourintheDoneorToDolists.Weassignahigh soreof1.0inthisase. Thenexttwoheuristisarespeiftogalthoughitis \nlikelythatsomesimilarheuristisouldbeimplementedfor otherompilers. Nextwelookatthesequeneofserialnumbersofthe \nILinstrutionsinasequene.EahILinstrutionhasa uniqueserialnumber.Thoseinstrutionsthatarenot eliminatedordupliatedarossatransformationmain\u00adtaintheirserialnumber,eveniftheirbodyismodifed \nslightlysuhasduringregisteralloation.Somein\u00adstrutionsarenewlyintroduedinthetarget,butwe andetetthattoosinetheirserialnumbersarelarger \n thanthoseappearinginthesoure.Weomputethe . similaritysoreastheratiobetweenthenumberofse\u00ad . B . . . \nB . rialnumbersappearinginbothinstrutionsequenes . ..and or ... ... ... . ... . R. Soure Target \nWedisusshereonlythesituationwhenthetargetside ontainsabranh.Theotherase,ofareturn,issimpler.If thesourebranhwaspreservedthenitmustorrespondto \nthebranhonthetargetside.Thetestthatweperformis asfollows(notethatthistestisonsideredtobefalseifthe targetsidehasareturn): \nI I. and B. I I. I I. ((Band and ) . . . . dividedbythelengthoftheshortestone. Finally,insomeases(e.g.,whenodeisdupliated) \nnoneoftheaboveheuristisworkwellenough.In thataseweusesoureline\u00adnumberinformationthat gplaesasspeialILinstrutionsintheinstrution \nstream.Sinegisarefultomovesuhinformation alongwiththemovedinstrutions(toassistdebugging) itbeomesagoodwaytodetetodedupliation.We \nassignasoreomputedlikeforthesequeneofserial numbers. Withthesefourheuristisweareabletohandlereliably \nor allofthetransformationsperformedbyg,exeptforloop unrolling.Theproblemthereisoururrentdeisiontoallow \n)). I. operations,tweenquenesandbetweenonditionals,aredefnedbelow.Sine . . I I. B . (B andand . I \nThetwosimilarityinstrutionsbese\u00adonlytargetonditionalsthatareopiesofsoureondition\u00ad als.Thisproblemanbefxedtomaketheheuristisof \nBranhgoodenoughtohandletheontrol\u00adfowtransforma\u00ad tionsperformedbyg.However,unlikeothertehniques presentedinthispaper,theBranhheuristisaretheones \nthataremostlikelytobesensitivetohangesintheompiler andalsothosethatmightnotbeeasilytransferabletoother \ntheseoperationsareperformedbyheuristis,theirresults arenotstraightbooleansbutrathersoresbetween0.0and \n1.0,with\"and\"implementedasmultipliationand\"or\"im\u00ad plementedasthemaximumoperator. Twobooleanonditionalsaresimilariftheyouldbeob\u00ad \ntainedfromeahotherusingsimpletransformations,suhasompilers.Perhapsthetrulygeneralsolutiontothisproblem \nisfortheompilertoannotatebranhesinthetargetpro\u00ad . . . . .Eto . operatorsarenotloselyrelated,suhas:and. \nortoE. E. fromE .Weassignlowsim\u00ad E E . ilaritysorestopairsofonditionalswheretheomparison gramindiatinghowtheyrelatetothesoureprogram.This \n =. willobviatetheneedforanyheuristisandouldgreatlyim\u00adTosupplementthebooleanexpressionsimilarityheuris\u00ad \ntiwealsoomputeinstrutionsequenesimilarity,using severalelements: Firstwelookatthesequeneoffuntionallsinthetwo \ninstrutionsequenes.Forthispurposeweonsidera provetherobustnessofTVIinthefaeofmodifationsin theompiler. \n5.3SolvingConstraints returnasaalltothefuntion\"return\"andanindiret funtionallasaalltothefuntion\"indiret\".Before \ndoingtheomparison,weappendasthelastelement inthesequeneofalls,asetoffuntionnamesthat ouldbeallednextintheodefollowingtheinstrution \nsequene.Thisinformationispreomputedwithan easyfxpointoperation.Ifthesequeneofallsinone instrutionsequeneisnotaprefxoftheother'sthen \nweannothavesimilarityandweassignthelowestsore 0.0. Next,welookatwhetherthetwoinstrutionsequenes leadtopointsthatarealreadyknowntoberelatedsine \nThefnalstageoftheinfereneproesssolvestheonstraints olletedbySan.Therearethreekindsofonstraints: expressiononstraints,memoryonstraintsandstateon\u00adstraints.Thestrategyistostartsolvingthesimpleston\u00adstraintsfrst.Wheneverwefndasimpleonstraintx=E \nwedoseveralthings: removex=EfromC  verifythatxdoesnotappearinE.Thatwouldleadto irularitythatafetsthesoundnessofthealgorithm. \n replaeinallofCallourrenesofxbyE.   fndoutforwhihpairofbasiblokswastheparameter XintroduedinInfer.Lettheirtransferfuntionsbe \nb(mMXE)andb.(m.MXE.).  addX=Etothesetofbooleanexpressionsontained intheelementofthesimulationrelationorresponding \ntobandb. forallstateonstraintsoftheformb(MME )= b.(M.ME .)introduedbyMarkRelatedaddtoCtheon\u00adstraintm-MMXE-EEMm. \n-M.MXE. -E .](X=E).  Intuitively,thesimpleonstraintsaregeneratedfrstfor returninstrutions.Thelaststepabovepropagatessimple \nonstraintstothepredeessorsofablok,thusefetively movingthemtowardsthestartoftheprogram.Whenthey reahthestarttheysayinwhatinitialstatesarethepairof \nprogramsequivalent. Assumenowthatweareinastatewithoutanysim\u00adpleexpressiononstraints.Inthatasewetrytosim\u00adplifyexpressionandmemoryonstraintsusingsimilaral\u00adgebrairulestowhattheompileritselfuses.Forexam\u00adple,wetakeeveryonstraintEl=E2andweompute \naanonialformof\"El-E2=0\"bybreakingalltop\u00adleveladditions,subtrationsandmultipliationsandrewrit\u00adingthetermasanintegeraddedtoaweightedsumofnon\u00adarithmetiexpressions.Forexample,wereduetheon\u00adstraint\"Xl+2*(X2+5)=X3+X2+Xl+20\"totheon\u00adstraint\"X2-X3-10=0\",whihweanturnintoasimple \nonstraintforX2orforX3. Inadditiontoarithmetisimplifationwealsosimplify memoryoperations,aordingtotheequationbelow: \n{ sel(MMA.)ifA-A.= 0 sel(upd(MMAME)MA.)= EifA-A. =0 Thesideonditionsabovearehekedusingthearithmeti simplifer.IfA-A. \nissimplifedtozerothentheseond hoieisused.Ifitissimplifedtoanon\u00adzeroonstantor toanexpressioninvolvingthedifereneoftheaddresses \noftwoglobals,thenthefrsthoieisused.Otherwisethe expressionisnotsimplifed. Whenweannotsimplifyexpressiononstraintsanymore, \nwemoveontomemoryonstraints.Amemoryexpressionis asequeneofmemoryupdatesandfuntionalls.Aording toourequivaleneriterionwedonothandleprogramsin \nwhihtheompilermovesmemoryoperationsarossfun\u00adtionalls.Thusweansplitallmemoryexpressionsinto segmentsatfuntionalls.Weomparesuhsegmentsand \nweaddonstraintsstating,fortwoorrespondingfuntion alls,thatthememorystates,thefuntionsthatarealled, andtheargumentsareallequal.Afterthisstepallmemory \nexpressionshavebeenreduedtoontainjustupdopera\u00adtions,whihwesolveusingthefollowingrule: Solve(upd(MMAME)=upd(M.MA.ME.))= \nifA-A.= 0then .E.} C=C sel(M.MA)=EMsel(MMA)= else C=C M=M.MA=A.ME=E.} whereagainA-A. issimplifedto =0meansthatA-A. \nanon\u00adzeroonstantortoadifereneofaddressesofglobals. Theseefetivelyarethealiasingrulesthatguses.The seondaseisthedefaultoneusedwhenevertheompiler \ndoesnotreorderwritestotheheap.Notethatthislastrule isratherweakinfaeofsophistiatedreorderingofmemory \noperationsbasedonaliasinginformation.Eventhoughthis isnoturrentlyaproblemforgweplantoimprovethis aspetofourheker. \nNotethatsinethereareafnitenumberofparameters introduedbySan,thesimple\u00adonstraintproedureisguar\u00adanteedtobeexeutedonlyafnitenumberoftimes.Thus \ntoensureterminationitissu\u00c6ienttoarrangethesimplif\u00adationproedurestoalwaysterminate. Itisinstrutivetoonsiderinwhatsituationsthesolver \nfails.Ithappensifthesimpliferproeduresarenotaspow\u00aderfulastheompilerinreasoningaboutexpressionequiv\u00adalene,aswouldbetheasewiththeabovesimpliferfor \nmemorystatesintheaseofaompilerthatperformsag\u00adgressivealiasinganalysis.Thus,mostoftheefortinmain\u00adtainingatranslationvalidatorisspentinthesimplifers. \n6ImplementationDetailsandEarlyEx\u00adperimentalResults Weimplementedthetranslationvalidationinfrastrutureto \nhandletheintermediatelanguageoftheGNUCompiler. ThegompilerisaportableoptimizingompilerforC andC++withadditionalfront\u00adendsforFortranandJava. \nWhatmakesganexellentandidateforexperimenting withtranslationvalidationisnotonlytheeasyavailabilityof \nsoureodeanddoumentationbutalsothefatthatituses asingleintermediatelanguage,alledRTL,whoseintended semantisisalsowelldoumented.gstartsbyparsingthe \nsoureodeandtranslatingitdiretlytoRTL.Duringpars\u00adinggperformstypehekingandevensomeoptimizations suhasproedureintegrationandtail\u00adreursionelimination. \nTherestoftheompilerisratheronventional,omposedof amaximumof13passes,dependingonwhihoptimizations areenabled.Typialtransformationsarebranhoptimiza\u00adtion,loalandglobalommonsubexpressionelimination, \nloopunrolling,loopinversion,indutionvariableoptimiza\u00adtions,loalandglobalregisteralloationandinstrution \nsheduling.Severaloftheoptimizations,suhasjumpop\u00adtimizationandommonsubexpressionelimination,arerun multipletimesindiferentpasses. \nAesstotheRTLprogramsanbeobtainedonveniently byinstrutingg(withaommand\u00adlineargument)topro\u00addueaneasy\u00adto\u00adparseRTLdumpaftereverypass.Thisdoes \nresultinlargedumpflesandslowsdowntheompilation onsiderablybutitavoidstheneedtohangeGCC. Weimplementedthetranslationvalidationinfrastruture \nasastandaloneprogramintheObjetiveCAMLdialetof ML.Theimplementationonsistsof10500linesofode.Of those,about2000aretheparserandotherutilityfuntions \nthatwouldnotbeneededforavalidatorthatisintegrated withtheompiler.Thesymbolievaluatorisabout1000 linesandtheSolvemoduleontainingtheequivalenerules \nisabout3000lines.Therestoftheimplementationareded\u00adiatedtoauxiliarytaskssuhasperforminglivenessanalysis \nandonversiontoSSAform.Foromparison,theimplemen\u00adtationofatypialgpassisover10,000linesofCode. Wewroteashellsriptthatinvokesgwithadditional \nommand\u00adlinefagstorequestdumpsofthirteenILfles(one Program Funtions RTLinstrutions Constraints GCC2.91 \n5909 3,993,552 1,597,420 Linux2.2 2627 1,021,555 501,108 GGGv2.91 Branh CSE Loop RA Shed Branhmiss. \n1.2% 1.5% 3.0% 0% 0% Constr. 1.3% 3.5% 3.2% 0.1% 0.01% Time(min) 8.4 7.3 17.3 9.9 8.8 Table1:Sizesofthesoftwaresystemsforwhihweran \ntranslationvalidation. aftereahpass),whihweparseandomparepairwise.This sriptisthenusedasasubstitutefortheCompilerwhen \nbuildingsoftwaresystems,suhastheompileritselforthe Linuxkernel.Asageneralruleweturnonalloptimizations \nsupportedonthearhitetureontheirmostaggressivelevel. Theimplementationfollowsloselythealgorithmsde\u00adsribedinthispaper.Weonstruttheontrol\u00adfowgraph \nandweperformsymbolievaluationofallbloks.During symbolievaluationwealsokeeptrakoftheusedandthe defnedregisters,soweanomputelivenessinformationaf\u00adterwards.Asanoptimizationweareexploringtheuseof \nstati\u00adsingleassignmentformtoreduethenumberofin\u00addependentparametersofbasi\u00adbloktransferfuntionsand thusthenumberoftrivialequalityonstraints.Toprevent \nexessiveuseofmemorywemakesuretosharetherepre\u00adsentationofidentialsubexpressions. Oneofthemostexpensiveoperationstobeperformedby \nouralgorithmissubstitution.ItisusedduringtheSan moduletoolletthesymbolistatewhenfollowingjumps anditisalsousedextensivelyduringthesolvingproedure. \nToredueboththememoryusageandthetimerequired toperformthesubstitutionweusethetehniqueofexpliit substitutions[ACCL91].Insteadofperformingsubstitutions \neagerlywearrythesubstitutionalongwiththeexpressions. Later,whenwetraversetheexpressionandwehitareferene \ntoaregister,wefethfromtheaompanyingsubstitution anotherpairofanexpressionandasubstitutionwithwhih weontinuethetraversal. \nWetestedourvalidatoronseveralsmallexamples(afew hundreduptoathousandlines)allofwhihworkedwithout anyproblems.(Morepreisely,weusedthoseexamplesto \nfndoutwhatisthesetofarithmetiandequivalenerules thatTVImustbeawareof.)FortherealtestwetriedTVI whileompilingthegompileritselfandtheLinuxkernel. \nWeshowinTable1thenumberoffuntionsompiledin eahase,alongwiththetotalnumberofILinstrutions andatypialsampleofthenumberofonstraintsarisingin \nhekingonepass. Wehaveseveralquestionsthatwewanttoaddresswith ourexperiments.Weknowthatsemantioverageisvery \nstrongbydesignbutwewantedtoknowhowinomplete oursystemisatthemoment.Firstwemeasuredtheefe\u00adtivenessoftheBranhmodule.Thenwewantedtoknow \nhowmanyoftheonstraints(eahrepresentingaorret\u00adnessonditionatagivenprogrampoint)annotbesolved intheSolvemodule,asameasureoftheinompletenessof \noursimplifers.ReallthatfailuresoftheBranhmoduleto reognizehangesintheontrol\u00adfowgraphandfailuresof theSolvemoduletosolveandeliminateonstraintstranslate \ndiretlyinfalsealarmsthatompilationisnotorret.Eah alarmmustbeinvestigatedbyahumanandthuswewant toeliminatevirtuallyallfalsealarms.Finally,wewantedto \nknowhowfastthevalidationproessis. Theresultsforvalidatingtheompilationofg2.91are Table2:Asynthesisofthefalsealarmratiosweobserveat \npresentandthevalidationtimeforompilingg,forseveral ofthepasses. showninTable2.TheresultsfortheLinuxkernelaresimi\u00adlar,exeptthatthetimingsareadjustedproportionallywith \nthenumberofonstraintsshowninTable1.Theolumns orrespondtofouroptimizationswhilethelinesorrespond inordertoperentageoffailuresintheBranhmodule,per\u00adentageofunsolvedonstraintsandthetime,inminutes, \ntoompleteonevalidationpassoftheentireompiler,ona PentiumPromahinerunningat400MHz.Thetimingsdo notinludethedumpingandparsingtimeforRTL,again \nintheideathatonewouldintegratethevalidatorinthe ompiler.Wheninludingthosetimesbothompilationand validationareabouttwieasslow. \nTheearlyresultsarepromising.TheBranhmoduleturns outtobequiteefetiveanditfailsmostlyforthefewasesof loopunrollingthatitisnotyetdesignedtohandle.Thereare \nanumberofBranh\u00adrelatedfalsealarmswhenvalidatingthe ommon\u00adsubexpressionphase.Thesealarmsseemtobedue totheBranhmodulenotbeingabletoreognizereliably \nwhensequenesofadjaentonditionalsareeliminated. Theseondlineinthetableshowstheperentageofon\u00adstraintsthatremainunsimplifedafterSolve.Whilethesim\u00adpliferisquitegoodforthebak\u00adendphaseswenotieda \nlargenumberofunsimplifedonstraintswhenvalidatingthe resultofloopunrollingandommon\u00adsubexpressionelimina\u00adtion.Preliminaryanalysisofthetestlogssuggeststhatmany \noftheunsimplifedonstraintsinthisaseareindeednot simplifable.TheproblemisthatafteramistakenBranh resultanumberofinvalidonstraintsaregeneratedbySan. \nWehopethereforethatanimprovementintheperformane oftheBranhmodulewillbringalargeredutionintheratio offalsealarms. \nIntermsoftherunningtimeostoftheTVIweobserved ontheaveragethatthevalidationofoneompilationphase takesaboutfourtimesasmuhastheompilationphase \nitself.IfwealsoaddinthetimetodumptheRTLfles andtoparsethemintotheTVIthetimeisdoubled.We believethatthespeedanbedrastiallyimprovedwitha \nfewoptimizationsintheonstraintsolver(wherealmostall ofthetimeisspent).Forexample,weplantomemoize onstraintsolvingtoavoidsolvingaonstrainttwie. \nAsaquikvalidationofthebug\u00adisolatingapabilitiesof thevalidatorwerantheversion2.7.2.2ofgonaouple ofexampleprogramsthatwereknowntoexhibitbugsin \ntheregisteralloatorandinloopunrolling.Inbothases thebugssurfaedasresidualnon\u00adsimplifableonstraints. ThisisnotsurprisingsineTVIperformssuhathorough \nsemantihek.However,thealarmintheunrollingase wasaompaniedby3otherfalsealarms,andthiswasfor aprogramonly100lineslong.Beforeweanhopeforthis \ninfrastruturetobeomeatuallyusedinpratieweneed toworkonthefalsealarmproblem,espeiallyforloopopti\u00admizations. \n 6.1RelatedWork Theprimaryinspirationforthisworkwastheoriginal workontranslationvalidationbyPnueli,SiegelandSinger\u00adman[PSS98]andourownworkonertifyingompila\u00adtion[NL98,Ne98].Inasensethisprojetanbeseenas \ntaklingthegoalslaidoutin[PSS98]usingthesymbolieval\u00aduationtehniquesfrom[Ne98],intheontextofarealisti ompiler.Additionalinnovationswererequiredtohandle \noptimizationslikespillingandtooveromethelakofassis\u00adtanefromtheoptimizer.Thisismadepossibleinourase byafewkeytehniquesamongwhihthemostimportantis \nsymbolievaluation. Theadvaneofthepresentworkover[PSS98]andother similarwork[C+97,Goe97],isthatthelanguageinvolved \nandtherangeofoptimizationshandledherearemuhmore ambitious.In[PSS98]translationvalidationisappliedtothe \nnon\u00adoptimizingompilationofSIGNALtoC.In[C+97]the ompilertranslatesexpressionsintoafragmentofRTLwith\u00adoutloopsandfuntionalls.Inthisase,andalsoinreent \nworkofKozen[Koz98],validationissimplifedonsiderably byrestritingtheoptimizationssuhthateahsoure\u00adlevel \nonstrutisompiledintoagivenpatterninthetargetode, andnointer\u00adpatternoptimizationsareallowed. Theadvaneoverourownpreviouswork,andsimilarwork \nlikeTIL[TMC+96]orPoporn[MCG+99],isthatwenow attempttovalidatefullsemantiequivaleneofthesoure andtargetasopposedtohekingjustthepreservationof \ntypesafety.Thismakestheurrentworkmorewidelyap\u00adpliable,forexampletoompilersforunsafelanguages,and shouldalsomakeitmoreefetiveinisolatingompilerbugs. \nAlsorelatedisthereentworkofRinardandMari\u00adnov[RM99,Rin99].Thereaompilerproduesomplete proofsofeahtransformationandthevalidatorheksthe \nproofs.Ourformalframeworkbasedonsimulationrelations appearstobesimilarinspirittothatusedin[RM99].More \nfundamentally,ourworkisdiferentinthatitattemptsto validatethetranslationwithnoneorminimalhelpfromthe \nompiler,thusmakingitmoreeasilyappliabletoexisting ompilers.Also,therangeoftransformationsthatwehan\u00addleandthesaleoftheexperimentspresentedherearemore \nambitiousthaninanypreviouswork. Theissueofdetetingequivaleneofprogramfragments wasstudiedbeforeintheontextofmergingprogram \nvariants[YHR92].Theretwoprogramsareonsidered equivalentiftheyhaveisomorphiprogramrepresentation graphs[HPR88,RR89].PRG'shavesomeofthefeatures \nofthesymbolievaluationstepweuseinthattheyignore syntatidetailssuhastheorderofunrelatedinstrutions. However,PRGisomorphismisnotpowerfulenoughtohan\u00addlealltheoptimizationsinrealistiompilers. \n 7ConlusionsandFutureWork Themainmessageofthispaperisthatapratialtrans\u00adlationvalidationinfrastruture,abletohandlemanyofthe \nommonoptimizationsinarealistiompileranbeimple\u00admentedwithabouttheeforttypiallyrequiredtoimplement oneompilerpass,sayommonsubexpressionelimination. \nWedemonstratethisintheontextoftheGNUCompiler foranumberofitsoptimizations.Webelievethisprieis smallonsideringthequalitativeinreaseintheefetiveness \nofompilertestinganderrorisolation. Inanidealworldompilerswillooperatewiththeirtrans\u00adlationvalidatorsbyemittingenoughinformationofwhat \nhappenedtotheode,inordertotakealltheguessworkout ofthevalidator,thussimplifyingandstrengtheningit. Ourworkisnotyetomplete.Astheexperimentaldata \nshowswestillneedtoimprovethevalidatorinordertore\u00adduethenumberoffalsealarms.Wealsoneedtotakeserious ationagainsttherunningtimeofthevalidator.Webelieve \nthatasignifantimprovementispossibleonewememoize allonstraintsthatweregeneratedandproessed. Atthemomentwehandleonlytheintermediatephases \nofg,ignoringtheparserandtheodegenerator.The parserseemsishardertohandlebutisontheotherhand relativelystable.Wedointendhowevertoimplementtrans\u00adlationvalidationforthex86andIA64odegenerators.In \nthelatterase,weneedtoextendtheinfrastruturetohan\u00addleadvanedoptimizationsthatexploitIA64featuressuh asspeulativeexeutionandrotating\u00adregisterfles. \nWehavenotyetimplementedtheodeneessaryforval\u00adidatingorrettranslationofexeptionhandling.Thatwe feelwillbeoneofthestrongpointsofatranslationvalida\u00adtorbeauseexeptionhandlingisbothnotoriouslyhardto \nompileorretlyandveryhardtotest. Wehavenotyetexploredoneofthemajorpotential strengthsofatranslationvalidator,namelytheabilityto \nturn,intheory,aregularompilerintoaertifyingom\u00adpilerthatalsoproduesproofspertainingtothetargetode. Morepreisely,weanimaginethatthesimulationrelations \nthatweinferanbeusedasthebasisfortranslatingas\u00adsertionsandproofsaboutthesoureprogramtoassertions andproofsonthetargetprograms,thusefetivelybridging \nthesemantigapbetweensoureandtargetinasoundway. Inpartiular,onefavorof\"proofs\"thatweouldimagine translatingaretheeasilyavailableproofsofwell\u00adtypedness, \nwiththeultimateefetthatweusethegompilerwith theJavafront\u00adendtoprodueprovablytype\u00adsafenative\u00adode omponents. \n Aknowledgments WewouldliketothankJefFoster,MihaiBudiu,DawnSong, HongWang,KenLuehandMarkWegmanforusefulom\u00admentsonthiswork,ShreeRahulforhishelpwithrunning \ntheexperimentsandChristopherRoseforwritingtheXY\u00adpiLatexpakagewithwhihthediagramsaredrawn.  Referenes \n[ACCL91]MartinAbadi,LuaCardelli,P.\u00adL.Curien,and J.\u00adJLeevy.Expliitsubstitutions.Journalof FuntionalProgramming,1(4):375.416,Otober \n1991. [C+97]AlessandroCimattietal.Aprovablyorret embeddedveriferfortheertifationofsafety ritialsoftware.InComputerAidedVerifa\u00adtion.9thInternationalConferene.Proeedings, \npages202.213.Springer\u00adVerlag,June1997. [CLN+00] ChristopherColby,PeterLee,GeorgeC.Neula, FredBlau,andMarkPlesko.Aertifyingom\u00adpilerforJava.ToappearinProgrammingLan\u00adguageDesignandImplementation,PLDI'00., \nJune2000. [CM75] L.M.ChiriaandD.F.Martin.Anapproahto ompilerorretness.ACMSIGPLANNoties, 10(6):96.103,June1975. \n[Cyg] CygnusSolutions.DejaGnuTestingFramework. http://www.gnu.org/software/dejagnu/dejagnu.html. [Dij76] \nEdsgerW.Dijkstra.ADisiplineofProgram\u00adming.Prentie\u00adHall,1976. [Goe97] WolfgangGoerigk.Towardsrigorousom\u00adpilerimplementationverifation.InRudolf \nBerghammer,editor,Pro.ofthe1997Work\u00adshoponProgrammingLanguagesandFunda\u00admentalsofProgramming,pages118.126,1997. \n[HPR88] SusanHorowitz,JanPrins,andTomReps.On theadequayofprogramdependenegraphsfor representingprograms.InProeedingsoftheFif\u00adteenthAnnualACMSymposiumonthePrini\u00adplesofProgrammingLanguages,pages146.157, \nSanDiego,CA,January1988. [Koz98] DexterKozen.E\u00c6ientodeertifation.Teh\u00adnialReportTR98.1661,CornellUniversity, \nJanuary1998. [MCG+99] GregMorrisett,KarlCrary,NealGlew,Dan Grossman,RihardSamuels,FrederikSmith, DavidWalker,StephanieWeirih,andSteve \nZdanewi.TALx86:Arealistitypedassem\u00adblylanguage.InProeedingsofthe1999ACM SIGPLANWorkshoponCompilerSupportfor \nSystemSoftware,pages25.35,1999. [Mi99] MirosoftCorporation.MirosoftDeveloper NetworkLibrary,Marh1999. \n[Moo89] J.StrotherMoore.Amehaniallyverifedlan\u00adguageimplementation.JournalofAutomated Reasoning,5(4):461.492,Deember1989. \n[Mor73] F.LokwoodMorris.Advieonstruturingom\u00adpilersandprovingthemorret.InProeedings oftheFirstACMSymposiumonPriniplesof \nProgrammingLanguages,pages144.152,1973. [MP67] JohnMCarthyandJamesPainter.Corretness ofaompilerforarithmetiexpressions.InJ.T. \nShwartz,editor,ProeedingsofSymposiainAp\u00adpliedMathematis.AmerianMathematialSo\u00adiety,1967. [Ne98] GeorgeC.Neula.CompilingwithProofs.PhD \nthesis,CarnegieMellonUniversity,September 1998.AlsoavailableasCMU\u00adCS\u00ad98\u00ad154. [NL98]GeorgeC.NeulaandPeterLee.Thedesignand \nimplementationofaertifyingompiler.InACM SIGPLAN'9SConfereneonProgrammingLan\u00adguageDesignandImplementation,pages333. \n344,June1998. [PSS98]AmirPnueli,M.Siegel,andEliSingerman. Translationvalidation.InBernhardStefen,ed\u00aditor,ToolsandAlgorithmsforConstrutionand \nAnalysisofSystems,4thInternationalConfer\u00adene,TACAS'9S,volumeLNCS1384,pages 151.166.Springer,1998. [Rin99]MartinRinard.Credibleompilers.Tehnial \nReportMIT/LCS/TR\u00ad776,MassahusettsInsti\u00adtuteofTehnology,Deember1999. [RM99]MartinRinardandDarkoMarinov.Credible \nompilation.InProeedingsoftheRun\u00adTime ResultVerifationWorkshop,July1999. [RR89]G.RamalingamandThomasReps.Semantis \nofprogramrepresentationgraphs.Tehnial ReportCS\u00adTR\u00ad89\u00ad900,UniversityofWisonsin, Madison,Deember1989. [TMC+96]DavidTarditi,J.GregoryMorrisett,Perry \nCheng,ChrisStone,RobertHarper,andPe\u00adterLee.TIL:Atype\u00addiretedoptimizingom\u00adpilerforML.InPLDI'9eConfereneonPro\u00adgrammingLanguageDesignandImplementa\u00adtion,pages181.192,May1996. \n[WCES94]DanielWeise,RogerF.Crew,MihaelErnst, andBjarneSteensgaard.Valuedependene graphs:representationwithouttaxation.InPro\u00adeedingsofPOPL'94,21stACMSIGPLAN\u00adSIGACTSymposiumonPriniplesofProgram\u00admingLanguages,pages297.310,January1994. \n[WO92]MithellWandandDinoP.Oliva.Provingthe orretnessofstoragerepresentations.InPro\u00adeedingsofthe1992ACMConfereneonLisp \nandFuntionalProgramming,pages151.160, 1992. [YHR92]WuuYang,SusanHorowitz,andThomasReps. Aprogramintegrationalgorithmthataom\u00admodatessemantis\u00adpreservingtransformations. \namTransationsofSoftwareEngineeringand Methodology,1(3):310.354,July1992. [You89]WilliamD.Young.Amehaniallyverifedode \ngenerator.JournalofAutomatedReasoning, 5(4):493.518,Deember1989.  \n\t\t\t", "proc_id": "349299", "abstract": "<p>We describe a translation validation infrastructure for the GNU C compiler. During the compilation the infrastructure compares the intermediate form of the program before and after each compiler pass and verifies the preservation of semantics. We discuss a general framework that the optimizer can use to communicate to the validator what transformations were performed. Our implementation however does not rely on help from the optimizer and it is quite successful by using instead a few heuristics to detect the transformations that take place.</p><p>The main message of this paper is that a practical translation validation infrastructure, able to check the correctness of many of the transformations performed by a realistic compiler, can be implemented with about the effort typically required to implement one compiler pass. We demonstrate this in the context of the GNU C compiler for a number of its optimizations while compiling realistic programs such as the compiler itself or the Linux kernel. We believe that the price of such an infrastructure is small considering the qualitative increase in the ability to isolate compilation errors during compiler testing and maintenance.</p>", "authors": [{"name": "George C. Necula", "author_profile_id": "81100295630", "affiliation": "University of California, Berkeley", "person_id": "PP14109324", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/349299.349314", "year": "2000", "article_id": "349314", "conference": "PLDI", "title": "Translation validation for an optimizing compiler", "url": "http://dl.acm.org/citation.cfm?id=349314"}