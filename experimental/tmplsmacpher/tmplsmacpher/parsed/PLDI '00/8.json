{"article_publication_date": "05-01-2000", "fulltext": "\n ACertifyingCompilerforJava ChristopherColbyPeterLeeGeorgeC.Neula. FredBlauMarkPleskoKennethCline CedillaSystemsInorporated \n4616HenryStreet Pittsburgh,Pennsylvania15213 Hakers CedillaSystems.om Abstrat Thispaperpresentstheinitialresultsofaprojettodeter\u00admineifthetehniquesofproof-arryingodeandertifying \nompilersanbeappliedtoprogramminglanguagesofreal\u00adistisizeandomplexity.Theexperimentshowsthat:(1) itispossibletoimplementaertifyingnative-odeompiler \nforalargesubsetoftheJavaprogramminglanguage;(2) theompilerisfreelyabletoapplymanystandardloaland globaloptimizations;and(3)thePCCbinariesitprodues \nareofreasonablesizeandanberapidlyhekedfortype safetybyasmallproof-heker.Thispaperalsopresents furtherevidenethatPCCprovidesseveraladvantagesfor \nompilerdevelopment.Inpartiular,generatingproofsof thetargetodehelpstoidentifyompilerbugs,manyof whihwouldhavebeendi\u00c6ulttodisoverbytesting. \nIntrodution Inearlierwork,NeulaandLeedevelopedproof-arrying ode(PCC)[11,13],whihisamehanismforensuringthe \nsafebehaviorofprograms.InPCC,aprogramontains boththeodeandanenodingofaneasy-to-hekproof. Thevalidityoftheproof,whihanbeautomatiallyde\u00adterminedbyasimpleproof-hekingprogram,impliesthat \ntheode,whenexeuted,willbehavesafelyaordingto auser-suppliedformaldefnitionofsafebehavior.Later, NeulaandLeedemonstratedtheoneptofaertifying \nompiler[14,15].Certifyingompilerspromisetomake PCCmorepratialbyompilinghigh-levelsoureprograms intooptimizedPCCbinariesompletelyautomatially,as \nopposedtodependingonsemi-automatitheorem-proving tehniques.Takentogether,PCCandertifyingompilers *GeorgeNeula'surrentaddressisComputerSieneDivision, \nUniversityofCalifornia,Berkeley,783SodaHall,Berkeley,CA9 720. tThisresearhwassponsoredinpartbytheAdvanedResearh \nProjetsAgenyCSTOunderthetitle\"Proof-CarryingCodeTeh\u00adnologyforInformationAssurane\",ARPAOrderNo.C533,issued \nbyESC/ENSunderContratNo.F30602-98-C-0277.Theviewsand onlusionsontainedinthisdoumentarethoseoftheauthorsand \nshouldnotbeinterpretedasrepresentingtheo\u00c6ialpoliies,either expressedorimplied,oftheAdvanedResearhProjetsAgenyor \ntheU.S.Government. Permission to make digital or hard copies of all or part of this work for personal \nor classroom use is granted without fee provided that copies are not made or distributed for profit or \ncommercial advantage and that copies bear this notice and the full citation on the first page. To copy \notherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission \nand/or a fee. PLDI 2000, Vancouver, British Columbia, Canada. Copyright 2000 ACM 1-58113-199-2/00/0006 \n$5.00. provideapossiblesolutiontotheodesafetyproblem,even inappliationsinvolvingmobileode[12]. Inthispaper,wepresentthefrstresultsfromaprojet \ntodetermineifPCCandertifyingompilersanbeapplied toprogramminglanguagesofrealistisizeandomplexity. Weshowthat:(1)itispossibletoimplementaertifying \nnative-odeompilerforalanguagethathasobjetsand lasses,user-defnedexeptionsandexeptionhandling,and foating-pointarithmeti;(2)theompilerisfreelyableto \napplymanystandardloalandglobaloptimizations;and (3)thePCCbinariesitproduesareofreasonablesizeand anberapidlyhekedbyasmallproof-heker. \nInthispaper,wesupporttheselaimsbypresentingsome designandimplementationdetailsofanoptimizingompiler alledSpeialJthatompilesJavabyteode[7]intotarget \nodefortheIntelx86arhiteture[5].Whilespaelimita\u00adtionspreventusfromgivingathoroughaountofthedesign andimplementationofSpeialJ,weanillustratethemain \nfeaturesandtehniquesofthesystemthroughtheuseofa runningexample,fousingmainlyonadvanedlanguagefea\u00adturessuhasobjets,exeptions,andfoating-pointarith\u00admeti.Inpartiular,wehopetohighlightthefatthatthe \nompilerandthetargetodeproduedbyitarelargelyon\u00adventional,exeptforasmallnumberofassemblylanguage annotationsthatareusedbytheproof-generationandproof\u00adhekinginfrastruture. \nAfterareviewofsomeofthebakgroundforthisworkin Setion2,wepresentinSetion3asmallJavaprogramthat isthebasisfortheexamplesthatrunthroughouttherest \nofthepaper.Theexample,thoughsmall,isnota\"toy\"in thesensethatitmakesuseofsomeoftheadvanedfeatures ofJava.Withthisexample,weandisussthemainphases \nofertifyingompilation(Setion3),verifationondition generation(Setion4)andfnallyproving(Setion5),with anemphasisontheannotationsproduedbytheompiler \nandthehekingobligationsthatareentailed. ThroughoutthedevelopmentofSpeialJ,weenoun\u00adteredmanysituationswherePCChelpedusidentifyand \nloalizebugsintheompiler.Manyofthesebugswould havebeenextremelydi\u00c6ulttodisoverbystandardtest\u00adingtehniques.Webelievethatthishassavedusmonths \nofdevelopmenttime.Ontheotherhandthefatthatthe ompilermustinsertspeialannotationsintothetargetode introduesnewopportunitiesforbugs.Wetrytogivesome \nfeelforthisdevelopmentproessinSetion6.Finally,we onludewithourplansforfutureworkandsomethoughts ontheprospetsforapratialPCCsystem. \n VC Generator Axioms &#38; Rules Axioms &#38; Rules Proof Checker  Host Code Producer Figure1:ThearhitetureofourPCCimplementation.The \nodeproduerusesaertifyingompilertogenerateanno\u00adtatednativeode.Averifationondition(VC)isthen derivedfromthisandthenprovedbytheproofgenerator. \nTheannotatedodeandprooftogetheronstitutethePCC binarywhihistransmittedtothehost. Bakground Thepurposeofproof-arryingodeistomakeitpossiblefor \nahostsystemtodetermineifaprogramwillbehavesafely, priortoinstallingandexeutingit.Thisisaomplishedby requiringthattheprogram'sproduerprovideevidene,in \nsomeeasy\u00adto\u00adverifyform,thattheprogramiswell\u00adbehaved. Asthenameimplies,thisevideneoftentakestheformof \namathematialproofofasafetyproperty,althoughother formsofevidenearealsopossible.Thepotentialengineer\u00adingadvantageofPCCderivesfromthefatthatitisusually \neasytohekaproofofaprogramevenifgeneratingitisdif\u00adfult.Thus,thehardworkofdeterminingsafetyisshifted fromtheprogram'sonsumertoitsproduer. \nAsapratialmatter,theprogram'sproduerusually hasmoreinformationavailableforreasoningaboutthepro\u00adgram'ssafety,andthusanobtainaproofmoreeasilythan \nanthehost.Forexample,supposeprogramsaretrans\u00admittedfromtheproduertothehostinnative\u00adodeform. Supposefurtherthattheproduergeneratesnativeodeby \nwritingprogramsinatype\u00adsafelanguagesuhasMLor Java.Theproduerthenknowsthat,barringanybugsin theompiler,thegeneratedtargetodeforeahsourepro\u00adgramisalsotype\u00adsafe.Ofourse,ompilersareneverbug\u00adfree.Butbyarrangingfortheompilertoattahenough \nevidene(intheformofaproof)thateahompilationit arriesoutdidinfatpreservetypesafety,anyhostthat reeivesthetargetodeanexaminethisevidenetosatisfy \nitselfthattheodeisinfattypesafe.FollowingNeulaand Lee,werefertothisoneptofaompilerthatautomatially generatesproof\u00adarryingodeasaertifyingompiler[15]. \nFigure1showstheoverallarhitetureofourimplemen\u00adtationofPCC.Ontheleftsideofthefgureweseethe host'spartoftheproess,whihbeginswhenanative\u00adode \nbinaryanditsproofarereeivedfromtheodeproduer.In ordertoensurethatthegivenproofisinfatasafetyproof forthegivenprogram,theexatprediatetobeprovedis \nderivedviaaone\u00adpassinspetionoftheprogram.Theresult\u00adingsafetyprediatehasthepropertythatitslogialvalidity \nimpliesthattheodebehavessafely.Intheterminologyof programverifation,thesafetyprediateisreferredtoas theverifationondition,orsimplyVC,andtheproessof \nderivingitfromtheodeisalledVgeneration[2]. WewillsaymoreaboutthenatureoftheVC'sinthenext setion.However,itisimportanttopointoutthatanum\u00adberofannotationsareprovidedwiththenativeode.Some \noftheseannotationsarepurelyoptionalandserveonlyto simplifyVCgeneration.Ontheotherhand,someannota\u00adtions,suhasloopinvariants,arerequiredinordertomake \nautomatiVCgenerationpossibleatall.Theexamplesof thenextsetionwillillustratebothkindsofannotations. OneaVCisobtained,theproofanthenbeheked \ntoseeifitisinfatavalidproofoftheVC.Theproofs arewritteninalogialproofsystemthatisdefnedbya olletionofproofrules.Thepreisenotionofsafetythatis \nenforedbythesystemisthusdefnedbytheombination oftheVCgenerationproessandthelogialproofrulesthat governwhatanbewrittenintheprediatesandproofs. \nTheproofrules,andtheproofsthemselves,arerepre\u00adsentedinavariantoftheEdinburghLogialFramework (LF)[3].InLF,theinferenerulesoftheproofsystem \naredefnedasanLFsignature.TypehekingtheLFrep\u00adresentationofaproofisthensu\u00c6ientforproofheking. LFisasmalllanguagewhihanbee\u00c6ientlytypeheked \nwithasmallprogram.Furthermore,NeulaandLeeshowed howsometypeinformationanbeelidedfromtheLFterms andthenreonstrutedduringtypeheking[16],thereby \ngreatlyreduingthesizeoftheenodedproofs. TherightsideofFigure1showstheodeproduer'spart oftheproess.Aertifyingompilerisusedtotakeasoure \nprogramwithknownsafetyproperties(typiallyderivedvia typeheking)andthenompileitintoannotatednative ode.Inordertogenerateanappropriateproof,thepro\u00adduerderivesthesameVCthatthehostwillderive,and \nthensubmitstheVCtoaproofgenerator.Theproofgen\u00aderatorthenonstrutstheLFrepresentationoftheproofin thelogialsystemdefnedbytheproofrules. \nAswewillseeintheexampleslaterinthepaper,the annotationsdepositedbytheompilerintothenativeode allowVC'sofapreditableformtobegenerated.Thisfat \nisexploitedbytheproofgeneratorsothatitanbeguar\u00adanteedtofndaproofautomatiallyforanyorretoutput produedbytheompiler.Hene,theombinationofthe \nertifyingompiler,VCgenerator,andproofgeneratoran beviewedbytheprogrammerasa\"blakbox,\"withes\u00adsentiallythesamefuntionalityasaonventionalompiler, \nexept,ofourse,thatthetargetprogramsarryproofs. 3CompilingJavaintoAnnotatedBinaries OurompileraeptslassflesontainingJavabyteodes \nandproduesannotatedx86assemblylanguage.Inthe front\u00adendoftheompilertheprogramisanalyzedtode\u00adterminethelasshierarhyandthelayoutoftheobjets. \nWeuseastandardobjetlayoutwitheahobjetontain\u00adingapointertoadesriptorofthelasstowhihitbelongs. Followingthispointertheobjetontainsspaeforstoring \ntheper\u00adinstanefelds,startingwiththefeldsofthemost distantanestorandendingwiththefeldsaddedbythe lasstowhihtheobjetbelongs.Thelassdesriptortable \n(CDT)ontainsthesamemetainformationthatthelass fleontains,suhasthenumberandtypesoffeldsandthe /*Polynomialobjets \n*/ /*Polynomialroot-findingappliation*/ lassPoly{ publilassRoot{ Poly(float[]oeffiients){ } /*Findtherootofthegivenpolynomial*/ \nstatifloatfind(Polyp,floatpreision, /*Evaluatethepolynomialatx*/ floatx,floatdx) floateval(floatx){ throwsNotFound{ \n } floatterm=1 Of; floatresult=O Of; /*Mainmethodfortheappliation*/ for(inti=O;i<oeffiients length;i++){ \npublistatifloatexample(){ result+=oeffiients[i]*term; floatroot=O Of; term*=x; float[]oeffiients={1 \nOf,1 Of}; } Polyp=newPoly(oeffiients); returnresult; try{ } root=Root find(p,O OOO1f,O Of,O O1f); } \n privatefloat[]oeffiients; ath(NotFoundexn){root=exn val;} /*Exeptioninasenorootisfound*/ finally{returnroot;} \nlassNotFoundextendsExeption{ } }} Figure2:Exerptsofthesoureodeforthesamplepolynomialroot-fndingappliation. \nexample4root4Root:eval4root4PolyF: ;reatefoatarray(elided) pushl%ebp all Jv newFloatArraymovl%esp,%ebp \n;initializearray(elided) movl8(%ebp),%ebx;getthis all Jv bopy movl4(%ebx),%eax;getthisOoe\u00c6ients ;reatePolyobjet(elided) \ntestl%eax,%eax ;nullhek all4root4PolyAFjeL43 ;entertryblokL42:movl4(%eax),%edx;getoe\u00c6ientsOlength ;installath-all \ntestl%edx,%edx ;ifOthenskiploop INSTALL 1HANDLER(CL 4java4lang9Throwable,L51) jleL47 movl-8(%ebp),%eax \nL46:fldsLC1 ;initializeterm movl%eax,-16(%ebp);spillp fldz ;initializeresult movl-4(%ebp),%exxorl%edx,%edx \n;initializei movl%ex,-12(%ebp);spilloe\u00c6ients movl4(%eax),%ex;getoe\u00c6ientsOlength movl$O,-2O(%ebp);initializeandspillroot \njmpL31 ;installathhandler L44:fxh%st(1) ;resultontopofFPU INSTALL 1HANDLER(CL 4root8NotFound,L52) L31:ANN \nLOOP( pushlLC3 ;argOOOlf INV={(ltedx(sel4rm(addeax4))), pushlLCO ;argOOOf(geedxO), pushlLC4 ;argOOOOOlf \n(typef7jfloat), pushl-16(%ebp) ;argp(typef6jfloat)}, allfind4root4RootL4root4PolyXFFF;allfnd MODREG={edi,edx,eflags,esi, \naddl$16,%espfO,f1,f2,f3,f4,f5,f6,f7,fflags}) fstps-2O(%ebp) ;storeresultinroot L38:flds8(%eax,%edx,4);loadoe\u00c6ients[i} \nUNINSTALL HANDLERS(2) ;uninstallath(ath-all fmul%st(2),%st(O);term nop faddp ;result L56:flds-2O(%ebp) \n;fnallyblok fxh%st(1) ;termontopofFPU movl%ebp,%esp fmuls12(%ebp) ;x popl%ebp L36:inl%edx ;i mpl%ex,%edx \n;i<oe\u00c6ientsOlength? ret L52:testl%eax,%eax ;athhandlerblok jlL44 ;loopbakifyes jeL58 ;nullhekonexn jmpL32 \nL57:movl4(%eax),%ebx;getexnOval L47:fldz ;ifskippedloop, movl%ebx,-2O(%ebp);storeintoroot fldz ;result=OOO \nUNINSTALL HANDLERS(1) ;uninstallath-all L32:fxh%st(1) ;resultontopofFPU jmpL56 ;gotofnallyblokfstp%st(1) \n;removeterm L51:flds-2O(%ebp) ;ath-allhandlerblok movl%ebp,%esp ;returnresult movl%ebp,%esp popl%ebp \npopl%ebpret retL43:all Jv ThrowNullPointer L58:all Jv ThrowNullPointerANN UNREACHABLE ANN UNREACHABLEnop \nnop Figure3:TargetodeforthePoly.evalmethod. Figure4:TargetodefortheRoot.examplemethod. 97 numberandsignaturesofmethods.TheCDTalsoontains \napointertothevirtualmethodtable(VMT). Inadditiontothesetablestheompilergeneratesanno\u00adtatedassemblylanguage.Exeptfortheannotationsthe \noutputoftheompilerissimilartothatofonventional ompilers.Inordertodesribetheannotationsandafew moredetailsregardingtheompilationstrategywewilluse \nasampleJavaprogramwhoseodeisshowninFigure2. Threelassesaredefned.ClassPolyimplementspolynomi\u00adals,whiharerepresentedasanarrayofoe\u00c6ients.The \nmethodevalevaluatesapolynomialatagivenvalue.Class Rootprovidesthemainmethod,example,whihreatesa polynomialobjetandtheninvokesthemethodfindto \nsearhforarootofthepolynomial.Ifnorootisfound, thentheNotFoundexeptionisthrown. Theresultofertifyingompilationofthemethodseval \nandexampleisshowninFigures3and4,respetively.These fgures,whihusetheGnusyntaxforx86assemblyode, showthattheoutputofertifyingompilationislargely \nonventional,exeptforannotationssuhasANN LOOPand ANN UNREACHABLE.Thenamesoftheexternalsymbolshave been\"mangled\"sothateahnameinludespakage,lass, \nandtypeinformationtoaidinresolvingoverloadedsym\u00adbols.Also,tosimplifythepresentation,thetargetodefor exampleusestwomaros,whiharedefnedinFigure5. \nIntheodeforeval,theANN LOOPannotationprovides aloopinvariantthatstatesassumptionsontheliveregisters andstakslotsthataremodifedintheloopthatstartsat \nlabelL31.Eahloopinvariantmustdelareasetofon\u00additionsthatarelaimedtoholdeverytimetheexeution reahesthatpointintheprogram.Also,tosimplifythejob \noftheVCgenerator,theloopinvariantannotationmustalso delarethesetofregistersthatmighthangetheirvaluein \nbetweensuessiveexeutionsoftheloop. Onetypialinvariantonditionisatypingdelaration fortheontentsofamahineregister.Forexample,thelast \ntwoonditionsintheloopinvariantstatethatFPUregis\u00adtersf6andf7(addressedbyoperands%st(O)and%st(1) atloopentry)ontainvalidonreterepresentationsofthe \nJavafloattype(i.e.,validIEEEsingle\u00adpreisionnumbers). Intheabseneofoptimizations,aompilerneedonlygen\u00aderatethesekindsofonditions;thisissimpletoahieve. \nForthepurposesofourpresentation,wehavetakenthe outputoftheSpeialJompilerfortheevalmethodandap\u00adpliedfurtherglobaloptimizationsbyhand.Speifally,we \nhavehoistedandeliminatedseveralnull\u00adpointerandarray\u00adboundsheks.(Theodeweshowforexample,onthe otherhand,isexatlytheoutputproduedbySpeialJ.) \nTosupporttheertifationstageinthepreseneofsuh optimizations,wehavealsoaddedthefrsttwoinvariant onditionsshownintheinvariantatlabelL31.Theystate \nthattheedxregisterisgreaterthanorequalto0andless thantheontentsoftheintegerstoredataddresseax4, whihisthelengthoftheoeffiientsarray.Thefun\u00adtionsgeandltarex86signedomparisonoperatorsand \nwillbedisussedfurtherinSetion5.Wewillsaymore aboutloopinvariantsingeneralinSetion4,andaboutthis loopinvariantinpartiularinSetion5. \nToompileexeptionsweuseasetjmp/longjmpsheme. Eventhoughthisshemepenalizesprogramsthatexeute trystatementsbutdonotraiseexeptions,wepreferredit \ntothetable\u00adbasedshemeusedbyotherJavaompilers(and supportedbytheJavaVirtualMahine)beausethetables onsumespaeeveninodethatdoesnotusethem. \nTheexamplemethodshowsatypialodesequenefora try\u00adath\u00adfnallyblok.TheINSTALL 1HANDLERmaro(Fig\u00ad ;Buildandinstallanewexeptionhandler \nmaroINSTALL 1HANDLER(Class,Blok)= all Jv GetExHandler;Geturrenthandlerell ANN SYMBOLADDR pushl$Blok ;odeforthehandler \nANN SYMBOLADDR pushl$Class ;Exeptionlass pushl%ebp ;urrentframepointer pushl$1 ;Numberofathbloks pushl(%eax) \n;Linktooldhandler movl%esp,(%eax) ;Installnewhandler ANN INSTALLEDJAVAHANDLER(Blok) ;UninstallthelastNumexeptionhandlers \nmaroUNINSTALL HANDLERS(Num)= all Jv GetExHandler;Geturrenthandlerell movl<20*(Num-1)>(%esp),%ebx;Getoldhandler \naddl$<20*Num>,%esp ;emovehandlers movl%ebx,(%eax) ;estoreoldhandler ANN UNINSTALLEDJAVAHANDLER(Num) Figure5:Theexeption\u00adhandlermaros. \nure5)showsthatanexeptionhandlerisa5\u00adwordstru\u00adture,storedontherun\u00adtimestak.Annotationsindiate whihimmediatevaluesaretobeinterpretedassymboli \naddresses,andsignaltotheVCgeneratorthepointatwhih theinstallationofanexeptionhandlerhasbeenompleted. \nTheUNINSTALL HANDLERSmaroisusedtopopagivennum\u00adberofhandlersofthestak.Userexeptionsarethrownby arun\u00adtimesystemroutinealled \nJv Throw(notshown here),whihuninstallsallofthehandlersuptoandinlud\u00adingtheonetowhihitthrows.TheUNINSTALL \nHANDLERS maroisthenusedtouninstallanyremaininghandlersprior toexitingthetryblok.Anexeptionthrowrestoresebpto \nthevaluestoredinthehandlerandrestoresesptoitsvalue beforethehandlerwaspushedontothestak. Whileexampledoesnothaveanyloops(andthusno \nANN LOOPannotations),theuseofexeptionhandlersleads toomplexontrolfow.InSetion4.4,wewilldesribe howannotationssuhasANN \nINSTALLEDJAVAHANDLERallow theVCgeneratortoaountforthemanypossibleontrol pathsinthismethod. 4VerifationConditionGeneration \nThedesignoftheverifationonditiongeneratorislargely onventional,asdesribedforexamplein[14].Fortheben\u00adeftofthosereadersnotfamiliarwithverifationondition \ngenerationforunstruturedlanguageswewillbriefyreview belowthemajorissues.Whatdiferentiatesourimplementa\u00adtionofVCgenerationisitsuseofannotationstounderstand \ntheobjetlayout(Setion4.3)andtheontrolfowinthe preseneofexeptions(Setion4.4). 4.1G ossaryofPrediateConstrutors \nFirstwedesribethemeaningofseveralprediateonstru\u00adtorsthatweuseinoursystemtoexpressbothproofobliga\u00adtionsandassumptionsabouttheobjetlayoutandthelass \nhierarhy.Thefollowingareexpressiononstrutors: .jfloat,jintandothersareusedtodenotesymbol\u00adiallythesetofvalidrepresentationsforJavatypes \nfloatandint. .(jarrayT)denotesthetypeofJavaarrayobjets whoseelementshavetypeT. .(jinstofC)denotesthetypeofobjetsthatareom\u00adpatiblewiththelassC.Classesandinterfaesare \ndenotedinassertionsusingthesymbolnameoftheir lassdesriptortable. .(ptrT)denotesthetypeofpointerstovaluesoftype \nT.ThisdoesnotorrespondtoaJavatype. .(addEE.)denotesthe32\u00adbitsignedadditionofE andE..Therearesimilaroperatorsforotherinteger \nandfoating\u00adpointarithmetioperations. .(sel4MA)denotestheontentsofaddressAin memoryM. .(upd4MAE)denotesamemorylikeMbutinwhih \naddressAhasbeenboundtothevalueofE. Thefollowingareprediateonstrutors: .(sizeTB)meansthatthesizeofavalueoftypeT \nisBbytes. .(typeET)meansthatexpressionEdenotesavalue thatisaonreterepresentationforthetypedenoted byT. \n.(ltEE.)meansthatEislessthanE. using32\u00adbit signedomparison.Thereareothersignedomparison operationssuhasle,gt,et. \n.(ultEE.)meansthatEislessthanE. using32\u00adbitunsignedomparison.Thereareotherunsigned omparisonoperationssuhasule,ugt,et. \n.(saferd4E)meansthatitissafetoreadfourbytes startingattheaddressdenotedbyE. .(nonnullE)meansthatEisnotnull. \n.(jextendsCD)meansthatlassCextendslassD. .(jirplerentsCI)meansthatlassCimplements interfaeI. .(vrethodCOS)meansthatamethodwithsigna\u00adtureSisatbyte\u00adofsetOinlassC'svirtualmethod \ntable. .(ifieldCOT)meansthataninstanefeldoftype Tisatbyte\u00adofsetOinanobjetoflassC. TheVCgeneratorknowsthemeaningofsomeofthese \nonstrutorsanditusesthemtoexpressthesemantisof x86mahineinstrutions.Examplesofsuhonstrutors areadd,sel4andlt.Butforthemajorityofonstrutors \ntheVCgeneratordoesnottrytointerpretthem.Instead,it isuptotheproverandtheproofhekertodothisinterpre\u00adtation.Forthispurposetheirmeaningisexpressedinterms \noflogialrulesofinferene,aswillbeshowninSetion5. 4.2OverviewofVCGeneration VCgenerationworkswithrespettoapartiularsafetypol\u00adiy.VCgenerationexaminestheodeandthemeta\u00addata \n(e.g.,lassdesriptorsandvirtualmethodtables)andheks avarietyofsimplesyntationditionssuhasthatthereare \nnojumpsoutsidetheodesegment.WhentheVCgenera\u00adtorenountersoperationsthatouldviolatethesafetypoliy (suhasmemoryoperations)itproduesproofobligations \nthat,ifsatisfed,guaranteethesafetyoftheoperation. Toexamineasingleontrolpath,theVCgeneratorsans thesequeneofmahineinstrutionsfrombeginningtoend. \nAsitsansthepath,itkeepstrakof(A)asetoflogi\u00adalprediatesthatareknowntobetrueatthispointin thesan,and(B)symbolivaluesrepresentingtheon\u00adtentsofeahregister.Inourimplementation,theregisters \narethePentiummahineregistersinludingthefoating\u00adpointregisters(namedf0,...,f7),theondition\u00adodereg\u00adisters(eflagsandfflags),thestakslotsoftheurrent \nframe(namedloi,...,lonwithloibeingthenameof theslotholdingthefrstinomingargumentandlo2that oftheseondinomingargumentorofthereturnaddress \nifonlyoneargumenthasbeenpushedbythealler),and asinglepseudo\u00adregisternamedrrrepresentingtheontents ofallothermemoryloations. \nDuringitssanoftheode,theVCgeneratorperforms thefollowingstepsforeahmahineinstrution: 1.Iftherearesafetyrestritionsontheinstrution(e.g., \nifitaessesmemory),usetheurrentvaluesof(B) tooutputaproofobligationrepresentingasu\u00c6ient onditiontoestablishsafetyforthisinstrution.This \nproofobligationisexpressedasaprediate,andmust beprovedundertheurrentassumptionsin(A). Forexample,iftheVCgeneratorenountersaread \ninstrutionrovl4(%eax),%ebxitwillreatethe proofobligation(saferd4(addeax4)),whereeaxis theurrentsymboliontentsofregistereaxandadd \ndenotesthe32\u00adbittwo's\u00adomplementadditionasper\u00adformedbythex86proessor.Thisproofobligation anbesatisfedwhentheaddress(addeax4)anbe \nprovedreadableundertheurrentassumptionsin(A). (SeeSetion4.1.) TheVCgeneratorreognizesertainpatternsofmem\u00adoryaddressesasstakaddressesandthusasimilarread \ninstrutionrovl-20(%ebp),%ebxwouldbetrated asasimplemoveinstrutionfrompseudo\u00adregisterloi toebxforsomeintegeri.Thevalueofidependsonthe \nnumberofargumentsinthestakframe(seeabove). 2.Iftheinstrutionhangesthevalueofanyregisters, update(B)usingtheurrentvaluesof(B). \nForexample,intheaseofthememory\u00adreadinstru\u00adtionfromabovethesymbolivalueoftheregisterebx beomes(sel4rm(addeax4)),wherermistheur\u00adrentsymbolivalueoftherrregister.Thesel4opera\u00adtorisusedtoonstrutasymboliexpressiondenoting \nthe32\u00adbitwordontained,inagivenmemorystate,at agivenaddress.(SeeSetion4.1.) 3.Ifneessary,update(A)usingtheurrentvaluesof \n(B).Forinstane,followingaonditionalbranhthe VCgeneratorwillgenerateanewprediate(theondi\u00adtionforthatarm)thatwillbeusedasanassumption \nfortheremainderofthepath. Forexample,theodediretlyfollowingthesequene ofinstrutions: mpl%eax,%ebx jlLabel \nwillbeproessedinthesopeofanadditionalassump\u00adtion(geebxeax),whereeaxandebxaretheurrent symboliontentsoftheregisterseaxandebxrespe\u00adtively.Heregedenotestheresultoftheomparison \nperformedbythex86onditionalbranhinstrution jge(i.e.,whenthejlbranhisnottaken). AbovewehaveseenhowtheVCgeneratorsansasingle \nontrolpath.Essentially,itisenodingtheoperationalse\u00admantisofthemahinearhiteture(Pentiuminthisase). ButVCgenerationmusthaveawaytohandlesituationsin \nwhihtherearealargeorinfnitenumberofdistintpaths (e.g.,asadedif\u00adthen\u00adelsestrutures,loopswithexits),and \ninwhihpathshavenon\u00adloalontrol(e.g.,methodalls). Thesolutiontoalloftheseasesisfundamentallythesame: breakthepathswithlogialinvariantsatappropriateloa\u00adtions. \nWhentheVCgeneratorenountersintheodeananno\u00adtationoftheform ANN LOOP(INV=P,MODREG=R) itknowsthatitisattheentrypointofaloop,thatthe \nsetofprediatesPareinvariantsoftheloop,andthatonly registersmentionedinthesetRanbemodifedaroundthe loop.Whenasanofaontrolpathhitsanannotationof \ntheaboveform,itperformsamodifedformofthethree VC\u00adgenerationstepsdesribednearthebeginningofthis setion: \n1.Aproofobligationisgeneratedbysubstitutingtheur\u00adrentregistervaluesintoP.Thisensuresthatthis partiularontrolpathindeedestablishestheinitial \ninvariantondition. 2.ForeahregisterrER,thesymbolivalueofrisset toafreshopyofr.Thesevaluesaregivennameslike \neax 3ifthisisthethirdfreshopyofregistereax.For allotherregistersr. thatdonothangeintheloop, thesanrememberstheurrentsymbolivalueofr. \nin ordertoverifylaterthatr. wasindeedleftunmodifed bytheloop. 3.Anassumptionisgeneratedfortheremainderofthe \nsanbysubstitutingtheregistervaluesomputeiithe previousstepintoP.Thisistheinvariantassumption. Thenthesanontinues.Ifiteverhitstheaboveloopanno\u00adtationagain,thesanstops,aproofobligationisgenerated \nexatlyasdesribedabove,andinadditionforeahregister r. R,aproofobligation(=ee.)isgenerated,wheree E wasthesymbolivalueofr. \nthatthesanrememberedat theloopentry,ande. istheurrentsymbolivalueofr. .. Notethattheloop\u00adinvariantannotationisnottrusted. \nItmerelyfuntionsasa\"hint\"totheVCgenerator,whih thenverifesthattheinvariantdoesindeedhold.Thisis anexampleofthepriniplethatnothingintheuntrusted \nbinaryistrusted,noteventheannotations. .UnlessabugintheompilerausedittooutputabadsetR, theexpressionseande. \nshouldalwaysbesyntatiallyequivalent. Beausethisaseissoommon,theVCgeneratorhekssyntati equivaleneanddoesnotoutputtheproofobligationinthisase. \nThereisasimilarinvariantmehanismthattheompiler aninsertatpointsofhighbranhingorjoinfators,orat joinsofasadedif\u00adthen\u00adelsestatements,inordertoprevent \nthepossibilityofexponentialblowupofexpandingaDAG intoatreeofpaths. TheorretnessoftheVCgenerationstrategydesribed \nhereisprovedin[14]. 4.3HandlingofClassMeta-data BeforetheVCgeneratorsansthebodyofamethodit examinesthedesriptionofthelassesontainedinthe \nsannedexeutable.Firstitheksthewell\u00adformednessof thelassdesriptiontablesusingaproeduresimilartothe orrespondingstageintheJavabyteodeverifer[7]. \nThentheVCgeneratorinitializesthesetofassumptions (A)thatwillbeusedwhileertifyingtheode.Foreahlass intheexeutableandeahlassinthehost\u00adresidenttrusted \nlibrary(e.g.,theJDK),theVCgeneratorreatesassump\u00adtionsabouttheobjetlayout(usingifieldprediates), aboutvirtualmethodtablelayout(usingvmethodpredi\u00adates),abouttheurrentlasshierarhy(usingjextends \nandjimplementsprediates),andothers.(SeeSetion4.1.) Intuitively,theseassumptionswillallowtheertifationof \nfeldaess,virtualmethodinvoationandastinginthe untrustedode.Examplesofsuhinitialassumptionsand howtheyareusedwillbegiveninSetion5. \n4.4HandlingofExeptions VCgenerationmustexamineallpossibleontrolpathsofa program.Exeptionsintroduenewontrolpaths.Consider \ntheexampleobjetodeinFigure4.Thereareninepossible ontrolpathsfromthealloffindtoaretinstrution: 1.Allodeterminatesnormally. \n2.findthrowsaNotFoundexeptiontotheathhan\u00addler,whih... (a)terminatesnormally. (b)throwsNullPointerExeption. \n()throwsanexeptionwhileuninstallingtheath\u00adallhandlerduringtheallto Jv GexExnHandler. 3.findthrowsaThrowableobjet(otherthanaNotFound \nexeption)totheath\u00adallhandler 4.findterminatesnormally,butthrowsanexeption whileuninstallingtheathandath\u00adallhandlersdur\u00adingtheallto \nJv GetExnHandler.(Symmetrito ases2and3.) Cases2and4shouldneverhappenwithawellbehavedrun\u00adtimesystem.Nevertheless,thesymbolievaluatorintheVC \ngeneratordoesnotdiferentiatebetweenallstountrusted odeandallstotrustedodesuhas Jv GexExnHandler. Instead,itonservativelyassumesthatanyallmaypoten\u00adtiallythrowanyexeption. \nTheVCgeneratorkeepstrakoftheseontrolpathsby maintainingastakofinstalledhandlersasitsanstheode. TheompilerhelpstheVCgeneratordothisbyannotating \ntheplaeswherethehandlersareinstalledanduninstalled. ThefollowingannotationsareshowninFigure5: ANN INSTALLEDJAVAHANDLER(H.Hk)tellstheVC \ngeneratorthatthemahineinstrutionimmediately preedingthisannotationisamemorywritethatin\u00adstallsahandlerdesriptorontainingasequeneofk \nhandlerswhoseodebeginsataddressesHHk. . Thisannotationisusedtoinstalltheexeptionhan\u00addlersinatrystatementwithkathbloks. \n.ANNUNINSTALLEDJAVAHANDLER(n)tellstheVCgener\u00adatorthatthemahineinstrutionimmediatelypreed\u00adingthisannotationisamemorywritethatuninstalls \nnhandlerdesriptors. Forinstane,onsideragaintheodeinFigure4.Atthe pointofthealltofind,theVCgeneratorknowsfromthe \ntwopreedingANN INSTALLEDJAVAHANDLERannotationsthat handlersatlabelsL51andL52havebeenpushedontothe globalstakofativehandlers.Therefore,thealltofind \nmayresultinanimmediatetransferofontroltoL52(ase2 above)ortoL51(ase3above),inadditiontothepossibility \nofanormalreturn(ases1and4).TheVCgeneratoron\u00adsidersallofthesepathsasifthefuntionallweresueeded byaftitiousmultiwaybranhinstrution.Additionally, \nbeforeproeedingtoonsidereahoftheurrenthandler instrutions,theVCgeneratoraddstheassertionthatthe registereaxontainsaninstaneoftheexeptionlasshan\u00addledbytherespetivehandler. \nTheannotationsforinstallinganduninstallingexeption handlershaveyetanotherpurpose.Reallfromthedisus\u00adsionatthebeginningofthissetionthattheVCgenerator \nmakestheassumptionthatthestakslotsarenotaliased. Withthisassumptionitissoundtoonsiderthestakslot asanextensionoftheregisterfleandnotasarbitrarymem\u00adoryloations.Thissavesalargenumberofmemorysafety \nproofobligationsandalsoefetivelyundoesthemodifa\u00adtionstotheprogramthataspillerintheregisteralloation phasemighthavedone.Toensurethatthisnon\u00adaliasingas\u00adsumptionissoundtheVCgeneratordoesnotallowsaving \ntoarbitrarymemoryloationsofregistersthatareknown toontainstakaddresses.. Inourompilationshemeforexeptionsthelongjmp \ndatastrutureisstoredonthestak(toallowsafeoper\u00adationinthepreseneofmultiplethreads)andtheinstal\u00adlationofanewhandlerinvolvesstoringtheaddressofthe \ntopmosthandlerintoaper\u00adthreadglobalvariable(whosead\u00addressisreturnedbythe Jv GetExHandler).Thisisdone \ninourexamplebythelastinstrutionintheexpansionofthe INSTALL 1HANDLERmaroshowninFigure5.Thusanother purposeoftheANN \nINSTALLEDJAVAHANDLERannotationisto marksuhspeialmemorywrites.Intheabseneofthe annotationtheVCgeneratorwouldstopandomplainthat \nitsnon\u00adaliasingassumptionsaboutthestakframemightbe violated. 5CertifyingtheAnnotatedBinaries Itisbeyondthesopeofthispapertodesribetheertifa\u00adtionoftheentireroot\u00adfndingprogram.Instead,wefousin \ndetailonthehand\u00adoptimizedloopintheevalmethod.The ertifationproessforthissegmentisshowninFigure7. Forsimpliity,thefxhinstrutionattheloopentryhas \nbeenmovedtoPC119;thishasnoefetonVCgeneration, butmakestheontrolfowoftheexampleeasiertodisuss. FirstweexplainsomenotationusedinFigure7.There \narethreeolumnsinthefgure.Thefrstolumnshows asingleontrolpaththroughafragmentofdisassembled .Thisdoesnotinludethememoryloationsthatareknowntobe \ninthestakframe.Theyareonsideredjustlikeextraregisters. objetode.TheseondolumnshowstheVCgeneration alongthisontrolpath.Thethirdolumnshowsthegener\u00adatedproofoftheVC.ReallfromSetion4.2thethreesteps \nthatVCgenerationperformsoneahmahineinstrution. Theproofobligationsthatstep1outputsarelabeledwith \"prove:\"inthefgure.Thishappensattwopoints: \n.Thefldsinstrutionreadsanarrayelement.The safetypreonditionsforthismemoryreadgeneratetwo proofobligations,whihareshownimmediatelyabove \nthefldsinstrution. .Atthejlinstrution,theontrol\u00adfowpaththattakes thebranhmustreestablishtheloopinvariant.The \nresultingfourproofobligationsareshownbelowthejl instrution.(SeeSetion4.2forfurtherexplanationof loopinvariants.) \nTheassumptionsthatstep3generatesarelabeledwith\"An\" inthefgure.Reallthattheseassumptionsholdforthere\u00admainderofthepath;hene,theyarelabeledsothesafety \nproofanusethem.Assumptionsaregeneratedattwo points: .Theloopinvariantsuppliesfourassumptions(A37. A40)fortheloopbody.Theseareshownimmediately \naftertheANN LOOPonstrut.(SeeSetion4.2forfur\u00adtherexplanationofloopinvariants.) .Atthejlinstrution,theontrol\u00adfowpaththattakes \nthebranhgeneratesanassumptionfromtheurrent symboliondition\u00adodeinformation.Thisassump\u00adtion(A41)isshownimmediatelyafterthejlinstru\u00adtion. \nThereare36additionalassumptions(A1.A36)thatareal\u00adreadyinsopebythetimethattheVCgeneratorreahes theodeshowninthefgure.Sixofthese(A10andA30.A34) \nareneededintheproofsandthusareshowninthefgure beforetheloopentry.Step2,whihperformsthesymboli exeutionoftheode,isnotshowninFigure7duetolak \nofspae.SeeSetion4.2forfurtherinformationaboutloop invariantsandotherdetailsofVCgeneration. ReallfromthedisussionofloopinvariantsinSetion4.2 \nthattheVCgeneratorreatesfreshopiesofeveryregisterin theMODREGsetduringtheVCgenerationoftheloopbody. Thisiswhytherearesubsriptedformsofregisternames \nsuhaseax 3intheexample. AfterVCgeneration,theproofgeneratorertifesthe safetyobligationsoutputduringstep1ofVCgeneration. \nThefguresshowtheseproofsnexttotheirrespetiveobli\u00adgations.Theproofsarebuiltuponthelabeledassumptions insope.Theproofrulesusedintheseexamplesareshown \ninFigure6.TheyaregiveninanabridgedformofElf[17], animplementationLF[3].IntheurriednotationofElf, theinputsarethepremisesandtheoutputistheonlu\u00adsion.Thenotation\"pfP\"meansaproofofprediateP. \nIntheseproofrules,aapitalizedvariableisonsideredto beuniversallyquantifed. Forexample,onsidertheproofof \n(type(frulf7 3lo1 1)jfloat) nearthebottomofFigure7.Theproofistheappliation ofaxiomfrulftotwoarguments,A39andA33.Consulting \nFigure6,frulfisaurriedtwo\u00adargumentfuntionovertwo universallyquantifedvariables(denotedbyapitalletters), \nEandE'.Thisfuntion,whengivenproofsoftheprediates (typeEjfloat)and(typeE'jfloat),yieldsaproofof instFld:pfpfpfpf \ntyField:pfpfpf rdArray4:pfpfpfpfpfpf tyArray4:pfpfpfpfpfpf (type(fmul ation(fmul) (ifieldCOFFT)-> faddf:pf(typeEjfloat)->pf(typeE'jfloat)-> \n(typeE(jinstofC))-> pf(type(faddEE')jfloat). (nonnullE)-> (type(addEOFF)(ptrT)). fmulf:pf(typeEjfloat)->pf(typeE'jfloat)-> \n (typeADDR(ptrT))(typeMmem)-> (type(sel4MADDR) (typeA(typeM(nonnull(sizeT(arridx(saferd4 (typeA(typeM(nonnull(sizeT(arridx(jarrayT))mem)-> \nA)-> 4)-> OFF4(sel4 pf(type(fmulEE')jfloat). -> szfloat:pf(sizejfloat4). T). geswap:pf(geEE')->pf(leE'E). \n-> lt b:pf(le0E)->pf(ltEE')-> pf(ultEE'). M(addA4)))-> ge add1:pf(ltEE'')->pf(geEE')-> (addAOFF)). pf(ge(addE1)E'). \n(jarrayT))-> sub0hk:pf(neqE0)->pf(nonnullE). mem)-> A)-> below1:pf(ultILEN)->pf(belowILEN). 4)-> OFF4(sel4M(addA4)))-> \naidxi:pf(belowILEN)-> (type(sel4M(addAOFF))T). pf(arridx(add(imulISIZE)8)SIZELEN). Figure6:TheproofrulesusedinFigure7. \nEE')jfloat).Inotherwordsthemultipli\u00adofanytwoJavafoatsisaJavafoat.Inthis ase:Eisf7 3,andassumptionA39istheproofofitstype; \nE'islo1 1,andassumptionA33istheproofofitstype. WenowdesribetheertifationexampleinFigure7 indetail.TorelatebaktoSetion4.3,theexamplesin \nthissetiondonotillustrateanyglobalinitialassumptions, buttheydoillustrateassumptionsthattheVCgenerator \nextratsfromtheClassDesriptionTables(CDTs)ofun\u00adtrustedode.AssumptionA10ofFigure7wasprodued bytheVCgeneratorwhenitsannedtheCDTofthePoly \nlass.Thisassumptionsaysthatthereisaninstanefeld thatisanarrayoffoatsatbyte-ofset4withinaPolyob\u00adjet.(ReferringtotheJavasoureinFigure2,thisisthe \noeffiientsfeld.) ThisloopbeginsatPC109(orlabelL31inFigure3) withaninvariantprediatethatisparsedfromanANN \nLOOP annotation(originallyshowninFigure3)intheobjetfle. Theinvariantsays(1)thatfoating-pointregistersf6,whih \nholdssourevariableterm,andf7,whihholdssourevari\u00adableresult,areindeedloadedwithjfloatvalues;and(2) thatedx,whihholdssourevariablei,isnonnegativeand \nlessthanthevalueinmemoryloation(addeax4),whih isthelengthofthethis.oeffiientsarray.Registereax holdsthis.oeffiients,andanarrayobjetstoresits \nlengthatbyte-ofset4anditsomponentsstartingatbyte\u00adofset8. Thisinvariantmustbeestablishedeverytimeontrol \nfowstoPC109.Thisanhappenintwoways:during initialloopentryandthroughtheonditionaljumpfrom PC121.Figure7doesnotshowhowtheloopinvariantis \nestablisheduponinitialloopentry;rather,itillustratesthe ontrolpaththatbeginsatPC109withtheloopinvariantas \nanassumption(assumptionsA37.A40)andendsbakatPC 109withtheloopinvariantasaproofobligation(thefour proofobligationsshownaftertheendoftheodesegment). \nThereisasubtletyinassumptionA37.Whereasalmostall oftheregistersintheloopinvariantwerereplaedbyfresh subsriptedformsofthemselvesinassumptionsA37.40(for \nreasonsdisussedearlierinthissetion),registereaxwas replaedby(sel4rm 1(addlo2 14)).Thereasonis that,unliketheotherregistersthatappearintheinvariant, \neaxisnotmodifedaroundtheloop.Thisfatisgiven aspartoftheANN LOOPannotationintheobjetfle:eax isnotinludedintheMODREGsetandisthusmarkedas \nunmodifedbytheloop.(SeeFigure3fortheMODREGset ofthisinvariant.)AsdesribedaboveandinSetion4.2,for everyregisterintheMODREGset,theVCgeneratorreates \nafreshsubsriptedformoftheregisteratthebeginningof theloop.ButforeahregisterthatisnotintheMODREG set,theVCgeneratorstartsthesanoftheloopbodywith \nthesymbolivalueofthatregisteruponloopentry,and thenverifesoremitsaproofobligationattheendofthe loopthatitssymbolivaluedidnothange(andheneis \nvalidforallloopiterations).Inthisase,eaxholdsthe hoistedomputationofthethis.oeffiientsfeld,whih isatbyte-ofset4fromthis.(thiswaspassedinstakslot \nlo2.) Asexplainedabove,assumptionA10givestheloation andtypeofthis.oeffiients.Also,therearesomerele\u00advantassumptionsthatweregeneratedbeforetheloopentry: \nlo2(this)isanonnullobjetthatisJava-astabletoPoly, lo1(x)isajfloat,andthevalueatbyte-ofset4oflo2 (this.oeffiients)isnot0.Thislastassumptioname \nfromanullhekthatwashoistedoutoftheloop,soit shouldnotbesurprisingthatitwillbeneededtoertifythe loop. \nThefrstinstrutionintheloopisamemoryreadof this.oeffiients[i]intothefoating-pointunit.This instrutioninduestwoproofobligations.First,theaddress \nmustbesafetoread;seond,itsvaluemustbeajfloat. Theproofsofthesetwoobligationsarefairlyintriate,but oneangetaquikintuitionforthembyignoringtheproofrulesandjustlookingattheassumptionstheyuse.Inthis \nase,theyuseA10(loationandtypeoftheoeffiients feld),A30.A32(thisisanonnullobjetthatisJava-astable toPoly),A34(enoughtoprovethatthis.oeffiientsisnonnull),andA37.A38(enoughtoprovethatedxisin \nbounds). Afterthefoating-pointomputations,wetraethepath thatloopsbaktoPC109,henegeneratingassumptionA41 \nOBJECTCODE VCGENERATION PROOFGENERATION A10:(ifield CL 4root4Poly4 (jarrayjfloat)) A30:(typerm 1mem) \nA31:(nonnulllo2 1) A32:(typelo2 1(jinstof CL 4root4Poly)) A33:(typelo1 1jfloat) A34:(neq(sel4rm 1(addlo2 \n14))0) (L31:) 109:ANN LOOP( INV={ (lt edx (sel4rm(addeax4))), (geedx0), (typef7jfloat), (typef6jfloat)}, \n MODREG=) A37:(lt edx 3 (sel4rm 1 (add(sel4rm 1(addlo2 14))4))) A38:(geedx 30) A39:(typef7 3jfloat) \nA40:(typef6 3jfloat) prove:(saferd4 (rdArray4 (add(sel4rm 1(addlo2 14)) (tyField(instFldA10A32A31)A30) \n(add(imuledx 34)8))) A30(sub0hkA34)szfloat (aidxi4(below1(lt b(geswapA38) A37)))) prove:(type(sel4rm \n1 (tyArray4 (add(sel4rm1(addlo2 14)) (tyField(instFldA10A32A31)A30) (add(imuledx 34)8))) A30(sub0hkA34)szfloat \njfloat) (aidxi4(below1(lt b(geswapA38) flds8(%eax,%edx,4) A37)))) 10d:fmul%st(2),%st(0) 10f:faddp 111:fxh%st(1) \n113:fmuls12(%ebp) 116:inl%edx 117:mpl%ex,%edx 119:fxh%st(1) 121:jl109 A41:(lt(addedx 31) (sel4rm 1 (add(sel4rm \n1(addlo2 14)) 4))) prove:(lt(addedx 31) A41 (sel4rm 1 (add(sel4rm 1(addlo2 14)) 4))) prove:(ge(addedx \n31)0) (ge add1A37A38) prove:(type(fmulf7 3lo1 1)jfloat) (fmulfA39A33) prove:(type(fadd (faddf (fmul (fmulf \n(sel4rm 1 (tyArray4 (add(sel4rm 1(addlo2 14)) (tyField(instFldA10A32A31)A30) (add(imuledx 34)8))) A30(sub0hkA34)szfloat \nf7 3) (aidxi4(below1(lt b(geswapA38) f6 3) A37)))) jfloat) A39) A40) Figure7:Theertifationofthehand-optimizedloopinPoly.eval. \n103 thatstatesthataninrementofedxby1isstilllessthan thelengthofthis.oeffiients. Finally,theVCgeneratoroutputsthefouronditionsto \nreestablishtheloopinvariant.Provingthatthenewvalues off6andf7areoftypejfloatisstraightforward,using standardproofrulessuhasfaddfandfmulftodesend \nindutivelyintotheirsymbolistrutureandbuildontop oftheinitialtypesoff6andf7andthetypeofthea\u00adessedarrayelement.Butprovingthat(addedx1)isstill \nnonnegativeissubtlebeauseof32\u00adbitmodulararithmeti. Henethege add1proofruleshowninFigure6.Thisrule intuitivelysaysthatifthereexistssomenumberE''thatis \nbiggerthanEusingsigned32\u00adbitomparison,thenadding 1toEusingsigned32\u00adbitarithmetiwillnotauseitsvalue .231 \ntooverfowandbeome.Eventhoughtheunderly\u00adingdomainoflogialvaluesisthesetofintegers,thespe\u00adialx86operatorssuhassubltandaddastthemto \ntheappropriatesignedorunsigned32\u00adbitnumbers.Forin\u00ad 3132231 stane,(subltxy)meansthat(x2)mod2.< 3132 (y2)mod2.231SeeSetion6foranexampleofhow \nthisruleprotetsagainstanunsafeoptimization. Theproofoftheentireevalmethod(notjustthisloop) is246bytes. \n6DevelopingaPCC-generatingCompiler Theprevioussetionshintattheomplexityandtediumof reasoningabouttheorretnessofanoptimizingompiler \nandrun\u00adtimesystemforarealistiprogramminglanguage. Inthissetion,wedemonstratehowPCChelpstoautomate thisdetailedreasoningthatotherwisemustbedonebyhand. \nOfthefourmainomponentsofourPCCsystem,only theVCgeneratorandproofhekerareusedbythehost.In otherwords,thesetwoomponents,whihwerefertoasthe \nPCCinfrastruture,mustbeinorporatedintothetrusted omputingbaseofthehost.Thus,theirorretnesshasadi\u00adretbearingonsafety.Theompilerandproofgenerator,on \ntheotherhand,makeuseofthePCCinfrastruturetohek everytargetprogramandproofthattheyprodue.Hene, safetyviolationsthatresultfromompilerandproofgener\u00adatorbugswillalwaysbeaughtbeforetransmittingthemto \nthehost,assumingnobugsinthePCCinfrastruture. Forthisreason,itisimportantthatthePCCinfrastru\u00adturebesimpleandsmall.TheurrentVCgeneratoriswrit\u00adteninCandonsistsofapproximately23Klinesofode. \nAbout2.5Klinesofthisisaplug\u00adintothemainVCgen\u00aderatorthatimplementsJavaonstruts.Another4Klines orsoimplementalargelygenerisymbolievaluatorforthe \nx86instrutionset,andtheremainderisspreadovertasks suhasdebuggingassertions,binary\u00adfleparsing,LFrepre\u00adsentation,andsoforth.Theurrentproofhekerisalso \nwritteninabout1.4KlinesofCode,inludingdebugging assertions.Itislargelyunhangedfromtheproofheker desribedin[14],andisgeneriwithrespettothesetof \nproofrules.ForoururrentJavasystem,weuseaproof systemdefnedinabout130rules,takingupabout700lines ofLFspeifation.Takenalltogether,thePCCinfrastru\u00adture,inludingboththeVCgeneratorandtheproofheker, \nompilesandlinksintoasingle52KBexeutable.Allline ountsinludewhitespaeandomments. Theompilerisimplementedinabout33KlinesofML \node,andtheproofgeneratorinabout9Klines.Bothom\u00adponentsarestillunderheavydevelopment,andheneare growingsteadily.Theompilerhasbeenunderdevelopment \nforapproximately12monthsbytwofull\u00adtimeprogrammers, withsomeontributionsbyasmallnumberofpart\u00adtime programmers.Theproof\u00adgeneratorhasbeenunderdevel\u00adopmentforabout5monthsbyonefull\u00adtimeprogrammer. \nPartoftherapidityofthedevelopmentproessanbe attributedtoouruseoftheMLlanguage(speifally,the ObjetiveCamldialet[6]).However,amajorfatorhas \nalsobeenouruseoftheproofgeneratorasadebugging tool.Inpartiular,wehaveobservedthatmanybugsin theompilerandinourunderstandingoftherun\u00adtimesys\u00adteminterfaeareexposedbytheproofgenerationproess. \nFurthermore,thedebuggingoutputproduedbytheproof generatoroftentimesallowsustoidentifyquiklythenature \nofthebug.Manyofthesebugswouldhavebeenextremely di\u00c6ulttounoverbystandardtestingtehniques.There\u00adfore,webelievethatPCChassaveduspossiblymanyweeks \nofdevelopmenttime. Toillustratethispoint,onsiderFigure8,whihshows exerptsofthediagnostioutputofourproofgenerator \nwhenbugsareinsertedintothetargetodefortheeval method. Figure8ashowstheoutputwhenthefaddpinstrution withintheloopinFigure7isreplaedbyasimilarfoating\u00adpointaddthatfailstopoptheFPUstak.Thiswouldbe \natypialmanifestationofabuginwhihtheregisterallo\u00adatorlosestrakofthestateoftheFPUstak.TheVC generatorusesaregisternamedftoptodenotetheposi\u00adtionoftheFPUstakpointer.Inthisase,thepositionof \nftopaftereahiterationoftheloopisofbyone.However, ftopwasnotintheMODREGsetintheloopinvariantand sotheVCgeneratormustensurethatthevalueofftopis \npreservedbetweenloopiterations.Withtheorretode showninFigure7,theVCgenerator'ssymbolievaluation produedavalueof6forftopbothattheloopentryand \nafteroneiteration.Butwhenthefaddpinstrutionisal\u00adteredasdesribedabove,theVCgeneratoroutputsthead\u00additionalproofobligation(=56)beausethevalueofftop \nattheendoftheloopbodyhashanged(to5)andmust beprovenequaltothevalueatthebeginningoftheloop body(6).Theproofgeneratoroutputsadiagnostiexplain\u00adingthatitannotprovethisprediate,reportswhereinthe \nodethisproofobligationis(0x0109,whihistheloation oftheloopinvariant),anddesribesthekindofproofobli\u00adgation(CKINVEQ,whihmeansanequalityprediateindued \nbyaregisternotmarkedasmodifedintheMODREGsetof aninvariant).Inourexperiene,registeralloationbugs ofthissortalmostalwaysresultinsuhnonsensialproof \nobligations. Figure8bisanexampleofaode\u00adgenerationbugout\u00adsidethesopeFigure7,sothereadermustrefertoFigure3, \nwhihshowstheentireodefortheevalmethod.BlokL32 istheblokthatreturnstheresultofthemethod;thisblok assumesuponentrythatloalvariabletermisontopof \ntheFPUstakandthatloalvariableresultisthenext valueintheFPUstak.TherearetwowaysthatL32an bereahed.The\"normal\"aseisviathejmpinstrutionat \ntheloopexit.The\"rare\"aseisfromblokL47immedi\u00adatelybeforeit.Therareasehappenswhenevalisinvoked onapolynomialwithalength\u00ad0oeffiientsarray.In \nthisase,thejleinstrutioninblokL42skipstheloop altogether.Butatthispointnoteventheinitialvaluesfor termandresulthavebeenpushedontotheFPUstak. \nTherefore,blokL47isompensationodethatputsthe FPUstakintoaonsistentstatebyloading0.0valuesfor termandresultbeforejoiningupwiththe\"normal\"ase \natL32.Figure8bshowswhathappenswhenoneofthefldz instrutionsinblokL47isdeleted.Thisisanexampleof abugintheompensationroutineoftheregisteralloator. \n Failedtoproveeval4root4PolyF... Failedtoproveeval4root4PolyF... At%!COMMCKINVEQOxOlO9... At%!COMMRETOxOl26... \nUnderassumptions[...]... Underassumptions[...]... Couldnotprove(=56) Couldnotprove(typefO ljfloat) (a) \n(b) Figure8:Proofgeneratordiagnostiswhen(a)thefaddpintheloopinFigure7isreplaedbyfadd%st,%st(1),and(b) \noneofthefldzinstrutionsinblokL47inFigure3isremoved. ANN LOOP(INV= edx(sel4rm(addeax4))),(geedxO),(typef7jfloat),(typef6jfloat)} \nMODREG=...) Failedtoproveeval4root4PolyF At%!COMMMEMRDOxOlO9... Underassumptions [..., (typelol ljfloat), \n(nonnulllo2 l), (typelo2 l(jinstof CL 4root4Poly)), (neq(sel4rm l(addlo2 l4))O), (leedx 3(sel4rm l(add(sel4rm \nl(addlo2 l4))4))), (geedx 3O), (typef7 3jfloat), (typef6 3jfloat)]... Couldnotprove (saferd4(add(sel4rm \nl(addlo2 l4))(add(imuledx 34)8))) Couldnotprove (arridx(add(imuledx 34)8)4(sel4rm l(add(sel4rm l(addlo2 \nl4))4))) Couldnotprove (belowedx 3(sel4rm l(add(sel4rm l(addlo2 l4))4))) Couldnotprove (ultedx 3(sel4rm \nl(add(sel4rm l(addlo2 l4))4))) Figure9:ProofgeneratordiagnostiwhenltisreplaedbyleintheloopinvariantofFigure7(shownunderlined). \nInthisase,theproofgeneratorseesthatresultregisterFailedtoproveeval4root4PolyF fOdoesnotontainavalidfoating-pointvalue.WenoteAt%!COMMINVlOxOlO9... \nthatthisbug,whihistypialofompensationerrorsinthe Underassumptions[...]... ompiler,ouldbeextremelydi\u00c6ulttoathbytesting \nCouldnotprove (ge(addedx 32)O) beausetheontrol-fowpathinquestionisunlikelytobe takenintypialtestinputs. \nWhiletheseexamplesshowthebeneftsofusingaproof Figure10:Proofgeneratordiagnostiwhentheinlin\u00adsystemtohektheoutputofaompiler,therequirement \nstrutioninFigure7isreplaedwithaddl$2,%edx. thattheompilergenerateannotationsintroduesoppor\u00adtunitiesforbugsthatarenotpresentinanon-ertifying \nompiler.Indeed,atonepointduringdevelopmentwesawple,aslighthangetotheevalloopinFigure7inwhihthe asignifantproportionofourbugsturningupaserrorsinloopounterisinrementedby2insteadof1.Inthisase, \nthegeneratedinvariants.Foranexample,onsiderFigure9, theproofgeneratoremitsthediagnostimessageshown(in \ninwhihtheltintheloopinvariantfromFigure7hasmis-exerptedform)inFigure10.Thediagnostiindiatesthat takenlybeenreplaedbyanle.Unlikethepreviousfgures, \ntheloopounter,wheninrementedby2,annotbeproven hereweshowmoredetailsofthediagnostioutputofthe tobegreaterthanorequalto0,duetothepossibilitythat \nproofgenerator.Theoutputprovidestheaddressofthein-itmightbeome.231intwos-omplementarithmeti.See strutionatwhihtheproofgenerationfailed,followedbyatheendofSetion5forfurtherexplanation.Whilethissit\u00adpartiallistoftheassumptionsolletedtothispoint.Then,uationisunlikelytoourinpratialsettings,itillustrates \nasequeneofthesubgoalsthathavefailedtoproveislisted. thefatthatPCChekssafetyinallpossibleexeution Withthiserror,theproofgeneratorisunabletoprove \nsenarios. thesafetyofthearrayaessintheloop,beausetheinvari\u00adFinally,wefoundthattheproofgeneratorhelpedus \nantallowstheloopountertoequal,ratherthanbestritly tofnderrorsinourspeifationoftherun-timesystem.lessthan,oeffiients.length.Inthediagnostioutput, \nToseeanexampleofthis,onsiderFigure11.Thisfg\u00ad thelastsubgoal,(ultedx 3...),issimilartooneofthe ureshowsthespeifationfortherun-timesystemroutine \nassumptions,(leedx 3...),whihimmediatelyindiates alled Jv newFloatArray,whihisusedtoalloatenew anerrorintheodegeneratedfortheloopounteroran \nJavafoating-pointarrays.Thespeifationisgivenasa errorinthegeneratedloopinvariant. pairofapreondition,whihstatesthatthelengthparame\u00adInsomeases,seeminglyorretoptimizationsareshown \ntermustbenon-negative,andapostondition,whihstates tobeinorretduringproofgeneration.Consider,forexam-thatthearrayobjetisreturnedinregistereaxandthat \nPRE={(geloiO))} POST={(typeeax(jarrayjfloat)), (=(sel4rm(+eax4))loi')} Failedtoproveexample4root4Root \nUnderassumptions[...J... Couldnotprove (safebopy(addeax 28) CT 4root4Root 58) Figure11:Proofgeneratordiagnostiwhentheunderlined \npostonditionisomittedfrom Jv newFloatArray. theobjet'slengthfeldisinitializedwiththevalueofthe lengthparameter.Inourfrstversionofthisspeifation, \nweerroneouslyomittedthelength\u00adfeldinitializationondi\u00adtionfromthepostondition.Withthisomission,theproof \ngenerationoftheexamplemethodinFigure4fails,witha diagnostimessagethatindiatesthatthenewfoatarray isnotsafetoinitialize.Wedonothavethespaeinthis \npapertoprovidethedetailsofthisexample. 7ExperimentalResults TheSpeialJompilerandtheassoiatedproverarestillun\u00adderativedevelopmentandweontinuetoextendtherange \nofprogramsbeingompiledandvalidated.Inthissetion wepresentsomeearlyexperimentalresultswiththeinten\u00adtiontoshedsomelightontheanswerstoquestionssuhas \nhowlargetypesafetyproofsareandhowexpensivetheorem provingandproofhekingareomparedtoompilation. WeshowinTable1,forafewofourinternaltestases \ntheproofsizesomparedwiththeodesizes(bothinbinary formastheyappearintheobjetfle),andthetheorem provingandhekingtimesomparedwiththeompilation \ntimes.Thisdatashowsthatproofsforthesesmallprograms arerelativelysmall,onaverageabout85%oftheodesize. \nTheproofhekingtimeisnegligibleomparedwiththe ompilationandtheoremprovingtime.Allmeasurements wereperformedonamahineusingaPentiumProrunning \nat300Mhz.Theostofproofhekingisinpratielinear inthesizeoftheproofs.Also,whentheproofsertifytype safetytheirsizeisalsolinearinthesizeoftheprogramto \nbetypeheked,atleastforthetypesystemsofJavaand safe\u00adC(usedinToushtone). BRelatedWork Thewholeareaofertifyingompilationanbeviewedasa \nspeialinstaneofresultheking[20],inwhihthesoftware beinghekedisaompilerandthepropertybeingheked iswelltypedness.Inthisase,asitistrueforresultheking \ningeneral,itturnsouttobeeasiertoverifypropertiesofthe outputoftheompilationinsteadofverifyingtheorretness \noftheompilerimplementation. ThestartingpointandinspirationfortheSpeialJom\u00adpilerdesribedinthispaperwastheTouhstoneertifying \nompiler[15]whosesourelanguageisasmallsafesubsetof theCprogramminglanguage.ThemajoradvaneofSpe\u00adialJoverTouhstoneisthesopeofthesourelanguage \nompiledwhihinturnneessitatesthehandlingofnon\u00adtrivialrun\u00adtimemehanismssuhasobjetrepresentation, dynamimethoddispathandexeptionhandling.Afur\u00adtherontributionofthepresentpaperoverpreviouspublia\u00adtionsonproof\u00adarryingodeliesinadetailedpresentation \noftheode\u00adannotationmehanismbywhihaverifation onditiongeneratoranproessmahineodethatinvolves indiretfuntionallsornon\u00adloalontrolfow. \nWeurrentlyuseasemantimodeloffrst\u00adordertypes basedonthatdesribedin[14].Tohandleobjetsinanef\u00adfientwaywehadtoextendtheverifationonditiongen\u00aderatorwithamodulethatunderstandsthedetailsofJava\u00adobjetrepresentation.Amoreelegantsolutionouldprob\u00adablybeobtainedusingthemoreompletesemantimodel \noftypesofAppelandFelty[1],provideditisfrstextended tohandlemutabledatastrutures. Theliteratureontainsreportsonanumberofertifying \nompilers.Oneofthemostwell\u00adknownisSun'sjavaom\u00adpilerforJavatoJavabyteodes.Itspurposeisquitesimilar tothatofSpeialJ.Theissuesarehowevermuhsimpler \nbeausethelanguageofbyteodesissomuhmoreabstrat thantheoptimizedassemblylanguagethatwewanttogen\u00aderateandhek.Otherertifyingompilersthatmaintain \ntypesthroughompilationbutdropthembeforefnalode generationareTIL[19]andFlint[18].MostrelatedtoSpe\u00adialJarethePoporn[8]andCylone[4]ertifyingom\u00adpilerswhoseoutputlanguageistypedassemblylanguage \n(TAL)[10,9].ATALprogramontainsassemblylanguage alongwithtypingannotationsandTALpseudo\u00adinstrutions thatareusedbytheTALtypehekertohektheassembly \nlanguageprogram.UponloseinspetionaTALprogram looksverysimilartoourannotatedassemblylanguage.This suggeststhattheertifyingompilationaspetofSpeialJ \nandPopornaresimilarinpriniple.Weuseproof\u00adarrying odeastheoutputlanguagebeauseitismoregeneraland reliesonasimplertrustedomponent(theproofheker \nomparedtotheTALtypeheker). 9Conlusion WehaveimplementedaPCCsystemandertifyingompiler thatgeneratesoptimizedx86PCCbinariesfromJavasoure \nprograms.Theertifyingompilerislargelyonventional, exeptthatitproduesasmallnumberofannotationsinthe targetodetosupportVCandproofgeneration.Theom\u00adpilerperformsregisteralloationandsomeglobaloptimiza\u00adtions,inludingaformofpartialredundanyelimination. \nTheannotatedtargetodeisthenproessedbyasmalland fastPCCinfrastrutureonsistingofaverifation\u00adondition (VC)generator,proofgenerator,andproofheker.Assem\u00adblingtheodeandprooftogetherresultsinaPCCbinary \nthatanyhostanquiklyandreliablyhekfortypesafety. TheVCgeneratorandproofhekerarequiteomplete andhavebeenstableforseveralmonths.Theompilerand \nproofgenerator,ontheotherhand,arestillunderheavy development.Atpresent,theompilerhandlesalargesub\u00adsetoftheJavafeatures,inludingobjets,exeptions,and \nfoating\u00adpointarithmeti.However,thereareseveralkey featuresthathaveyettobeimplemented,inludingthreads \nanddynamilassloading.Also,anumberofimportant optimizationsarenotyetfnished,inludingtheelimination ofnull\u00adpointerandarray\u00adboundsheks,andthestakallo\u00adationofnon\u00adesapingobjets.Eahnewoptimizationtyp\u00adiallyrequiresadditionalsupport(oftenintheformofnew \nproofrules)intheproofgenerator.And,aswithanyopti\u00admizingompilerforalargelanguage,aonsiderableamount ofperformanetuninganddebuggingisstillrequired.But \naswehaveshowninthispaper,PCCprovidesanexellent debuggingtoolforthisompilerdevelopment. Insummary,webelievethatourexperienethusfaral\u00adlowsustoonludethatPCCdoesindeed\"saleup\"to \nTest CodeSize(bytes) ProofSize(bytes)(%ofode) Compilationtime(ms) Provingtime(ms) Cheking time(ms) inspetion \n2120 1244 58% 1820 2210 3.48 trees 1052 1404 133% 980 1240 3.60 root 864 450 52% 735 920 1.04 g2 816 \n374 46% 407 460 0.88 spsmall 292 342 117% 344 310 0.67 basi 242 130 53% 157 230 0.41 fdivtest 248 320 \n129% 188 158 0.69 subtest 232 320 138% 188 157 0.69 handle 212 94 44% 172 313 0.34 foatmp 208 112 54% \n141 157 0.22 handle3 200 110 55% 188 166 0.30 akerman 132 36 28% 110 94 0.06 Table1:Theexperimentalresultsforafewofourinternalompilertestases.Weshowthemahineodesize,thesizeof \nthebinaryenodingofproofs,andthetimeittakestoompile,prove,andhektypesafety. handletheenforementoftypesafetyforlanguagesofreal\u00adistisizeandomplexity.Sinethesizeoftheannotations \nandtheproofsrequiredforertifyingtypesafetyinreases linearlywiththesizeoftheprogramwedoexpetoursys\u00adtemtosaleuptotheertifationoflargeprograms. \nDuringourdevelopmentprojet,themainimpediment tofurtherprogresshasbeenintheonventionalaspetsof ompilerdevelopment;rarelydidthespeialrequirements \nimposedbyPCCgetintheway.Infuturework,weplan toreleaseoururrentsystemforpubliuse.Alsoofgreat interestistoextendthesafetypoliytogobeyondJavatype \nsafety,inpartiulartoallowenforementofsomeonstraints ontheuseofresouressuhasexeutiontimeandmemory. Referenes \n[1]AndrewW.AppelandAmyP.Felty.Asemantimodel oftypesandmahineinstrutionsforproof-arryingode. InTwenty\u00adSeventhACMSymposiumonPriniplesofPro\u00adgrammingLanguages,pages243-253,January2000. \n[2]RobertW.Floyd.Assigningmeaningstoprograms.InMath\u00adematialAspetsofComputerSiene,pages19-32.Ameri\u00adanMathematialSoiety,1967. \n[3]RobertHarper,FurioHonsell,andGordonPlotkin.Aframe\u00adworkfordefninglogis.JournaloftheAssoiationforCom\u00adputingMahinery,40(1):143-184,January1993. \n[4]LukeHornofandTrevorJim.Certifyingompilationand run-timeodegeneration.Higher\u00adOrderandSymboliCom\u00ad putation,12(4),1999. \n[5]Intel.IntelArhitetureSoftwareDeveloper'sManual.Intel Corporation,1997. [6]XavierLeroy.TheZINCexperiment,aneonomialimple\u00admentationoftheMLlanguage.TehnialReport117,IN\u00adRIA,1990. \n.. [7]TimLindholmandFrankYellin.TheJava VirtualMa\u00adhineSpeifation,SeondEdition.Addison-Wesley,1999. [8]GregMorrisett,KarlCrary,NealGlew,DanGrossman, \nRihardSamuels,FrederikSmith,DavidWalker,Stephanie Weirih,andSteveZdanewi.TALx86:Arealistityped assemblylanguage.InSeondWorkshoponCompilerSup\u00adportforSystemsSoftware,Atlanta,May1999. \n[9]GregMorrisett,KarlCrary,NealGlew,andDavidWalker. Stak-basedtypedassemblylanguage.InSeondWorkshop onTypesinCompilation,volume1473ofLetureNotesin \nComputerSiene.Springer-Verlag,Marh1998.Extended versionpublishedasCMUtehnialreportCMU-CS-98-178. [10]GregMorrisett,DavidWalker,KarlCrary,andNealGlew. \nFromsystemFtotypedassemblylanguage.ACMTransa\u00adtionsonProgrammingLanguagesandSystems,21(3):527\u00ad568,May1999. \n[11]GeorgeNeulaandPeterLee.Safekernelextensionswithout run-timeheking.InSeondSymposiumonOperatingSys\u00adtemsDesignandImplementation,pages229-243,Seattle, \nOtober1996. [12]GeorgeNeulaandPeterLee.Safe,untrustedagentsusing proof-arryingode.InSpeialIssueonMobileAgentSe\u00adurity,volume1419ofLetureNotesinComputerSiene. \nSpringer-Verlag,Otober1997. [13]GeorgeC.Neula.Proof-arryingode.InConferene Reordofthe24thSymposiumonPriniplesofProgram\u00admingLanguages(POPL'97),pages106-119,Paris,Frane, \nJanuary1997.ACMPress. [14]GeorgeC.Neula.CompilingwithProofs.PhDthesis, CarnegieMellonUniversity,Otober1998.Availableas \nTehnialReportCMU-CS-98-154. [15]GeorgeC.NeulaandPeterLee.Thedesignandimplemen\u00adtationofaertifyingompiler.InProeedingsoftheCon\u00adfereneonProgrammingLanguageDesignandImplemen\u00adtation(PLDI'9S),pages333-344,Montreal,Canada,June \n1998.ACMPress. [16]GeorgeC.NeulaandPeterLee.E\u00c6ientrepresentationand validationoflogialproofs.InProeedingsofthe13thAn\u00adnualSymposiumonLogiinComputerSiene(LICS'9S), \npages93-104,Indianapolis,Indiana,June1998.IEEECom\u00adputerSoietyPress. [17]FrankPfenning.LogiprogrammingintheLFlogialframe\u00adwork.InLogialFrameworks,pages149-181.Cambridge \nUniversityPress,1991. [18]ZhongShao.AnoverviewoftheFLINT/MLompiler.In Pro.1997ACMSIGPLANWorkshoponTypesinCompi\u00adlation(TIC'97),Amsterdam,TheNetherlands,June1997. \n[19]DavidTarditi,GregMorrisett,PerryCheng,ChrisStone, RobertHarper,andPeterLee.TIL:Atype-diretedopti\u00admizingompilerforML.InACMSIGPLANConfereneon \nProgrammingLanguageDesignandImplementation,pages 181-192,Philadelphia,PA,May1996. [20]HalWassermanandManuelBlum.Softwarereliabilityvia \nrun-timeresult-heking.JournaloftheACM,44(6):826\u00ad849,November1997.\n\t\t\t", "proc_id": "349299", "abstract": "<p>This paper presents the initial results of a project to determine ifthe techniques of <italic> proof-carrying code</italic> and <italic>certifying compilers</italic> can be applied to programming languages of realistic size and complexity. The experiment shows that: (1) it is possible to implement a certifying native-code compiler for a large subset of the Java programming language; (2) the compiler is freely able to apply many standard local and global optimizations; and (3) the PCC binaries it produces are of reasonable size and can be rapidly checked for type safety by a small proof-checker. This paper also presents further evidence that PCC provides several advantages for compiler development. In particular, generating proofs of the target code helps to identify compiler bugs, many of which would have been difficult to discover by testing. </p>", "authors": [{"name": "Christopher Colby", "author_profile_id": "81100165190", "affiliation": "Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania", "person_id": "P47547", "email_address": "", "orcid_id": ""}, {"name": "Peter Lee", "author_profile_id": "81100384353", "affiliation": "Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania", "person_id": "PP39040384", "email_address": "", "orcid_id": ""}, {"name": "George C. Necula", "author_profile_id": "81100295630", "affiliation": "Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania", "person_id": "PP14109324", "email_address": "", "orcid_id": ""}, {"name": "Fred Blau", "author_profile_id": "81100454802", "affiliation": "Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania", "person_id": "P86514", "email_address": "", "orcid_id": ""}, {"name": "Mark Plesko", "author_profile_id": "81314491052", "affiliation": "Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania", "person_id": "PP14133204", "email_address": "", "orcid_id": ""}, {"name": "Kenneth Cline", "author_profile_id": "81430599990", "affiliation": "Cedilla Systems Incorporated, 4616 Henry Street, Pittsburgh, Pennsylvania", "person_id": "P159983", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/349299.349315", "year": "2000", "article_id": "349315", "conference": "PLDI", "title": "A certifying compiler for Java", "url": "http://dl.acm.org/citation.cfm?id=349315"}