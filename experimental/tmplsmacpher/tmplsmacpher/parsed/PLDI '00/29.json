{"article_publication_date": "05-01-2000", "fulltext": "\n AnAutomatiObjetInliningOptimizationanditsEvaluation JulianDolby. AndrewA.Chien dolby us.ibm.om ahien \ns.usd.edu IBMT.J.WatsonResearh C e n terDepartmentofComputerSieneandEngineering YorktownHeights,NY10598 \n-0 704 UniversityofCalifornia,SanDiego +1(914)784-7299 +1(858)822-2458 Abstrat Automatiobjetinlining[19,20]transformsheapdata \nstruturesbyfusingparentandhildobjetstogether.Itan improveruntimebyreduingobjetalloationandpointer derefereneosts.Wereportontinuingworkstudyingob\u00adjetinliningoptimizations.Inpartiular,wepresentanew \nsemantiderivationoftheorretnessonditionsforobjet inlining,andprogramanalysiswhihextendsourprevious work.Andwepresentanobjetinliningtransformation,fo\u00adusingonanewalgorithmwhihoptimizeslassfeldlayout \ntominimizeodeexpansion.Finally,wedetailafullereval\u00aduationonelevenprogramsandlibraries(inludingXpdf,the \n25,000linePortableDoumentFormat(PDF)flebrowser) thatutilizeshardwaremeasuresofimpatonthememory system. \nWeshowthatouranalysissalesefetivelytolargepro\u00adgrams,fndingmanyinlinablefelds(45inxpdf)ataept\u00adableost,andweshowthat,onsomeprograms,itfnds \nnearlyallfeldsforwhihobjetinliningisorret,andav\u00aderages40%ofsuhfeldsarossourbenhmarks.Weimple\u00admentouranalysesinanadvanedanalysisinfrastruture, \nandweshowthat,omparedtotraditional1\u00adCFA,that infrastrutureprovidesbetterresultsandlowerandmore salableost.Arossallprograms,analysisidentifedabout \n30%ofobjetsasinlinableonaverage.Ourtransformation inreasesodesizebyonly20%whileinliningthis30%of felds.Inliningtheseobjetseliminatedonaverage28%of \nfeldreads,58%ofobjetreations,12%ofallloads.Fur\u00adther,theoptimizedprogramshavesignifantlyimproved memoryreferenebehavior,produing25%fewerL1data \nahemissesand25%fewerreadstalls.Onaveragethe runtimeimprovedby14%. Introdution Objet\u00adorientedlanguagesandframeworksaidtheonstru\u00adtionoflargesoftwaresystemsbyenablingextensivesoft\u00adwarereuse,generiprogramming,andompositionofom\u00adponents.Thesetehniquesuseabstration.layersofob\u00ad \n.WorkdoneasaPh.D.studentattheUniversityofIllinoisat Urbana-Champaign Permission to make digital or hard \ncopies of all or part of this work for personal or classroom use is granted without fee provided that \ncopies are not made or distributed for profit or commercial advantage and that copies bear this notice \nand the full citation on the first page. To copy otherwise, or republish, to post on servers or to redistribute \nto lists, requires prior specific permission and/or a fee. PLDI 2000, Vancouver, British Columbia, Canada. \nCopyright 2000 ACM 1-58113-199-2/00/0006 $5.00. jetsandinterfaemethods.toallowleanompositionof modules.Asaresult,suhtehniquesprodueprograms \nwithdeeplylayeredinterfaes,unspeializeddatastrutures, andlargenumbersofsmallobjetsandmethods.Suhteh\u00adniquesarewellrepresentedinontemporaryobjetoriented \nlanguages[11,43,40,41],omponentsoftwareframeworks [27]andlibraries[24,39]. Providingisolationbetweensoftwaremodulesrequiresan \ninterfaesemantisthathidesimplementationdetails.Di\u00adretimplementationsofsuhasemantisanbedisastrous forperformane.Forexample,inanobjet\u00adorientedlan\u00adguagesuhasJava,simplyretrievingavalueangofroma \nloadinstrutiontoadynamially\u00addispathedmessagesend onaheapobjet.Interfaeoverheadsareoftenexhibitedas slowerandmorefrequentproedureallsandpointerderef\u00aderenes.Theoverheadsinduedbyindiretmethodalls \narewell\u00adstudied[3,1,9,31,35,28,29,16,36],andboth statianddynamioptimizationsdevelopedbyourgroup andothersintheommunityandramatiallyreduesuh \nproedureallingoverhead. Butmodularsoftwaredesignalsoinursine\u00c6ieniesin datastruturedesignandlayout,beauseitenouragesom\u00adposinggeneristruturesratherthanbuildingustomopti\u00admizedones.Generaldatastruturelibrariessuhasthe \nJavastandardlibraryandNIHCL[24]areexamplesofthis phenomenon.Suhoverheadshavebeenaddressedbefore: alloationsbysophistiatedmemorymanagement[4,21]and \nbystorageanalyses[7,42],anddereferenesbyprefething [33]andbyredundantloadandstoreelimination[18],whih \nusessophistiatedaliasanalyses[23,17]. Weareexploringtheproblemofinreasedobjetindire\u00adtionbydevelopingautomatiobjetinliningoptimizations. \nThesetehniquespreservetheprogrammingmodel'smod\u00adularityandsemantiswhileautomatiallytransformingthe programs'datastruturesintoamoree\u00c6ientimplementa\u00adtion.Objetinliningfusesobjetstogetherwhentheyhave \naparent\u00adhildrelationship,reduingobjetalloation,a\u00adessandderefereneost,andgenerallyimprovingprogram memorybehavior.Theontributionsofthispaperbuild \nonourpreviouswork[20,19],butprovideasignifantad\u00advaneinapability.Speifally,thispaperinorporatesthe followingnovelontributions: \n1.Aformaldesriptionobjetinlininganalysis,withne\u00adessaryandsu\u00c6ientonditionsforsemantispreserva\u00adtion.Thisdesriptionexposedseveralsignifantlimi\u00adtationsinourpreviousformulation,enablingtheiror\u00adretion. \n2.Anewalgorithmfortheobjetlayoutproblemwhih ariseswhenobjetsareinlined.Weevaluatethisal\u00adgorithmempirially,andshowthatitisefetivein \nmaintaininglayoutonformane,limitingtherequired methodloningtoonly20%,despiteinlining30%ofall objets. \n3.Adetailedempirialevaluationinludinglargepro\u00adgrams(upto25,000lines)whihshowssurprisingly largenumbersoffeldstobeinlinable(12\u00ad40%ofall \nobjetfelds)andonsistentruntimeperformaneim\u00adprovementsrangingfrom4\u00ad29%withameanof14%. Wealsoharaterizeompileroptimizationostand \nefetiveness.Webelievethesearethelargestobjet\u00adorientedprogramswhihhaveeverbeensubjetedto thistypeofaggressivewhole\u00adprogramanalysis. \n4.Adetailedunderstandingofhowthesehighlevelop\u00adtimizationsafetperformanethrumemoryperfor\u00admanestatistisobtainedfromhardwareperformane \nounters.Thesestatistisshowlearlythatthekeyfa\u00adtorisimprovedprogrammemorybehaviorwhihpro\u00adduesa25%redutioninahemissesand25%redu\u00adtioninbothreadandwritestalls. \nWestartinSetion2withexamplesillustratingobjet inliningandmotivatetheprograminformationrequiredto performobjetinlining.Next,wepresentthesemantiun\u00adderpinningofourobjetinliningoptimizationinSetion4; \ntheanalysisderivedfromthisbaseisdefnedinSetion5. WedisussissuesofthetransformationsinSetion6.We showempirialresultsinSetion7,summarizerelatedwork \ninSetion8andfnallyonludeinSetion9. AProgramExample Toillustratetheefetofobjetinlining,Figures1and2 showaninventoryprogram.beforeandafterobjetinlin\u00ading..Theoriginalprogram(Figure1)ontainstwolasses, \nanItemlass(whihreordsanitem'sprodutid,depart\u00adment,andvalue)andanItemListlass(agenerilinked\u00adlistwithatotalmethodwhihomputesinventories'total \nvalue).Theinventoryitselfisglobalvariable,inventory, ofalistofItems.Theinlinedprogram(Figure2)ontains \njustonelass,ItemListAndItem,withallmethods. Tobesuretheobjetinliningtransformationissemantis preserving,wemustbesurethateahdatumassoiateseah \nItemListwithexatlyoneItem.Inaddition,sineweare potentiallymodifyingthedatalayout,wemustbeableto loateallprogrampointswheretheItemListandItemstate \nisused.Withsafetyensured,theinliningtransformation onsistsofthreesteps: 1.buildlasswithstatefromItemandItemList, \n2.deletereationsofItemandItemListandreplaewith reationofthefusedItemListAndItem,and 3.modifyusesofItemstatetousefusedobjetstate. \nInthefollowingsetions,wedisusshowtoemploythis tehniquerigorouslyandinageneralsetting. .Arealinventoryontrolprogramwouldlikelyusedatabases \nratherthanlinkedlists.Thisexampleisforillustrativepurposes only. .Notethatthetransformationisnotdonesouretosoure,this \nexampleisjustforexpositorypurposes. lassItem{ intprodut id; intdepartment; floatvalue; Item(intp,intd,floatv){ \nprodut id=p; department=d; value=v;} doublevalue(){returnvalue;} }; lassItemList{ Item*datum; ItemList*next; \n ItemList(ItemList*d,ItemList*n) datum=d; next=n;} doublevalue(){ if(!next) returndatum->value(); else \nreturn datum->value()+next->value(); } }; ItemList*inventory=NULL; voidAddItem(intid,intd,floatv){ Item*item=newItem; \nitem->Item(id,d,v); ItemList*l=newItemList; l->ItemList(item,inventory); inventory=l;} Figure1:InventoryProgram(beforeObjetInlining) \n3ConertCompiler Ourobjetinlininganalysisandoptimizationimplementa\u00adtionisdoneusingtheIllinoisConertSystem[10],avehi\u00adleforresearhintoadvanedimplementationsforobjet\u00adorientedlanguages.ItimplementsthelanguageICC++[11], \nalanguagewithC++\u00adlikesyntaxandJava\u00adlikesemantis, whihweuseforourbenhmarks.Italsoprovidesanag\u00adgressiveanalysisframework[35,34],withtwonovelfeatures: \niterativeadaptiveanalysisrepeatedlyanalyzesaprogram, inrementallyaddingontextsensitivityasneededforinfor\u00admationpreision;thisallowsaggressiveanalysistobeper\u00adformede\u00c6iently.InSetion7.5,wewillevaluateobjet \ninliningimplementedinboththisadvanedframeworkand traditionalControl\u00adFlowAnalysis.Conertalsoprovidesan \nadvanedloningmehanism[36]. 4Defnition Thissetionpresentsaformaldefnitionofobjetinlining intermsofprogramsemantis,andadisussionofwhenit \nissemantispreserving. 4.1Semantis Wefrstdetailoursemantimodelofprogramexeution, andthendefnetheexeutiontrae,arepresentationofentire \nlassItemListAndItem{ ItemList*next; intprodut id; intdepartment; floatvalue; Item(intp,intd,floatv){ \nprodut id=p; department=d; value=v;} ItemList(ItemList*d,ItemList*n) next=n;} doubleItem::value(){returnvalue;} \ndoubleItemList::value(){ if(!next) returnthis->Item::value(); else return this->Item::value()+next->ItemList::(); \n} }; ItemList*inventory=NULL; ItemList*AddItem(intid,intd,floatv){ ItemListAndItem*l=newItemListAndItem; \nl->Item(id,d,v); l->ItemList(item,inventory); inventory=l;} Figure2:InventoryProgram(afterObjetInlining) \nprogramexeutions. 4.1.1SemantiModel Oursemantimodelhasthreeelements:state,thedynami andheapstateatruntime;nodes,thebasiationsper\u00adformablebyanyprogram;andregionswhihgroupnodes \naordingtotheirontroldependene.Aprogramonsists ofasetofmethods,eahofwhihhasasetofnodesarranged inatreeofregions.Allvaluesinaprogramarewriteone, \nthatis,thegraphsareinSSA3form,with7andqnodes assoiatedwiththeirgoverningonditionals.Oursemantis defnestheexeutionofsuhaprogram. \nStateTherearetwopieesofstate,thebindingsandthe heap,whihareeahorganizedasatableindexedbyan identifer(avariablenameforbindingstateandanobjet \nname,feldnamepairforheapstate)andanode.Thenode representsthetimeofthebinding:indexingatanodenre\u00adturnsthemostreentbindingperformedbeforenexeutes. \nAbindingrepresentsthevalueofloalvariables,i.e.it mapsavariablenametoaruntimevaluesuhasan integeroranobjetname.Itisindexedbythename \noftheloalvariableandthetime i.e.thenode ofthebinding,asfollows: S(name,ni) Theglobalheaprepresentsthestateofallthealloated \nobjets.StateisessentiallyaglobalhashtableSmap\u00adpingobjetnameplusfeldnametoruntimevalue.As 3WeatuallyuseStatiSingleUse[34],aformofgatedSSAsuh \nthatanytemporaryisusedinexatlyoneregion. withbindings,itissensitivetotime,i.e.thenodebeing exeuted.Thereferenefuntiontakesanobjetname \norloalvariablethatisboundtoanobjet,thefeld beingreferened,andthestatementbeingexeuted. S(objet,field,ni) \nNodesNodesrepresenttheationsperformedbypro\u00adgrams.Nodesaredefnedbytwofeatures:kinddenotes theationtobeperformed,e.g.afuntionalloranassign\u00adment.Andvaluesarethevaluesbeingatedupon,e.g.the \nargumentstoafuntionall,orthevaluebeingassigned. ThevaluesaremappedbytheruntimestateStoruntime entitiessuhasobjets,integers,foats,booleans,hara\u00adters.Figure3defnesthesemantisofeahnodekind(t \nwillbedisussedbelow);weusenitoindiatetheithnode toexeute,whihisneededbeauseourstatemustbetime\u00adsensitive. \nRegionsRegionsrepresentontrolfow;aregionisdefned asthesetofnodesthatexeuteunderagivenontrolon\u00addition.Thus,aregionisthehildofanoranode, \n.......andontainsthenodesthatexeuteunderthatonditional. Sineonditionalnodesarethemselvesinregions,amethod \nisatreeofregions,rootedinaspeialregionrepresenting methodentry.Withinaregion,thenodesexeutesubjet toanorderingrelationhthatrepresentsdatadependenies \nandanyotherorderingsneededtosatisfyprogramseman\u00adtis.Thesemantis6r(r)ofregionrisshowninFigure4. done let9nI \nn.nih n} while9do letnE9 6n(n) 9 9n} done (donen}) foreahninhildren(r)do if n.((nih n)1(niErdone)) 9 \n9n} Figure4:Defnitionof6r(r):SemantisofProgramRe\u00adgions 4.1.2ExeutionTraes Exeutiontraesallowustoreasonaboutentireprogramex\u00adeutions.Exeutionisrepresentedastheorderedsequene \nofnodesexeutedduringaprogramexeution,withatual runtimevaluesboundtovariablesbyS,andtheqand7 nodesofSSAformturnedintotheappropriatemoves.Sine \nanexeutiontraerepresentstheationsperformedduring anexeution,onditionalnodesarenotinluded. Defnition1(ExeutionTrae).Anexeutiontraeeof \nprogrampisatriple((nl,n, ,ni),S,S),whihonsists 2 ofthefollowingelements: (nl,n2,,ni)isanorderedsequeneofnodesrepre\u00adsentingtheoperationsperformedduringtheexeution \nofp.Nodesinthesequeneoftraeemaybereferred toaste(k)nk;theindexofanodeiste(ni)i  Srepresentsthebindingsduringtheexeution;the \nbindingsofagiventraeeisreferredtoasSe  move ix=yi S(x,nH 1) S(y,nH),t t::nH write io.f=vi S(o,f,nH \n1) S(v,nH),t t::nH read iv=o.fi S(v,nH 1) S(o,f,nH)t t::nH send io.fun(a1,a2,,aj)i VvS(v,nH 1) V1:k:jS(Dispath(o,fun,nH)\u00ad(k),nH \n1) S(ak,nH) S(ontinuation,nH 1)=nH 6r(entry(Dispath(o,fun,nH))) t t::nH return ireturnvi VvS(v,nH 1) \nS(v,S(ontinuation,nH)) S(Se(ontinuation,nH);(0),nH 1) S(v,nH) t t::nH if iif(v)i ifSe(v) =0 Vp=I7(v.,v.)=vIEpsH(n.)S(vt,nH \n1) S(v,nH),t t::ivt=vi 6rhild(nH,true) Vp=Iv=q(v.,v.)IEphH(n.)S(v,nH) S(vt,nH 1),t t::iv=vti else Vp=I7(v.,v.)=vIEpsH(n.)S(vf,nH \n1) S(v,nH),t t::ivf=vi 6rhild(nH,false) Vp=Iv=q(v.,v.)IEphH(n.)S(v,nH) S(vf,nH 1),t t::iv=vfi while iwhile(v)i \nVp=Iv=q(v.,v.)IEphH(n.)S(v,nH) S(vf,nH 1),t t::iv=vfi whileSe(v) =0 6rhild(nH,true) Vp=Iv=q(v.,v.)IEphH(n.)S(v,nH) \nS(vt,nH 1),t t::iv=vti Figure3:Defnitionof6n(nH):ExeutionSemantisofProgramNodes.Theextendedsemantisfortraegeneration'n(nH) \nareshownbyoperationsont. Srepresentstheheapduringexeution;theheapofa giventraeeisreferredtoasSe. Thestateinanexeutiontraerepresentsthestatebuiltby \nthesemantisofSetion4.1.1,and,inthatfgure,thenode sequeneisrepresentedbyt,witheahruleextendingtas appropriate. \n4.2ObjetInlining Objetinliningreplaesusesofhildobjetswithusesof orrespondingparents.Itiswell-defnedonlyforwhatwe \nallaone-to-onefeld,whihwedefnebelow.Then,we defnewhatobjetinliningatuallydoesatexeutiontime, andthenlaimandprovetheonditionsunderwhihitis \nsemantispreserving. Defnition2(DynamiOne-to-OneField).Afeldf f isadynamione-to-onefeld,written 4,foragivenex\u00adeutionofprogrampifeveryparentobjetorrespondsto \nexatlyonehildobjetthruthatf.Thisisdefnedformally asfollows: (n1=io1.f=v1i1n2=io2.f=v2i)4 (S(o1,n1)=S(o2,n2)BS(v1,n1)=S(v2,n2)) \nDefnition3(DynamiFieldInlining).Adynami feldinliningoffisdefnedifandonlyiffisa Jf dynamione-to-onefeldforagivenexeution.Itinvolves \nsubstitutingorrespondingparentobjetsforhildobjets wherevertheyappearintheexeution.Thisisformalized asapplyingfollowingtransformationtoallvaluesinthe \nbindingandheapenvironmentsforeahnodethatexeutes. fS(p,n)((n=ip.f=i)1(v=S(,n))) J(v) votherwise Alteringobjetreferenesatrandominagivenprogram \ndoesnot,ingeneral,preservethemeaningofthatprogram. However,dynamifeldinliningdoespreserveprogramse\u00admantiswhenitisappliedtoaone-to-onefeld,asweprove \nbelow.4 Lemma1(Dynamifeldinliningpreservessharing). Sharingpatternsinreferenestohildobjetsareunhanged \nwhendynamifeldinliningisappliedtoadynamione\u00adto-onefeld.Thatis,twohildstateaessnodesreferene thesameobjetfeldafterthetransformationifandonlyif \ntheydidsobeforehand.Moreformally: VfVn.=Iv1=o1.fI,n.=Io2.f=v2IEep Jf(S(o1,n1))=Jf(S(o2,n2)).S(o1,n1)=S(o2,n2) \nProof.Detailsomitted,butfollowsdiretlyfromDefni\u00adtions2and3,sineJfisaone-to-onemappingexeptthat itmapspairsofparentandhildobjetsboththeparent. \nSineaone-to-onemappingpreservesequality,Lemma1is learlyorretunlesso1,o2areaparent,hildpair,butthat annotbethease,astheyouldnotsharef,duetoour \na-renaming. .Sineourmodelofstateusesanobjetname,feldnamepairas aey,mergingparentandhildobjetsthatshareafeldnamewould \nauseambiguitywhennamingheapstorage.Beforeobjetinlining, wefrstperformana-renamingtopreventsuhnameollisions. \nTheorem1(DynamiInliningStateConsisteny). AfterdynamifeldinliningJ!off,allreadsofanyobjet feldreturnthevalueofthedynamiallypreviouswriteto \nthatobjetfeld.Moreformally, V{n.ln.=l....l (S(;,n (S(,x,ni)) J!i+l))=J! Proof.ByLemma1,foranyfeldaessx.f,exatlythe \nsamesetsofstatementsreadandwritethatfeldafterJ!as didsobeforeit.Thus,thesamevalue;swasdynamially lastassignedintox.fafterJ!asbeforeit.Also,thebindings \nof;s,;werebothtransformedbyJ!,so,giventhatthey werethesamebefore,forthatisthesemantisofafeld read,theymustalsobethesameafterward.Hene,state \naessisstillonsistent. Theorem2(InlinedFieldRedundany).Afterdy\u00adnamifeldinliningJ!,inanystatementoftheform \nn=I....Ibeforedynamifeldinlining,;=o.That . istosay V{nln=l....l}Se(;,n)=Se(o,n) . Proof.ByDefnition3,allstatementsoftheformI....I \ngettransformedintoI....I,sineitisexatlysuh . statementsthatdefnethemappingJ!.Then,byTheo\u00adrem1,forallstatementsoftheformI.....I,Se(;,n)= \nSe(o,n). ByLemma1andTheorem1,wehavethattheprogram isobservationallyequivalentafterobjetinliningisapplied \ntoaone-to-onefeld,andbyTheorem2,theinlinedfeld isnolongerneeded.Hene,byremovingthatfeld,weget aprogramthatdoesthesamethingbutdoesnothavethe \nextrareadsandwritesfortheinlinedfeld. 5Analysis Wepresentaompileranalysisthatidentifessafelyinlin\u00adableobjetfeldsintwosteps:frst,wemustprovethata \nandidatefeldforinliningisone-to-one.Seond,wemust preiselyfndallprogrampointswherehildobjetsare used,sotheyanberediretedtotheirorrespondingpar\u00adent.Theanalysisforbothproblemsappearssimple,butde\u00adpendsritiallyontheontext-sensitiveanddata-sensitive \niterativeinter-proeduralanalysisprovidedbytheConert system(mentionedinSetion3.).Withouttheadvaned apabilitiesoftheConertsystem,wewouldbeunableto \nonvenientlyexpresstheomplexanalysis,preiselyrefne andtrakthedataandontrolfowsasrequired,anddoso withpratiale\u00c6ieny. \n5.1DeterminingOne-to-OneFields Ouralgorithmtoproveafeldfassoiatedparentsandhil\u00addreninaone-to-onemanneronsistsoftwosteps:1)veri\u00adfyingthatthegivenparentandhildobjetreationsanda \norrespondingfeldalwaysexeutetogether,and2)heking thatreatedobjetsassignedbytheorrespondingassign\u00adment. \n5.1.1VerifyingCommonExeution Commonexeutionensuresbothparentandhildarere\u00adatedtogether,andisensurediftheparentandhildreation \nnodesexistinthesameinter-proeduralontroldependene region(ip-region).Theseip-regionsgeneralizetraditional \nontroldependeneregions[5,15]tobeinter-proedural. Morepreisely,anip-regionisgovernedbyaonditional, anditsmembersareasetof<node,edgestak>pairswhere \nnodesaretheprogramnodesdependentonthegoverning onditional,andtheedgestakisthemethodallsbetween theonditionalandthenode.Beausenodesanbeina \nmethodwhihisalledfrommanyplaes,nodesaningen\u00aderalbelongtomultipleip-regionsortothesameregionmore thanone.However,theywillhaveadiferentedgestakin \neahip-region.Figure5showspseudoodeforomputing thesetofip-regionstowhihanodebelongs. CALREGIoNs(n) ;parentisontrolparentofnode \nifparent(n)isonditionalthen ;governingonditionaldeterminesipregion returnparent(n) else ;mustbeinentryregionoffuntion \n;sousetheipregionsoftheallers foreahinallers(method(n))ollet ;reordgoverningonditionalsandallpaths ::CalRegions() \nFigure5:AlgorithmtoComputeNode'sIPRegion Ifthereationnodesoftheparentandhildobjetsexist inthesameip-region,thenwehaveverifedtheirommon \nexeution. 5.1.2VerifyingDataFlow Verifyingdatafowensuresthattheparentandhildobjets fowunambiguouslytotheassignmentofthehildtofeldf. \nVerifationinvolveshekingthatthevaluesatthereations andattheassignmentmustbealiased,forwhihanyofa numberofaliasanalysisalgorithms[30,14,37,32]anbe \napplied.Weexploittheiterativelyrefnedinter-proedural analysisframeworkofConert,andsimplyfollowdatafow \nbetweenreationsandassignments,hekingthatthereare nomerges,asshownalgorithmiallyinFigure6.Uponre\u00adquest,theConertsystemiterativelyrefnestheanalysisre\u00adsults,expendingefortonlyalongthepathsofinterest,and \nwhiletheyarestillpotentiallyunaliased. CHEKNoMERGEs(;l,;2) ;all;suhthat;listheonlydatapredeessor(# indiatesdatafow) \n ;=;l {{ { { ;i#;: {\".V:{ letV.; ;i?) { ;i { {{ { ;j#;:{ ;j ;j =;i return;2?V Figure6:AlgorithmtoChekforDataFlowMerges \n5.1.3ComputingOne-to-OneFields One-to-onefeldsareomputedwiththetwoalgorithms aboveasshowninFigure7.Ifafeldsatisfestheone\u00adto-oneandpreisedata-fowriteria,itisasafeandidate \nforinlining.Theodebelowisslightlysimplifed:thereis alsoahekthat,foragivenone-to-onepairofreationsfor \nafeldf,nootherreationsgetassignedintofforthegiven parentreation. CHEKONEToONEFIELO(f) ;hekeahassignmenttof \nforeahaisi.....ido ;hekeahip-regionofthereatorsof. ;Creatorsarepossiblyreating...s foreahpinCalRegions(Creators(.)) \n;fndorrespondinghildreation,ifany unlessfindpCalRegions(Creators(.)) returnfalse ;hekeahip-regionofthereatorsof. \nforeahinCalRegions(Creators(.)) ;fndorrespondingparentreation,ifany unlessfindCalRegions(Creators(.)) \nreturnfalse returntrue Figure7:ChekingforOne-to-OneFields 5.2FindingFieldUsesPreisely Givenone-to-onefelds,asafeinliningtransformationre\u00adquirespreiseidentifationofallusesofthehild.Our \ndata-fowanalysisisoneptuallystraightforward,butde\u00adpendsheavilyontheConertinfrastruturetoprovidepre\u00adisedatafowpathsataeptableost.Essentially,wetrak \ndatafowfromtheparentandhildateahone-to-onefeld assignmentbaktotheirrespetivereationpoints.From there,wetrakdatafowforwardtoallusesofthehild \nobjetfelds. Defnition4(Tags).Intheatualimplementation,we threetypesofvalueTagsasindiated,andarepropagated \nasshowninFigure8. ForwardTagsTheforwardtagsofavaluev,written T-(v),taghildfeldreadswiththeparent BakwardTagsThebakwardtagsofavaluev,written \nT;(v),tagreationnodeswithparent ForwardBakwardTagsTheforwardbakwardtagsofa valuev,writtenTB(v),taghildfeldreadsandwrites \nwithparent(beforeobjetisassignedtotheparent) Thealgorithmolletsallofthehildobjetuseswhih areforwardfromthehildtoparentassignmentusingthe \nforwardtags,andallofthehildobjetuseswhiharefor\u00adwardfromthehildobjetreationpointtothehildto parentassignmentusingtheforward-bakwardtags.Thisis \nalloftheusesofthehildobjet. 6Transformation Giveninlinablefelds,weperformtheobjetinliningtrans\u00adformationinthreesteps: \n1.Buildnewfusedlassesbasedoninlinablefelds CHEKPREISEUSES(f) ;bakwardtags:allvaluesthatmustfowtof letBvIv=fV(:viEBv>vi1 \nvj(v>vj1vj= vi))} ;forwardtags:allvaluestowhihfmightfow letFvIv=fV:viviEF1vi>v} ;forwardbakwardtags:allvaluestowhihBmightfow \nletFBvIvEBV:viviEF1vi>v} ;foundpreiselyinsetlosedunder> letU (FUBUFB) return vivj (vi>vj1vjEU1viE{U)1 \nvivj(vj>vi1vjEU1viE{U) Figure8:ChekingforPreiseUsesofFields 2.Replaeobjetreationswithfusedobjetreations \n3.Replaehildstateaesseswithfusedobjetaesses WiththeresultsoftheanalysisdesribedinSetion5, Steps2and3arestraightforward,sinetheanalysispre\u00adiselyomputesexatlythesetsofreationsandusesto \ntransform.So,wefousonbuildingthenewfusedlasses. 6.1BuildingFusedClasses Giventheoriginallasses,objetinliningidentifesasetof \ninlinablefelds.Theinliningofthosefeldsdefnesanewset oflasses,whereeahinliningoperationolletsthefelds \noftwolassesintoanewfusedobjetlass.Forinstane, theexampleinSetion2olletedthefeldsfrom....and ........intoasinglenewobjetlass,................ \nChoosingobjetlayoutsinthefusedlassesisritial asitdeterminestheodesizeinreasethatobjetinlining inurs.Thefusedobjetlassesombinedatafromdistint \nsoureprogramlassdefnitions,andmustalsoombinethe methodsassoiatedwiththosesoureprogramlasses.If themethodsaretobeshared,thelayoutofthefeldsmust \nonform(i.e.beatthesameloationintheobjet)inall thelassesinwhihthefeldsappear.Ifnot,themethods mustbeloned,inreasingtheprogramodesize.5 \nWehooseobjetlayoutsbythealgorithmshowninFig\u00ad ure10,usinganapproahthatroughlyspeakingtriesto olletthefusedobjetlassesintotrees(analogoustosin\u00ad \ngleinheritanehierarhies).Ifthelassesanbeorganized intoatree.wherenodesarelasses,andhildrenontain supersetsoffeldsintheirparent.thenaonformantlayout \nanthenbeobtainedbydoingapre-ordertraversalofthe treewithrespettoeahlass.Ourstrategyforlayingout inlinedlassesisbasedonthisobservation,andwediverge \nfromthisapproahonlywhennon-onformaneisrequired. prduct_id department next value datum prduct_id department \nvalue  Figure9:ThePossibleLayoutsofExample Thekeyobservationisthatnon-onformaneanonly arisewhentwofeldsappearinoverlappingsubsetsof \nlasses,neitherbeingasubsetoftheother.Thisindues twodistintsetsofonstraintsonthefeldplaementinthe 5ThisisinpartbeauseweuseaJVM-likeobjetreferenemodel \nwhihforbidsinternalpointers. objet(asthesetsoflassesouldbeonnetedtothehi\u00aderarhyintwoplaes).Insuhases,werepliatethefeld, \nwhihimpliesloningallmethodswhihaessthatfeld, andattahthesubsetstodistintpartsofthelasshier\u00adarhy.Thereremainsasubtlehoieforwheretoattah \nthelassesintheoverlapregion,wherethehoiedeter\u00admineswhihofthetwonon\u00adoverlappingsubsetstheoverlap regionwillonformwith.ThishoieisillustratedinFig\u00adure9,wheretherearetwohoiesforlayingouttheparent, \nhildandfusedlassesfromSetion2.Beausetheostof loningisnotknownuntilwehaveallobjetlayouts,wedo nothaveenoughinformationtohoosewell,anddeferthis \nhoie,onstrutingbothalternatives. ;input:eahsetEsetsisafeldandthelassesitisin ;output:aforestdenotingthelayoutsofalllasses \nFINoLAyouT(sets) ;urrentsetoflasses ...lasses Classes(s) sEsets ;fndfeldsthatappearinalllasses ...top{sisEsets1Classs(s)lasses} \n;ifany,putatthefrontofthelayout ..itopi 0.... ......MakeTree(top,FindLayout(sets-top)) .... ;buildssetsoffeldsthatappeartogetherinsomelass \n...sets {{s,s., }iClasses(s)nClasses(s.)} .. ;disjointfeldslaidoutindependently ..isetsi>1.... ......MakeForest(mapFindLayoutsets) \n;otherwise,thereisaonfit .... ;s,sannotbelaidoutonformantly ...s,s.......Classes(s)nClasses(s)1 .. .... \nClasses(s)-Classes(s)1Classes(s)\u00adClasses(s.).. . ;threehoiestoresolveonfit {Classes(s)-Classes(s) .. \n...ut Classes(s.)-Classes(s) Classes(s)nClasses(s.) .. ;fndlayoutsaftersplittingonfitingfelds ......FindLayout(sets-{s.,s}u \n{s.-ut,s-ut,s.nut,snut}). .. Figure10:LayoutClassestoMinimizeNon\u00adConformane Thelasslayoutalgorithmproduesasetofandidate \nlayouttrees,fromwhihwemusthooseasingleone.To doso,wealulatetheloningostofeahlayout,andtake theonewhihproduesthefewestmethodlones(smallest \nodesizeinrease).Theamountofloningrequiredisdeter\u00adminedbytheompleteforeahlass,theatualuseofthe non\u00adonformantfelds,andthespeifloningandmethod \ndispathmehanisms. 7Evaluation Weevaluatetheefetivenessofobjetinlining,present\u00adingompile\u00adtimeandruntimeresultsforarangeofobjet\u00adorientedprogramtypesandsizes. \n7.1Metris Wepresentompile\u00adtimeandruntimemetristoassessob\u00adjetinlining.ompile\u00adtimemetrismeasureanalysispower, \nanalysisost,andloningost.Runtimemetrismeasure analysispower,feldreads,feldwrites,objetalloations, andoverallrunningtime. \nAnalysisPowerAnalysispoweristhenumberofinlinable felds,whihwemeasureatbothompile\u00adandrun\u00adtime.At ompiletime,weountthenumberofdelaredobjetfelds \nfoundtobeinlinablebyouranalysis.Partially\u00adinlinable feldsareountedfrationally,e.g.afeldinlinablein3of \n4asesis0.75felds.Wealsopresentthisnumbernormal\u00adizedtothenumberofdelaredfeldsintheprograms,to providealibrationandameasureofsaling;wealsoali\u00adbratebyomparingwiththenumberoffeldsdelaredin\u00adlineinourC++benhmarkprograms.Atruntime,weas\u00adsessanalysispoweragainstoursemantiriteriaforinlinable \nfelds.Wepresenttwodynamiratios:thefrstisthenum\u00adberofompile\u00adtimeinlinablefelds.thesumofthenumber ofompile\u00adtimeinlinablefeldsoverallalloatedobjets. \nnormalizedtotheidealnumberofinlinablefelds.thesum overallalloatedobjetsofthenumberoffeldsthatsat\u00adisfyourinlinabilitysemantis;thisgivesthefrationofall \ninlinableobjetsthatouranalysisfound.Theseondisthe numberofreadsofinlinablefeldsdividedbythenumberof readsofideallyinlinablefelds;thisgivesthefrationofthe \npointerreadoverheadouranalysisanremove. AnalysisCostAnalysisostoverstheamountofwork doneandsizeofdatastruturesneededbytheanalysissys\u00adtem.Inouronstraint\u00adbasedanalysissystem,thebestunit \nofworkisonstraintpropagationsandfordatasizeweuse theommonontextspermethodmetri.Thesearenor\u00admalizedbyprogramsize,measuredasthenumberofvalues \nandmethodsintheinternalform,toassesssalability.In ordertoplaethepowerandostofouranalysisinper\u00adspetive,weompareitwiththetraditional1\u00adCFAanalysis \nframework. CloningCostCodespeializationrequiredbyobjetinlin\u00adingismeasuredbyountingmethodlonesrequired.We \nnormalizebythenumberofmethods. FieldReadsandWritesObjetinliningshouldreduethe numberofobjetdereferenesrequiredtoexeutethepro\u00adgram.Wemeasurefeldreadsdiretlyandtotalloads,data \nahemissesandreadstallylesusinghardwareperfor\u00admaneounters,apturingefetivenessinreduingobjet dereferenes. \nObjetAlloationsObjetinliningshouldreduethenum\u00adberofobjetsalloated.Thismetriapturesthedynami ountsofalloationoperations. \nProgramRuntimeObjetinliningshouldimprovepro\u00adgramruntimebyimprovingprogrammemorybehavior.We measureoverallruntime,andalsothenumberofinstrutions \nexeuted,toanalyzewhereperformaneimprovementsome from. 7.2Benhmarks Weseletedobjet\u00adorientedprogramsandlibrariesforeval\u00aduation;wewantarangeofdatastruturesandprogramming \nidioms,andarangeofprogramsizes.Toensurethis,we set\u00ad 2.4 runtime data reads |||||||| tleduponthreelasslibraries,theSmallTalk\u00adlikeNIHCL, \nthemorestatiOATH,andAI,ontainingvariousintelli\u00ad2.1 gentsearhroutines.Allthreelibrarieshavetestapplia\u00ad1.8 \ntions.Wealsohoosearangeofobjet\u00adorientedprograms. 1.5 ThesebenhmarksaresummarizedinTable1.Webreak 1.2 \noutappliationandlibrarysizesbeause,eventhoughour whole\u00adprogramompilermakesnodistintion,muhlibrary 0.9 \nodeisunusedinagivenappliation,andhenetheamount 0.6 ofliveodeismuhlessthanasimplesumofprogramand 0.3 librarysizewouldsuggest. \n0.0 | | | | | | | | | | benhmark lines inlinabledatastrutures oopak 760 omplexnumbers AIlibrary(3000lines)programs \ndemo3demo4demo6 300300200 lists,searhnodes,arrays lists,searhnodes,arrays lists,arrays NIHCLlibrary(20000lines)programs \nbagditorderedltnsets 100100100100 bag,set,array,iterator asso,bag,set,array,iterator olletions,array,iterator \nset,array,iterator OATHlibrary(18000lines)programs dll0 150 arrays,smartpointers largeprograms otestxpdf \n3000025000 lists,arrays,wrappers,parser streams,arrays,hild Table1:BenhmarkswithInlinableDataStrutures \nFigure11:PerformaneomparisonofConertandG++ 7.5ObjetInliningAnalysisResults AnalysisPower.Table2showsourompile\u00adtimeanalysis \nresults;mostprogramshaveasurprisinglylargenumberof inlinablefelds:typiallymorethanonethirdoffeldsare \ninlinable,andtheresultsalesalmostuniformlywithpro\u00adgramsize.Thetotalnumberoffeldswithobjettypeis theleft\u00adhandolumnlabelled\"All.\"Therearefourolumns \nlabelled\"Inlinable\":thefrst(labelled\"Hand\")isthenum\u00adberoffeldsexpliitlyinlinedintheC++soureode,the seondisaountoftheautomatiallyinlinablefeldsas \nfoundbyouranalysisusingConert'sadvanedframework, thethird(labelled\"1\u00adCFA\")isthenumberoffeldsfound inlinableusingouranalysisinatraditional1\u00adCFAanaly\u00ad \n7.3ExperimentalSetup Weompiledeahbenhmarkwithandwithoutobjetinlin\u00adingforbothouradaptiveanalysisandtraditional1\u00adCFAus\u00adingtheConertCompiler,andtheConert\u00adgeneratedC++ \nodewithg++(egs\u00ad2.91.66)withfulloptimization(\u00adO3). Thesetwooptionsarelabelled'inlining'and'base'inourre\u00adsults.Foralibration,weompiledtheoriginalC++odes \nwithg++\u00adO3,givingg++thewholeprogramatone.We useda266MHzPentiumwith64MBofRAM,runningRed\u00adsisframework,andthefourth(labelled\"%\")isthenumber \nofinlinablefeldsfoundbyouranalysisasaperentageof thetotalfelds.Ouradaptiveanalysisalwaysdoesbetter, usuallymuhbetter,than1\u00adCFA;inaddition,inallases \nexeptxpdf,itfndssubstantiallymoreinlinablefeldsthan weredelaredbyhandinC++.Theseresultsaresignif\u00adantlybetterthanourpreviousones,forexampleotesthas \n15.7inlinablefeldsomparedto9inourpriorstudy[20]. Fieldsthatanbeinlinedinsomeasesbutnotinothers areountedasafration,basedonthenumberofsituations \ninwhihtheyanbeinlined. HatLinux6.Ourlow\u00adlevelmeasurementsusedthePMC softwarefromNASAAmes. SinethebenhmarkprogramsareC++odes,theytyp\u00adiallyhavefeldsmanuallyinlined.SineConertsupports \naava\u00adlikeuniformreferenemodel,allobjetsareaessed viapointers,evenifdelaredinlinealloated.Conertgen\u00aderatesappropriateodetopreservetheoriginalC++seman\u00adtisusingareferenemodel.Conertwithobjetinlining \nfusesmultipleobjetstogether,preservingtheuniformref\u00aderenemodelimplementationevenwheninlinealloating objets. \n7.4CalibrationResults ToprovidealibrationfortheperformaneoftheConert ompiler,withandwithoutobjetinlining,weompiledour \n benhmarkprogramsusingg++andomparedtheperfor\u00admanetothatoftheprogramsompiledbyConert.Fig\u00ad ure11presentsConertperformanenormalizedtoG++,Figure12assessestheefetivenessofourompileranal\u00ad \nysisatfndingsemantiallyinlinablefelds;sinetheyare andshowsompetitiveperformane. basedonprogramsemantis,thesemeasurementsareof \nountsofdynamiobjetsatruntime.Thegraphshows twobarsforeahprogram:thefrstbaristhefrationof 352 allobjetsthatsatisfythesemantiriteriaforinlinability \nthatarefoundtobeinlinablebyouranalysis.Thismea\u00adsuresdiretlyhowgoodanapproximationofourinlinability semantisouranalysisis.Theseondbarshowsthefration \nofallpossiblereadsofinlinablefeldsthatourstatianalysis fnds;thisissimplythenumberofreadsofstatiallyinlin\u00adablefeldsasafrationofthenumberofreadsofideally \ninlinablefelds.Theresultsvary,andaregenerallybetter forthesmallprograms.Butevenforthelargeprograms, thefrationisoftenmorethanonethird,withtheaverages \narossallprogramsbeingroughly40%. Fraction of Ideal Objects Fraction of Ideal Reads  Precise 1-CFA 7.2 \n6.3 5.4 4.5 3.6 2.7 1.8 0.9 | | | | | | | | | 0.0 ||||||||| 1.0 Figure13:ContextSensitivityrequiredforObjetInlining. \nAnalysisdatasizetofndinlinablefelds. Sine,aswehaveseenabove,ouranalysisfndsstritly morefeldsthan1\u00adCFA,andusuallymanymore,ataom\u00adpetitiveorlowerost,weshallpresenttherestofourresults \nofourownadaptiveanalysisonly. 0.8 0.6 0.4 0.2 0.0 ||||||||| Precise 1-CFA 6.4 5.6 4.8 4.0 3.2 2.4 1.6 \n0.8 | | | | | | | | | 0.0 Figure12:FrationofSemantiIdealforStatiAnalysis AnalysisCost.Figures13and14revealthatourobjet \ninliningoptimizationhasreasonableanalysisost,andthat ostdoesnotinreaserapidlywithprogramsize(asnor\u00admalizedbythenumberofvaluesintheprogramsoure). \nOverall,theostofouranalysisislesswhenusingConert's advanedanalysisframeworkthanwhentraditional1\u00adCFA, \ndespitegettingbetterresults,andtheConertframework saleswithprogramsizemuhbetterthan1\u00adCFA.Webe\u00adlievethatConert'sdemand\u00addrivenanalysissystemallows \npratialsalabilitytomuhlargerprograms.Figure13 ountsaverageontextspermethod,forouradaptiveanal\u00adysisand1\u00adCFA.Thisapturesthespaerequirementsofour \nanalysis.Allofthenumbersforouranalysisarerelatively Figure14:AnalysisCost.Showsanalysisomputationalto \nidentifytheinlinablefelds(normalizedtoprogramsize). CloningCost.Figure15showsthatobjetinlininghaslow,withthemaximumbeingabout2.4ontextspervalue \nmodestandsalableloningrequirements;thenumberofre\u00adforxpdf.Thereisnodisernibletrendofostwithprogram quiredlonesisbelow1.5permethodforallprogramsexept \nsizeforouranalysis;indeed,thelargestprogram,xpdf,has demo6,andtheseondlargestode,otest,hasthesmallest \noneofthelowestosts.1\u00adCFA,ontheotherhand,shows numberofrequiredlones,at1.04permethod.Thesesmall dramatiostgrowthforthelargestprograms,otestand \nnumbersaredespitepolymorphiinlininginwhihthesame xpdf. lassisinlinedintomultiplefelds;thenumberoflonesis \nFigure14showsthetotalworkdonebytheanalysissys\u00adsmallbeauseourobjetlayoutalgorithmisabletoarrange temforouranalysisinbothConertand1\u00adCFAframeworks; \nthatalmostalloftheseaseshaveonformantobjetlayout. itshowsthenumberofonstraintpropagationsnormalized byprogramsize.Asourprogramanalysisisonstraint\u00ad \nbased,onstraintpropagationsaptureamountofworkthe analysissystemdoes.Conert'sdemand\u00addrivenrefnement allowssignifantdiretedanalysiswhihanfollowtheriti\u00adalprogramstruture,butallowsittobedoneatreasonable \nost.Overall,theamountofworkdoesgrowasprogramsize grows,althoughthelargestprogram,xpdf,hasoneofthe lowestosts.Thedominantefetisofprogramstruture, \nandtheneedforanalysistounravelit.Forexample,dit hasanespeiallyomplexstruture,withmutuallyreursive assignmentsthrustate,andthatausesittohaveonsider\u00adablymoreworkthananyotherprogram.For1\u00adCFA,ost \noneagaingrowssubstantiallyforthelargestprogram,xpdf. 7.6ObjetInliningImpatResults FieldAessesFigures16and17andshowthatobjet \ninliningsubstantiallyreduesthedynamiountoffelda\u00adesses.Thisyieldssignifantimprovementsinmemoryper\u00adformane.Figure16hasfourbarsforeahprogram;from \nlefttoright,theyareobjetfeldreads,allprogramdata loads,L1dataahemisses,anddatadependeneindued readstalls.Thenumbersshowthefrationofoperations \nfromthebaseprogramremainingintheinlinedone.Field readsarereduedby4%to46%withanaverageredution of28%.Dataloadsarereduedfrom3%to26%,withan \nfraction remaining 1.0 field reads data loads L1 read misses L1 read stalls   0.8 0.6 0.4 0.2 | 0.0 \nFigure16:FieldReadCountsand1ahemisseswithandwithoutObjetInlining required clones field writes L1 write \nstalls fraction remaining actual clones1.8 1.5 1.2 0.9 0.6 0.3 |||||| 1.0 0.8 ||||| 0.6 0.4 0.2 | | | \n| | | | | | | | | | | | | | | | | 0.0 0.0 Figure15:CloningCostsofObjetInlining.Showsthe numberofadditionalmethodswhihmustbelonedasa \nresultoftheobjetinliningoptimization. averageredutionof12%.Dataahemissesandreadstalls arereduedbyanaverageof25%. \nFigure17showstheredutionsinmemorywritesdue toobjetinlining.Ithastwoolumns:ontheleftisthe frationoffeldwritesremainingafterobjetinlining,and \nontherightisthefrationofwritestallylesremaining. Thefrationofwritesremovedis15%andthefrationof writestallsremovedaverages27%exludingoopakwhih \nisanomalousandinreasesby12timesduetoremovingthe heapaessesfromatightloop,ausingtheremainingwrites torunmuhfaster.However,theoverallprogramruntime \ndoesimprove. ObjetAlloationsFigure18showsthatobjetinlining greatlyreduesthenumberofobjetsalloated:itremoves \nnearlyhalfofallobjetsinallasesbutone,andremovesan averageof58%.Furthermore,thenumberofbytesalloated dropsby35%onaverageaswell,duetothereduedob\u00adjetoverheadoffewerobjetsandthespaesavedbyelided \npointerfelds.Theseresultsaresignifantlybetterthanour previousresults,whihshowedabout40%ofobjetsbeing \nremovedonasuiteofsmallerprograms. ProgramRuntimeTheimprovementsinmemorysystem performaneduetoobjetinliningmakeasignifantim\u00adprovementinoverallprogramperformane,asshowninFig\u00adure19.Figure19hastwobarsperprogram:thefrstisthe \nFigure17:FieldWriteOperationswithandwithoutObjet Inlining.Showsthesignifantbeneftsofobjetinliningon feldwrites. \ninstrutionountandtheseondisruntime,bothnormal\u00adizedtotheprogramwithoutobjetinlining.Theredution ininstrutionountisgenerallylessthanthatinruntime, \nandthedifereneisexplainedbytheredutionsinreadand writestallsshownabove. Ourempirialresultsindiatethatobjetinliningissu\u00adessfulinitsobjetivesofreduingfeldreadsandobjet \nalloations,removing28%and58%respetively.This,in turn,reduesahemissesbynearlyone\u00adthird.Andobjet inliningdoesmakeasignifantimprovementinoverallpro\u00adgrambehavior:datareadsarereduedby12%andruntime \nby14%onaverage. BRelatedWork OurPreviousWork.Theideaofdoinginlinealloation automatiallyisbynomeansnew[6],butprevioussystems \nhavehadinsu\u00c6ientanalysispowerahievegeneralauto\u00admatiobjetinlining.Forexample,[8]presentsatrans\u00adformationthatinlinestheobjetstateinstakframes,but \ntheydonotpresentautomatianalysissu\u00c6ienttomakeit fullyautomati.Weintroduedabasiobjetinlininganal\u00adysisandoptimizationin[19]andpresentedamoreextensive \nevaluationofitin[20].Herewepresentaformalsemantis fortheanalysiswhihweusedtoeliminateseverallimita\u00adtionsofthepreviouswork.In[19],wedesribedasimple \nmehanismforobjetlayoutwhihdidnothandleallases, andausedalotofloning,partiularlyinlargeprograms. objects \nallocated workisquitediferentphilosophiallyfromtheruntimeo\u00ad bytes allocated alloationandobjettransformationworkofChilimbiwhih \nfraction remaining requiresdetailedprogrammerinformationfororretness. Inontrast,ourtransformationsarefullyautomati,requir\u00ad \ningnoprogrammerintervention. ||||| Unboxing.Muhworkonoptimizationofheapobjetshas fousedonreursivedatastrutures.Inontrast,thepri\u00admarysoureofobjetinliningfoundbyouranalysisisstati \nindiretionhainsandpointerhierarhiesinduedbyode reuse,modules,andgenerilasslibraries.Forexample,op\u00adtimizationofreursivedatastruturesinthefuntionalpro\u00adgrammingommunity,unboxing(e.g.[25]),generatesspe\u00adializedrepresentationstoelidepointerdereferenes.The \nanalysesusedforunboxingpolymorphistruturesresem\u00ad bleouranalysistotrakobjetuses,butthelakofstate | | | \n| | | | | | | Figure18:ObjetAlloationswithandwithoutObjetIn\u00ad lining.Showshowobjetinliningandramatiallyredue \nupdatesimplifestheanalysisproblems.Shaoetal.[38] thenumberofobjetswhihmustbealloated. presentananalysisforunrollinglinkedlists,butonlyfor \nthefuntionalsubsetofML inlinealloatingtailpointers instruction count fraction remaining tosomefxeddepth. \nruntime 1.0 0.8 ||||| Fortran.Optimizingarraylayoutforaheperformane [2,44,26]alsoinvolvestransformingdatalayout.Fortran \narraysarestruturallyimmutable,whihprovidesthesame simplifationsasarefoundinfuntionallanguages.Hene, thehallengesinanalyzingheapalloatedobjetstrutures \nwheredatafowandaliasingarethemajorproblemsissig\u00ad nifantlydiferent. 0.6 0.4 0.2 | | | | | | | | | | 0.0 \n9Conlusions Wehavepresentedfurtherdevelopmentstotheobjetinlin\u00adingoptimizationwepresentedin[19,20]:wedevelopeda \nformalmodelofobjetinlining,andderivedfromthator\u00adFigure19:ProgramRuntimewithandwithoutObjetInlin\u00ad ing.Showssignifantoverallruntimeimprovementsbased \nonobjetinlining. Inthispaper,wehavedesribedanalgorithmwhihglob\u00ad allyoptimizestheobjetlayouts,keepingodesizeinreases \nlow.Finally,herewepresentamoreomprehensiveevalu\u00ad ationwithmuhlargerprograms.Thisevaluationpresents retnessonditionsforobjetinlining;wepresentedanal\u00ad \ngorithmforlayingoutthefusedlassesthatobjetinlining reates;andwearriedoutamorethoroughgoingevalua\u00adtionofobjetinlining,measuringarangeompile\u00adtimeand \nruntimeharateristisonawiderrangeofprogramsthan before.Ourresultsindiatethatournewly\u00adformulatedanal\u00ad ysisandtransformationperformwellandsalably.fnding \nabout30%offeldsinlinable.atmoderateost.Wefound detailedlow\u00adlevelarhiteturedatasuhasahemissesto morefullyexploretheoperationofobjetinlininginpra\u00ad \ntie.Finally,ouroverallresultsaresignifantlybetterthan previousstudies,inludingimprovementstheanalysisefe\u00adouranalysishadbothbetterresultsandlowerandmore \nsalableostthanatraditional1\u00adCFAanalysis.Andthe runtimeimpatissignifant:onaverage,28%offeldreads, 58%ofobjetreations,12%ofallloads,25%ofallL1data \ntivenessandimpatonperformane. ahemissesand25%ofreadstallsareremoved.Thisim\u00adprovedruntimebyanaverageof14%. \nObjetOrientedSystems.Theimpetusforobjetinlin\u00adingistomaththeperformaneoflanguageswithexpliit inlininglikeC++[22]andOberon\u00ad2[43].Whilewereap \nmuhoftheperformanebeneftofustomobjetlayouts, ourapproahallowsprogrammertowriteprogramswitha simpleuniformobjetmodel,withompilertodothedata \nstrutureustomizationdependingonuse. Reently,[12,13],Chilimbietal.presentedseveralteh\u00adniquesforoptimizinglayoutandalloationofobjetsto \nimproveaheperformane.Speifally,reorderingfelds withinlasses,ontrollingtheo\u00adalloationofobjets,and splittingsingleobjetstoonentrate\"hot\"felds.Ourop\u00adtimizationsaremostsimilartoChilimbi'sfeldandobjet \norganizationwork,butourobjettransformationdoesnot useprofleinformation,andfousesonputtingentireob\u00adjetstogether,ratherthansplittingouttheoldparts.Our \nAknowledgements TheresearhdesribedissupportedinpartbyARPAorders #E313and#E524throughtheUSAirForeRomeLaboratory \nContratsF30602-99-1-0534,F30602-97-2-0121,andF30602-96\u00ad1-0286.ItisalsosupportedbyNSFYoungInvestigatoraward \nCCR-94-57809andNSFEIA-99-75020.Itisalsosupportedin partbyfundsfromtheNSFPartnershipsforAdvanedCompu\u00adtationalInfrastruture \ntheAlliane(NCSA)andNPACI.Sup\u00adportfromMirosoft,Hewlett-Pakard,MyriomCorporation,In\u00adtelCorporation,PaketEngines,TandemComputers,andPlat\u00adformComputingisalsogratefullyaknowledged. \nReferenes [14]J.\u00adD.Choi,M.Burke,andP.Carini.E\u00c6ient [1]O.Agesen,J.Palsberg,andM.Shwartzbah.Type infereneofS...:Analysisofobjetswithdynami \nandmultipleinheritane.InProeedingsofECOOP '93,1993. [2]J.M.Anderson,S.P.Amarasinghe,andM.S.Lam. Dataandomputationtransformationsformultiproes\u00adsors.InProeedingsofFifthSymposiumonPriniples \nandPratieofParallelProgramming,1995. [3]A.Ayers,R.Gottlieb,andR.Shooler.Aggressive inlining.InProeedingsofthe1997ACMSIGPLAN \nConfereneonProgrammingLanguageDesignandIm\u00adplementation,pages134 145,LasVegas,Nevada,June 1997. [4]H.Baker.TheTreadmill:Real\u00adtimegarbageolle\u00adtionwithoutmotionsikness.ACMSIGPLANNoties, \n27(3):66 70,Marh1992. [5]T.Ball.What'sinaregion?omputingontrolde\u00adpendeneregionsinlineartimeandspae.Tehnial \nreport,UniversityofWisonsin Madison,1992. [6]A.Blak,N.Huthinson,E.Jul,andH.Levy.Ob\u00adjetstrutureintheemeraldsystem.InProeedingsof \nOOPSLA'86,pages78 86.ACM,September1986. [7]B.Blanhett.Esapeanalysisorretnessproof,im\u00adplementationandexperimentalresults.InProeedings \nofthe25thACMSIGPLAN\u00adSIGACTsymposiumon Priniplesofprogramminglanguages,pages25 37,San Diego,CA,January1998. \n[8]Z.BudimliandK.Kennedy.Optimizingjava:Theory andpratie.Conurreny:PratieandExperiene, 9(6),June1997. \n[9]C.ChambersandD.Ungar.Iterativetypeanalysisand extendedmessagesplitting.InProeedingsoftheSIG\u00adPLANConfereneonProgrammingLanguageDesign \nandImplementation,pages150 60,1990. [10]A.Chien,J.Dolby,B.Ganguly,V.Karamheti,and X.Zhang.Supportinghighlevelprogrammingwith \nhighperformane:TheIllinoisConertsystem.In ProeedingsoftheSeondInternationalWorkshopon High\u00adlevelParallelProgrammingModelsandSupport\u00adiveEnvironments,pages15 \n24,April1997. [11]A.A.Chien,U.S.Reddy,J.Plevyak,andJ.Dolby. ICC++ aC++dialetforhigh\u00adperformaneparallel \nomputation.InProeedingsofthe2ndInternational SymposiumonObjetTehnologiesforAdvanedSoft\u00adware,pages76 95,Marh1996. \n[12]T.M.Chilimbi,B.Davidson,andJ.R.Larus.Cahe\u00adonsiousstruturedefnition.InProeedingsofthe 1999ACMSIGPLANConfereneonProgramming \nLanguageDesignandImplementation,Atlanta,Geor\u00adgia,May1999. [13]T.M.Chilimbi,M.D.Hill,andJ.R.Larus.Cahe\u00adonsiousstruturelayout.InProeedingsofthe1999 \nACMSIGPLANConfereneonProgrammingLan\u00adguageDesignandImplementation,Atlanta,Georgia, May1999. fow\u00adsensativeinterproeduralomputationofpointer\u00adinduedaliasesandsideefets.InTwentiethSympo\u00adsiumonPriniplesofProgrammingLanguages,pages \n232 245.ACMSIGPLAN,1993. [15]R.Cytron,J.Ferrante,B.Rosen,M.Wegman,and F.Zadek.Ane\u00c6ientmethodofomputingstati \nsingleassignmentformandtheontroldependene graph.ACMTransationsonProgrammingLanguages andSystems,13(4):451 \n490,Otober1991. [16]J.Dean,C.Chambers,andD.Grove.Seletivespeial\u00adizationforobjet\u00adorientedlanguages.InProeedingsof \ntheACMSIGPLAN'95ConfereneonProgramming LanguageDesignandImplementation,pages93 102, LaJolla,CA,June1995. \n[17]A.Deutsh.Interproeduralmay\u00adaliasanalysisfor pointers:Beyondk\u00adlimiting.InProeedingsoftheSIG\u00adPLANConfereneonProgrammingLanguageDesign \nandImplementation,pages230 241,1994. [18]A.Diwan,K.S.MKinley,andJ.E.B.Moss.Type\u00adbasedaliasanalysis.InProeedingsofthe1998ACM \nSIGPLANConfereneonProgrammingLanguageDe\u00adsignandImplementation,pages106 117,Montreal, Canada,June1998. \n[19]J.Dolby.Automatiinlinealloationofobjets.In Proeedingsofthe1997ACMSIGPLANConferene onProgrammingLanguageDesignandImplementa\u00adtion,pages7 \n17,LasVegas,Nevada,June1997. [20]J.DolbyandA.A.Chien.Anevaluationofautomati objetinlinealloationtehniques.InProeedingsofthe \nThirteenthAnnualConfereneonObjet\u00adOrientedPro\u00adgrammingLanguages,SystemsandAppliations(OOP\u00adSLA),Vanouver,BritishColumbia,Otober1998. \nAvailableathttp://www-sag.s.uiu.edu/papers/ oopsla-98.ps. [21]J.R.EllisandD.L.Detlefs.Safe,e\u00c6ientgarbage \nolletionfor++.Tehnialreport,XeroxPaloAlto ResearhCenter,June1993. [22]M.A.EllisandB.Stroustrup.TheAnnotatedC++ \nRefereneManual.Addison\u00adWesley,1990. [23]R.GhiyaandL.J.Hendren.Connetionanalysis:A pratialinterproeduralheapanalysisforC.InPro\u00adeedingsoftheWorkshopforLanguagesandCompilers \nforParallelComputing,1995. [24]K.E.Gorlen,S.M.Orlow,andP.S.Plexio.DataAb\u00adstrationandObjet\u00adOrientedProgramminginC++. \nJohnWileyandSons,1991. [25]C.Hall,S.L.Peyton\u00adJones,andP.M.Sansom.Fun\u00adtionalProgramming,Glasgow1994,hapterUnboxing \nUsingSpeialization.WorkshopsinComputingSi\u00adene.Springer\u00adVerlag,1995. [26]M.W.Hall.ManagingInterproeduralOptimization. \nPhDthesis,RieUniversity,1991. [27]G.Hamilton,editor.lavaBeans1.01Speifa\u00adtion.SunMirosystems,MountainView,CA,1997. \npublishedonlineathttp://www.javasoft.om/beans/ dos/beans.101.ps. [28]U.H6olzle,C.Chambers,andD.Ungar.Optimiz\u00adingdynamially-typedobjet-orientedlanguageswith \npolymorphiinlineahes.InECOOP'91Conferene Proeedings.Springer-Verlag,1991.LetureNotesin ComputerSiene512. \n[29]U.H6olzleandD.Ungar.Optimizingdynamially\u00ad [42]M.TofteandL.Birkedal.Aregioninferenealgorithm. TransationsonProgrammingLanguagesandSystems \n(TOPLAS),20(4):734.767,July1998. [43]N.WirthandJ.Gutkneht.ProjetOberon:TheDe\u00adsignofanOperatingSystemandCompiler.Addison \nWesley,1992. dispathedallswithrun-timetypefeedbak.InPro\u00adeedingsofthe1993ACMSIGPLANConfereneon ProgrammingLanguageDesignandImplementation, \npages326.336,June1994. [30]W.LandiandB.Ryder.Asafeapproximatealgorithm forinterproeduralpointeraliasing.InACMSIGPLAN \nSymposiumonProgrammingLanguageDesignandIm\u00adplementation,pages235.249,1992. [31]J.PalsbergandM.Shwartzbah.Objet-orientedtype \ninferene.InProeedingsofOOPSLA'91,pages146. 61,1991. [32]H.D.PandeandB.G.Ryder.Statitypedetermina\u00adtionandaliasingin++.TehnialReportLCSR-TR\u00ad250,LaboratoryofComputerSieneResearh,July \n1995. [33]J.Philbin,J.Edler,O.J.Anshus,C.C.Douglas,and K.Li.Threadshedulingforaheloality.InProeed\u00adingsoftheSeventhSymposiumonArhiteturalSup\u00adportforProgrammingLanguagesandOperatingSys\u00adtems(ASPLOS\u00adVII),pages60.71,1996. \n[34]J.Plevyak.OptimizationofObjet\u00adOrientedandCon\u00adurrentPrograms.PhDthesis,UniversityofIllinoisat Urbana-Champaign,Urbana,Illinois,1996. \n[35]J.PlevyakandA.A.Chien.Preiseonretetypein\u00adfereneofobjet-orientedprograms.InProeedingsof OOPSLA'94,Objet\u00adOrientedProgrammingSystems, \nLanguagesandArhitetures,pages324.340,1994. [36]J.PlevyakandA.A.Chien.Typediretedloningfor objet-orientedprograms.InProeedingsoftheWork\u00adshopforLanguagesandCompilersforParallelCom\u00adputing,pages566.580,1995. \n[37]E.Ruf.Context-insensitivealiasanalysisreonsidered. InProeedingsofthe1995ACMSIGPLANConfer\u00adeneonProgrammingLanguageDesignandImplemen\u00adtation,pages13.22,June1995. \n[38]Z.Shao,J.H.Reppy,andA.W.Appel.Unrollinglists. InACMConfereneonLispandFuntionalProgram\u00adming,June1994. \n[39]A.A.StepanovandM.Lee.Thestandardtemplateli\u00adbrary.ISOprogramminglanguageC++projet.Teh\u00adnialReportX3J16/94-0095,WG21/NO482,Hewlett\u00adPakard,May1994. \n[40]D.StoutamireandS.Omohundro.Sather 1.1,draft.Availableonlinefromhttp:// www.isi.berkeley.edu/s sather/Sather-1.1.ps, \nAugust1995. [41]SunMirosystemsComputerCorporation.TheJava LanguageSpeifation,Marh1995.Availableat http://java.sun.om/1.0alpha2/do/java-whitepaper.ps. \n[44]M.E.WolfandM.S.Lam.Adataloalityoptimizing algorithm.InProeedingsofthe1991ACMSIGPLAN ConfereneonProgrammingLanguageDesignandIm\u00adplementation,June1991.\n\t\t\t", "proc_id": "349299", "abstract": "<p><italic>Automatic object inlining</italic> [19, 20] transforms heapdata structures by fusing parent and child objects together. It canimprove runtime by reducing object allocation and pointer dereferencecosts. We report continuing work studying object inlining optimizations.  In particular, we present a new semantic derivation of the correctness conditions for object inlining, and program analysis which extends our previous work. And we present an object inlining transformation, focusing on a new algorithm which optimizes class field layout to minimize code expansion. Finally, we detail a fuller evaluation on eleven programs and libraries (including Xpdf, the 25,000 line Portable Document Format (PDF) file browser) that utilizes hardware measures of impact on the memory  system. </p><p>We show that our analysis scales effectively to large programs,finding many inlinable fields (45 in xpdf) at acceptable cost, and weshow that, on some programs, it finds nearly all fields for which object inlining is correct, and averages 40% of such fields across our benchmarks. We implement our analyses in an advanced analysis infrastructure, and we show that, compared to traditional 1-CFA, that infrastructure provides better results and lower and more scalable cost. Across all programs, analysis identified about 30% of objects as inlinable on average. Our transformation increases code size by only 20% while inlining this 30% of fields. Inlining these objects eliminated on average 28% of field reads, 58% of object creations, 12% of all loads. Further,  the optimized programs have significantly improved memory reference behavior, producing 25% fewer L1 data cache misses and 25% fewer read stalls. On average the runtime improved by 14%.</p>", "authors": [{"name": "Julian Dolby", "author_profile_id": "81100506419", "affiliation": "IBM T. J. Watson Research Center, Yorktown Heights, NY", "person_id": "PP18001962", "email_address": "", "orcid_id": ""}, {"name": "Andrew Chien", "author_profile_id": "81406600821", "affiliation": "Department of Computer Science and Engineering, University of California, San Diego", "person_id": "PP77043677", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/349299.349344", "year": "2000", "article_id": "349344", "conference": "PLDI", "title": "An automatic object inlining optimization and its evaluation", "url": "http://dl.acm.org/citation.cfm?id=349344"}