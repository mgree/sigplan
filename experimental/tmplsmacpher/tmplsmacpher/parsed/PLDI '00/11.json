{"article_publication_date": "05-01-2000", "fulltext": "\n ImprovedSpillCodeGeneration forSoftwarePipelinedLoops JavierZalamea,JosepLlosa,EduardAyguadeeandMateoValero \nDepartamentd'ArquitecturadeComputadors UniversitatPolitaecnicadeCatalunya cr.JordiGirona1{3,MaodulD6,CampusNord \n08034,Barcelona,SPAIN fjzalamea,josepll,eduard,mateog@ac.upc.es Abstract Softwarepipeliningisaloopschedulingtechniquethatex\u00adtractsparallelismoutofloopsbyoverlappingtheexecution \nofseveralconsecutiveiterations.Duetotheoverlappingof iterations,schedulesimposehighregisterrequirementsdur\u00adingtheirexecution.Ascheduleisvalidifitrequiresatmost \nthenumberofregistersavailableinthetargetarchitecture. Ifnot,itsregisterrequirementshavetobereducedeither \nbydecreasingtheiterationoverlappingorbyspillingregis\u00adterstomemory.Inthispaperwedescribeasetofheuris\u00adticstoincreasethequalityofregister{constrainedmodulo \nschedules.Theheuristicsdecidebetweenthetwoprevi\u00adousalternativesanddefnecriteriaforefectivelyselecting \nspillingcandidates.Theheuristicsproposedforreducingthe registerpressurecanbeappliedtoanysoftwarepipelining \ntechnique.Theproposalsareevaluatedusingaregister{ conscioussoftwarepipelineronaworkbenchcomposedofa largesetofloopsfromthePerfectClubbenchmarkanda \nsetofprocessorconfgurations.Proposalsinthispaperare comparedagainstapreviousproposalalreadydescribedin \ntheliterature.Foroneoftheseprocessorconfgurationsand thesetofloopsthatdonotftintheavailableregisters(32), \naspeed{upof1.68andareductionofthememorytrafcby afactorof0.57areachievedwithanafordableincreasein compilationtime.Foralltheloops,thisrepresentsaspeed{ \nupof1.38andareductionofthememorytrafcbyafactor of0.7. Keywords:Instruction-LevelParallelism,SoftwarePipelin\u00ading,RegisterAllocation,SpillCode. \n1Introduction Softwarepipelining[11]isaninstructionschedulingtech\u00adniquethatexploitsinstructionlevelparallelism(ILP)out \nofaloopbyoverlappingoperationsfromvarioussuccessive loopiterations.Diferentapproacheshavebeenproposed \nintheliterature[2]forthegenerationofsoftwarepipelined schedules.Someofthemmainlyfocusonachievinghigh \nthroughput[1,13,18,24,25,27].Themaindrawbackof Permissiontomakedigitalorhardcopiesofallorpartofthisworkfor \npersonalorclassroomuseisgrantedwithoutfeeprovidedthatcopies arenotmadeordistributedforproftorcommercialadvantageand \nthatcopiesbearthisnoticeandthefullcitationonthefrstpage.To copyotherwise,orrepublish,topostonserversortoredistributeto \nlist,requirespriorspecifcpermissionand/orafee. PLDI2000,Vancouver,BritishColumbia,Canada. Copyright2000ACM1{58113{199{2/00/0006...$5.00. \ntheseaggressiveschedulingtechniquesistheirhighregister requirements[21,23].Usingmoreregistersthanavailable \nrequiressomeactionswhichreducetheregisterpressurebut mayalsodegradetheperformance(eitherduetotheaddi\u00adtionalcyclesinthescheduleorduetoadditionalmemory \ntrafc).Forthisreason,otherproposalshavefocusedtheir attentionontheminimizationoftheregisterrequirements \n[14,17,22,29]. Registerallocationconsistsinfndingthefnalassign\u00admentofregisterstoloopvariables(variantsandinvariants) \nandtemporaries.Ithasbeenextensivelystudiedinthe frameworkofacyclicschedules[5,7,8,9]basedontheorigi\u00adnalgraphcoloringproposal[10].However,softwarepipelin\u00adingimposessomeconstraintsthatpreventtheuseofthese \ntechniquesforregisterallocation.Althoughtherehavebeen proposalstohandletheseconstrains[15,16,26],noneof \nthemdealswiththeadditionofspillcode(anditsschedul\u00ading)thatisneededtoreducetheregisterpressureinsoftware \npipelinedloops. Anysoftwarepipelinerfailswhenitgeneratesaschedule thatrequiresmoreregistersthanthoseavailableinthetar\u00adgetmachine.Inthiscase,someadditionalactionshaveto \nbeperformedinordertoalleviatethehighregisterdemand [26].Oneoftheoptionsistorescheduletheloopwitha reducedexecutionrate(i.e.withlessiterationoverlapping); \nthisreducesthenumberofoverlappedoperationsandvari\u00adables.Unfortunately,theregisterreductionmaybeatthe \nexpenseofareductioninperformance.Anotheroptionisto spillsomevariablestomemory,sothattheydonotoccupy registersforacertainnumberofclockcycles.Thisrequires \ntheinsertionofstoreandloadinstructionsthatfreetheuse oftheseregisters.Theevaluationperformedin[20]shows \nthatreducingtheexecutionratetendstogenerateworse schedulesthanspillingvariables;however,itisalsoshown \nthat,inafewcases,theoppositesituationmayhappen. Severalaspectscontributetothequalityofthespillcode generatedbythecompiler.Thefrstoneisdecidingifthe \nspillcodeappliestoalltheusesofavariableorjusttoa subset.Thesecondaspectrelatestotheselectionofspilling \ncandidates,whichimpliesdecidingthenumberofvariables (oruses)selectedforspillingandthepriorityfunctionused \ntoselectamongthem.Bothdecisionsneedaccurateesti\u00admatesofthebenefts,intermsofregisterpressurereduction, \nthattheselectionofaspillingcandidatewillproduce. Inordertomotivatethiswork,Figure1(dashedline) showsthepercentageofloopsinourworkbench(Section \n2.4)thatrequirelessthanaspecifcnumberofregistersin anarchitecturewithanunboundednumberofregisters.Fig\u00adure1(solidline)showsthepercentageofthetotalexecution \n % of loops % of execution cycles Table1:Motivatingexampleforimprovingthespillprocess. Metric Ideal \n[20] [28] Thispaper avg.executionrate 12.01 28.32 29.43 20.66 avg.memorytrafc 15.38 50.88 52.13 35.71 \n 80 60 40 20 0 Figure1:Percentageofloops(a)andpercentageofexecution cycles(b)thatrequirelessthanaspecifcnumberofregisters. \ncyclesspentonthem.Noticethatalthoughthepercentage ofloopsthatrequireahighnumberofregistersissmall, thepercentageoftimeisimportant.Forinstance,only12% \n(3%)oftheloopsrequiremorethan32(64)registersbut represent34%(21%)ofthetotalexecutiontime.These loopswouldneedspillcodewhenscheduledinanarchitec\u00adturewithaboundednumberofregisters,andwhosebehav\u00adiorcanbeimprovedwithbetterspillcodealgorithms.Table \n1shows,fortwodiferentspillalgorithms,theaverageexe\u00adcutionrate(cyclesbetweentheinitiationoftwoconsecutive \niterations)andaveragememorytrafc(numberofmemory accessesperiteration)fortheloopswhosescheduledoesnot \nftin32registersandforoneoftheprocessorconfgurations usedthroughoutthispaper.Thetablealsoincludesthe idealcase(i.e.wheninfniteregistersareavailableandno \nspillisneeded).Noticethatthegapbetweenthetwoim\u00adplementations(onecommercial,asdescribedin[28]andthe otherexperimental[20])andtheidealcaseislarge.These \nresultsmotivatedtheproposalofnewheuristicstoimprove thewholeregisterpressurereductionprocess;thelastcol\u00adumninthesametableshowstheresultsafterapplyingthe \nheuristicsproposedinthispaper,whichrepresentmorethan a40%reductionintheexecutionrateandmemorytrafc withrespecttothesetwopreviousproposals. \nInthispaperweusearegister{consciouspipeliner,named HypernodeReductionModuloScheduling(HRMS[22]),to scheduletheloops.Oncetheloopsarescheduled,register \nallocationisperformedusingthewands{onlystrategywith end{ftandadjacencyordering[26].Then,theregisterre\u00adquirementsaredecreasedtoftintheavailablenumberof \nregisters.Thepapercontributeswithasetofheuristicsto: 1)decidebetweenthetwodiferentpossibilitiesmentioned \nabove(addingspillcodeordirectlydecreasingtheexecu\u00adtionrate);and2)doabetterselectionofspillingcandidates \n(bothintermsofassigningprioritiestothemandselecting theappropriatenumber).Thepaperalsocontributeswith \nananalysisoftheresultswhenspillingofvariablesoruses isperformed.Thediferentproposalsarecomparedagainst \ntheidealcase(whichisanupperboundforperformance) andagainsttheproposalspresentedin[20].Theworkbench iscomposedofalltheloopsfromthePerfectClub[6]that \naresuitableforsoftwarepipelining.Theloopshavebeen obtainedwiththeexperimentalICTINEOcompiler[4]. Thepaperisorganizedasfollows:Section2providesa \nbriefoverviewofmoduloscheduling,registerallocationand spillcodeformoduloscheduling.Section3focusesonthe \ndiferentstepsandproposalsforspillingvariablestomem\u00adory.Then,Section4presentsdiferentalternativestoselect \nthespillingcandidatesinamoreefectiveway,andanalyze thetrade{ofbetweenreducingtheexecutionrateoradding \nspillcode.InSection5thediferentalternativesandheuris\u00adticsareevaluatedintermsofdynamicperformance,taking \nintoaccounttherelativeimportanceofeachloopinthetotal executiontimeofthebenchmark.Finally,Section6states \nourconclusions. 2BasicConcepts 2.1ModuloScheduling Inasoftwarepipelinedloop,thescheduleofaniterationis \ndividedintostagessothattheexecutionofconsecutiveiter\u00adations,whichareindistinctstages,overlap.Thenumberof \nstagesinoneiterationistermedStageCount(SC).The numberofcyclesbetweentheinitiationofsuccessiveitera\u00adtionsinasoftwarepipelinedloopdeterminesitsexecution \nrateandistermedtheInitiationInterval(II). Theexecutionofaloopcanbedividedintothreephases: aramp{upphasethatfllsthesoftwarepipeline,asteady{ \nstatephasewherethemaximumoverlapofiterationsisa\u00adchievedandaramp{downphasethatdrainsthesoftware pipeline.Duringthesteady{statephase,thesamepattern \nofoperationsisexecutedineachstage.Thisisachieved byiteratingonapieceofcode,namedthekernel,that correspondstoonestageofthesteady{statephase. \nTheIIisboundedeitherbyrecurrencecircuitsinthe dependencegraphoftheloop(RecMII)orbyresourcecon\u00adstraintsofthetargetarchitecture(ResMII).Thelowerbound \nontheIIistermedtheMinimumInitiationInterval (MII=max(RecMII,ResMII)).Thereaderisreferredto [13,27]foranextensivedissertationonhowtocalculate \nRecMIIandResMII. Inordertoperformsoftwarepipelining,theHypern-odeReductionModuloScheduling(HRMS)heuristic[22] \nisused.HRMSisasoftwarepipelinerthatachievestheMII foralargepercentageoftheworkbenchconsideredinthis paper(97.4%ofloops).Inaddition,itgeneratessched\u00aduleswithverylowregisterrequirements.Inordernotto \noverestimatethenecessityforspillcode,aregister{sensitive softwarepipeliningtechniquehasbeenused.Theschedul\u00adingisperformedintwosteps:afrststepthatcomputesthe \npriorityofoperationstobescheduledandasecondstepthat performstheactualplacementofoperationsinthemodulo \nreservationtable. 2.2RegisterAllocation Oncealoopisscheduledtheallocationofvaluestothereg\u00adistersisperformed.Valuesusedinaloopcorrespondeither \ntoloop{variantorloop{invariantvariables.Loop{invariant variablesarerepeatedlyusedbutneverdefnedduringthe \nexecutionoftheloop.Eachloop{invariantvariablehasonly onevalueforalliterationsoftheloop,andthereforerequires \nasingleregisterduringtheexecutionoftheloop(regardless oftheschedulingandthemachineconfguration). Foreachloop{variantvariableanewvalueisgeneratedin \neachiterationoftheloopandthereforehasadiferentlife\u00adtime(LT)[17].Becauseofthenatureofsoftwarepipelin\u00ading,theLTofvaluesdefnedinaniterationcanoverlapwith \ntheLTofvaluesdefnedinsubsequentiterations.TheLTof loop{variantvariablescanbemeasuredindiferentwaysde\u00adpendingontheexecutionmodelofthemachine.Weassume \nthatavariableisalivefromthebeginningoftheproducer operationuntilthestartofthelastconsumeroperation. ByoverlappingtheLTindiferentiterations,apatternof \nlengthIIcycles,whichisindefnitelyrepeated,isobtained. Thispatternindicatesthenumberofvaluesthatareliveat \nanygivencycle.Themaximumnumberofsimultaneously livevalues(MaxLive)isanaccurateapproximationofthe numberofregistersrequiredfortheschedule[26]. \nLoop{variantvariablesmayhaveLTvaluesgreaterthan II;thisposesanadditionaldifcultysincenewvaluesare generatedbeforepreviousonesareused.Inordertoover\u00adcomethisproblemregistersarerenamedsothatsuccessive \ndefnitionsofthesamevalueusedistinctregisters.Renam\u00adingcanbeperformedatcompiletimeusingmodulovariable \nexpansion(MVE)[19](i.e.unrollthekernelandrenamethe multipledefnitionsofeachvariablethatexistintheunrolled \nkernel).Rotatingregisterflesprovideahardwaresolution tosolvethesameproblemwithoutanyreplicationofthe \ncode[12](i.e.therenamingofthediferentinstantiationsof aloop{variantvariableisdoneatexecutiontime). Inourstudyandimplementation,weassumetheexis\u00adtenceofarotatingregisterfleandusethewands{onlystrat\u00adegyusingend{ftwithadjacencyordering[26].Thisstrat\u00adegyusuallyachievesaregisterallocationthatusesMaxLive \nregistersandalmostneverrequiresmorethanMaxLive+1 registers.However,theheuristicsproposedinthispaperare \napplicableregardlessofthehardwaremodelandtheregister allocationstrategyused. 2.3DecreasingtheRegisterRequirements \nRegisterallocationtechniquesforsoftwarepipelinedloops [26]assumeaninfnitenumberofregisters.Fromnowon \nwecallthenumberofregistersrequiredtoexecuteagiven scheduleUsedRegisters(UR)andthenumberofregisters availableinthetargetarchitectureAvailableRegisters \n(AR). IfURisgreaterthanAR,thenthescheduleobtained isnotvalidforthetargetprocessor.Inthiscasethereg\u00adisterpressuremustbedecreasedsothattheloopcanbe \nexecuted(i.e.wemustobtainaschedulethatassuresthat UR:AR).Alternativewaysofdecreasingtheregisterre\u00adquirementshavebeenoutlinedin[26]:1)toreschedulethe \nloopwithalargerII;2)tospillsomevariablestomemory; or3)tosplittheloopintoseveralsmallerloops.Tothebest \nofourknowledge,loopsplittinghasnotyetbeenevaluated forthepurposeofdecreasingtheregisterpressure.The othertwoalternativeshavebeenevaluatedandcomparedin \n[20]andareusedbyproductioncompilers(e.g.theCydra5 compilerincreasestheII[13],andtheMIPScompiler,as describedin[28],addsspillcode).Next,wesummarizethe \nmainconclusionsdrawnfromthecomparison: ReschedulingtheloopwithalargerIIusuallyleadsto scheduleswithlessiterationoverlapping,andthere\u00adforewithlessregisterrequirements.Unfortunately, \ntheURdecreaseisattheexpenseofareductionin performance(lessparallelismisexploited).Inaddi\u00adtion,forsomeloopsitisnotpossibletofndavalid \nschedulewithUR:ARbysimplyincreasingtheII.  Spillingvariablestomemorymakesavailabletheiras\u00adsociatedregistersforothervalues.Thisspillrequires \ntheuseofseveralloadandstoreoperationsandmay saturatethememoryunits,turningtheloopintoa memory{boundedloop.Inthiscase,theadditionof \nspillcodeleadstoanincreaseoftheIIandtoadegra\u00addationofthefnalperformance.  IncreasingtheIIproduces,ingeneral,worseschedules \nthanaddingspillcode.However,forsomeloopsthefrst optionisbetter.Thissuggeststhatahybridmethod,that insomecasesaddsspillcodeandinothersincreasestheII, \ncanproducebetterresults.Forinstance,[29]proposesto spillasmanyvariablesaspossiblewithoutincreasingtheII \n(i.e.theytrytosaturatethememorybuses).Iftheschedule doesnotftinAR,thentheIIisincreased.Althoughthis heuristicalwaysendsupwithavalidschedule,theydonot \ntrytominimizethememorytrafc(infactmemorytrafc maybeincreasedforloopsthatdonotrequirespill).In thispaperwepresentaheuristicwhichallowstobypassthe \nstepofaddingspillcodeandtosimplyincreasetheII.The paperalsoproposesseveralnewheuristicsforaddingspill \ncode.Theseheuristicsallowabettertuningofthefnal schedulesothattheperformancedegradationaswellasthe memorytrafcoverheadarereduced. \n2.4ExperimentalFramework Thediferentproposalscontainedinthispaperareevalu\u00adatedforasetofstaticallyscheduledconfgurationsPiMjLk \ndefnedasfollows:iisthenumberoffunctionalunitsused toperformeachtypeofcomputation(adders,multipliers anddiv/sqrunits);jisthenumberofload/storeunits;and \nkisthelatencyoftheaddersandthemultipliers.Inallcon\u00adfgurations,thelatenciesofloadandstoreaccessesaretwo \ncyclesandonecycle,respectively(assuminganidealmem\u00adorysystem).Divisionstake17cyclesandsquarerootstake \n30cycles.Allfunctionalunitsarefullypipelined,except forthediv/sqrfunctionalunits.Inparticular,fourdiferent \nconfgurationsareused:P2M2L4,P2M2L6,P4M2L4and P4M4L4,with32and64registers. Inordertoevaluatetheheuristicsproposed,weuseall \ntheinnermostloopsofthePerfectClubbenchmarksuite [6]thathaveneithersubroutinecallsnorconditionalexits. \nLoopswithconditionalstatementshavebeenpreviouslyIF\u00adconverted[3]sothattheybehaveasasinglebasicblock loop.Atotalof1258loops,thatrepresentabout80%of \nthetotalexecutiontimeofthebenchmark(measuredonan HP-PA7100)havebeenscheduled.Firstofallweevaluate theefectivenessofourproposals(Section4);forthiseval\u00aduationweuseonlythoseloopsforwhichUR>AR.The \nnumberofloopsthatfulfllsthiscondition,fortheaforemen\u00adtionedprocessorconfgurations,isshowninTable2.Notice \nthatwhen64registersareavailable,thenumberofloops thatdonotftintheARisverysmall(andthereforethe resultsobtainedaresubjecttothevarianceoftheheuris\u00adticsthemselves).Asaconsequence,themainconclusions \n ofvariablesisusedin[20,28]andspillofusesin[29].In thispaperweevaluatetheperformanceofthetwoalterna\u00ad \nTable2:Numberofloopsthatrequiremoreregistersthanavail\u00ad tivesandtheircombinationwiththeheuristicsproposedin \nableforasetofprocessorconfgurationsPiMjLk. Section4. AR P2M2L4 P2M2L6 P4M2L4 P4M4L4 3264 1079 15825 14631 \n181 39 ofourexperimentalevaluationwillbedrawnfortheconfg\u00adurationswith32registers;however,resultsfor64registers \nwillbeusedtoconfrmthetrend.Thenweevaluatethereal impactonperformancetakingintoaccountalltheloopsin theworkbench(Section5). \nThestaticmetricsusedtoevaluatetheperformanceof thespillingtechniquesarethefollowing: EII,whichmeasuresthesumoftheindividualIIfor \nalltheloopsconsidered.  Etrf,whichmeasuresthesumoftheindividualnumber ofmemoryoperationsusedinthescheduling. \n SchedTime,whichmeasuresthetimetoschedulethe loops.  3AddingSpillCode Theinitialalgorithmthatweuseforgeneratingregistercon\u00adstrainedmoduloschedulesistheiterativealgorithmshown \ninFigure2.Afterschedulingandregisterallocation,ifa looprequiresmoreregistersthanthoseavailable,asetof \nspillingcandidatesisobtainedandordered.Thealgorithm thendecideshowmanycandidatesareselectedandintro\u00adducesthenecessarymemoryaccessesintheoriginaldepen\u00addencegraph.Theloopisrescheduledagainbecausemodulo \nschedulestendtobeverycompact|thegoalistosaturate themostusedresource|anditisverydifculttofndempty slotstoallocatethenewmemoryoperationsinthemodulo \nreservationtable.Theprocessisrepeateduntilaschedule, requiringnomoreregistersthanthoseavailable,isfound.To \nthebestofourknowledge,allpreviousspillingapproaches arebasedonasimilariterativealgorithm[20,28,29]. Inthefollowingsubsectionswedescribeinmoredetail \neachoneoftheseaspectsandpresentthesolutionsproposed bypreviousresearchers. 3.1VariablesandUses Thelifetimeofavariablespansfromitsdefnitiontoitslast \nuse.Thelifetimeofavariablecanbedividedintoseveral sections(calleduses)whoselifetimespansfromtheprevious \nusetothecurrentone.Forexample,Figure3.ashowsa produceroperationfollowedbyfourindependentconsumer operations.Inthiscase,thelifetimeofthevariableranges \nfromthebeginningofProdtothebeginningofCons.4;four diferentusescanbedefned(U1..U4),asshowninthe righthalfofthesamefgure. \nThedisadvantageofspillingofvariablesisthatifone variablehasseveralsuccessors,thenumberofassociated spillmemoryoperationsissuddenlyincreased;thismaypro\u00adduceanincreaseoftheIIandthusreduceperformance.In \naddition,someoftheloadsaddedmightnotactuallycon\u00adtributetoadecreaseoftheregisterrequirements.Spillof usesallowsamoreaccuratecontrolofthespillprocess.Both \nalternativeshavebeenusedinpreviousproposals:spilling 3.2SortingSpillingCandidates Somecriteriaarerequiredtodecidethemostsuitablespilling \ncandidates(i.e.thosewhich,withthesmallestcost,dimin\u00adishtheregisterrequirementsmost).Thiscanbeachievedby \nassigningaprioritytoeachspillingcandidate;thispriority isusuallycomputedaccordingtotheLTofthecandidate \n[20]ortosomeratiobetweenitsLTandthememorytrafc introducedwhenspilled(LT/trf)[20,28,29].Asexpected, thesecondheuristicalwaysproducesbetterresults.Inthis \npaperweproposeanewcriterionthattakesintoaccount thecriticalityofthecyclesspannedbythelifetimeofeach spillingcandidate. \n3.3QuantitySelection Aftergivingprioritiestoeachspillingcandidate,thealgo\u00adrithmdecideshowmanycandidatesareactuallyspilledto \nmemory.Theobjectiveistodecreasetheregisterrequire\u00admentssothatUR:ARwiththeminimumnumberofspill operations.Thisrequiresanestimateofthebeneftsthat \neachcandidatewillproduceinthefnalschedule.However, thenewmemoryoperationsmaysaturatethememoryunits andleadtoanincreaseoftheII;thisincreaseintheIIin \nitself,reducestheregisterpressureandmayleadtoasitua\u00adtionwhereanunnecessarynumberofcandidateshavebeen \nselected. Thisselectionprocesscanbedoneindiferentways.For instance,[20]proposestospillonecandidateatatimeand \nrescheduleagain.Thisheuristicavoidsoverspillingatthe expenseofahighschedulingtime.Toavoidthisnegativeas\u00adpect,thecompilerdescribedin[28]performsseveraltriesby \nspilling2ncandidates,wherenisincreasedbyoneeachtime; theprocessfnisheswhenanewschedulethatftsinARis found.Toreducethenumberofreschedulingsmoreefec\u00adtively,[20]selectsasmanycandidatesasnecessarysoasto \nreduce,inonestep,URtoAR;inordertoavoidoverspilling, eachtimeacandidateisselected,itslifetimeissubtracted \nfromthecurrentUR,toestimatethenumberofregisters afterspilling.Anotheralternative,usedin[29]togenerate \n Generation of Spill Code Add Spill Select Candidates Sort Candidates  Figure2:Flowdiagramfortheoriginalspillalgorithm. \n   a) b)c) Figure3:a)Originalgraph.b)Graphafterspillingavariable.c)Graphafterspillingasingleuseofthesamevariable. \nscheduleswithminimumregisterrequirements,consistsin selectingasmanycandidatesasnecessarytosaturatethe \nmemoryunitswiththecurrentII. Thispaperproposesanewheuristicwhichattemptsto forestalltheoverestimationproducedbysomeoftheprevi\u00adousheuristics. \n3.4AddingMemoryAccesses Oncethesetofcandidateshasbeenselected,thedepen\u00addencegraphismodifed,inordertointroducethenecessary \nload/storeinstructions,andrescheduled. Forthespillingofvariables,astoreoperationhastobe insertedaftertheproduceroneandaloadoperationinserted \nbeforeeachconsumerone.Figure3.bshowsthemodifca\u00adtioninthedependencegraphwhenthevariableinFigure 3.aisspilt.Forthespillingofuses,astoreoperationhasto \nbeaddedaftertheproduceroneandasingleloadoperation addedbeforetheconsumeronewhichendsthecorrespond\u00adinguse.Figure3.cshowsthemodifcationofthedependence \ngraphwhenuseU3isselected(theonethathasthelargest lifetimeandthereforereleasesmoreregisters). Inordertoguaranteethatthespillefectivelydecreases \nUR,thespilledoperationshavetobescheduledasclose aspossibletotheirproducer/consumeroperations.This isaccomplishedbyschedulingthespilloperationandits \nassociatedproducer/consumeroperationasasinglecomplex operation[20]. 4NewHeuristicsforSpillCode Inthissectionwedescribeourproposalsandtheparam\u00adetersthatwehaveusedtocontrolthegenerationofvalid \nschedulesandspillcode.Thefrstcontroldecidesthepri\u00adorityofcandidatestobeselectedforspilling.Theideabe\u00adhindtheproposalistogiveprioritytothosecandidatesthat \ncontribute,inthemostefectiveway,toareductioninthe registerpressure.Thesecondcontroldecideshowmanycan\u00addidatesshouldbespiltbeforereschedulingtheloop.Finally, \nthethirdcontroldecideswhenitisworthapplyingadirect increaseoftheIIwithnoadditionalspill.Inthisanalysis \nwealsoconsiderspillingcandidatestobeeithervariablesor uses. 4.1SpillingofVariablesandSpillingofUses ThealgorithmsdescribedinSection3decidethecandidates \ntobespiltbasedontheirlifetimeoronsomeratiobetween theirlifetimeandthememorytrafcthattheirspillwould generate.Someofthemmakeadiferencewhenconsidering \neitherspillingofvariablesorspillingoftheusesofvariables. Forinstance,Table3showsthe\"IIand\"trffortworegister \nflesizes(32and64registers)andprocessorconfguration P4M2L4,wheneitherthespillingofvariables(rowlabeled \nVar)orthespillingofuses(rowlabeledUse)isapplied (usingtheLT/trfcriteriontoarrangespillcandidates).The \ntableshowsfguresrelativetotheidealcase,i.e.the\"IIand \"trffortheidealcasehasbeensubtractedfromthevalues \nforthespecifcconfguration.Itshouldbenoticedthat,in general,spillingofusesachievesscheduleswithlowerIIand \nmemorytrafc. Fromtheseinitialresults,thereadermayconcludethat spillingofusesismoreefectivethanspillingofvariables. \nHowever,weshallseefurtheralonginthispaperthatour proposalsimprovethemetricsandtendtoreducethegap betweenthesetwoalternatives.Additionally,theirbehavior \nalsodependsonthearchitecturebeingevaluated,aswillbe showninSection5. 4.2CriticalCycle Firstofall,weproposeanewcriteriontoselectcandidates \ntobespilt.SometimestheselectionbasedonLT/trfmay selectcandidatesthatdonotefectivelyreducetheregister \npressure.Therationalebehindthis,isthatthespillingof  Var Use 2400 1500 5000 2200   1000 500 4500 4000 \n2000 1800 SchedTime SchedTime Sum(trf) Sum(trf) Sum(II) Sum(II) 1600 3500 0 b.1 c.1 a.1 300 1000 500 \n400 0 0.2 0.4 0.6 0.8 1 QF (Quantity Factor) 0 0.2 0.4 0.6 0.8 QF (Quantity Factor) 0 0.2 0.4 0.6 0.8 \n1 QF (Quantity Factor) 250 900 800 200 700 a.2 Figure4:Behaviorof:a)III,b)Itrfandc)totalSchedTimefor \ncandidatesreducesthenumberofsimultaneousliveonesbut doesnotdosointheschedulingcyclewherethisnumberis \nhighest(thusdecidingthenumberofregistersneeded). TheCriticalCycle(CC)isdefnedasthescheduling cycleforwhichthenumberofusedregistersURishighest. \nThenewselectioncriteriononlyselectsfromamongstthose candidatesthatcrosstheCC.Thiscriterionforselecting \ncandidatesmayimprovetheefciencyofthespillingprocess asshowninTable3fortheprocessorconfgurationselected. \nRowslabeledVarCCandUseCCshowthetwoperformance metricsforourworkload. Table3:Improvingperformancemetricsbyapplyingdiferent \nheuristics.  300 200 100 0 b.2 c.2 valuesofQFbetween0and1(32registers(.1)and64registers(.2)). 4.3NumberofVariablestoBeSpilt \nThecalculationofthenumberofcandidatesmaynotbe accuratebecausethenewspillcodemightincreasetheII oftheschedule(asaresultofthesaturationofthemem\u00adoryunit).ThisincreaseoftheIIcouldreducetheoverall \nregisterpressureandthereforeitwouldnotbenecessaryto useasmuchspillasinitiallyexpected.Theproposalinthis \nsectionattemptstoforestallthisoverestimation. Thealgorithmassumesthattheregisterflehasmore availableregisters(calledAR0)thanitactuallyhas.Itadds \ntotheactualnumberofavailableregistersanumberpro\u00ad portionaltothegapbetweentheURandAR,asfollows: AR0 =AR+(UR.AR).QF,QFbeingtheQuantity \nFactor.ItshouldbenoticedthatQF=1correspondsto thespillofonecandidateatatimeandQF=0tothespill ofallthenecessarycandidatestoreduceURtoAR. \nQFisaparameterwhoseoptimalvaluedependsonthe Confguration P4M2L4 Registers 32 64 Metrics EII Etrf EII \nEtrf VarUse 23811932 51834454 298250 964 875 VarCCUseCC 21321530 48013773 284225 940 844 VarQFUseQF 16661626 \n36913791 196229 726 787 VarTFUseTF 13401408 30913139 169132 660 593 VarCCQFTFUseCCQFTF 12631232 29682895 \n144126 607 606 architectureandthecharacteristicsoftheloopitself.In thispaperweconductanexperimentalevaluationofthis \nparameterinordertodeterminearangeofusefulvaluesand toanalyzeitsefectsonperformanceandonthescheduling \ntime(SchedTime).Figure4plotsthebehaviorforEII,Etrf andSchedTimeforQFvaluesintherangebetween1and0. ThelowestvaluesofQFleadstoworseresultsintermsof \nIIandtrfbutwithashortSchedTime.LargevaluesforQF leadtobetterperformanceattheexpenseofanincreasein compilationtime.Inparticular,forvaluesofQFlargerthan \n0.6,theincreaseinSchedTimeisnotsimilarlycompensated bytheincreaseinperformance.Ingeneral,mediumvalues \nofQFgenerategoodscheduleswithanegligibleincreasein compilationtime.Thespikesthatappearintheseplotsare \nduetothevarianceinthebehaviourofboththeheuristic andtheschedulerwhenusedoverasmallnumberofloops (e.g.mainlyinthecaseof64registers). \n Var Use 2400 200 5000 2200 150 4500   2000 1800 1600 4000 3500 100 50 SchedTime SchedTime Sum(II) \nSum(II) Sum(trf) Sum(trf) 3000 1400 2500 0 a.1 b.1 c.1 300 60 900 TF (Traffic Factor) TF (Traffic Factor) \nTF (Traffic Factor)   250 200 800 700 600 40 20 150 500 a.2 Figure5:Behaviorof:a)III,b)Itrfandc)SchedTimewhenTFThefrstpoint(*)correspondstoTF!1. \nTable3(rowslabeledVarQFandUseQF)showsthe resultsforQF0.5.Noticethatthisvaluedoesnotgreatly increasethecompilationtimewhileitconsiderablyreduces \nboththeIIandtrf. 4.4TrafcControl Theaforesaidtechniquestrytoimprovetheperformanceof thespillprocessbyincreasingtheefectivenessoftheselec\u00adtionofcandidates.Therearesituationsinwhichitisbetter \ntoincreaseIIinsteadofapplyingspill.Forexample,when AR:URandaddingspillcodewouldleadtoasaturation ofthememoryunit;inthiscasetheIIandmemorytrafc \nwouldbeincreased(inordertoftthenewmemoryopera\u00adtions).However,ifweonlyincreasetheII,withoutadding spillcode,thememorytrafcwillnotincreaseandwemight \n0 b.2 c.2 rangesbetween0.7and1.4(32registers(.1)and64registers(.2)). obtainabettertrade{ofbetweenbothmechanisms.More\u00adover,ifwetakeTF0thenwearealwaysincreasingII, \nandifwetakeTF!1thenwearealwaysinsertingspill. AlthoughTFcantakeanypositivevalue,wehaveob\u00ad servedthatthebestresultsareobtainedwhenTFranges \nbetween0.7and1.4.Figure5plotsthebehaviorofEII,Etrf andSchedTimeforvaluesofTFinthisrange.Ingeneral, noticethatthebestvalueofIIisobtainedwithaTFvalue \ncloseto0.95.Memorytrafcisreducedifsmallervaluesfor TFareused.Noticethatthetimerequiredtogeneratethe schedulesshowsasmallvariation. \nTable3(rowslabeledVarTFandUseTF)showsthe performanceintermsofEIIandEtrfwhentheTFissetto alsoreduceUR.Figure6showsthealgorithmproposedwith \nacontrolpointthatdecideswhenitisbettertoincreaseII ortoinsertspillcode. Inordertoforestalltheabovesituation,thealgorithm \nestimatesthememorytrafc(numberofloadandstorein\u00adstructions)thatwouldbeintroducedifspillingwereinserted \n(NewTrf).Ifthemaximumtrafc(MaxTrf)thatcanbesup\u00adportedwiththecurrentvalueofIIisnotenoughtoabsorb NewTrf,thenthealgorithmdirectlyincreasestheII(with\u00adoutinsertingspillcode)andtheprocessisrepeatedagain. \nParticularly,thenewIIvaluecouldproducelessspillcode orcouldevenavoidit. Themaximumamountofmemorytrafcthatthearchi\u00adtecturecansupportismultipliedbyTF(Tra.cFactor) \ntocontrolthesaturationofthememoryunit(i.e.spillcode isaddedifNewTrf:MaxTrf*TF).Thisisbecausethere  isatrade{ofbetweenapplyingthespillingmechanismandFigure6:Flowdiagramfortheproposedalgorithmthatcom\u00adbinesspillcodeandtrafccontrol. \nincreasingtheII.WhentheTFparameterisincluded,we  Var QF = 0.00 Var QF = 0.10 Var QF = 0.30 Var QF = \n0.50 2400 300 5000 2200 4500 200 2000 4000 1800 3500 100   SchedTime SchedTime Sum(II) Sum(II) Sum(trf) \nSum(trf) 1600 3000 1400 0 a.1 b.1 c.1 300 60 900   250 200 800 700 600 500 40 20 150 0 a.2 b.2 c.2 \nFigure7:Behaviorof:a)III,b)Itrfandc)SchedTimeforseveral(.1)and64registers(.2)).Thefrstpoint(*)isgivenwithTF!1. \n0.95.Noticethatfor32registers,spillingofvariablesgives betterresultsthanspillingofuses. Bothparameters,QFandTF,tendtoreducethespill \ncodebutmayhaveasynergeticefect.Figure7plotsthe combinedefectofbothparameters.Noticethatatuning oftheseparametersmightleadtobettervaluesofEII.An\u00adotherobservationisthatiftheTFisnotused,thenhigher \nvaluesofQFareneeded(whichinturnresultsinhigher schedulingtimes).Inparticular,for32registersthebest resultsareobtainedwhenQFissettozerowhilefor64reg\u00adistersthebestresultsareobtainedwhenQFissetbetween \n0.3and0.5. Inordertosummarizeallthepreviousefects,Table3 (rowslabeledVarCCQFTFandUseCCQFTF)showsthe performancewhenCC,QFandTFareused(QFandTF \naresettothevaluethatproducethebestperformancere\u00adsults).Whenspillingofvariablesisused,EIIisreducedby 47%(52%)andEtrfisreducedby42%(35%)withrespect \ntotherowVarfor32(64)registers.Similarly,whenspilling ofusesisapplied,EIIisreducedby36%(50%)andEtrf isreducedby35%(30%)withrespecttotherowUsefor \n32(64)registers.Thisincreaseinperformanceisattheex\u00adpenseofanacceptableincreaseinschedulingtime:for32 \nregisters,theschedulerrequires1.8timestheoriginaltime; for64registers,theincreaseisnegligible. 5PerformanceEvaluation \nTheefectivenessoftheproposedmechanismshasbeeneval\u00aduatedusingstaticinformation:IIandtrf.Thisevaluation \nhasdemonstratedthatthenewheuristicsareveryefective inobtainingbetterschedules.However,astaticevaluation \nvaluesofQFwhenTFrangesbetween0.7and1.4(32registers doesnotshowhowusefultheyareintermsofexecutiontime \nanddynamicmemorytrafc. TheexecutiontimeforaloopisestimatedasII.(N+ (SC.1).E),Nbeingthetotalnumberofiterationsand \nEthenumberoftimestheloopisexecuted.Thedynamic memorytrafcisestimatedasM.N,Mbeingthenum\u00adberofmemoryoperationsinthekernelcodeofthesoftware \npipelinedloop.ThevaluesofNandEareobtainedbypro\u00adfling. Figure8showstheresultsfortheP4M2L4confguration. \nThebargraphsattheupperpart(a.)showtheexecution timedegradationwhencomparedagainsttheidealcase(as\u00adsuminganinfnitenumberofregisters).Thecloserthere-sultsareto1,thebettertheperformance.Noticethat1 \nistheupperboundforperformance.Thelowerpartofthe samefgure(b.)showsthememorytrafc(Mem)relative totheidealcase(Ideal \nMem).Again,thecloserthetrafc fgureisto1thebettertheschedules.Howeverinthiscase 1isalowerboundforthememorytrafc.Theplotsatthe \nleftside(.1)correspondtoallloopsinthebenchmarkset whiletheplotsattherightside(.2)referonlytotheloops \nthatrequirespillcode. Foraconfgurationwith32registers,Figure8.a.1showsa speed{upof1.38withrespecttotheoriginalproposalwhen \nvariablespillingisused,and1.27whenspillingofusesis applied.Forthesameconfguration,Figure8.b.1showsa reductionofmemorybyafactorcloseto0.7inbothcases. \nFor64registers,thespeed{upreportedislessimportant (closeto1.06)andthememorytrafcisreducedbyafactor closeto0.9. \nFigures8.a.2and8.b.2showtheperformanceforthe subsetofloopsthatrequirespill.Foraconfgurationwith Var \n Use Var+CC Use+CC Var+CC+QF Use+CC+QF Var+CC+QF+TF Use+CC+QF+TF 1.0 1.0 0.8 0.8 0.6 0.6 0.4 0.4 \n0.2 0.2  Ideal_Cycles / Cycles Ideal_Cycles / Cycles Mem / Ideal_Mem 0.0 0.0 a.1 a.2 3 10  Mem / Ideal_Mem \n8 6 4 2 2 1 0 b.1 Figure8:Dynamicresultsfordiferentspillheuristics.Confgurationofvariablesandstripedbarscorrespondtospillingofuses. \n32registers,performancefortheseloopsincreasesbyafactor of1.70whenspillingofvariablesisappliedand1.52when \nspillingofusesisapplied.For64registers,performance increasesbyafactorcloseto1.26inbothcases.Notice thatthememorytrafcisextraordinarilydecreased.When \n32registersareavailable,thememorytrafcisreducedby factorsof0.57and0.62withrespecttotheoriginalproposals \nwithspillingofvariablesandspillingofuses,respectively. When64registersareavailable,memorytrafcisreduced \nbyfactorsof0.72and0.77. Forthisarchitecturenoticethatspillingofusesper\u00adformsbetterthanspillingofvariablesforanycombination \nofheuristicsandforboth32and64registers.Whenthe criticalcycleisconsidered,spillingofusesimprovesmore thandoesspillingofvariables.However,whenthequantity \nfactorandthetrafcfactorareused,thebehaviourisquite similar(nonetheless,spillingofusesstillperformsslightly \nbetter). Theresultsthatareobtainedfortheotherprocessorcon\u00adfgurationsareshowninFigure9.Firstofall,noticethat \nforallconfgurationstheheuristicsproposedinthispaper performbetter.Howevertherearesomeaspectsworthto bediscussed.Forexample,insomecases(e.g.confgura\u00adtionP2M2L4),spillingofusesperformsworsethanspilling \nofvariables;otherconfgurations(e.g.P4M4L4)perform betterwhenspillingofusesisappliedand64registersare \navailablewhilespillingofvariablesperformsbetterwith32 registers.Also,contrarytowhathappensforallothercon\u00adfgurations,P2M2L4with64registersandwithspillingof \nusesundergoesalargeperformancelosswhenthecritical cycleisconsidered. Finally,theparametersQFandTFhavebeensettodif\u00adferentvaluesforeachconfguration.Theseparametersgive \nfexibilitytothealgorithm,andallowittoadapttothecon\u00ad 0 b.2 P4M2L4,QF=0.3andTF=0.95.Solidbarscorrespondtospilling \nfguration.However,theseparametersshouldbetunedfor eachconfgurationinordertoobtaingoodresults.Forin- stance,weusedQF=0andTF=0.95forP4M4L4with \n32registersandspillingofuses;thesamearchitecturewith spillingofvariablesproducesthebestperformancewithQF \n=0.3andTF=0.90.Wehaveperformedextensiveevalu\u00ad ationsinordertoobtainausefulrangeforthesefactors.In particularQFshouldrangefrom0.0to0.3andTFshould \nrangefrom0.9to1.0. Inaddition,thesevaluescanbetunedforspecifcappli\u00ad cationsorevenforspecifcloopsiffnalperformanceismore \nimportantthancompilationtime(forexample,inembedded applications). 6Conclusions Inthispaperwehavepresentedasetofheuristicsthatim\u00ad \nprovetheefciencyoftheprocessthatreducestheregister pressureofsoftwarepipelinedloops.Thispaperproposes \nnewcriteriaonwhichtodecidebetweenthetwodiferent alternativesthatcontributetothisreduction:todecrease \ntheexecutionrateoftheloop(increasingitsII)ortotem\u00ad porarilystoredataintomemory(throughspillcode).For \nthesecondalternative,thepaperalsosuggestsnewcrite\u00ad riabymeansofwhichtoselectthespillingcandidates(i.e. \nhowmanyandwhichones).Theproposalshavebeeneval\u00ad uatedusingaregister{conscioussoftwarepipeliner;however \ntheyareorthogonaltoitandcouldbeappliedtoanyother algorithm. Theexperimentalevaluationhasbeencarriedoutona \nlargecollectionofloopsfromthePerfectClubbenchmark. Theimpactofthediferentheuristicsisevaluatedinterms \nofefectivenessandefciency.Intermsofefectiveness,the heuristicsproposedreduceinmostcasestheexecutionrate \n Var Use Var+CC Use+CC Var+CC+QF Use+CC+QF Var+CC+QF+TF Use+CC+QF+TF 1.0 1.0 1.0 0.8 0.8 0.8 0.6 0.6 \n0.6 0.4 0.4 0.4 0.2 0.2 0.2 Ideal_Cycles / Cycles Mem / Ideal_Mem Ideal_Cycles / Cycles Mem / Ideal_Mem \nIdeal_Cycles/Cycles Mem / Ideal_Mem 0.0 0.0 0.0 32 registers 64 registers 32 registers 64 registers \n32 registers 64 registers a.1 a.2 a.3 10 10 10 8 6 4 2 8 6 4 2 8 6 4 2 0 0 0 32 registers 64 registers \n32 registers 64 registers 32 registers 64 registers b.1 b.2 b.3 Figure9:Dynamicresultsfordiferentspillheuristics.Confgurations:(.1)P2M2L4,(.2)P2M2L6and(.3)P4M4L4.Solidbars \ncorrespondtospillingofvariablesandstripedbarscorrespondtospillingofuses. andmemorytrafcwhencomparedtotheoriginalproposals. \nIntermsofefciency,thisreductionproducesarealincrease inperformance.Inparticular,thedynamicperformancefor \ntheloopsthatdonotfllintheavailableregistersincreases byafactorbetween1.25and1.68.Thememorytrafcis alsoreducedbyafactorbetween0.77and0.57.Thisreduc\u00adtionintheexecutiontimeandmemorytrafcisachieved \nattheexpenseofareasonableincreaseinthecompilation time.Intheworstcase,theschedulerrequires1.8timesthe \noriginaltime.Forthewholeworkbench,thedynamicper\u00adformanceincreasesbyafactorbetween1.07and1.38while thememorytrafcisreducedbyafactorbetween0.9and \n0.7.Theschedulermanagestocompilealltheseloopsinless thanoneminute(foraconfgurationwith64registers)and \nlessthan3.5minutes(foraconfgurationwith32registers). Althoughtheheuristicsproposedcontributetobetterre\u00adgister{constrainedschedules,someadditionalworkisneeded \ntotuneseveralparameters(suchasthetrafcandquantity factors)andtoanalyzetheirrealefectfordiferentarchi\u00adtecturalconfgurations.However,theheuristicsproposedin \nthispaperarequitestablewhenusingvaluesintheranges previouslyconsidered.Wehavealsoshownthat,depending \nontheconfguration,spillingcandidatesareeithervariables oruses.Thissuggeststhatamoredynamicprocess(in \nwhichtheschedulerdecides,on{the{fy,thespecifcvalues forsomeoftheseparametersandtakesbothvariableand usespillingintoaccount)mayleadtobetterschedules. \nAcknowledgements ThisworkhasbeensupportedbytheMinistryofEducation ofSpainundercontractTIC98/511,byCEPBA(European \nCenterforParallelismofBarcelona),andbyESPRITLTR ProjectNo24942(MHAOTEU).JavierZalameaisgranted bytheAgenciaEspa~noladeCooperacioonInternacional. \nReferences [1]A.AikenandA.Nicolau.Arealisticresource\u00adconstrainedsoftwarepipeliningalgorithm.Advancesin \nLanguagesandCompilersforParallelProcessing,pages 274{290,1991. [2]V.Allan,R.Jones,R.Lee,andS.Allan.Software \npipelining.ACMComputingSurveys,27(3):367{432, September1995. [3]J.Allen,K.Kennedy,andJ.Warren.Conversionof \ncontroldependencetodatadependence.InProc.10th AnnualSymposiumonPrinciplesofProgrammingLan\u00adguages,January1983. \n[4]E.Ayguadoe,C.Barrado,A.Gonzoalez,J.Labarta, J.Llosa,D.Loopez,S.Moreno,D.Padua,F.Reig,Q.Ri\u00adera,andM.Valero.Ictineo:atoolforinstruction \nlevelparallelismresearch.TechnicalReportUPC-DAC\u00ad96-61,UniversitatPoliteecnicadeCatalunya,December 1996. \n[5]D.Bernstein,D.Goldin,M.Golumbic,H.Krawczyk, Y.Mansour,I.Nahshon,andR.Pinter.Spillcode minimizationtechniquesforoptimizingcompilers.In \nProc.oftheACMSIGPLAN'89Conf.onProgramming LanguagesDesignandImplementation,pages258{263, July1989. [6]M.Berry,D.Chen,P.Koss,andD.Kuck.ThePerfect \nClubbenchmarks:Efectiveperformanceevaluationof supercomputers.TechnicalReport827,CenterforSu\u00adpercomputingResearchandDevelopment,November \n1988. [7]P.Briggs,K.Cooper,K.Kennedy,andL.Torczon.Col\u00adoringheuristicsforregisterallocation.InProc.ofthe \nACMSIGPLAN'89Conf.onProgrammingLanguage DesignandImplementation,pages275{284,June1989. [8]P.Briggs,K.Cooper,andL.Torczon.Improvementsto \ngraphcoloringregisterallocation.ACMTransactions onProgrammingLanguagesandSystems,16(3):428{ 455,May1994. \n[9]D.CallahanandB.Koblenz.Registerallocationvia hierarchicalgraphcoloring.InProc.oftheACMSIG\u00adPLAN'91Conf.onProgrammingLanguageDesignand \nImplementation,pages192{203,June1991. [10]G.Chaitin.Registerallocationandspillingviagraph coloring.InProc.ACMSIGPLANSymp.onCompiler \nConstruction,pages98{105,June1982. [11]A.Charlesworth.Anapproachtoscientifcarraypro\u00adcessing:ThearchitecturaldesignoftheAP120B/FPS\u00ad164family.Computer,14(9):18{27,1981. \n[12]J.Dehnert,P.Hsu,andJ.Bratt.Overlappedloop supportintheCydra5.InProc.ofthe3rdInt.Conf. ArchitecturalSupportforProgrammingLanguagesand \nOperatingSystems(ASPLOS-III),pages26{38,April 1989. [13]J.DehnertandR.Towle.CompilingfortheCydra5. TheJournalofSupercomputing,7(1/2):181{228,May \n1993. [14]A.EichenbergerandE.Davidson.Stagescheduling: Atechniquetoreducetheregisterrequirementsofa moduloschedule.InProc.ofthe28thAnnualInt. \nSymp.onMicroarchitecture(MICRO-28),pages338{ 349,November1995. [15]C.Eisenbeis,S.Lelait,andB.Marmol.Themeeting \ngraph:anewmodelforloopcyclicregisterallocation. InProc.oftheFifthWorkshoponCompilersforPar\u00adallelComputers(CPC95),pages503{516,June1995. \n[16]L.Hendren,G.Gao,E.Altman,andC.Mukerji.Reg\u00adisterallocationusingcyclicintervalgraphs:Anewap\u00adproachtoanoldproblem.ACAPSTech.Memo33, \nAdvancedComputerArchitectureandProgramStruc\u00adturesGroup,McGillUniversity,1992. [17]R.Huf.Lifetime-sensitivemoduloscheduling.InProc. \nofthe6thConferenceonProgrammingLanguageDe\u00adsignandImplementation,pages258{267,1993. [18]S.Jain.Circularscheduling:Anewtechniquetoper\u00adformsoftwarepipelining.InProc.oftheACMSIG\u00adPLAN'91ConferenceonProgrammingLanguageDe\u00adsignandImplementation,pages219{228,June1991. \n[19]M.Lam.ASystolicArrayOptimizingCompiler. KluwerAcademicPublishers,1989. [20]J.Llosa,M.Valero,andE.Ayguadee.Heuristicsfor \nregister-constrainedsoftwarepipelining.InProc.ofthe 29thAnnualInt.Symp.onMicroarchitecture(MICRO\u00ad29),pages250{261,December1996. \n[21]J.Llosa,M.Valero,andE.Ayguade.Quantitative evaluationofregisterpressureonsoftwarepipelined loops.InternationalJournalofParallelProgramming, \n26(2):121{142,April1998. [22]J.Llosa,M.Valero,E.Ayguadee,andA.Gonzealez.Hy\u00adpernodereductionmoduloscheduling.InProc.ofthe \n28thAnnualInt.Symp.onMicroarchitecture(MICRO\u00ad28),pages350{360,November1995. [23]W.Mangione-Smith,S.Abraham,andE.Davidson. \nRegisterrequirementsofpipelinedprocessors.InProc. oftheInt.ConferenceonSupercomputing,pages260{ 246,July1992. \n[24]S.Ramakrishnan.SoftwarepipelininginPA{RISC compilers.Hewlett-PackardJournal,pages39{45,July 1992. \n[25]B.RauandC.Glaeser.Someschedulingtechniquesand aneasilyschedulablehorizontalarchitectureforhigh performancescientifccomputing.InProc.ofthe14th \nAnnualMicroprogrammingWorkshop,pages183{197, October1981. [26]B.Rau,M.Lee,P.Tirumalai,andP.Schlansker.Reg\u00adisterallocationforsoftwarepipelinedloops.InProc. \noftheACMSIGPLAN'92ConferenceonProgramming LanguageDesignandImplementation,pages283{299, June1992. [27]B.R.Rau.Iterativemoduloscheduling:Analgo\u00adrithmforsoftwarepipeliningloops.InProc.ofthe27th \nAnnualInternationalSymposiumonMicroarchitecture, pages63{74,November1994. [28]J.Ruttenberg,G.Gao,A.Stoutchinin,andW.Licht\u00adenstein.Softwarepipeliningshowdown:Optimalvs. \nheuristicmethodsinaproductioncompiler.InProc. oftheACMSIGPLAN'96Conf.onProgrammingLan\u00adguagesDesignandImplementation,pages1{11,May \n1996. [29]J.Wang,A.Krall,M.A.Ertl,andC.Eisenbeis.Soft\u00adwarepipeliningwithregisterallocationandspilling.In \nProc.ofthe27thAnnualInt.Symp.onMicroarchitec\u00adture,pages95{99,November1994.  \n\t\t\t", "proc_id": "349299", "abstract": "<p>Software pipelining is a loop scheduling technique that extractsparallelism out of loops by overlapping the execution of severalconsecutive iterations. Due to the overlapping of iterations, schedules impose high register requirements during their execution. A schedule is valid if it requires at most the number of registers available in the target architecture. If not, its register requirementshave to be reduced either by decreasing the iteration overlapping or by spilling registers to memory. In this paper we describe a set of heuristics  to increase the quality of register-constrained modulo schedules. The heuristics decide between the two previous alternatives and  define criteria for effectively selecting spilling candidates. The heuristics proposed for reducing the  register pressure can be applied to any software pipelining technique. The proposals are evaluated using a register-conscious software pipeliner on a workbench composed of a large set of loops from the Perfect Club benchmark and a set of processor configurations. Proposals in this paper are compared against a previous proposal already described in the literature. For one of these processor configurations and the set of loops that do not fit in the available registers (32), a speed-up of 1.68 and a reduction of the memory traffic by a factor of 0.57 are achieved with an affordable increase in compilation time. For all the loops, this represents a speed-up of 1.38 and a reduction of the memory traffic by a factor of 0.7.</p>", "authors": [{"name": "Javier Zalamea", "author_profile_id": "81100296607", "affiliation": "Departament d'Arquitectura de Computadors, Universitat Polit&#232;cnica de Catalunya, cr. Jordi Girona 1-3, M&#242;dul D6, Campus Nord, 08034, Barcelona, SPAIN", "person_id": "P135683", "email_address": "", "orcid_id": ""}, {"name": "Josep Llosa", "author_profile_id": "81100058609", "affiliation": "Departament d'Arquitectura de Computadors, Universitat Polit&#232;cnica de Catalunya, cr. Jordi Girona 1-3, M&#242;dul D6, Campus Nord, 08034, Barcelona, SPAIN", "person_id": "PP14031444", "email_address": "", "orcid_id": ""}, {"name": "Eduard Ayguad&#233;", "author_profile_id": "81100439790", "affiliation": "Departament d'Arquitectura de Computadors, Universitat Polit&#232;cnica de Catalunya, cr. Jordi Girona 1-3, M&#242;dul D6, Campus Nord, 08034, Barcelona, SPAIN", "person_id": "P74892", "email_address": "", "orcid_id": ""}, {"name": "Mateo Valero", "author_profile_id": "81100002744", "affiliation": "Departament d'Arquitectura de Computadors, Universitat Polit&#232;cnica de Catalunya, cr. Jordi Girona 1-3, M&#242;dul D6, Campus Nord, 08034, Barcelona, SPAIN", "person_id": "PP40022616", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/349299.349319", "year": "2000", "article_id": "349319", "conference": "PLDI", "title": "Improved spill code generation for software pipelined loops", "url": "http://dl.acm.org/citation.cfm?id=349319"}