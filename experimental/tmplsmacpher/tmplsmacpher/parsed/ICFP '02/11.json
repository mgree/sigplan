{"article_publication_date": "09-17-2002", "fulltext": "\n Functional Formal Methods Invited Talk J Strother Moore Department of Computer Sciences University \nof Texas at Austin Taylor Hall 2.124 Austin, Texas 78712 moore@cs.utexas.edu Abstract Some functional \nprogramming languages are also mathematical logics. One can reason formally, traditionally, and directly \nabout programs in such languages. This is driving a new application area for functional programming: \nmodeling microarchitectures, hard\u00adware design languages, and imperative programming languages. Such models \nserve the dual purposes of simulation and formal anal\u00adysis. ACL2, A Computational Logic for Applicative \nCommon Lisp, is a functional programming language that is also a .rst-order math\u00adematical logic supported \nby a Boyer-Moore style mechanical the\u00adorem prover [5]. It is being used to model and verify artifacts \nof commercial and industrial interest. .The register-transfer level circuit descriptions for the elemen\u00adtary \n.oating-point arithmetic on the AMD Athlon micropro\u00adcessor were modeled in ACL2. These models were tested \non millions of .oating-point test vectors as part of the Athlon validation. In addition, the models were \nmechanically proved to satisfy the IEEE .oating-point speci.cations. Bugs were found before fabrication. \nThe Athlon that you buy has veri\u00ad.ed .oating-point circuitry in it [7]. .Avionics microprocessors produced \nby Rockwell Collins have been modeled in ACL2. Those models have been used as pre\u00adfabrication simulation \ntest benches. In addition, theorems re\u00adlating various microprocessor models have been proved me\u00adchanically \n[3]. .An executable pipeline-level model of the Motorola CAP dig\u00adital signal processor was proved to \nimplement a sequential mi\u00adcrocode engine and microcoded DSP programs were veri.ed [2]. .An executable \nmodel of the Java Virtual Machine has been used to prove functional correctness of some simple Java classes, \nincluding a safety property for a multi-threaded class [6].  Permission to make digital or hard copies \nof all or part of this work for personal or classroom use is granted without fee provided that copies \nare not made or distributed for pro.t or commercial advantage and that copies bear this notice and the \nfull citation on the .rst page. To copy otherwise, to republish, to post on servers or to redistribute \nto lists, requires prior speci.c permission and/or a fee. ICFP 02, October 4-6, 2002, Pittsburgh, Pennsylvania, \nUSA. Copyright 2002 ACM 1-58113-487-8/02/0010 ...$5.00    Other examples are reported in [4]. Execution \nef.ciency for industrial-scale simulators, in combination with adherence to an axiomatic semantics, has \nforced some novel implementation features [1]. In addition, the ACL2 theorem prover is coded in ACL2 \nand so represents a signi.cant application of func\u00adtional programming. Categories and Subject Descriptors \nD.1.1 [Programming Techniques]: Applicative Programming; F.4.1 [Mathematical Logic and Formal Languages]: \nMathemati\u00adcal Logic; B.6.3 [Logic Design]: Design Aids General Terms Design, Theory, Veri.cation Keywords \nfunctional programming, mechanical theorem proving, hardware veri.cation, software veri.cation, microarchitecture, \nJava Virtual Machine, Common Lisp References [1] R. S. Boyer and J S. Moore. Single-threaded objects \nin ACL2. In PADL 2002, pages 9 27, Heidelberg, 2002. http://\u00adwww.cs.utexas.edu/users/moore/publications/stobj/main.ps.Z. \n[2] Bishop Brock and Warren A. Hunt, Jr. Formal analysis of the motorola CAP DSP. In Industrial-Strength \nFormal Methods. Springer-Verlag, 1999. [3] D. Greve and M. Wilding. Evaluatable, high-assurance mi\u00adcroprocessors. \nIn NSA High-Con.dence Systems and Soft\u00adware Conference (HCSS), Linthicum, MD, March 2002. http://hokiepokie.org/docs/hcss02/proceedings.pdf. \n[4] M. Kaufmann, P. Manolios, and J S. Moore, editors. Computer-Aided Reasoning: ACL2 Case Studies. Kluwer \nAcademic Press, Boston, MA., 2000. [5] M. Kaufmann, P. Manolios, and J S. Moore. Computer-Aided Reasoning: \nAn Approach. Kluwer Academic Press, Boston, MA., 2000. [6] J S. Moore and G. Porter. The apprentice challenge. \nACM TOPLAS, 24(3):1 24, May 2002. [7] D. M. Russinoff and A. Flatau. Rtl veri.cation: A .oating\u00adpoint \nmultiplier. In Kaufmann et al. [4], pages 201 232.  \n\t\t\t", "proc_id": "581478", "abstract": "Some functional programming languages are also mathematical logics. One can reason formally, traditionally, and directly about programs in such languages. This is driving a new application area for functional programming: modeling microarchitectures, hardware design languages, and imperative programming languages. Such models serve the dual purposes of simulation and formal analysis.ACL2, \"&lt;u&gt;A&lt;/u&gt; &lt;u&gt;C&lt;/u&gt;omputational &lt;u&gt;L&lt;/u&gt;ogic for &lt;u&gt;A&lt;/u&gt;pplicative &lt;u&gt;C&lt;/u&gt;ommon &lt;u&gt;L&lt;/u&gt;isp,\" is a functional programming language that is also a first-order mathematical logic supported by a Boyer-Moore style mechanical theorem prover [5]. It is being used to model and verify artifacts of commercial and industrial interest. <ul><li>The register-transfer level circuit descriptions for the elementary floating-point arithmetic on the AMD Athlon microprocessor were modeled in ACL2. These models were tested on millions of floating-point test vectors as part of the Athlon validation. In addition, the models were mechanically proved to satisfy the IEEE floating-point specifications. Bugs were found before fabrication. The Athlon that you buy has verified floating-point circuitry in it [7].</li> <li>Avionics microprocessors produced by Rockwell Collins have been modeled in ACL2. Those models have been used as pre-fabrication simulation test benches. In addition, theorems relating various microprocessor models have been proved mechanically [3].</li> <li>An executable pipeline-level model of the Motorola CAP digital signal processor was proved to implement a sequential microcode engine and microcoded DSP programs were verified [2].</li> <li>An executable model of the Java Virtual Machine has been used to prove functional correctness of some simple Java classes, including a safety property for a multi-threaded class [6].</li></ul>.Other examples are reported in [4].Execution efficiency for industrial-scale simulators, in combination with adherence to an axiomatic semantics, has forced some novel implementation features [1]. In addition, the ACL2 theorem prover is coded in ACL2 and so represents a significant application of functional programming.", "authors": [{"name": "J Strother Moore", "author_profile_id": "81342504985", "affiliation": "University of Texas at Austin, Austin, Texas", "person_id": "P394764", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/581478.581490", "year": "2002", "article_id": "581490", "conference": "ICFP", "title": "Functional formal methods", "url": "http://dl.acm.org/citation.cfm?id=581490"}