{"article_publication_date": "09-17-2002", "fulltext": "\n Towards More Natural Functional Programming Languages Invited Talk Brad A. Myers Human Computer Interaction \nInstitute School of Computer Science, Carnegie Mellon University Pittsburgh, PA 15213-3891 bam+@cs.cmu.edu \nhttp://www.cs.cmu.edu/~bam  ABSTRACT Programming languages are the way for a person to express a mental \nplan in a way that the computer can understand. Therefore, it is appropriate to consider properties of \npeople when designing new programming languages. In our research, we are investigating how people think \nabout algorithms, and how programming lan\u00adguages can be made easier to learn and more effective for people \nto use. By taking human-productivity aspects of programming languages seriously, designers can more effectively \nmatch pro\u00adgramming language features with human capabilities and problem solving methods. Human factors \nmethods can be used to measure the effects, so unsubstantiated claims can be avoided. This talk will \npresent a quick summary of new and old results in what is known about people and programming, from areas \nthat are sometimes called empirical studies of programmers and psy\u00adchology of programming. Much is known \nabout what people find difficult, and what syntax and language features are especially tricky and bug-prone. \nOur new research has discovered how peo\u00adple naturally think about algorithms and data structures, which \ncan help with making programming languages more closely match people s problem solving techniques. Categories \nand Subject Descriptors D.1.7 [Programming Techniques]: Visual Programming. D.2.6 [Software Engineering]: \nProgramming Environments Graphical environments, Interactive environments. D.3.3 [Programming Languages]: \nLanguage Constructs and Features. F.3.3 [Logics and Meanings of Programs]: Studies of Program Constructs. \nH.1.2 [Models and Principles]: User/Machine Systems Software psychology. H.5.2 [Information Interfaces \nand Presentation]: User Interfaces. I.3.6 [Computer Graphics]: Methodology and Techniques Languages. \nGeneral Terms: Design, Human Factors, Languages Keywords: End-user programming, psychology of program\u00adming, \nempirical studies of programming, natural programming. Copyright is held by the author/owner(s). ICFP'02, \nOctober 4-6, 2002, Pittsburgh, Pennsylvania, USA. ACM 1-58113-487-8/02/0010. EXAMPLES As part of his \nPhD thesis [1], my student John Pane performed three formative studies to see how non-programmers naturally \nthought about algorithms for manipulating graphics and numbers. In the first study, we showed 10-year \nold children pictures of various scenes from the PacMan game, and asked how they would implement them. \nIn the second study, we showed children various situations in a database, and asked them to perform arithmetic \noperations. In both cases, we had independent analysts evaluate the answers looking for patterns. One \nof the results was that peo\u00adple consistently operated on sets of objects, rather than iterating or recursing \nthrough the set [3]. For example, people said, When PacMan eats all of the dots, he goes to the next \nlevel, and Sub\u00adtract 20,000 from all elements in Round 2. Another result is that most people tended to \nuse an event-based style for graphics, such as If PacMan hits a wall, he stops. In contrast, some people \nused a constraint style: PacMan cannot go through a wall. In extensive study of Boolean expressions, \nwe found that children and adults use words such as AND, OR and NOT with inconsistent meanings [2]. \nFor example, AND often was used where the Boolean operator OR would be required, as in Scores of 10,000 \nand up are extraordinary (since no score can be 10,000 AND up at the same time). Another result is that \npeople were not consistent in the precedence that they expected for op\u00aderators. For example Not A or \nB often meant Not (A or B) , but not always. Using the results of these and prior studies and human-factors \nprinciples we have created a new programming language for chil\u00addren called HANDS. User studies showed \nthat novel features of HANDS made it easier for non-programmers to create programs. REFRENCES 1. Pane, \nJ., A Programming System for Children that is Designed for Usability. PhD Thesis, Computer Science Department \nCar\u00adnegie Mellon University, 2002, Pittsburgh, PA. Computer Sci\u00adence Technical Report CMU-CS-02-127. \n 2. Pane, J.F. and Myers, B.A. Tabular and Textual Methods for Selecting Objects from a Group, in Proceedings \nof VL 2000: IEEE International Symposium on Visual Languages. 2000. Seattle, WA: IEEE Computer Society. \npp. 157-164. 3. Pane, J.F., Ratanamahatana, C.A., and Myers, B.A., Studying the Language and Structure \nin Non-Programmers Solutions to Programming Problems. International Journal of Human-Computer Studies, \n2001. 54(2): pp. 237-264.   \n\t\t\t", "proc_id": "581478", "abstract": "Programming languages are the way for a person to express a mental plan in a way that the computer can understand. Therefore, it is appropriate to consider properties of people when designing new programming languages. In our research, we are investigating how people think about algorithms, and how programming languages can be made easier to learn and more effective for people to use. By taking human-productivity aspects of programming languages seriously, designers can more effectively match programming language features with human capabilities and problem solving methods. Human factors methods can be used to measure the effects, so unsubstantiated claims can be avoided.This talk will present a quick summary of new and old results in what is known about people and programming, from areas that are sometimes called \"empirical studies of programmers\" and \"psychology of programming.\" Much is known about what people find difficult, and what syntax and language features are especially tricky and bug-prone. Our new research has discovered how people naturally think about algorithms and data structures, which can help with making programming languages more closely match people's problem solving techniques.", "authors": [{"name": "Brad A. Myers", "author_profile_id": "81100013136", "affiliation": "Carnegie Mellon University, Pittsburgh, PA", "person_id": "P31915", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/581478.581479", "year": "2002", "article_id": "581479", "conference": "ICFP", "title": "Towards more natural functional programming languages", "url": "http://dl.acm.org/citation.cfm?id=581479"}