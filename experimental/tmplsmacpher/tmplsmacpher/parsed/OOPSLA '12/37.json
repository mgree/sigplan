{"article_publication_date": "10-19-2012", "fulltext": "\n Talk versus Work: Characteristics of Developer Collaboration on the Jazz Platform Subhajit Datta Renuka \nSindhgatta Bikram Sengupta IBM Research, Bangalore, India IBM Research, Bangalore, India IBM Research, \nBangalore, India subhajit.datta@acm.org renuka.sr@in.ibm.com bsengupt@in.ibm.com Abstract IBM s Jazz \ninitiative offers a state-of-the-art collaborative development environment (CDE) facilitating developer \nin\u00adteractions around interdependent units of work. In this paper, we analyze development data across \ntwo versions of a ma\u00adjor IBM product developed on the Jazz platform, covering in total 19 months of development \nactivity, including 17,000+ work items and 61,000+ comments made by more than 190 developers in 35 locations. \nBy examining the relation be\u00adtween developer talk and work, we .nd evidence that devel\u00adopers maintain \na reasonably high level of connectivity with peer developers with whom they share work dependencies, \nbut the span of a developer s communication goes much be\u00adyond the known dependencies of his/her work \nitems. Using multiple linear regression models, we .nd that the number of defects owned by a developer \nis impacted by the number of other developers (s)he is connected through talk, his/her interpersonal \nin.uence in the network of work dependen\u00adcies, the number of work items (s)he comments on, and the number \nwork items (s)he owns. These effects are maintained even after controlling for workload, role, work dependency, \nand connection related factors. We discuss the implications of our results for collaborative software \ndevelopment and project governance. Categories and Subject Descriptors D.2.9 [Software En\u00adgineering]: \nManagement Life cycle; H.5.3 [[Information Systems]: Group and Organization Interfaces Collaborative \ncomputing, Computer-supported co-operative work General Terms Experimentation Keywords Jazz, collaboration, \nsoftware teams, social net\u00adwork analysis, defects, models. Permission to make digital or hard copies \nof all or part of this work for personal or classroom use is granted without fee provided that copies \nare not made or distributed for pro.t or commercial advantage and that copies bear this notice and the \nfull citation on the .rst page. To copy otherwise, to republish, to post on servers or to redistribute \nto lists, requires prior speci.c permission and/or a fee. OOPSLA 12, October 19 26, 2012, Tucson, Arizona, \nUSA. Copyright c &#38;#169; 2012 ACM 978-1-4503-1561-6/12/10. . . $10.00 1. Introduction In a collaborative \nenterprise, association between the struc\u00adture of communication and the structure of the artefacts pro\u00adduced \nby the collaboration, has been a rich area of explo\u00adration [10]. There is also considerable interest \nin organiza\u00adtional theory on the role of communication on the perfor\u00admance of teams in knowledge-based \nwork, with the basic premise that effective communication among project team members stimulates the performance \nof development teams [31]. While new organizational structures have emerged with time, and work practices \nhave been transformed through the use of technology, this central quest has continued to inspire new \nresearch. In particular, given the inherently collabora\u00adtive nature of software development, the domain \noffers a par\u00adticularly relevant setting for such investigations, and of late, the in.uence of socio-technical \ncongruence on the perfor\u00admance of software development teams has been gaining at\u00adtention [8]. In this \npaper, we report on a real-world socio\u00adtechnical study of two major releases of a key IBM product developed \non the Jazz1 platform. Our research has been motivated by two broad lines of in\u00adquiry. First, we seek \nto understand the relation between the talk (social) and the work (technical) aspects of software development \nfrom different perspectives. In our context, the notion of talk builds around the comments exchanged \nby developers around units of work work items and work points to the dependencies between the work \nitems owned by the developers. Jazz is a collaborative development environ\u00adment that supports the de.nition \nand tracking of work items and their dependencies, as well as recording developer com\u00adments on work items \nof interest. This, along with the fact that the product development team uses the inherently interac\u00adtional \nagile method of development, presented an attractive setting for our study. We abstracted the work item \nand com\u00adment related information from the project into two forms of developer networks: Jazz Collaboration \nNetwork based on talk or JCN-talk (the talk network ), and Jazz Collaboration Network based on work or \nJCN-work (the work network ). We examine and compare several characteristics of these 1 https://jazz.net/ \n networks at aggregate and individual levels, to gain useful insights on the socio-technical characteristics \nof the devel\u00adopment team. As a framework for our study, we draw on the network paradigm that has been \nwidely used for studying collaboration in diverse .elds [1], [30], [22]. Our second line of inquiry seeks \nto investigate how the characteristics of developer talk and work can be leveraged towards some practical \nbene.ts in project governance. In particular, we hypothesize that a key attribute of a devel\u00adoper s work \n the number of defects (s)he owns will be in.uenced by a combination of his/her talk and work re\u00adlated \nattributes. From this perspective, we develop a statis\u00adtical model to estimate the number of defects \na developer owns, based on his/her socio-technical characteristics. Such a predictive model can notably \naid expedient resource allo\u00adcation, realistic time and cost estimation, and several other proactive measures \nto ensure project success. Our results along these threads of investigation are orga\u00adnized around two \nresearch questions (RQ): RQ-(a): How are the developer characteristics of talk and work related to one \nanother?  RQ-(b): How is the number of defects owned by a devel\u00adoper in.uenced by his/her talk and work \ncharacteristics?  The results from our study provide a number of interest\u00ading insights. Structurally, \nwe found JCN-talk and JCN-work at the aggregate levels to be similar in some aspects shape of degree \ndistribution, relative size of largest cluster and dis\u00adtance of average separation. The fact that the \ndevelopment team which is large and distributed is working towards common project objectives is re.ected \nin some of these sim\u00adilarities. Individually, it was observed that more than half of the developers have \na high degree of social connectivity with peer developers they are technically dependent on. However, \nit was also observed that JCN-talk and JCN-work differ no\u00adtably in aspects such as density and clustering \ncoef.cient, which suggests that a developer s interaction circle through talk typically extends beyond \nwhat is indicated by known work dependencies, in terms of the number of other de\u00advelopers (s)he is connected \nthrough talk, and the number of work items that (s)he comments on was found to depend on a larger span \nof interest based on his/her team af.lia\u00adtions. We found empirical evidence that a combination of a developer \ns talk and work characteristics seems to signif\u00adicantly in.uence the number of defects owned by him/her, \nafter controlling for factors such as workload, role etc. The factors considered in our statistical models \nfor defects is able to account for close to 80% of the variability in the data, and the relatively low \nmean absolute errors between actual and predicted number of defects makes it a useful prediction mechanism \nfor project governance. Overall, our study is a valuable addition to the recent and growing body of empirical \nwork that explores the natures of technical and social interactions in software development, and their \nin.uence on the performance of individuals. In the next section we review related literature, followed \nby an outline of the study settings. Subsequently, we present results and discussion and conclude with \na summary of the threats to validity and plans of future work. 2. Related Work 2.1 Talk and Work in \nCollaborative Software Development Conway s observation, Any organization that designs a sys\u00adtem (de.ned \nmore broadly here than just information sys\u00adtems) will inevitably produce a design whose structure is \na copy of the organization s communication structure [10] later canonized as Conway s Law by Brooks \n[5] contin\u00adues to evoke strong interest in the study of collaborative hu\u00adman enterprise. A perspective \non this idea in the context of software development is captured by socio-technical con\u00adgruence , which \nis measured in terms of the difference be\u00adtween coordination requirements due to technical dependen\u00adcies, \nand actual coordination [8]. While introducing socio\u00adtechnical congruence, Cataldo et al. demonstrate \nthat when developers coordination patterns are congruent with coordi\u00adnation needs during the time-window \na modi.cation request (MR) is open, the resolution time of the MR is signi.cantly reduced [8]. This work \nis extended by Wagstrom et al. to distinguish between communication that is aligned with task dependencies \nvis-a-vis general communication [33]. They show that the latter has little bene.t, while the former re\u00adduces \nbug resolution time. Kwan et al. study the effect of socio-technical congruence on software build success \nin the IBM Rational Team Concert project [29]. The authors ob\u00adserve that higher congruence actually leads \nto lower build success rates in certain situations, a large proportion of zero\u00adcongruence builds are \nsuccessful, and socio-technical gaps in successful builds are larger than gaps in failed builds \u00adresults \nwhich may imply limits to the applicability of socio\u00adtechnical congruence. There is a rich body of research \nin organizational theory that focuses on the impact of collaboration on team perfor\u00admance [6]. Geographically \ndistributed product development continues to be of notable research interest; the signi.cance of informal \nintra and inter team communication and coordi\u00adnation have been established [7], [23], as has been the \nneed for accumulating a common body of knowledge [12], and for identifying expertise [18]. In our domain \nof interest soft\u00adware development it has long been observed that a team s performance is linked to \nthe effectiveness of collaboration and coordination [28]. The challenges posed by distributed software \ndevelopment in this regard, have been an active area of research [23], [19]. The study of how developer \ninterac\u00adtions align with the structure of the technical work being car\u00adried out, has gained considerable \nattention of late, inspired by the socio-technical design theory from organizational lit\u00aderature [26]. \n However, the relation between talk and work, and how it in.uences ownership and performance of tasks \nat the indi\u00advidual level is far from a settled question. While increased communication has been shown \nto facilitate individuals in some cases [9], too much communication is also detrimen\u00adtal to tasks completion \n[14], [25]). Communication require\u00adments at the individual level have been recently found to be different \nthan at the team or project level [11]. To investigate these issues in further depth, techniques from \nsocial network analysis are being increasingly used to study large scale col\u00adlaboration [9], [4], [13]. \nThe general direction of such stud\u00adies has been to examine performance outcomes at the team or project \nlevel (e.g. [36], [38]); notable exceptions being [7] and [17]. Bird et al. have studied socio-technical \nnet\u00adworks to predict fault-proneness of software components [3]. In the socio-technical networks of [3], \nthe technical as\u00adpect is drawn from inter-component dependencies, and the social aspect is derived from \nshared contributions to com\u00adponents by developers. In our approach, developer contri\u00adbutions to interdependent \nunits of work are captured within a single work network (JCN-work); while our talk network (JCN-talk) \nrepresents a richer model of social collaboration based on co-commenting by developers on work-items \nof shared interest, which is not considered in [3]. 2.2 Studies on Jazz Development Data Over the past \ncouple of years, several studies have been conducted on data from the project developing the Ratio\u00adnal \nTeam Concert product using the Jazz platform. This data was made available by IBM for academic research \npurposes. Some of the initial studies focused on the challenges and op\u00adportunities of mining the Jazz \nplatform [24]. Wolf et al. have concluded that distance does not have as strong an effect on distributed \ncommunication delay and task completion as was seen in past research [35]. In a subsequent paper, the \nauthors combine a set of communication structure measures into a predictive model that indicates whether \nan integration build is likely to fail [36]. However, the technical aspects such as interdependencies \nof the work units are not considered in this study. As mentioned earlier, [29] highlight limitations \nof the idea of socio-technical congruence. McIntosh et al. study build maintenance efforts of ten projects \nincluding Jazz to conclude that build maintenance yields up to a 27% overhead on source code development \nand a 44% overhead on test de\u00advelopment. In a recent paper analyzing the Jazz data, Ehrlich and Cataldo \ninvestigated whether centrality and closure help or hinder individual performance [17]. As discussed \nlater, we have included some of the control variables introduced in this paper while building our model. \nWhile constructing their communication networks the authors of [17] consider the sequence of comments \nand connect two developers by a directed link only if the latter speci.cally responded to the former \ns query or remark. It is not clear from the dis-Figure 1. Generation of JCN-talk and JCN-work from de\u00adveloper \ncomments, work item ownership and dependencies cussion how comments were matched with responses any \ntechnique requiring human intervention is likely to be sub\u00adjective and error prone. The authors conclude \nthat individu\u00adals who are central within a team s communication network performed better but performed \nworse when they were cen\u00adtral within the communication network for the whole project [17]. All the papers \nstudying collaboration on the Jazz plat\u00adform so far have been based on the aforementioned data set released \nfor academic research. In contrast, in this paper we study proprietary data from the development of two \nversions of a major IBM product developed using Jazz. 3. Background and Research Setting We now outline \nthe context of our study in detail. 3.1 Collaboration on the Jazz Platform The Eclipse Way of collaboration \nwhich guides Jazz devel\u00adopment, de.nes time bound iteration cycles between two to six weeks [21]. Each \ncycle has an iteration plan comprising of a set of work items, which are assignable and traceable units \nof work. Jazz provides prede.ned types of work items corresponding to different phases of development. \nOur de.\u00adnitions of JCN-talk and JCN-work are based on the follow\u00ading attributes of work items: Work item \nownership: Each work item is assigned a de\u00adveloper as the owner. The owner is responsible for the completion \nof the work item within stipulated time. The vertices of JCN-talk and JCN-work are such developers who \nare work item owners.  Comments around work items: In Jazz development, Commenting on the work items \nis the main task-related communication channel ... and they provide the context for communication and \ncollaboration. (italics ours) [35]. A developer can post comment(s) on a work item based on his/her interest. \nCollectively, these comments repre\u00adsent a conversation in a shared context of developer inter\u00adest around \nwork items. Examples of such conversations are available at the Jazz website.  Work item dependencies: \nJazz supports a set of prede\u00ad.ned dependency categories, using which developers can link related work \nitems. This facility has been rigorously used by the development team under study to keep track of work \nitem dependencies. We included the following categories that capture the dependencies most relevant for \nour analysis: parent/child a work item is broken down into smaller units of tasks; depends/blocks the \nneed for the blocking work item to be completed before the dependent work item can be addressed; related \n-a more generic category that subsumes dependencies based on common features, shared library, code segments \netc. In related studies, a common way to de.ne dependencies between units of work has been through code \nlevel con\u00adtrol/data .ow dependencies, or co-changing of the same .le [3], [8]. However, our discussions \nwith some senior members of the development team revealed that generic code level dependencies are likely \nto be too .ne grained in our context, and that unrelated work items frequently involve updates to the \nsame .le. The related category was used to capture relevant code level dependencies when applicable. \nTo avoid many gratuitous connections between unrelated developers, we did not include addi\u00adtional code \nor co-change based dependency notions in our analysis.   3.2 JCN-talk and JCN-work Figure 1 illustrates \nthe construction of the talk and work networks. Figure 1(a) consists of three work items w1, w2 and w3 \nwith developers owning and posting comments on them. The work items also have dependencies established \nbetween them. JCN-talk is de.ned as the network of developers who have commented on work items. With \nreference to Fig\u00adure 1(b), each vertex of JCN-talk is a developer and an edge (undirected link) exists \nbetween two developers if both of them have commented on at least one common work item. In the rare instance \nof the owner of a work item not having commented on it, (s)he is also connected by edges to all others \nwho have commented on the work item. JCN-talk is generated for the set of developers who own at least \none work item. In Figure 1(b) edges exist be\u00adtween d1, d2, d3 and d4 as d1 is the owner of work item \nw1 and d2, d3, and d4 have commented on w1; similarly for edges between d4 and d5 as well as d5 and d6. \nJCN-work is de.ned as the network of developers who own work items which have dependencies between them. \nEach vertex of JCN-work is a developer and an edge exists between two developers if the work items owned \nby them have a dependency link between them. In Fig\u00adure 1(c) an edge exists between developer d1 and \nd6 as there is a dependency between work items owned by them (w1 and w3 respectively); similarly for \nthe edge be\u00adtween d1 and d4.  3.3 System Description and Experimental Set-up As mentioned earlier, we \nstudy the internal development data of two consecutive versions of a major IBM product developed on the \nJazz platform. Each version is the result of a release that consists of several iterations of development. \nWe refer to this subject of our study as the product or the system interchangeably, and the versions \nare denoted by n and n +1. Table 1 presents details of the two versions of the product we studied. All \nthe analysis reported in this pa\u00adper were replicated for versions n and n +1 of the product. Developer \nattention on work items often stretch across iter\u00adations. For example, a work item may be dependent on \nan\u00adother work item planned for an earlier or different iteration, or a work item may be created and discussed \nbefore the start of the iteration it is planned for. To capture this natural ex\u00adpanse of work and talk \nacross the development life cycle, we focused on the entire set of iterations leading to a release as \nour unit of analysis, rather than individual iterations. The development team of the product is distributed \nacross 35 locations and 19 time-zones across North America, Eu\u00adrope, and Asia. The entire team is divided \ninto smaller sub\u00adteams or team areas ranging from 3 to 30 members that focus on speci.c functionalities \nof the product. In this paper we are interested in three types of work items tasks, en\u00adhancements, and \ndefects having source code changes asso\u00adciated with them as change-sets . Other types of work items \nthat were not associated to source code have not been con\u00adsidered as our study is focussed on development \nand defect resolution activities. Since we seek to understand the factors in.uencing the number of defects \nowned by developers in RQ-(b), based on characteristics of talk and work, we need to ensure a separation \nof cause and effect while building the models. Thus, only task and enhancement work items are included \nin the construction of JCN-talk and JCN-work. We assume that all necessary information for construct\u00ading \nJCN-talk and JCN-work are available in the repository of the Jazz platform. Developers comments on work \nitems may sometimes be augmented by telephonic or face-to\u00adface conversations. Developers of the project \nwe studied in\u00adformed us that summaries of such conversations are usually recorded as comments in the \nJazz repository. The fact that signi.cant amount of developer communication is captured in the Jazz repository \nfor the system studied was con.rmed by our observation that more than 85% of the developers commented \non work items owned by other developers.  Table 1. System description Parameter Version n Version n \n+ 1 No of developers 107 194 No of work items 6,518 11,161 No of work item dependencies 4,677 8,349 No \nof comments 20,908 40,246 No of iterations of development 10 16 Duration of development 7 months 12 months \n To build JCN-talk and JCN-work, relevant information around work items was extracted from the Jazz platform \nus\u00ading its client Java APIs. The data was persisted in a speci.\u00adcally designed MySQL database. A set \nof Java programs was developed to query the database and build the JCN-talk and JCN-work networks in \nthe Pajek2 .le format. The networks were analysed using Pajek, NodeXL3, and JUNG4. Statisti\u00adcal analysis \non the data was done using SPSS Statistics 19. 4. Results and Discussion 4.1 RQ-(a): How are the developer \ncharacteristics of talk and work related to one another? To explore the nuances of talk and work characteristics \nin depth, we discuss two facets of this question separately. 4.1.1 Comparison of the structural characteristics \nof JCN-talk and JCN-work As evident from the .rst row of Table 2, JCN-talk and JCN\u00adwork have the same \nnumber of vertices representing the same set of developers, for each version. The number of edges incident \non an individual vertex is referred to as its degree, and across all vertices it is summarized by the \nde\u00adgree distribution. As evident from rows 3, 4, 5, and 6, the degree distributions for JCN-talk and \nJCN-work across both versions have positive skews, implying a longer right tail. This indicates there \nare relatively few developers connected to many others through talk and work, while many develop\u00aders \nare connected to few others. The density of a network is the ratio of the number of edges actually present \nand the number of possible edges between a network s vertices. From row 7 of Table 2, we note that JCN-talk \nis more dense than JCN-work for versions n and n +1; their densities vary by more than a factor of 3. \nThis implies that developers extents of interest go much beyond the dependencies of their owned work \nitems. 2 http://pajek.imfm.si/doku.php 3 http://nodexl.codeplex.com 4 http://jung.sourceforge.net/ The \nlargest cluster of a network is the biggest set of ver\u00adtices all of which are reachable from one another. \nThe rela\u00adtive size of the largest cluster is de.ned as the percent of the total number of vertices in \nthe largest cluster [30]. In the light of their contrasting densities, it is interesting that sizes of \nthe largest clusters of JCN-talk and JCN-work for both versions are signi.cantly less apart (row 8 of \nTable 2). Notwithstand\u00ading the far less number of edges in JCN-work, more than 75% of developers belong \nto the largest cluster for both net\u00adworks. This indicates that the collaboration channels for talk and \nwork span widely across the team. Within and across dif\u00adferent sub-teams, developers are signi.cantly \nconnected to their peers as they work towards common project objectives. A key difference between real-world \ncollaboration net\u00adworks and completely random networks is the phenomenon of clustering [30]. It is usually \nobserved in networks of hu\u00adman interaction that two vertices that are linked separately to a third vertex \nare more likely to be themselves linked. In\u00adtuitively, two of one s friends have a higher probability \nof being friends themselves. This is measured by the clustering coef.cient of a vertex, which is de.ned \nas the ratio of the actual number of edges to the maximum number of edges between the immediate neighbours \nof the vertex. For the en\u00adtire network, the clustering coef.cient is the average of clus\u00adtering coef.cients \nacross all vertices [1]. The average clus\u00adtering coef.cient is an indication of how likely it is for \ntwo vertices to be connected to each other if they are indepen\u00addently connected to a third common vertex. \nFrom row 9 of Table 2 we notice the average clustering coef.cients of JCN\u00adtalk in both versions are in \nthe same range (0.533 and 0.510), and are signi.cantly higher than those for JCN-work (0.249 and 0.189). \nThese values imply that communities of develop\u00aders form clusters more readily around discussions on work \nitems, than may be necessitated by the work item dependen\u00adcies. This can be explained in the light of \na developer s extent of interest being wider than the interdependencies of his/her directly owned work \nitems (as noted earlier and elaborated in subsequent discussion). The facility for two vertices i and \nj to contact one another depends on the length of the shortest path lij between them. The average of \nlij over all pair of vertices is called the average separation of the network. Average separation is \nan indication of the interconnectedness of the network [1]. The oft-encountered small-world phenomenon \nwith six or lesser degrees of separation are indicated by values of the average separation in networks \nof human individuals [34]. We note from row 10 of Table 2, that JCN-talk has average separations of 2.194 \nand 2.305 across versions n and n +1, and JCN-work has average separation values of 2.984 and 3.414 across \nthese versions. Thus, over the entire set of 107 developers in version n or 194 developers in version \nn +1, any developer is connected to any other developer over 2 to 4 intermediaries, on average. The fact \nthat a large team of developers is working closely towards common project  Table 2. JCN-talk and JCN-work: \nStructural characteristics for version n and version n +1 of the system studied Criteria JCN-talk(n) \nJCN-work(n) JCN-talk(n +1) JCN-work (n +1) 1. Number of vertices (V ) 107 107 194 194 2. Number of edges \n(E) 669 224 1634 455 3. Mean degree (AD) 12.505 4.187 16.845 4.691 4. Median degree (MD) 9.000 4.000 \n11.000 3.000 5. Standard deviation of degree (SD) 10.698 4.007 17.394 5.029 6. Skewness of degree distribution \n(SK) 0.959 0.991 1.362 1.596 7. Density (D) 0.118 0.039 0.087 0.024 8. Relative size of largest cluster \n(L) 91.589% 78.505% 87.629% 77.835% 9. Average clustering coef.cient (C) 0.533 0.249 0.510 0.189 10. \nAverage separation (S) 2.194 2.984 2.305 3.414  objectives is also re.ected in this observation of a \nsmall number of intermediaries separating any two developers in JCN-talk and JCN-work, on average. After \nexamining the aggregate characteristics of JCN-talk and JCN-work, let us now focus on the individual \nlevel. 4.1.2 Examination of the relation between developer positions in JCN-talk vis-a-vis JCN-work \nWe next consider a set of measures that re.ect on an individ\u00adual developer s position in JCN-talk and \nJCN-work. In a network, degree centrality of a vertex is its degree the number of edges incident on \nit [16]. For JCN-talk and JCN-work, a developer s degree indicates the number of other developers (s)he \nis connected to, over talk and work respectively. The notion of betweenness captures the extent to which \na vertex is positioned in the shortest path between other ver\u00adtices. The betweenness centrality of a \nvertex is de.ned as the proportion of all geodesics (that is, shortest paths) between pairs of other \nvertices that include this vertex [16]. When vertices are individuals, betweenness is a measure of inter\u00adpersonal \nin.uence. In our context, betweenness centrality of a developer signi.es his/her in.uence on other developers \nchannels of collaboration. In this paper, we will use be\u00adtweenness centrality and betweenness interchangeably. \nThe notion of structural holes indicates missing connec\u00adtions and connection redundancies between vertices \n[35]. The dyadic constraint on a vertex u exercised by a tie be\u00adtween vertex u and v is given by the \nextent to which u has more and stronger ties with neighbours who are strongly connected with vertex v \n[16]. The aggregate dyadic con\u00adstraint for a vertex a structural hole measure is the sum of all its \ndyadic constraints. Higher aggregate constraint signi\u00ad.es less freedom to withdraw from existing ties \n[16]. In our context, developers with higher constraints are more depen\u00addent on their existing connections \nto remain engaged in col\u00adlaboration. The use of structural hole measures in the study of communication \nstructures in a collaborative context has been demonstrated in [35] and [15]. Table 3. Correlation coef.cient \nbetween developer charac\u00ad teristics (* p< 0.01, p< 0.05, p< 0.1) JCN-talk vs JCN-work V(n) V(n +1) Degree \ncentrality 0.638* 0.732* Betweenness centrality 0.392* 0.667* Aggregate dyadic constraint 0.176 0.195* \nDegree centrality, betweenness centrality and aggregate dyadic constraint capture different dimensions \nof an indi\u00advidual developer s position in JCN-talk and JCN-work. How are these positions related between \nthe two networks? Is a developer with high degree centrality in JCN-talk likely to have high degree centrality \nin JCN-work, and similarly for the other measures? Table 3 presents the correlation coef.cients (along \nwith the p value for statistical signi.cance) between the respec\u00adtive measures for the set of developers \nin JCN-talk and JCN\u00adwork across the two versions. Consistently across versions n and n +1, degree centrality \nhas the relatively strongest positive correlation, and aggregate dyadic constraints has the relatively \nweakest positive correlation (all correlations being signi.cant at the levels indicated) for individual \ndevelopers across the networks of JCN-talk and JCN-work. The fact that the degree of JCN-work is found \nto be strongly correlated to the degree of JCN-talk signi.es that developers with many connections to \nother developers in the work network also have connections to many collaborators in the talk network \nand vice-versa. But is a developer collab\u00adorating with the same developers via talk as well as work? \nTo address this question, for each developer we extract the set of developers (s)he is connected to in \nJCN-talk (Stalk) and the set of developers (s)he is connected to in JCN-work (Swork). We de.ne the Similarity \nScore (SS) for |Stalk|n|Swork| each developer as, SS = . Thus SS = 1 for |Swork| a developer means (s)he \ntalks to all the developers (s)he is working with, whereas SS = 0 indicates the developer has no common \nindividuals between his/her talk and work col\u00adlaborators.  Table 4. Distribution of Similarity Score \nBins Version(n) Version(n +1) 0 to 0.25 10.714% 22.086%   0.26 to 0.5 16.667% 11.656% 0.51 to 0.75 \n11.905% 15.951% 0.76 to 1 60.714% 50.307% While computing SS, we removed developers who are connected \nto no other developers in JCN-work (to avoid di\u00adviding by zero); there were 23 such developers out of \ntotal 107 in version n and 31 out of 194 in version n +1. Table 4 gives the frequency distribution of \nSS as a percentage of the non-zero degree developers of JCN-work. We notice that more than half the developers \nin both versions are connected to at least 75% (that is, lie in the 0.76 to 1 bin) of their work collaborators \nin their talk networks. More than 65% are con\u00adnected to at least half their work collaborators through \ntalk. These results suggest that the development team members display a reasonably high level of connectivity \nvia talk with those peers they share technical dependencies with. This au\u00adgurs well for the overall alignment \nof talk and work. In summary, the insights from SQ-(a) are: The high value of relative size of largest \ncluster, and the low value of average separation in the talk and work net\u00adworks suggest that collaboration \nlinks span wide across the distributed team, and the team members are working towards common project \nobjectives.  The distribution of Similarity Score reveals that develop\u00aders maintain a reasonably high \nlevel of connectivity with peer developers with whom they share work dependen\u00adcies. At the same time, \nthe marked differences in den\u00adsity and clustering co-ef.cient across the talk and work networks suggest \nthat the span of a developer s commu\u00adnication goes much beyond the known dependencies of his/her work \nitems.  In the light of these results, let us now address the next research question. 4.2 RQ-(b): How \nis the number of defects owned by a developer in.uenced by his/her talk and work characteristics? In \nthe previous research question we examined how the characteristics of talk and work relate to one another \nat the aggregate and individual levels. Understanding how talk and work characteristics in.uence a key \nattribute of individual developers the number of defects owned has practical implications for project \ngovernance, as well as the potential to enrich the theory of socio-technical congruence. As with all \nlarge scale software projects, signi.cant time and effort in Jazz development is spent on defect resolution. \nDevelopers come to own defects that arise in the code mod\u00adules they were responsible for, and the onus \nof resolving a defect rests on the developer who owns it. Thus, number of defects owned by a developer \nre.ects an important aspect of their deliverable. Developers owning many defects need to be supported \nadequately for their timely resolution. The loss of these developers also represent critical risks to \nthe project, so backup plans for knowledge transfer etc need to be in place. Therefore, being able to \nestimate how many de\u00adfects a developer will own is of signi.cant value to project stakeholders. In light \nof our preceding discussion on the relation be\u00adtween talk and work, we hypothesized that combination \nof a developer s talk and work characteristics in.uences how many defects (s)he owns. Based on this hypothesis \nwe de\u00advelop a model using the following parameters. 4.2.1 Dependent variable As mentioned earlier, every \nwork item on the Jazz platform is assigned to an owner. For each developer the number of defect work \nitems owned by him/her can be determined. We call this variable NoOfDefects in our subsequent discussion \nthis serves as the dependent variable (outcome measure) of our model. Through our model, we seek to identify \nthe parameters that in.uence this independent variable.  4.2.2 Control variables Past research has identi.ed \nseveral factors that in.uence individual performance measures in collaborative software development [20], \n[23], [38]. Based on these results as well as the context speci.c to our study, the following groups \nof control variables are used in our model: Control for workload related factor: As is widely recog\u00adnized \nin software development, those who work more get more bugs to .x! Thus, the number of defects a developer \nowns is impacted by the number of task and enhancement work items (s)he owned in the .rst place. The \nvariable Workload count of tasks and enhancement work items owned by each developer represents the \nworkload re\u00adlated control factor for our model.  Controls for role related factors: Although agile develop\u00adment \nencourages a relatively .at hierarchy in the project team, different individuals ful.ll different functions \nin the development ecosystem. In our study, each developer in a team area may have one of the roles \ncontributor, component lead, tester or member of the project manage\u00adment committee (PMC). A developer \nmay be part of sev\u00aderal team areas and it is possible for a developer to have one role in one team area \nand another role in another team area. As the number of defects owned by a developer is in.uenced by \nthe speci.c role (s)he plays in that unit of development, we consider the control variables Contrib\u00adutorRole, \nComponentLeadRole, TesterRole, and PMC-Role. Few developers who played other roles not cov\u00adered by the \nabove such as release management, build coordination were covered under the OtherRoles vari\u00ad   able. \nEach of the control variables for role related factors was calculated as the sum of the number of team \nareas in which a particular developer played that role. Controls for work dependency related factors: \nBased on our earlier discussion, aggregate dyadic constraint for a vertex in JCN-work (WorkConstraint), \nmeasures the level of dependency of a developer on his/her existing connections, and is likely to impact \nthe number of defects (s)he owns. So it is taken as another control factor related to work dependency. \nIn a recent study on the Jazz plat\u00adform, Ehrlich and Catldo have used coordination needs as a control \nvariable, de.ning it as a measure that ... cap\u00adtures the extent to which an individual needs to commu\u00adnicate \nwith other members of the project given the set of task dependencies that the individual has ... [17]. \nUs\u00ading the method outlined in [17] and [9] we calculated the CoordinationNeeds control variable for inclusion \nin the model.  Control for connection related factor: Defects may arise out of connection bottlenecks \namongst people who share dependencies with a particular developer. A developer s degree in JCN-work (WorkDegree) \nmeasures the number of people a particular developer is connected through work dependencies, hence it \nre.ects the extent to which possibilities for such connection bottlenecks exist for that developer. Thus \nWorkDegree represents our connection related control factor.   4.2.3 Independent variables We now identify \nthe independent variables in our model these are the talk and work related parameters which we hypothesize \nwill in.uence the number of defects owned by a developer, after having controlled for the above factors. \n From our discussion around the .rst research question, we gained insights on how characteristics of \ntalk relate to the characteristics of work. Drawing on those observa\u00adtions, we posit that for a particular \ndeveloper, the number of other developers (s)he is connected through talk that is, his/her degree in \nJCN-talk (TalkDegree) in.uences a key work attribute the number of defects owned.  With reference \nto our earlier discussion, we recall how betweenness can be construed as a measure of the level of interpersonal \nin.uence. Thus, the betweenness of each developer in JCN-work (WorkBetweenness) re.ects the extent to \nwhich (s)he brokers work related dependen\u00adcies between other developers. As resolution of defects in \nlarge scale software systems often involve addressing dependencies across work ownership, we consider \nWork-Betweenness as another independent variable.  As TalkDegree measures the number of other devel\u00adopers \na particular developer is connected through talk, the number number of work items (s)he comments on (NoOfWorkItemsCommentedOn) \nindicates how wide  his/her span of interest is. As we have seen earlier, it is not unusual for developers \nto be interested in issues beyond the immediate circle of work items they own. Such general awareness \nabout a project ecosystem is of\u00adten valuable for defect resolution; thus we take NoOf-WorkItemsCommentedOn \nas another independent vari\u00adable in our model. Finally, it is well documented [27] that software defects \narise out of dependencies between units of work. Thus the number of defects owned by a developer is likely \nto be in.uenced by the number of dependent work items (s)he owns (NoOfDependentWorkItemsOwned); we identify \nthis as one more independent variable in our model.  4.2.4 Description of the models Using the control \nvariables and independent variables de\u00adscribed above, we built a set of multiple linear regression models \n(Table 5). Models I and III are the base models using only the control variables, for versions n and \nn +1 respec\u00adtively. Models II and IV include the independent variables in addition to the control variables \nfor versions n and n +1 respectively. In the models in Table 5, the coef.cient of each con\u00adtrol and independent \nvariable in the regression equation is mentioned, with its standard error in parentheses below. As noted \nin the table caption, superscripts of the coef.cients de\u00adnote the range of their respective p values. \nThe p value for each coef.cient is calculated using the t-statistic (ratio of each coef.cient to its \nstandard error) and the Student s t\u00addistribution. In the lower portion of the table, N denotes the number \nof data points (in our case, the number of develop\u00aders in each version), R2 is the coef.cient of determination \ngiven by the ratio of the regression sum of squares to the total sum of squares, indicating the goodness \nof .t of the re\u00adgression model in terms of the proportion of variability in the data set that is accounted \nfor by the model; df denotes the de\u00adgrees of freedom; F signi.es the Fisher F-statistic the ratio of \nthe variance in the data explained by the linear model di\u00advided by the variance unexplained by the model; \nand the p value re.ects the overall statistical signi.cance of the model, it is calculated using the \nF-statistic and the F-distribution. For the coef.cients as well as the overall regression, if p< level \nof signi.cance, we conclude the corresponding result is statistically signi.cant. The underlying assumptions \nof linear regression lin\u00adearity, normality, and homoscedasticity of the residuals, and lack of multicollinearity \nbetween the independent variables were found to hold within reasonable limits for our analysis [32]. \nHistogram, P-P plot, and scatter plots of the standard\u00adized residuals were used to establish the residual \nproperties. Among the independent variables, only the correlation be\u00adtween DegreeTalk and NoOfWorkItemsCommentedOn \nwas moderately high (around 0.7) which is expected, as com\u00admenting on many work items makes it more \nlikely for a de\u00adveloper to be connected to many other developers in the talk network. In light of this, \nto address whether multicollinearity between variables arti.cially altered the signi.cance of the overall \nregression and the stability of the coef.cients in our model, the variance in.ation factor (VIF) was \ncalculated for each variables. For all the variables, the VIF was found to be less than than recommended \nlimit of 10 (that is, tolerance greater than 0.1) [32]; hence it can be concluded that mul\u00adticollineraity \ndoes not cause signi.cant dif.culties for our model.  As the dependent variable is a count of defects \nowned by each developer, Poisson regression was considered as an al\u00adternate modeling paradigm. A major \nthreat to the validity of using Poisson regression is overdispersion, that is, violation of the strong \nunderlying assumption of equality of variance and mean of a Poisson distribution [2]. We decided to use \nmultiple linear regression in our model as its underlying as\u00adsumptions were satis.ed and it provided \nnotably high good\u00adness of .t, with close to 80% of the variability in the data set being accounted for \nby the models II and IV (Table 5). 4.2.5 In.uence of the independent variables Comparing the columns \nof Table 5, we note that for both versions n and n +1, addition of the independent variables notably \nimproves the goodness-of-.t over the base models; the R2 value increases by more than 44% between models \nI and II and by 20% between models III and IV. Thus, con\u00adtrolling for factors related to workload, role, \nconnection, and work dependency, our independent variables TalkDegree, WorkBetweenness, NumberOfWorkitemsCommentedOn, \nand NoOfDependendentWorkitemsOwned signi.cantly in.uence the number of defects owned by a particular \ndeveloper. To understand the impact of each of the independent variables, let us look at their coef.cients \nin the regression equations. From the sign of coef.cients we can infer the direction of the relationship \nbetween the independent and dependent variables. From the columns for model II and IV in Table 5 we note \nthat an increase in TalkDegree as well as Work-Betweenness for a developer leads to a decrease in num\u00adber \nof defects owned, whereas higher NumberOfWorkitem\u00adsCommentedOn and NoOfDependendentWorkitemsOwned, leads \nto higher number of defects being owned. A lower TalkDegree implies weaker information sharing channels, \nand this can negatively impact the quality of work, leading to more defect ownership. Developers who \nare less between other developers in work are likely to .nd themselves more isolated and hence owning \nmore defects. Interestingly, our model reveals that if a developer comments on more work item (s)he is \nlikely to own more defects. The number of work items commented on is a proxy of the expanse of a develop\u00aders \ninterests. Anecdotal evidence points to the fact that in large software projects, those who are most \nknowledgeable about the development context often get the most number of bugs to .x. As a developer who \nis more knowledgeable about the project will comment on more work items, our em-Figure 3. Predicted versus \nactual number of defects for version n+1  pirical .ndings supports anecdotal evidence. Finally, defects \nin large software systems often arise out of mishandled de\u00adpendencies. Thus as our model indicates, a \ndeveloper own\u00ading a large number of work items with dependencies will come to own higher number of defects. \n 4.2.6 Predicting Number of Defects The models discussed above identi.es the factors in.uenc\u00ading the \nnumber of defects owned by a developer. They can also be used to predict the number of defects, which \nhas strong implications for project governance. In any large scale software project, predicting the number \nof defects each de\u00adveloper will be responsible for with reasonably high accu\u00adracy can be very helpful \nin resource allocation and quality assurance. Figure 2 and Figure 3 shows the scatter plots of the pre\u00addicted \nversus actual defects for versions n and n+1 respec\u00adtively. To evaluate the accuracy of prediction of \nthe number of defects calculated using the regression equations based on our models, we consider the \nmean absolute error the av\u00aderage of the absolute values of the difference between the actual number \nof defects and the predicted number of de\u00ad  Table 5. In.uences of talk and work characteristics on individual \nperformance. Models I &#38; II are for version n and  models III &#38; IV are for version n +1 of the \nproduct being studied. (* p< 0.01, p< 0.05, p< 0.1) Model I Model II Model III Model IV Intercept Workload \n-2.107 (9.345) 0.614* 2.553 (6.669) 0.265* -8.472 (5.008) 0.762* -1.170 (4.300) 0.707* ContributorRole \n(0.189) -0.753 (0.150) 1.921 (0.091) 8.272* (0.079) 6.541* ComponentLeadRole (4.060) -3.392 (2.800) -5.142 \n(1.980) -0.428 (1.610) -4.499 PMCRole (4.918) -6.006 (3.493) -4.420 (2.934) -0.4228 (0.088) 0.840 (3.700) \n(2.871) (2.376) (2.006) TesterRole 0.246 3.243 0.693 -3.637 OtherRoles (21.416) 7.627 (14.709) 0.776 \n(6.690) -2.056 (5.529) -2.074 WorkDegree (3.631) 5.449* (2.571) 3.589 (1.336) 1.385 (1.240) -0.495 \nWorkConstraint (1.406) -4.547 (2.188) -2.053 (0.649) -3.214 (0.991) -3.089 CoordinationNeeds (13.096) \n-10.394 (8.962) -13.028 (6.658) 5.498 (5.363) 3.615 TalkDegree (14.572) (12.067) -2.025* (9.023) (7.784) \n-0.777 WorkBetweenness (0.446) -0.055 (0.197) -0.022 NoOfWorkItemsCommentedOn (0.051) 0.643* (0.014) \n0.288* NoOfDependentWorkItemsOwned (0.061) 0.249 (0.032) 0.241 (0.161) (0.111) N 107 107 194 194 R2 \n0.553 0.801 0.645 0.775 df 97 93 184 180 F 13.348 28.747 37.201 47.756 p < 0.001 < 0.001 < 0.001 < 0.001 \n fects, across all the developers. For the models presented in the columns for models II and IV of Table \n5, the mean ab\u00adsolute errors are 16.62 and 12.694 respectively for versions n and n +1. In light of the \nfact that defects per developer range from zero to 263 and from zero to 273 for versions n and n +1 respectively, \nthe low values of the mean absolute errors emphasize the predictive utility of the re.ned models. To \ncheck the accuracy of predictions further, we randomly selected 75% of the data points to build the models, \nand used the models thus built to calculate the number of defects for the test set of the remaining 25% \ndevelopers. The mean ab\u00adsolute errors for the test set were found to be 20.098 and 13.407 for versions \nn and n +1 respectively; their low val\u00adues further demonstrating the usefulness of the model as a predictive \ntool. 4.3 Practical Implications of Our Results The results from our study have practical implications \nfor large, globally distributed software development projects. To begin with, the study underscores the \nimportance of commu\u00adnication in keeping distributed work in synchronization, and highlights the usefulness \nof collaborative development envi\u00adronments (CDEs) in facilitating the same. Large clusters of individuals \nwith low average separation, high alignment be\u00adtween the talk and work networks of developers, are some \nof the indicators project managers can look out for as a way to reaf.rm that a multi-site team is indeed \nworking cohesively towards common technical objectives. Consequently, devia\u00adtions from this can act as \na red .ag that need management attention. The second important implication relates to the overhead associated \nwith communication. The cost of talk is signi.cant in software development, as originally pointed out \nby Brooks [5], and which assumes increasing importance in the globally distributed projects of today \n[37]. While as\u00adsigned work responsibilities and known dependencies im\u00adpact a developer s communication \noverhead, our .ndings imply that the overall size of a developer s sphere of interest serves as a useful \nproxy for implicit technical dependencies that may draw a developer s attention and impose additional \noverload. How effectively relevant information from a de\u00adveloper s ecosystem (both direct and implicit) \ncan be sum\u00admarized, integrated and presented in CDEs, will determine how well such overload may be managed \nby development teams of the future. Finally, our .ndings suggest that a key attribute of a developer \ns work -as measured by the num\u00adber of defects owned by him/her -is strongly in.uenced by a combination \nof the developer s talk and work characteris\u00adtics during development. This result is particularly important \nin light of the high costs associated with testing large soft\u00adware systems. The predictive model we have \noutlined may be used to identify developers who may be burdened with a high number of defect .xes, and \nmay thus need manage\u00adrial attention and support. This, in turn, can guide proactive planning and allocation \nof testing resources.  5. Threats to Validity and Future Work In the following subsections, we identify \nthe limitations of our study with respect to construct validity, internal validity, external validity, \nand reliability. 5.1 Construct validity Construct validity denotes that variables are measured cor\u00adrectly. \nAs discussed in the Related Work section, there is a body of existing literature on studying collaboration \nusing the network paradigm, and studies of developer collabora\u00adtion on the Jazz platform. Almost all \nthe measures used in this paper have been grounded in past work. We have de.ned the Similarity Score \nmetric to examine the level of congru\u00adence between a developer s circle of talk vis-a-vis work. As argued \nduring the de.nition of Similarity Score, we believe this metric succinctly captures the parameter of \nour inter\u00adest. In choosing the measures that re.ect the control vari\u00adables and independent variables \nfor the model developed in RQ-(b), we have been guided by past precedent and the spe\u00adci.c context of \nour study. However, we recognize there may be alternative ways of measuring similar variables. The ex\u00adplicit \ndependency links between work items are manually de.ned by developers. In few cases there may be implicit \ndependencies that were not recorded as links and represent another threat to validity. This threat is \nmitigated by con\u00adsidering other parameters of the developers sphere of inter\u00adest, which are likely to \ncapture such implicit dependencies. We have made the links between vertices of JCN-talk and JCN-work \nnon-directional as many of the enduring results of network theory pertain to this class of networks [30]. \nHow\u00adever directionality of links between developers can provide insights around the nature of information \n.ow in a team. In our future work, we intend to examine the implications of in\u00adtroducing directionality \nto links in JCN-talk and JCN-work and also consider weights of the links. We also plan to study the effects \nof assigning different levels of importance to the different categories of dependencies considered while \ncon\u00adstructing JCN-work. 5.2 Internal validity Internal validity is established for a study if it is \nfree from systematic errors and biases. We have accessed develop\u00adment data from the Jazz repository for \nthe two versions of the product studied. As Jazz is the only source of the data we are interested in, \nissues that can affect internal validity such as mortality (that is, subjects withdrawing from a study \nduring data collection) and maturation (that is, subjects changing their characteristics during the study \noutside the parameters of the research) do not arise in our case. However the extent to which the development \nteam used Jazz does represent a threat to validity. As mentioned while describing the exper\u00adimental set-up, \nour observations as well discussion with the development team suggested that signi.cant amount of col\u00adlaboration \ninformation was captured in the Jazz repository. Thus we believe the extent of this threat to validity \nis lim\u00adited. As each developer on the Jazz platform has a unique identi.er, our study is free from errors \ndue to ambiguity of individual identities whether John Doe and J Doe are the same person or if the same \nmoniker John C Doe rep\u00adresent more than one person that beset other studies on collaboration, such as \nscienti.c co-authorship. 5.3 External validity The threat to external validity concerns the generalisabil\u00adity \nof the results of our study. We have studied the associa\u00adtion of talk and work in two consecutive versions \nof a sin\u00adgle product. As demonstrated in [3], [35], [36], [17] useful insights can be drawn from a single \nsubject of study. The extent of our data 19 months of development activity, in\u00adcluding 17,000+ work \nitems and 61,000+ comments made by more than 190 developers is notably larger than many similar studies. \nThus we believe our results consummately capture the underlying phenomena of interest. But we do not \nclaim these results can be generalized as yet; we plan to study other systems in our future work.  5.4 \nReliability Reliability of a study is related to reproducibility of the results. As described in the \nstudy settings, we employ a set of established techniques to arrive at our results. As there is no human \nintervention in extracting, and processing the data, there is minimal subjectivity in our results, and \nthey can be reproduced without dif.culty.  6. Conclusions In this paper we studied development data \nfrom two con\u00adsecutive versions of a major IBM product developed on the Jazz platform. We analyzed two \nresearch questions around the relationship between talk and work characteristics of de\u00advelopers, and \nhow these characteristics in.uence the num\u00adber of defect work items owned by a developer. From our results, \nwe observe that characteristics of talk and work re\u00ad.ect the collaboration of a group of developers with \nindi\u00advidual responsibilities but working towards a common ob\u00adjective, and that the expanse of talk is \ngenerally wider than work related dependencies. We developed statistical models to understand the in.uences \nof a developer s talk and work characteristics on the number of defects (s)he owns. Stan\u00addard evaluation \ncriteria established signi.cant goodness-of\u00ad.t and high prediction accuracy for the model. Our results \nhighlight some of the subtle and signi.cant aspects of the relationship between developer communication \nand the units of work around which such communication takes place in a large scale software project. \nReferences [1] A. L. Barabasi, H. Jeong, Z. Neda, E. Ravasz, A. Schubert, and T. Vicsek. Evolution of \nthe social network of scienti.c collaborations. cond-mat/0104162, Apr. 2001. [2] D. Barron. The analysis \nof count data: Overdispersion and au\u00adtocorrelation. Sociological methodology, 22:179 220, 1992. [3] C. \nBird, N. Nagappan, P. Devanbu, H. Gall, and B. Murphy. Putting it All Together: Using Socio-Technical \nNetworks to Predict Failures. In Proc. ISSRE 2009. [4] C. Bird, D. Pattison, R. D Souza, V. Filkov, and \nP. Devanbu. Latent social structure in open source projects. In Proceed\u00adings of the 16th ACM SIGSOFT \nInternational Symposium on Foundations of software engineering, SIGSOFT 08/FSE-16, page 2435, New York, \nNY, USA, 2008. ACM. ISBN 978-1\u00ad59593-995-1. [5] F. P. Brooks. The Mythical Man-Month: Essays on Software \nEngineering, 20th Anniversary Edition. Addison-Wesley, 1995. [6] S. L. Brown and K. M. Eisenhardt. Product \ndevelopment: Past research, present .ndings, and future directions. The Academy of Management Review, \n20(2):343 378, Apr. 1995. ISSN 0363-7425. doi: 10.2307/258850. [7] M. Cataldo and J. D. Herbsleb. Communication \nnetworks in geographically distributed software development. In Pro\u00adceedings of the 2008 ACM conference \non Computer supported cooperative work, CSCW 08, page 579588, New York, NY, USA, 2008. ACM. ISBN 978-1-60558-007-4. \n[8] M. Cataldo, J. D. Herbsleb, and K. M. Carley. Socio-technical congruence: a framework for assessing \nthe impact of techni\u00adcal and work dependencies on software development produc\u00adtivity. In Proc. ESEM 2008, \npages 2 11. ISBN 978-1-59593\u00ad971-5. [9] M. Cataldo, P. A. Wagstrom, J. D. Herbsleb, and K. M. Car\u00adley. \nIdenti.cation of coordination requirements: implications for the design of collaboration and awareness \ntools. In Pro\u00adceedings of the 2006 20th anniversary conference on Com\u00adputer supported cooperative work, \nCSCW 06, page 353362, New York, NY, USA, 2006. ACM. ISBN 1-59593-249-6. [10] M. Conway. How do committees \ninvent? Datamation Journal, pages 28 31, April 1968. [11] J. M. Costa, M. Cataldo, and C. R. de Souza. \nThe scale and evolution of coordination needs in large-scale distributed projects: implications for the \nfuture generation of collabo\u00adrative tools. In Proceedings of the 2011 annual confer\u00adence on Human factors \nin computing systems, CHI 11, page 31513160, New York, NY, USA, 2011. ACM. ISBN 978-1\u00ad4503-0228-9. [12] \nC. D. Cramton. The mutual knowledge problem and its con\u00adsequences for dispersed collaboration. Organization \nScience, 12(3):346371, May 2001. ISSN 1526-5455. [13] K. Crowston and J. Howison. The social structure \nof free and open source software development. First Monday, ISSN 1396\u00ad0466, Feb. 2005. The authors examine \ncommunication patters of FLOSS projects, .nding that FLOSS development teams vary widely in centralizing \nor decentralizing their communi\u00adcations. [14] J. N. Cummings. Work groups, structural diversity, and \nknowledge sharing in a global organization. Manage. Sci., 50(3):352364, Mar. 2004. ISSN 0025-1909. [15] \nJ. N. Cummings and R. Cross. Structural properties of work groups and their consequences for performance. \nSocial Net\u00adworks, 25(3):197 210, July 2003. ISSN 0378-8733. [16] W. de Nooy, A. Mrvar, and V. Batagelj. \nExploratory Social Network Analysis with Pajek. Cambridge University Press, Jan. 2005. ISBN 0521602629. \n[17] K. Ehrlich and M. Cataldo. All-for-one and one-for-all?: a multi-level analysis of communication \npatterns and individual performance in geographically distributed software develop\u00adment. In Proceedings \nof the ACM 2012 conference on Com\u00adputer Supported Cooperative Work, CSCW 12, pages 945 954, New York, \nNY, USA, 2012. ACM. ISBN 978-1-4503\u00ad1086-4. [18] K. Ehrlich and K. Chang. Leveraging expertise in global \nsoft\u00adware teams: Going outside boundaries. In Proceedings of the IEEE international conference on Global \nSoftware Engineer\u00ading, ICGSE 06, page 149158, Washington, DC, USA, 2006. IEEE Computer Society. ISBN \n0-7695-2663-2. [19] K. Ehrlich, G. Valetto, and M. Helander. Seeing inside: Using social network analysis \nto understand patterns of collaboration and coordination in global software teams. In Proc. ICGSE 07, \npages 297 298, 2007. ISBN 0-7695-2920-8. [20] W. Fong Boh, S. A. Slaughter, and J. A. Espinosa. Learn\u00ading \nfrom experience in software development: A multilevel analysis. Manage. Sci., 53(8):13151331, Aug. 2007. \nISSN 0025-1909. [21] R. Frost. Jazz and the eclipse way of collaboration. IEEE Softw., 24(6):114 117, \n2007. [22] R. Guimera, B. Uzzi, J. Spiro, and L. A. N. Amaral. Team assembly mechanisms determine collaboration \nnetwork struc\u00adture and team performance. Science (New York, N.Y.), 308 (5722):697 702, Apr. 2005. ISSN \n1095-9203.  [23] J. D. Herbsleb and A. Mockus. An empirical study of speed and communication in globally \ndistributed software develop\u00adment. IEEE Trans. Softw. Eng., 29:481 494, June 2003. ISSN 0098-5589. [24] \nK. Herzig and A. Zeller. Mining the jazz repository: Chal\u00adlenges and opportunities. In Mining Software \nRepositories, 2009. MSR 09. 6th IEEE International Working Conference on, pages 159 162, May 2009. [25] \nP. Hinds and C. McGrath. Structures that work: social struc\u00adture, work structure and coordination ease \nin geographically distributed teams. In Proc. CSCW 2006, pages 343 352. ACM, 2006. ISBN 1-59593-249-6. \n[26] R. Kling, W. Scacchi, and M. C. Yovits. Computing as social action: The social dynamics of computing \nin complex orga\u00adnizations. volume 19, pages 249 327. Elsevier, 1980. ISBN 0065-2458. [27] A. G. Koru \nand H. Liu. Building defect prediction models in practice. IEEE Softw., 22(6):2329, Nov. 2005. ISSN 0740\u00ad7459. \n[28] R. E. Kraut and L. A. Streeter. Coordination in software development. Comm. of the ACM, 38(3):69 \n81, Mar. 1995. ISSN 00010782. [29] I. Kwan, A. Schroter, and D. Damian. Does Socio-Technical congruence \nhave an effect on software build success? a study of coordination in a software project. IEEE Trans. \nSoftw. Eng., 37(3):307 324, May 2011. ISSN 0098-5589. [30] M. E. J. Newman. The structure and function \nof complex networks. Mar. 2003. SIAM Review 45, 167-256 (2003). [31] G. L. Stewart and M. R. Barrick. \nTeam structure and perfor\u00admance: Assessing the mediating role of intrateam process and the moderating \nrole of task type. The Academy of Manage\u00adment Journal, 43(2):135 148, Apr. 2000. ISSN 0001-4273. [32] \nB. Tabachnick and L. Fidell. Using Multivariate Statistics. Boston: Pearson Education, 2007. [33] P. \nWagstrom, J. Herbsleb, and K. Carley. Communication, team performance, and the individual: Bridging technical \nde\u00adpendencies. Proc. AMC 2010, 2010. [34] D. Watts. Networks, dynamics, and the Small-World phe\u00adnomenon. \nThe American Journal of Sociology, 105(2):527, 493, 1999. [35] T. Wolf, T. Nguyen, and D. Damian. Does \ndistance still matter? Softw. Process, 13(6):493 510, 2008. [36] T. Wolf, A. Schroter, D. Damian, and \nT. Nguyen. Predict\u00ading build failures using social network analysis on developer communication. In Proc. \nICSE 2009, pages 1 11, 2009. ISBN 978-1-4244-3453-4. [37] N. Zhou, Q. Ma, and K. Ratakonda. Quantitative \nmodeling of communication cost for global service delivery. In Proc. SCC 2009, SCC 09, pages 388 395, \n2009. ISBN 978-0\u00ad7695-3811-2. [38] T. Zimmermann and N. Nagappan. Predicting defects with program dependencies. \nIn Empirical Software Engineering and Measurement, 2009. ESEM 2009. 3rd International Sym\u00adposium on, \npages 435 438, Oct. 2009.    \n\t\t\t", "proc_id": "2384616", "abstract": "<p>IBM's Jazz initiative offers a state-of-the-art collaborative development environment (CDE) facilitating developer interactions around interdependent units of work. In this paper, we analyze development data across two versions of a major IBM product developed on the Jazz platform, covering in total 19 months of development activity, including 17,000+ work items and 61,000+ comments made by more than 190 developers in 35 locations. By examining the relation between developer talk and work, we find evidence that developers maintain a reasonably high level of connectivity with peer developers with whom they share work dependencies, but the span of a developer's communication goes much beyond the known dependencies of his/her work items. Using multiple linear regression models, we find that the number of defects owned by a developer is impacted by the number of other developers (s)he is connected through talk, his/her interpersonal influence in the network of work dependencies, the number of work items (s)he comments on, and the number work items (s)he owns. These effects are maintained even after controlling for workload, role, work dependency, and connection related factors. We discuss the implications of our results for collaborative software development and project governance.</p>", "authors": [{"name": "Subhajit Datta", "author_profile_id": "81482643819", "affiliation": "IBM Research, Bangalore, India", "person_id": "P3856155", "email_address": "subhajit.datta@acm.org", "orcid_id": ""}, {"name": "Renuka Sindhgatta", "author_profile_id": "81314485387", "affiliation": "IBM Research, Bangalore, India", "person_id": "P3856156", "email_address": "renuka.sr@in.ibm.com", "orcid_id": ""}, {"name": "Bikram Sengupta", "author_profile_id": "81100183205", "affiliation": "IBM Research, Bangalore, India", "person_id": "P3856157", "email_address": "bsengupt@in.ibm.com", "orcid_id": ""}], "doi_number": "10.1145/2384616.2384664", "year": "2012", "article_id": "2384664", "conference": "OOPSLA", "title": "Talk versus work: characteristics of developer collaboration on the jazz platform", "url": "http://dl.acm.org/citation.cfm?id=2384664"}