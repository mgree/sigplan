{"article_publication_date": "10-16-2005", "fulltext": "\n\t\t\t", "proc_id": "1094855", "abstract": "domain/object is a new software environment in the tradition of dynamic languages like Smalltalk, Lisp and Self. Like its predecessors, domain/object blurs the usual distinctions between tools, languages, operating systems, applications and databases. domain/object also adds some interesting twists to the familiar dynamic paradigm, including spreadsheet-style \"liveness\", versioned execution, transactions, full incrementality and transparency.domain/object is intended as a delivery platform for software that requires tight semantic integration between components, such as development tools and next-generation applications for the semantic web. Incrementality and liveness obviate the need for standard notification schemes such as Observer, ensuring that data and programs are synchronised automatically. Transactions and versioning allow the granularity and frequency of synchronisation to be adjusted to suit the particular application or user. Transparency means that the full structure of the executing program is available for queries, suggesting a considerably more dynamic realisation of aspect-oriented programming.", "authors": [{"name": "Roly Perera", "author_profile_id": "81100601879", "affiliation": "Dynamic Aspects, Bristol, United Kingdom", "person_id": "P698166", "email_address": "", "orcid_id": ""}, {"name": "Russ Freeman", "author_profile_id": "81540186556", "affiliation": "Dynamic Aspects, Bristol, United Kingdom", "person_id": "PP14104094", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1094855.1094881", "year": "2005", "article_id": "1094881", "conference": "OOPSLA", "title": "Beyond the language workbench: a runtime platform for practical semantic computing", "url": "http://dl.acm.org/citation.cfm?id=1094881"}