{"article_publication_date": "10-16-2005", "fulltext": "\n\t\t\t", "proc_id": "1094855", "abstract": "OO Programs are built by first defining User Types within the language environment and then realizing program requirements by using the behavior defined by these Types.We argue against defining types to deal with every scenario.OO Programs within an enterprise have to deal with the non-OO world that includes RDBMS, other Applications, and humans etc. On these EDGES that OO programs interact with the non-OO world we have observed that there is little respect for Types and behavior while the requirement and expectation is most often data. If this is true, then OO application developers will repeatedly have to extract data to and from objects defined by Types to support the pure data interface that the non OO world supports.In this paper we attempt to highlight some benefits we have realized by equipping an OO Application (Banking Middleware in Java) with a core representation for data which we refer to as the 'data fabric'. We further show that seemingly unrelated problems in database persistence, data-binding, message data transformation and metadata management that appear within an Enterprise context can now be addressed well within the data fabric. The Data fabric is itself realized using reflective uniform data API defined using a few key data abstractions.This then reopens the case for OO developers to enhance their effectiveness with generic Data Models and principles of Data Driven Programming.", "authors": [{"name": "John Kuriakose", "author_profile_id": "81100567526", "affiliation": "Infosys Technologies, Pune, India", "person_id": "P753373", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1094855.1094962", "year": "2005", "article_id": "1094962", "conference": "OOPSLA", "title": "Honey, i shrunk the types: how behavioral types loose relevance on the edges on OO applications and why a core data fabric is useful for adaptability", "url": "http://dl.acm.org/citation.cfm?id=1094962"}