{"article_publication_date": "01-03-1989", "fulltext": "\n\t\t\t", "proc_id": "75277", "abstract": "<p>This paper presents <italic>type classes</italic>, a new approach to <italic>ad-hoc</italic> polymorphism. Type classes permit overloading of arithmetic operators such as multiplication, and generalise the &#8220;eqtype variables&#8221; of Standard ML. Type classes extend the Hindley/Milner polymorphic type system, and provide a new approach to issues that arise in object-oriented programming, bounded type quantification, and abstract data types. This paper provides an informal introduction to type classes, and defines them formally by means of type inference rules.</p>", "authors": [{"name": "P. Wadler", "author_profile_id": "81100173596", "affiliation": "University of Glasgow", "person_id": "PP39080752", "email_address": "", "orcid_id": ""}, {"name": "S. Blott", "author_profile_id": "81100155015", "affiliation": "University of Glasgow", "person_id": "P252436", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/75277.75283", "year": "1989", "article_id": "75283", "conference": "POPL", "title": "How to make ad-hoc polymorphism less ad hoc", "url": "http://dl.acm.org/citation.cfm?id=75283"}