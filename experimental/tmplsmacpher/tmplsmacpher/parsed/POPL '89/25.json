{"article_publication_date": "01-03-1989", "fulltext": "\n\t\t\t", "proc_id": "75277", "abstract": "<p>We implemented a continuation-passing style (CPS) code generator for ML. Our CPS language is represented as an ML datatype in which all functions are named and most kinds of ill-formed expressions are impossible. We separate the code generation into phases that rewrite this representation into ever-simpler forms. Closures are represented explicitly as records, so that closure strategies can be communicated from one phase to another. No stack is used. Our benchmark data shows that the new method is an improvement over our previous, abstract-machine based code generator.</p>", "authors": [{"name": "A. W. Appel", "author_profile_id": "81100498630", "affiliation": "Department of Computer Science, Princeton University, Princeton, NJ", "person_id": "PP31059696", "email_address": "", "orcid_id": ""}, {"name": "T. Jim", "author_profile_id": "81100065932", "affiliation": "AT&T Bell Laboratories, Murray Hill, NJ", "person_id": "PP39073794", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/75277.75303", "year": "1989", "article_id": "75303", "conference": "POPL", "title": "Continuation-passing, closure-passing style", "url": "http://dl.acm.org/citation.cfm?id=75303"}