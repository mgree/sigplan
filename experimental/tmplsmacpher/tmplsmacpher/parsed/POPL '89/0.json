{"article_publication_date": "01-03-1989", "fulltext": "\n\t\t\t", "proc_id": "75277", "abstract": "<p>Previous attempts at vectorizing programs written in a sequential high level language focused on converting control dependences to data dependences using a mechanism known as IF-conversion. After IF-conversion vector optimizations are performed on a data dependence graph. However, IF-conversion is an irrevocable process which can introduce high run-time overhead if the input program is not amenable to vectorization.</p><p>This paper uses a program dependence graph as the intermediate representation for a vectorizing compiler. A program dependence graph explicitly represents both control and data dependences, allowing guard values to be generated for vectorized statements. Techniques have been developed to perform code motion on vectorization candidates, to validly eliminate all unnecessary control and data dependence cycles, and to regenerate the newly vectorized program consistent with a topological ordering based on the control and data dependences.</p>", "authors": [{"name": "W. Baxter", "author_profile_id": "81100207482", "affiliation": "Department of Computer Science, University of Wyoming, Laramie, Wyoming", "person_id": "P292987", "email_address": "", "orcid_id": ""}, {"name": "H. R. Bauer", "author_profile_id": "81100159701", "affiliation": "Department of Computer Science, University of Wyoming, Laramie, Wyoming", "person_id": "PP31072055", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/75277.75278", "year": "1989", "article_id": "75278", "conference": "POPL", "title": "The program dependence graph and vectorization", "url": "http://dl.acm.org/citation.cfm?id=75278"}