{"article_publication_date": "01-03-1989", "fulltext": "\n\t\t\t", "proc_id": "75277", "abstract": "<p>We study the complexity of type inference for a core fragment of ML with lambda abstraction, function application, and the polymorphic let declaration. Our primary technical tool is the unification problem for a class of &#8220;polymorphic&#8221; type expressions. This form of unification, which we call <italic>polymorphic unification,</italic> allows us to separate a combinatorial aspect of type inference from the syntax of ML programs. After observing that ML typing is in DEXPTIME, we show that polymorphic unification is PSPACE hard. From this, we prove that recognizing the typable core ML programs is also PSPACE hard. Our lower bound stands in contrast to the common belief that typing ML programs is &#8220;efficient,&#8221; and to practical experience which suggests that the algorithms commonly used for this task do not slow compilation substantially.</p>", "authors": [{"name": "P. C. Kanellakis", "author_profile_id": "81100644815", "affiliation": "Department of Computer Science, Brown University, Providence, RI", "person_id": "PP39078592", "email_address": "", "orcid_id": ""}, {"name": "J. C. Mitchell", "author_profile_id": "81338490160", "affiliation": "Department of Computer Science, Stanford University, Stanford, CA", "person_id": "PP39076090", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/75277.75286", "year": "1989", "article_id": "75286", "conference": "POPL", "title": "Polymorphic unification and ML typing", "url": "http://dl.acm.org/citation.cfm?id=75286"}