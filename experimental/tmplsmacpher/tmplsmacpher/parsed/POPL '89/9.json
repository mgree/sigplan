{"article_publication_date": "01-03-1989", "fulltext": "\n\t\t\t", "proc_id": "75277", "abstract": "<p>Most of the theoretical work on the semantics of logic programs assumes an interpreter that provides a complete resolution procedure. In contrast, for reasons of efficiency, most logic programming languages are built around incomplete procedures. This difference is rooted in Prolog, which evaluates resolvent trees in a depth-first rather than a breadth-first order. The gap is widened by some equational logic languages, which combine the incompleteness of depth-first evaluation with incomplete approximations to equational unification. Because of this gap, it is unsound to reason about logic programs using their declarative semantics. This in turn makes it difficult to develop abstraction mechanisms that can be used to partition a logic program into independently specifiable modules.</p><p>In this paper we consider the role type systems can play in closing the gap between the operational and declarative semantics of logic programs. We develop the notion of an equational mode system for use in constraining the domains of both predicates and unification procedures. The mode system is used to guide the resolution-based interpreter, and as a result, we can show that two predicate implementations with the same declarative meaning will be operationally equivalent.</p>", "authors": [{"name": "K. A. Yelick", "author_profile_id": "81100059756", "affiliation": "Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, MA", "person_id": "PP31102127", "email_address": "", "orcid_id": ""}, {"name": "J. L. Zachary", "author_profile_id": "81100196331", "affiliation": "Computer Science Department, University of Utah, Salt Lake City, UT", "person_id": "PP31066047", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/75277.75287", "year": "1989", "article_id": "75287", "conference": "POPL", "title": "Moded type systems for logic programming", "url": "http://dl.acm.org/citation.cfm?id=75287"}