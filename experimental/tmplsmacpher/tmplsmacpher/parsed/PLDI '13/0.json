{"article_publication_date": "06-16-2013", "fulltext": "\n Look Up! Your Future is in the Cloud James R. Larus Microsoft Research larus@microsoft.com Categories \nand Subject Descriptors H.0 [Information Systems]: General General Terms Languages, Management, Performance, \nReliabil\u00adity Keywords Cloud computing; programming languages; distributed computing 1. Talk Abstract \nThe Cloud is a wonderfully expansive phrase used to denote com\u00adputation and data storage centralized \nin a large datacenter and elas\u00adtically accessed across a network. The concept is not new; web sites and \nbusiness servers have run in datacenters for a long time. These, however, were specialized applications, \noutside of the main\u00adstream of desktop programs. The past few years has seen enormous change as the mainstream \nshifts from a single computer to mo\u00adbile devices and clusters of computers. Three factors are driving \nthis change. 1) Mobile computing, where apps run on a size-and power-constrained device and would be \nfar less interesting without backend systems to augment computation and storage capacity. 2) Big data, \nwhich uses clusters of computers to extract valuable in\u00adformation from vast amounts of unstructured data. \n3) Inexpensive, elastic computing, pioneered by Amazon Web Services, which en\u00adables everyone to rapidly \nobtain and use many servers. As a researcher from the language and compiler community, I .rmly believe \nthis sea change is at heart a programming problem.1 Cloud computing is far different from the environment \nin which most of today s languages and tools were developed, and few pro\u00adgrammers have mastered its complexity. \nNew challenges include pervasive parallelism, partial failure, high and variable communi\u00adcation latency, \nand replication for reliability and throughput. The Cloud is an intrinsically parallel and distributed \nworld in which computation runs across many processors on many com\u00adputers. The workload, fortunately, \nis inherently parallel, as a sin\u00adgle server can be shared by hundreds or thousands of simultaneous and \nindependent users. Moreover, the Cloud is built on inexpensive, commodity hardware that fails in perverse \nways. Because of scale, failures are common and software must treat failure as normal. At 1Yes, it also \nposes challenges for the networking, database, system man\u00adagement, . . . communities as well. the same \ntime, services in the cloud face stringent requirements to handle large and unpredictable loads while \nproviding consistent response latency and to maintain high availability and reliability. Redundancy and \nreplication are the principal tools to achieve these ends. And, of course, all of these new demands are \nlayered on the familiar challenges of constructing secure, reliable, scalable, elas\u00adtic, and ef.cient \nsoftware! If this is not a programming problem, what is it? Language designers and implementers have \na remarkable op\u00adportunity to contribute by providing .rst-class support and tools to address these new \nchallenges. Languages such as Erlang, C#, Javascript, and Scala have started down this path by support\u00ading \nasynchronous communication. But, much more can be done. Shared memory and message passing concurrency \nneeds to be inte\u00adgrated into a single, easy-to-use model with an appropriate balance among performance, \nusability, consistency, and reliability. Richer data models that embrace replication, consistency, partitioning, \nand persistence would greatly aid software development. And life cycle issues, such as updating continuously \nrunning systems and monitoring and controlling large con.gurations, are appropriate as elements of a \nlanguage s runtime system. I will brie.y describe Orleans, a software framework devel\u00adoped at Microsoft \nResearch for building reliable, scalable, and elastic cloud applications. Its programming model encourages \nthe use of simple concurrency patterns that are easy to understand and employ correctly. It is based \non distributed actor-like compo\u00adnents called grains, which are isolated units of state and compu\u00adtation \nthat communicate through asynchronous messages. Within a grain, promises are the mechanism for managing \nboth asyn\u00adchronous messages and local task-based concurrency. Isolated state and a constrained execution \nmodel allow Orleans to persist, mi\u00adgrate, replicate, and reconcile grain state. In addition, Orleans \npro\u00advides lightweight transactions that support a consistent view of state and provide a foundation for \nautomatic error handling and fail\u00adure recovery. Orleans enables a developer to concentrate on appli\u00adcation \nlogic, while the Orleans runtime provides scalability, avail\u00adability, and reliability. The system is \nin use by Microsoft, support\u00ading production services. Copyright is held by the author/owner(s). PLDI \n13, June 16 19, 2013, Seattle, WA, USA. ACM 978-1-4503-2014-6/13/06.  \n\t\t\t", "proc_id": "2491956", "abstract": "<p>The \"Cloud\" is a wonderfully expansive phrase used to denote computation and data storage centralized in a large datacenter and elastically accessed across a network. The concept is not new; web sites and business servers have run in datacenters for a long time. These, however, were specialized applications, outside of the mainstream of desktop programs. The past few years has seen enormous change as the mainstream shifts from a single computer to mobile devices and clusters of computers. Three factors are driving this change. 1) Mobile computing, where apps run on a size- and power-constrained device and would be far less interesting without backend systems to augment computation and storage capacity. 2) Big data, which uses clusters of computers to extract valuable information from vast amounts of unstructured data. 3) Inexpensive, elastic computing, pioneered by Amazon Web Services, which enables everyone to rapidly obtain and use many servers.</p> <p>As a researcher from the language and compiler community, I firmly believe this sea change is at heart a programming problem. Cloud computing is far different from the environment in which most of today's languages and tools were developed, and few programmers have mastered its complexity. New challenges include pervasive parallelism, partial failure, high and variable communication latency, and replication for reliability and throughput.</p>", "authors": [{"name": "James R. Larus", "author_profile_id": "81100277326", "affiliation": "Microsoft Research, Redmond, WA, USA", "person_id": "P4148917", "email_address": "larus@microsoft.com", "orcid_id": ""}], "doi_number": "10.1145/2491956.2462157", "year": "2013", "article_id": "2462157", "conference": "PLDI", "title": "Look up!: your future is in the cloud", "url": "http://dl.acm.org/citation.cfm?id=2462157"}