{"article_publication_date": "05-17-2002", "fulltext": "\n\t\t\t", "proc_id": "512529", "abstract": "Multithreaded applications with multi-gigabyte heaps running on modern servers provide new challenges for garbage collection (GC). The challenges for \"server-oriented\" GC include: ensuring short pause times on a multi-gigabyte heap, while minimizing throughput penalty, good scaling on multiprocessor hardware, and keeping the number of expensive multi-cycle fence instructions required by weak ordering to a minimum. We designed and implemented a fully parallel, incremental, mostly concurrent collector, which employs several novel techniques to meet these challenges. First, it combines incremental GC to ensure short pause times with concurrent low-priority background GC threads to take advantage of processor idle time. Second, it employs a low-overhead work packet mechanism to enable full parallelism among the incremental and concurrent collecting threads and ensure load balancing. Third, it reduces memory fence instructions by using batching techniques: one fence for each block of small objects allocated, one fence for each group of objects marked, and no fence at all in the write barrier. When compared to the mature well-optimized parallel stop-the-world mark-sweep collector already in the IBM JVM, our collector prototype reduces the maximum pause time from 284 ms to 101 ms, and the average pause time from 266 ms to 66 ms while only losing 10% throughput when running the SPECjbb2000 benchmark on a 256 MB heap on a 4-way 550 MHz Pentium multiprocessor.", "authors": [{"name": "Yoav Ossia", "author_profile_id": "81100376653", "affiliation": "IBM Haifa Research Laboratory, Haifa 31905, ISRAEL", "person_id": "PP14133338", "email_address": "", "orcid_id": ""}, {"name": "Ori Ben-Yitzhak", "author_profile_id": "81100183573", "affiliation": "IBM Haifa Research Laboratory, Haifa 31905, ISRAEL", "person_id": "PP14073889", "email_address": "", "orcid_id": ""}, {"name": "Irit Goft", "author_profile_id": "81100570918", "affiliation": "IBM Haifa Research Laboratory, Haifa 31905, ISRAEL", "person_id": "PP14197770", "email_address": "", "orcid_id": ""}, {"name": "Elliot K. Kolodner", "author_profile_id": "81100522094", "affiliation": "IBM Haifa Research Laboratory, Haifa 31905, ISRAEL", "person_id": "PP14181233", "email_address": "", "orcid_id": ""}, {"name": "Victor Leikehman", "author_profile_id": "81100308708", "affiliation": "IBM Haifa Research Laboratory, Haifa 31905, ISRAEL", "person_id": "PP14112904", "email_address": "", "orcid_id": ""}, {"name": "Avi Owshanko", "author_profile_id": "81100320411", "affiliation": "IBM Haifa Research Laboratory, Haifa 31905, ISRAEL", "person_id": "PP14116610", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512529.512546", "year": "2002", "article_id": "512546", "conference": "PLDI", "title": "A parallel, incremental and concurrent GC for servers", "url": "http://dl.acm.org/citation.cfm?id=512546"}