{"article_publication_date": "10-01-2001", "fulltext": "\n Some text in this electronic article is rendered in Type 3 or bitmapped fonts, and may display poorly \non screen in Adobe Acrobat v. 4.0 and later. However, printouts of this file are unaffected by this problem. \nWe recommend that you print the file for best legibility. Object Race Detection Christoph von Praun and \nThomas R. Gross Laboratory for Software Technology Department of Computer Science ETH Z\u00a8 urich 8092 Z\u00a8urich, \nSwitzerland ABSTRACT Wepresentanon-the-fymehanismthatdetetsaesson\u00adfitsinexeutionsofmulti-threadedJavaprograms.Aess \nonfitsareaonservativeapproximationofdataraes.The hekertraksaessinformationatthelevelofobjets(ob\u00adjetraes)ratherthanatthelevelofindividualvariables. \nThisviewpointallowsthehekertoexploitspeifproper\u00adtiesofobjet-orientedprogramsforoptimizationbyrestrit\u00adingdynamihekstothoseobjetsthatareidentifedby \nesapeanalysisaspotentiallyshared.Thehekerhasbeen implementedinollaborationwithan\"ahead-of-time\"Java ompiler. \nTheombinationofstatiprogramanalysis(esape\u00adanalysis)andinlineinstrumentationduringodegeneration allowsustoreduetheruntimeoverheadofdetetinga\u00adessonfits.Thisoverheadamountstoabout16-129%in \ntimeandlessthan25%inspaefortypialbenhmarkap\u00adpliationsandomparesfavorablytopreviouslypublished on-the-fymehanismsthatinurredanoverheadofabouta \nfatorof2-80intimeanduptoafatorof2inspae. 1. INTRODUCTION Multi-threadedexeutionisanattrativeoptionforobjet\u00adorientedprogramsthatwanttotakeadvantageofmulti\u00adproessorplatforms.Modernobjet-orientedprogramming \nlanguageslikeJavainludesupportformulti-threadingdi\u00adretlyatthelanguagelevel,andthereexistanumberof threadpakagesforotherlanguages.Thismovetowards \nmulti-threadingisnotwithoutrisks suhprogramsmay nowontainraes,i.e.,unorderedaessestoavariablesuh thatatleastoneaessisawrite[22].Raesanintro\u00addueambiguityintheexeutionofparallelprograms.The \nprinipalreasonfortheambiguityisthattheprogrammer didnotintrodueimpliitorexpliitsynhronizationtore\u00adstrittheimpatoftheshedulerontheontrol-fowofa \nmulti-threadedprogram.Onertainvariables,e.g.loksor Permission to make digital or hard copies of part \nor all of this work or personal or classroom use is granted without fee provided that copies are not \nmade or distributed for profit or commercial advantage and that copies bear this notice and the full \ncitation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to \nlists, requires prior specific permission and/or a fee. OOPSLA 01 Tampa Florida USA Copyright ACM 2001 \n1-58113-335-9/01/10 $5.00 volatiledata,raesareintentionalandanbetolerated.On othervariableshowever,raesanintrodueunwantedam\u00adbiguityandsuhraesaretermeddataraes[22]oraess \nanomalies[9].Weonsiderdataraestobeprogramming errors. Thereexisttwoprinipalapproahestosupportaprogram\u00admerinreognizingandhandlingdataraes: \n1.Designtheprogramminglanguagesuhthatdataraes arebydefnitionimpossible(prevention). 2.Aeptthatthelanguageallowsdataraesbutensure \nthatdataraesarenotiedatruntime(detetion). oodargumentsanbeadvanedinfavorofbothap\u00adproahes.However,mostoftoday'sprogramminglan\u00adguages,inludingJava,donotadheretoeitherapproah. \nVariousresearhershaveproposedpreventionsolelybased onompile-timeanalysisandhavedevelopedextensionsor \nannotationstoallowompile-timedetetionofpossibledata raes,e.g.,[2,11,8,30],butitwillbeawhilebefore oneoftheseimprovementsbeomespratialandiswidely \nadopted.Inthemeantime,thereexistolletionsof\"best pratie\"reommendationsonstruturingamulti-threaded programtoavoiddataraes,butsuhreommendations \narehardlyenforeablebyaompiler.Thereforeanother researhthrustfousesondetetionofraeswithtoolsthat determineatruntimethepresene(orabsene)ofdataraes \n(e.g.,[26,25,19]). However,themoregeneralanvironmentsuharuntime enhekerattemptstohandle(e.g.,bydealingwithanymulti\u00adthreadedprogramthatisadmittedbytheoperatingsys\u00adtem),themoreoverhead(andthelessinformation)must \nbeexpeted.Wethereforerestritourattentiontomulti\u00adthreadedJavaprograms,sinethislanguagestandardizes theformatofmulti-threading.(Anotherreasonisthatthere \nexistportablemulti-threadedprogramsthatweanuse.) Thisrestritionalsoallowsustoonsidertheompletetool hainfromtheompilertotheexeutionenvironmentfor \nopportunitiestoengageindataraedetetion. Anyon-the-fyapproahtodataraedetetionmustbal\u00adanetwopositions:tobepratial,theruntimeoverhead \nmustbeontrolled;yetiffewerinformationisproessedor reordedatruntime,aurayislost(andeitherrealdata raesareoverlookedorfalseraesarereported).Compile\u00adtimeapproaheshavealmostnotimeonstraintsbutmay \nstillprovideonlyanapproximation.Thereforeweinvesti\u00adgateaombinationofompile-timeandruntimemethods: weuseompile-timeanalysistoidentifydatathatannotbe \ninvolvedinadatarae(beausethedataarethread-loal) andthenuseruntimemehanismstodisambiguatetheases thatstatiinformationannotresolve.Thenovelaspet \nofthispaperistheustom-tailoredinterationofompiler andruntimeenvironment.Thesolutionproposedherehas beenimplementedintheontextofan\"ahead-of-time\"Java \nompiler,andwepresentempirialdatathatdemonstrate itsefetiveness. 2. ON-THE-FLY RACE DETECTION Aprinipalproblemofknownon\u00adthe\u00adfydataraedetetion \nmehanismsisthattheyinuronsiderableruntimeover\u00adheadinspaeandtime.Previousworkreportsaslowdown byafatorof2-80oftheoriginalprogram[20,23,26,25]. \nThehighruntimeoverheadisonereasonwhyon-the-fyrae detetorshavenotenjoyedwidespreaduse.Manyprevious dataraedetetors,however,havebeenoverlyambitious \nandhavenotrestritedthelassofparallelprogramsthat theyanhandle.Sineourobjetiveistoprovidedatarae detetionforJavaprograms,weanoptimizetheruntime \noverheadbytakingadvantageoftherestritedontext.We startwithadisussionofthetwomajortehniquesforon\u00adthe-fyraedetetionandthenillustratehowpreviousap-proaheswasteylesformanypratialappliations.This \nobservationisthestartingpointofourintegratedapproah toraedetetion(Setion3). 2.1 Verifying access ordering \nThefrstapproahtoon-the-fydataraedetetionisdi\u00adretlybasedonthedefnitionofdataraesasunordereda\u00adessestoavariablesuhthatatleastoneaessisawrite. \nThemainideathenistoreordinformationabouttheor\u00adderingoftheurrentexeution.Ahekerbasedonthis approahmustreordonlyinformationthatisneessaryto \ndeterminepossiblesimultaneityofaessestovariables.Es\u00adsentialmeansinthisontextthattheremustbeenough informationtoallowthehekertodistinguishanaessor\u00adderingthatisintroduedbyashedulerdeisionfroman \norderingthatisenforedbyprogramsemantis. Thisdetetionmehanismisgeneralandanbeappliedto diferentformsofsynhronizationinparallelprograms,e.g., \nfork-joinandalsolok-basedsynhronization.Theordering ofaessesmustbehekedrelativetoprogramsynhro\u00adnization,i.e.,basedonamodeloflogialtime.However, \ntheneedtodealwithlogialtimeompliatestheimple\u00admentationandintroduesostlydatastruturestotrak aessesandtheapproximativeprogramordering.Forlong\u00adrunningappliations,theamountofaumulatedinforma\u00adtionbeomesaritialissue.Variousoptimizationshave \nbeenproposedtomitigatethememorydemands[19].An\u00adothersignifantproblemistheexeutionostperaess hekthatverifesiftheurrentandallpreviousaesses \nareordered.Mellor-Crummeyreduedtheostofindividual aessheksthroughawell-designednumberingoflogial time[19].Then,inlaterwork,Mellor-Crummeyemployed \nstatianalysisfortheFortransoureprogramsandthereby preventedtheoverheadinthefrstplaebyreduingthe numberofaessesthatmustbeinstrumented[20]. \n 2.2 Verifying a locking discipline Theseondprinipalapproahtoon-the-fydetetionab\u00adstratsfromtheissuesoflogialtimeandorderingandis \nbasedontheobservationthatprogramsobeyingaloking disiplinearefreefromdataraes.Alokingdisipline ensuresthataessestoshareddataareonlydoneinside \nritialsetions.Critialsetionsareimplementedthrough loks;thereforethelokingdisiplinedemandsthataesses toasharedvariablemustbeonsistentlyprotetedbyone \nommonlok.Asimplealgorithmisabletoverifythisprop\u00adertyforeahaesstoasharedvariable. Thisapproah,however,isrestritedtoparallelprograms \nwithlok-basedsynhronization.Ithasbeeninitiallypro\u00adposedandusedby[6,9]andwasthefoundationforsev\u00aderalimplementationsofon-the-fy[9,26]aswellasstati \nraehekers[30,8,11].Toverifythelokingdisipline, onemustdeterminetheprotetionrelationamongloksand variables.Aonservativeapproximationofthisrelationan \nbeinferredfromloksetsthatareassoiatedwithshared variables.Aloksetkeepstrakofallommonloksheld duringaesses,andthissetmustnotbeomeempty.For \nadetaileddesriptionsee,e.g.,Savageetal.[26].Thisap\u00adproahisinherentlylessostlythantheapproahesbased onaessordering,asnoinformationonprogramordering \nmustbemaintained,andtheodeforaessheksislim\u00aditedtosimpleoperationsontypiallysmallloksets.Sine thespaedemandofapproahesbasedonaessorderingis \nasignifantproblem,wefousourattentionontehniques thatemployloksets. 2.3 Accuracy Theruntimeoverheadisnottheonlyissueofonernfor \non-the-fydetetion.Anotheronernisthelossofauray duetotheapproximativenatureofthedetetion.Lossof aurayisausedbydataraesthatarepossibleaording \ntotheprogram'ssemantisbutarenotreognizedbythe detetionalgorithm,andbyraesthatarereportedyetare notpossibleinanyprogramexeution.However,auray \nisaninherentproblemforanykindofraedetetion. WeusetheterminologyofNetzerandMiller[22]anduse thetermfeasibleraesforalldataraesthatarepossible \naordingtoprogramsemantis(allinputs,allshedules). Anidealraedetetionshemewoulddetermineallandonly feasibleraesatone.Thepreiseorderingrelationofa\u00adesses,asdefnedbythesemantisofaparallelprogram, \nanhoweveringeneralnotbedetermined[21,14].Thus, pratialraedetetionmehanismsmustrelyonanapprox\u00adimationandthusare(1)unabletodetermineallfeasibledata \nraesand(2)alsoreportfalseraesthatareartifatsofthe approximationanddonotrepresenttrueaessonfits. lassInputRaeextendsThread{ \nstatiintraeSubjet; statiintinput; publistatirain(Stringargs[]){ input=Syster urrentTireMillis(); newInputRae() \nstart(); newInputRae() start(); } publivoidintrun(){ if(input%2==0) raeSubjet= ; IIinputdependentdatarae \n} } Figure1:Input-dependentdatarae. lassSheduleRaeextendsThread{ statiintraeSubjet; statiinti; publistatirain(Stringargs[]){ \n newSheduleRae(1) start(); newSheduleRae(2) start(); } intid; SheduleRae(intid){this id=id;} publivoidrun(){ \ninttrp; synhronized(getClass()){ trp=++i; } if(trp==id) raeSubjet= ; IIshedulingdependentdatarae } \n} Figure2:Sheduling-dependentdatarae. 2.3.1 Feasible data races Anon-the-fyverifationofthelokingdisiplineisalways \nbasedonaspeifprogramexeution,andthusheking isgenerallylimitedtothoseontrolfowsthatareallowed bythespeifinput.Figure1illustratesaprogramwith \naraethatdependsontheprograminput.Itisthusde\u00adsirabletohaveatleastaraedetetiontehniquethatan safelydeterminethefeasibilityofaessanomaliesonaer\u00adtaininputwithasinglerun(i.e.,hastheSISESingleInput, \nSingleExeutionproperty).Dinning[9]mentionsthatthe SISEpropertyanbeviolatedforprogramsthathaveinter\u00adnalnon\u00addeterminism[10].Forsuhprograms,theupdate \nsequeneofvariablesdependsonthesheduler.Theatual situationisunfortunatelyworsesuhthattheSISEprop\u00adertyisnotguaranteedevenforprogramsthatareinternally \ndeterminateliketheonedepitedinFigure2.Thereason thatthedataraeoursinsomerunsandnotinothersis theexisteneofageneralraethatdetermineswhihdata \nisaessed[22]. lassExarple{ privateint[]a1=newint[100]; privatevoidfill(int[]a){ for(inti=0;i<100;++i) \na[i]=i; } voidfillInstane1(){ fill(a1); } voidfillInstane2(){ for(inti=0;i<100;++i)a1[i]=i; } voidfillLoal1(){ \nint[]a2=newint[100]; fill(a2); } voidfillLoal2(){ int[]a2=newint[100]; for(inti=0;i<100;++i)a2[i]=i; \n} } Figure3:Raedetetionindiferentstatianddy\u00adnamiontexts. 2.3.2 False data races Aviolationofthelokingdisiplinemightbereportedal\u00adthoughnoatualraeourred.Suhafalseraeoursif \naessorderingisnotontrolledthoughexpliitsynhroniza\u00adtionbutindiretly,e.g.,bypassingaesstokensbetween threads.Theproduer-queue-onsumersetupisagoodex\u00adampleforaprogrammingidiomthatmaybesubjettore\u00adportingoffalseraes. \n 2.4 Opportunities for new approaches Dataraedetetionisfrequentlyonsideredasageneral, system-levelmehanism,similartolow-levelmemoryman\u00adagement.Theraedetetoratsasintermediarybetween \nablak-boxappliationandthememorysystem.Thede\u00adtetorfousessolelyonmemoryaessandsynhronization events.Anindiationofthisviewisthatmoston-the-fy \nraedetetors(exeptParaSope[19],whihisbasedon Fortransoure-odeinstrumentation)arebasedonbinary instrumentation.Theseimplementationdeisionsmayhave \nbeenmotivatedbye\u00c6ienyonerns.Butthislow-level viewreatesunneessaryproblemsifaesstothesoure odeisanoptionforthedetetor.Considertheprogramin \nFigure3andassumethatmultiplethreadsinvokemethods fillInstane[112]onthesameinstaneoflassExarple. Sinenoneofthemethodsaresynhronizedthereouldbe \ndataraesinvolvingaessestotheintegerarray. Ifthedetetionsystememploysalow-levelview,datarae detetioninursmoreorlessthesameruntimeoverhead \nforallmethods,asallaessestoheap-alloateddataare heked(orderingorlokset).However,someoftheseheks areredundantandothersaredispensableforpratialpur\u00adposes. \nAhekisredundantifittestsaonditionthathasal\u00adreadybeenevaluated,e.g.,atompile-time.Weobservethat someofthedataisthread-loalandthusanbeexempted \nfromheking(stak-data,arraya2infillLoal2).Several statianalysesforJavaprogramshavebeenreportedthat onservativelydetermineifreferenevariablesonlyreferto \nthread-loaldata[3,4,7,33].Cheksforarrayaessin fillLoal2arethusredundant. Ahekisdispensableifittestsaonditionthatprovides \nnonewinformation.Thisobservationisrelatedtodataen\u00adapsulationinobjet-orientedprograms:anaesstoarray a1isonlypossibleindiretlythroughtheinvoationofone \nofthefillInstanemethods.Thisobservationanbeex\u00adploitedtoreplae100arrayaesshekswithonehek foramethodaess.Theheksofthearrayaessesin\u00adsidefillInstane2aredispensablebeausetheinformation \n\"raeonfillInstane2ora1\"arries forallpratial purposes theidentialinformationas\"aessraeona1 forindex099\". \nThus,itispromisingtoonsiderhigh-levellanguagesoure informationandtheaessontextwhendeidinghowand wheretoinstrumentaprogramforon-the-fyheking.This \ninformationprovidesawaytolowertheoverheadofon-the\u00adfyraedetetion. Anotheraspetthatjustifesafreshlookaton-the-fyrae \ndetetionisthatseveralpreviousraedetetorswerede-signedwithsientifappliationsinmind.Butparallel programsarealsoommonandimportantfornetworkor \nserver-basedappliations.Forsuhappliations,themain targetsforraedetetionarenotarrays,butstruturesand objetslinkedthroughreferenes.Java,e.g.,allowsauserto \nlimitaessestoobjetsstruturesatompile-time.Suha struturethenresultsinforeseeableaesspatternsatrun\u00adtime.Lea[16]referstothispropertyasonfnement. \n 2.5 Object-oriented programs Objet-orientedprogramsenapsulaterelateddata,i.e., datathatisreadandmodifedtogether,intoaommon \nabstration,namelytheobjet.Ina(Java-based)objet\u00adorientedworld,itisthusreasonabletodefneobjetsasthe unitofprotetion(orattention) \nnotindividualvariables. Thisgeneralizationoftheprotetionfousissafe,beause allaessestoinstanevariablesmustbedonethroughan \nobjetreferene,andaonfitanbedetetedattheob\u00adjetlevel.Fromtheviewpointofdataraedetetion,suh ageneralizationisonservativebeauseaessesofdifer\u00adentthreadstodiferentinstanevariablesannotbedistin\u00adguished.Ofourse,afalseraewillbereportedinsuha \nase,butifobjetsplayasignifantroleinthedataspae ofaprogram,thistradeofmaybejustifed.(Interestingly, sineJavatreatsmulti-dimensionalarraysasarraysofob\u00adjets,onlyaessesto1-dimensionalarraysaregeneralized.) \nWeusethetermobjetraeinthefollowingtorefertothis onservativeapproximationofadatarae.  3. DETECTION OF \nOBJECT RACES Ourdataraedetetionmehanismisbasedontheverifa\u00adtionofalokingdisipline(Setion2)forobjets.Thelok\u00ad \ningdisiplineisstrengthenedsuhthatallordinaryfelds ofanobjetmustbeonsistentlyprotetedbythesame lok,notonlybyalokastheoriginaldisipline(Setion \n2.2)required.Finalandvolatilefeldsareexemptedfrom thisdisipline.Setion3.1disussesissuesandoptimiza\u00adtionsthatrelatetostatiprogramproperties.Setion3.2 \naddressesruntimeissues.Setion4thendisussesspeif implementationhoiesandlimitations. 3.1 Con.nement Confnementisastatiprogrampropertythatstruturally \nguarantees,basedondataenapsulationprovidedbythe programminglanguage,thatatmostoneativity/threadat atimeanpossiblyaessagivenobjet[16,Ch.2.3].Thus, \nonfnementanbeexploitedatompile-timetoreduethe amountofinstrumentationneededatruntime. First,esapeanalysisisusedtoidentifyreferenevariables \nthatonlyrefertothread\u00adloalobjets.Subsequently,only aessesthroughnon-thread-loalreferenevariablesarein\u00adstrumented. \nSeond,shiftingtheviewpointtotheobjetlevelallowsus toenhanethenotionof\"aess\"andonsider,inaddition toinstanevariables,alsoaessestomethodsasarriers \noftheonfnementproperty.Thus,asaessestoinstane variablesandmethodsthroughthethisreferenearetran\u00adsitivelyprotetedbytheaessingmethod,weansuppress \ntheirinstrumentation. Third,transitiveprotetionanalsobeassumedforobjets thatdonotesapeandareonlyreahablethroughprivate \ninstanevariables.Suhobjetsareobjet\u00adloal,andraes onsuhobjetsanonlyourinombinationwitharae ontheenlosingobjet. \nClassvariablesaretreatedaordingtothesamemodel asinstanevariablesassumingprotetionbytherespetive lassinstane. \n 3.2 Ownership model Adesigngoalforourdetetionsystemistoarryoutex\u00adpensiveloksetoperationsonlyforthoseobjetsthatare \natuallyshared.Thus,atruntime,wekeeptrakofthreads thathaveaessedanobjet.Thisinformationiskeptinan abstratstateassoiatedwitheahobjet,i.e.,theowner\u00adshipstate.Statetransitionsaretriggeredbyobjetaesses. \nInthissetion,wepresenttheownershipmodelanditsop\u00aderationalsemantisasationsoftheraedetetionheker assoiatedwithstatetransitions.Theseationsonstitute \ntheobjetaessprotool.Theatualimplementationof thisprotoolisdesribedinSetion4.2.Thestatesand transitionsoftheownershipmodelforobjetsareshownin \nFigure4.Thismodelisanextensionofthemodelofthe Erasersystem[26].Themodelhasthefollowingstates: Virgin:Initialstateafterobjetalloationandduringthe \nexeutionofonstrutors.Conurrentaessison\u00adsideredanerror. Exlusive:Stateafteronstrutorexeution.Theowner \nremainsthesameasinstatevirgin.Aessbyanon\u00adownerthreadisarequestforownershiptransfer.A\u00adesstoobjetsinthisstateistreatedasiftheyare \nthread-loal,untilknownotherwise. Exlusive2:Stateafterownershiptransfer;theseond owneran,likethefrstowner,aesstheobjetasif \nnoonurrenyispresent.Aessesbyotherthreads, inludingthefrstowner,leadtheobjettoashared state. Sharedread:Theobjetmayexperieneonurrentread \naess.Aessesaretrakedbyupdatingthelokset assoiatedwiththeobjet.Noonfitsour,evenif theloksetbeomesempty. \nSharedmodifed:Theobjetmayexperieneonurrent readandwriteaessesandmustthusbeonsistently protetedbyatleastasinglelok:theloksetassoi\u00adatedwiththeobjetisupdatedwitheveryaess,and \naonfitisreportedifthesetbeomesempty. Confit:Anaessonfithasbeenobservedforthisob\u00adjet;itisnotsubjettofurtheraessheks. \nThemodelspeifallyaountsfortwopropertiesthatwe wouldliketoprovideforJavaobjets.First,thedistin\u00adtionofthestatesvirginandexlusiveallowsustoidentify \nonfitingaessesduringobjetonstrution.Initializa\u00adtionsemantisarepartiularlyritialinthissituation[31, 24].Seond,itisommonthatinitializationanduseof \nobjetsarelogiallyseparated(throughimpliitorexpliit synhronization).Commonprogrammingidiomsthatfall intothissenarioarethehand-ofprotool[16]andthewell\u00adknowntask-queue.Insuhases,theseondownershould \nnotbeburdenedwithaessheksneessaryinashared state.Thus,wedeferthetransitiontosharedthroughan intermediarystateexlusive2.Ourbenhmarkappliations \nshowthatmanyobjetsthatareexposedtoonurreny areatuallyvisitedbyatmosttwothreads,andthesevisits ourinstritsequene(Setion5). \n 3.3 Accuracy Chekingraesatthelevelofobjetsinsteadofindividual variablesentailsthepossibilityofreportingfalseraesas \npointedoutinSetion2.5. Anadditionalsoureofinaurayisintroduedthrough thefatthatthereordingofaessinformationisdelayed, \ni.e.,thereationandupdateofloksetsisnotdoneun\u00adtilasharedstateisreahed.Sinewepostponenotinga sharedstateforanobjet,wemayintrodueadependene \nonthesheduler,beausemaliiousaessesanbehid\u00addenbytheexlusive-exlusive2orexlusive2-sharedtran\u00adsitionsduetounfortunateshedulerdeisions.Thereforea \nmaliiousaessmayremainundeteted.Savageetal.men\u00adtionthisproblemaswellbutexperienesupportstheview thatthisdeision(todelayonsideringdataassharedun\u00adtilprovenneessary)doesmoregoodthanbadforpratial \npurposes[26]. any thread w Figure4:Ownershipmodel. 3.4 Memory model enerally,wewouldliketoharaterizethefeasibilityof \ndataraesasaprogrampropertyindependentlyofthemem\u00adorymodel.Thisishowevernotpossible,sinethesynhro\u00adnizationofprogramontrolfowandthememoryvieware \ntwotangledissues,andthefoundationofourraedete\u00adtionmehanismisbasedonthenotionofprotetedprogram regionsdelimitedbysynhronization,i.e.,ritialsetions. \nDependingonthesynhronizationsemantis(whihispart ofthememorymodel),thesopeofaritialregionould deviateatruntimefromitsstatispeifationinthepro\u00adgramtext.TheurrentdefnitionoftheJavamemorymodel \nallowsforsuhenlargementofaprotetionregion:theend ofasynhronizedblokimposesaone-waymemorybar\u00adrierthatallows,e.g.,anassignmentstatementfollowingthis \nbloktobehoistedinsidethesynhronizedblok[18,Ch.8.8 and8.13]andthuswronglyappearinsidetheritialregion atruntime.Thison-the-fyraedetetionmehanismthus \nimposestworequirementsonthesynhronizationprimitives. First,noatualraesshallremainundeteteddueto thesynhronizationsemantis.Thissituationould \nourifaprotetionregionisextendedatompile-or runtimebeyonditsspeifationintheprogramode.  Seond,wewouldliketoensurethatsynhronization \nsemantisdonotmisleadtheraedetetionmeha\u00adnismsuhthatitreportsadditionalraesthatwere notfeasibleaordingtoprogramsemantis.Forthis \ntohappen,anaesswouldhavetobemovedoutside itsprotetingregionsuhthataviolationofthelok\u00adingdisiplineanbedetetedatruntime. \n Ourompilerandexeutionplatformdonotapplyoptimiza\u00adtionsthatviolatethesetwoonstraints.(AlthoughtheJVM \nspeifationallowsthefrsttransformation,suhatransfor\u00admationisbestavoidedsineitislikelytoausesubtleprob\u00adlems:ifthetransformationhasbeenapplied,aprogram \nmayworkbutmayfailafterreompilationinadiferent environment.Theseondtransformation,ifdonebyaom\u00adpilerwithaorretviewofaprogram'sdataspae,willpass \nbyundeteted.However,shouldtheompiler'sviewofthe dataspaebeinorret,oursystemwillreportaprogram erroralthoughinrealitythereisaompilererror.)Amore \ngeneraldisussionofmemorymodelissuesintheontextof dataraedetetionanbefoundin[1]. Besidesitsinfueneonraedetetionmehanismsandau\u00adray,thememorymodelmustalsobeonsideredforompile\u00adandruntimeoptimizationsthatareenabledthroughthe \nawarenessofonurrenyproperties.Animportanton\u00adernisthereforetheouplingofsynhronizationforontrol fowandthememoryview:evenifprogram-analysis(stati) \norexeution-observation(dynami)suggeststhatnothreads atasunwantedontrol-fowintruders,andthuslokingan beomitted,synhronizationofmemoryviewmaystillbe \nneessary[4,Setion6.2].  4. IMPLEMENTATION 4.1 Overview Theimplementationofanon-the-fyraedetetorrequires \nadditionalruntimedatastruturesthatholdinformation, e.g.,aboutthestatesandloksheldbythreads,theowner\u00adshipstateofobjets,andtheirloksets.Thesedatastru\u00adturesarethemselvessharedamongthreadsandsubjetto \ndataraes.Itisritialforane\u00c6ientimplementationto makeaesstothosemeta-datathread-safewhilenotintro\u00adduingtoomuhoverheadthroughadditionalsynhroniza\u00adtion. \nOurtoolhainoperatesasfollows:Javasoureflesare translatedintoJVMbyteodethatisanalyzedandinstru\u00admentedandthenmappedtox86nativeode.Thedesignof \nthebyteodereaderisadoptedfromBothner[5].Thein\u00adstrumentationforraedetetionusesesapeinformationas obtainedthroughadata-fowanalysisdevelopedbyBogda \nandH6olzle[4].Theesapeanalysisassumesastatien\u00advironmentinwhihalllassesareknownatompile-time. ThebakendisbasedonLCC'spattern-mathingodegen\u00aderatorgenerator[12].TheJavalibraryandpartsofthe \nruntimesysteminludingthegarbageolletorstemfrom NUlibgjversion2.95.1[13]. 4.2 Object access protocol \nTheobjetaessprotoolimplementstheownershipmodel desribedinSetion3.2:itregulatestheaesstoobjets andarraysbydiferentthreads,andmaintainsmeta-data \nstruturesassoiatedwiththeraedetetion.Figure4 defnestheabstratprotoolstatesandtheirtransitions. Therearethreephasesinthelifeyleofanobjetwhih \nhaveafundamentalimpatontheationsandperformane ofobjetaess: Firstowner:Immediatelypriortoonstrutorinvoation, \ntheownerthreadinitializestheobjetheaderwithits thread-id(frst).Threadsaessingthisobjetom\u00adparetheirownthread-id,withtheidintheobjet \nheader.Equalitygrantsimmediateaess,inequality ativatesthefollowingaessprotool:(1)Iftheowner threadhasterminated,theaessingthreadmayin\u00adherittheobjet,i.e.,itbeomesthefrstownerand \nanimmediatelyproeedwiththeexeution.(2)Ifthe ownerthreadisative,theaessingthreadsendsan asynhronousnotifationforownershiptransferand \nbloks.Theownerpollsforsuhnotifationsand eventuallyreleasesownershiptotheaessingthread thatnowbeomestheseondowner.Thisideais \ntakenfromthehandlingofasynhronousaheo\u00adherenemessagesinShasta[27].Pollingisdoneat methodreturn.(3)Iftheownerisbloked(e.g.,due \ntoamonitorenter,join,sleep,orwait),theaess\u00adingthreadstealstheobjetandbeomestheseond owner.Wheneveranobjetisstolen,wemakesure \nthatnothreadtransitsfromblokedtoative. Forases(2)and(3),werequirethatthefrstowner hasnoativemethodinvoationsontheobjet.This \nonditionisneessarybeausetheownerlosesthepro\u00adtetionontextassumedforaessesthroughthisref\u00aderenes.Ifthereareativestakframes,(2)and(3) \nreportanobjetrae;thenthetargetobjetisad\u00ad l vanedtostateonfitandhasnoowner. Seondowner:Likephasefrstowner,exeptthatinases \n(2)and(3),ownershipisrevokedaltogethersuhthat theaessedobjethasfromthenonnoowner. Noowner:Thefrstaessinthesharedstatedetermines \ntheinitialloksetassoiatedwithanobjet.Every subsequentaessverifesthelokingdisiplinethough loksetrefnement,i.e.,intersetionoftheloksheld \nbytheaessingthreadwiththeloksetattahedto theaessedobjet.Araeisreportedifthelokset beomesemptyandtherewasatleastonewritesine \ntheobjetisshared.Subsequently,atransitiontostate onfitavoidsfurtherloksetoperations. Thisprotoolhandlesaessto(array)feldsandmethods, \nandourimplementationonservativelytreatsmethodaess likewrites.Monitoraessisonsideredindependentlyfrom \ntheownershipstateoftheaommodatingobjet.Fromthe viewpointofraedetetion,lokvariablesarethensimilarto volatilessuhthatlokaesstoanobjetthatisurrently \nvisitedbyanotherthreadisnotonsideredasanobjetrae. Forsynhronizedmethods,frstthelok,andthentheobjet aessishandled. \nTheownershipmodelhasthefollowingonsequenesforthe implementationoftheaessprotool: Thestatesonstituteamonotonihierarhy,where \ninitialstatesarestrongestwithregardtotheon\u00adstraintstheyimposeonobjetaess.Strongstates (frstandseondowner)grantprivilegestotheowner \nintermsofaessperformane.Weakerstatesenable aessforforeignthreads.Fortypialappliations, fewobjetsatuallygetintoaweakstate(Setion5). \nl Thistransitionisanimplementationissueandisnotshown intheoneptualmodelofFigure4. Ifforeignthreadsaessoutdatedownershipinforma\u00adtion(e.g.,duetoaweakmemorymodel),theiraess \nbehaviorisstritlymoreonservative,i.e.,theyrequest atransitiontoastatethatisalreadyreahed.Owner threadshowever,mustneverexeutetheaesspro\u00adloguebasedonoutdatedownershipinformation.Inthe \nimplementation,weensurethisonditionbyrequir\u00adingthatownersthemselvestransitobjetstoweaker states.Ownersthatlostanobjetthroughstealing \nmustsynhronizetheirmemoryviewafterunbloking.  Conurrentaessanbesafelyreognizedbytheob\u00adjetaessprotool.Thisfatleadstoanawarenessof \nthreadsonthesharingofthedatatheyaessandmay provideanopportunitytoexpliitlyestablishspeif oherenepropertiesforthememoryviewofindividual \nthreads.  Theadditionalsynhronizationintroduedthroughtheob\u00adjetaessprotoolishowevernotwithoutproblems: \n First,starvationisavoidedthroughstealingobjets; thisationisaneessityoftheimplementation.  Seond,delayinganobjetaessduetotheaess \nprotoolmustnotinterferewithexpliitsynhroniza\u00adtionintheprogramsuhthatyliwaitonditions our.Thissituationisavoidedbyhandlingallstate \ntransitionrequestsbeforeblokingonexpliitprogram synhronization.Ifathreadisbloked,itsobjetsmay bestolenbyotherthreads.Thus,blokedthreadsan\u00adnotlokoutotherthreadsintheobjetaessproto\u00adol. \n Ownershiptransferinursanoverheadofonethread\u00adswith.  Theobjetaessprotoolisnotappropriateinthepres\u00adeneofreal-timerequirementsbeauseaessestovariables, \nmethods,orarraysthatarenotexpliitlyexemptedfromthe objetaessprotool(e.g.,throughavolatilemodifer) mayblok. \n 4.3 Code instrumentation Theodegeneratorinsertsinlineodeatvariableand methodaesssitesandwithinmethoddefnitionstobranh \ntoroutinesimplementingtheobjetaessprotool.The odesequenesaredesignedsuhthatthemostfrequent asesarehandledmoste\u00c6ientlyanddonotrequireali\u00adbraryall.Toimplementthisinstrumentation,weenhaned \nthex86ode-generatorandspeifedodetemplatesorre\u00adspondingtoinlineode.Instrumentationofanaessto anon-thisandnonthread-/objet-loalobjetrequires14 \ninstrutions(3areexeutedinaseexlusive,7inaseon\u00adfit).Pollingofaessrequestsatmethodexitosts9in\u00adstrutions(4areexeutedifnomessagemustbehandled). \nPassingthethread-idthrougharegisterbetweenmethods requires2and6instrutionsfortheallerandallee,re\u00adspetively;thisoverheadouldbesignifantlyreduedif \nthethread-idweremadeavailablebythethreadingsubsys\u00adteminaglobalregister. exlusive shared onfit lassvarr/w \n1.4/1.2 27.5/38.4 2.0/1.6 instanevarr/w 1.2/1.2 23.1/28.1 1.5/1.4 lassmethod 1.2 4.6 1.2 inst.methodstat/dyn \n2.4/2.2 12.5/11.3 2.4/2.2 array(nob)r/w 1.2/1.0 12.2/17.9 1.4/1.1 array(b)r/w 1.2/1.2 10.0/16.8 1.3/1.3 \nmonitor(enter+exit) 4.6 4.6 4.6 Table1:Costofaessesthatareinstrumented forraedetetionrelativetothebaselineompiler \n(r:read,w:write).Theolumnsdistinguishtheown\u00adershipstateoftheaessedobjet. Inadditiontotheinsertionofinlineode,wealloate4 \nbytesintheheaderofeahobjetthatareusedtotrak ownershipstateandownerthread.Loksetsarealloated lazilytogetherwiththemonitorlok. \n 4.4 Micro-benchmarks Weusemiro-benhmarkstodeterminetheexeutionover-headoftheinstrumentation.Thebenhmarkexerisesdif\u00adferentaessesinsidealoopof107iterations.Exeution \nhasbeendoneonaPentiumIII/933with256MBmain memory.Table1liststheostofaessthroughtheobjet aessprotool.Thenumbersrepresenttherelativeexeu\u00adtiontime,i.e.,aessesthatarenotinstrumentedforrae \ndetetionorrespondto1.0.Wereportdatadependenton theownershipstateoftheaessedobjet.Foraessesto lassandinstanevariablesthatareinanexlusivestate, \ntheadditionalostofthestatehekintheobjetheaderis largelyhiddenbytheproessorahe(theheaderfeldand theaessedvariableareinthesameaheline).Theahe \nefetismostevidentfortheperformaneofarrayaesses: therepeatedraehek(loadandompareheaderofthear\u00adray)isalwaysservedfromtheahe,whereaslinearaessto \nindividualpositionsofa4MBarraydoesnothittheahe (nodataprefeth).Writeaessesbeneftfrombufering [15].Formethodaesses,mostoftheoverheadstemsfrom \ntheinstrumentationinsidethemethoddefnition(thathad otherwiseanemptybodyinthismiro-benhmark).The dataforlassmethodsinludeahekforlassinitializa\u00adtionwhihismandatoryforJava'slassloadingsemantis. \nForinstanemethods,wedistinguishinvoationsthatare resolvedstatiallyandthroughdynamidispath;asthe ostofthelatterisgenerallyhigher,therelativeoverhead \noftheraehekinstrumentationislower. Aesstoexlusiveandonfitobjetsissolelyhandled byinlineodesandthussignifantlyfasterthanaess \ntosharedobjets.Theoverheadforsharedobjetsstems mainlyfromtheimplementationofloksets,whiharebased ontheSTL[28]setdatatype.Theoverheadofmoni\u00adtoraessstemsfrommaintainingalok-nest-ounter,and \nadding/removingthetargetlokfromthesetofloksur\u00adrentlyheldbythethread.Additionalostsanourbe\u00adauseathreadmustensurethatallpendingrequestsfor \nownershiptransferareproessedbeforeitpossiblybloks (deadlokavoidane).   5. EXPERIENCE Forallbenhmarksandinstrumentationvariants,wedonot \nuseoptimizationinourompilertolarifytheefetofthe instrumentation.TheappliationbutnottheJavalassli\u00adbrariesareinstrumented.Thissetupanbeaproblemfor \ntheraehekerifaessesfromlibrarymethodsarein\u00advolvedinraes;suhraesareoverlooked.Ourexperiene withthebenhmarkappliationsathandandthedeteted \nobjetraes(Setion5.3)demonstrate,however,thatthe exlusionoflibraryproeduresisnotaonernfortheeval\u00aduationhere. \nTheefetofthepartialinstrumentationontheexeution performanereportedinSetion5.4ismarginalbeausethe speifbenhmarksathandspendmostoftheirexeution \nintheappliationode.Foromparison,wereportalso performanenumbersforgj,theNUJavaompiler[13], version2.95.2,withdiferentlevelsofoptimization(O0and \nO2). 5.1 Benchmarks description Theobjet-raehekerhasbeenappliedandevaluatedfor fveappliationkernels,'elevator','hed','mtrt','sor',and \n'tsp'. 'elevator'isareal-timedisreteeventsimulator.Theappli\u00adationonsistsof500LOCandisusedasanexampleina \nourseononurrentprogramming.Elevatorsaremodeled asindividualthreadsthatpolldiretivesfromaentralon\u00adtrolinstane.Communiationthroughtheontrolboardis \nsynhronizedthroughloks.Theonfgurationusedforthis evaluationsimulates4elevators. HEDCisawarehouseforsientifastro-physisdatadevel\u00adopedatETH[29].Thebenhmark'hed'representsanap\u00adpliationkernelthatimplementsameta-rawlerforsearh\u00adingmultipleInternetarhivesinparallel.Inthebenhmark \nonfguration,4prinipalthreadsissuerandomqueriesto 2arhiveseah.Theindividualqueriesarehandledby reusableworkerthreads.Resultaggregationisfollowedby \nashortrandomsleepintervalof0-200ms;thisensuresthat prinipalthreadsworkoutofsyn.Theappliationemploys alibraryforonurrentprogrammingbyDougLea[17],in \npartiularthePooled-Exeutorpattern.Theworkloadand memoryaesspatternofthisappliationkernelaretypial forInternetserverappliationsandsimilartoappliations \nbasedonalternativemehanismssuhasJavaServlets. 'mtrt'ismulti-threadraytraeappliationfromtheJVM98 benhmark[32].Theonfgurationusedexeutedwith2 \nthreads.Synhronizationissolelyappliedduringinitializa\u00adtionofthethreadsandtheiropyofthe\"world\". 'sor'(SuessiveOver-Relaxationovera2Dgrid),and'tsp' \n(TravelingSalesmanProblem)aredata-andtask-parallel appliationswithdataaesspatternsofsientifodes;in 'sor',synhronizationamongthreadsisbasedonabarrier \nratherthanonloks.'sor'maythusbeatypialforOO\u00adbasedmulti-threadedserverappliationsthatarethetarget ofourheker;itneverthelessdemonstratestheefetive\u00adnessandlowoverheadofourapproahforappliationswith \nextensivedatasharing. 5.2 Instrumentation Table2listsruntimestatistisforobjetandarrayaesses. Aessesarelassifedaordingtodelarationpropertiesof \ntheaessedvariableandpropertiesofthereferenevari-ablethroughwhihtheaessisperformed.Thedistintion isdonetoquantifythenumberofaessesthatareinstru\u00admented. \nFirst,aesstofnalandvolatilevariablesisreportedsepa\u00adrately.Theremainingaessesareategorizedinto'stati' \n(lassvariablesandmethods),'this','thread-loal','objet\u00adloal',and'other'.Aessesofategories'stati'and'this' \nareimmediatelyobtainedfromtheprogram.'thread-loal' and'objet-loal'aessesareonservativelylassifeda\u00adordingtoesapeandaliasingpropertiesoftheaesstarget. \nThegroup'thread-loal'inludestargetsthatdonotesape anddonotaliaswithmethodparametersorareturnvalue. 'objet-loal'inludesaessesthroughprivatefeldsthatdo \nnotesapeinanymethodofthedefninglass.Esapeinfor\u00admationisomputedthroughaontext-andfow-insensitive wholeprogramanalysisaordingto[4].Aessesthatdo \nnotfallintoanyaforementionedategorybelongto'other'. Forarrayaessesofategory'other',weadditionallydis\u00adtinguishifarrayelementshaveprimitiveorreferenetype. \nEveryaesssiteisreportedone,namelyinthefrstate\u00adgorymathingfromthetopofthetable. Aessesthatfallintoategory'stati','other',or'other \nprimtype'havebeeninstrumented;thesumofthesenum\u00adbersisreportedas'totalinstrumented'.  5.3 Detection accuracy \nFortheevaluationofthedetetionauray,weinvestigate over-andunder-reportingrelativetoatualdataraesthat ourredduringanexeution.Wedonotaountforina\u00adurayduetoinput-andsheduling-dependenes(Setion \n2.3.1)thatmayleadtoraesthatarepossibleaording toprogramsemantisbutnotmanifestedinanexeution history. \n 5.3.1 Under-reporting Setion3.3disussesthepossibilityofunder-reporting,i.e., apossiblesenariothatletsthehekermissanobjetrae \nthatatuallyourredatruntime.Suhasituationisdue toaspeifsheduleofaesses(frstallaessesfromone thread,thenallaessesoftheotherthread)thatleadto \nanownershiptransferinsteadofaraereportinourmodel. Similarly,ourmodeldoesnotreportobjetraesiftheother \ninvolvedthreadhasalreadyterminated. Table3summarizesthefrequeneofspeifinidentsduring objetaess;row'inherit'reportsthenumberofaessesto \nobjetsownedbythreadsthatterminated.Fortheexample appliations,allasesofinheritresultedinbenignraes, suhthateithertheaessorderiswell-determined(e.g., \naessafterjoin),ortheorderisirrelevant(e.g.,method aesstoimmutableobjets).Repeatedappliationruns reproduedthesameraereports,althoughtheorderofrae \nreportsvariedsometimesduetosheduling. variablereferene elevator hed mtrt sor tsp feldaesses fnal 0.1 \n0.6 -- -volatile - 0.1 -- -ordinarystati - 2.2 -- 29.8 ordinarythis 34.7 32.9 47.8 37.5 39.2 ordinarythread-loal \n- --- -ordinaryobjet-loal - --- -ordinaryother 9.3 8.5 --- arrayaesses ordinarythread-loal - -1.1 \n- -ordinaryobjet-loal 18.5 -7.3 - -ordinaryotherreftype - 0.1 3.3 31.2 5.6 ordinaryotherprimtype 0.1 \n25.9 -31.2 24.4 methodaesses stati 0.6 3.5 -- -this 18.5 5.4 4.2 - 1.0 thread-loal 0.2 3.1 0.9 - \n-objet-loal 0.1 -0.2 - -other 18.0 17.7 35.2 --   totalinstrumented 28.0 57.8 35.2 31.2 54.2 Table2:Runtimeharateristisofobjetandarrayaesses.Allnumbersarereportedasperentageofthe \noverallnumberofaesses,or'-'ifnegligibleornull. Theonfgurationoftheraehekerusedinthetestsomit\u00adtedheksforaessestoarraysontainingreferenevari\u00adables;thusraesonsuharraysmightbeoverlooked.This \nomissionofhekingisnotaninherentpropertyofthemeh\u00adanism,butratheranimplementationdeisionandoptimiza\u00adtionthathasbeendonewithrespettoJava'sjaggedarray \nimplementation.  5.3.2 Over-reporting Therearetwomajorsouresofover-reporting: First,aviolationofthelokingdisiplinedoesnotneessar\u00adilyimplyanobjetrae.E.g.,inaproduer-onsumerse\u00adnariothreadsareimpliitlysynhronizedthroughtheshared \nbufer('falseraes',Setion2.3.2).Thisinaurayisinher\u00adenttothelokset-approahofdataraedetetion. Seond,detetingraesattheunitofobjetsratherthan \nvariablesanleadtoraesreportsthatarenotdataraes. Suhasenarioours,e.g.,ifdistintmembersofthesame instaneareaessedbydiferentthreads.Thesameap\u00adpliesifthreadsaessdistintregionsofonearrayobjet. \nThisfatorofinaurayisspeiftoourapproahofrae detetion. Thedetetionofanobjet-raeisaruntimeinidentandis reportedinTable3.Category'blok'speifesthenumber \nofownershiptransfersthatbloktheaessingthreada\u00adordingtoase(2)intheprotool(Setion4.2).'lokset' ountsthetotalnumberofloksetoperations.Inategory \n'overlapping'(ases(2)and(3)),aessestothesameob\u00adjetoverlapintime;e.g.,onethreadaessesafeldofan objetonwhihanotherthreadisexeutingamethod.In \ntheategory'emptylokset',anobjetraeisonluded fromaviolationofthelokingdisipline;theonfitinga\u00adessesdonotnotoverlapatruntime.Dependingonthe \nexeutionshedule,ertainraesanbereportedindifer\u00adentategoriesindiferentexeutions.Aessonfitsare elevator \nhed mtrt sor tsp   aessprotool blok 0 78 52 540 lokset 18221 425 5450155282206 inherit 0 60 0 1000 \n0 overlapping 0 44 1 2 2 empty l okset 5 63 2 4 200 Table3:Runtimeinidentsoftheobjetaesspro\u00adtool. reportedoneperobjet. \nForthe'elevator'appliation,aesseswithemptylokset ourforlassmethodsoftheontrolpanel:themethodsdo notkeepreentrantstateandthusanbeindependentlya\u00adessedbytheelevatorthreads;this'objetrae'detetedon \nthelassinstaneimplementingtheontrolpanelishene benign.Inaddition,theinvoationoftheunsynhronized methodsize()inthedebugoutputofthefourelevator \nthreadsausedanobjetraeonthejava util Vetorin\u00adstaneassoiatedwitheahelevator.Theappliationben\u00adeftsfromthe'seondowner'oneptbeausetheelevator \nthreadsinludingtheirprivateauxiliarystruturesareini\u00adtializedbyastartupthread;theelevatorthreadaessesit\u00adselfanditsauxiliarystruturesintheroleofaseondowner. \nSuppressingtheseondowneroneptleadstoreporting8 additionalobjetraesthatarenotatualraesbutfallinto theategoryofobjet/threadinitializationwhereaessor\u00adderiswell-determinedevenwithoutsynhronization. \nThemajorityofemptyloksetsreportedfor'hed'stemfrom aessestostateless/immutableobjets.Theseletionand ombinationofqueryresultsmakesextensiveuseofobjets \nfordate-,time-,andnumberformatting;theseandotherfa\u00adtoryinstanesaretypiallynotalteredaftertheirinitializa\u00adtionandthusannotbesubjetofharmfulraes.Another \nommonpatternthatanleadtobenignobjetraesisan\u00adellation[16].Canellationisusedtoasynhronouslynotify anativity(representedbytheobjetthatissubjetofthe \nrae)throughamethodallorfeldupdate.Almosthalfof theoverlappingobjetaessesarebenignandaredueto anellation.Thereminderresultedfromaesstoobjets \nthatombinedmethodsanddatafordiferentpurposes:part oftheobjet'sinterfaeisthread-safe/synhronized,another \npartisnot.Noharmfulraeshavebeenpossibleinthea\u00adtualimplementationanduseofthisstruture.Nevertheless, theraehekerhasalledtheattentiontoanunfavorable \ndesignthateasilyallowedorprovokedharmfuldataraesin thepreseneofinheritaneandodereuse. Theraytraer'mtrt'showedseveralbenignobjetraes,e.g., \nonaglobalounterofativethreads(thevariableisreadand writtenbymultiplethreadsandwasapparentlyusedforde\u00adbugging;itishowevernotdelaredvolatile)andanotherone \nontheoutputanvasobjet(notanatualraebeausethe workerthreadsflldiferentregionsofapixelarraymanaged bytheanvas). \nIn'sor',overlappingobjetaessourswhenthreadssyn\u00adhronizeonaBarrierobjetthatisreahablethrougha globalvariableofthelassontainingtherainmethod. \nFourviolationsofthelokingpoliyourwhentheworker threadsaessthesharedmultidimensionalint-arrays. Theseviolationsresultfromdataparallelisminthisapplia\u00adtionsandarenotatualdataraes:theorderofaessesto \nthesamesegmentsofthearraysiswell-determinedthrough barriersynhronization,notthroughexpliitloking.The \n1000asesof'inherit'resultfromafnaliterationofthe mainthreadoverthedatatoomputeaheksum. Thelargenumberofviolationsofthelokingpoliyin'tsp' \nstemsfromdiferentthreadsaessingaolletionofobjets representingthemostpromisingroutesfound.Forsome asestheseraesarebenign,i.e,theymightauseunne\u00adessaryworktobedonebutmaintainorretnessofthere\u00adsult.Someraeshoweverinvolvedupdatesthatouldbe \nlost,leadingtoinorretresults.Thus,thehekeridenti\u00adfedasynhronizationproblemintheimplementationofthis benhmarkthathasledtoafxwitharead-writelok. \nForwell-designedOOprogramsthatrespettheguidelines ofdataenapsulation(e.g.'hed'),alargefrationoffalse \nraereportsouldbeavoidedifthelanguageallowedto expliitlydelaremethodsasthread-safe,thusexempting themfromheking.Inthetests,wehaveexpliitlysup\u00adpressedtheinstrumentationofaessestolibrarymethods \nandlassesthatareommonlyusedasiftheywerethread\u00adsafe.Examplesarejava io PrintStrear println,ora\u00adesstoimmutableobjets,e.g.,oflassjava \nlang String. Chekingforaessestoinstanevariablesanbesuppressed throughfnalandvolatiledelarations. 5.4 \nExecution performance Wereportontheruntimeoverheadduetoraedetetion for'mtrt','sor'and'tsp';'elevator'and'hed'arenotom\u00adputationallybound.Theruntimeoverheadisinfuenedby \n(1)thenumberofaessesthatareinstrumentedand(2) theownershipstateoftheaessedobjet.Table4ate\u00adgorizesruntimeobjetaessesalongdimensionssimilarto \nelevator hed mtrt sor tsp notinstr. feld 34.8 33.6 47.9 37.5 39.2 array 18.5 0.1 11.6 31.2 5.6 method \n19.5 16.1 5.5 - 1.0 own feld0.18.7--0.1 array0.125.7-31.118.8 method0.111.635.0-\u00ad foreign feld9.20.2--\u00adarray-0.1--5.6 \nmethod8.90.1--\u00ad onfit feld-1.8--29.7 array---0.1\u00admethod8.91.9--\u00ad Table4:Exeutionstatistisofobjetaesses.A\u00adessfrequeniesarereportedasperentageofthe \noverallnumberofaesses,or'-'ifnegligibleornull. Table1:aessesareeithernotinstrumented('notinstr.') orinstrumented.Thelatterategoryisfurtherdividedwith \nrespettotheownershiprelationofaessingthreadanda\u00adessedobjet:aessesfallinategory'own'iftheaessing threadreatedtheobjetorhaspreviouslygainedowner\u00adship.Aessesare'foreign'iftheownerandaessingthread \ndonotmath;frsttimeaessofathreadouldleadtoan ownershiptransfer(exlusive-exlusive2),orownershipin\u00adheritane(exlusive-exlusive,exlusive2-exlusive2).If \ntheobjetisshared,aloksetoperationisneessary(Table 3,'lokset').Finally,aessesfallinategory'onfit'ifan \nobjetraehasbeenpreviouslyfoundontheaesstarget. Thelargenumberofnon-instrumentedarrayaessesin'sor' stemsfromJava'sjaggedmulti-dimensionalarrayimplemen\u00adtation:aesstoanarrayelementrequiresoneindiretion \nperarraydimension;inatwo-dimensionalarray,thefrst indiretion,namelyanaesstotherefereneofthearray representingarow,isnotinstrumented. \nTable5liststheoverallnumberofobjets('virgin+exl.') andtheownershipstatesreahedbythose.Eahobjetin thelowerategoriesisalsoinludedinthenumbersforthe \nupperategories.Weobservethatarelativelysmallfration ofobjetsisaessedbymorethantwothreads(ategories exlusive2,shared,andonfit). \nTheownershipmodelrefetsthissharingpatternofobjets inmulti-threadedprograms:'mtrt'barelyadvanesanyob\u00adjetsbeyondtheexlusivestate.The'sor'appliationis \ndiferentandbeneftsfromtheoneptofownershiptrans\u00adfer:themajorityofaessesgotoobjetsinstateexlusive2. Withoutthe'seondowner'onept,nearlyallobjets(ar\u00adraysthatarepartofthemulti-dimensionalarrayontain\u00adingtheappliationdata)wouldtransitfrsttostateshared, \nthentoonfit,beausesynhronizationisbasedonabar\u00adrierandnotonloks.Hene,the'seondowner'onept avoidsalargenumberoffalseraereportsinthissenario. \nTable6showsexeutiontimesfordiferentompilersand ompileronfgurations.Weuse'noRD'(ourompilerwith\u00ad elevator \nhed mtrt sor tsp   virgin+exl. 107 3137 64578301015 15053 exlusive2 37 264 91009 538 shared 29 127 \n36 478 onfit 5 107 36202 Table5:Alloatedobjetsandownershipstates reahed. mtrtsortsp  exeutiontimelsJ \ngj-00 21.2 4.1 17.6 gj-02 15.4 1.7 11.2 noRD 22.3 3.7 8.0 RD 41.1 4.3 18.3 relativeoverheadl%J 84 16 \n129 RDallthread-loal35.7 3.8 8.3 RDallinstr. 48.5 4.8 21.2 RDsingleowner 41.0 4.7 16.1 Table6:Runtimeperformaneofompilerandin\u00adstrumentationvariants. \noutraedetetionandoptimizations)asbasefortheost ofraedetetion.Wehaveexeutedeveryonfguration5 timesandreporttheaverage.Thedatafor'RD'referto \ntheinstrumentationandexeutionofraedetetionasex\u00adplainedinprevioussetions,inludingtheomissionofaess instrumentationfor'this',thread-loal,andobjet-loalref\u00aderenevariables.Theoverheadof'RD'isreportedrelative \nto'noRD'. Thedatafor'RDallthread-loal'and'RDallinstr.'speify theexeutiontimesforvariousamountsofaessinstrumen\u00adtation.For'RDallinstr.',allstatiaessesandaesses \nthroughreferenevariablesareinstrumented.Thedatafor 'RDallthread-loal'omitinstrumentationtoallheap-based \nobjets.Thisnumbergivesalowerboundfortheexeution performaneefetedbyabetteranalysisfordetermining onfnementofobjetswithrespettootherobjetsand \nthreads.Thesetwoartifatonfgurationssolelyserveto demonstratetheefetofinstrumentationomission.Rae detetioniseitherinorretorine\u00c6ientforsuhexeutions. \nWehavealsoexeutedthebenhmarksinaruntimeimple\u00admentationthatskipsthe'seondowner'state(Table6,row 'RDsingleowner').The'seondowner'modelimprovesthe \nperformaneof'sor'moderatlybeausearraysanbea\u00adessedinstateexlusive2insteadofonfit(Table1).For properlysynhronizedappliationsthatarebasedonloks, \nthisefetwouldbemorepronounedifobjetsare,dueto 'seondowner',aessedinstateexlusive2insteadofshared. Theperformaneof'tsp'isdegradedduetoadditionalown\u00adershiptransfers(andhenethread-swithes)ofobjetsthat \naresubjettoonfits. Theexeutiontimesfor'tsp'futuatedduetonon\u00addeterminisminthethread-shedulingandtheorre\u00adspondingredutionoftheutofboundary(for'RD': \nmin.16.1,max.20.3,avg.18.3).Theoverhead(Table6) isduetothefrequentinvoationofloksetoperations,asis evidenedbyTable3.Theseinvoationsaretheresultof \nproperlysynhronizedaessestoshareddata. Theslowdownof'mtrt'is,althoughmostobjetsremain in'exlusive'state(Table5),duetothelargefrationof \nhekedmethodaesses(Table2). Ourgeneralobservationforparallelappliationsisthatthe overheadofrae-detetionisroughlyproportionaltothe \nfrequenyofaesstoatuallysharedobjets. Therelativeoverheadmightbehigherifstandardompiler optimizationsareappliedbeforeinstrumentation.Onmul\u00adtiproessorplatforms,thespeedupofappliationsmaybe \ntamperedthroughraedetetionwhenthreadsaessingfor\u00adeignobjetsarebloked. 5.5 Memory overhead Besidestheruntimeefet,shiftingthegranularitylevelof \nraedetetiontoobjetsalsosignifantlyreduesthemem\u00adoryoverhead:fouradditionalbytesintheobjetheader inreasethetotalamountofmemorybyatmost25%.The \nmemoryneessaryforloksetsisnegligiblefortheevaluated appliations:themaximumnumberofalloatedloksetshas \nbeentypially2-50withapeakof423for'tsp'. 6. CONCLUSIONS Thispaperpresentedapragmatilow-ostapproahtorae \ndetetionforobjet-orientedprograms.Thesystemmakes objetstheunitofinterestandthereforeheksaesson\u00adfitsattheobjetlevel.Inherenttosuhastrategyisthe \nrisktoreportalargenumberoffalseraes.Statiesape analysisallowsustoreduethenumberofobjetsthatmust beheked.However,inpratie,evenmoreheksanbe \nsuppressedbyreognizingthataessestoinstanevariables andmethodsthroughthethisreferenesdonotrequirein\u00adstrumentation.Aninterestingaspetisthattheexeution \nofmanyofthebookkeepinginstrutionsofthehekeris hiddenbytheorganizationoftheplatformproessor. Onereasonwhyane\u00c6ientimplementationofaessheks \nispossibleisthattheompilerinterleavesuserandrun\u00adtime(heker)instrutions.ApureVMouldnotrealize thesebenefts;aJITompilerthatenjoysaesstoesape \ninformationanpursuethesamestrategy.Theotherru\u00adialaspetistheoptimizationoftheownershipmodelfor objets.Programsthatemployanorderlytransitionofob\u00adjetsfromafrstthreadtoaseondthreadpayonlyalow \nprieforaessheks.Ofourse,programswithasingle userthreadalsobeneftfromthisfeature.Onlyaessesto objetsthataretrulysharedpaythefullprieofmaintain\u00adingownershipinformation.However,sinethenumberof \nsuhobjetsseemstobelimitedformanyappliations,the overallruntimeimpatistolerable. Evenappliationsthatannotaeptanyexeutionover\u00adheadanbeneftfromthistoolduringprogramdevelopment \nandtesting.Asourexperienewithafewsampleprogram illustrates,programssometimesexhibitraes.Someraes maybebenign(andtheirreportsouldbesuppressedbya \nprogrammerwithexaterdefnitionsofmemberproperties), butotherraesmayeitherpointtoaprogrammingerror orsuggestanimprovementindatastruturesorpatterns. \nOfourse,noamountoftestinganreplaeontinuousrae detetion. Multi-proessorPCsaretodayommoninmanyenviron\u00adments,anddevelopersneedtoolstoidentifyproblemsin \nmulti-threadedJavaprograms.Theompiler/runtimesys\u00adtemapproahpresentedhereispartiularlywellsuitedfor programswithastruturebasedonobjets.Asobjet\u00adorientedprogramstakeinreasedadvantageofparallelism, \nweexpetthatatsometimedataraedetetionwillbeas routinelyperformedasboundheksforarrayaesses. Acknowledgments \nWethankM.Corti,O.Trahsel,andD.Zoggfortheiron-tributionstotheompilersystem.Wewouldliketoa\u00adknowledgedetailedandvaluableommentsfromJ.-D.Choi \nandA.reenhouse.Wealsowishtothankthereviewersfor theirhelpfulomments. 7. REFERENCES [1]S.Adve,M.Hill,B.Miller,andR.Netzer.Deteting \ndataraesonweakmemorysystems.InPro.ofthe AnnualInt'lSymp.onComputerArhiteture (ISCA'91),pages234 243,May1991. \n[2]D.Baon,R.Strom,andA.Tarafdar. uava:A dialetofJavawithoutdataraes.InPro.ofthe ACMConf.onObjet\u00adOrientedProgramming, \nSystems,Languages,andAppliations (OOPSLA2000),pages382 400,Ot.2000. [3]B.Blanhet.Esapeanalysisforobjet-oriented \nlanguages-AppliationtoJava.InPro.oftheACM Conf.onObjet\u00adOrientedProgramming,Systems, Languages,andAppliations(OOPSLA'99),pages \n20 34,Denver,CO,Nov.1999. [4]J.BogdaandU.H6olzle.Removingunneessary synhronizationinJava.InPro.oftheACM \nConf.onObjet\u00adOrientedProgramming,Systems, Languages,andAppliations(OOPSLA'99),pages 35 46,Nov.1999. \n[5]P.Bothner.Ag-basedJavaimplementation.In Pro.ofIEEECOMPCON97,pages174 178,Feb. 1997. [6]D.Callahan,K.Kennedy,andJ.Subhlok.Analysisof \neventsynhronizationinaparallelprogrammingtool. InPro.SeondACMSIGPLANSymp.onPriniples andPratieofParallelProgramming,pages21 \n30, Mar.1990. [7]J.Choi,M.upta,M.Serrano,V.Sreedhar,and S.Midkif.EsapeanalysisforJava.InPro.ofthe ACMConf.onObjet\u00adOrientedProgramming, \nSystems,Languages,andAppliations(OOPSLA'99), pages1 19.ACMPress,Nov.1999. [8]D.Detlefs,K.Rustan,M.Leino,.Nelson,and \nJ.Saxe.Extendedstatiheking.ResearhReport 159,CompaqSRC,1998. [9]A.DinningandE.Shonberg.Detetingaess \nanomaliesinprogramswithritialsetions.In Pro.of1991ACM/ONRWorkshoponParalleland DistributedDebugging,pages85 \n96,SantaCruz,CA, De.1991. [10]P.EmrathandD.Padua.Automatidetetionof nondeterminayinparallelprograms.InPro.ofthe \nACMWorkshoponParallelandDistributed Debugging,pages89 99,Madison,Wisonsin,Jan. 1989. [11]C.FlanaganandS.Freund.Type-basedraedetetion \nforJava.InPro.oftheACMConf.onProgramming LanguageDesignandImplementation(PLDI2000), pages219 229,June2000. \n[12]C.Fraser,D.Hanson,andT.Proebsting.Engineering asimple,e\u00c6ientodegeneratorgenerator.ACM LettersonProgrammingLanguagesandSystems, \n1(3):213 226,Sept.1992. [13]NUSoftware.gj-TheNUompilerfortheJava programminglanguage.http://g.gnu.org/java,2000. \n[14]D.HelmboldandC.MDowell.Ataxonomyofrae detetionalgorithms.TehnialReport UCSC-CRL-94-35,UniversityofCalifornia,Santa \nCruz,ComputerResearhLaboratory,Sept.1994. [15]IntelCorporation.Intelarhitetureoptimization manual.http://developer.intel.om/design/ \nPentiumIII/manuals/,2001. [16]D.Lea.ConurrentProgramminginJava,Seond Edition.Addison-WesleyPublishingCompany,In., \nReading,Massahusetts,1999. [17]D.Lea.Pakageutil.onurrent. http://g.oswego.edu/dl/lasses/EDU/oswego/s/dl/ \nutil/onurrent/intro.html,2001. [18]T.LindholmandF.Yellin.TheJavaVirtualMahine Speifation,SeondEdition.Addison-Wesley \nPublishingCompany,In.,Reading,Massahusetts, 1999. [19]J.Mellor-Crummey.On-the-fydetetionofdataraes forprogramswithnestedfork-joinparallelism.In \nPro.ofSuperomputerDebuggingWorkshop'91, pages24 33,Nov.1991. [20]J.Mellor-Crummey.Compile-timesupportfore\u00c6ient \ndataraedetetioninshared-memoryparallel programs.InB.P.MillerandC.MDowell,editors, Pro.oftheWorkshoponParallelandDistributed \nDebugging,pages129 139,May1993. [21]R.NetzerandB.Miller.Ontheomplexityofevent orderingforshared-memoryparallelprogram \nexeutions.TehnialReportTR908,Computer SienesDepartment,UniversityofWisonsin, Madison,WI,Jan.1990. [22]R.NetzerandB.Miller.Whatareraeonditions. \nSomeissuesandformalizations.ACMLetterson ProgrammingLanguagesandSystems,1(1):74 88, Mar.1992. [23]D.PerkoviandP.Keleher.Onlinedata-rae \ndetetionviaoherenyguarantees.InPro.ofthe 2ndSymp.onOperatingSystemsDesignand Implementation(OSDI'9.),pages47 \n57,Ot.1996. [24]W.Pugh.FixingtheJavamemorymodel.InPro.of theACMJavaGrandeConferene,pages89 98,June 1999. \n[25]M.RonsseandK.D.Bosshere.Non-intrusive on-the-fydataraedetetionusingexeutionreplay. InPro.ofAADE..G2000,FourthInternational \nWorkshoponAutomatedDebugging,pages148 163, Aug.2000. [26]S.Savage,M.Burrows,.Nelson,P.Sobalvarro,and \nT.Anderson.Eraser:Adynamidataraedetetor formulti-threadedprograms.InPro.oftheACM Symp.onOperatingSystemsPriniples(SOSP'97), \npages27 37,Ot.1997. [27]D.Sales,K. harahorloo,andC.Thekkath.Shasta: Alowoverhead,software-onlyapproahfor \nsupportingfne-grainsharedmemory.InPro.of SeventhIntl.Conf.onArhiteturalSupportfor ProgrammingLanguagesandOperatingSystems \n(ASPLOS'9.),pages174 185,Ot.1996. [28]A.StepanovandM.Lee.TheStandardTemplate Library.Tehnialreport,Hewlett-PakardCompany, \n1994. [29]E.Stolte,C.vonPraun,.Alonso,andT.ross. DesignofadatawarehousefortheHESSIsolar observer.Projetreport,ETHZurih,Departmentof \nComputerSiene,Nov.2000. [30]SunSoft.loklintuser'sguide,1994. [31]TheJavaMemoryModel.Mailinglistandwebpage. \nhttp://www.s.umd.edu/.pugh/java/memoryModel, 2000. [32]TheStandardPerformaneEvaluationCorporation. SPECJVM98Benhmarks. \nhttp://www.spe.org/osg/jvm98,1996. [33]J.WhaleyandM.Rinard.Compositionalpointerand esapeanalysisforJavaprograms.InPro.ofthe \nACMConf.onObjet\u00adOrientedProgramming, Systems,Languages,andAppliations(OOPSLA'99), pages187 206,Nov.1999. \n   \n\t\t\t", "proc_id": "504282", "abstract": "We present an on-the-fly mechanism that detects access conflicts in executions of multi-threaded Java programs. Access conflicts are a conservative approximation of data races. The checker tracks access information at the level of objects (<i>object races</i>) rather than at the level of individual variables. This viewpoint allows the checker to exploit specific properties of object-oriented programs for optimization by restricting dynamic checks to those objects that are identified by escape analysis as potentially shared. The checker has been implemented in collaboration with an \"ahead-of-time\"Java compiler. The combination fo static program analysis (escape-analysis) and inline instrumentation during code generation allows us to reduce the runtime overhead of detecting access conflicts. This overhead amounts to about 16-129% in time and less than 25% in space for typical benchmark applications and compares favorably to previously published on-the-fly mechanism that incurred an overhead of about a factor of 2-80 in time and up to a factor of 2 in space.", "authors": [{"name": "Christoph von Praun", "author_profile_id": "81325490306", "affiliation": "Laboratory for Software Technology, Department of Computer Scinece, ETH Z&#252;rich, 8092 Z&#252;rich, Switzerland", "person_id": "PP40026858", "email_address": "", "orcid_id": ""}, {"name": "Thomas R. Gross", "author_profile_id": "81332502168", "affiliation": "Laboratory for Software Technology, Department of Computer Scinece, ETH Z&#252;rich, 8092 Z&#252;rich, Switzerland", "person_id": "PP43125826", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/504282.504288", "year": "2001", "article_id": "504288", "conference": "OOPSLA", "title": "Object race detection", "url": "http://dl.acm.org/citation.cfm?id=504288"}