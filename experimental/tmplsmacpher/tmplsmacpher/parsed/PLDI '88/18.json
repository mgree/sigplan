{"article_publication_date": "06-01-1988", "fulltext": "\n\t\t\t", "proc_id": "53990", "abstract": "<p>Processors for programming languages and other formal languages typically use a concrete syntax to describe the user's view of a program and an abstract syntax to represent language structures internally. Grammatical abstraction is defined as a relationship between two context-free grammars. It formalizes the notion of one syntax being &#8220;more abstract&#8221; than another. Two variants of abstraction are presented. Weak grammatical abstraction supports (i) the construction during LR parsing of an internal representation that is closely related to the abstract syntax and (ii) incremental LR parsing using that internal representation as its base. Strong grammatical abstraction tightens the correspondence so that top-down construction of incrementally-parsable internal representations is possible. These results arise from an investigation into language-based editing systems, but apply to any program that transforms a linguistic object from a representation in its concrete syntax to a representation in its abstract syntax or vice versa.</p>", "authors": [{"name": "R. A. Ballance", "author_profile_id": "81100461571", "affiliation": "Univ. of California, Berkeley, CA", "person_id": "P230481", "email_address": "", "orcid_id": ""}, {"name": "J. Butcher", "author_profile_id": "81100497489", "affiliation": "Univ. of California, Berkeley, CA", "person_id": "PP39069931", "email_address": "", "orcid_id": ""}, {"name": "S. L. Graham", "author_profile_id": "81452606376", "affiliation": "Univ. of California, Berkeley, CA", "person_id": "PP40035494", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/53990.54009", "year": "1988", "article_id": "54009", "conference": "PLDI", "title": "Grammatical abstraction and incremental syntax analysis in a language-based editor", "url": "http://dl.acm.org/citation.cfm?id=54009"}