{"article_publication_date": "06-01-1988", "fulltext": "\n\t\t\t", "proc_id": "53990", "abstract": "<p>Inter-procedural register allocation can minimize the register usage penalty at procedure calls by reducing the saving and restoring of registers at procedure boundaries. A one-pass inter-procedural register allocation scheme based on processing the procedures in a depth-first traversal of the call graph is presented. This scheme can be overlaid on top of intra-procedural register allocation via a simple extension to the priority-based coloring algorithm. Using two different usage conventions for the registers, the scheme can distribute register saves/restores throughout the call graph even in the presence of recursion, indirect calls or separate compilation. A natural and efficient way to pass parameters emerges from this scheme. A separate technique uses data flow analysis to optimize the placement of the save/restore code for registers within individual procedures. The techniques described have been implemented in a production compiler suite. Measurements of the effects of these techniques on a set of practical programs are presented and the results analysed.</p>", "authors": [{"name": "F. C. Chow", "author_profile_id": "81100327963", "affiliation": "MIPS Computer Systems, Inc., Sunnyvale, CA", "person_id": "P80987", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/53990.53999", "year": "1988", "article_id": "53999", "conference": "PLDI", "title": "Minimizing register usage penalty at procedure calls", "url": "http://dl.acm.org/citation.cfm?id=53999"}