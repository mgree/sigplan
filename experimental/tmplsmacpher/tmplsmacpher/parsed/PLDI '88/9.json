{"article_publication_date": "06-01-1988", "fulltext": "\n\t\t\t", "proc_id": "53990", "abstract": "<p>Programming-language compilers generate code targeted to machines with fixed architectures, either parallel or serial. Compiler techniques can also be used to generate the hardware on which these programming languages are executed. In this paper we demonstrate that many compilation techniques developed for programming languages are applicable to compilation of register-transfer hardware designs. Our approach uses a typical syntax-directed translation &#8594; global optimization &#8594; local optimization &#8594; code generation &#8594; peephole optimization method. In this paper we will describe ways in which we have both followed and diverged from traditional compiler approaches to these problems and compare our approach to other compiler oriented approaches to hardware compilation.</p>", "authors": [{"name": "K. Keutzer", "author_profile_id": "81100164705", "affiliation": "AT&T Bell Laboratories, Murray Hill, NJ", "person_id": "PP39074233", "email_address": "", "orcid_id": ""}, {"name": "W. Wolf", "author_profile_id": "81332535941", "affiliation": "AT&T Bell Laboratories, Murray Hill, NJ", "person_id": "PP39085498", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/53990.54000", "year": "1988", "article_id": "54000", "conference": "PLDI", "title": "Anatomy of a hardware compiler", "url": "http://dl.acm.org/citation.cfm?id=54000"}