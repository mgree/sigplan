{"article_publication_date": "01-01-1985", "fulltext": "\n\t\t\t", "proc_id": "318593", "abstract": "<p>We discuss the problem of efficiently implementing aggregates (contiguous data structures) such as arrays in functional programming systems. Simple changes to an aggregate conceptually involve making a new copy of the aggregate differing only in the changed component, but such copying can be expensive. We present both static and dynamic techniques for avoiding this copying, and argue that they allow one to program functionally using aggregates, without loss of efficiency over conventional programs.<supscrpt>1</supscrpt></p>", "authors": [{"name": "Paul Hudak", "author_profile_id": "81100539650", "affiliation": "Yale University, Department of Computer Science, Box 2158 Yale Station, New Haven, CT", "person_id": "PP40028396", "email_address": "", "orcid_id": ""}, {"name": "Adrienne Bloss", "author_profile_id": "81100618419", "affiliation": "Yale University, Department of Computer Science, Box 2158 Yale Station, New Haven, CT", "person_id": "PP39051026", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/318593.318660", "year": "1985", "article_id": "318660", "conference": "POPL", "title": "The aggregate update problem in functional programming systems", "url": "http://dl.acm.org/citation.cfm?id=318660"}