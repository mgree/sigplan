{"article_publication_date": "01-01-1985", "fulltext": "\n\t\t\t", "proc_id": "318593", "abstract": "<p>We consider the problem of generating sequential code for programs written in a language which contains a Multiple GOTO operator, predicates and statements. This problem arises when compiling a parallel intermediate form (such as the PDG [3,4]) to run on a sequential machine; in a source-to-source FORTRAN translator when vectorization of a loop has failed; and when compiling logic designs written in a parallel design language for simulation on a sequential machine. It is easy to generate sequential code for this sort of parallel program if one allows either duplication of code or the insertion of guard variables at merge points; in fact, it is in general impossible without this addition. However, for a large class of parallel programs (such as those originally arising from sequential programs, even after some optimizations have been applied) it is possible to generate sequential code <italic>without</italic> duplication or the addition of guard variables. In this paper we present an efficient algorithm which will generate sequential code from a parallel program <italic>without</italic> duplication or additional guard variables for a large class of parallel programs.</p>", "authors": [{"name": "Jeanne Ferrante", "author_profile_id": "81100357275", "affiliation": "IBM T. J. Watson Research Center, P.O. Box 218, Yorktown Heights, NY", "person_id": "P137070", "email_address": "", "orcid_id": ""}, {"name": "Mary Mace", "author_profile_id": "81100138530", "affiliation": "IBM T. J. Watson Research Center, P.O. Box 218, Yorktown Heights, NY", "person_id": "P193219", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/318593.318636", "year": "1985", "article_id": "318636", "conference": "POPL", "title": "On linearizing parallel code", "url": "http://dl.acm.org/citation.cfm?id=318636"}