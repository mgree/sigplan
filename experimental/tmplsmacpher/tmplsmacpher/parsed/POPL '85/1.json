{"article_publication_date": "01-01-1985", "fulltext": "\n\t\t\t", "proc_id": "318593", "abstract": "<p>Conventional Milner-style polymorphic type checkers automatically infer types of functions and simple composite objects such as tuples. Types of recursive data structures (e.g. lists) have to be defined by the programmer through an abstract data type definition. In this paper, we show how abstract data types, involving type union and recursion, can be automatically inferred by a type checker. The language for describing such types is that of <italic>regular trees</italic>, a generalization of regular expressions to denote sets of tree structured terms. Inference of these types is reducible to the problem of solving simultaneous inclusion inequations over regular trees. We present algorithms to solve such inequations. Using these techniques, programs without any type definitions and type annotations for functions can be type checked.</p>", "authors": [{"name": "Prateek Mishra", "author_profile_id": "81339517422", "affiliation": "University of Utah", "person_id": "PP48026681", "email_address": "", "orcid_id": ""}, {"name": "Uday S. Reddy", "author_profile_id": "81100154268", "affiliation": "University of Utah", "person_id": "P286394", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/318593.318603", "year": "1985", "article_id": "318603", "conference": "POPL", "title": "Declaration-free type checking", "url": "http://dl.acm.org/citation.cfm?id=318603"}