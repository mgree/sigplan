{"article_publication_date": "01-01-1985", "fulltext": "\n\t\t\t", "proc_id": "318593", "abstract": "<p>Continuations, when available as first-class objects, provide a general control abstraction in programming languages. They liberate the programmer from specific control structures, increasing programming language extensibility. Such continuations may be extended by embedding them in functional objects. This technique is first used to restore a fluid environment when a continuation object is invoked. We then consider techniques for constraining the power of continuations in the interest of security and efficiency. Domain mechanisms, which create dynamic barriers for enclosing control, are implemented using fluids. Domains are then used to implement an unwind-protect facility in the presence of first-class continuations. Finally, we demonstrate two mechanisms, wind-unwind and dynamic-wind, that generalize unwind-protect.</p>", "authors": [{"name": "Daniel P. Friedman", "author_profile_id": "81100636522", "affiliation": "Computer Science Department, Indiana University, Lindley Hall 101, Bloomington, IN", "person_id": "PP39051860", "email_address": "", "orcid_id": ""}, {"name": "Christopher T. Haynes", "author_profile_id": "81407593854", "affiliation": "Computer Science Department, Indiana University, Lindley Hall 101, Bloomington, IN", "person_id": "PP39042985", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/318593.318654", "year": "1985", "article_id": "318654", "conference": "POPL", "title": "Constraining control", "url": "http://dl.acm.org/citation.cfm?id=318654"}