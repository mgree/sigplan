{"article_publication_date": "01-01-1985", "fulltext": "\n\t\t\t", "proc_id": "318593", "abstract": "<p>We show how a programming language designer may embed the type structure of a programming language in the more robust type structure of the typed lambda calculus. This is done by translating programs of the language into terms of the typed lambda calculus. Our translation, however, does not always yield a well-typed lambda term. Programs whose translations are not well-typed are considered meaningless, that is, ill-typed. We give a conditionally type-correct semantics for a simple language with continuation semantics. We provide a set of static type-checking rules for our source language, and prove that they are sound and complete: that is, a program passes the typing rules if and only if its translation is well-typed. This proves the correctness of our static semantics relative to the well-established typing rules of the typed lambda-calculus.</p>", "authors": [{"name": "Mitchell Wand", "author_profile_id": "81100072594", "affiliation": "Computer Science Department, Indiana University, Lindley Hall 101, Bloomington, IN", "person_id": "PP39025873", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/318593.318602", "year": "1985", "article_id": "318602", "conference": "POPL", "title": "Embedding type structure in semantics", "url": "http://dl.acm.org/citation.cfm?id=318602"}