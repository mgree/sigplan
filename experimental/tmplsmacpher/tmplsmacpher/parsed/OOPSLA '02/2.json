{"article_publication_date": "11-04-2002", "fulltext": "\n Designing a Web Services Project for Maximum Value: The 90 Day Challenge Katherine Radeka Hewlett-Packard \nCompany 18110 SE 34th Street Vancouver, WA 98683 360-212-0375 katherine_radeka@hp.com ABSTRACT The 90 \nDay Challenge team set out to deliver an end-to-end Web services solution to enterprise sales agents \nin 90 days, with immediate plans to extend the solution to other user groups. In order to meet their \ncommitments, the team had to reuse the same component Web services in multiple contexts. By modeling \nthe workflows and carefully managing scope at the component level, the team developed a suite of Web \nservices that other teams could easily incorporated into multiple projects. As a result, twelve other \nprograms to date have incorporated Web services from the 90 Day Challenge, saving weeks of development \ntime. Categories and Subject Descriptors D.2.2 [Software Engineering]: Design Tools and Techniques D.2.13 \n[Software Engineering]: Reusable Software---reuse models General Terms Management, Design Keywords Web \nservices, Services Oriented Computing 1. INTRODUCTION Services oriented computing has received a great \ndeal of press in the past two years as a new way of thinking about delivering value over the Internet. \nThe basic idea is to encapsulate core functionality into a series of services that contract with each \nother to provide value to the end user. These services interact with each other using standards-based \ninterfaces derived from XML, enabling them to operate transparently between a diverse set of platforms \nand across organizational boundaries. In theory, this makes such tasks as enterprise application integration \nmuch easier than with older technologies because open standards allow for open communications. However, \na team can Permission to make digital or hard copies of all or part of this work for Copyright is held \nby the author/owner(s). personal or classroom use is granted without fee provided that copies are not \nmade or distributed for profit or commercial advantage and that copies bear this notice and the full \ncitation on the first page. To copy otherwise, or republish, to post on servers or to redistribute to \nlists, requires prior specific permission and/or a fee. Conference 02, November 6 - 8, 2002, Seattle, \nWA. Copyright 2002 ACM 1-58113-000-0/00/0000 $5.00. implement Web services in the same way as legacy \napplications, thus making them just as brittle and unresponsive as these older systems. The promise of \nweb services technology can only be realized by using best practices for modeling the desired service, \nand developing a common architecture for these services. Last summer, I led a team to develop a Web services \nbased end\u00adto-end application within 90 days. Along the way, we discovered that scenarios, business process \nmodeling, carefully scoped components, a flexible architecture and standards-based interfaces are all \ncritical elements of a successful Web services project. 2. WEB SERVICES DEFINITION Web services can \nbe defined in a number of ways. For the purposes of our project, we define Web services as components \nthat used standard Internet protocols, such as HTTP Post, and an XML based data exchange format to enable \ninter-component communication. Each Web service performs one step of a business process very well. We \ntook the definition one step further. We had a compelling need, from the beginning, to develop a suite \nof services to be shared among different sets of users. These component services could reside on different \nsystems, even different platforms. An aggregator service was responsible for coordinating the inter\u00adcomponent \ncommunications. Although our organization did not have an internal implementation of SOAP (Simple Object \nAccess Protocol), WSDL (Web Services Description Language) or UDDI (Universal Description, Discovery \nand Integration) we kept these standards in mind as we designed the interfaces for the service components. \nPlans were underway to support these standards, which will play a key role in enabling Web services to \ncoordinate communication across platforms and organizations. 3. PROJECT BACKGROUND Our specific task \nwas to develop a service for our company's external sales agents that would enable them to use wireless \ndevices to access all the information needed to prepare for a meeting with a potential customer. They \nalso needed the ability to send content to a nearby printer or fax machine, especially those reports \nwhich would not display on the small screen of a cell phone or a Personal Digital Assistant. The service \nneeded to retrieve information from our company's customer database, financial database, news services \nand stock Copyright is held by the author/owner(s). price services, to be aggregated into a single report \nin a format that would translate well onto a wireless device. The service also had to provide the ability \nto take action on the items in the report, such as send voicemails or emails to colleagues, directly \nfrom the service. Finally, if successful, the intention was to immediately leverage the services to provide \na similar solution to the company's financial analysts and line of business managers, with similarly \naggressive schedules. 4. SHARED SERVICES Since we had a very tight schedule and we knew that the work \nwould be leveraged in future projects where time to market would have similar importance, we placed a \nmajor emphasis on developing services that could be shared. The promise of Web services technology is \nthat it solves a lot of the problems with reusing code libraries across an organization. For example, \nif DLLs and code libraries are reused, it is easy for multiple versions to spring up across an organization \nwhich are not compatible, making it difficult for the organization to roll out changes, enhancements \nor fixes. There is also the issue of trust, and not-invented-here which any group that wants to encourage \nreuse must overcome. Finally, the development team has no incentive to create objects for reuse since \nthere is no immediate benefit to the team. Web services address the first issue by making the service \navailable to external teams, but not the code itself. The service runs in an environment which is under \nthe control of the original development team. The second issue has been addressed in our organization \nby Service Level Agreements between organizations that specify what  Activities  Information  Messaging \n Teams have incentives to build services for reuse since they are measured, in part, on how many users \nare accessing the service. If they make their services work in multiple contexts, they increase their \nusage numbers. If they have a billing model in place, their organization receives revenues from the service. \nThey also shorten their own time-to-market in later applications. 5. SCOPING SHAREABLE SERVICES 5.1 \nThe Issue of Scope The issue of scope is one of the biggest challenges of reuse which has yet to be solved, \nhowever. A component service will only be used by other groups if it does what the groups need the service \nto do, exactly as they need it to be done. Therefore, a critical issue in developing shared services \nis deciding how to scope them so that the target developer communities have their needs met. The question \nabout how to scope any individual service is a tricky one there is definitely overhead involved in processing \nall of the XML documents that are flying around if the services cannot do enough on their own. But scope \nthe services too large and they lose generic applicability. We found that it was easiest to think in \nterms of small chunks of business logic enough to perform one logical step in the process. With this \ngranularity, we created component services that could be combined and recombined at will to produce new \naggregated services. We found that the team needed to understand the multiple contexts within which an \nindividual service might be used. Otherwise, there was a significant risk of developing a service that \nwas too specialized within its initial context to perform the task in a different one. We needed a detailed \nunderstanding of the business processes of our various user communities to write the reusable component \nservices.. Our team defined twelve different  component Web services to perform the tasks that our first \nproject the service will do, its availability and load capacity, an escalation required, with one aggregator \nfunction that tied them all together path to report problems and a billing process. (Figure 1). Figure \n2 shows the 90 Day Challenge component services that are required to deliver the Prepare for Meeting \nService. We created diagrams like this for each of the major pieces of the 90 Day Challenge to understand \nwhich of our services would be needed for each problem domain. We were fortunate in that we already had \nthree potential target audiences for our services. This helped us understand which services would need \nto be common for all, and which ones really needed to be customized. However, we were faced with a relentless \ndeadline, so any process we followed had to be lightweight and flexible. For help in analyzing this problem, \nwe turned to scenarios and business process modeling. 5.2 Scenarios In order to understand what our \nbusiness process would be, we wrote several scenarios that described what we wanted the user to experience. \nWe wrote the scenarios as stories, in simple paragraphs, which discouraged us from taking up valuable \ntime to create nice diagrams when a sentence or two would do. For example, here is the scenario that \nthe Prepare for Meeting service is designed to fulfill: Prepare for Meeting Scenario: Susan, an enterprise \nsales representative, is on her way to a meeting with her most important client. She arrives at her appointment \na few minutes early, time enough to get an update on some critical information about the status of the \ncustomer s latest requests. She views the order status information, outstanding deals, the customer s \nstock price and the latest news about the company. She prints out portions of the report to show to her \ncustome, by sending it to a nearby fax machine. She also forwards a copy of a report to a colleague using \nemail. The scenarios helped us get inside our users heads, to understand what was likely to be most important \nto them. For the example scenario, speed was paramount the sales rep just had time for a quick last-minute \ncheck to see if there was any news. One advantage of writing scenarios in this informal style is that \nwe could churn out a lot of them in a short period of time. This helped us to identify the touchpoints \nwhere services could be shared across problem domains without impacting our schedule. 5.3 Business Process \nModeling We used the scenarios to develop high level business process models. The models were simply \ndrawings with a few basic conventions that helped the team understand the workflow. We chose not to use \nany formal methodology, such as IDEF0 or UML (Unified Modeling Language) because the diagrams were primarily \nfor the benefit of the team, and they were not trained in those methods. We also did not want the team \nto get lost in the method and lose focus on the problem at hand. To help this along, we set a strict \ntime limit for creating each business model, and did most of the work on printable whiteboards which \nwould be translated into simple diagrams. Our business environment was in a state of rapid change, so \nit was more important for us to be fast, and to create a drawing style that could be rapidly updated, \nthan it was to be 100% accurate. These process flows helped us describe the steps we would need to go \nthrough to deliver the service to the end user. We began with fairly low levels of detail in the models \n about twenty steps to get through the example scenario above. We then manipulated the levels of detail \nshown in the models to maximize the number of process steps that were reused across diagrams. That helped \nus identify opportunities for services that could be shared. As we defined the services, we replaced \nthe business process steps with the names of the services that would fulfill them. Finally, we completed \nthe drawings with the information that would need to flow from service to service. This gave us the basis \nfor beginning to write the interfaces. The end result of the process is shown as Figure 3. 5.4 Early \nInterface Documentation The next step in the process was to design the XML interfaces between the services. \nThis would enable the teams to develop the actual services more or less independently. We were even able \nto integrate very quickly with an XML interface that had already been developed for accessing the customer \nand sales databases. This gave us an immediate two-week jump in our schedule for the Web services that \nused data from those systems. This two week savings enabled us to deliver other high priority features \nwithout impacting the schedule. Following our model, we kept our interface definition documents very \nsimple just example XML documents with a few lines text at the bottom to define each parameter. 5.5 \nAgility in Response to Change By keeping the overall process lightweight and the documentation simple, \nwe were able to ensure that our models kept sync with reality in the face of a lot of change. About midway \nthrough the project, one of our major user groups was moved into a different organization which would \nrequire different information sources for some of the data in a key report. Since our models were easily \nupdated, we were able to update them quickly and to come up with a solution to the new problem. That \nprocess continues today. The original services are still in use, although some of them have been migrated \nto new platforms and others have been extended to deal with additional problem domains. As the services \nhave evolved, it has been easy to evolve the documentation with it, which enables us to make quick decisions \nwhen we are faced with a new business need.  6. RESULTS The services developed by the 90 Day Challenge \nare still in use today, and the messaging services have been applied in at least ten separate projects. \nWe delivered our original project on time, and we have impressed other business teams with our ability \nto recombine our services to meet unanticipated needs. We were able to deliver more in our 90 day time \nframe than we would have been able to deliver had we not used shared services, and we were able to start \ndelivering value as soon as the most important part of the application, the Prepare for Meeting service, \nwas ready two weeks earlier than scheduled. The core Web services that the 90-Day Challenge team developed \nhave continued to evolve In addition to on-going development to enhance the original top-level service, \nthe component Web services have been incorporated into ten distinct projects for the other frequent users \nof the customer and sales databases. 7. CONCLUSION Web services development teams can only realize the \nbenefits of the technology agility and speed if they are able to define the scope of each component \nso that other groups are able and willing to use it in their own services. By using a combination of \nquick scenarios, business process modeling and standards-based interfaces to create components that were \nscoped to deliver maximum value, our team was able to demonstrate that the power of Web services to create \nan agile IT applications infrastructure is real. 8. ACKNOWLEDGMENTS Our thanks to Lougie Anderson for \nher editing assistance with this paper. Designing a Web Services Project for Maximum Value: The 90 Day \nChallenge Katherine Radeka Hewlett Packard Company November 8, 2002 page 1  Topics What is a Web \nService?  Project Background  Issues with Web Services  Scenarios  Business Process Modeling  Early \nInterface Documentation  Results   page 3  Web Service Standards and Common Platforms Protocols: \nXML, HTTP-POST Dynamic Discovery: UDDI Description: WSDL Information Exchange: SOAP Platforms: J2EE, \n.Net page 5  Our Mission  Develop a suite of services for external sales agents to access all the \ninformation needed to prepare for a meeting with a potential customer.  Deliver the content using mobile \ndevices.  Complete the project in 90 days.  Immediately leverage the services on other projects  \n Our Strategy: Build a suite of shared services   Scenarios  Business Process Modeling  Early Interface \nDefinitions   Scenarios Short, one page descriptions of situations where our service would be used. \n Quick to write, quick to read and review.  Described multiple situations where our services would come \ninto play.  Focused the team on the real-world experience of the people who would use the services. \n page 9  Example Scenario: Prepare for Meeting Scenario: Susan, an enterprise sales representative, \nis on her way to a meeting with her most important client. She arrives at her appointment a few minutes \nearly, time enough to get an update on some critical information about the status of the customer s latest \nrequests. She views the order status information, outstanding deals, the customer s stock price and the \nlatest news about the company. She prints out portions of the report to show to her custome, by sending \nit to a nearby fax machine. She also forwards a copy of a report to a colleague using email. Business \nProcess Modeling  Each scenario became a simple business process model.  Each model identified natural \ncandidates for shared services.  Manipulating levels of detail led to models of how services would interact \nin the scenarios.  page 11   Prepare for Meeting Services  Send Fax Send Email Send to Print Service \nService Service  Early Interface Definition Finally, we defined the interfaces for each service before \ndevelopment began on any of them. Validated the service interaction model.  Minimized dependencies \nbetween developers working on interrelated services.  Enabled us to publish the interfaces to other \nteams who would consume the services so that we did not hold them up.  page 15  Results We met our \ndeadline.  We delivered more value than anticipated, by combining the Web services into creative combinations. \n The Web services have been leveraged into more than a dozen projects in the last year.   \n\t\t\t", "proc_id": "604251", "abstract": "The 90 Day Challenge team set out to deliver an end-to-end Web services solution to enterprise sales agents in 90 days, with immediate plans to extend the solution to other user groups. In order to meet their commitments, the team had to reuse the same component Web services in multiple contexts. By modeling the workflows and carefully managing scope at the component level, the team developed a suite of Web services that other teams could easily incorporated into multiple projects. As a result, twelve other programs to date have incorporated Web services from the 90 Day Challenge, saving weeks of development time.", "authors": [{"name": "Katherine Radeka", "author_profile_id": "81100371979", "affiliation": "Hewlett-Packard, Vancouver, WA", "person_id": "P414281", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/604251.604259", "year": "2002", "article_id": "604259", "conference": "OOPSLA", "title": "Designing a web services project for maximum value: the 90 day challenge", "url": "http://dl.acm.org/citation.cfm?id=604259"}