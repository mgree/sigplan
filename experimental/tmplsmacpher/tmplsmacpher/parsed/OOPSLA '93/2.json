{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings OOPSLA Washington, DC-26 September-7 October, 1993 Experience Report Post-Mortem \nAssessment of Interface Changes for an Evolving, Object-Oriented, Not-So-Rapid Prototype Reported by: \nMary Ann Malloy The MITRE Corporation Introduction We focused on interface changes to limit the size \nof the assessment problem, as well as to investigate During the past six years, the MITRE Corporation \nhas conjectures made by other researchers as to the implemented a series of not-so-rapid prototypes increasing \nstability of class interfaces in maturing demonstrating to the U.S. Air Force the application of systems. \nThree types of interface code were inspected,object-oriented technology to tactical information belonging \nto: a reused externally developed classprocessing problems. Not-so-rapid prototyping library, internally \ndeveloped code reused from another describes the development of software proofs of concept project, and \nnew code developed specifically for the that demonstrate the look and feel of automated message processing \nsystem. The period of observation solutions, subject to a rigorous deadline. Much of the spanned 14 months, \nand marked the second of on-going underlying functionality of the prototype must be prototyping phases, \neach beginning with early developed, however, nearly to the level of a beta exploratory development through \nto a functional, version, but within a relatively short time period. This integrated system. enables \nintermediate versions of the software to be demonstrated and exercised in a real-time, operational We \ncompared subsequent versions of each of the class environment to help identify system requirements that \ninterface files, as preserved in the Revision Control continue to grow and change even during the prototyping \nSystem (RCS); each difference scored one or more effort. hits into twelve different categories of changes: \nResearchers have agreed that most large scale object- addition of a new method s interface oriented efforts \nevolve from a combination of alternate . addition of method s body (C++ inline functiondesign attempts \nand intermediate prototypes, with an . implementation)emphasis on exploratory programming and reuse, \nrather documentary change (comments, reformatting code,than following the more traditional waterfall \nmodel, i.e., whitespace changes, etc.) passing cleanly through the stages of design, coding, testing \nand integration. So we initially argued that more removal of a method s interface object-oriented developers \nthan not are working under introduction or removal of a friend class or function similar conditions to \nours-in not-so-rapid prototyping . inheritance change (class name or parentage) mode-so that the observations \nwe have to make apply logic change (inline method change, change in to their situations as well. . macros \nused, etc.) change in list of include tiles or in the use of extern  Description statement The report \nfocused on changes to the interfaces of a change to class state (elimination / addition of state collection \nof 189 user-defined types or classes, variable, type change, etc.) comprising some 114K commented lines \nof C++ code . update to pre-existing interface (return type, that forms the heart of a not-so-rapid \nprototype number and kinds of arguments) message processing system. The software was visibility change \n(public / private / protected usage designed to demonstrate to the U.S. Air Force an . change)object-oriented \nsolution to the complete problem of removal of inline method s body analyzing text-oriented, tactical \nmessages, and to . assist them in identifying a minimal set of requirements We looked at how the total \nnumber and kinds of for such systems. The effort ultimately evolved into a changes, as well as changes \nwithin each code category, multi-process, distributable system of some 150K were distributed among the \nthree code types as well as commented lines of C++ code and was used to model distributed through time. \nOur procedure is called post- Air Force standards for such systems. Addendum to the Proceedings OOPSLA \n93 mortem because it took place at the end of a prototyping cycle. Discussion The data we presented \nsupported the following observations: Documentary changes were found to dominate the data. Classes with \nmultiple proprietors were more likely to exhibit these changes, a phenomenon we call documentary thrashing. \nA high incidence of new interfaces was also seen, but expected, to support new capabilities and extensions. \nInterfaces to the reused code showed low-to-no changes. There was an 80%-20% distribution clustering \nof changes biased towards the complex portion of the interface development problem (i.e., interface development \nin new classes). The reused class library exhibited coupling of visibility changes (e.g., moving an item \nof state from private to protected) and logical changes (e.g., changing au inline function implementation) \nat critical times during the prototyping process. Change activity lows could be related to external events \nand deadlines, such as holidays and demonstrations, inducing a cyclic behavior in time- related data. \nRather than skewing to the left, showing high initial activity followed by stability, within many change \ncategories there was skewing to the right, showing higher activity later in the prototyping effort. \n Conclusions We argued that the data supported some general conclusions and taught the following lessons \nabout object-oriented software development: Interfaces change activity to classes in well- understood \ndomains may well skew to the left through time, since the necessary and complete interfaces have been \ngenerally agreed and can be established early on. In more uncertain territory, the developers notion \nof which interfaces should be present and how they should be used changes as their understanding matures \nand new requirements are imposed, resulting in the right-skewed behavior our data exhibit. Besides giving \nthe software a uniform look, even under rigorous time constraints the amount of effort expended on documentary \nchanges should be minimized by the use of standard templates and code generators. Low incidence of change \nin reused code may just mean it is poorly documented. Developers expertise must be preserved with their \ncode to enable effective reuse. Coupling of visibility and logical changes, if disproportionately clustered \nin reused code, may signal a poor reuse choice. A simple change categorization effort is less costly \nthan more traditional repair tracking studies, but can provide substantial insight when evaluating reuse \npotential, identifying design problems, and establishing staff characteristics for predictive development \ntime/cost models. If conducted during the development process, rather than as a post-mortem assessment, \nchange categorization or tracking could provide early indications of the cumulative effects of many small \nchanges being made to a large and complex system. This is particularly important when multiple developers, \npossibly from geographically remote sites, are concurrently modifying a software baseline. Summary We \nbelieve studies of this kind are important, since state-of-the-art metrics appear inadequate for capturing \nthe necessary information to reflect the forces involved when object-oriented software is developing \nnew or is being modified. By analyzing and reporting empirical change data, we want to expose new areas \nfor improving software metrics, expand our understanding of the object-oriented software development \nprocess, and identify ways to utilize development time more effectively. Contact information: Mary Ann \nMalloy The MITRE Corporation Box 7 16 Langley AFB, VA 23665 (mmalloy@mitre.org) Washington, D.C. September \n26-October 1, 1993  \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Mary Ann Malloy", "author_profile_id": "81100059392", "affiliation": "The MITRE Corporation, Box 716, Langley AFB, VA", "person_id": "P193224", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260307", "year": "1993", "article_id": "260307", "conference": "OOPSLA", "title": "Post-mortem assessment of interface changes for an evolving, object-oriented, &#8220;not-so-rapid&#8221; prototype", "url": "http://dl.acm.org/citation.cfm?id=260307"}