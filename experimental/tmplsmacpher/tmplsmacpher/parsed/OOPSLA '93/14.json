{"article_publication_date": "04-01-1993", "fulltext": "\n OOPSLA  Washington, DC-26 September-7 October, 1993 Panel Session Developing Software for Large-Scale \nReuse Moderator: Ed Seidewitz NASA Goddard Space Flight Center Panelists: Brad Balfour, SolTech, Inc. \nSam S. Adam, Knowledge Systems Corporation David M. Wade, Computer Sciences Corporation Brad Cox, George \nMason University Introduction This panel succeeded in both its goals. The first of these was, of course, \nto have a useful discussion about developing software for large-scale reuse. The second goal was to try \nto encourage greater communication between the Ada community and the object-oriented programming community. \nTwo of the panelists (Brad Balfour and David Wade) were drawn from the Ada community, while the other \ntwo (Sam Adams and Brad Cox) were drawn from the object-oriented programming community. Further, the \npanel had been previously held in June at the Washington Ada Symposium. All the panelists agreed that \nthis approach had been very useful, both for them personally and for the communities in general, and \nthey hoped for further interaction in the future. The position of each panelist is well-described by \ntheir position papers in the OOPSLA 93 proceedings. However, for completeness the presentation made by \neach panelist is very briefly summarized here. The remainder of this summary documents the active question \nand answer session that followed the presentations. Of necessity, all questions and answers have been \nparaphrased. Brad Balfour Brad was asked to focus on the influence of programming languages on achieving \nlarge scale reuse. He stated that the choice of programming language was a fundamental, influential decision. \nThis decision impacts supporting technologies, such as development guidelines, asset certification and \nthe process of using an asset. It also has an economic impact for maximizing the return the investment \nin reuse, because we currently don t really reuse software across languages, in practice. Finally, it \ninfluences the upstream products (i.e., in the analysis and design phases), because various advanced \ndesign and even requirements methods are easier to apply with some languages than others. Brad concluded \nthat the choice of programming language will remain important for reuse until we achieve a technology \nthat truly allows us to mix languages. Sam Adams Sam was asked to consider the methodological issues \nof large scale reuse. Sam first argued that reuse must occur in all phases of the life cycle, including \nmaintenance. Most methodologies only cover the original development of software-just 20% of the life \ncycle. Large scale reuse involves both reusing software from one project to the next and also retrofitting \noff-the-shelf components into existing projects to replace custom software and reduce maintenance costs. \nSam then discussed his idea of an enterprise as an internal reuse marketplace, in which a group working \non a project would promote those components they developed that they think are reusable. An internal \neconomy is needed for reuse, because the infrastructure is not yet their for commercial large-scale reuse. \nSam next considered what kind of software gets reused: you have to be able to find it, it must be easily \nunderstandable, it must be easily integratable, it must be trustworthy and there must be a need to reuse \nit. Sam concluded by describing the Well Defined Object concept being developed at Knowledge Systems \nCorporation in which a reusable object encapsulates all such information that needs to be kept in sync \nto reuse that object.  David Wade Dave was asked to talk about the practical experiences with reuse \nthat he has had on the FAA Advanced Automation System project. Dave began by describing the complexity \nof AAS: it is really a group of cooperating systems for air traffic control spread over a large number \nof control centers. The project is so large, that they were Addendum to the Proceedings OOPSLA 93 able \nto view these systems as comprising a domain and then do a domain analysis to glean commonality across \nthe systems. He referred to this as internal reuse within a very large project, as opposed to reuse from \none project to the next. In 1989 the AAS project formed a reuse working group, because they felt that \nsome reuse opportunities were falling through the cracks. This group was initially viewed as simply providing \ncoordination on reuse within the project, but eventually developed into a three-way effort: a strong \nemphasis on education, the collection of metrics and staff to develop those reusable components that \nwere agreed to be necessary, but that no other group on the project was willing to develop (currently \nabout 30,000 lines of code). Finally, Dave noted that they did this with very little automation, though \nthey are now moving their taxonomy information from flat files to a PC data base system.  Brad Cox Brad \nwas asked to discuss the economic issues of large-scale reuse. Brad began by asking, Why do we call it \nreuse, rather than buying, selling and owning like other engineers? He answered himself by saying that \nreuse is a word applied to a liability, a waste product that you can t sell, so you reuse it! Brad identified \nthe problem as that, for the first time in history, we have goods made of bits and not atoms. The normal \nmarket system does not work for software, because the markets ability to hang prices on the exchange \nof material assumes the conservation of mass, which does not apply to bits. Brad then described a concept \ncall super-distribution that is based on the ability to copy and transport bits at the speed of light, \nrather than trying to deal with software like other products. In this approach, software is freely copied, \nbut as copies are invoked, their use is monitored, usage rates are uploaded to a central system and the \nproducer of the software is compensated based on this usage. Some of the usage fees for, say, a word \nprocessor would then automatically flow to the producers of reusable components and subcomponents used \nin the word processor, based on the relative usage of those components. Brad concluded by wondering if \nperhaps there was indeed a silver bullet: the mobilization of human energy to solve a problem. Unfortunately, \nBrad believes that for software this will require a paradigm shift, which is always chaotic and disruptive. \nQuestions and Answers Qnestionfor Dave Wade: You mentioned that you have training for all your developers. \nDo you also have training for you managers, and what kind? Dave answered that their education effort \nwas broad based. They had a tailored class specifically for the management ranks. In fact, they eventually \nhad three different kinds of courses, but its the course for the rank- and-file that has endured. Question: \nWhat kind of solutions can we provide to the sociological aspects of large scale reuse, and the resistance \nto such reuse? Brad BaIfour mentioned that his company has been primarily supporting information systems \ngroups within the DOD-people with 10 to 20 years of COBOL experience who really have no incentive to \ndo reuse. He has found that in these situations the social changes are Washington, harder than the technical \nchanges. The hardest change is the shift to a multi-system perspective. Brad said that this has been \nless of a problem in recent work his company has done for the Church of Latter Day Saints in Utah, because \nthis is a centralized organization that can readily look across all its IS applications. Brad concluded \nby saying that he felt that 80% to 90% of the problem was non-technical. Sam Adams noted that Smalltalk \nprogrammers tend to pick-up on reusing things quicker because they have so many great things to reuse. \nSam felt that you can t make people reuse with a stick approach-you need a carrot. The problem is not \ngetting programmers to reuse, its getting management commitment. This requires a change in the sociology \nof an organization. Current IS organizations tend to manage project-by-project, and in some organizations \ndevelopment teams stay together into maintenance, so they never have a chance to reuse software on the \nnext project. Sam summarized by stating that barriers between projects cause a lot of the problem. Dave \nWade stated that his group avoided these problems with reuse. He felt that ultimately some paradigm shift \nto reuse will happen because of the pressure of economics. But he didn t see this happening in the short \ntern1 on a large scale. His group has had success in coordinating reuse efforts within a large project, \nbut they did find many problems to be insurmountable. Brad Cox added that, to some extent, the social \nproblems of reuse will remain almost insurmountable until we have addressed the underlying issue of market \neconomics. Sam Adams agreed that this is one of the reasons reuse won t happen outside of an internal \nreuse infrastructure for a long time. But Sam felt that with the right management commitment and the \nright motivating crisis, organizations can make changes within themselves that would take generations \nto make in society at large. Question for Dave Wade: Could you give some examples of cost savings, increased \nquality and schedules being met through your reuse effort? Dave noted first that quality is absolutely \nessential on the AAS effort, so there is very strong quality assurance for the entire program. Dave then \nadded that the reusable code on the project has additional quality because many people are using it in \ndifferent ways and applications. He stated that the average number of times a component is reused on \nAAS is 4 to 5 times, with some components being reused 50 or 60 times. Dave also said that they kept \ntrack of cost avoidance and some statistics on staff months, but that it was difficult to quantify meeting \nschedules because of reuse of components. Dave admitted that the entire project was behind schedule anyway! \nQuestion: What is the process and product of domain analysis? Comment on whether there is some consensus \non what domain analysis is and why it is supposed to be so useful even though no one knows how to define \nit. Brad Balfour answered that the Defense Information Systems Agency Center for Information Management \nreuse effort has focused a lot on domain engineering, consisting of domain analysis and design. Soffech \nhas D.C. September 26-October 1,1993 put together a process for domain engineering and conducted a workshop \nto try to form a consensus. He gave a quick definition of domain analysis as a generalized form of requirements \nanalysis in which, instead of developing object requirements for a specific application, the goal is \nto model a generalized set of requirements across a family of applications (the domain). Domain design \nis then the development of domain-specific architectures to implement applications in the domain. Follow \nup: When you take any real system, how do you generalize it into a family of systems? A system can be \ngeneralized along many different dimensions. Brad replied that the processes that are successful do it \nbottom-up from an existing family of systems. For example, in France, CSF Thompson generalized from a \nset of air traffic control products. They generalized along the lines of variations they saw between \ntheir products. Ed Seidewitz added that they had been doing domain analysis at Goddard for four years \nand are just figuring out what it is. He stated that one thing that is particularly important is to bound \nthe domain: you have to decide what you are generalizing over, the strategic direction you see your organization \ngoing. He noted that this is not necessarily a fixed decision, that it may change over time. Ed stressed \nthat an organization has to be careful not to become overwhelmed by analyzing an expanding domain. To \navoid this the organization must decide what is useful to generalize over and document it. Sam Adams \ntook the view that through domain analysis you are describing the problem space in a way that can be \nused to describe it to others. This is an abstraction process. Sam felt that you want something that \nis in the common conceptual vocabulary of all the people you are trying to service. For example, the \nconcept of an account will occur a lot in bank applications, and the concept of a document re-occurs \nin PC applications. Sam noted that these are not really real world things but are rather abstractions, \nconcepts we choose to invent. Brad Cox made an admittedly sarcastic comment: What s the difference between \ndoing domain analysis and not doing it? It s the difference between thinking and not thinking! Question \nfor Dave Wade: You mentioned that you kept track of the number of times a component was reused. What \nother metrics did you keep track of? Dave answered that when they started their metrics program, they \nwanted to be as unobtrusive as possible, so they keep very few metrics. They keep the standard metrics \nsuch as source lines of code, time to develop and effort to develop, of course. They also keep a data \nbase of initial requests for components and their current users. The emphasis has been to keep it simple. \nDave concluded with the comment that if they didn t know they needed some information, they didn t ask \nfor it. Question: Suppose you have 10,000 or 100,000 very nicely packaged, well-documented, reusable \nobjects, how do you find the ones you want? There seem to be only two choices: text retrieval or a formal \nspecifications language. Sam Adams stated that the problem with specifications languages is that they \nget too detailed and complicated. Reuse is not about precise matches, but fuzzy matches. At Knowledge \nSystems they capture the class- responsibility-collaboration information on objects using the Well-Defined \nObject concept. When you do this, you see a common responsibility language emerge with repeatable patterns \nfor describing abstractions. Sam hoped that such patterns could be used to provide a quick match against \na large number of objects to identify just a few objects for a more detailed search. Brad Balfour mentioned \nthat SolTech s tools use the faceted classification scheme developed by Rubin Prieto-Diaz. This classification \napproach is used to create a domain terminology. The faceted scheme is superior to a hierarchical approach \nbecause it is much more bottom-up expandable and combinable for searches. Brad Cox, claiming to be non-sarcastic, \nsaid that the question was a lot like asking Where do I find a good Mexican restaurant? Brad noted that \nwe manage to answer this question without too much problem. The point is that human beings are good at \norganizing infomiation, given an incentive to do so. Right now we don t have such an incentive for software, \nso we try to compensate with high-powered data base technology, and that will never work. Follow up to \nBrad Cox: What about the software IC concept you espoused not long ago? Brad said that he had done a \nlot of work on specification techniques and inspection gauges a few years ago. He is more convinced than \never of the importance of these techniques. However, he couldn t make it make sense to do such things \nunless we addressed the income issues. Ed Seidewitz remarked that the original question assumes that \nfirst we figure out what system we want to build, and then we find reusable components that fit the concept. \nIn Ed s organization, they have a large number of systems that have a great deal of similarity, but vary \nfrom one satellite mission to the next. As a product of their domain analysis they are coming up with \na general specification map of the functionality that the organization needs to support as an institution. \nThis map will be used to define how to support a mission using only the institutional functionality that \nalready exists. and then tailor this as necessary for mission- specific needs. This approach shifts the \nemphasis from trying to find reusable components and justifying their use, to identifying what is not \nreusable and justifying not reusing institutional capabilities. Ed concluded by noting that in a situation \nof 80% to 90% reuse (which his organization has already achieved in certain limited areas), it is actually \neasier to only have to identify what is not reusable, given a standard map of reusable capabilities. \nSam Adams agreed that any development process must consider reuse heavily in all phases of the life cycle \nin order to make reuse happen. He felt that most of the processes out their are about clean-slate design, \nnot assuming the availability of large reuse libraries. Question: How does this panel get the word out \nto the maintenance programmers who do not attend OOPSLA, but who are involved in 80% of the software \nlife cycle. Addendum to the Proceedings OOPSLA 93 Sam Adams agreed that 60% to 80% of the budgets of \nIS organizations are for maintenance. Thus the real bang for the buck is in this area, not just creating \nnew software. Sam argued that we have to start viewing software as an asset, not a liability. Software \nmust become a long term financial medium that pays back dividends and that accountants can put on the \nbottom line. Until then we can t do reuse properly. Sam pleaded for a change in the accounting rules \nto allow this to happen. Given this, software organizations will eventually change into ones that deal \nwith the constant evolution of software. Brad Balfour noted that there is a group of people in the Ada \ncommunity that are in fact currently working to get the accounting rules for software changed. Brad also \nfelt that there is a natural grass roots movement of reuse into the maintenance area. If code is reused \nin several projects, then the maintainers tend to see it over and over gain. There is then a realization \nthat they can get a maintenance benefit from being able to deal with this common code. Brad admitted \nthat this takes time, though. Question for Sam Adams: You described your idea of an organization with \na whole lot of projects, trying to bubble up reusable code from those projects and then market this internally \nin the organization. How do you do that without having programmers dealing with blue sky issues, instead \nof the problems that the client is paying to have solved? Sam agreed that this was an important management \nissue. Sam related that he had heard at the Washington Ada Symposium that some organizations in the Ada \nworld have required projects to produce their deliverables with 30% of the code reusable on other projects. \nHe hadn t realized that anyone was that bold! However, what does tend to work in general is to put a \nmember on a project team to focus on reuse. Nevertheless, Sam admitted that it can be seductive with \nan object-oriented approach to try to come up with a generic solution and never get your own project \ndone. Question for Brad Cox: We already have the technology to sell software as you described in which \nyou would get a product with a little boot device that lets you use it a limited number of times, then \nit prevents you from using the product any more until you buy more uses from the producer. This would \nlet you try things out cheaply and only pay more for the products you liked. Is there anything like this \ntoday, and if not, why not? Brad Cox stated that the pieces of even the most ambitious implementation \nof what he proposed do exist today. Brad felt that the approach suggested by the questioner, however, \nwas too much like copy protection schemes that have already been rejected as persecuting the honest. \nHe is more interested in solving the problem right using pieces that exist today, like computers, communications, \nthe ability to write metering software, credit card companies as models and encryption software and hardware. \nBrad admitted that this will be a major cultural change, but perhaps the world is just becoming ready \nto think these thoughts. Brad Balfour then voiced some reservations with the concept of usage fees. He \nfelt that the approach advocated by Brad Cox could actually be a disincentive to reuse. If it is necessary \nto pay every time you use a reusable component, then the perception of programmers will be that they \ncan write their own version cheaper, rather than paying over and over again. Having done the calculations, \nhe realized that this is not really true, but he emphasized that it will be perceived that way. Brad \nconcluded with the comment that having to pay for using reusable code would not help promote the necessary \nculture shift from the fun of writing new code. Sam Adams related an experience that Knowledge Systems \nCorporation had when it tried to sell some simple reusable components at OOPSLA 87. They originally priced \nthe package at $250 for a standard source license. However, no one would buy the product because they \nthought they could just write it themselves. Sam estimated that it would take him about 2 weeks to completely \nreproduce the package they were selling-at a cost of a lot more than $250! Nevertheless, KSC dropped \nthe price to $99, about as low as they could go. The reaction then was that the software must not be \nworth much because it was so cheap! Sam s point was that there won t be large scale reuse until you can \nestablish a marketplace to determine the price of reusable components. Right now, we don t know how to \nvalue such components, so we don t know what we should pay for it. Question for Dave Wade: In your project, \nhow did you gauge the quality of the components you collected? Dave replied that it is very difficult \nto measure quality. The only tangible measure of quality they have on his project is the program trouble \nreports they receive on the software. Dave didn t think this was a particularly good measure of quality, \nbut it is all they have. Nevertheless, initial statistics show a surprisingly low trouble report rate \nfor the reusable software developed by his reuse group, relative to other software on the project. One \nreason for this may be that at one time they had as many as four different development platforms. The \nreusable component developers had to test their software on all four platforms, so their software got \nmore testing. Washington, D.C. September 26-October 1,1993  \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Ed Seidewitz", "author_profile_id": "81100621844", "affiliation": "NASA Goddard Space Flight Center", "person_id": "P74588", "email_address": "", "orcid_id": ""}, {"name": "Brad Balfour", "author_profile_id": "81100569097", "affiliation": "SofTech, Inc.", "person_id": "PP39048976", "email_address": "", "orcid_id": ""}, {"name": "Sam S. Adam", "author_profile_id": "81332487530", "affiliation": "Knowledge Systems Corporation", "person_id": "P258882", "email_address": "", "orcid_id": ""}, {"name": "David M. Wade", "author_profile_id": "81100412894", "affiliation": "Computer Sciences Corporation", "person_id": "PP31041183", "email_address": "", "orcid_id": ""}, {"name": "Brad Cox", "author_profile_id": "81406596855", "affiliation": "George Mason University", "person_id": "PP31035745", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260319", "year": "1993", "article_id": "260319", "conference": "OOPSLA", "title": "Developing software for large-scale reuse (panel)", "url": "http://dl.acm.org/citation.cfm?id=260319"}