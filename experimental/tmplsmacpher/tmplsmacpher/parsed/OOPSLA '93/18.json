{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings OOPSLA Washington, DC-26 September-7 October, 1993 Panel Session Evolving \nTo ward Object-Oriented Technology in Large Organizations Moderator: Steven D. Litvintchouk The MITRE \nCorporation Panelists: Michael Stark, NASA Goddard Space Flight Center Brad Balfour, Soffech, Inc. Mohamed \nFayad, Object Technologies, Inc. Bernard Rosenfeld, Andersen Consulting Moderator s note: This report \nprovides a paraphrased, condensed digest of the panel discussion and audience questions, not a verbatim \ntranscript. Session Introduction This session is a little unusual because it consists of one paper followed \nby a panel that was largely inspired by the paper. But first I want the paper and its author to get a \nchance to speak for themselves. So let me begin by introducing Michael Stark (NASA Goddard Space Flight \nCenter Software Engineering Laboratory).  Michael Stark I want to make clear that the Software Engineering \nLaboratory never claims we re typical of every kind of environment. We re looking pretty much at one \nproblem domain: flight dynamics ground support software. You can generalize at your own risk. The Multimission \nThree-Axis Attitude Support System (MTASS) had the most modest use of 00 technology. On such systems, \nthere was always one big file for all sensor data. As sensors vary from mission to mission, interfaces \nand file formats need to be revised, so there hasn t been a lot of reuse. On MTASS, we employed a single \nfile for each sensor and have interface code to each file. We didn t use 00 design, but we at least grouped \ndata with operations on the data. This very modest usage of 00 concepts during the coding phase has helped \nincrease reuse from 20% of the code to 70% of the code. The Multi-Mission Simulator was developed from \na specification for two satellite missions at once; this gave us a first start at defining a reusable \narchitecture. The main new concept was using Ada generics to simulate inheritance, and for other purposes. \nAda generics were used extensively; just about every unit is a generic unit. We attained 90-100% reuse. \nHowever, this design was still designed for two mission specifications; it was not based on a complete \nanalysis of the flight dynamics problem. In the generalized system we are currently developing, we extended \nthe 00 model to the specifications phase, doing 00 domain analysis trying to solve the flight dynamics \nproblems in the general case. We are now using 00 technology throughout the life cycle. What has all \nthis meant to us? The number of changes have been dramatically reduced, thanks to abstraction and encapsulation. \nAnd as compared with the FORTRAN baseline, we ve drastically reduced the number of errors we make with \nstructure: interface errors and errors in defining data structures. Both Ada and 00 development have \ncontributed to this. Until you get to high-reuse systems, the distribution of effort (in programmer-hours) \namong phases doesn t really change. This is evidence that the well-defined process we have in our environment \nis a stronger factor than using a new language or new design technology, because the schedules for the \nexternal milestones (such as PDR) don t change even though the technologies have changed. In high-reuse \nsystems, things have changed radically. Once we have developed most of the code, you can go to a design \nreview and show a running prototype that s based on the reused code. So a lot more can be already done \nby the time you finish your design phase. It s the high reuse that has helped us shift our effort to \nthe design phase, not the fact that we re using 00 technology or Ada. We have found that 00 technology \nis really the enabler for getting high reuse. Because of high reuse, we ve decreased our costs, shortened \nour schedules and made the systems more reliable. Addendum to the Proceedings OOPSLA 93 It would have \nbeen nice to have Ada 9X or C++ with dynamic binding; this would greatly simplify some of the concepts \nin our generalized development. But we got 80% of the benefits of 00 from abstraction and encapsulation. \nInheritance and polymorphism and dynamic binding are helpful, but the most economic benefit for costs \nof projects is abstraction and encapsulation. Panel Introduction Mike s organization has made gradual \nprogress toward using 00 starting from a FORTRAN base in 1985, and experience has been positive. But \nit s taken 7 years or more, and several projects, to get as far as they did. So in this panel, we want \nto look at just how typical was the Goddard Software Engineering Laboratory experience of large organizations \nattempting to use 00 technology for the fust time. Does 00 technology insertion need to take a decade, \nor can it be accelerated? Brad Balfour Unfortunately, Mike Stark s NASA Software Engineering Laboratory \nexperience is reasonably typical of other organizations I ve seen. In the 9 years I ve spent in a previous \nlife doing consulting in 00 technology, with 50 different organizations, more of them were similar to \nwhat the NASA Software Engineering Laboratory went through than were dissimilar to it. 00 technology \ntransition takes a long time; it s not an easy transition. We see 00 technology as a different way of \ndoing business. Management must be supportive and committed, all the way up to the top of the organization, \nto say that we really will do things differently from now on. But those things tend not to happen. What \nMike said was actually real typical: 00 technology tends to come in through the back door. It grows grass-roots \nfrom the techies bottom-up. Perhaps Mike s most controversial point was that he found that a majority \nof the benefits came from abstraction and encapsulation, more than from other 00 concepts like dynamic \nbinding. WhiIe that may not be a popular thing to say, I think he s right on that. A lot of organizations \nwe ve done training and consulting for, have seen a majority of their benefits come from changing their \nmindset from functional decomposition and structured analysis/structured design approaches, to an 00 \napproach to analysis, design, and implementation. Inheritance and polymorphism may be the fun and sexy \nparts of 00, but it s the more pedestrian parts that are giving us a lot of the benefits. The NASA Software \nEngineering Laboratory took years to transition to 00. Some organizations I ve seen have started faster, \nthanks to one or two powerful line managers that committed to it. But the time to take the complete transition \nhas frequently been this long. Can it be somewhat faster starting today, with the more mature tools and \ntechnologies we have today? Yes, but what really determines speed of insertion is approach to technology \ntransition, and approach to change management, more than the technical aspects. Washington, Bernard \nRosenfeld Brooklyn Union Gas rebuilt their mainframe customer information system using an 00 approach. \nThe system we built supports 850 users. (The architecture of the system is described in the paper in \nIEEE Software, January 1993.) It took 365 work years to develop the system, with a peak staff of 180 \npeople. Andersen Consulting provided about two-thirds of the peak staff, but the experiences I ll talk \nabout were those of Brooklyn Union Gas people that were on the project. We chose 00 technology primarily \nbecause we needed to build a new system that would be flexible in the face of regulation changes and \nbusiness changes. We also had to be able to adapt to new technologies, especially in the user interface. \nAnother enabler for the adoption of object technology was that we had a technology champion in the company-Tom \nMorgan-who had been at the company a long time and is respected within the organization. Together we \nconvinced management that this was the appropriate way to go. Management told us to get it done and promised \nus the resources we needed to make it happen. Our approach to getting 00 development into Brooklyn Union \nGas was one of diving in with both feet. We considered the project critical to the organization, and \nwe needed to move the organization in quickly, so we couldn t afford the slow technology push such as \nwhat happened at NASA. The most important factor in getting 00 technology inserted was skill leverage. \nWe had pockets of people within Brooklyn Union Gas and Andersen who had some degree of experience in \n00 and had at least gotten the concepts right. In addition to building the object system on the mainframe, \nthese people built the core object model, and designed the frameworks within which the overall system \nwould be built. The rest of the developers could try to fit within the frameworks we had defined and \nthink about the problems in predefined ways. The experienced developers that had developed the frameworks \nacted as mentors and coaches for the rest of the team. We also had a pilot project which was 15% of the \ncustomer system logic. This started about 6 weeks ahead. It helped us to debug the tools and the process \nto implement the design. In the end, we made 40 competent 00 developers at Brooklyn Union Gas, in the \n3 years of development. The good procedural designers became the good object designers, probably because \nthey had abstract reasoning capability, but every one became a proficient 00 programmer at the very least. \nAll but one of these 40 developers have moved on to other projects and are seeding those projects with \n00 expertise. Mohamed Fayad I ve had experience with 8 projects with 00 technology. What happened with \nthe NASA Software Engineering Laboratory was typical, not only in 00 but in any ad hoc environment. When \npeople start their own business, they start with a business plan. Most of the speakers we heard from \ntoday didn t have a transition plan. When I introduce 00 technology to a customer, I go with a plan. \nI study their environment very well. 00 technology insertion D.C. September 26-October 1,1993 should \nbe done as a solution to a business problem. If the organization has a maintenance problem I should show \nthem how 00 technology will help them overcome this maintenance problem. I have to show that as a return \non investment. How radical a paradigm shift is OO? I cannot tell a customer they have to change everything. \nI always have to capitalize on what a customer has already. That s the way it should be. Would an organization \nattempting 00 technology today make faster progress? I would say no. Surprised? Before we had only a \nfew tools and methods and little knowledge. Now we have a lot more. Most of the data that exists is just \nconfusing people. No one knows who s wrong and who s right.  Questions from the Audience: Audience Questioner \n# 1 Have any of the panel had experience with companies that have aborted efforts to introduce 00 technology? \nAnd can Mike Stark separate the impact of the methodology from the impact of the implementing language, \ntools and the implementors themselves? Michael Stark It s very difficult to separate out the effect of \nAda and OOD because most of the 00 projects have been in Ada. We re just starting to use some 00 development \nwith C and eventually transition to C++. Brad Balfour It is really difficult to say how much to attribute \nto the language, tools, or methodology individually. They end up with such a synergistic effect that \nno one is really willing to separate them out. We ve seen projects that have tried 00 technology and \nabandoned it. It s hard to say which individual factors caused these failures. Bernard Rosenfeld I ve \nseen examples where organizations have undertaken 00 technology because someone thinks it s good, without \nmuch management support. Because there isn t an atmosphere fostered to make it happen, people get resistive \nattitudes. That s caused failure.  Audience Questioner # 2 What can I do to sell my management that \n00 technology is a good idea? Brad Balfour What s needed is how to present 00 technology to management \nas a solution to a problem. Managers want to know the bottom line: dollars or time. One question will \ninvariably come up: So prove it. To deal with this, have you kept any statistics or metrics on how well \nor badly you re doing today, with respect to cost, schedule, or effort? If there s not an obvious perception \nthat some aspect of the way you re currently doing business needs improvement, then it s going to be \na much harder sell job to convince them that you re going to get incremental improvements. Mohamed Fayad \nThat s not enough for managers. You really need to go with a business case to the manager. You have to \nstate what the cost of inserting 00 technology will be. And you can t say that it will take 10 years \nto achieve something good. You will be doomed if you say that. Perhaps a year or two to achieve some \nresult. Michael Stark In the Software Engineering Laboratory, there is no real software crisis that \ncompels us to move fast. Brooklyn Union Gas moved faster because they went directly to an operational \nproject rather than a pilot project. Even now, some of our projects are perceived as being experimental, \nnot being real projects, and that is a problem. Bernard Rosenfeld If you re not in an environment where \nthere is a perceived crisis, fear or greed, it will be very difficult to get the kind of support you \nneed to push in change of this magnitude.  Audience Questioner # 3 How much longer will it take the \nwhole Brooklyn Union Gas organization to transition to OO? It s not clear we re comparing problems of \nthe same order of magnitude. Bernard Rosenfeld I agree. However, much of Brooklyn Union Gas has already \nmoved to 00 as they ve started on new projects. As new projects are initiated, the developers will start \nbringing in 00 technology there too because the experience now is there and it s become the default way \nof approaching systems building.  Audience Questioner # 3 (follow-up) Will we end up spending 10 years \nbefore it s all over? Bernard Rosenfeld My guess is it won t be the year 2000 before we re all the way \nthere. Brooklyn Union Gas is starting to take on new projects in various areas. I expect that over the \nnext 2 or 3 years, we ll have a fully indoctrinated world there. Michael Stark When you compare our \nprojects to those of Brooklyn Union Gas, you are comparing apples and oranges. We re very schedule-driven \nbecause we have to meet launch dates. Most of the time we can t slip at all. Our projects are smaller: \ntypically 2 years development, and a peak staff of 25 or 30, rather than 5 years with a peak staff of \n180.  Brad Balfour Brooklyn Union Gas started in 198647. It should be about 8 or 9 years before they \ncomplete the transition. The Software Engineering Institute (SEI) pegs about 18 years from conceptualization \nof a technology to popularization of that technology, and they ve got that for N different technologies. \n00, unfortunately, is right on track for that 18 years. Addendum to the Proceedings OOPSLA 93  Audience \nQuestioner # 4 Contact information: Could you comment on the relationship between the Steven D. Litvintchouk \nmigration to 00 technology and what is being called The MITRE Corporation process improvement or capability \nmaturity? Did Bedford, MA 01730 Brooklyn Union Gas go through some kind of process assessment like the \nSEI s? Bernard Rosenfeld I m pretty sure that Brooklyn Union Gas has not done a formal evaluation. Brooklyn \nUnion Gas has not had a particularly formal process in place prior to this 00 development. Mohamed Fayad \nProcess requires a lot of commitment. But if you don t have a process, you re not an engineer. You cannot \nimprove anything you cannot repeat. Michael Stark I agree with Mohamed that process is more fundamental \nthan which methodology you choose. I would rather do FORTRAN and structured design with our well-defined \nprocess we have at NASA, than do C++, Smalltalk, Ada 9X, and hack. Bernard Rosenfeld You should be careful \nnot to spend a lot of time trying to figure out what the ultimate process is and what the ultimate organization \nis, or it will become very difficult to get moving. Brooklyn Union Gas dived in and dealt with the project \nat hand first, and then said, Now that we ve completed a project, what worked for our organization and \nhow can we formalize it into a standard process? Washington, D.C. September 264ctober 1,1993  \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Steven D. Litvintchouk", "author_profile_id": "81100370250", "affiliation": "The MITRE Corporation", "person_id": "P270088", "email_address": "", "orcid_id": ""}, {"name": "Michael Stark", "author_profile_id": "81100218836", "affiliation": "NASA Goddard Space Flight Center", "person_id": "PP31032669", "email_address": "", "orcid_id": ""}, {"name": "Brad Balfour", "author_profile_id": "81100569097", "affiliation": "SofTech, Inc.", "person_id": "PP39048976", "email_address": "", "orcid_id": ""}, {"name": "Mohamed Fayad", "author_profile_id": "81339498936", "affiliation": "Object Technologies, Inc.", "person_id": "PP43122401", "email_address": "", "orcid_id": ""}, {"name": "Bernard Rosenfeld", "author_profile_id": "81100222529", "affiliation": "Andersen Consulting", "person_id": "P29382", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260324", "year": "1993", "article_id": "260324", "conference": "OOPSLA", "title": "Evolving toward object-oriented technology in large organizations (panel)", "url": "http://dl.acm.org/citation.cfm?id=260324"}