{"article_publication_date": "04-01-1993", "fulltext": "\n OOPSLA  Washington, DC-26 September-I October, 1993 Workshop 11 Patterns: Building Blocks for Object-Oriented \nArchitectures Report by: Bruce Anderson, University of Essex Workshop Co-Chairs: Bruce Anderson University \nof Essex Peter Coad Mark Mayfield Object International, Inc Reporter s note: this is my own choice of \nhow best to and inequality they force on an audience is very hard to present our work in the space available. \nA brief account transform into productive work, and the enjoyment that precedes a list of patterns, and \nthe polished version of such work brings. one example in full. Patterns accepted Work process Name: \nStrategy Call-stress definite outcomes; insist on use of fixed (Bruce Anderson, Essex)template; give \nexamples Short description: Whenever the variation between Beforehand-circulate all accepted patterns \nto systems or subsystems or versions is in the way of participants carrying out some operation, make \nthe operation into a strategy object. Contrast this with making it a member Arrival-music, badges, a \nvigorous game function. Divergent phase-a guided fantasy on powerful uses of patterns in the workplace, \nleading to impressionistic Name: Behavior Across a Collection posters by small groups, on the function \nof patterns. Peter Coad &#38; Mark Mayfield, 6 bject International) Working-Relining of patterns, in \nsmall groups where the author was interviewed and then members worked Short description: For a collection, \nlet each member do on both the pattern and the writeup. as much as it can; limit the behavior of the \noverall collection to things that its parts cannot do well. Integrating-authors made posters about their \npatterns, on flipchart sheets, illustrating them graphically and Name: Front-end/Back-end Hierarchies \nattaching their revised writeups. Then we walked (Doug Lea, SyracuseIOswego) around looking at each \nothers work, and discussing it. Short description: A front-end hierarchy of classes is Closure-a circle \nwhere we each said something we had developed, knowing that in any given application, nearly learned \nduring the day, and agreed to circulate our all objects will actually be instances of subclasses of revised \npatterns. EACH class in the hierarchy. By using multiple This structure is successful because of (a) \ncommonality inheritance plus Factories, applications may create a of interest and commitment, through \nsubmitting a parallel hierarchy of back-end classes that reuse and pattern in the agreed format, (b) \ncommonality of build off front-end functionality, without otherwise background through having read the \ncirculated patterns, altering the front-end. (c) creation of a safe and motivating atmosphere by the \nleaders, (d) worthwhile tasks to do, and (e) sharing of results. Note especially that we had no presentations \nat all during the workshop-1 believe that the passivity Addendum to the Proceedings OOPSLA 93 Name: \nBusiness Transaction Processing (Larry Best, American Management Systems) Short description: A generic \nbusiness transaction manager is responsible for ensuring that, as each new business transaction is processed \nby the application, the state of the commercial relationship is as it should be based on the business \npolicy that was in effect at the time the business transaction was committed, regardless of whether there \nhave been intervening business transactions or a change in business policy. Name: Forwarder-Receiver \n(Hans Rohnett, Siemens) Short description: Two objects, a forwarder and a receiver, encapsulate application \nobjects from potentially varying inter-process communication (IPC) mechanisms. Name: Abstract Factory \n(Erich Gamma, Taligent) Short description: An abstract factory provides an interface for creating a family \nof related objects. It removes dependencies on concrete classes of a subsystem. Name: Client/Server/Service \nand others] (Giuseppe Menga &#38; Gabriele L lia, Torino) Short description: The Client/Server/Service \npattern supports in an application the definition of active objects, i.e. objects which possess their \nown threads of control. It is useful for representing concurrent, distributed systems, especially when \nthey have a hierarchical structure. Name: Method Partitioning {f$)x~e Rochat, Fisher-Rosemount Systems, \nShort description: Transform a long method with many temporary variables into a class with state variables. \nName: FactoryMethod i,i$ard Helm, LM Ertcsson &#38; John Vlissides, Short Description: Factory Methods \nallow base classes to create instances of subclass-dependent objects. Name: Decorator (Richard Helm, \nEricsson &#38; John Vlissides, IBM) Short Description: A Decorator attaches additional services properties \nor behavior to an object. Decorators can be nested recursively to attach multiple properties and behaviors. \nName: Property, or What s Your Sign? (Ron Casselman, Carleton) Short Description: Whenever there are \ncomplex rules based on the properties of objects for establishing runtime associations and those rules \ntend to change or be extended frequently, separate the properties of the objects involved into a Property \nobject. Name: Caching Database Records (Ward Cunningham, consultant) Short description: In this pattern \nwe consider saving database records so as to avoid the expense of retrieving them each time they are \nneeded. We assume each table to be so processed will have a Manager that will be responsible for retrieving \nrecords from the database, via Agents, or from the in memory storage we will call the cache. Name: Sole \nInstance Management (Kim Rochat, Kim Rochat Consulting) Short description: When only one instance of \na class exists at any one time, then the class should manage the instance. Name: Protocol Objects (Rik \nFischer Smoody, SmOOdynamics) Short description: An object which explicitly describes a relationship \namong some other objects. Name: Component Object Identification (Bruce Cohen, Servio) Short description: \nProvide a means of recognizing, and obtaining access to, component objects in aggregations, and recognizing \ntheir types and attributes. Name: State Machine Richard Felsinger, consultant 81 IIllike Gold, MicroGold) \nShort description: A state machine is an object that provides control for complex event response behavior. \nA state machine has states or modes of control. For each event the state machine invokes the proper response \n(action) based upon its current state or mode. Name: Visitor (Ralph Johnson, Illinois) Short description: \nOperations on a complex object are often distributed among the classes that make up the components. Sometimes \nit is better to centralize an operation in one place. Visitors are a way of centralizing an operation \non a complex object that requires that each of the components of the object implement a single method. \nAny number of Visitors can then be defined without having to change the component classes or the aggregate \nclass. Name: Subscription/Custom Notification (Bob Wilhelm, Objective Control) Short description: Objects \nsubscribe to be notified when an event occurs or a condition arises. Subscriptions can be entered and \ncancelled dynamically. One event detector determines the occurrence of the event and notifies all subscribers. \nWashington, D.C. September 264ctober 1,1993 Name: Interaction Confi uration (Alessandro L. Isidoro, Ii!ell \nLabs) Short Description: Telecommunication services produce call topology changes such as going from \na two-party call to a three-way conference call. These topologies can be represented by objects of class \nCallConfiguration which migrate between subtypes. [Bruce s version] Name: Interaction Protocol (Dilip \nSoni, Siemens Corporate Research) Short description: For any object or component, separate out the protocol \nit uses to interact with the environment, other objects/components, or the user. Name encapsulating basic \ncomponents Name: Encapsulating Basic Components (Larry Williams, Objectime) Short description: When creating \napplication-specific objects (e.g. graphical tools) that are composed of basic components (e.g. UI widgets), \nconsider encapsulating the basic components within application-specific objects. Name: Context (Stefanie \nBrueninghaus and Michael Weiss, Mannheim) Short description: When the same object is used in multiple \nareas of discourse (contexts) at the same time, its context-specific properties should be factored out \ninto separate objects. Name: Deferred Construction (Ralph Kolewe, Eridani Inc) Short description: Define \na construction method in the base class of a hierarchy which is called by each derived class in the hierarchy \nin order to actually construct an object. Name: Private Thread (John W. Gilbert, Objective Software) \nShort Description: Objects which model real world objects commonly must exhibit concurrent responses \nor autonomic behavior. One way to implement this response is to allow an object to instantiate a privately \nheld execution thread in which a method of the object is executed. Name: Bitmaps in Flat Files (Steven \nHarris 81 Hal Hildebrand, Polymorphic Software) Short description: Regardless of their exact format, \nall bitmap tiles tend to have header information defining their structure, as well as the actual bitmap \ninformation. Use objects to encapsulate these concepts and then use that common interface for all types \nof bitmaps. Name: Duet, or Pas de Deux (Chamond Liu, IBM Skill Dynamics) Short description: A duet occurs \nwhen two peer objects enjoy a joint behavior that should not be a method of just one or the other. Name: \nScheduling (Lennart Ohlsson, Utilia Consult, Sweden) Short description: When a system must perform a \nnumber of periodic tasks without hard deadline constraints, partition the scheduling strategy and build \na corresponding structure of scheduler objects. Name: Modifier Chain (Herb Martin, Philip Morris) Short \ndescription: An Owner class is implemented such that its objects include methods for adding other Modifier \nobjects to a Chain (or 1ist)at run time. There may be multiple distinct Chains (usually of different \ntypes) on a particular Owner object. A particular Chain is targeted to intervene when the Owner is responding \nto a particular method or event, or a set of methods or events. The Modifier may handle the request, \nalter the request, modify the response, or otherwise augment the normal behavior of the owning object. \n Addendum to the Proceedings OOPSLA 93  A complete example pattern Basic information Name: Ticked Objects \nAlternate names: Scheduling strategy partitioning, Control flow decomposition Short description: When \na system must perform a number of periodic tasks without hard deadline constraints and you do not need \na pre-empting scheduler you may instead rely on a cooperative scheduling strategy which may be tailored \nfor the particular operation. With ticked objects you can partition the scheduling strategy and build \na corresponding structure of scheduler objects, Keywords: Polling, Scheduler, Tick Submitted by Lennart \nOhlsson, Utilia Consult, Sweden The problem Description: For systems with periodic tasks, a standard \nsolution is to have a main loop that keeps track of when to call which task. This is often the case even \nif the problem does not have hard real-time constraints and therefore does not need a pre-empting scheduler. \nSuch main program loops often both implements the scheduling strategy and contains hard-coded calls to \nthe tasks to perform. The result is that the overall program structure is determined or at least largely \naffected by the control structure. In an object oriented design, it is a design goal to minimize the \neffects of the control structure on the system architecture, and the global main loop should thus be \navoided. Example: Consider an alarm system which periodically polls its alarm devices and at the same \ntime must check for data on a number of serial ports and communicates with an operator panel and the \nfollowing main loop. while (true) { WaitTirneToDoNextLoop ( ) ; for (int i = 0; i<noOfPorts; i++) nryPorts[i]-.CheckForData(); \nmyAlannDeviceCollection->PollNext(); if (ThereIsTime ( ) ) niyOgeratorPanel->CheckForInput();l Comments: \nDesigners are less used to apply object-oriented decomposition to control flow structures. In a small \nexample like this, the problem is not severe, but in real systems with complex priority requirements \nsuch solutions can be hard to understand and very difficult to change. In particular run-time modifications \nare difficult to achieve. The Pattern Description: Define a standardized scheduling protocol by making \neach object that can be scheduled a instance of a subclass to the abstract class TickedObject, which \ndefines a pure virtual function Tick{). Make scheduler classes for different scheduling strategies. Each \nscheduler need only be defined in terms of a collection of TickedObjects and their Tick operation. By \nmaking the Scheduler classes subclasses of TickedObject, a hierarchy of scheduling strategies can be \ncomposed. Example: theMainScheduler = InfiniteLoopScheduler; theMainScheduler.Insert( new TickAllSequentialScheduler \n(myPorts) 1; theMainScheduler.Insert( new TickOneSequentialScheduler (myAlannDeviceCollection)1; theMainScheduler.Insert( \nnew ConditionalCnceScheduler (myOperatorPane1 , ThereIsTime)); theMainScheduler.Tick();  Comments: It \nis easy to imagine a hierarchy of specialized Schedulers, ranging from simple sequential and conditional \nschedulers to various forms of priority schedulers to arbitrarily advance schedulers that dynamically \nselect other schedulers to collaborate with. Implementation notes: Depending on the homogeneity of the \ncollection classes used, it may be necessary to use either sub-classes or templates to obtain different \nforms of the different schedulers. Application notes: <omitted> Relations to other patterns: This is \na variation of the classic MVC notification pattern, but instead of alerting a set of anonymous objects \nin parallel, this pattern does it in some defined sequence. It is also an application of the standard \niterator pattern for collections.  Contact Information: Bruce Anderson Electronic Systems Engineering \nUniversity of Essex  Colchester, Essex CO4 3SQ, England bruce@essex.ac.uk Peter Coad and Mark Mayfield \nObject International, Inc 8 140 N. MoPac 4-200 Austin Texas 78759, USA coad@acm.org 110 Washington, D.C. \nSeptember 26-October 1,1993  \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Bruce Anderson", "author_profile_id": "81100101845", "affiliation": "Electronic Systems Engineering, University of Essex, Colchester, Essex CO4 3SQ, England", "person_id": "PP31027199", "email_address": "", "orcid_id": ""}, {"name": "Peter Coad", "author_profile_id": "81100276435", "affiliation": "Object International, Inc", "person_id": "PP31035145", "email_address": "", "orcid_id": ""}, {"name": "Mark Mayfield", "author_profile_id": "81100350240", "affiliation": "Object International, Inc", "person_id": "P190686", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260347", "year": "1993", "article_id": "260347", "conference": "OOPSLA", "title": "Patterns: building blocks for object-oriented architectures3", "url": "http://dl.acm.org/citation.cfm?id=260347"}