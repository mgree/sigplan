{"article_publication_date": "04-01-1993", "fulltext": "\n Washington, DC-26 September-7 October, 1993 Panel Session Software Architecture: the Next Step for Object \nTechnology Moderator: Bruce Anderson University of Essex Panelists: Mary Shaw, Carnegie-Mellon University \nLarry Best, American Management Systems Kent Beck, First Class Software Moderator s note: this is a lightly-edited \nset of extracts from the answers given to audience questions during the panel session, together with \na brief excerpt from the following BOF discussion. It is not a comprehensive or balanced treatment of \neither the panel session or of the panelists views. The position papers printed in the OOPSLA Proceedings \ncontain further powerful statements by the panelists. On Architecture Larry: I have a very broad definition \nof architecture and I would define it as really understanding software as a product, and the recurring \nthings you see in software as a product. This can go to the very early stages of development where we \nare talking about recurring requirements. What are the recurring things that people use applications \nfor, and what are the recurring ways that applications support business processes for instance? You can \nuse architecture as a tool for analysis all the way down to actually assembling predefined facilities \nor software components, both big ones and small ones. So I would certainly not limit the idea of architecture \nto logical or physical. I think if you look at other uses of the term outside our particular discipline, \nthen they also adopt a very broad definition of what it is. Mary: In software, although there is less \nconsensus and we are less explicit about it, you can still recognize distinct levels of design. The differences \nhave to deal with the issues that you are resolving when you are working at that level of design. So \nwe have an executable level of design, we have a programming level, then we have what I think of as the \narchitecture level where we think about the way that components (which more or less correspond to the \ncompilation units but not quite) are put together to realize the gross function of the system. Here is \nwhere we worry about how the overall functionality is decomposed, about how the overall performance budget \nis partitioned out. We worry about bottlenecks and global throughputs and gross aggregate properties \nof the system here, and I think if we move up from there you may be above to identify a specification \nor requirement level where the issue is, what is to be computed, in terms recognized by software people \nor by users. So when I say software architecture I am meaning the design that resolves the issues at \nthe software system level of the design, excluding the algorithm and data structures that lie within \nthe module at the lower end, and excluding the issues of what functionality the client actually required \nat the upper end. Architecture is the bit that bridges between them.  Kent: I also do not see a clear \nseparation. I do not understand where architecture stops and programming begins. I think it is much more \nof a continuum, and you make decisions that have broad impact at first, if you are lucky, and make decisions \nthat have narrow impact at the end, if you are lucky. I suppose somewhere in there is where you stop \nbeing an architect and you start being a programmer, but I do not see any reason to partition it that \nway. The one thing that causes me to believe that there is an architecture is that someone has taken \ninto account the costs as well as the benefits of a particular solution. In my experience when I go into \na client site and they say Here s our architect! -then if I m lucky it s the person who understands that \nevery solution has a cost; that often differentiates him or her from their colleagues. Architecture is \nthe balance of the costs of a solution with the benefits that are gained by it. Addendum to the Proceedings \nOOPSLA 93  On the Difference Between Architecture and Design Kent: Well I think it is precisely the \ndifference between a Victorian house and Victorian architecture. To me a Victorian house has a lot of \ndetails that make it Victorian, but the decomposition is talking about a house. You would say, Oh on \nthe ground floor you have the following rooms and they are laid out this way and on the upper rooms you \nhave the following rooms and they are laid out this way . So to me Victorian architecture is built out \nof a whole bunch of little patterns, like the gingerbread around the outside. So there are two different \nthings, there is the description of a program and there is the description of programs like this.  On \nNotations Kent: The notation that I have been exploring was pioneered by an architect named Christopher \nAlexander. He calls these things patterns and they have not a notation but a literary form because the \npurpose of architecture is not communicating with a computer, it is communicating person to person and \nliterature has a whole lot more to say about that than computer science does. As an example there is \na pattern that Ward Cunningham came up with called window-per-task. The context is very early in the \ndesign of a graphical user interface. The statement of the problem is that you want to have windows assist \na person to solve a single problem. How do you know how much information to put in a window? The conflicting \nforces are if you have lots of windows each window will be very simple but then window management overhead \ngets to be a pain. If you have too much going in each window you have fewer windows but each window tends \nto be complex and people have invented horrific user interface techniques, like hierarchical menus to \ndeal with that problem. So there are the forces, and the generic solution to that is that you ask the \npeople that will be using the system to describe a set of tasks that they go through when they solve \nthat problem, and you have one window for each of those tasks. Then there are other patterns further \ndown that deal with what information you put in each window and how it is represented and how you represent \nthe operations on it. Window-per-task is a particular pattern that leads into a larger fabric of other \npatterns which will gracefully solve the problem of interface design. On Components Mary: Components \nare of different kinds, even though the programming languages we have at our disposal tend to have only \none kind called compilation unit, or something roughly equivalent to compilation unit, and the inability \nof our tools to discriminate carefully along the different kinds of components is one of the impediments \nwe have to overcome.  On Categorizing Mary: I believe that understanding the conceptual vocabulary that \npeople use in describing systems is critical to developing the notations and tools that we should be \nsupplying to make it easier for people to describe them more precisely. Kent: We are forming a non-profit \ncorporation called the Hillside Group to promote patterns for software engineering. We are all actively \nwriting patterns. Bruce: When we have tried codifying architectures: it is actually quite difficult, \nbut you can come up with some kind of codification, key words and stuff, and you can come up with some \nkind of list of architectures. It was all very non-revolutionary, just a page or two full of headings. \nThen I saw that of course it is like that, because there is no revolution here. Architecture was not \na breakthrough in the history of buildings. I think what is really needed is actually to have the guts, \nor the funding, to sit down and do this codifying, and I think that is one of the things that is going \non.  On Aesthetics Larry: I happen to believe that aesthetics is important part of architecture, and \nI also believe that architecture permits you to focus on aesthetics when you might not have been able \nto do so, because you were so slogging down in the details of getting an application to work. For example, \nwe have come up with a sort of architectural solution to user interfaces, where with a finite number \nof widgets you cart do interfaces that support a very wide variety of applications. I submit that we \nare much more able to deal with aesthetic issues now than we were ten years ago in user interfaces. \n Mary: Building architecture admits of a layman s aesthetic because laymen can walk up to a building \nand appreciate it, or fail to. I think that software architectures are essentially inaccessible to the \nlayman and not visible, so I think that the aesthetic that we will come to will be a utilitarian aesthetic, \nand the criteria that we apply when we make judgments will be criteria like, Does this construct mesh \nwell with the family of constructs I am using? Does this construct capture appropriately a common kind \nof user requirement? and Does this architectural construct capture an important set of design decisions, \nand carry it forward into maintenance? So I think the aesthetic that we develop for architecture will \nbe an aesthetic that will help us to appreciate those things that make system development simpler, more \nstraightforward and more pleasant for the software practitioner.  Kent: I do not make the same split \nbetween the utilitarian aesthetic of the software engineer and the user. I know people who believe very \nstrongly that you can put a wrapper on anything and make it look like anything you want, but when I use \n[application name deleted] I know that things feel bad and I can make, I think, fairly accurate guesses \nas to the underlying structures that are surfacing in subtle ways in the program that makes them feel \nbad. It just does not have the quality without a name, to use Christopher Alexander s term. One of the \nmost interesting things about software architectures is finding ones, that when they do surface to users, \nwill give users that experience. Bruce: Something I am longing to see is much more dialogue between \narchitects in the software business, and between architects in different divisions of companies. We need \nto reach a critical point in clarity of expression such that it does not take so long to understand someone \nelse s architecture that there is no time left to appreciate it. Kent: There are certain things that \nyou can say about aesthetics, you can actually come up with common descriptions, descriptions of things \nwhich are aesthetically pleasing and begin to abstract them. Each pattern that you write embodies some \npiece of the aesthetic description. Each pattern has a little piece of aesthetics encoded in it. This \nis a good solution - when you say good you are making a value judgment so you are in the realm of aesthetics. \n  On Frameworks Larry: A framework is one of the common high-level patterns that tend to exist in applications, \nfor example workflow. It involves common classes that are interacting with each other in standard ways, \nhave standard design issues associated with them, and standard tradeoffs. Kent: To me a framework is \na way of thinking about a particular family of problems, and code to back it up, so you could have the \nsame architecture and several different frameworks that supported it. Mary: I would use it to refer \nto an implementation vehicle, that is to use a framework as you would use the skeletal structure or frame \nof a building, as a way of giving shape to something that was subsequently going to get fleshed out. \n On Design Mary: I think the word design gets a lot of abuse. I have almost stopped using the word design \nto refer to a specific document or a specific stage of system Addendum to the Proceedings OOPSLA 93 development. \nAt any point where you make decisions that carry you closer to the executable code you have a specification \nof what you are trying to accomplish right now and you have the implementation, which is the next step \ndown. This will in turn turn out to be someone else s specification. Design is the business of making \nthe decision how you are going to get from this specification to its implementation. So I do not find \nspecification, implementation or design as helpful labels for any particular layer in this process. \n On Reuse Larry: I want to contrast architectural reuse with archaeological reuse. In the latter, in \nthe design or prototyping stage you take reusable objects from some repository. There s an alternative \nway, to go into the project with architectural understanding, with common patterns like workflow. Our \nintuition is that understanding these design patterns going into the project helps you in analysis, helps \nyou in definition, helps you in design, helps you in construction, helps you in operation, and so on. \n On Engineering Sensibility Mary: One of the things that I noticed in what both Larry and Kent said \nwas a sensibility that I think of as an engineering sensibility. Larry talked about defining commonality \nand generic problem structures and getting things documented so that the elder statesmen wrote things \ndown so that junior people could look it up, not reinvent it. Kent has talked about considering costs \nas well as benefits. Now both those things reference to an established body of conventional material \nfor problems that have already been solved. Those are both characteristics of an engineering sensibility, \nand although we talk a lot about software engineering, the discipline that we refer to as software engineering \nhas not yet grown up to an engineering sensibility. I think you should latch onto those things that Larry \nand Kent said and carry then away as something we should cherish and aspire to.  On the Future Larry: \nIt is not that people suddenly decide that they are mature enough to do something. What happens is somebody \ndoes something and it is so much better than what everybody else is doing, and they make so much money \ndoing it that pretty soon they are the only players. We are in the middle of a huge shift that is going \nto have big market implications. The whole idea of crafting systems from scratch and doing it from a \nblank sheet of paper is on the way out. What is happening out there is that people are taking pieces \nof things and are smashing them together and are writing little interfaces to go with them and they are \nturning out solutions one heck of a lot faster than people that do it any other way. And that is what \nis going to propel a move towards architecture, because people smashing pieces together are going to \nstart saying well wouldn t it be better if this piece did this, or wouldn t it be better if this piece \ntalked to this piece a little bit better, and lets define some standards, and pretty soon we are going \nto have ourselves a nice architectural framework. Kent: I feel that there is a much stronger connection \nbetween underlying software architectures and people s experiences of programs than anyone suspects. \nThat had better become a much more explicit part of the design process, or we will continue to have programs \nlike the one that I mentioned [and whose name was deleted].  From the BOF Bruce: We worked in groups \nto write down the most important things that companies could do to foster increased architectural competency. \nThey were: a management commitment to an architectural approach, rather than churning out code; architecture \nrecognized as a viable and supported career path; time for learning through study, mentoring and interaction; \nsafe and open peer relationships; and the development of a corporate memory-making knowledge explicit. \n Contact Information: Bruce Anderson Electronic Systems Engineering University of Essex Colchester, \nEssex CO4 3SQ, England bruce@essex.ac.uk \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Bruce Anderson", "author_profile_id": "81100101845", "affiliation": "University of Essex", "person_id": "PP31027199", "email_address": "", "orcid_id": ""}, {"name": "Mary Shaw", "author_profile_id": "81339528004", "affiliation": "Carnegie-Mellon University", "person_id": "PP43126019", "email_address": "", "orcid_id": ""}, {"name": "Larry Best", "author_profile_id": "81100025751", "affiliation": "American Management Systems", "person_id": "P168394", "email_address": "", "orcid_id": ""}, {"name": "Kent Beck", "author_profile_id": "81100558273", "affiliation": "First Class Software", "person_id": "PP31047638", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260321", "year": "1993", "article_id": "260321", "conference": "OOPSLA", "title": "Software architecture (panel): the next step for object technology", "url": "http://dl.acm.org/citation.cfm?id=260321"}