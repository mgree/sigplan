{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings OOPSLA Washington, DC-26 September-l October, 1993 Workshop Re-Engineering \nDesign Trade-offs in a Legacy Context Organizers: Steven Fraser Terry Cherry (BNR) Stephen MacKay (NRC) \n Workshop Outline Large complex real-time legacy systems are frequently re-engineered by design teams \nusing object-oriented analysis and design methodologies. Design trade-offs are often necessitated by \nperformance requirements, limited market windows, deployment costs and long- term maintenance issues. \nThese systems cannot be re- engineered overnight, but require transition strategies where old and new \ncomponents must coexist and interact. Workshop participants exchanged experiences (both successes and \nfailures) and developed consensus on the activities required to bridge the transition between current \nand re-engineered systems (chaos to order). The workshop was organized into four parts: Why are we here? \nIdentifying design trade-offs, Identifying steps in the development of an effective design trade-off \nprocess, and Sharing experiences with successful/unsuccessful design trade-off practices The workshop \nresults reported here take the form of annotated lists and a process model. The additional benefits to \nthe workshop participants can be quantified in terms of experience sharing (learning norms, values, expectations, \nexperiences and failures) and networking. Why are we here? Not unexpectedly, the participants had different \nreasons for their involvement. Participants were interested to determine: the trade-offs when we scale \nup; the rules for decision on whether to re-engineer or start over; how to handle interfaces to other \nlegacy systems; what tools are available (or will be) to support re-engineering; what are the organizational \nchallenges; critical success factors to re-engineering; how to transform management to encourage re-use \nand design for maintainability; how to evolve procedural system to 00 system incrementally with minimal \nnumber of re-engineering cycles; what are the costs involved in re-engineering; how to model design trade-offs; \nhow a specific 00 methodology affect how to do re-engineering; if OOP is really the answer; and finally \nto gain insight into successes and failures in re-engineering efforts.  Design Trade-off Pairs The workshop \nparticipants identified the following trade-off pairs. The second paragraph under each tradeoff (in italics) \nrepresents the distilled comments from workshop participants. Open Systems vs. Proprietary: The design \ntrade-off between building a system based on a published, adopted industry standard versus using a proprietary \narchitecture may enable potentially lower life cycle costs, maintainability, modularity, etc. However, \nthe increased up-front project cost and inefficient system design, may not protect market share. Participant \nexperience indicated that long-lived projects should not be tied to specific hardware or proprietary \ntechnology since maintenance costs will inevitably grow (and migration costs to an open system will be \nprohibitive). The importance of having the right team was stressed (to understand both existing system \nand new paradigm). Performance (Efficiency) vs. Flexibility/Maintainability: Determine the root causes \nfor performance issues and bottlenecks in the architecture, because it is essential to deliver both performance \nand maintainability to ensure customer satisfaction. There was concern expressed that highly optimized \nsystems are difficult to re-engineer. There was mixed agreement that performance issues in the short-term \ncan result in disappointing compromises affecting long- term maintainability. Language Trade-Offs In \na legacy system, there are trade-offs between migrating to a new language and using the existing language. \nImplicit problems include: transition strategies, education, and scalability, i.e. there is too large \nan investment in the legacy to permit migration. There was a debate on whether to wrap a legacy or re- \nimplement in an 00 language. Two participants Addendum to the Proceedings OOPSLA 93 115 reported on \nnegative experiences with C++ and Smalltalk attributed to tools and learning issues. There was a positive \nreport on evolving a COBOL system to Smalltalk. Design Re-Engineering vs. Code Re-Engineering. Evaluate \nhow to capture and maintain system understanding from artifacts (documentation, operational system), \nexperience (user, maintainer, developer), and history (change required, tests). Additionally, determine \nwhat trade-offs (cost, interval) are required to justify domain models. Participants reported that both \napproaches had worked (in different contexts). Concern was voiced that code re- engineering doesn t eliminate \nproblems (merely transforms them). Again, getting the right team/people was key to making the right trade-offs. \nCost of Pie-Engineering Legacy Code vs. Risks. The costs (development/maintenance) of software (same \nold thing, re-engineered system/process, or new system/process) must be balanced against the risks (immature \nprocess, lost market share, reduced customer satisfaction). Experience has shown that it is less risky \nto re- engineer (one system was wrapped initially, but then had to be re-written). Schedule vs. Quality: \nIt is difficult to make the entire life-cycle cost visible to project management early in the development \nprocess. Under schedule pressure are quality standards, design philosophy, or re-engineering goals abandoned? \nFor example, when should we add a switch statement instead of creating new classes; violate encapsulation; \nor limit the amount of re-engineering? One organization had to tolerate some degree of error because \nthe error behavior of the legacy system was not fully understood. Another organization commented that \nmanagement was divided into a matrix structure of managers who cared about quality and those who were \ndriven by schedule. Maintainability vs. Life Cycle Costs: Maintenance is the cost-how can it be minimized \nwithout reducing market share? Central vs. Distributed: Process data control can be central or distributed. \nIssues that drive a distributed architecture include cost, availability, flexibility, and performance. \n It was observed that a distributed system with centralized control was becoming more common (configuration \nmanagement is a challenge in this environment). Another observation was that trade-offs between COTS \n(commercial-off-the shelf) components and GOTS (government-off-the-shelf components-they own it and they \nwant you to use them) components is becoming an issue in the defense industry. Evolution vs. Revolution: \nEvolution: re-engineer the system in phased or incremental approach. Revolution: re-engineer total system \nall at once. This is the Big Bang vs. Incremental question (How can we calculate the break-even .point?). \nPartitioning Trade-Offs: What are the ways of partitioning a legacy (horizontal- foundation classes vs. \nvertical-packages) and can the organization/customers afford the price tag? Participants commented that \nit is important to start small with a portion of the system that is well understood and not on the critical \npath. Transparency at the Interface vs. Changing the Interface: How does an organization decide between \nimpacting many interfaces/users to lit the new model versus limiting the impact by making the re-engineering \nmore transparent to the outside world. Two approaches were identified: modify the partition contents \nand stabilize before modifying the interface, or fix the interface-then gut the partition and re-engineer. \n Process Steps to identify the Most Effective Framework for Design Tradeoffs Three assumptions of any \nframework were: there must be management buy-in; the masses must be educated (and aware of the big picture \n); and there must be adequate tools available to support the design tradeoff process. Ten process steps \nwere identified and their relative importance ranked (pictured in Figure 1). Requirements/Goals: It is \nnecessary to solve the right problem before attempting to solve the problem right. Constraints may include: \nexisting hardware, interdependencies, real-time performance, market-window and development/deployment \ncosts. 00-Transformation: What are the right activities to evolve a legacy system to one which is more \nmaintainable (able to meet changing customers requirements quickly). Activities contemplated might include: \nanalysis (domain, requirements, code), development of software models (object, classes, interfaces, process), \nevaluation of COTS (commercial-off-the-shelf) packages. Domain Analysis: Identify the business models/rules \nfrom the existing systems or develop wrappers to enable reuse as-is. Develop a strategy to think globally \nand act locally. Team Organization Form, organize and educate the team. Washington, D.C. September 26-October \n1,1993 Define Process. Design Recovery. A methodology is required to make results repeatable and scalable. \nDesign documents and requirements documents are not always available. For example, the original target \nRoot Cause Analysis. machine/compiler may no longer exist, or source code maybe unavailable. Identify \nundesirable properties of the legacy system so that they may be addressed within the context of re- Define \nthe Interfaces. engineering. Interfaces (partitions) should be defined and change managed. Technical \nand business decisions should be captured to support a complete enterprise-wide object model. Define \nthe Vision Root Cause Analysis Team Organization 00 Transformation  Define the Interfaces Domain Analysis \n Figure 1: Process steps to apply design trade-offs in re-engineering in a legacy context (as developed \nby the OOPSLA Workshop participants).  Attendees: Attendee E-mail Voice Bill Castor wcastor@data.cel.scg \n303-730-1910 Brett Stutz brett-stutz@mentorg.com 408-451-5574 ChrisHibbert hibbert@netcom.com 415-968-6319 \nChristian Gassner cgassner@sgcll.unisg.ch (41) 71-302787 David R.Hughes Fax: 301-424-5742 301-424-1515 \nDebiIvey ivey@pogo.den.mmc.com 202-646-4783 Doug Vamey dvarney@ihlpm.att.com 708-979-8750 Evelyn L. Corbitt \n0000661 @msgate:emis 7 14-732-6724 J. G. VanStee jvanstee @stkvm? .vnet 408463-2954 Owen Walcher Owen-walcher@mail \n303-969-3700 Peter Feiler phf@sei. emu. edu 412-268-7790 Shyam R. Chldamber shyam@athena.mit.edu 617-253-6629 \nStephen MacKay mackay@nt.nrc.ca 613-993-6553 Steven Fraser sdj?aser@bnr.ca 613-763-3073 Terry Cherry \ntccherry@bnr.ca 613-765-2679  Contact information: sdfraser@bnr.ca (613) 763-3073 Addendum to the Proceedings \nOOPSLA 93 117  \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Steven Fraser", "author_profile_id": "81339499863", "affiliation": "", "person_id": "PP94029323", "email_address": "", "orcid_id": ""}, {"name": "Terry Cherry", "author_profile_id": "81100386769", "affiliation": "BNR", "person_id": "P279253", "email_address": "", "orcid_id": ""}, {"name": "Stephen MacKay", "author_profile_id": "81100236432", "affiliation": "NRC", "person_id": "P268552", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260353", "year": "1993", "article_id": "260353", "conference": "OOPSLA", "title": "Re-engineering design trade-offs in a legacy context", "url": "http://dl.acm.org/citation.cfm?id=260353"}