{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings OOPSLA Washington, DC-26 September-7 October, 1993 Experience Report A \nMultiple-Platform Multi-Language Distributed Object-Oriented Messaging System Yen-Ping Shan John DeBinder \nRick DeNatale Cindy Krauss Pat Mueller IBM Software Solutions Introduction Risk Reduction Approach This \nreport describes our experience in developing a The project follows a risk reduction approach that multi-platform \nmulti-language distributed object-oriented involves three major phases: messaging system that supports \nthe Common Object 1. Initial prototyping to understand the problems Request Broker Architecture (CORBA) \npublished by and scope the Object Management Group. 2. Test case driven very fast iterations to eliminate \nOur system has two major parts. The ORB Core roadblocks provides the basic communication services such \nas 3. Production configuration to produce a quality message routing, data conversion, object location, \nand system security. The Object Adapters that are implemented on top of the ORB Core adapt those services \nto the In each phase, newly uncovered facts were used to feed programming languages and their object \nmodels. The forward and backward in the 00 life cycle. The system is required to be portable to a wide \nrange of requirements, architecture, and design of the system platforms (including PC s, workstations, \nand were never frozen until the very end of the project to mainframes). Our initial targeted platforms \ninclude AIX, allow flexibility. OS/2, MVS, and Windows. We have chosen to support C, C++, and Smalltalk \nfrom the very beginning to ensure Managing the Architecture that we have coverage of the three categories \nof languages-3 GL, 00 static, and 00 dynamic. The Development of a technical solution typically follows \nsystem is also required to integrate with a variety of these steps: 00 and non-00 systems such as the \nX.500 directory Identification of the issue service, Kerberos security system, OSF Distributed . Several \ntechnical alternatives are examined andComputing Enviromnent (DCE), and messaging queuing prototyped \nif necessary and transaction services. Documentation of the recommended alternative in transparencies \n The Incubator Process Review of the recommendation with the total team Our project is an incubator \nproject. We define an If accepted, added to the architecture incubator project as a small, short, and \nfocused effort to . evaluate and understand technology that can turn into By following the above steps, \nwe ended up with more products. It is a step between research and product code than transparencies and \narchitecture development. We follow the venture capital process documentation. closely. For example, \nwe fund many incubator projects in our lab and we expect quite a few of them to fail. We Initial Prototyping \nPhase encourage people to take calculated risk. If most of the incubators were successful, then we are \nnot aggressive The initial prototyping phase started in late 1991 and enough. We believe that we can \nlearn and benefit as ended in August 1992. The goal was to understand the much from a failed project \nas from a successful one. scope and the risks of the project. Two prototypes were Stopping a looser product \nearly could easily save us developed: millions of dollars. Prototype 1 implemented remote messaging and \nobject mobility (which allows complex objects to be Addendum to the Proceedings OOPSLA 93 sent across \nthe network). It was developed in Smalltalk using TCPAP and runs on RSKOOO, SUN and HP workstations. \n * Prototype 2 continued the work in the previous prototype and added concurrency control, activation \nmanagement, and C support. Some performance tuning was done and issues related to integration with message \nqueuing and CICS were investigated. By the end of this phase, we clearly identified the requirements \nfor the next phase. To support the development of commercial applications, the system has to support \nsecurity, true data conversion, directory service, and heterogeneous platforms and languages. Such requirements \ndrove us to the conclusion that we needed to integrate with DCE to take advantage of its services such \nas remote procedure call, security, and directory services.  Fast Iteration Phase This phase started \nin September of 1992 and lasted for five and a half months. The goal in this phase is to eliminate high \nrisk items. We partitioned the system into three modules: the Object Adapters, DCE interaction, and ORB \nCore runtime. We ve gone through seven iterations each driven by test cases . By test cases, we meant \nthe test scenarios that clearly identify the desired functionality instead of the comprehensive test \ncases used in ordinary testing. At the beginning of each iteration, the test cases were developed and \nagreed upon. When the test cases are satisfied, we moved on to the next iteration. Test cases were used \nas our exit criteria to ensure that we didn t have lengthy iterations that slow down the cycle. The test \ncases are kept up to date with the most current version of the system. This resulted in a comprehensive \ntest suite that is useful in competitive analysis. Production Phase In this phase the emphasis is on \nimproving the quality of the system. The development configuration is stabilized. Activities involve: \nCompleting the functions Putting in error checking code Testing * Performance tuning 0 Developing high \nlevel tools Evaluating other ORB implementations  Lessons Learned Getting the right people is essential \nIt is essential to recruit highly motivated senior technical people who can learn fast for this type \nof project. Junior programmers do not help because they usually do not have the experience or confidence \nto independently design and implement a part of the system in a very short time. Washington, Never underestimate \nthe education cost Our project requires every team member to be familiar with C, C++, Smalltalk, DCE, \nAIX, OS/2, Windows, MVS, SOM, and heterogeneous networking. Since none of us possessed all the skills, \nwe had to spend a lot of time in education, To reduce the learning time, we designated a member of the \nteam to become the expert for each system. This person would attend the training classes (some lasted \nas long as three weeks) to learn as much as they can about the specific system, condense the materials, \nand transfer the knowledge to the team by holding a series of mini-tutorials specifically tailored for \nthe team. Early prototyping is important The two prototypes that we developed in the first phase not \nonly helped us understand the scope and the risks of the project, but also helped us design the system. \nMuch of the architecture was reused in the later phases. We ve also found that prototypes are invaluable \nin communicating the ideas to a wide variety of audiences. For a messaging system that does not have \nany user interface, it helps to have prototypes and sample applications running to help explain what \nwe are building to others. The prototypes were also used as living specification to our system. Fast \niteration requires a different configuration To facilitate fast iteration during the second phase, we \ncreated a separate code base and directory structure for each iteration. When moving from one iteration \nto another, one can copy the existing code and structure, start from scratch, or half-and-half. The consistency \nof the code across iterations is secondary to developing functionality to satisfy the test cases. Therefore, \nthe configuration management and version control system is applied only within an iteration instead of \nacross them. Three phase approach needs continuity We learned that having the same team for the three \nphases gave us the best result. It does not work as well, for example, to have a prototype team to produce \nthe prototype and then toss it over the wall to a separate fast iteration team. The knowledge and insights \ndo not transfer easily from phase to phase. integrating 00 and non-00 systems is non-trivial Some think \nthat integrating 00 and non-00 systems is merely wrappering. It is only true when the non-00 system has \nalready been partitioned in an 00 fashion or one is content to program the 00 part of the system in a \nnon-00 paradigm. In our case none of them are true. A lot of design, in addition to coding, was required \nto achieve good integration. We also found most of our problems and errors at the boundary of integration. \nWe recommend paying attention to the integration issues early since they are often the high risk items \nfor the project.  Communicating your progress and experience It is critical that an incubator project \nfrequently communicates its progress and experience during the course of the project. This could increase \nearly feedback, D.C. September 26-October 1,1993 explore potential outlets of the technology, avoid \noverlapping effort from other projects, and secure the funding and support from management.  Future \nWork In the immediate future, we would like to duplicate our experience with a large scale project. We \nwould also like to apply the principles of 00 development not only to improve product development but \nalso to improve the incubator process. Acknowledgments The authors would like to thank Cort DeVoe, Robert \nLeBlanc, Cliff Reeves, Steve Robinson, Sandeep Singhal, Rod Smith, Ying-Sheng Wen, Frank Campagnoni, \nand Becky Proctor for their help and support to the project. Contact information: Yen-Ping Shan John \nDeBinder Rick DeNatale Cindy Krauss Pat Mueller IBM, Software Solutions Cary, North Carolina shan@carvm3.vnet.ibm.com \nPhone: (919) 469-657 1 OOPSLA 93  \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Yen-Ping Shan", "author_profile_id": "81100400936", "affiliation": "IBM, Software Solutions, Cary, North Carolina", "person_id": "P305340", "email_address": "", "orcid_id": ""}, {"name": "John DeBinder", "author_profile_id": "81100037476", "affiliation": "IBM, Software Solutions, Cary, North Carolina", "person_id": "P143501", "email_address": "", "orcid_id": ""}, {"name": "Rick DeNatale", "author_profile_id": "81100541816", "affiliation": "IBM, Software Solutions, Cary, North Carolina", "person_id": "PP31046848", "email_address": "", "orcid_id": ""}, {"name": "Cindy Krauss", "author_profile_id": "81100630402", "affiliation": "IBM, Software Solutions, Cary, North Carolina", "person_id": "P48649", "email_address": "", "orcid_id": ""}, {"name": "Pat Mueller", "author_profile_id": "81544013956", "affiliation": "IBM, Software Solutions, Cary, North Carolina", "person_id": "P219825", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260310", "year": "1993", "article_id": "260310", "conference": "OOPSLA", "title": "A multiple-platform multi-language distributed object-oriented messaging system5", "url": "http://dl.acm.org/citation.cfm?id=260310"}