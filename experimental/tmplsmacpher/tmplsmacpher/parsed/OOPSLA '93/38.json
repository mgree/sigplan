{"article_publication_date": "10-01-1993", "fulltext": "\n How to Get a Paper Accepted at OOPSLA (PANEL) Ralph E. Johnson, University 0s Illinois at Urbana-Champaign, \n(moderator) Kent Beck, First Class Software Grady Booth, Rational William Cook, Apple Computer, Inc. \nRichard Gabriel, Lucid, 1n.c. Rebecca Wirfs-Brock, Digitalk Ralph Johnson: General Comments The last \nfew OOPSLA s have had acceptance ra.tes of around 12by anyone s standards. The a.ccep-ta,nce ra,te for \nOOPSLA 93 wa.s Sdue in pa,rt to a. large number of submissions, a.nd in part to a pro- gram committee \nwith very high standards. But it is also due to a ra.pidly growing community that does not all understood \nthe standards. Although the set, of standa.rds is not widely un-derstood, there is a, set of standaads. \nThere a.re many a.rea,s of disa.greement., but they are out-weighed by the area.s of a.greement. The \npurpose of this pa.nel is to try to explain how OOPSLA pa- pers a.re judged so that, it will increa.se \nthe odds that your paper will be accepted. Alan Snyder s appendix to the OOPSLA 91 pro- ceedings on \nHow to get a. paper accepted at OOP-SLA is very a.ccura.te. However, abstract rules like explain the \ncontribution of your pa.per and convince the pr0gra.m committee tl1a.t your work is correct can be interpreted \ndifferently for differ-ent kinds of papers. That is why most of the panel members will describe the way \nthat sta.ndards are applied to a particular topic. Kent Beck will give his extremely concret,e rules \nfor writing papers. One piece of a,dvice tha,t often seems t,o be ig-nored is to have your paper reviewed \nby collea.gues. Two of the most important rules are that. papers should be understandable and that they \nshould be of interest to the OOPSLA community. In both these cases, you will need outside readers to \ntell whether t.he paper is acceptable. I have a hard time telling whether a paper I wrote is easy to \nun-derstand -I never have any trouble understanding my papers. Most people are like me. Since most a.uthors \nare new to the OOPSLA community, they have a hard time telling whether the paper is of interest. Many \nproblems can be avoided by hav-ing someone else read your paper and criticize it. The best reviewers \nwill be people who are active in the area and who often attend OOPSLA, but who are from a. different \ninstitution and so do not know the work yowl a,re report.ing on. Authors of pa.pers you are citing are \ngood prospects, especially if the pa.pers were presented at OOPSLA. They can tell you whether you are \nignoring some related work and whether they are convinced by your argument. A low a.cceptance rate is \nhard on the program committee, just as it is hard on people submitting pa.pers. Members of the committee \nrea.d thirty to fifty papers, trying to write careful reviews while knowing that all but a handful of \nthe pa.pers will be rejected. Eventually they fall into the state of expecting to reject papers, and \nconsequently some-times overlook good ones, or ones that with a little improvement would be good. We \nwould a.11 be bet- ter off with fewer papers submitted and a higher acceptance rat,e. The best. way to \ndo this is for au- thors to have a better idea of what it takes to get a pa.per accepted a.t OOPSLA \nand not to submit papers that obviously a.re not suitable. William Cook: Theoretical Papers When writing \na theoretical pa,per for OOPSLA, you must remember tha,t OOPSLA is not a the-ory conference. Special \nefforts must be made to motivate and analyze the significa.nce of t.he theory being presented. Here a.re \nsome tips on getting a theory paper accepted. Give your paper a clear focus. It is far better to have \na single idea tl1a.t ha.s been thoroughly dis-cussed than a set of interesting but unfocused ideas. This \nis one of the ea.siest wa,ys to get into trouble: you may want to say t,oo much. Remember that only so \nmuch can be sa,id in twenty pages. State your thesis carefully and be sure to support it. It must be \nc1ea.r that the body of the paper sup-ports the thesis. A paper tha.t makes a cla.im but does not support \nit is fa,r worse than a paper tha.t makes lesser claims but supports them well. All too often a paper \nwill claim to provide a better or more efficient solution to some problem, but then offer no analysis \nor evidence to support the claim. Reviewers spend much of their time scanning for your thesis statement, \na.nd will read a,nything tha.t looks like a claim as one. They will then be sure to check for supporting \nevidence. Theory for its own sake is not. enough. The the-ory must prove (or disprove) some proposition \nthat is of interest to the community. It is not enough to simply give a. x-theoretic a.ccount of concept-y. \nYou must answer the question: what, does an x-theoretic analysis provide that was lacking in previous \nanal-yses? Explain how things cm be done differently as a result of the understanding the theory gives. \nAs with all papers, comparison to related work is essential for an a.cceptable theory paper. Although \nit can be difficult, a forma,1 analysis of the difference between your new theory and previous attempts \nis very convincing. Test the power of your theory against ac-cepted practice of object-oriented programming, \nlanguages, and systems. Take a real example and analyze it with your theory. Or prove that the the-ory \nis related to an existing system. An untested theory is not worth much, but a good theory should be easy \nto apply to practical examples. 3 Rebecca Wirfs-Brock: Expe-rience Papers There ha.ve been few experience \npapers presented at OOPSLA. The OOPSLA program committee would like to see more. This is an exciting \ntime for object technology. Accounts tha.t present case studies or intelligently discuss the issues of \ndevelop- ing object-oriented applications are a vital contri-bution to the advancement of our field. \nFrom our small sample of accepted papers, , we have gleaned ideas about what makes good experience papers. \nAn experience paper ideally tells an informative story on some aspect of the development, deliv-ery, \ndesign or architecture of a significant object-oriented application. The best papers present a sin- gle \nfocused topic or case study and then reflect on broader issues, On the other hand, research papers disquised \nas experiences gathered in an academic setting and papers discussing the implementation of a commercial \nproduct that are thinly disguised advertisements are inappropriate. Many potential authors with interesting \nstories don t know how to write a technical paper for a technical conference. The key to a good expe-rience \npaper is to present ideas clearly a,nd suc-cinctly. Experience papers needn t mimic the style of a research \ncontribution. For example, extensive citations or discussions on areas for future research aren t appropriate. \nHowever, they should include relevant facts, sum up key points, and cite related ideas when appropriate. \nThey also must present enough details so that others can understand and relate to the experience. Experience \npapers should assume that their audience understands object technology, current 430 methods and practices. \nIt is appropriate to as-sume that the audience does not know much about about the application area discussed \nin the paper, and tha.t they don t wish to. The audience is more interested in the important, aspects \nof a.pplication development that a,re affected by the use of ob-ject technology. Ideally, the paper should \npresent lessons learned tha,t can be easily compared with others experiences. Presenting a balanced view \nof both positive and negative aspects of the experi- ence can be illuminating. Many submissions fa,ll \nshort of their potential simply by attempting to cover too much ground. For example, when presenting \na, case study, it isn t neccesary to include coding exa.mples. When dis-cussing a project history, it \nis a.ppropria.te to suma-rize the highlights and perhaps amplify a few key points. Including too many \nlow level technical de-ta.ils is generally not, int,eresting. Pa.pers discussing detailed language specific \ntechniques are more ap-propria.te for a language specific conference or jour- nal. Grady Booth: Methods \nA good paper about object-oriented met,hods should achieve one of the following results: * ena.ble the \npractitioner to apply the nota.tion or process described in the pa.per to a. real project without requiring \nunnatural leaps of faith or gaping simpli- fying assumptions. * ena.ble the researcher to un- ambiguously \ncompare and contrast the novel, sub- tle, or perhaps even profound ideas in the paper to previous work \nin the area * ena,ble the reader to understand the purpose, activities, measures, and milestones of its \nprocess Above all, a good methods paper should have clear goa.ls, be focused, be respecting of previous \nwork, and defend its sta.tements without question. A good paper a.bout objectoriented methods should \nalso: * be much more tha,n an enumera- tion of a process without, explaination * practice good science, \nmea.ning that, like a proof, its de- scription of the method must. be clear, follow from previously-discussed \nfoundations. and unambigu-ous * provide a. bala,nce treatment: if benefits are suggested, they must be \ndefended and tempered by a discussion of the method s limitations. Method comparions papers are a special \ntopic because 1) they have been done so many times al-ready and 2) are often very poorly done, because \nthey often provide no tangible, repeatable mea-sures for comparison. A good method comparion paper must \nstate its criteria clearly, so that others can repeat the comparision in the context of their own environment. \n 5 Richard Gabriel: Program-ming Language Papers A major aspect of object technology is object-oriented \nprogramming languages, but getting a pa- per accepted that is about programming languages is very difhcult. \nI break up programming language papers into a few categories. The more clearly you can place your paper \nin one of these categories, the more likely your paper is to be accepted -this is a special ca.se of \nthe general advice to focus on one topic and make your presentation of that single topic as c1ea.r as \nyou can. Whole Cloth Languages Primary Audi- ence: experienced languages designers Papers in this category \nhave been rare since 1990. A paper in this ca,tegory presents a completely new progra,mming language, \neither in its entirety or in summary. The language would need to be quite small to fit into the page \nlimitations of the OOPSLA proceedings, and so my advice is as fol- lows: . focus on the novel aspects \nof the new lan-gua.ge -people already understand that a pro- gramming language probably has to provide \na means to do arithmetic . explain the syntax as briefly as you can, per-haps with one or two program \nexamples. Usu-ally the flavor of the language s syntax can be gotten across more briefly than you expect. \nA good rule of thumb is that. no one cares about syntax. . compare and contra.st the la.nguage with ex-isting \nones, but only in the language s novel aspects . explain clea.rly wha.t there is a.bout the new language \nthat makes it. worthy of use, for ex-ample: - does it solve a new problem? - does it solve existing \nproblems better?  Your cha.nces of getting the pa.per a.ccepted improve if the new langua.ge has at \nleast a. prototype imple-mentation. . if the la.nguage 1la.s i~nplementa.t.ion~ difficulties or would \nseem to the casually informed reader to have performance problems, explain briefly implementa.tion techniques \nyou have used or would use to overcome or mitigate those diffi-culties. . if the language 1la.s clear \nimplement,ational or performance problems, you must explain in de- tail why these a.re not fa.tal fla,ws \n. if the prototype language is sufficiently ma-ture and already writt,en up elsewhere, con-sider writing \na. language implementation pa-per. Language Extensions Audience: experi-enced language designers Papers \nthat discuss extensions to an existing pro-gramming language are still popular. If the ex-tensions you \nare proposing solve new problems or solve old problems in new ways, you should treat this paper like \na. Whole Cloth Langua,ge paper and talk about the extensions as if they were the new langua.ge. If the \nextensions solve implementation problems or focus on reducing complexity or im-proving performa.nce, \nyou should probably treat this paper like a Language Implementation pa,per. Language Implementations \nAudience: langua.ge implementors Though there are conferences that focus on lan-guage implementation, \nthere is also a core of people in the OOPSLA audience who care deeply about implementation techniques. \nHere are some rules: you must answer these questions - does the technique address a current in-adequacy? \n - does the technique enable something to be implemented that couldn t be before?  explain what problem \nyour technique solves explain the technique or a,lgorithm well enough that a, reasonably expert implementor \ncould implement it explaiii the technique simply enough that a general audience with a,verage CS credentials \ncould understand the idea proof of concept: show that your technique is effective by doing one of these: \n- proving the technique or algorithm cor-rect - or showing benchmark results if you are claiming a portable \nimplementation of something, it must run on two *different* computers or operat,ing systems (depending \non the level of portability you are claiming). In general you cannot write a successful paper based \nsolely on coding tricks, but if they are part of the solution, show them if you can do it briefly enough. \nOne possible exception to this rule is a technique that uses the computer s architecture or OS capabilities \nin a very novel way to achieve ef-fects that were either prohibitively expensive or im- possible before. \nIn considering the level of proof of concept mentioned above, make sure you are informed about the state \nof the art in presentations for the ca,tegory of implementa,tion you are reporting on. For example, garbage \ncollection papers have reached the point where merely describing the algo-rithm, even formally, or determining \nits complexity are not enough. You must either prove the algo-rithm is correct rigorously or describe \na running implementation that is essentially in production-level use. For persistent objects, simply \ndescribing clearly and compellingly a new technique without proof or providing benchmark results is acceptable \n- there is no requirement of rigorous proof or a production-quality implementation. Language Comparisons \nAudience: lan- gua.ge designers, people making langua.ge choice de-cisions A language comparison paper \ntakes two or more langua.ges and compa,res t.hem narrowly or broa.dly. A narrow comparison must focus \non the key a.rea.s of the la.nguages. This ca.n be either a, research or experience pa.per, depending \non the means of comparison -it could be at the semantic level (re-sea.rch) or at the use level (experience). \nA langua.ge compa,rison paper should be a8 paper tha.t the de-signers of each of the languages in question \nwould a.gree with. You should have people who a.re ar-dent users of each of the languages read you paper; \na successful pa,per is one that ea.ch of the rea.ders finds at least thought-provoking a.s well as infornm- \ntive regarding all the languages and a.ccura.te with respect to the favored langua.ge. . focus only on \nkey area.s -synta,x is not one of them . show strengths a.nd weaknesses of each lan-guage 0 expressiveness \nperforma.nce -adequacy . if reasonable, show or explain how to achieve the same thing in ea.&#38; langua.ge \nwhere doing it is easy in one language and hard in a.nother You rea.lly have a, lot of responsibility \nhere: Imag-ine your paper convinced an importa.nt project -such as a project to provide intensive care \na.ssis-tance -to use the wrong la.nguage a,nd the project failed. Would your name on a cute OOPSLA paper \nbe worth it? Language Critiques Audience: language designers, people making language choice decisions, \ngeneral I draw a distinction between critiques, pans, and accolades. All three of these types of papers \nfocus on one langua.ge and present arguments about their a.dequacy, usefulness, design quality, or expressive-ness. \nA critique contains both positive and negative statements about the language. A critique is not a flame \nsession. . present design, implementation, or other prin-ciples that you believe should govern language \ndesign and implementation 0 justify those principles 0 analyze the language against those principles \nThe caveats about responsibility mentioned in the Language Comparison section apply here. Language Pans \nor Accolades Audience: langua.ge designers, people making language choice decisions, general A language \npan is a critique that is entirely neg-ative; a language accolade is a critique that is en-tirely posit.ive. \nIt is extremely hard to get such papers accepted unless there is extraordinary schol-arship involved. \nSuch a pa.per must have a clearly objective ba.sis and must be very compelling. You probably have to \nbe one of the well-regarded lan-gua.ge designers to pull this off. The best way to a.pproa.ch this paper \nis as an experience pa,per in which an application failed or succeeded because of the language. . show \nwhat about-the language was crucial to the outcome of the project . if you are writing a pan, explain \nwhat featu res or capabilities would have helped . it has to be a good experience paper 433 In general, \nyou cannot get a paper accepted un-less people learn something from it; people don t want to learn what \nlanguage you like or dislike. People don t like ads. Your best bet is to submit this sort of paper to \none of the trade magazines and not to OOPSLA. The caveats about responsibility mentioned in the Language \nComparison section apply here. Language Semantics Audience: Theoret-ical programming language people \nSuch a paper presents the semantics of parts or all of one or more programming languages. Here are some \nrules: . choose a formalism tl1a.t is well-known a.nd ac- cepted . present the semantics deeply enough \nthat an expert would be able to complete it . present the semantics clea.rly and simply enough that, \na. general a.udience caa follow the idea . explain the reason for presenting the semantics -it is not \nenough to present formal semaatics just for the fun of it, there must be an existing or perceived a.mbiguity, \nunclarity, or confusion about the characterist.ics explica.ted La.ngua.ge R.eflection Audience: General \nA paper in this category explains something about languages that is either not clear, not ap-parent, \nor poorly underst)ood, or it presents a. new way of thinking about things that is compelling. There are \nfew pa.pers like this today, and many of them are formal or theoretical. An example would be a paper \nthat showed that abstract data types and classes were orthogonal ways of expressing or understanding \nmodularity. There is but. one rule: 0 present a new insight compellingly A paper in this category, if \nwell done, is highly valua.ble to the commm1it.y. /bf A note on writing Referees don t have a lot of \ntime to spend on reading and reviewing conference papers. Al-though every single one of them is devoted \nto doing the best possible and most thorough job, qualified referees ha.ve a hectic and demanding schedule. \nA referee has limited time to read your paper and fre- quent distractions to confusion him or her. Often, \nyour paper will get exactly one reading by each ref-eree. Wouldn t you like that one shot to have the \nbest effect it can? Over 2300 years ago Thucydides wrote: A man who has the knowledge but lacks the power \nclearly to express it is n.o better ofs than. ifhe never had any ideas at all. I won t, try to teach \nyou how to write, but I will give you one piece of advice: . a computer scientist is equally a scientist \nand a writer -expend the effort to learn the other half of your profession  6 Kent Beck I will not ta,lk \nabout a topic area, like my distin-guished fellow panelists. I will present the process use as I am writing \nmy papers. You can ada.pt it for your writing process, or you can use it as a check list for evaluating \nfinished pa.pers (if this is starting to sound like patterns, well, fancy that). Much of what I will \nsay is common sense , found in any book about writing. Ha.ving looked at hundreds of submissions, though, \nI can state with certainty that most, of the authors don t follow this advice. 1. Write t,o the program \ncommittee. Never forget t,ha.t before you can write to the vast, ea.ger, and appreciative OOPSLA audience \nyou must first get past the program committee. Before I begin I fix in my mind a picture of a har-ried \nPC member, desk piled with papers. Mine comes to the top. I have maybe thirty seconds to gra.b their \ninterest. R.emember that the program committee is made up of experts in the field. Even if your topic \nis of broad interest to beginners, there must still be some spark in it to keep and ex-pert reading to \nthe end. If your topic is highly technical, it may not be in an area that they are familiar with, so \nit, must reada.bly present the novel aspects of the work. 2. One startling sentence. Now that you know \nyou are writing t.0 the program committee, you need to find the one thing you want to say that will catch \ntheir interest. If you ha.ve been working on the worlcl s niftiest progra,m night and day for five years, \nthe tempta.tion is to include absolut.ely everything about it, The Foo System in All Its Glory. It.71 \nnever work. I know it s painful to ignore all those great insight,s, but find the most amazing thing \nyou ha.ve done and xvrite it down, network garbage collection is fast. and ea.sy. You wa.nt the reader \ns eyes to open wide when they re-alize what it, is you ve just, sa.id. I think some people are relucta.nt \nto boil their message down to one sta.rt.ling sentence be-cause it opens them up t,o concrete criticism. \nIf you write about the Foo System and some-one says it isn t nea.t. you ca.n just. reply, Is so, nya.h! \nIf you sa! network garbage collec-tion is ea,sy, it is a. st,at,enlent. that is object,ively true or \nfalse. You caa be proven wrong. Wait! You spent five yea.rs proving it was ea.sy. Make your case. 3. \nArgument,-problem, solut,ion, defense, related work. Now that you have a. startling sent.ence, your paper \nmust sta,nd as the argument for its validity. You a,re convincing the by now intrigued committee member \nof the truth of your amazing st,atement. Divide your paper int,o four sections. The first, describes \nthe problem to be solved. When the PC member is done reading it, they should un-derstand why it s a~ \nproblem, and believe tha,t it is important to solve. The second section describes your solution. You \na.re convincing the PC member that your solution really could solve the problem. This section is sometimes \nsupplemented with a., section bet,ween the de-fense and related work which describes imple-mentation \ndetails. Tlte third section is you defense of why your solution really solves the problem. The PC member \nreading it should be convinced that the problem is actually solved, and tl1a.t you have thought of all \nreasonable counter a.rguments. The final section describes wl1a.t other people have done in t,he area. \nUpon reading this section, the PC member should be convinced that what you have done is novel. 4. Abstract. \nThe abstra.ct is your four sentence summary of the conclusion of your paper. Its primary purpose is to \nget your paper into the A pile. Most PC members sort their papers in an A pile and a B pile by reading \nthe abstracts. The -4 pile papers get smiling interest, the B pile papers are a chore to be slogged through. \nBy keeping your abstra.ct short and clear, you greatly enhance your chances of being in the A pile. I \ntry t,o have four sentences in my abstract. The first states the problem. The second sta.tes why the \nproblem is a problem. The third is my startling sentence. The fourth st,ates the implica.tion of my sta.rtling \nsentence. A4~1abstra.ct for this paper done in this style would be: The rejection rate for OOPSLA pa,pers \nis near 90%. Most papers are rejected not because of a lack of good ideas, but because they are poorly \nstructured. Following four simple steps in writ.ing a paper will dramatically increase your chances of \nacceptance. If everyone fol-lowed these steps: the amount of communica- tion in the object community \nwould increase, improving the rat.e of progress. Well, I m not sure that s a great abstract, but you \nget the idea. I always feel funny writing an abstract this way. The idea I thought was so wonderful when \nI started writing the paper looks naked and alone sitting there with no support. I re- sist the tempta,tion \nto argue for my conclusion in t,he abstract . I think it gives the reader more incentive to carefully \nread the rest of the paper. They wa.nt to find out how in the world you could possible say such a.n \noutra- geous thing. There are my four steps to better papers. You can use them sequentially to writ.e \npapers, or you can use them to evaluate papers you have already writ-ten.  Biographies Ralph Johnson \nis the OOPSLA 93 pr0gra.m chair. Kent Beck was the OOPSLA 89 pr0gra.m cha.ir and on the OOPSLA 88 a.nd \nOOPSLA 90 pr0gra.m committees. Grady Booth was on the OOPSLA 86, OOP- SLA 89, OOPSLA 91, OOPSLA 92, and \nOOP-SLA 93 program committees. Richard Gabriel was on the OOPSLA 89 and the OOPSLA 93 pr0gra.m commit,tees \na.nd has re-viewed over 400 submissions to OOPSLA. William Cook wa.s on the OOPSLA 90, OOP- SLA 91, OOPSLA \n92, and OOPSLA 93 program committees. Rebecca Wirfs-Brock wa.s the OOPSLA 92 program chair and on the \nOOPSLA 91 and OOP-SLA 93 pr0gra.m committees. \n\t\t\t", "proc_id": "165854", "abstract": "", "authors": [{"name": "Ralph E. Johnson", "author_profile_id": "81330492373", "affiliation": "", "person_id": "PP39073924", "email_address": "", "orcid_id": ""}, {"name": "Kent Beck", "author_profile_id": "81100558273", "affiliation": "", "person_id": "PP31072252", "email_address": "", "orcid_id": ""}, {"name": "Grady Booch", "author_profile_id": "81100557878", "affiliation": "", "person_id": "PP31070836", "email_address": "", "orcid_id": ""}, {"name": "William Cook", "author_profile_id": "81406596033", "affiliation": "", "person_id": "PP39070588", "email_address": "", "orcid_id": ""}, {"name": "Richard Gabriel", "author_profile_id": "81100654724", "affiliation": "", "person_id": "PP14224317", "email_address": "", "orcid_id": ""}, {"name": "Rebecca Wirfs-Brock", "author_profile_id": "81100400353", "affiliation": "", "person_id": "PP17001255", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/165854.165934", "year": "1993", "article_id": "165934", "conference": "OOPSLA", "title": "How to get a paper accepted at OOPSLA (panel)", "url": "http://dl.acm.org/citation.cfm?id=165934"}