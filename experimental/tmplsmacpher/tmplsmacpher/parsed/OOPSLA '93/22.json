{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings OOPSLA Washington, DC-26September-7 October, 7993 Workshop Specification \nof Behavioral Semantics in Object-Oriented Information Modeling Workshop Co-Chairs: Bill Harvey (Robert \nMorris College) Haim Kilov (Bellcore) Hafedh Mili (University of Quebec at Montreal)  Foreword This \nworkshop report is organized in five sections: 1) purpose of workshop, 2) logistics, 3) technical presentations, \n4) recommendations, and 5) list of participants. 1. Scope and Objectives To understand an enterprise, \nmake its components reusable and semantically interoperable, precise specifications of behavioral semantics \nare essential. Further, as objects do not exist in isolation, modeling an enterprise involves modeling \nthe collective behavior of objects that make up the enterprise. The purpose of the workshop was to explore \nbehavioral modeling concepts, especially modeling the collective behavior of objects (using declarative \nconstructs), and behavioral abstraction and refinement approaches for aggregation and decomposition. \nSome topics of particular interest included formal specification of behavioral semantics and (attempts \nat) the standardization of information modeling concepts and the specifications of reusable components. \nThe call for participation welcomed contributions by both researchers and practitioners, as we hoped \nto achieve a cross-fertilization of formal and heuristic/informal specification approaches, and an outline \nof open practical and theoretical questions that would advance the state of the art and the practice. \n 2. Logistics We received a total of thirty submissions varying in length from 2 pages to full length \npapers. Those submissions were collected-and some manually edited and typeset!-in a 169 page proceedings \nedited by Haim Kilov and Bill Harvey, produced by Bill Harvey s home institution, the Department of Computer \nand Information Systems, Robert Morris College, Pittsburgh, Penn. The proceedings were sent to the participants \ntwo weeks prior to the workshop. Fifteen submissions were selected for presentation during the workshop, \nunder two major tracks: 1) Issues, and 2) Solutions. Under solutions, three loosely recurring themes \nwere identified: 1) modeling of collective behavior, 2) the use of formal methods, and 3) types/roles \nand operations/events. After some last minute changes, we (28 people at the beginning, a bit less 7 hours \nlater) sat through 12 presentations averaging 10 min each, punctuated with two coffee breaks (did anyone \nfind out where coffee was served, if any?), a late-lunch break, and two thematic open discussions. There \nthen followed a no holds barred, two-hour cross-fire, by the end of which we all learned how to pronounce \neach other s names correctly. This workshop builds on a workshop titled Object-Oriented Reasoning in \nInformation Modeling, organized by Haim Kilov and Bill Harvey in OOPSLA 92 [Kilov &#38; Harvey, 19921. \nSome of the participants had already participated in the 92 workshop. All of the participants this year \nexpressed the desire to do this again.  3. Technical Discussions This section is divided into three \nsubsections: 1) issues, 2) solutions, and 3) discussion. The summaries presented here do not necessarily \naccurately rejlect the entire content of the presentations, as we did our utmost to accurately, precisely, \nand unambiguously, reproduce the elaborate, deep and thoughtful positions of the capable researchers \nand practitioners who participated in this workshop, in two sentences or less. The summaries have been \ntransmitted to each speaker prior to their publication here. Also, the views presented by the individual \nspeakers and the authors of this report do not necessarily reflect those of their employers. 3.1 General \nissues Haim Kilo v: Showed the cover of the September issue of JOOP where isolated objects in a top-down \nmanner (thank you, Jim Odell) are combined into collections of objects. We need to solve business problems \nrather than to produce code. The results of doing otherwise are well- known: It is much cheaper to have \n220,000,OOO people write their last names first than to program a computer to read them the other way \naround. Why can t people just learn to do things the way that s easiest for us to Addendum to the Proceedings \nOOPSLA 93 program? (T. Gilb and G. Weinberg, Humanized Input, 1977). A lot has changed since: there are \n260,000,OOO such people. Of course, this is a problem of analysis (information modeling), i.e., of formulating \nproper specifications! We need to clearly distinguish between modeling a computer system and modeling \nthe business. We also need to make analysis disciplined: to reuse in analysis the concepts we learned \nfrom programming. The most important of these concepts are abstraction and precision. Ha fedh Milk Talked \nabout the problem of aggregating state variables and behaviors when composing objects. He argued that \nwith true state variable aggregation, the aggregated system can be described by much fewer state variables \nthan the sum of the state variables of the components. Similarly, with true behavioral aggregation, most \nindividual object behaviors are no longer directly accessible, nor are they relevant. There is a degeneracy \nof behaviors as we move up the aggregation hierarchy. Mili cites spatial integration and averaging of \nphysical variables as an example of aggregation-based abstraction mechanisms in solid physics, and argues \nthat similar abstracters would be helpful in software. Alfred Strohmeier: Provided a quick overview of \nthe various behavioral specification techniques, from decision tables, finite state machines, Petri nets, \nand program design languages (PDL), to formal specification languages. He contrasts property-based behavioral \nmodels (and languages) with model-based ones. The former give an explicit, but hard to understand, specification \nof behavior. The latter provide easier to understand models, but constrain implementation, and are harder \nto prove. In particular, it becomes difficult to specify the external behavioral without describing the \ninternal behavior more or less explicitly. He concludes that there is no silver bullet. Simon Smith: \nFollows up on the internal versus external behavior, but from a different angle. Internal behavior means \nintrinsic behavior, or behavior in isolation. External behavior is behavior-in-context, in context of \nother objects. Interactions with other objects constrain individual behaviors. Existing methods mostly \ndefine collective behavior implicitly, or by default : whatever is not permitted by the individual objects \nbased on the pre- conditions/post-conditions of their methods. He argues for more explicit behavioral \nspecifications, with constraints on the interactions, not just on individual objects, and draws attention \nto the distinction between behavior (individual) andfunction/purpose, which is behavior-possibly constrained-within \ncontext. Roger Burkhart: The problem is not only one of describing/communicating but also one of doing: \nhow do we get large aggregates of objects with non-trivial behaviors to work together? How do we achieve \ngenerality and completeness of a behavioral specification? Specification methods should describe behavior \n(what) and not prescribe it (how), and hence, argues for declarative specifications. He guards against \nformal methods tendency to introduce new notations (and characters you can t type with your typewriter). \nWe still have a long way to go to find out WHAT we have to describe, before deciding how to describe \nit. Other important issues include the need for translation and interoperation between alternative forms \nof a specification, and agreement on a basic set of concepts, sufficient to describe the behavior of \nsystems. He also mentioned the work being done in ANSI standardization Technical Committees on these \nissues. After these presentations, we had a short plenary during which participants had the chance to \nadd issues that these presentations might have missed. We had more than we bargained for. The major issues \nraised and debated: Distinction between behavior and purpose? Raised by Simon Smith, and elaborated upon \nby Roger Burkhart in relation to ODP s Enterprise Viewpoint. The very definition/boundary of behavior? \nJim Ode11 opened this can of worms. Some positions: (1) we have to distinguish between static and dynamic \nproperties (Jim Odell); (2) we can t distinguish too much between static and behavioral properties (there \nexists a duality between these): states (read static/data models ) are worth describing only inasmuch \nas they influence future behavior! (Haim Kilov, Roger Burkhart, Carlos Paredes); (3) how about behavior \n= state + rules for state evolution (Jim Odell). Do we need new concepts/notations to describe collective \nbehavior, as opposed to individual behavior? Raised by Amandio Velho. Some positions: (1) No: the only \ndifference between the precondition of an individual operation and that of a collective operation is \nthe fact that the latter refers to instance variables belonging to different objects (Burkhart, Kilov, \ncorroborated by Ashford); (2) Not necessarily: New concepts are not necessary on the abstract level, \nbut may be needed at the design level to deal with decomposition (Nakajima); (3) Yes: [we can t remember \nwhy] (Bochmann). Distinction between performers and participants when specifying behavior. Raised by \nHahn Kilov, on behalf of Bill Kent. Positions: (1) that is an implementation issue, we can consider every \nobject a participant (G. Bochmann, ); (2) that is a fundamental issue: objects should exhibit behavior \nby virtue of something essential, and not the results of tossing a coin between participants (H. Mili); \n(3) it is a fundamental issue, but what is important is identifying the initiator, rather than the performer: \nit is meaningless to distinguish a particular method parameter as a recipient (even Smalltalk has double \ndispatching) (Roger Burkhart). Coffee break! 3.2 Solutions In their angelical modesty, all those who \nspoke in this track would decline to characterize their contributions as solutions, but would enthusiastically \nexplain to you the ways in which their method can make your miserable modeling life easier: Reino Kurki-Suonio \ntalked about object-oriented modeling with multi-object actions. Such actions are Washington, D.C. September \n26-October 1,1993 specified by their participants, without designating any particular object as performer. \nActions have guard conditions (pre-conditions?), post-conditions, etc. Individual object behavior is \nspecified using state charts. Multi-object actions can be added to a system of objects at will; in effect \nadding constraints on the system s behavior. Objects inherit their participation in multi-object actions \nfrom their superclasses. The methodology, along with a CASE tool, have been in use for a number of years. \nCarlos Paredes described objects using temporal theories (attributes, actions, and behavior rules, including \npermissions, obligations, valuations, etc.) He compared algebraic models (well-defined semantics, but \ndifficult to understand) with temporal logics ones. He also stressed the advantages of rules for modeling \nbehavior: close to requirements specifications, easy to extend and reuse, and easy to merge with other \napproaches (can be easily connected with temporal logics). He noted the problem of aggregating aggregations. \nHaim Kilov argued that analysis should use concepts that are understood and explicitly formulated. In \naddition to reusing the concepts of precisely defined ADTs, we note that objects are not isolated: the \nbehavior in which an object participates is defined, in large part, by its associations with other objects. \nSuch associations are defined by their invariants and pre- and post-conditions for operations applied \nto them; these assertions refer to more than one object. Based on abstraction and precision, we provide \nan extensible library of generic associations-patterns that define behavior of collections of objects. \nThese patterns can be reused in any application. For a particular application, the formal parameters \nin the specification of a pattern (e.g., composition-containment) are replaced with actual parameters. \nThe stylized English definitions have been translated from formal ones (in Object Z). As a result, object \nbehavior is understood: specifications are complete, precise, user-friendly (implementation-and methodology-independent), \nand conformance can be checked. Gary Leavens explored extending CORBA/IDL with LARCH style, model-based, \nbehavioral specifications. Such an extension is necessary because CORBA/IDL specifies only interfaces, \nbut has no way to specify behavior. LARCH defines behavior by describing the changes in objects abstract \nvalues as a result of operation execution. The Larch style of model-oriented specifications goes back \nto the work done in 1972 by C.A.R. Hoare. The flavor proposed includes pre- conditions ( requires ), \npost-conditions ( ensures ), a frame predicate stating what changes and what doesn t ( modifies ). The \nLarch style, developed by Guttag, Homing and Wing, attaches such specifications to interfaces, as in \nIDL. Some of the avenues suggested for further exploration include: 1) developing LARCIIIIDL combinations \nfor the major OOP languages, and 2) developing a handbook of primitive behaviors and predicates to be \nused in specifications. Shin Nakajima talked about an 00 design language GILO, building on the tradition \nof algebraic specification languages specifically, OBJ-3. Work on GIL0 was motivated by the need to specify \ncollective behaviors. GIL0 specifications are executable. In GILO, individual class behaviors are specified \na la OBJ. Collective behaviors are described using contracts, which resemble parameterized modules in \nOBJ, where the parameters constitute the participant or contracting classes. The concept of a global \nstate for participating objects is used in describing a contract. GIL0 is being used to describe 00 frameworks \nsuch as Unidraw, and a methodology centered around the contract concept is being explored. Colin Ashford \ntalked about Bell-Northern Research s experience with the use of formal methods to specify OS1 managed \nobjects behavior and relationships between objects. Currently, behavior is specified using a template \nnotation in a natural language (i.e., informally). They found formal specifications (VDM) to be suitable \nfor reasoning about the desired properties of a standard. Errors and omissions in natural language specifications \nwere successfully uncovered when formal specifications were attempted. They will focus on the use of \nZ because 2 has been selected by ITU-T for specifications. Future directions will include formal treatment \nof aggregates of managed objects. In the discussion Colin noted that the semantics of a relationship \nis specified in the same manner (using invariants and pre- and post-conditions) as the semantics of a \nusual managed object. Geir Magne Hoydalsvik talked about the need to explicitly represent the different \nroles played by objects within an application domain. They propose a model that incorporates roles in \nobject modeling, providing several role nzodels (vs. a single object model) which may be integrated/merged. \nThe purpose of the role models is to provide partial descriptions of system s behavior in the problem \ndomain. They have developed a number of rules that handle different cases of integrating role models \n. . . yes, he did read an OOA&#38;D book . . . . Jim Ode11 got down to basics: How do we model behavior? \n What are we looking for? He uses the <event, condition, action> triad as the unit description of behavior. \nA behavior is noteworthy change in the state of an object. The state on an object is the collection of \nassociations that an object has with other objects. Associations include what other methodologies refer \nto as attributes, typing (the Martin/Ode11 methodology support dynamic classification) subtyping, aggregation, \netc. He goes on to enumerate some examples of noteworthy change in the state such as the declassification \nof an object. These state changes can be described using pre- and post-states (pre- and post-conditions?). \nJim provided a number of examples. 3.3 General Discussion The general discussion that followed the presentations \ntook two flavors: 1) precise questions to specific speakers addressing specific points about their proposed \nsolutions, and 2) a somewhat surprising general discussion about the very basics of behavioral modeling. \nThis second line of discussion was mainly triggered by Jim Odell s presentation, perhaps because Odell \ns presentation offered the methodologist s point of view who has to deal with a system since the early \nsteps of modeling/analysis where lots of the modeling boundaries are still fuzzy. Overall, the discussion \ncentered around the following themes:  Addendum to the Proceedings OOPSLA 93 Events: It was proposed \n(R. Burkhart, H. Kilov, and A. Strohmeier) and tentatively agreed that events may be described as noteworthy \nstate changes in one or more objects. Operations versus events: The distinction between operations and \nevents from a phenomenological point of view was discussed. Jim Ode11 proposed the temporality heuristic: \nevents are instantaneous happenings, while actions have a duration. Participants were quick to poke holes \nthrough this heuristic, as they did through any modeling heuristic proposed throughout the workshop; \nwhich is understandable because if a heuristic were any good, it would be a rule! Then it becomes a question \nof modality ( almost always, very often, etc.). Roger Burkhart proposed another heuristic: temporality \naside, an event requests an operation, and depending on the state of the receiver and the identity of \nthe requester, the operation may or may not be executed. During a very interesting discussion, it appeared \nthat operations/events may be specified either declaratively (when only the pre- and postconditions are \nof interest), or operationally (when it makes sense to ask whether Is it done yet? ). In the latter case, \nreal-time considerations may come into play. Some participants expressed scepticism about introducing \nthese considerations, unless absolutely necessary. Mark Rawson suggested that events are external to \nsystems at hand, triggering a discussion about the relativity of such concepts. The theoreticians among \nus remained skeptical about the distinctions proposed, and about the need for such distinctions (see \nbelow). Roles versus types: The two papers that dealt with roles (only one was presented at the workshop) \nallow for objects to acquire and drop roles during their lifetime. Participants discussed the differences \nbetween roles and types, if any, and the need, from a modeling point of view, to support both concepts. \nOn the first issue, the position of the participants was by and large determined by their stand on the \ndynamic classification issue, i.e., whether objects can change types dynamically during their lifetime, \nalthough some did raise an orthogonal issue: roles deal with behaviors in-context (towards accomplishing \na function or goal), while types describe external, intrinsic, behavior (see above for behavior vs. function). \nHaim Kilov noted the approach of the IS0 Reference Model for Open Distributed Processing: a type is just \na predicate, and an object may satisfy several types. Therefore, the concept of a role may be subsumed \nby the concept of a type. A template type is a type that permits creating instances. Therefore, in RM- \nODP terminology, a type is a template type, and a role is a type; an object playing different roles is \nan object satisfying different types (perhaps, in different epochs). On the merits of simple models: \nThroughout the discussions about differences between concepts, a number of participants discussed the \nrelative merits of models and notations with a simple vocabulary, versus ones with a rich conceptual \nvocabulary. Description languages with small vocabularies and production rules tend to be more interesting \nand/or tractable from a theoretical point of view, and better lend themselves to validation proofs. However, \ntoo simple models are impractical Why not, then, represent everything with Turing Machines? [Gary Leavens]. \nOn the other hand, an excessively fine-grained vocabulary is equally impractical, and we should resist \nthe temptation of giving a name to every perceptibly distinct concept. The right level of abstraction \nis good (e.g., attributes versus associations); mixing levels of abstraction is probably bad; etc. There \nis a need to provide formal specifications for the primitives we are using; this is essential if we want \nto discriminate between these primitives. Perhaps, a new primitive should be introduced only if the existing \nones are not sufficient to specify an application (H. Kilov). 4. Consensus Report Having to agree on \nsomething, we tried to put down some pretty mild, non-controversial, common-sense resolutions, hoping \nto call it a day. Wrong! Nevertheless, participants were more eager to compromise than they had been \n7 hours earlier. The following items were agreed upon: 1) Precise declarative (formal) definitions of \nconcepts (like events, operations, roles, actions, triggers, etc.) and specifications of systems based \non these concepts are essential for system specification understanding, validation, and unambiguous interpretation. \n2) There is a need to reconcile different modeling approaches by means of a small set of fundamental \ncommon concepts. 3) Collective behavior is essential for information system modeling. It should not be \nreduced to isolated object specifications. 4) An appropriate frame of reference is essential for understanding \n(e.g., business rules should be separated from computer-based implementation). Relations between frames \nof reference should be explicitly addressed. Concepts to be introduced: 5) Model evolution needs to be \naddressed. 6) Multiple roles are important for understanding how objects behave in associations with \nother objects. 7) Multiple dynamic classification is important to understand how objects behavior changes \nduring their evolution. 8) Behavioral models may need to accommodate the following aspects: i) blocking, \nii) parallelism/synchronization, iii) liveness, iv) prioritizing, v) purpose, vi) temporal ordering. \nAnd most importan t/y: 9) Let us do this again! Washington, D.C. September 26-October 1,1993 5. Participants \nReferences. Organizing committee s members names are shown in bold. Colin Ashford (BNR, Canada), Gregor \nBochmann (Univ. de Montreal, Canada), Roger Burkhart (Deere &#38; Company, USA), Greg Butler (Concordia \nUniv., Canada), Rogerio Carapuca (INESC, Portugal), L. M. F. Carneiro (Univ. of Waterloo, Canada), Yoonsik \nCheon (Iowa State Univ., USA), Sungwoon Choi (Oregon State Univ., USA), Heine Christensen (TFL, Denmark), \nErik Colban (Norwegian Telecom, Norway), Jose Felix Costa (INESC, Portugal), David D. Cowan (Univ. of \nWaterloo, Canada), Gabriel Eckert (Swiss Federal Institute of Tech., Switzerland), Frederick Eddy (GE, \nUSA), Jose Luiz Fiadeiro (INESC, Portugal), Martin Fowler (Independent Consultant, UK), Armen Gabrielian \n(UniView Systems, USA), Michael Glykas (Univ. of Cambridge, UK), Roger Goun (SunSoft, USA), Bill Harvey \n(Robert Morris College, USA), Tony Holden (Univ. of Cambridge, UK), Jon Harald Helm (Univ. of Trondheim, \nNorway), Geir Magne Hoydalsvik (Univ. of Trondheim, Norway), Hannu-Matti Jarvinen (Tampere Univ. of Technology, \nFinland), William Kent (HP Labs, USA), Haim Kilov (Bellcore, USA), Reino Kurki-Suonio (Tampere Univ. \nof Technology, Finland), Clement Lam (Concordia Univ., Canada), Gary T. Leavens (Iowa State Univ., USA), \nC. J. P. Lucena (Pontifica Universidade Catolica, Brazil), Lynn Marshall (BNR, Canada), Ian Maung (Univ. \nof Brighton, UK), Hafedh Mili (Univ. of Quebec at Montreal, Canada), Toshimi Minoura (Oregon State Univ., \nUSA), Joseph Morabito (Bellcore, USA), Shin Nakajima (NEC, Japan), Else Nordhagen (Univ. of Oslo, Norway), \nJames J. Ode11 (James Ode11 Associates, USA), Carlos Paredes (INESC, Portugal), Dunia Ramazani (Univ. \nde Montreal, Canada), Mark Rawson (Univ. of Huddersfield, UK), Laura S. Redmann (Bellcore, USA), James \nRoss (Bellcore, USA), Bernhard Rumpe (Technical Univ. of Munich, Germany), Simon Smith (Univ. of York, \nUK), Peter Sommerlad (Siemens, Germany), Alfred Strohmeier (Swiss Federal Institute of Tech., Switzerland), \nKari Systa (Tampere Univ. of Technology, Finland), Jon Taylor (SunSoft, USA), Bhavani Thuraisingham (MITRE, \nUSA), Amandio Vaz Velho (INESC, Portugal), Paul Wilhelmij (Univ. of Cambridge, UK), Robert E. Williamson \n(Dept of Veteran Affairs, USA). [Kilov &#38; Harvey 921 Haim Kilov and Bill Harvey, Object-Oriented Reasoning \nin Information Modeling: Workshop Report, in OOPSLA 92 Addendum to the Proceedings, eds. Jerry L. Archibald \nand Mark C. Wilkes, ACM Press, 1993, pp. 75-79. Addendum to the Proceedings OOPSLA 93   \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Bill Harvey", "author_profile_id": "81100589635", "affiliation": "(Robert Morris College)", "person_id": "P30438", "email_address": "", "orcid_id": ""}, {"name": "Haim Kilov", "author_profile_id": "81100225658", "affiliation": "(Bellcore)", "person_id": "PP31032884", "email_address": "", "orcid_id": ""}, {"name": "Hafedh Mili", "author_profile_id": "81410594736", "affiliation": "(University of Quebec at Montreal)", "person_id": "PP77028349", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260332", "year": "1993", "article_id": "260332", "conference": "OOPSLA", "title": "Specification of behavioral semantics in object-oriented information modeling", "url": "http://dl.acm.org/citation.cfm?id=260332"}