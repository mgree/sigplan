{"article_publication_date": "04-01-1993", "fulltext": "\n Washington, DC-26 September-l October, 1993 Experience Report Object-Oriented Programming Transition \nStrategies Reported by: Peter J. Barclay Stephen J. Jackson Caterpillar, Inc. Background: Caterpillar, \nInc., today, from a logical perspective, has a mainframe environment with approximately: 20,000 dumb \nterminals (3270, 5250, and VTlOO); 20,000 PC s &#38; workstations, that from the mainframe perspective \nact as dumb terminals; and 20,000 terminals, PC s or workstations located at dealers, customers, and \nsuppliers. Caterpillar, Inc., believes that long term it will be migrating to the three tier client/server \narchitecture with a big server or scalable mainframe; a little or local server; and local clients. A \nmajor effort is underway at Caterpillar, Inc., to manage the migration from mainframe to client/server, \nand especially the transition where both environments will be co-existing. In mid-1992, within this migration \nand transition effort, it was decided to evaluate the role object-oriented technology would play-would \nit be a key or an enabling technology? Initial Evaluation: By August 1992 the assessment was that there \nwere sufficient object-oriented tools commercially available to support the development of a number of \nconcurrent small prototypes. The hands on experience with the prototypes would then permit the evaluation \nof OOT. A team of 8 was appointed to establish the criteria for selection of the prototypes, and to determine \nthe tools and processes that would be used for development. To support the team s effort, David Taylor, \na nationally recognized OOT consultant, was retained. Current Environment: A major issue was that the \nmajority of the staff participating in the prototypes would be mainframe Cobol developers, with little \nor no PC experience. Similarly, there was little or no experience using iterative or rapid prototyping \ntechniques. In the mid- 1980 s Caterpillar had implemented an application development methodology (CCSLC), \nbased on Ernst &#38; Youngs Navigator, which was a waterfall approach. The adoption of this methodology \nhad not been uniform within CIS. Therefore, it was hoped that by selecting the prototype projects first, \nthe assigned developers could participate in the tool and supporting process selection, and avoid some \nof the problems experienced with the CCSLC. Prototype Selection: The criteria established to select \nthe prototypes was specifically designed to limit their size to enable a 6 month deliverable, for one \nor two developers. As a result 8 prototypes were proposed, and 5 were selected. The prototypes would \nbe developed in an OS/2 environment, and would execute in either an OS/2 or a Windows environment. OS/2 \nwas selected because a support group was already familiar with this environment, as some mainframe developers \nwere using MicroFocus Cobol workbench on this platform. Tool Selection: Following the selection of the \nprototypes a new team was appointed to select the OOP tools and supporting processes. This team consisted \nof the original 8 team members, the 10 prototype developers, and 1 person to provide general application \ndevelopment environment support. After lengthy deliberation the team decided to follow a pure object-oriented \napproach, that would more clearly focus on the issues related to reuse, encapsulation, inheritance, and \npolymorphism. It was evident that there were no OOP Cobol tools available with sufficient functionality. \nTherefore, the search primarily focused on Smalltalk and C++ tools. Smalltalk was finally selected as \nit was considered easier and quicker for Cobol programmers to learn. Two Smalltalk enviromnents were \nselected-one prototype would be developed using Enfin/3, a 4GL from Easel Corp.; and the remaining four \nprototypes would use Digitalk s Smalltalk/V, and OSI s Window Builder. In addition, one of the four SmalltalWV \nprototypes used Digitalk s Team/V to evaluate the dynamics of a shared library.  Methodology Selection: \nFour of the live prototypes were primarily GUI front end to existing mainframe applications. Therefore, \nthe responsibility driven design (RDD) process was Addendum to the Proceedings OOPSLA 93 selected, using \nclass, responsibility, and collaboration (CRC) cards. RDDKRC was considered best suited for these types \nof event driven applications and, compared to some of the other process, was relatively simple to learn. \nThe book Designing Object-Oriented Software, by Wirfs-Brock, et. al., was read by all the developers \nprior to any formal education.  Training Program: A training schedule was developed that included, in \nsequence: a 1 day class in 00 concepts; a 5 day class in 00 analysis and design; a 4 day basic Smalltalk/V \nclass; and a 4 day class in building applications in Smalltalk/V. The training program was conducted \nover an 11 week period. Based upon the team s evaluation, the training program would have been more effective \nif the basic SmalltalWV class was conducted prior to the 00 analysis and design class, as design is not \nindependent of language. The Enfin/ developers participated in some of these classes, and also received \nadditional training in Enfin/3. Comments on Object-Oriented Analysis and Design: The 2 groups of SmalltaWV \ndevelopers with the larger prototypes had difficulty stabilizing their designs. One reason was the physical \nnumber of cards or objects (53 in one case, and 83 in the other), which suggests that without an automated \ntool, projects either have to be broken up into smaller modules or a process other than RDDKRC should \nbe used. The biggest problem was that without some knowledge of how Smalltalk implements these objects, \ntheir selection seemed somewhat arbitrary. Another issue of potential major impact that did not become \nevident at design time, was how to handle persistent data within an object-oriented application. Much \nof this problem should be resolved with an object-oriented data base management system (OODBMS). In the \nmeantime, to address this issue one of the prototypes paid the price of moving persistent data from objects \ninto a RDBMS, and then re- instantiating those objects. Finally, the current process, with no automated \ntools, is not self documenting, especially when it comes to changing (adding or subtracting) functions. \n Observations on Iterative Prototyping: The iterative prototyping process went smoothly with both tool \nsets allowing function to be added, changed or deleted. The majority of reuse was limited to GUI and \nmainframe connectivity classes, although one group was able to reuse application classes between the \nbatch and interactive portions. Through these development cycles, mentoring was provided to each group \nby a consultant from Digitalk. The learning curve for Smalltalk is steep, and it was accentuated by the \nteam s also having to learn client/server and 092. Another issue that appeared later in the process related \nto iterative prototyping concerning the decision as to when to stop iterating. Without a formal agreement \nof project scope and requirements, the customer feels free to change the application. Results From Prototyping \nProcess: The process described delivered four of the five prototypes on schedule, the fifth project was \ncancelled due to staff being committed to other projects. Three of the five prototypes are being upgraded \nto production applications, and three new development projects have started using both the Enfin/ and \nSmalltalWV environments. For robust applications, however, a more complete methodology will be required. \nThis methodology needs to be automated and self documenting. In addition to the GUI events, it should \naddress application and data issues that build off a business model. Supporting tools need richer functionality. \nWashington, D.C. September 26-October 1,1993 \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Peter J. Barclay", "author_profile_id": "81100441593", "affiliation": "Caterpillar, Inc.", "person_id": "PP14155067", "email_address": "", "orcid_id": ""}, {"name": "Stephen J. Jackson", "author_profile_id": "81536535756", "affiliation": "Caterpillar, Inc.", "person_id": "P268412", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260314", "year": "1993", "article_id": "260314", "conference": "OOPSLA", "title": "Object-oriented programming transition strategies", "url": "http://dl.acm.org/citation.cfm?id=260314"}