{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings OOPSLA Washington, DC-26 September-7 October, 1993 Experience Report Berate \nApplications Not Just Reported by: John A. Cupparo Texaco Introduction: This paper describes Texaco \ns experience developing a MIS application using Smalltalk. Included in the discussion is a background \non the project, a description of the process used to develop the application, why the process was used \nand a summary of the benefits and challenges of object-oriented technology at Texaco. Background: In \n1990, Texaco launched an initiative to re-engineer its exploration and producing business processes and \nbuild an integrated information system to support those business processes. The Texaco Revitalization \nInitiative (TRI) was formed and divided into two major areas, Land and Gas. The Land initiative focused \non the administration of properties in which Texaco has an interest. The Gas initiative focused on tracking \nthe gas from production on a property to eventual sale to an end customer. The goal of both systems is \nto keep accurate volumes and prices for royalty and revenue calculations. The Land and Gas initiatives \nwere further divided into sub-systems which could be implemented by different teams. In addition to the \nre-engineering efforts a technology team was formed to select a leading edge technology to develop the \nnew information system. The technology team chose Smalltalk out of 5 candidates. Smalltalk was chosen \nbecause it mapped more closely to the re- engineering methodology than the other candidates and the technology \nteam believed Smalltalk offered more flexibility because it is a language instead of a tool. In this \npaper we will discuss our efforts on one of those sub-systems, specifically; the pricing system (Pricing) \nof the Gas initiative. Scope: After traversing the Smalltalk learning curve, the replacement of the \nlegacy system Pricing began in September 1992. Pricing calculates sales prices for gas sales contracts \nfor a given month and passes those prices to an accounting system for revenue calculations. 10 people \nenter data into Pricing and another 50 to 100 have browse privileges to the system.  Prototypes The \nsystem architecture for legacy Pricing includes MVS running IMS/DC with a COBOL generated user interface. \nDB2 serves as the data storage facility. TRI s replacement architecture includes 486133 personal computers \nwith MS/Windows and Objectworks for Smalltalk. DB2 continues as the data storage facility but with a \nlayer of PL/I code on top of DB2 acting as an object server. The project team for Pricing consisted of \nsix Smalltalk programmers and four system programmers. The Smalltalk programmers worked on the application \nfunctionality while the system programmers primarily worked on the connection from Smalltalk to DB2. \nDefinitions: During the early stages of the Pricing project a distinction was made between prototypes \nto help organize programming efforts and functionality delivered to the user. Two different types of \nprototypes were identified, application prototypes and programmer prototypes. Programmer prototypes are \nused to test architectural ideas, they are often incomplete in many areas. For example, a programmer \nprototype which is used to test the navigational aspects of the user interface would not have a database \nconnection because it is unneeded for user interface issues. Application prototypes are used to gather \nadditional user requirements, therefore; they are complete in almost every aspect of the application. \nFor example, an application prototype has a completed user interface, a functioning database connection \nand real data of production size and quality. Texaco found without all of these components in place it \nwas difficult for the user to relate to the application and give quality feedback on the application. \n How: While building the Pricing system, programmer and application prototypes were used extensively \nin each phase. During the analysis and design phase, programmer prototypes were used primarily to gather \nuser interface requirements, specifically: navigation, data element grouping and window layout. Once \nthe structural domain model was stable, the first application prototype called the I/O iteration was \nbuilt. The I/O Addendum to the Proceedings OOPSLA 93 iteration was the first time the users had a functional \nuser interface with a connection to a database containing live data converted from the legacy system. \nThe primary goal of the I/O iteration was to identify missing or incomplete system requirements. The \nnext application prototype built was called the Require -ments iteration. The Requirements iteration \nincluded the missing or incomplete functionality identified during I/O iteration. In addition, the Requirements \niteration included other system components such as audit and security systems which had been excluded \nuntil they were ready for integration. Finally, we built the Polishing iteration. The Polishing iteration \ndotted all the i s and crossed all the t s of the system.  Why: The major reasons for using this prototyping \napproach were politics, management, hindsight and education. Politically it was better for the team to \ndeliver an application prototype every six weeks than to deliver a completed system after a year of coding. \nThe users stayed involved and had more input on the direction of the project. Systems usually have many \ncomponents (user interface, database, data model, audit, security, interfaces, etc.). Managing the design \nand construction of all these components at once was too difficult. So with each iteration of the application \nprototype a new component was added to the system. If hindsight is 20/20, we wanted hindsight as soon \nas possible. The sooner the users had an application in their hands the sooner they could give feedback \non the effectiveness of the system. Finally, inexperienced programmers were able to learn the technology, \nbe productive and not worry about the system being perfect the fist time. Lessons Learned: This experience \nhas brought several issues to light. Using the domain model to separate the database design from the \nSmalltalk application allowed for faster iterations of the application and limited the rippling effect \nof database changes. Smalltalk s fast/flexible programming environment was a significant advantage when \nmodifying and debugging code for the user. The users were seeing problem determination and resolution \nturnaround of one hour to one day. Texaco targeted the domain model as the key source of reusability, \nthe corporate assets. When completed, the domain model should allow Texaco to use objects across organizations \nat low or no cost. Object-oriented technology inherits all the client/server issues that are plaguing \nthe computer industry. For example, performance, security, configuration management across platforms, \netc. Unfortunately, objects may get a bad rap because of something that is common to the environment. \n The client/server issues are a major hurdle for objects at Texaco. Ad hoc reporting is an important \nrequirement for Texaco. Texaco moved many applications and data to DB2 to take advantage of QMF and SQL. \nUsers were trained in SQL so they could write their own reports. Currently, objects do not have a standard \nquery language and there does not appear to be a movement in that direction. In addition, ad hoc reporting \nenvironments for objects are immature. Although Smalltalk is a powerful language, the need for vendor \nsupplied tools and frameworks is great. Products like VisualLL orks and Envy are a good start. Tools \nare needed to help with problems like debugging beyond the Smalltalk image and frameworks are needed \nto provide structure to the application development environment but still allow for the flexibility for \nwhich Smalltalk is known. In conclusion, Texaco has reaped the benefits of the Smalltalk development \nenvironment from a speed and flexibility perspective. However, a complete application development and \ndeployment environment is needed before objects will get complete acceptance at Texaco. Authors of Conference \nPresentation: John A. Cupparo James S. Thompson Texaco Washington, D.C. September 26-October 1,1993 \n \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "John A. Cupparo", "author_profile_id": "81100564051", "affiliation": "Texaco", "person_id": "P143442", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260312", "year": "1993", "article_id": "260312", "conference": "OOPSLA", "title": "Iterate applications not just prototypes", "url": "http://dl.acm.org/citation.cfm?id=260312"}