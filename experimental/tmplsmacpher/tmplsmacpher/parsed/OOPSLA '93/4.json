{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings Washington, DC-26September-l October, 1993 Experience Report Training Realtime \nSimulation Developers in Object-Oriented Methods with Ada Report by: Gary J. Cemosek Fastrak Training, \nInc. Introduction In December 1991, Fast.&#38; Training Inc. was awarded the Object-Oriented Development \nand Ada Training (OODAT) Contract let by CAE-Link Flight Simulation Co. in Houston, Texas. Fastrak began \nadministering this comprehensive training program in January 1992. I was assigned at that time as the \nlead instructor for the program, assuming responsibilities for developing and delivering courses in object-oriented \nmethods and Ada programming. This report describes my experiences with the OODAT program, including its \ntechnical foundation, overall results, lessons learned, and future direction. My goal is to have readers \nappreciate what it takes for an organization of several hundred engineers to transition into an object-oriented \nenvironment. Project Description CAE-Link is a prime contractor to NASA s Johnson Space Center and is \nresponsible for developing mission trainers for the Space Shuttle and Space Station programs. The Space \nStation systems are being developed using Object-Oriented (00) Analysis and Design methods with an Ada \nimplementation platform for both realtime and non-realtime applications. The Station trainer will be \na ground-based distributed computer system that allows NASA to prepare crew personnel for their missions \nand activities. The effort will ultimately produce an estimated 2 million source lines of Ada code. \nTraining Curriculum The original OODAT contract required Fastrak to provide a curriculum of four specific \ncourses: . Object-Oriented Requirements Analysis (OORA) (4 days) . Object-Oriented Design (OOD) (4 \ndays) Ada Syntax and Semantics (7 days) Advanced Ada (5 days) New requirements emerged for several forms \nof secondary training: Special training was required for NASA customers and the various user organizations. \nA 2-day course was given that covered 00 concepts and how to read 00 documentation. For those that had \nto review actual software designs, a half-day Ada packaging and design course was administered. To support \ngroups facing a very tight schedule, a special l-day Preliminary OOD course helped the groups reach their \nPreliminary Design Review. A fifth day of OOD training was added to provide engineers involved in realtime \napplications to learn how objects fit into their project-specific realtime software architecture. After \nassessing the background of the various students, significant modifications were made to the Advanced \nAda course to address basic data structures and reusable components engineering. Integrated with the \nformal training program was a more loosely structured mentoring function. Fastrak instructors worked \nvery closely with students in a post- classroom capacity in an effort to help guide their way through \ncritical areas of development. Mentors provided key experience in computer science and basic data structures, \nrealtime applications, software reuse, and general software engineering. A great deal of 00 mentoring \nresources were dedicated to acquiring feedback from students who were applying the methods in an effort \nto continuously improve the training materials.  Foundations in Object Technology For a training effort \nas comprehensive as this, we needed to first establish a sound foundation in object- oriented resources. \nStarting with the human resources, CAE-Link assigned David Weller, William Wessale, and later, George \nHeyworth % my technical contacts for the training program. These individuals were very well versed in \nobject technology and/or Ada, and thus provided a clear vision into what kind of training program CAE-Link \nneeded. Addendum to the Proceedings OOPSLA 93 My personal background coming into the training program \nincluded over eight years at McDonnell Douglas in Houston, most of which were dedicated to seeing the \ncompany help NASA transition to object technology and Ada. During this time, I was heavily involved with \nthe University of Houston at Clear Lake where I ultimately wrote a Master s thesis on the need for an \nobject-oriented approach to requirements analysis (May 1988). My first exposure to formal 00 methods \nfollowed shortly with the early works of Sally Shlaer and Stephen Mellor on 00 Analysis. By the time \nthe CAE-Link training program commenced, several new texts had appeared and were in large circulation. \nOur 00 courses were ultimately based primarily on the following works: Grady Booth, Object-Oriented Design \nwith Applications (1991) James Rumbaugh, et al, Object-Oriented Modeling and Design (199 1) Colin Atkinson, \nObject-Oriented Reuse, Concurrency, and Distribution-An Ada-Based Approach (199 1) Ed Seidewitz and Mike \nStark, Principles of Object- Oriented Sofiware Development with Ada (1992) Booth brought forth a legacy \nwith Ada and the recognition as a leading 00 methodologist. His text proved to be the most sound basis \nfor 00 concepts and was distributed to all students. While Booth is strong in 00 design (proper), many \nfeel that his method does not adequately address the analysis phase. Rumbaugh, et al, provided a very \nappropriate front-end complement to Booth s work. The Atkinson text had its greatest influence in the \ndetails of representing 00 designs specifically in Ada. Atkinson was a key player in the development \nof the DRAGOON language, which is an Ada-based OOPL. Since DRAGOON source code translates to an Ada intermediate \nrepresentation, his representation techniques proved to be very helpful in dealing with Ada s limited \nsupport for OOP. The work of Seidewitz and Stark formed the initial basis for our material. Their effort \nrepresented a leading technique in applying 00 development specifically within an Ada environment. Resulting \nMethodology The courseware used at CAE-Link evolved significantly from that used for the initial classes. \nA strategic decision was made to tailor the previously identified methods, resulting in the following: \nThe OORA technique is very graphically oriented, language-independent, and logical in its nature of modeling \nthe problem domain. The OOD technique is very textually oriented, language specific, and is subjected \nto project- specific architectural constraints. OORA is segmented into Static Analysis, Dynamic Analysis, \nObject Classification, and Class Specification. Static Analysis and Object Classification are very consistent \nwith the Object Modeling Technique (OMT) defined by Rumbaugh, et al. Static analysis takes full Washington, \nadvantage of OMT s treatment of associations and aggregation as they apply to requirements analysis, \nThe key mechanisms of Dynamic Analysis are Event and Effects Tables, Object-Message Diagrams and Hare1 \nStatecharts. Event tables help to analyze the abstract behavior of a system (or some component thereof) \nfrom a stimulus-response point-of-view. Each event-effect pair may be analyzed using an Object- Message \nDiagram, which provides a means for illustrating the object-message chaining that results when a given \nevent occurs. Lastly, Hare1 Statecharts provide an excellent improvement over standard state transition \ndiagrams for modeling state-dependent behavior. The notation adopted by CAE-Link is unique and was made \nso to meet the constraints of the specific CASE tool imposed by NASA. However, the notation is analogous \nwith that of the authors previously stated. (In fact, Fast&#38;. later defined a formal mapping of the \nCAE- Link notation into the equivalent OMT constructs so that the basic OORA course could be taught in \na public forum.) The OOD course focuses on mapping the language- independent OORA models into canonical \nforms of Ada packages. Variations exist between realtime and non- realtime forms, but these variances \nare managed in the private part or the body of each class s package. OOD addresses alternative mappings \nthat might be needed, as well as the limitations of implementing 00 designs into an object-based language \nsuch as Ada. Since software reuse is a major initiative for many NASA projects, the course has specific \nexercises that force students to adapt their existing work into meeting new requirements. Magnitude \nof the Training The following table summarizes the amount of total training delivered for this contract: \nCourse No. Deliveries Tot. No. Students OORA 14 255 OOD 11 142 Ada Syntax 15 211 Advanced Ada 14 158 \nTOTAL 766 00 Concepts 5 92 Ada Design 5 108 Preliminary OOD 3 22 TOTAL 222 GRAND TOTAL 988 Course Format \n All training courses employed a balance of lecture and student application. The lectures focused on \npresenting the concepts, terminology, and notations, using examples and exercises to illustrate small-scale \nsolutions. Daily workshops were also used, placing students into teams as to better simulate real project \ndynamics. Team leads were often assigned to make presentations representing their group s incremental \nsolutions to larger-sized problems. D.C. September 26-October 1,1993 Measuring the Effectiveness of \nthe Training Upon completion of a course, each student was required to formally evaluate the course. \nThe quantitative results were averaged and summarized in a standardized course evaluation summary. This \nreport was distributed to key CAE-Link and Fast.&#38; personnel so that delivery results and quality \nimprovement could be continuously monitored. A database was maintained that kept track of all courses \ndelivered, student attendance, and evaluation grades. Trends were easily identified by graphically depicting \nthe grades as a function of course and time. As would be expected, the quality and effectiveness rose \nsteadily for each of the four courses offered in the curriculum. Something rather unique to CAE-Link \ns training program is that proficiency measurement was explicitly called out for in the training contract. \nFastrak was required to administer both objective and a subjective examinations at the end of each course \ndelivered. Those students taking the course for credit had to demonstrate basic proficiency in the course \ns subject matter. Such measures greatly assisted in verifying that students met the prerequisites for \nadvanced courses. The students grades and the tests themselves were kept confidential with the instructors \nand were used only for the purpose of ensuring student proficiency. Lessons Learned After 20 months \nof administering the OODAT program for CA&#38;Link, we come to the following conclusions: OORA can be \nused to generate native requirements specifications ( to-be models), or to model existing systems ( as-is \nmodels), making it applicable to both forward and reverse engineering. Inheritance should be deferred \nto an advanced phase of the OORA training. There is enough to learn in basic object and dynamic modeling \nto consume the fist three days of training. Inheritance, polymorphism, and other more OOD/OOP concepts \nare best presented on Day 4. We found it advantageous to explicitly separate the OORA and OOD courses \non the basis of where and when to introduce language dependency and software architecture; OORA should \nproduce logical models that are independent of these concerns. A uniform process and notation should \nbe used for both analysis and design, and should be independent of implementation language and realtime \nvs. non-realtime requirements. We found that a simple compositional approach worked best for simulating \ninheritance in Ada. This required a lot of manual respecification in the subclasses, and thus constrained \ndesigners to temper their inheritance hierarchies to 3-4 levels. But the approach proved to be more efficient \nand maintainable than using variant records, and more modular than using nested or flattened packages. \nThe compositional approach was also deemed to be more migratable to how inheritance is implemented in \nthe upcoming revision to the Ada language, currently known as Ada 9X. 1 Although standard Ada does not \nsupport dynamic polymorphism very directly, its rich forms of overloading and generics provided some \nreasonable alternatives2 Portions of a training system need global visibility to all data in a system. \nThis required special tools that circumvent the data protection inherently provided by encapsulation \ntechniques. These tools were necessary so as to prevent generalized source-level access to hidden data. \nA standardized software architectural definition is required, and must be defined and put into place \nprior to developing the software design. This is especially true for realtime systems. Realtime performance \nrequirements can be met while preserving most object-oriented principles. The resulting software quality \nis significantly better than could be achieved using more traditional approaches to simulation design. \nThe 00 development process proved to be the least mature, and thus, the most difficult aspect of the \ntraining program to teach. Students familiar with user-defined types in strongly-typed languages learn \nthe object paradigm easier than those without such exposure. We feel that this was due to the analogy \nbetween the object/class relationship found in OOA&#38;D and the variable/type relationship found in \nmodem languages. Students with traditional engineering backgrounds will generally require more introductory \ntraining in basic computer science due to their lack of exposure to it in their fomlal education. It \nhelps to have instructors be well-versed in several 00 methods and programming languages, for they then \nstand a better chance to demonstrate an objective and credible posture. It helps even more to have customer \ntraining liaisons that are knowledgeable in the technical nature of the training program (as was the \ncase here).  Status and Future Directions The OODAT program is basically completed. Continued training \nwill be subject to CAE-Link s future growth and attrition. Outside of the CAE-Link effort, Fast&#38; \nhas found that a combination OMT/Booch method serves very well for general training purposes. The notation \nused in Fastrak s public OOA course is based on OMT and has proven to be very effective for introducing \nbasic object modeling. While not as semantically expressive as that of Booth, the OMT notation is adequate \nfor analysis purposes, and is certainly easier to work with 1 Although derived types in standard Ada \n83 provide half of inheritence (i.e., the operations), we found no way to effectively use the feature. \nHowever, this deficiency is well remedied in Ada 9X. 2 This deficiency is also addressed in Ada 9X. \nAddendum to the Proceedings OOPSLA 93 in lieu of having CASE tool support. However, when getting into \nthe heavier design concerns, more and more of Booth s method comes into its own. This is especially seen \nwith respect to detailed design and code generation concerns. And even with the contributions of OMT \nand Booth, portions of the overall training can still be augmented by selected aspects of Seidewitz, \nWirfs-Brock, and Atkinson. At the time of this writing (November 1993), Booth s latest edition of his \nOOD book ( Booch 94 ) is finding its way into the mainstream. Booth, along with HP s Fusion method, are \nseen as attempts to integrate the best of all worlds. The Use Cases of Jacobson and Object Behavior Analysis \nfrom Rubin and Goldberg also stand to make some contribution to the 00 methods community. In general, \nhowever, we see little room for completely new 00 methods. As the concepts and terminology become more \nstable, a yet another notation syndrome will begin to settle into the minds of many (if it hasn t already). \nThus, a maturing of existing methods is more likely to result rather than a proliferation of new methods. \nOn the CASE front, some really good 00 tools are (finally) appearing. The ones that offer multiple methodology \nsupport and end-user configurability-the meta-CASE tools-are the most promising. And the whole area of \nvisual programming could very well revolutionize what is meant by programming. But even with all this, \nI feel that the next generation of CASE technology must better manage the dependency between object models \nand their corresponding source code, specifically in synchronizing changes made to either level of abstraction. \nAs for a future with Ada 9X, there will certainly be areas of improvement for all existing Ada-based \nOOD courses. Ada 9X will include, among other things, direct support of single inheritance and dynamic \npolymorphism-the two additional elements of programming required to make Ada a true OOPL. These enhancements \nwill simplify the representation of inheritance, and thus reduce the amount of code needed to implement \n00 designs. 3 But just as C++ is said to provide for a better C, Ada 9X goes beyond simply providing \ndirect support for OOP. The CAE-Link realtime software architecture currently employs work-around? that \nwill be much better implemented in the revised language. Thus, Ada 9X will bring forth a whole new realm \nof opportunity to CAE-Link, to the Ada community, and to the realtime and 00 communities in general. \n Contact Information: Gary J. Cemosek 1303 New Cedars Dr. Houston, TX 77062 (713) 280-8508 Internet: \ncernosek@source.asset.corn 3 For those so inclined, you may contact the author for a paper presented \nto the Tri-Ada 93 conference that presents a technique for representing object models in Ada 9X notation. \n26 Washington, D.C. September 264ktober 1,1993 \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Gary J. Cernosek", "author_profile_id": "81100096458", "affiliation": "Fastrak Training, Inc., 1303 New Cedars Dr., Houston, TX", "person_id": "P93910", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260309", "year": "1993", "article_id": "260309", "conference": "OOPSLA", "title": "Training realtime simulation developers in object-oriented methods with Ada", "url": "http://dl.acm.org/citation.cfm?id=260309"}