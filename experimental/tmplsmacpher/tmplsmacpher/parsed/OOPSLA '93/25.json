{"article_publication_date": "04-01-1993", "fulltext": "\n Washington, DC-26Sepfeember-I October, 1993 The O&#38;ject Paradigm and Development Process Standards \nWorkshop Co-Chairs: James 0. Coplien-AT&#38;T Suzana Hutz-Motorola Russel Winder-University Bell Laboratories \nCollege London 1. Introduction This OOPSLA 93 workshop picks up where the OOPSLA 92 workshop on Objects \nand Iteration left off. Last year we found that standards have a strong influence on organizations ability \nto use iterative development techniques. The tie between standards and process, and the popular association \nof iterative development with the object paradigm, make this workshop s subject matter important to many \nin the industry. We thought it would be particularly appropriate to an OOPSLA crowd from the Washington, \nD.C. area, where many software contracts must pay heed to 2167A. Our initial ice-breaking around the \nroom found little overt sympathy for process standards, so much so that Bran Sellic (ObjecTime Ltd.) \nasked if anyone present would be willing to defend the role of process standards. Many voiced a feeling \nthat process standards can actually be helpful and that they should be viewed as more than just a hurdle. \nThe contrary position was also well-represented, with many recalling experiences of how badly process \nstandards had hurt their development. We all recognized that reconciling object- oriented development \nwith process standards will continue to be an issue in the near term, even if we could shed or revolutionize \ninternational, government, industry and military standards in the long term. Paul Ward noted that the \nrelationship between development process standards and software methods has always been strained. He \nnoted that development has never been sequential; what we call iteration is essential to the human creation \nof an artifact. But he prefers the term incremental to iteration. There was recurring discomfort with \nthe term iteration during the day, since it inspires visions of a process that is just going around in \ncircles. We feel that we must, and can, be more precise about the nature of the iterative processes we \nadvocate. 2. Keynote Addresses Four keynote papers were chosen from among conference faculty position \npapers to set the tone of the meeting. The papers were chosen to present perspectives typical of those \nsubmitted. 2.1 Brian Foote: A Fractal Development Cycle for Reuse Brian Foote (University of Illinois) \ndescribed his vision of iterative development to build reusable frameworks. He claims that reusable objects \nresult only from a process that is very different from traditional ones. Reusable software must be broadly \ndesigned to be general. In most domains, we don t have enough foresight up front to know what classes \nand frameworks will be reusable. It is less important that our development processes create perfect abstractions \nup front than that they support restructuring later in the life cycle. Every project reaches a phase \nwhere its structures need to be cleaned up. A project should undertake a design consolidation phase after \ncompleting its nascent design chum. Deferring this reevaluation until late in the project allows the \nproject to build on hindsight. It provides a basis to re-factor the system into classes that are more \nreusable and more resilient in light of change. For reuse to succeed, managers must be willing to budget \ntime and talent for consolidation. Brian s method is called a fractal method because the patterns of \nprocess behavior recur across time within and beyond individual applications. A macro-level development \ncurve (for example, the life cycle of a framework) has the same shape as micro-level curves (the developer \ns attention span or the lifetime of a class). We discussed how long it takes for a project to reach the \nrestructuring phase. There was also discussion about whether refactoring should be done by average developers, \nor by engineers with a highly developed sense of good design ( big brains ). Abstract thinking is a skill \nthat not all engineers have. But there is a danger in separating designers from implementors, too, as \nit leads to the problems of throwing designs over the wall. Addendum to the Proceedings OOPSLA 93  \n2.2 Kathy Reinold: We ll Do It Our Way Kathy Reinold is a manager at Bull NH, which has sites in all \nphases of IS0 certification from fully certified to those who haven t started yet. Bull has a long-standing \ncorporate-wide interest in process standards. Early attempts at process standardization were clumsy: \nthere was an early process document intended to reflect a single company-wide standard, produced by a \ncommittee of twenty people but reflecting little of the knowledge or practice of employees actively developing \nsoftware. As an alternative approach to process, Kathy had each member of her group write a task description \nof what they actually did, with a goal in mind to keep each description to one page. Though most descriptions \nwere a bit longer, they were elegantly simple, comprising three basic parts. Each description specified \nthe task inputs, including the preconditions necessary to start the task. It described what the task \ndid in four or five bullet points. Last, it described the outputs of the task and the consumers of those \noutputs. Rather than using IS0 reviewers to build a three inch thick document, her group was able to \nbuild a high-level description of process that everyone bought into, that was recognized as encoding \nactual practice, and which the organization could follow in good conscience. The specifications were \nnot only adequate to gain IS0 certification for her group, but were pointed to by Bull management as \na model for further process specification. An SET CMM audit found their process to be just short of being \nat level 3, and similarly encouraged the rest of the company to follow suit. There was discussion on \nwhether anything in the Bull approach was essentially related to use of the object paradigm. Kathy noted \nthat the process had been tuned to object-orientation, but that it was more broadly applicable. In fact, \nobject orientation was the buzzword presented to management as a means to gain permission to redo the \nprocess, playing on industry expectations that object-oriented development is somehow different than \nfor other paradigms. 2.3 Geree Streun: Practicality of iteration when Profitability is Key Geree Streun \ntalked about efforts at Fisher-Rosemont to integrate object-orientation with IS0 standards. Fisher-Rosemont \nis a company with a long history, a large corporate memory, doing geographically dispersed development \nof real-time control systems. It is a company whose process roots trace to a culture dominated by the \ndevelopment of hardware systems. They have moved to object-oriented software development in recent years, \nusing a fused method that combines OMT, Shlaer-Mellor and Wirfs-Brock. Much of their code is legacy code, \nso maintenance is a key concern, as is interworking between new object- oriented code and older code \nusing other paradigms. They have gained IS0 compliance and have been evaluated at SE1 level 2. Analysis, \ndesign, implementation and integration interact heavily with each other. They use Smalltalk for prototyping, \nand both Smalltalk and C++ (for real-time critical applications) for implementation. Fisher-Rosemont \nhas found that Iterative/Evolutionary process is practical for them. They can see the end of the small \nsteps, making the projects easier to manage. There is earlier identification of risks by everyone involved \nand earlier opportunities to address the hard problems in a project. They can identify and respond to \nsystem constraints earlier in the process. Iterative development is also practical for how they relate \nto their customer. A site typically receives about ten customer visits per week, bringing an agenda of \nwanting to know how well their requirements are being met in ongoing development. Iterative development \nis supported using traceability tools, so system components can be examined at any point for compliance \nto a given specification. Iterative development also allows them to interact with customers to solve \nproblems in innovative ways. Upper management cares about the what, not the how, of software development. \nFisher-Rosemont s process, which is reminiscent of Boehm s spiral model, helps them understand both the \nbig picture and detailed benchmarks. They can present high-level process benchmarks to management, while \ntracking implementation progress.  2.4 Frank Armour/Judy Cohen: Smalltalk in an SEI Compliant 2167A \nEnvironment Frank Armour presented the American Management Systems @MS) position on their development \nprocess. The process could map to the STD 2167A standard, which claims it is not intended to specify \nor discourage the use of any particular software development method. AMS has demonstrated repeatability \n(SE1 level 2 compliance), and have documented and integrated their process into the organization (SE1 \nlevel 3). They have started buildiug on this experience to create repeatable processes for object-oriented \ndevelopment. They are developing metrics to assess process improvement efforts, aiming at SE1 level 4 \ncompliance. One important value of process to AMS is to define process so it can be communicated and \ntaught to someone-a much different goal than compliance of behavior to a standard! AMS does iterative \nand incremental development within this framework by mapping the products and processes of their object-oriented \ndevelopmeut to the standard. Use cases and responsibility-driven development drive the generation of \nmultiple versions of software. Each new version corresponds to a 2167A Computer Software Component (CSC). \nWhen iteration is complete, the CSCs are compiled into a Computer Software Configuration Item (CSCI). \nTieing the products of iteration to 2167A artifacts allows iteration to be managed.  3. Iterative, \nincremental, or parallel? Marco Mulazzani (Alcatel) remarked that the term iteration frightens application \nmanagers. They ask: In an iterative development loop, what is the loop invariant, and when does the loop \nterminate? Management wants stability, evidence that there is progress, and assurances that the system \nmeets requirements and that development can be controlled. To appease these management concerns, many \nof the Washington,D.C. September 26-October 1,1993 faculty reported that their companies use incremental \ndevelopment instead. Incremental development uses pre-planned steps that allow managers to control development \nand to watch incremental progress in functionality. Incremental development is widely used in Alcatel, \nparticularly for large projects with millions of lines of code. This approach is used to extend existing \nsystems over product lifetime of 20 years. What differentiates incremental development from conventional \ndevelopment? The increments possible should be smaller than when using conventional techniques-particularly \nif the project starts with the object paradigm.  4. Customers and Beneficiaries of Process Many faculty \nemphasized the strong tie between development process standards and management. Standards seem more tightly \ncoupled to management needs than to the needs either of the customer or of the software developer. Kathy \nReinold (Bull NH), when asked whether she was management, replied that she had been in a management position \nand that she had to convince or justify to managers how the project knows it s making progress. In the \nend, they did the process work because they knew it helped them out: Bull would have gone to the trouble \neven if there hadn t been an IS0 certification goal. John Hemdon (AT&#38;T) noted the affinity of management \nfor waterfall-like approaches. His organization has hundreds or thousands of developers. Managers need \nto be able to linearly extrapolate from where they are to where they need to be. Waterfall gives managers \nthe sense of security that they can do that: if they know what stage of the process they are at, they \nknow how many are left and can gauge progress by succession through waterfall stages. To feel that they \nare successful, managers need to feel they are in control. To be successful, they need to be able to \npredict schedules. It is important that these management needs be fulfilled. Frank Armour (AMS) underscored \nthe importance of the management function. He noted money is often tied to checkpoint or deliverable \nbenchmarks. Projects must provide a level of control without micro-managing. The workshop identified \na solution to this problem that recurs in many companies, a solution for which we adopted the name filtering. \nFiltering is the ability of an organization to let its developers do iterative development, while painting \na picture of more orderly development for management. Richard Gabriel noted that the common need for \nfiltering may be driven by a common underlying management background. If the CEO s background and training \nare as an MBA, then everything below the CEO is an abstraction to be managed. This is a cultural issue \nin American management that gives rise to a need for process: It helps managers deal with the difficulties \nof treating their organizations as abstractions, instead of helping developers. He contrasted this with \nLucid s culture, where all developers own stock and can read a cash flow statement better than most investors \ncan. Developers have a high degree of autonomy at Lucid. Management defines business objectives, and \ndevelopers go away and fulfill them. He posed a provocative question to the group: Do development Addendum \nto the Proceedings OOPSLA 93 process standards exist only to compensate for inadequate management practices? \nMost faculty agreed. This is consistent with Jerry Weinberg s observation that process management is \nimportant only for organizations whose SE1 maturity level is three or less. [WEINBERG] Organizations \nwith a level four or level five maturity are self-directed, self-organizing teams. Lucid is likely in \nthis latter category, but the interesting question remains as to whether such organizations would be \nhighly rated in a CMM audit. Bran Sellic remarked that there are two separate processes: project management, \nand the development process. Project management must be linear, while the development process usually \nis iterative, mostly at the micro-cycle level, but to varying degrees at higher levels of abstraction \nin the organization. If both processes are the same, then managing them is easy. Understanding objects \nand their prospects for payoff requires dialogue between hackers and the folks who write the paychecks. \nParnas was quoted as having noted how to fake a development process. [PARNASS] The faculty felt that \nit would be easy to pass an IS0 audit while maintaining only a low degree of faithfulness to claimed \nbehavior. Jorgen Norberg (IBM) remarked that the IBM experience was that their development was faithful \nto the description used for IS0 certification.  5. Is Quality Free? We spent part of our time focusing \non the question of whether process standards reduced or increased the cost of development. In the end, \nthis is necessarily a subjective question: The economic feedback loop from long-term high quality is \nindirect and long-term. Bran Sellic pointed out that the effort required for IS0 certification is more \nthan small companies can afford. Much new software is being created by small companies for niche markets, \nand increasing standards pressures will make it increasingly difficult for them to compete with larger \nfirms. Whereas past markets focused on product-based competition, the market of the future will pry into \ncompanies inner workings as a basis for competitive evaluation or even product blackballing. The cost \nis high even for medium- and large-scale development organizations In Bull at the Billerica site, it \nis estimated that between 20 and 25 people worked 1.5 years for IS0 certification of a site of about \n500 people. And there is no guarantee that the benefit will be high. There was a fair amount of consensus \namong the faculty that it is easy to cheat an IS0 specification and audit: You can do minimal work, document \na bad procedure, and still gain certification.  6. Conclusions We agree that we need processes that \nare lighter weight. Current process standards are too detailed, lacking focus on the more important, \nmore abstract benchmarks and hallmarks of goodness in an organization. IS0 9000 series process standards \ncan be reconciled with object-oriented development, but only if they are maintained at a sufficiently \nabstract level. Good development requires iteration and parallelism that 101 make development irreproducible \nat atomic levels. If the standard is at a sufficiently high level-such as that at Fisher-Rosemont Systems-then \ndevelopment activities produce appropriate information for all organizational levels. The technical 00 \ncommunity has a duty to work with process people to ensure that while development procedures support \nstandards, the procedures should also support efficient, cost-effective work practices. We should be \nsmart about how we adopt process, and not just view process as checking boxes off a list. Vocabulary \ncontinues to be a serious issue, as was noted frequently at ICSP/2. Small teams like Richard Gabriel \ns report levels of productivity that are astonishing compared with industry averages. While some aspects \nof his virtuoso approach to software development may not be relevant to larger organizations, we should \nexamine the experiences of organizations like his to determine which of their process and organizational \ninsights might be transferred into bigger organizations. Iteration should take place as early, and as \ninexpensively, as possible. J. 0. Coplien S. M. Hutz R. Winder  References [PARNAS] Parnas, D. L., Clements, \nP. C., A Rational Design Process, How and Why to Fake It, IEEE Transactions on Soflware Engineering, \nJan. 1980. [WEINBERG] Weinberg, Jerry. Quality Software Management, Vol. I, New York: Dorset House, 1991. \n Washington, D.C. September 26-October 1,1993 \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "James O. Coplien", "author_profile_id": "81100241805", "affiliation": "AT&T Bell Laboratories", "person_id": "P131960", "email_address": "", "orcid_id": ""}, {"name": "Suzana Hutz", "author_profile_id": "81100558269", "affiliation": "Motorola", "person_id": "PP31047637", "email_address": "", "orcid_id": ""}, {"name": "Russel Winder", "author_profile_id": "81409595252", "affiliation": "University College London", "person_id": "PP39043036", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260341", "year": "1993", "article_id": "260341", "conference": "OOPSLA", "title": "The object paradigm and development process standards", "url": "http://dl.acm.org/citation.cfm?id=260341"}