{"article_publication_date": "10-01-1993", "fulltext": "\n Strategies for Object-Oriented Technology Transfer (PANEL) Dennis de Champeaux, Fuure Inc. &#38; Onto00 \n(moderator) Andrew J. Baer, American Munagement Systems, Inc. Brian Bernsen, McDonnell Douglas Aerospace \nEast Alan R. Korncoff, The Boeing Company Tim Korson, COMSOFT &#38; Clemson University Daniel S. Tkach, \nIBM International Technical Support Center 1 Background 00 has won the battle, but the war is not yet \nover. Success stories have been reported. Reuse has been observed in practice. Work is progressing to \ndeal with a full lifecycle and to tackle mega systems. While the tra.nsition to 00 ma.y or may not be \nobvious for an individual, it is a complex affair? if not a nightmare, for large organizations. Program-mers \nin divisions are often eager to go 00, their managers are often hesitant. A recurring question is how \nto deal with the large body of existing soft-ware that must keep running while at the same time it becomes \nmore and more of a lia.bility. Cor-porate software research may be miles ahead of what goes on in divisions, \nbut it is not obvious how to transfer these insights and practices into divisional trenches. VVe can \nrephrase these topics into the following groups of questions: Technology Transfer There is a wide arsenal \nfor impacting software work practices. These in-clude training, using internal or external ex-pertise; \ndevelopment of a.dva.nced prototypes in a corporate lab which a.re transferred to di-visions; a,nd temporary \ntransfer of people from a corporate think-tank to divisions and/or the other way around. What a,ctions \nyield the best pay off and what are optimal circumstances for their application? Software Process Maturity \nImproving SW de- velopment processes is getting increased atten-tion. Hence we can ask for the circumstances \nunder which it is preferable to stick to an ex-isting (structured) paradigm and strive to im-prove development \ndiscipline or alternatively when it is warranted to do an 00 paradigm shift,. Can we formulate a rule \nof thumb of the form: An organization should improve its SE1 maturity level to X before considering a \nparadigm shift to OO? If not, why not. If yes, what is a recommended value for X? Legacy Systems Folkore \nhas it that the legacy problem can be attacked by wrapping an exist-ing system inside an object and that \none sub-sequently objectifies the inside layer-by-layer or subsystem-by-subsystem. This is minimal advice. \nCan we expand it?  2 Andrew Baer While many organizations have small pockets of object technology development, \nvery few have moved to la.rge scale development of mission crit-ical business systems. Using object technology \nto design, develop, a,nd deploy these types of systems requires more than learning a new language, and \nmore than just learning how to fully take adva.ntage of an object development environment. Using ob-ject \ntechnology on this scale requires understand-ing how objects impa.ct every fa,cet of the system development \nlife cycle. Transitioning the Organization to Object Technology Large organizations transitioning to \nobject technol-ogy must choose between an evolutiona,ry approa.ch and a revolutiona.ry approach. The \nrevolutionary approach suggests that it is best to warp directly to building large complex object systems, \nlearn-ing what you need to learn through the school of hard knocks . The evolutionary approach recog-nizes \nthat people and organizations will learn and adapt more efficiently through a phased transition to object \ntechnology. I suggest that while the rev-olutionary approach may work for a very few orga- nizations, \nthat the evolutionary approach will be best for the large majority of those organizations responsible \nfor developing large-scale mission crit-ical business systems. Daniel Tkach suggests that the phases \nfor an evo- lutionary change t,o object technology are aware-ness, exploration, transition, and habit. \nIn de-veloping a strategy to effect this change, an or-ga.nization must a.ssess where they are along \nthis spectrum. In doing so, the organization must also recognize that the move to object technology does \nnot usually occur in isolation. It is normally ac-companied by a move to other technologies such as client/server, \nGUI, and distributed data. There-fore, to develop a.n effective transition strategy, an organization \nmust assess where individuals or groups are in rela.tion to the phases of evolution-ary change for each \nof the new technologies being introduced. Of the many activities that are undertaken as part of transitioning \nto object technology, I would like to focus on four key activities. First, make sure to plan for ext.ensive \ntraining and mentoring. Learning object technology is not simply learning the syntax of a new la.nguage. \nIt requires the de-signer and developer to extend their model of the software development process. Make \nsure that ev-eryone working on object technology projects gets ha.nds-on experience with the technology. \nThis in-cludes some limited hands-on training for designers and managers. Second, create a central object \nsupport team to initially champion object technology, to seed new project teams, and ultimately manage \nthe cor-porate reuse library. The central object support group member working on an object project has \nthe responsibility to make sure that the project is aware of the designs and objects available in the \ncorporate reuse library, is responsible for helping the project t,ea.m to utilize these reusable objects? \nis responsible for helping the team to develop new ob-jects (or extensions to existing corporate reusable \nobjects) in a way tha.t is consistent with the es-isting library, and is responsible for incorporat,ing \nthese new objects (or extensions) into the corporate reuse libra.ry. Without this central staff, it will \nbe difficult to make reuse an effective corporate prac-tice. Third, develop a reuse plan and a vision \nof the basic architecture of your object technology a,p-plications. It is more likely that you will crea.te \nreusable objects during your early projects if the designers and developers working on those projects \nhave a vision of the objects that are most reuseful for your orga.nization. As part. of your reuse plan, \ndevelop a strategy for building your reuse libra,ry, and a strategy for fostering reuse. Finally, understand \nthe methods and techniques you will use to make object technology a repeat-able and defined process. \nObject technology im-pacts the system development life-cycle. It doesn t require us to un-learn what \nwe already kno\\v? but it does require us to adopt new practices and proce-dures. At AMS our research \nfound that while many object technology experts have put forward ideas on object design, and have developed \nnotatious for documenting object models, no one has doc-umented a complete analysis, design, and develop-ment \nmethodology for large scale business systems. To provide this full system life-cycle support, we chose \nto select portions of several object method-ologies and combine them in way that works for the types \nof projects we undertake. SE1 Maturity Level 3 Brian Bernsen It is not necessary to achieve a specific \nlevel of soft- ware engineering ma.turity prior to transitioning to object technology. However, I believe \nan organiza-tion will want to move towards an SE1 level of at least 3 to maximize the benefits of reuse. \nMaxi-mum reuse will occur when the elements (both de-signs and code) adhere to a format and standards \nused across an organization. Having a repeatable and defined software engineering process will foster \nreuse.  Legacy Systems While some object zealots would like to believe that we ca.n just ignore legacy \nsystems, the ma,jority of professionals in our industry understand that no technology is appropriate \nin all cases. In the short term, our ability to identify successful strategies for working with these \nlegacy systems may determine the pace at which large organizations can move to object technology. In \nlooking at the functionality of legacy systems it is important to categorize them by their opera-tional \ncharacteristics. On one end of the spectrum, some legacy systems are massive data handlers and require \nvery little user interaction (e.g., large billing systems like those found in the telecommu-nications \nindustry or mailing list processors). At t.he other end are those systems that are highly in-teractive \n(e.g., customer support systems). While there are certainly exceptions to any guideline, it has been \nour experience that a.n organization re-ceives the most benefit from migrating those sys-tems at the \nhighly interactive end of the spectrum first. These systems can benefit from the advanced user interface \ncapabilities available on distributed hardware! and can benefit from the response time improvements of \ndistributing the work load across a range of CPUs. The organizational benefits include bett.er customer \nsupport, reduced training of cus-tomer support personnel, and reduced mainframe costs.  Technology Transfer \nSoftware technology transfer is perhaps more dif- ficult than other types of technology transfer due \nto the abstract (and creative) nature of the design process. Likewise, it is more difficult to justify \n(in a capital budgeting sense) the investment in tech- nology and technology transfer. However, there \nare a number of components to successful 00 technol-ogy transfer? many of which apply to all kinds of \ntechnology transfer. Management sponsorship and commitment is a key ingredient in 00 technology transfer. \nMan-agement must understand the costs and benefits of technology since they provide the budget source \nfor training and tools. Cost-benefit analysis and tech-nical overviews should be prepared and presented \nto management to elicit their support. Organizational support should be provided by a technology center \nwhich selects and develops 00 technologies for in-house use a.nd applies these tech-nologies to pilot \nprograms. As technology is trans- ferred to production projects, the technology per-sonnel can move with \nit. They can serve as chief methodologists and act as a resource to other soft-ware engineers? or they \ncan serve as chief software architects laying 00 frameworks for others to re-fine. (This is an effective \nway to spread the fait , but does not obviate the need for formal training of all software engineers.) \nOrganizational and/or work breakdown structures should reflect object hi-erarchies vs. functional to \nfacilitate the technology transfer. Training is the most important means of 00 technology transfer. Everyone \ninvolved in the soft-ware development process should be trained in-cluding project managers, system engineers, \nsoft-ware quality assurance, and (in many cases) the customer, with the training tailored for the tar-get \ngroup. Alliances with academia can provide both training and trained individuals (for an ex-panding workforce). \nRe-training of an established workforce is more difficult since old met,hods must be unlearned ? and \nthere may be substantial iner- tia. to overcome in an organiza.tion that has devel-oped (and may be \nsupporting) applications devel-oped with other methods. This re-training is best accomplished in hands-on \nworkshops. Classroom training and the distribution of manuals and texts is not sufficient. The use of \n00 languages and tools can accelerate the training process and help to en-force the methods. 00 software \ndesign should be ta.ught in the context of the software engineering principles on which it is based (e.g. \nmodularity and a,bstraction). 00 technology and processes will be refined and developed on the first \nreal project to which it is applied. A flexible schedule a.llowing for this learn-ing curve is crucia.1. \nIn general, schedules and devel-opment plans providing for prototypes, re-design, a.nd re-code are indicated \nsince a. quality 00 design is difficult (if not impossible) to achieve in a single iterat,ion. SE1 Maturity \nLevel There is some relationship between the SE1 level and the feasability/ease of a transition to 00 \nmethods. The SE1 level can certainly influence the ease and duration of a transition to an 00 method. \nThe transition can only be as orderly as the SE1 level. According to the Capability Maturity Model (CMM) \nfor Software (Version 1.1, Software En-gineering Institute, February 1993), the software process in an \norganization at level 1 is constantly changed as the work progresses, thus a transition to 00 would be \ndifficult to effect or measure. This would not necessarily mitigate the effects of train- ing, an essential \npart of the transition. In fact, the shift to 00 and higher SE1 levels might well be concurrent. On the \nother hand, while the transition to 00 might be more orderly in orga,nizations at levels 3-5, it might \nalso be more difficult in the sense that existing processes are (as described in the CMM) practiced, \ndocumented, enforced, trained, (and) measured , which may imply some inertia to change. Organizations \nat level 5 are continuously improving , but a shift to 00 would likely require quantitative justification \nfor an organiza.tion at this level. Any informal, grass roots movement to 00 would likely not be possible. \n In short, there is not a minimum SE1 level below which a shift to 00 is not prudent, however orga-nizations \nat level 1 should consider the transition to 00 concurrently with increasing the SE1 level. Legacy Systems \nBefore considering the question of how to trans-form a legacy system to 00, it is essential to ask the \nquestion why ? . The conversion of any legacy system to an 00 system must be examined from a business \nperspective. It may not be cost effective or advisable to transform an existing system which has been \ntested and is in a maintenance phase to an 00 one. Perhaps the legacy problem is simply acknowledging \nthat there will always be systems which are not. 00 and should not be converted. It may be the case that \n00 is only cost effective on new or extensively modified systems. Converting an existing system piecemeal \nmay also aggravate the legacy problem since there is no clean sheet to start from. For academic purposes, \ncreating objects subsyst,em by subsystem might be difficult due to the fra.gmentation of the prop-erties \nassociated with each subsystem. It may not be possible to make a clean cut into an existing system to \nextract a subsystem and the logic asso-ciated with it. Furthermore, at any point in the conversion, you \nhave an inconsistent system. A layer-by-layer conversion makes more sense and provides consistency within \nea,ch la,yer converted, but again, it may not be possible to extract these layers without substantial \nre-work of code in other layers not yet extracted. For several reasons then, the conversion of a.n existing \nsystem to 00 may not be advised. If an 00 system is desired, a clean break with the old system should \nbe established to foster a clean sheet 00 design, with the old system viewed as a black box from which \nperformance requirements can be established.  Alan Korncoff Technology Transfer It s a good news-ba,d \nnews situation: The good news is: if you are already successful in technol-ogy transfer of software projects, \nthe skills that you have developed are directly applicable. 00 technology transfer is not much different \nthan the transfer of other software technology. The bad news is: if you haven t figured out how to do \nsoft- ware technology transfer, transferring 00 technol-ogy is just an a,dded burden. Keys to successful \ntechnology transfer include the following. 1. Establish internad expertise. Either hire it or train the \ninternal staff. Use of external consultants is, at best, a short term, stopgap. It ma.y be possible to \nprovide inter-nal training cost effectively: e.g. at Boeing the majority of Smalltalk programmers were \nself taught using a tutorial included with the soft-ware. Supplemental training can be purchased on an \nas needed ba.sis from various vendors and consultants. 2. Leverage a central staff but involve sust,aining \nsupport st.aff. A central staff should do the initial develop-ment assisted and supported by the team \nwho will eventually undertake system maintenance. The project plan (cost a.nd schedule) should allow \nfor the added time to perform this tech-nology tra.nsfer. The team should also involve end users. 3. \nChoose a small problem to establish an initial success. Size selection should be based on the ability \nto produce a production system with measurable return on investment within 1 to 2 years. Re-quirement,s \nof a longer time period risk losing management, support. Do not pick a mission critical applica.tion; \nthe visibility of a failure incurs unnecessary risk. Do not pick a legacy system; t,he resistance to \nchange will impede technical progress. Do pick a problem where the domain readily supports and suggests \nthe identification of objects by other than the de-velopment team, i.e. the end users and respon-sible \nmanagement. 4. Plan for impacts to standards and policies. The use of 00 technology may not be ac-counted \nfor in the e,xisting software develop-ment infrastructure. Areas most often im-pacted are quality assurance, \nespecially vali-dation and verification; software certification; documentation; software standards; and \npro-gram scheduling. Many of the policies and procedures developed for traditional software development \nmethodologies will have to be modified or extended to be applicable to 00 work. Team with those responsible \nfor these standards and policies to perform the neces-sary adjustments. 5. Concentrate on selling management. \nEmphasize that using 00 technology, enables the solution to be provided, BFC (Better? Faster, Cheaper). \nLeverage the capability of rapid prototyping as an enhancement to gathering end user requirements and \npermit-ting higher end user involvement in the de-velopment process. Rapid prototyping is also an effective \nmanagement communication tool; show a working version of the system rather than a requirements document. \nIndicate the value of reuse in the development of other ap-plications as part of the long term business \ncase. Do not refer to the work as a paradigm shift; this holds a negative connotation to many managers. \n6. Plan for object reuse. Though a powerful capability afforded by 00, reuse does not just happen. Reuse \ndoes not just mean developing specifications for objects with intent of facilitating reuse. Provisions \nhave to be made for a variety of infrastruc-ture issues including reuse library definition and maintenance; \nlegalities in reuse; incentives for developing and reusing objects. Acceptance. Activities that we \nas 00 profes- sionals can do to speed the acceptance of our tech- nology: 1. Devise a set of 00 software \ndevelopment met-rics. Management is well aware (or at least believes that it is well aware) of the estimated \npro-ductivity of programmers using traditional de-velopment means. It is possible to estimate how many \nprogrammers of a, given level ma-turity can cut x number of lines of code in y days. Such metrics afford \na level of comfort to management that appropriate levels of control and tracking are provided for in \na development project. We need to develop such metrics for 00 work. 2. Develop language standa.rds. \n For example, the ANSI Technical Committee X3J20 for Smalltalk. 3. Amass a library of success stories. \nIdentify projects whose success was made pos-sible or at least enhanced by the use of 00 technology. \nWe need to be able to show re-turn on investments. The successes should be in a variety of domains. \n Maturity Level There are really two separate issues here: (1) Use of the technology for application \ndevelopment and (2) Large scale 00 Reuse. My position on the first has been: The shift to 00 does not \nseem directly related to maturity is software engineering. Two disparate groups have been shown most \ncapable in leveraging the technol-ogy. First are the Hackers. These are individuals who are always the \nfirst to tryout a new technology independent of what it is. The second group is the Domain Experts with \nlittle software development maturity. For these 00 just seems like a very nat-ural way of modeling their \nproblems and the visual programming environments are a major productiv-ity boost in reducing the learning \ncurve. The in-dividuals for whom the shift appears most painful are those well schooled in classical, \ntop-down struc-tured development. This group have to unlearn an analysis methodology and a way of viewing \na problem solution. It is almost as if their maturity gets in the way. Large scale reuse (i.e. company-wide \nor at least outside of the development group who origina,lly created the objects) requires appreciable \nsophis-tication in a variety of issues beyond just object definition and development. There are few com-panies \ncapable of effectively levera,ging reuse for traditional software modules. Maturity in man-aging these \ntraditional software reuse issues is a. pre-requisite for undertaking large scale 00 reuse. Legacy System \nObjectification Common characteristics of legacy systems tha.t are relevant here include: Mainframe \nhosting. Layers of patch code obfuscating essential functionalit,y. Fra,gility with respect to cha.nge. \nProvide mission critical services. In light of this, recommendations for applying 00 technology include: \n1. Legacy databases should be left intact. 2. Layering may not be a good fit. The pa,stiche of patches \nis unlikely to support objectifica-tion of successive layers; the patches are rarely so accommodatingly \narranged. Further, there is no guarantee that. an arbitrary legacy sys-tem would benefit from objectification. \nWe all know that 00 is not a panacea. 3. Consider an 00 client. One approach is to create an 00 based \nclient process running on  a worksta,tion providing access to legacy func-tionality accessed as a server. \nThe 00 client process would be configured with an appro-priate GUI. Successive functionality could be \nselectively migrated from the server legacy sys-tem and incorporated into the client process. Advantages \nof the approach include: (a) the migration process would be transparent to the end user; (b) minimad \nimpact on existing, of-ten mission critical functions; (c) the comput-ing power originally only available \nfrom main-frame systems is now likely more cost effec-tively provided by the workstation; (d) mini-ma,1 \nor at lea,st well defined impa.ct on the frag-ile system.  5 Tim Korson High Leverage Technology Transfer \nAc-tivities Technology transfer activities depend on the stage of technology adoption. Daniel Tkach has \nde-scribed the stages as: Awareness! Exploration, Transition, a.nd Habit. I would like to focus my remarks \non the transi-tion stage. There are many appropriate activities for this stage tl1a.t have been extensively \nexplored in the literature. Most of them are not unique to OOT and therefore not as interesting to explore \nas those activities that are more directly related to OOT. My experience is that the creation of 00 domain \nspecific libraries and frameworks is one of the high-est leverage activities appropriate to the transition \nstage. These libraries and frameworks can serve as a focal point for many of t,he other more traditional \ntransition activities. For example, the 00 train-ing curriculum could now include courses on these frameworks. \nIn a.ddition 00 apprenticeship pro-grams can be structured around the continued de-velopment and maintenance \nof the libraries. Most importa*ntly, development teams will now staat to use these libraries and frameworks, \nwhich will au-tomatically propagate the use of OOT. Another very high leverage activity is the cre-ation \nof a corporate object center whose sole mis-sion is to fa.cilita,te the transfer to OOT. This center \nis charged with activities such as: 1. Coordinating other corpora,te bodies such a.s the process group, \nmeasurements group, test-ing group? training department, R&#38;D group, etc. to make sure that they underst.and \nOOT and it s impact on them; 2. Producing handbooks and guidelines for the support of development teams; \n 3. Maintaining a staff of 00 experts to serve a,s project ment,ors; a.nd 4. Lobbying upper level management \nfor the ap-propriate policy and organizational changes.  Even when an organization has an existing tech-nology \ninsertion group, the temporary creation of an object center staffed with 00-specific change agents is \na good idea. Many companies are doing this. For example, IBM has a generic technology insertion group, \nbut has recently also created an object technology center.  SE1 Maturity Level I do not see any need \nfor an organization to be at a certain level of maturity before moving to OOT. In fa.ct t,he more ma.ture \na. soft,ware development, organization, the more likely it is that the organ-zation will be reluctant, \nto move to OOT because of the immature state of the process infrastructure for 00 software development. \nMost organizations support a variety of develop- ment efforts. Consider a health care organization that \ndevelops billing, payroll and other standard DP systems, but also develops labora,tory analysis software \nand other patient care systems that deal with on-line retrieval of s-rays, EKGs etc. The DP systems are \nprobably based on a stable technol-ogy with a reasonably mature development process. The advanced multimedia \nand embedded systems are the more likely candidates for OOT precisely beca.use the development organization \ndoes not yet have a mature technology and process for these sys-tems. 443 Legacy Systems The idea of \nwrappers is often presented as a so-lution to the problem of making legacy systems look 00. However, \nwhy should legacy systems have to look OO? Most corporations already have a mix of software technologies. \nOOT is one more technology to add to the mix. It is a mis-take to assume that all legacy systems should \nbe converted at some level to OOT. It is true that 00 systems will need to be able to interface with \nsome legacy systems, and that some legacy sys-tems should be migrated to OOT, but there are numerous \nways to accomplish this. Wrappers are often indicated when the new 00 systems are writ-ten in a pure \nOOPL like Smalltalk and the legacy systems are in a language like COBOL. However, most commercial systems \nare written in a hybrid language. When the legacy code is written in the base language of the 00 hybrid, \none could choose to recompile the old code with the hybrid compiler. In addition lightweight interface \nprocedures are of-ten indicated.  6 Daniel Tkach The position presented in this panel draws from my \nexperience as the consultant responsible for the transfer of technology projects in the field of object-oriented \ntechnology at the IBM Inter-national Technical Support Organization (ITSO), which is a worldwide transfer \nof technology in-stitution. The ITS0 has centers close to the main IBM hardware a.nd software laboratories \naround the world. The objective of those centers is to transfer technology from where it is created -the \nlabs -to where it is needed in the organization -marketing, consulting, and services staff -and also \nto IBM customers. The technologies are trans-ferred via publications (known as redbooks), work-shops \ntaught worldwide, and residencies in which international field support specialists (and eventu-ally customers \nand lab developers) participate to produce the workshops and redbooks mentioned earlier. In addition. \n3rd level direct technical sup-port, Q&#38;As, electronic flashes, and participation in conferences and \nmeetings (SHARE, GUIDE etc), are vehicles for technology transfer. Technology Transfer -Actions and Cir-cumstances \nThe process of transferring a new technology to an organization is not linear: the needs of the tar-get \norganization vary during the process, depend-ing on the phase of the transfer the organization is involved \nin. Four transfer phases can be identified from the point of view of the target organization: Awareness. \nThe target organization should know about the existence of the new technology and understand the advantages \nand risks involved in embracing it. Exploration. The target organization sets up prototype projects using \nthe new technology. Transition. The target organization has decided to embrace the new technology, and \nthe exist-ing technology base is being converted t.o the new one. Habit. The new technology has become \nbusiness as usual in the target organization. A mature stage of t,his phase would be characterized by \nthe presence of process control? quality stan-dards, and productivity measurements. The awareness phase \nis key to achieve an effective transfer of technology. This phase is particularly crucial for object-oriented \ntechnology, since many economic and cultural decisions have to be made. The recipients of the transfer \nin this phase are both managers and programmers. Managers and programmers have to be aware of the advantages \nof object-oriented technology and the requirements for capitalizing on these advan-tages. The bottom \nline message is that produc-tivity and quality in object-oriented software de-velopment are achieved \nthrough reuse, but then the meaning and nature of reuse have to be un-derstood, as well as the organizational \nchanges it entails. Technical decision issues such as the choice of language and methodology have to \nbe explained, but should not become the focus at this point. It is more important to deal with the not \ninvented here syndrome, and with legitimate concerns such as incentives, performance evaluations, and \ntrain-ing opportunities. The main objective of the transfer of technol-ogy in the awa.reness pha.se \nis that the technology should not be perceived as threatening by anyone but as a growth opportunity for \neveryone. Short courses (from 1 t,o 5 days) that include technology fundamentals, advantages, technical \nand organiza-tional considerations, success stories (both internal and external), and marketplace trends \nand direc-tions, are effective transfer means in this phase. Those courses should be delivered in-house \nand there should be several opportunities to attend them on different dates; a teach-the-teachers by \ncompany experts or external consultants may be a convenient way t.o sta,rt the process. A list of rec- \nommended conferences and trade shows may be a useful tool for stirring the interest of key people in \nthe target organization. The exploration phase is characterized by the existence of points of light or \nnegative entropy pockets , that is small nuclei of developers that test the new technology, many times \nwith manager con-sent during normal working hours, but often after hours. Enthusiasts of the new technology \nappear, probably with some background from the univer-sity, from readings, or from previous jobs. The \ntransfer of technology in this phase requires the def-inition of a specific development environment, \nthe availability of such an environment and the train-ing of selected people in its use for concrete \npi-lot projects. Users groups, where the practitioners of the new technology and interested people meet, \nsay, once per month, to discuss topics, present their projects and even invite external speakers, have \nproved to be a successful transfer of technology in-strument in this stage. In the transition phase, \nthe key issue is produc- tivity. The technology required now, in addition to the continuous training \nefforts, relates to pro-cesses, control, and metrics, which usually have to be imported. A source of \nexchange of sophisticated questions and solutions has to be established, such as e-mail conferences and \nforums. In the habit phase, the quest is for refining the technology, improving existing processes, and \nex-ploring the next steps. This level justifies the ex-istence of a.n in-house staff of high level special-ists \nwhich determine where and what aspect of the technology should be transferred. Although awareness -exploration \n- transition - habit is a na.tural sequence, it is by no means a necessary one. The following are three \ncounter-examples describing ca,ses where this sequence will not hold (and many more can be found): 1. \nA company take-over or merger where the new owner has already developed object-oriented systems. 2. \nA multi-national company that imposes the new technology on its world-wide branches. 3. A start-up company \nthat decides to start developing the systems with object-oriented technology.  The described sequence \nis: however, a typical pro-cess for any organizational paradigm shift.  SE1 Maturity Level and Paradigm \nShift If the report that says that about 80% of t,he US MIS shops are at level 1 is correct: and we accept \nYourdon s admonition: Thou shalt not perform paradigm shifts at low SE1 maturity levels : the application \ndevelopment world would never go to 00. My position here is that a paradigm shift does not depend OII \nthe maturity of the whole organiza-tion but on the characteristics of projects and of the group that \nwill implement them. In addit,ion, transfer of 00 technology does not have to start with programming \nin the large, but with smaller teams where the process management constraints can be relaxed, and therefore \nnot require a partic-ular SE1 maturity level, even for that team. We should not lose the perspective \non the prob-lem: in any case, the para.digm shift has to start at some level of maturity, based on some \ntechnology. Probably, if we wait long enough, there will be an-other paradigm shift within the next 10 \nyears for which we will not be prepared either, so . . . And since achieving a SE1 maturity level requires \nes-tablishing formal methodologies and process defi-nitions of some kind, there does not seem to be an \na,pparent adva.nta,ge for an organization to rea,ch to a level 3 maturity with a process based on struc-tural \nanalysis instead of object-oriented modeling, and then make the transition to object-orientation. Legacy \nSystems If legacy code can be re-engineered through ex-isting tools, there may be an opportunity for \nob-jectifying without the use of wrapping techniques, by transforming the resulting models into object \nmodels. These transformations will at this stage have to be performed by hand , by carving, as Eric Herness \nadvocates, the E-R models that the re-engineering process may produce. The present level of the technology \ndoes not allow for produc-tive direct object-model re-engineering, although the use of techniques derived \nfrom the field of arti- ficial intelligence, seems to be promising. Current code-slicing techniques are \nnot adequate for object- oriented layering, since they are usually function-oriented. Statistical tools \nthat could find clusters of accessed data would enhance the productivity of the re-engineering process, \nbut their commercial availability is not widespread. Legacy relational databases should be used as-is \n. There is no apparent justification for a massive conversion to an OODBMS, especially in a business \nenvironment. Wrappers could be used as a technique for ob-jectifying both legacy code and objects. But \na deep series of layers of wra.ppers would be hard to specify and maintain. In addition, wrappers [also \nknown as ada.pters ) could be used for materializ- ing objects from legacy data stores such a,s flat \nfiles. When wrapping legacy systems, legacy data stores should be wrapped separately, because they may \nbe the first things for which a change may be re-quired, probably due to technological reasons, such \nas a change in the data store and retrieval access methods. Another approach is not to wrap the legacy \nsys-tems directly, but to use them as servers to the new object-oriented applications, leaving them in \ntheir own environment. For instance, the legacy code could probably be left to execute in a server machine \nconnected to the true object oriented ap-plication via, a network operating system (NOS) providing location \ntransparency, and have a wrap- per or proxy object at the client s end providing the required interface \nto the NOS (i.e. wrapping the NOS instead of wrapping the legacy code). This approach is particularly \nuseful when the server (native legacy) environment is quite different from the object-oriented client \nenvironment, as is usu-ally the case with mainframe legacy systems.  7 Biographies Andy Baer is currently \na Vice President at Amer-ican Management Systems and Director of Object Technology in the AMS Center \nfor Advanced Tech-nologies. His responsibilities include managing the creation of a reuseable software \ninfrastructure for developing large business applications, evaluating emerging object technology products \nand trends, helping transition AMS s staff to using objects, and being the primary focal point at AMS \nfor market-ing object technology. Brian Bernsen is a Unit Chief in the Cen- ter for Software Engineering \nat McDonnell Dou- glas Aerospace East (MDAE), where he investi- gates CASE tools and software development \nmeth- ods. Prior to joining the Center for Software Engi- neering, he held various software development \npo- sitions on the F/,4-18, AV-8B, and A-12 projects? where he wrote the Software Standards and Pro- \ncedures Manual. He has taught several in-house classes on Ada and Software Engineering and is currently \ndeveloping a Best Practices methods manual for Ada software development, at MDAE. Alan Korncoff is Senior \nPrincipal Scientist in the Research and Technology Division of the Boe-ing Company. Present assignment \nis Principal In-vest,igator, Object-oriented Technology for Manu-facturing Automation. In this capacity, \nhe devel-oped a.nd lead the deployment of the Exception Processor (patent pending), the first application \nof 00 on the factory floor in Boeing. He is currently Program Ma.nager, Project Ma.nager, Principal In-vestigator \nfor four 00 projects. Tim Korson ha.s two affiliations: He is Execu- tive Director, The Consortium for \nthe Management of Emerging Software Technologies (COMSOFT) and he is also a R.esearch Associate at Clemson \nVniversity. Daniel Tkach is a Senior Information Tech-nology Consultant for Object-Oriented Technology. \nHe works for the IBM International Technical Sup-port Center in San Jose, California, where he is re- \nsponsible for the IBM worldwide transfer of tech- nology projects in object-orientation. His recent book \non the topic, Object-Oriented Technology in the Application Development Environment is in the process \nof being published by The Ben-jamin/Cummings Publishing Company.  \n\t\t\t", "proc_id": "165854", "abstract": "", "authors": [{"name": "Dennis de Champeaux", "author_profile_id": "81100265123", "affiliation": "", "person_id": "PP31034638", "email_address": "", "orcid_id": ""}, {"name": "Andrew J. Baer", "author_profile_id": "81332488766", "affiliation": "", "person_id": "P17689", "email_address": "", "orcid_id": ""}, {"name": "Brian Bernsen", "author_profile_id": "81100453012", "affiliation": "", "person_id": "P32457", "email_address": "", "orcid_id": ""}, {"name": "Alan R. Korncoff", "author_profile_id": "81100007781", "affiliation": "", "person_id": "P12569", "email_address": "", "orcid_id": ""}, {"name": "Tim Korson", "author_profile_id": "81100619404", "affiliation": "", "person_id": "PP14213665", "email_address": "", "orcid_id": ""}, {"name": "Daniel S. Tkach", "author_profile_id": "81100636773", "affiliation": "", "person_id": "P59453", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/165854.165936", "year": "1993", "article_id": "165936", "conference": "OOPSLA", "title": "Strategies for object-oriented technology transfer (panel)", "url": "http://dl.acm.org/citation.cfm?id=165936"}