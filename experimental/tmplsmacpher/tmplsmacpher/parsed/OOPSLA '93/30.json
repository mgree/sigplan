{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings OOPSLA Washington, DC-26 September-l October, 1993 Workshop Object Persistence \nin Heterogeneous Database Environments Report by: Paul Richards Electronic Data Systems  1 .O Introduction \n Corporate IT trends indicate increased focus on shared enterprise level data access. Such access is \nviewed as crucial weaponry of the IT arsenal. Successful implementation of such global data access is \nimpeded by the numerous persistence mechanisms used within each corporation. Due to investments in traditional \nsoftware solutions, there is a mounting need to integrate legacy systems with faster-to-market object \nbased technologies. This workshop concentrated on the significant issues encountered when performing \nintegration of run-time objects, persistent objects and data residing in relational and other persistence \nmechanisms. Fourteen corporations and one university were represented in this workshop. The workshop \nproved to be a real life testament for groups experiencing the practical challenges associated with object \nand data integration. The workshop was broken into three intervals. This first interval offered an opportunity \nfor the authors of accepted papers to briefly discuss their experiences and solutions. Additionally, \nauthors identified their 6 hottest topics. The second interval consisted of work group discussions centered \naround four topic groupings. The third interval consisted of presentations by representatives of each \nwork group. Motivations, challenges and insights to the topics in each work group were reviewed in these \npresentations. Several of the same topics were discussed in more than one work group. Hence, the work \ngroup findings are categorized into: Integrated Transaction Models Object Identity Maintenance Performance \n 2.0 Work group Findings 2.1 integrated Transaction Models The motivation for this work group was to \navoid supporting a least common denominator approach for dissimilar transaction models. Work group participants \npointed out that one approach to solving the dissimilar transaction model problem was to support a generalized \ntransaction model. This would circumvent the benefits of tailoring specific transaction models toward \nthe requirements of any particular application. Difficulties lie in the synchronization of databases \nsupporting long transactions with databases supporting short transactions. Long transactions span the \nlife of clients connected to the databases. Additionally, objects checked back in to the database become \nversioned. Information about the long transactions would have to be embedded within the application data \nfor data residing on other persistence mechanisms. The work group briefly discussed the issue of nested \ntransactions. Due to the complex inter-related nature of objects, there is a requirement to nest transactions \nrelative to object boundaries. Nested transactions are not typically supported within current relational \nand other non object based persistence mechanisms. Other architectures supported more sophisticated levels \nof access control. For example, request management was supported for data access and service requests. \nSuch requests could be aggregated for efficient processing through a transaction manager. Several object \noriented databases support the notion of object versioning. Versioning poses particular problems for \nheterogeneous database environments due to the various means of internal implementation techniques within \nthe object databases. Implementation of versioning would have to be externalized into the key based models \nfor relational data persistence. Other considerations were made to modeling processes to support heterogeneous \ndatabase environments. Such a need arises if there is to be inter-process Addendum to the Proceedings \nOOPSLA 93 communications which will effect the transactions associated to those processes. As insights \nto the current situation, it was felt that object databases must be accessible to open, external, 2-phase \ncommit transaction managers. Client pressures have brought several standards to the table but the vendors \nneed to provide solutions in terms of products NOW. The proper architecture for these challenges is to \nimplement them by tools, not within the database engines. 2.2 Object Identity Maintenance The motivation \nfor this work group was to maintain data integrity between the various data persistence mechanisms. There \nwas vigorous attention paid to the various identity models supported within object, relational and other \ndatabases. For object databases, object identifiers are the means of discriminating between data elements. \nFor relational databases, keys act as the mechanism for discriminating between data. Concurrent support \nof both transaction models and identity models posed significant challenges also. Several topics emerged \nfrom the work group discussion including the difficulty in determining what things receive object identifiers. \nMappings must be made between the object based systems and the key based systems to support transparent \nmaintenance in both directions. A main thrust was to minimize the instances requiring OlD s due to performance \nissues. Caching techniques were identified as approaches for supporting data integrity across multiple \npersistence mechanisms. Using this approach, object identifiers would have to be mapped to files, tables \nand keys or the appropriate access mechanisms of the persistence mechanism. Objects having changed state \nin the run- time environment can have their related data updated in the object, relational (or other) \ndatabases appropriately. Change notification must be supported so that changes would be communicated \nwith multiple clients concurrently accessing shared objects. 2.3 Performance The motivation for this \nwork group was to support the integration of legacy systems with new systems that was acceptable to the \nusers in terms of performance. Query processing and optimization technique were discussed by this work \ngroup. Challenges discovered during these discussions included: Multiple API s must be utilized for accessing \nthe various data sources. With each layer of API the system is slower. For each API required, the client \nmachine must have more memory or the client performs poorly. Caching strategies must be used. The rules \nfor managing these include object identification support along with holding statistics about the most \nrecently used objects. Materialization strategy of composing and decomposing the objects. Strategies \ninclude building intelligence into the objects to know how deep to materialize themselves. Additionally, \ncoercion of types could be used to default objects to a particular state. Update anomalies include coordination \nbetween the various data sources. This support tends to slow the system down also. Data replication and \nsynchronization of its use. With these considerations one must know the access patterns and work flow \nof the user. Existence dependence for deletion of objects is a concern. The semantic interoperability \nof the various database models forces the designer into complex mappings which slow the system down considerably. \nDifferent query capabilities afford more or less expressiveness resulting in faster or slower access. \nFor example, for object navigation, access is fast. If the same data must be accessed by performing a \nquery-the results is slower than the navigational approach. Greater extensibility requires greater levels \nof abstraction, but these greater levels of abstraction result in a slower system. Delegation techniques \noffer greater modeling flexibility regarding roles but slow the system down also. Interoperability and \nsecurity within databases is challenging. Various security policies and models, accreditation ranges \nand evaluation techniques are required to support trusted environments but will result in slower performance. \nIntegrating sparsely related object models is a challenge. A global security model will circumvent overhead \nassociated to security mappings. Significant insights arose from individuals that had dealt with these \nissues. Work group members identified that it would be appropriate to use hints regarding other probable \naccesses and queries that will follow any particular query. The use of object assembly strategies for \ncomposition of objects could also be supported. With both techniques, me&#38;data could be managed for \nsupporting such performance improvement measures.  3. Conclusion In conclusion, object integration \ninto heterogeneous databases requires that the systems integrator develop the middleware software themselves. \nWorkshop solutions ranged from simple front end data integration to elaborate architectures supporting \ntransactions within coordinated key and OID based access techniques. This workshop made apparent that \nmaintaining consistency requires that schema, mapping and data integrity rules be formally defined, yet \nmoved out from under the responsibility of the applications programmers. Applications should be designed \nindependent of the persistence mechanism they are using. This will support migration between and among \ndatabase technologies. Conversely, the advantages of any given persistence mechanism will be foregone \nwith use of any generalized access techniques or facilities. With the extension of SQL to support object \nquerying and traversal, middleware vendors will be able to supply a Transaction Manager from which to \naccess heterogeneous databases. Additionally, object access Washington, D.C. September 26-October 1,1993 \nshould be supported through specific language bindings where resultant queries are also managed by the \nsame Transaction Manager concurrently. Object identity, performance, security and transactions could \nbe managed from this Transaction Manager.  Listed Workshop Organizers: Paul Richards, Electronic Data \nSystems Chaitan Baru, IBM Toronto Labs Mary E. S. Loomis, Versant Object Technologies Allen Otis, Servio \nCorporation T. Lougenia Anderson, Sequent Oris Friesen, Bull Information Systems  Contact information: \nPaul Richards Electronic Data Systems 300 East Big Beaver Troy Michigan, 48083 Phone: 313-524-8742 Fax: \n313-524-6147 Addendum to the Proceedings OOPSLA 93 121  \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Paul Richards", "author_profile_id": "81100451719", "affiliation": "Electronic Data Systems, 300 East Big Beaver, Troy, Michigan", "person_id": "PP14158715", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260356", "year": "1993", "article_id": "260356", "conference": "OOPSLA", "title": "Object persistence in heterogeneous database environments", "url": "http://dl.acm.org/citation.cfm?id=260356"}