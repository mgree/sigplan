{"article_publication_date": "04-01-1993", "fulltext": "\n Addendum to the Proceedings OOPSLA I Washington, DC-26 September-7 October, 1993 Workshop Next Generation \nObject-Oriented Programming Languages: Extending the Paradigm  Organizers: Fred Cummins-EDS Roman Cunis-MAZ \nJohn Lamping-Xerox Artificial GmbH PARC Intelligence Services Introduction This workshop was a continuation, \nin part, of the workshop of the OOPSLA 92 workshop entitled Object-Oriented Programming Languages: The \nNext Generation in which features and capabilities of next generation languages were explored. This year \ns workshop was to focus on extensions to the object- oriented paradigm that make it more robust or incorporate \nother paradigms. The approach was to form discussion groups on sub-topics and present the results of \ndiscussion back to the group as a whole. The definition of sub-topics was achieved through grouping a \nlist of issues developed in an initial brain- storming session. The three sub-topics and associated issues \nare outlined below. Multiple paradigm integration Constraints and dependencies Frames Access orientation \nRule-based systems Logic/PROLOG Fuzzy sets Knowledge-based systems Contexts and scenarios  Open object-oriented \nExtended type systems Meta-classes Notification Dynamic inheritance Flexible inheritance Unified object \nmodel High-level objects Concurrent processing  paradigm Building Systems Environment vs. language Intellectual \nproperty rights Re-use Specifications Mega-programming Although the issues outlined above provide some \ndefinition of the sub-topics, the group understanding of the definitions was shaped by the discussion \nand the interests of the participants. The following paragraphs summarize the ideas these sub-groups \nbrought back to the group as a whole.  Multiple Paradigm Integration The general orientation of this \ngroup was to explore the integration of artificial intelligence techniques into a unified environment. \nMotivation. The field of artificial intelligence deals with complex problems in efforts to automate human \ncapabilities. Objects provide a powerful base for representation of concepts. Together, these approaches \ncan provide solutions to very complex problems. An object-oriented architecture might facilitate seamless \nintegration of various paradigms to solve various aspects of a multi-faceted problem. For example, an \nengineering problem might involve fuzzy requirements satisfaction, constraints to produce a consistent \ndesign, rule-based selection of materials, and case-based selection of similar designs.  Potential Paradigms. \nA list of paradigms of particular interest was prepared to suggest the scope of integration, not as a \ncomprehensive list: Addendum to the Proceedings OOPSLA 93 Access-oriented Constraint-based Rule-based \nContexts-alternate worlds Truth maintenance Logic Case-based Fuzzy sets  0 Memory-recall of prior states \n Key Features. Three key language features were identified: (1) reflection-the ability of a program \nto access and modify it own logic, (2) fuzzy truth in contrast to binary logic, and (3) a consistent \nknowledge representation syntax. Problems/Concerns. Several problems or concerns regarding multiple \nparadigm integration were identified: Would the integration result in a baroque language that would be \ndifficult to learn and use? Would inconsistency of programming style be a problem for large projects \nand maintenance? Would the integration of multiple paradigms produce obscure side-effects resulting in \nhidden defects? These issues raised further questions in the group as a whole. Should we try to keep \na language simple if a baroque language yields important capabilities? Should just anybody be programming \nin such a language? Is just one language syntax required?  Open Object-Oriented Paradigm This sub-group \nfocused on the requirements of a common framework for integration of multiple paradigms. The openness \nwould provide the ability to extend the language to incorporate a variety of paradigms while providing \ncommon underpinnings to achieve a seamless integration. The group proposed a three-tiered architecture \nillustrated in figure 1, below. Application Objects Paradigm Paradigm Paradigm Paradign- 1 2 3 4 Common \nBase Mechanism I I Figure 1: Open Object-Oriented Framework Washington, In this framework, applications \nare supported by a number of paradigms which are, in turn, supported by a common base mechanism that \ndefines the object- oriented environment and mechanism of interaction. The group as a whole found merit \nin this perspective. The key is the design of the common base mechanism. In general terms, the common \nbase mechanism must incorporate the functionality found in the Smalltalk virtual machine, the facilities \nimplemented in LISP to support CLOS or the hidden facilities in languages such as Eiffel. Thus this common \nbase mechanism, at a minimum must provide message sending facilities. To provide the desired support \nfor multiple paradigms, it would need to provide considerably more. The sub-group considered the scope \nof the common base mechanism facilities through an example. Implicit invocation or notification is an \nimportant facility to support a number of capabilities. The requirement is that a request be attached \nto an object so that when a specified event occurs in that object a message will be sent to another object. \nThe group described the need to violate encapsulation in order to implement such a facility efficiently. \n  Building Systems The building systems sub-group focused their discussion on two issues: ( 1) Market \nMechanisms (2) Open Implementations Market Mechanisms. In the current state of object technology, we \ntalk a lot about reuse, but we are not meeting expectations. Fundamental to this issue is the concern \nabout intellectual property rights. We are continuing to market software in the same way that we market \nphysical goods. However, unlike physical goods, software can be replicated at virtually no cost. So maybe \nwe should be considering other ways of charging for software. One way might be to distribute objects \nfor free, but charge for their use. Different billing strategies might involve charging for each invocation, \na flat rate use charge, or a rental rate. A particular goal is to make access to objects very easy in \norder to exploit market forces to drive the evolution, quality and re-use of software. Open Implementations. \nObject implementations should be usable by others. This raises concerns about how an implementation is \ndocumented and how much of it must be accessible. Objects cannot be reused if the potential user does \nnot have sufficient information about them to know what he is getting. If too much is exposed, then the \ndeveloper s intellectual property rights will be at risk. A related problem involves the creation of \nan application with shared objects without dragging a lot of unneeded classes and methods along with \nthe ones that are really needed.  Summary The key concept that emerged from this workshop is the layered \narchitecture, and particularly, the common base D.C. September 26-October 1,1993 mechanism. This architecture \nhas existed in other language implementations, but the workshop revealed it as a fundamental approach \nto providing a more powerful language and environment. A key to this architecture is the design of the \ncommon base mechanism, or object engine. The features and scope of the object engine will be the focus \nof next year s workshop. OOPSLA 93  \n\t\t\t", "proc_id": "260303", "abstract": "", "authors": [{"name": "Fred Cummins", "author_profile_id": "81100067090", "affiliation": "EDS Artificial Intelligence Services", "person_id": "PP14033878", "email_address": "", "orcid_id": ""}, {"name": "Roman Cunis", "author_profile_id": "81100240841", "affiliation": "MAZ GmbH", "person_id": "P248517", "email_address": "", "orcid_id": ""}, {"name": "John Lamping", "author_profile_id": "81100154625", "affiliation": "Xerox PARC", "person_id": "PP39030025", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260303.260336", "year": "1993", "article_id": "260336", "conference": "OOPSLA", "title": "Next generation object-oriented programming languages: extending the paradigm", "url": "http://dl.acm.org/citation.cfm?id=260336"}