{"article_publication_date": "10-19-2008", "fulltext": "\n A Theory of Aspects as Latent Topics PierreF. Baldi * CristinaV.Lopes* Erik J. Linstead * SushilK. Bajracharya \nBrenSchoolof InformationandComputerSciences UniversityofCalifornia,Irvine {pfbaldi,lopes,elinstea,sbajrach}@ics.uci.edu \nAbstract After more than 10 years, Aspect-Oriented Programming (AOP) is still a controversial idea. While \nthe concept of aspectsappealstoeveryone s intuitions,concreteAOP so\u00adlutionsoftenfailto convinceresearchers \nandpractitioners alike. This discrepancy results in part from a lack of an ad\u00adequatetheoryof aspects,whichinturnleadstothedevelop\u00admentofAOP \nsolutionsthat areusefulin limitedsituations. We proposeanewtheoryofaspectsthat canbesumma\u00adrized as follows: \nconcerns arelatenttopics that canbe au\u00adtomatically extracted using statistical topic modeling tech\u00adniquesadaptedtosoftware.Softwarescattering \nandtangling canbe measured preciselybytheentropiesofthe underlying topic-over-.les and .les-over-topics \ndistributions. Aspects arelatenttopics with highscattering entropy. The theory is validated empirically \non both the large scale, with a study of 4,632 Java projects, and the small scale,with astudy of5individualprojects.Fromthese \nanal\u00adyses,weidentify two dozentopicsthat emerge as general\u00adpurposeaspects acrossmultipleprojects, as \nwell asproject\u00adspeci.c topics/concerns.The approachis alsoshowntopro\u00adduce results that are compatible \nwith previous methods for identifying aspects, and also extends them. Ourworkprovides not onlyaconcreteapproach \nforiden\u00adtifying aspects at several scales in an unsupervised manner but, more importantly,a formulationofAOP \ngroundedin informationtheory. The understandingof aspects underthis newperspectivemakes additionalprogresstowardthe \ndesign ofmodels andtoolsthatfacilitate softwaredevelopment. Categories and Subject Descriptors I.2.m \n[Computing Methodologies]:Arti.cialIntelligence General Terms Algorithms,Experimentation * Theseauthorshavecontributedequallyto \nthiswork. Permissiontomake digitalorhard copiesofallorpart of thisworkforpersonalor classroom useisgranted \nwithoutfeeprovidedthatcopies are not made or distributed forpro.torcommercialadvantageandthatcopiesbearthis \nnoticeandthefullcitation onthe.rstpage.Tocopyotherwise,torepublish,topost onserversortoredistribute tolists,requirespriorspeci.cpermission \nand/orafee. OOPSLA 08, October 19 23, 2008,Nashville,Tennessee,USA. Copyright c &#38;#169; 2008ACM978-1-60558-215-3/08/10...$5.00 \nKeywords Aspect-OrientedProgramming,Scattering,Tan\u00adgling,TopicModels 1. Introduction Since its inceptionovera \ndecadeago,Aspect-OrientedPro\u00adgramminghasattractedsubstantialattentioninbothsoftware research andindustry.However,itsvaluepropositionisoften \natopicofdebateand remainslargelyunproven, fromasci\u00adenti.cperspective. Thosewhoseea paradoxin thesuccess \nofAOPignore one critical pieceof informationthathas been putforthseveral times:AOP,anditsinstantiationinAspectJ, \nhave beenanexperiment(Kiczalesetal. 2001;Lopes 2004) whoseempiricalvalidationistobe doneovertime. Atthemostfundamentallevel,AOP \ncanbe associated with three hypotheses: the .rst two hypotheses pertain to AOPingeneral,whilethethird \noneisspeci.ctotheAspectJ implementation. Thethree hypothesesare: 1-Complexsoftwaremustcopewiththeexistenceof \ncross\u00adcuttingconcerns;usingtraditionalprocedures orobject\u00adoriented design modularizations,these crosscuttingcon\u00adcerns \naremanifestedinthe design representations (e.g. UMLdiagramsorcode)asdesignelementsthatarescat\u00adtered throughoutseveralmodules \nandtangledwithother concernswithinthose modules. 2-Excessivescatteringandtanglingare bad forthedesign \nprocess,inthesensethatthey slowtheimplementation oftheartifactsby:(a)forcingthedevelopersto manually \nmapthe conceptualintegrityofthecrosscuttingconcerns toscatteredpiecesof design representation;(b)inducing \nimplementation errors that resultfrom shattered concep\u00adtual integrity;and(c)violatingprojectmanagementdeci\u00adsions \nrelatedtodivisions-of-labor. 3-By using the alternative composition mechanisms em\u00adbodiedinalanguage likeAspectJ, \nthecrosscuttingcon\u00adcerns become modules of the design; these alternative modularizations are better than \nthetraditional ones,in the sense that they speed up the implementation of the artifactsby eliminatingthe \nabove-statedproblems. Oneofthe main reasonswhythese hypotheseshavebeen without commonly acceptedvalidationisbecause \nthesoft\u00adware research methodsusedsofarlackthe capabilitytoval\u00adidateordisprovethem empirically onaverylargescale. \nThe needforbettermethods canbeseenintwoarticlespublished by reputable industry watchers whose conclusions \nare the exact oppositesofeach other.In 2001,theMITTechnology Review magazine dubbedAOPas oneofthe Tenemerging \ntechnologiesthatwillchangetheworld (Tristram 2001).In 2005,industrywatcherForresterResearch publishedareport \nentitled Aspect-OrientedProgrammingConsidered Harm\u00adful (Zetie 2005).Giventhehighstakesathand,thevalueof \nargumentative andsmall-scalevalidationofAOPhasbeen exhausted. However, recent advances in open source \ndevel\u00adopment,withtheproductionoflarge amountsof analyzable software data,together with recentadvancesin \ndata mining techniques,areforthe.rsttimecreatingthe conditions nec\u00adessary forlarge-scalevalidationoftheAOPhypotheses. \nThis paperbeginstoaddressthese questionsbydevelop\u00ading and applying a novel set of methods for verifying \nthe .rst and most fundamental AOP hypothesis regarding the existence of scattered andtangled cross-cutting \nconcerns in software.For peoplewithsoftwaredevelopmentexperience, theirexistenceseems obvious. However,intuitions \noften provetobewrong; andwhentheyareright,itisimportantto understandwhyandhowtheyholdinthe realworldofsoft\u00adware \nartifacts.Forexample, one frequently asked question is:besidesthefewprototypicalaspectsidenti.ed andstudied \nin the research literature, what other aspects are there?, and what areaspectsanyway?Veryfewstudieshave \nbeen con\u00adductedin orderto systematicallyinvestigatethisfundamen\u00adtalpremise ofAOPpertainingto the existence \nof crosscut\u00adtingconcerns.Andyet,ifthishypothesisprovedtobeinvalid for software-at-large, the basis of \nAOP would be severely undermined. Tothisend,thispapermakesthefollowing contributions:  An infrastructure, \ncalledSourcerer(http://sourcerer. ics.uci.edu), for collecting, pre-processing, analyz\u00ading, andsearchingsoftwareprojects,in \nparticular open source projects. Thisinfrastructureenablesempiricalval\u00adidationofthe.rstAOPhypothesisonascalethree \norders of magnitudelargerthanin most previousstudies.Cur\u00adrently,Sourcererindexescloseto5,000 projectsretrieved \nfromSourceforge,Tigris, andApache.  Amethod forde.ning andautomaticallyidentifyingsoft\u00adwareconcernsatmultiple \nscalesof softwaregranularity based on unsupervisedstatistical machinelearning and topic modeling methods. \nData mining techniques have been appliedtosoftwarebefore. Theseprior applications used techniques which \ninject a somewhat circular rea\u00adsoning into theidenti.cationofaspects, because theyas\u00adsumetoomuchaboutwhat \naspectslooklikeinthesoft\u00adwarerepresentations.Anunsupervisedprobabilistic topic modeling technique is \ndeveloped and applied here us\u00adingLatentDirichletAllocation(LDA)(Bleiet al. 2003) adaptedtosoftwaredata. \nThis produces an unbiasedset  of latent topics, which assumes very little about what thosetopics aresupposedto \nbe,sothatconcerns arela\u00adtenttopics. Amethod forde.ning andprecisely measuringscatter\u00ading and tangling \nat multiple scales of software granu\u00adlarity based on information theory. Scattering and tan\u00adglingare \nmeasuredbytheentropiesofthetopic-over-.le and .le-over-topics distributions respectively. In partic\u00adular, \naspects or cross-cutting concerns are latent topics withhighscatteringentropy.  Large-scale experimentsproviding \nsound evidence that crosscutting, with its tangling andscatteringeffects, ex\u00adistsin softwareprojectstoasubstantialdegree,validating \nthe.rstAOPhypothesis.  Theremainderofthe paperisorganized as follows.Sec\u00adtion2providesadescriptionofthe \nSourcerer infrastructure. Section3describes our approach formodelingsoftwarecon\u00adcerns with probabilistic \ntopic modeling, and provides the mathematical foundationsofthetheory.Section4 presents theempiricalvalidationof \nthe modelproposed here.Sec\u00adtion 5 compares the proposed approach with previous ap\u00adproaches forde.ning,identifying, \nand quantifying aspects. Section 6 looks at some of the implications of the results and Section 7 discusses \nrelated work in both software en\u00adgineering and machinelearning andisfollowedby a brief conclusion. 2. \nThe Sourcerer Infrastructure Figure 1 shows the architecture of Sourcerer, an infras\u00adtructure for collecting, \nsearching, and mining open source projects.(Bajracharyaetal. 2006, 2007).The arrowsshow the main .ow \nof informationbetween the various compo\u00adnents. Informationon eachsystem componentisgivenbe\u00adlow. ExternalCode \nRepositories: These are the source code repositoriesavailableonthe Internet (e.g.Sourceforge).  CodeCrawlersandAutomatedDownloads:Wehavesev\u00aderalkindsof \ncrawlers:sometargetwell-known reposito\u00adries,suchasSourceforge,others act as webspiders that look for \narbitrary code available from web servers. An automateddependencyandversionmanagementcompo\u00adnentprovides \nmanageddownloadsoftheserepositories.  Local Code Repository: The system maintains a local copyof eachsigni.cantreleaseofthe \nprojects,as wellas projectspeci.c meta-data. Theschemeconformstothe projectobject modelasgivenbytheMavenbuildsystem. \n CodeDatabase:This is therelationaldatabasethatstores the featuresextracted fromthesource code,usingPost-gresSQL8.0.1. \n Parser/Feature Extractor: A specialized parser parses every source .le from a project in the local \nrepository  Figure 1. Architectureofthe Sourcerer infrastructure andextractsentities, .ngerprints,keywordsandrelations. \nThese featuresareextractedinmultiplepassesandstored in therelationaldatabase. Text SearchEngine (Lucene):Thekeywordscomingout \nfrom the parser, along with information about related entities, are fed into a text search engine powered \nby Lucene1.9.1(http://lucene.apache.org).  Ranker(s): Therankerperformsadditional non-text rank\u00adingofentities.Therelations \ntablefromthe codedatabase is used to compute ranks for the entities using several rankingtechniques. \n Search Application(s): Search engine and applications thatusetheindexedkeys,rankedentities, andlocalrepos\u00aditory \nprovided by the infrastructure to retrieve relevant software.  Sourcererisin theprocessofbeingexpandedwithaset \nof APIsso that otherresearchers can usethisinfrastructure to conductvalidationexperimentsanddevelopotherexperi\u00admentaltools. \n3. Software Concerns as Latent Topics Identifyingscattering andtanglinginexistingprogramshas been thethrust \nof a lineof researchinAOP known as as\u00adpect mining. This line of research has produced several techniques, \nincluding: query tools of varying sophistica\u00adtion(Griswold et al. 2001; Hannemann andKiczales 2001), \nfan-inandfan-out analyses(Marinetal. 2004;Zhangand Jacobsen 2007),clone detection(Bruntinketal. 2005),CVS \nhistoryanalyses(Canfora etal. 2006;Breu andZimmer\u00admann 2006),run-timeanalyses(Breu 2005;Tonella and Ceccato \n2004),natural language processing (NLP)ofsource code(Shepherdetal. 2005b),andsupervised machinelearn\u00ading \ntechniques(Shepherdetal. 2005a).All of thesetech\u00adniqueshavehadsome degree ofsuccessinsmall-scaleex\u00adperiments,typicallylimitedto \none orafew projects. These techniques can be seen as attempts to extract higher-level concerns from source \ncode, speci.cally those concerns whoseimplementationsendupscatteredinseveral modules.As such, these techniquestend \nto mix twoissues together:(1) concernextraction;(2) quantifyingscattering. Toovercomethis confusion,here \nwe .rstdevelopa statisti\u00adcaltopic modelingtechniquetoidentify concerns, andthen applyinformationtheorytopreciselymeasurescattering \nand tangling.Speci.cally,wehaveadapted Latent DirichletAl\u00adlocation,whichprobabilisticallymodelstextdocuments \nas mixtures of latent topics, where topics correspond to key concepts presentinthe corpus,and documents \nareviewed as bagsofwords .Aby-productofthisapproachisthefull distribution of each topic across the modules, \nand of each moduleacrossthetopics.Asa result,we proposetomeasure scattering andtanglingbythe entropy \nofthe corresponding distributions. 3.1 Latent Dirichlet Allocation In the LDA model for text, the data \nconsists of a set of documents.The lengthofeach documentis known and each documentistreated asabagofwords. \nLet D be the total numberofdocuments, W thetotal numberofdistinctwords (vocabularysize),andT thetotal \nnumberoftopics presentin thedocuments.Here,forsimplicity, T isassumedtobe.xed beforehand (e.g. T = 125),but \nwe experimentwith various values of T ,inorder to .nda balancebetween topics that areoverlygeneral andthosethat \nareoverlyproject-speci.c. However, non-parametricBayesian andother methodsexist also to trytoinfer T \nautomaticallyfromthedata. t tt Themodelassumesthat each topic tis associated with a m0 ...mn is givenby \np=(p0 ...p) then scattering of n multinomialdistribution f t over words w, and each docu-topictcanbe \nmeasuredby theentropy ment dis associated withamultinomialdistribution . d over j=n topics.Moreprecisely,the \nparametersofthemodelaregiven H(p t)= - by two matrices: a T \u00d7 D matrix T=(.td) of document\u00ad tt pj log \npj (1) topicdistributions,anda W \u00d7 T matrix F=(fwt) oftopic-j=0 worddistributions.Ingenerativemode,givena \ndocument d Likewise,if thedistributionofthe module m across the m mm containing Nd words,for eachword \nthecorresponding. d is topics t0 ...tr isgivenby q=(q...q) then tangling 0 r sampledtoderiveatopic t,andsubsequentlythecorrespond-in \nmodulemcanbe measuredbytheentropy ing f t is sampled to derive a word w. A fully Bayesian j=r probabilisticmodelisderivedbyputtingsymmetric \nDirich\u00ad H(q m)= - a and \u00df over the distribu\u00ad mm qj log qj (2) letpriorswith hyperparameters tions. d \nand f t.Forinstance,theprior on . d isgivenby j=0 Note that the entropyof a uniform distribution over \nM T classesisgivenby log M.Thus entropies can be normalized G(Ta) .a-1 tothe[0,1]intervalby dividingbylog \nM to enable compar\u00ad td Da(. d)= (G(a))T isonof entropies derivedoverdifferent numbersofclasses. t=1 and \nsimilarlyfor f t. Theprobabilityof adocument canthenbeobtainedin a straightforward mannerbyintegratingthelikelihood \nover parameters fand .andtheir Dirichletdistributions.Thepos\u00adterior canbesampledef.cientlyusingMarkovChainMonte \nCarloMethods(Gibbssampling) andtheT and F parameter matrices canbeestimatedby maximumaposteriori(MAP) \nor mean posterior estimate(MPE) methods. LDAhas typically been appliedtotraditionaltextdata, such as \njournal articles or emails. To apply LDA to soft\u00adware, a particular type of text data, a number of adapta\u00adtions \narerequired.Source.les canbeviewed as documents whosecontent canbe represented asbagsof words.Akey stepintheapplicationofLDAto \nsoftwareistoidentifythe words that will constitute the topic model vocabulary, and ultimatelyproducetheword-documentmatrix, \nwhichrepre\u00adsentsthe occurrenceof wordsinindividualsource.les.To buildtheword-documentmatrix,wehavedevelopeda \ncom\u00adprehensivetokenizationtooltunedtotheJava programming languagethatallows ustobuildthecorpusvocabulary \nfrom speci.ed code entities. This tokenizer includes language\u00adspeci.c heuristicsthatfollowthe commonlypracticed \nnam\u00ading conventions. For example, the Java class name Dy\u00adnamicCon.gurator willgeneratethewords dynamic \nand con.gurator. Intheprocessofindexing projects,Javakey\u00adwordsand punctuationareignored.Freetextinthesource \n.les,i.e.comments, caneitherbe accountedfor,orignored. More generally,usingSourcererwe canselectively \nchoose which structures to account for when harvesting words classde.nitions,method de.nitions,method \ncalls,method bodies,etc.For thisstudy we includedall class, interface, method, and.eld names.Section4.2discussesindetailthe \nexperimentsthatdrovevocabularyselection. Oncethetopicsofaproject areidenti.ed,the quanti.ca\u00adtionofscatteringandtanglingcanbeeasilyderivedfromthe \ncorrespondingdistributions,forinstanceintermsofentropy. For example, if the distribution of topic t across \nmodules  3.2 LDA and Software Concerns: A Theory of Aspects Thereisastrongconceptualsimilaritybetween \nlatenttopics andthe conceptsof concerns and aspects.So much so,that we propose to unify the concept of \nlatent topic with the conceptofconcerninthe domainofsoftware: A concern is a latent topic. The distribution \nof a topic across modules indicates whetherthe topicismoreorlessscattered.A cross cutting concernisalatenttopicthatisscattered. \nThisleadstothe following proposalforthe de.nitionofanaspect: An aspect is a latent topic with high scattering \nentropy. Conversely, a topic with low entropy is not an aspect. Notethatentropyisa continuousnotionanditmaynotbe \nnecessarilyproductivetotrytode.neathresholdseparating aspects from non-aspects. This de.nition of aspects \nseems tobein linewiththeoriginalideaof aspectsasemergent propertiesofprogram representations again,a \nconceptthat maps welltothenotionoflatenttopics. In short, statistical topic modeling provides a potential \ntheory for AOP by providing de.nitions and procedural means for identifying software concerns and aspects, \nand forprecisely measuringtheirdegreeofscattering andtan\u00adglingin actualsoftwaredata.Totestthis proposal,several \nexperimentsconductedatmultiplelevelsofsoftware granu\u00adlarity arepresented anddiscussedinthefollowingsections. \n4. Experimental Results This section describes a representative subset of results obtained by applying \nLDA to software data to extract concerns and aspects, as well as their scattering and tan\u00adgling.Whilespace \nconstraintspreventtheirinclusion, com\u00adpleteresults areavailable fromthesupplementary materials page at: \nhttp://sourcerer.ics.uci.edu/oopsla08/ results.html. Table 1. Data Set. Projects (with source) 4,632 \nFiles 366,287 Packages 47,640 Classes 426,102 Interfaces 47,664 Methods 2,694,339 Fields 1,320,067 LOC \n38,700,000 4.1 Data Set Using Sourcerer, approximately 12,000 distinct projects weredownloaded,primarilyfromSourceforgeandApache. \nDistributions packaged without source code (binaries only) were .ltered out.Parsingtheresulting multi-projectrepos\u00aditoryyieldsover5 \nmillionentities organized according to Table1.The endresultisa repository consisting of4,632 projects, \ncontaining 366,287 source .les, with 38.7 million linesofcode,writtenby9,250developers. 4.2 Empirical \nVocabulary Selection Because Sourcerer separately indexes each code entity (eg. classes, methods, .elds)from \na given source .le, the topic modelingprocesshas signi.cant .exibility whendetermin\u00ading which words or \ntokens should be included in the vo\u00adcabularywhenconstructingthe document-word matrix.For example, one \nmay choose to represent source .le contents using only tokens derived from class names, or one may choosetoincludewordsoriginatingfromclass, \nmethod, and .eld names.Whilesuchadecision hasnoeffect on theme\u00adchanicsofLDA,thechoiceofvocabularyisultimatelymani\u00adfestedintheresultingtopicsextractedfromthe \ncode,bothin termsoftheirspeci.city andtheir clarity.Toensurethatthe topic models capture the existence \nof crosscutting concerns insource code,severalvocabularyoptionswereexplored. Asa.rstattemptin ourtopicmodelinganalysis,weused \nthe entire source .le texts as bags of words. This resulted in a huge word-document matrix that was computationally \nheavytoprocess. Furthermore, thequality ofthetopics was somewhat mixed. For example, a topic that emerged \nwith veryhigh entropy was copyright notices.Whilethisis de.\u00adnitelyanimportant partofsoftwaredevelopment,andworth \nstudying,wewantedto focusoncodeelements,and not on allotheractivitiesthat.ndtheirwayintosourcecode .les. \nAsasecond attempt, we constructedsource .lessuch that theircontentconsistedonlyofclassandinterface names.For \nthefullrepositorythisyieldedavocabularyof49,521words across approximately 360,000 documents. Results \nshowed that this over-constrained vocabularyproduced topics that were bothtoo noisyandtoo generaltobeofuseintheanal\u00adysis,essentiallyprovidinga \ntopicmodel of.lenames,but not of .le content. To improve the results we augmented .le content to include \nclass, interface, and method names, producing avocabularyof89,232wordsfortherepository. Withthischangetheextracted \ntopicsprovided someinsight into code function,butdid not adequatelyprovideinsights about implementationfacilitatedthrough \nmembervariables ormethodcallstootherclasses. Thuswe decidedtodrasti\u00adcally expandthe modeled vocabularywith \nthis information. We .nally settledonincludingclassandinterfacenames, method and .eld signatures, and \ncalled method names. This proved to be the best compromise between computational overhead andtopicquality.Thisyieldedavocabularyofover \n140,000wordsandasubstantialimprovementin the quality ofthe extractedtopics. When discussingvocabularyselectionitisalsoimportant \nto notethatextractedtopics canbe furtherre.nedby em\u00adploying astopwordlisttoprune commonwordsthat con\u00adtribute \nlittleto program understanding.Whilesuchstopword listsarecommonfor naturallanguagesintheinformationre\u00adtrieval(IR) \ncommunity,standardlistsdonot existfor code search andmining, andmustbecreated manually.Asa .rst cutweconstructedastopwordlist \nconsistingofclass names from theJavaSDK as well as commonEnglish words,be\u00adlievingthatthiswouldfocusthetopicmodels \nonwhatthe codewas doing, ratherthanhowit was doingit.Whenex\u00adaminingresults,however,itbecameclear that \nmany cross\u00adcutting concerns are facilitated through the standard Java classes. Logging,forexample,maybe \nachievedbyleverag\u00adingthevariousJavaI/Oclasses.While common,including thenamesof such classessubstantiallyimprovedtheinter\u00adpretabilityof \nresultswhenmining codeonthelarge scale. Thus, we pruned our stopword list to include only com\u00admonEnglishwords \nfromastandardIRstopwordcollection, andalsoexcludedall text foundin comments.In conjunc\u00adtion with class, \ninterface, method, .eld, and called method names, SDK class names yield a vocabulary of 141,136 words, \nandprovidethefoundationofthescattering andtan\u00adglinganalysispresented below.  4.3 Aspects and Scattering \nin the Large Table2shows 125topicsidenti.edwiththetopicmodeling method applied tothe full repository \ndescribedinTable1, andorderedbynormalized entropyoftheirscattering among the.les.Duetospace constraintswepresenttopics \nasalist of the 5 most likely words for each concept; in actuality each topic is a probability distribution \nover all words in the vocabulary, and additional words can be inspected to assist in interpreting each \ntopic. The entropywas calculated using Equation 1 in Section 3. Normalized entropy takes a value between \n0 and 1, and represents the uncertainty associated with the random variable representing a given topic \nsdistributionover.les. Anintuitiveinterpretationis thattopicswithhigh entropyare more pervasivethanthose \nwithlowerentropy,with an entropyof1representingatopic with a uniform distribution over all .les and an \nentropy of 0 representing a topic assigned to only one .le. These resultsareinlinewithresultsobtained \nusingthis technique Table 2. ScatteringResultsforFullRepository. Topic Entropy Topic Entropy name names \nfolder full quali.ed 0.830006642 current time task millis system 0.752075685 object lispobjects unwrap \ncoerce 0.81110364 vector element size add remove 0.750874803 add param controller section params \n0.808862952 model selection cell object editor 0.75081679 string equals blank virtual slashes 0.805664392 \n end start line offset begin 0.750695144 value boolean integer warn poinfo 0.802285953 reference object \nstring space home 0.749890641 string case length with substring 0.801405454 element document attribute \nschema child 0.749155948 string display initialize refresh mask 0.798702917 char length character \nstring chars 0.748791035 exception illegal argument runtime pointer 0.796180398 action event performed \nmenu add 0.746993332 string concat jam outdent gethandle 0.795911551 selected button panel enabled \nbox 0.74666193 string callback annotation dao native 0.795584257 byte read write bytes short 0.746638563 \nprint println stream main dump 0.794642995 user group role application permission 0.744858387 create \nhelper console factory creator 0.79379934 server socket send address client 0.743774049 throwable \ntrace stack print message 0.79127469 string report de.nition def resolve 0.742770604 type types java \nprimitive fragment 0.790930013 status transaction cache open commit 0.74106993 buffer string append \nlength replace 0.790911771 make not opt condition empty 0.740774325 error log debug string throwable \n 0.790188551 connection query execute close driver 0.740733329 code equals object hashblog 0.789997428 \n state pos desc initial transition 0.740178479 iterator next has collection abstract 0.787162973 handle \nstring script app gtk 0.739446967 list add size linked remove 0.787161183 test suite down concept \nmain 0.739314191 class loader name instance classes 0.786804788 block rule option options symbol \n0.736177097 size clear reset mark use 0.786009268 generate engine spec provider extension 0.736034727 \nstream input output read write 0.785941016 event mouse component focus cursor 0.733843031 index count \ncompare sort comparator 0.784745691 handler entity string pre.x identi.er 0.733316293 system string \nexit main runtime 0.784522048 table column row count rows 0.730981259 description string factory record \nname 0.783416443 view point edit active .gure 0.730484746 parse int command string parser 0.783176526 \n .lter access random channel sample 0.729546548 arraylist add size abstract 0.78180484 impl ref operation \nobject unsupported 0.728713961 new for return member instance 0.781180287 abstract register convert \nproxy builder 0.72374688 default bean values widget history 0.779643822 request servlet http response \nsession 0.723093293 instance process postdevice activity 0.775346428 string project template link \ncms 0.722859294 check .nd all store and 0.774424449 integer big decimal string value 0.722771094 \nstring url header uri encode 0.771714455 date formattime calendar day 0.720240969 info parameter parameters \nattr doc 0.768179882 image graphics width draw height 0.71852396 thread run start stop wait 0.767481896 \n mode zip unit units calc 0.718489486 string con.g password login email 0.76717566 expression variable \nfunction evaluate expr 0.717246376 version position uid serial render 0.767144361 string copylanguage \nmodi.ed region 0.714682308 map hashput contains generic 0.766980763 font label style color border \n 0.712924194 .le path directory exists dir 0.766787047 graph left right top edge 0.709464393 last \n.rst word after before 0.765637113 target internal lookup drop drag 0.709066174 text area caret length \nwrap 0.765305668 logger level logging log settings 0.708989244 form string mapping localforward 0.764609549 \n keyprimary single enabled .nd 0.70555609 listener change remove add .re 0.764262932 descriptor feature \nstring wrapper seq 0.704315125 writer reader write buffered read 0.763701713 method class re.ect object \ncall 0.703677432 item resource locale bundle items 0.763171752 string attribute attributes from element \n 0.70292847 clone base setup interface default 0.762996228 visit simple visitor accept plugin 0.7006347 \ncontext manager results execution factory 0.762984164 assert equals test true null 0.699647577 data \nmeta converter idata dbobject 0.762827588 player game move board score 0.689682317 string source load \n.agtrans 0.761916518 string sub str val rel 0.689211564 string content xmltitle track 0.761577087 \n search string database order product 0.688891143 message session msg send messages 0.760400967 tag \npage out body start 0.684469105 property properties string prop load 0.760035593 statement result \nprepared prepare close 0.683121859 con.guration validate string .ow obj 0.760015988 color module background \nworld red 0.681868614 entry service string valid complete 0.758106581 geom transform shape .llstroke \n 0.679129364 string match pattern sequence regex 0.757579105 long move literalgetn read 0.678205098 \nstring token tokenizer next tokens 0.756539834 sql object .elds persistence jdbc 0.676782638 component \ncontainer layout size border 0.756329833 instruction constant stack pushpop 0.658630273 icon location \ncontrol tool bar 0.75542027 mob environmental can stats room 0.649525821 update select delete insert \nbuild 0.755399561 node scope token nodes scan 0.645260254 double max math min num 0.755215107 anylogic \ncontext standard html 0.643117635 number from step back activation 0.753931021 category range domain \naxis paint 0.641137336 hashtable elements enumeration has next 0.753734287 .eld string security underlying \nleg 0.496411488 window show frame dialog component 0.753499534 long address gsl short matrix 0.46562778 \ntree path parent child root 0.753069533  in natural language texts. Most of these latent topics can \nbe easily recognized and tagged, while a few may seem obscure.Thetopicsincludeinclude: manipulatingstrings: \nstring equalsblankvirtualslashes , string caselength with substring , bufferstring append lengthreplace \n exceptionhandling: exception illegal argument runtime pointer , throwabletracestack printmessage  \nprintingonthe screen: printprintln streammaindump  logging: loggerlevellogginglogsettings  con.guration: \nproperty properties string prop load , con.gurationvalidate string.ow obj  iteratingthrough collections: \niteratornexthas collection abstract  manipulatinglists: list addsize linked remove  reading/writing \nfrom/to streams: stream input output read write , writerreader writebuffered read  concurrency: thread \nrunstartstopwait  login: stringcon.gpasswordloginemail  authentication: usergrouproleapplicationpermission \n interactingwiththe.lesystem: .lepathdirectoryexists dir  eventhandling: listenerchange removeadd.re \n GUIs and GUI events: action event performed menu add , event mouse component focus cursor , text area \ncaret length wrap , font label style color border , se\u00adlectedbuttonpanel enabledbox , iconlocationcontrol \ntool bar , component containerlayoutsize border , win\u00addow show frame dialog component  input parsing: \nstring match pattern sequence regex , stringtokentokenizer nexttokens  traversingtrees andgraphs: tree \npathparent childroot , graphleft righttopedge  timinganddate actions: currenttimetaskmillissystem , \ndateformat time calendarday  xml data representations: element document attribute schema child  networking: \nserversocketsendaddressclient  datapersistentcy: connectionqueryexecuteclosedriver , tablecolumnrowcountrows \n, statementresultprepared prepareclose , sql object .eldspersistence jdbc , up\u00addateselect delete insertbuild \n, statustransaction cache opencommit  testing/assertions: testsuitedown conceptmain , assert equals \ntest true null  webinterfacing: requestservlethttpresponsesession  thefactorypattern: createhelperconsolefactorycreator \n thevisitorpattern: visit simplevisitor acceptplugin The.rst strikingobservationisthatsomeofthesetopics \ncorrespondtotheaspectsthathavebeen used as prototypi\u00adcalexamples forAOP,namely:exceptionhandling,logging, \nconcurrency, persistency, authentication,GUIs, andevena coupleof well-known designpatterns(eg.thevisitorpat\u00adtern). \nIn order to better understand this result, we need to analyzethe meaningofthesetopicsinthecontextofthe \nen\u00adtire repository. Thetopics aregivenin latentmannerby listsof words that occur frequently together, \nin probabilistic terms. The factthattheirentropyis sohightellsusthatthesetopics are pervasiveinthe largecollection \nof softwarethatwas ana\u00adlyzed.Inotherwords, concernssuch asstring manipulation, exceptionhandling, and \nsoon,recurquitefrequentlyinthe 366,287source.lesoftherepository.Thisresultis notsur\u00adprising,andit atteststothevalidityofthis \nmethod:thelist aboveis a comprehensivelist oftopics/knowledgethatJava softwaredevelopershaveto master.Someof \nthemare ba\u00adsicinteractions with widely-used classesof the JDK, such asstring, collection,list, and.le \nmanipulations,aswell as exceptionhandling thebasicbuildingblocksofJavapro\u00adgrams.Otherssuch aslogging, \nconcurrency, andauthenti\u00adcationare notso basic,buthaveanequally strongscattered presence. An essential \nproperty of the statistical topic modeling approach is that it is an unsupervised method, i.e. topics \nemerge automatically from the data, without the need for human supervision or annotation, or for a pre-existing \nand possiblybiasedde.nitionofconcerns and aspects.Thereis no need foranannotatedtrainingset orfor using \nstructural properties such as fan-in/fan-out or any other heuristics. As the results show, without using \nany assumptions about aspects, crosscuttingexistsonbothlargeandsmall scales,in theformoflatenttopics \nthat interact with each otherinthe source .les that form theprograms.  4.4 Aspects and Scattering in \nIndividual Projects Whilevalidationofthetopicmodelingapproachis essential onthelarge scale,tocompletethevalidationitisalsoim\u00adportantto \nanalyzeindividualprojectsindetail.Tothis end, here the topic modeling approach is applied also to 5 in\u00addividual \nopensource projects:JHotDraw(www.jhotdraw. org), Jikes(jikes.sourceforge.net), PDFBox(www. pdfbox.org), \nJNode(www.jnode.org), and CoffeeMud (coffeemud.zimmers.net).Together theseprojectsrepre\u00adsentacollectionof \nwell-known, non-trivial softwareprod\u00aductsofvarying sizeand complexity,spanningadiverseset of domains \nfromtechnical drawing togaming.Inthissec\u00adtionwebrie.ydescribe eachof theprojectsconsidered,and provideselected \nresultsof ouraspect analysis. Tables3through7presentselectedtopics andtheirscat\u00adtering for eachof these5 \nprojects.For each project,a rep\u00ad Table 3. ExampleJHotDrawTopics. Table 6. ExampleJNodeTopics Topic Entropy \ninstance test tear down vault 0.813075061 create factory collections map from 0.722463637 point move \nbox index start 0.71436202 storable read write input output 0.650160953 list nexthas iterator add \n0.638290561 polygon point internal chop count 0.46080295 size selected frame frames dimension 0.43364049 \nshape geom rectangular rectangle2 hashtable 0.353301264 dragdroptarget source listener 0.352124151 \nevent component size transform mouse 0.338653373 Topic Entropy stringlength append substringtokenizer \n 0.76224123 map hash equals object value 0.726874809 byte arraybytes arraycopy system 0.723141514 stream \nwrite outputwriter array 0.723069203 input read stream reader buffered 0.718017023 graphics color paint \nicon rectangle 0.567084036 image raster buffered create writable 0.548839911 time date calendar zone \nsimple 0.525970475 zipentryjar plugin de.ater 0.515858882 focus event window component listener 0.502999404 \n Table 4. ExampleJikesTopics. Topic Entropy nexthas element enumeration elements 0.699351996 buffer \ncheck empty char insert 0.661522459 printstream println writer total 0.636898546 hashmapiterator next \nadd 0.636035451 type array reference code resolved 0.635043332 cycles end time right begin 0.486326254 \n.eldtype re.ect value unchecked 0.4684958 short switchreference type read 0.447104842 sys lock unlock \nwrite socket 0.428127362 offset mask .ts forward code 0.346995542 emit assembler gen reference laddr \n 0.266546555 Table 5. ExamplePDFBoxTopics. Topic Entropy .le stream print close pddocument 0.762635663 \nstringint date embedded calendar 0.759588402 list size addarray cosarray 0.756535565 page box pdpage \n.ndnode 0.674842006 byte class width code line 0.639055832 font name widthkern character 0.629830087 \n resentativesampleofhighandlowentropytopics arelisted, along with their normalized entropyvalue. JHotDrawisawell-known \nopensourceGUIframework for drawing technical and structured graphics. Originally conceived by Erich Gamma \nand Thomas Eggenschwiler, the current version of the software (6.0 beta 1) indexed bySourcerer consists \nof 485 .les representing650 classes, 4,712 methods,and 845.elds across 28,335linesof code. Selected topicsforJHotDrawareshowninTable3. \nTheJikes project provides an open-sourceimplementa\u00adtionofaJava virtualmachine,allowing researchersto \neasily plugin andexplorenewalgorithms forgarbagecollection, threading, and optimization. TheJikesRVM2.4.4 \ncode base considered here consistsof 940.les correspondingto 1,149 classes, 9,045 methods,and 4,572.eldswith170,066lines \nof code.Selected topics forJikes areshowninTable4. Table 7. ExampleCoffeeMudTopics. Topic Entropy environmental \nmob msg location send 0.861222835 environmental name text vector string 0.823602707 vector element \nsize add remove 0.795135882 mob hash environmentaliterator next 0.77667159 string mob currency environmental \nshop 0.600152681 string channel imc send mud 0.591218453 string vector from xml buffer 0.586218656 \nstringmobgen scr tell 0.390775366 PDFBox provides a substantial Java library for creat\u00ading, manipulating, \nandconvertingportabledocumentformat (PDF) .les, and represents an open source project with a substantialfollowing.Intermsofdocuments,PDFBox0.7.2 \nrepresents thesmallestproject in thecollectionwithatotal of370indexed.les.Theprojectiscomprisedof384classes, \n2,955 methods,and 1,255.eldswith38,241linesof code. Selected topics forPDFBoxareshowninTable5. JNode \nprovides an opensourceJavaimplementationof anoperatingsystem,thegoalofwhichis tobeable toinstall andrun \nanyJavaapplicationinanef.cientandsecure en\u00advironment.Thelargestofthe5projects,JNode representsa substantial \nsoftwareproductwithapproximately6,200.les consisting of 6,599 classes, 45,792 methods, 20,264 .elds andasubstantial610,000linesof \ncode.Selectedtopics for JNode areshowninTable6. Finally, CoffeeMud represents a full Java implementa\u00adtionof \na game engine fortextbased role-playing or adven\u00adturegames, includingfacilitiesforonlineplay.A substan\u00adtialproject \nwithover2,900 .les,CoffeeMudis composed ofover2,989classescontaining 29,111 methods and5,081 .eldswith \n379,710linesof code.Selectedtopics forCof\u00adfeeMud areshowninTable7. Takentogether,thesetables providefurthersupportfor \ntheideathatmeaningfulsoftware concerns,andtheirscatter\u00ading, canbeidenti.ed automaticallyand quanti.edthrough \ntheunsupervisedtopicmodelingapproach andtheresulting distributionsandassociatedentropies.The.rst observation \nisthatby zoominginonindividualprojects,westartsee\u00adingproject-speci.c topics,inadditiontothegeneral-purpose \ntopicsseen forthe entirerepository.Forexample,inJHot-Drawweseedrawing concernsgivenby point moveboxin\u00addexstart \n, polygonpointinternal chop count , shape geom rectangular rectangle2 hashtable , as well as a strong \npres\u00adence of GUI given by drag drop target source listener , event componentsizetransformmouse .InJikes,wesee \nprogramminglanguage concerns such as .eld type re.ect value unchecked , offsetmask.ts forward code and \nemit assemblergen referenceladdr .InPDFBox, weseePDF\u00adrelated concernsin page box pdpage.nd node and font \nnamewidthkerncharacter .InJNode,wesee programim\u00adageconcerns in image rasterbuffered create writable ,as \nwell asJava packagingconcernsin zipentryjarpluginde\u00ad.ater . At.rstsight,CoffeMud does notseemtosupportthe \nar\u00adgument.Weincludeithereinorderto illustrateanimportant point aboutthis approach.Theidenti.cationofhigh-level \nconceptsbased onthesesetsofkeywordsoftenrequires do\u00admainandevenprojectexpertise.Inthe caseofCoffeeMud, \nthelatenttopics identi.eddidnotseemtomakemuchsense. In particular,theword mob ,which appearsrepeatedly,is \nquite foreign.Furtherinvestigations aboutthis project (e.g. inWikipedia)indicatethat mob is actuallya \ncentral con\u00adcept of this system and of multi-userdomains(MUDs)in general. Mobstands forMobileObject,which \ncorresponds to [arti.cial]players that can move around in the gaming environment.Giventhis additionalpiece \nofinformation,we can thenseeseveral project-speci.c concernsgivenby en\u00advironmentalmob msglocationsend \n(mob communication), string mob gen scr tell , as well as a concern that seems tobe relatedtoInstant \nMessaging, stringchannelimcsend mud . A second observation is that the general-purpose con\u00adcernstendto \nhave higherentropy thantheproject-speci.c concerns,i.e.theyare morescattered. Thisis,inmanyways, an expected \nresult, but it has important implications for AOP,discussedinthe nextsection.Allprojects,exceptCof\u00adfeeMud,showthis \nproperty.CoffeeMud,again,seemstobe different,inthatthetopicwithhighest entropyisaproject\u00adspeci.ctopic.Ininspecting \nthe code, one canseethatthe .rsttopicisrelatedtothebasic communicationmechanisms providedbytheengine.Whilewehavenotexploredthisfur\u00adther,it \nmaybe that CoffeeMud scommunicationfacilities, which in a normal project would appear with words such \nas socket, send, msg ,forexample,wrap aroundthe under\u00adlyinggeneral-purposecommunicationfacility java.net.And \nthis maydrivetheentropyup,giventhatcommunicationis somethingthatneedstohappenatseveralpointsofthe code. \nFigure 2 provides a visual summary of scattering be\u00adhavior for the 5 projects chosen for this analysis. \nScatter\u00adingcurves are produced by sorting the topic entropies of a project in descending order, and plotting \nthem versus the number of topics extracted from the project. In addition to providing a simple means \nfor examining topic scatter\u00ading within a single project, one can use such a visualiza\u00adtiontodirectly \ncomparescattering acrossprojects.Forex\u00adample, from the .gure one can see that scattering values for CoffeeMud \nare noticeably higher than the remaining projects. One can also compare the variance of scattering withinprojects,notingthatthe \nrangeofvaluesforJNode,for example,is substantiallymore concentratedthan JHotDraw. Ultimatelythese curvesprovideagraphicalrepresentationof \nscatteringthat canbeusedtodriveadditionalinvestigation at theprojector multi-projectmanagementlevel. \n 4.5 Aspects and Tangling in the Large Usingour modelitisalsomathematicallystraightforwardto quantifythe \ntanglingof concernsinthe.lesby computing theentropyofthedistributionof.lesovertopics(Equation2 in Section3).Normalizedtanglingentropyisagainanumber \nbetween 0 and 1. Intuitively, a .le with a higher entropy contains code correspondingtoawidervarietyoftopicsthan \na.le withalowerentropy.A maximumnormalizedentropy of1isassignedtoa.lewhosetopicassignmentisuniformly \ndistributed.Aminimumentropyof0is assignedtoa.lewith only1topic assignment. Table8providesaverysmall sampleoftangling \nresults forthetopicmodelofthefullrepository,highlighting5.les withhigh entropy and.ve.leswithlowentropy.1 \nThreeof the .ve .les with high entropy correspond to report gen\u00aderation. In looking at these .les, one \nnotices that they in\u00adcludestring manipulation, database access,exceptionhan\u00addling,interfacedesign,andawidevarietyofother \nconcepts. Thesame canbe saidfortheremaininghigh entropy.les, which constitute an IMAP server (.788) and \na music orga\u00adnizer (.7664), both of which are noticeably complicated in implementation.Attheother end \nof thespectrum,thelow entropy .les correspond to very speci.c functional mod\u00adules,suchashandlingnestedclass \ndeclarationinanabstract syntaxtree (.3379)andcolumnmanipulationdatabasecode (.2275).Thetablealsogivesexamplesof2.leswith \natan\u00adglingof0.0.Door.javaoriginatesfromtheCoffeeMud game engine,andisassigned onlytothetopic mobenvironmental \ncanstatsroom. Similarly,FocusLostEvent.java,aspeci.c eventlistenerfor capturing mousefocus,isassigned \nonlyto thetopic eventmousecomponent focuscursor. Ininspect\u00adingthese .les,wecon.rmedthattheyarequite simple. \n 4.6 Aspects and Tangling in Individual Projects Aswithscattering,theentropymethod for quantifyingtan\u00adglingisapplicable \nalsoatthegranularityofasingleproject. Table9 andTable10providesampleresults forJHotDraw andJikes,respectively(we \nomittheotherthreeprojects, because theresults aresimilar).For each,aselect number of .lesexhibitingbothhigh \nandlowlevelsof tangling are given, together with the corresponding entropy score. For 1Theentiretanglingmatrixhas366,287rows, \noneforeach.le. Scattering Curves for Selected Projects Number of Topics Figure 2. ScatteringCurves \nforSelected Projects Table 8. ExampleTanglingResults forFullRepository. File Entropy org/openharmonise/rm/commands/CmdGenerateReport.java \n0.8258 it/businesslogic/ireport/gui/ReportQueryDialog.java 0.7885 mail/core/org/columba/mail/imap/IMAPServer.java \n0.7881 jRivetFramework/webBoltOns/ReportWriter.java 0.7869 org/lnicholls/galleon/apps/musicOrganizer/MusicOrganizer.java \n0.7664 doctorj-5.0.0/org/incava/java/ASTNestedClassDeclaration.java 0.3379 nfop/fo/properties/FontSelectionStrategy.java \n0.2275 net/sf/farrago/namespace/jdbc/MedJdbcColumnSet.java 0.2275 com/planet ink/coffee mud/Exits/Door.java \n0.0 buoy/event/FocusLostEvent.java 0.0 JHotDraw,twoofthe.lespresented,BouncingDrawing and URLTool,correspondtosample \napplicationsbundledwith the software. Because these sample applications exercise multiple JHotDraw capabilities, \nit is notsurprisingthat they are associated with multiple topics, and are thus assigned a high entropy \nscore. ThesameistrueofSingleFigureEnu\u00admeratorTest, whichrepresentsunitteststoexerciseandval\u00adidate several \nproject features. Like the results for the full repository, .leswithlowtanglinginJHotDrawcorrespond toveryspeci.cunitsoffunctionality,suchasexceptionsand \nhandlers for events and GUI interaction. Similar observa\u00adtions canbe madeforJikes,with.lesimplementingcomplex \nfunctionalitiessuchasdebugging andprocessmanagement cominginwithhigh entropy scores inthe rangeof .6736\u00ad.6932,while.lesimplementing \nsmall orspeci.c function\u00adalitiessuch asconstantde.nitionor timeout exceptions are measuredtohave normalized \nentropyinthe rangeof 0.0\u00ad.0693. Indeed,closerinspectionofVM Contstants.javare\u00advealsitisassignedto only1 \ntopic: bytes defaultfail con\u00adstantsoption .Full resultsforallprojectsareavailable from Table 9. ExampleTanglingResultsforJHotDraw. \nFile Entropy BouncingDrawing.java 0.6650 SingleFigureEnumeratorTest.java 0.6538 URLTool.java 0.6449 UndoRedoActivity.java \n0.1000 CommandCheckBoxMenuItem.java 0.0892 JHotDrawException.java 0.0831 thesupplementary materialspage, \nand canbeinterpretedin thesamemannerastheexamples presentedhere. Inadditiontoanalyzingtangling of softwareviathein\u00adspectionofindividual.les,itisalso \npossibletosuccinctly summarize tanglingbehaviorvisually.Figures3 and4 con\u00adtainthetanglingcurvesforthetheindividualprojects;Fig\u00adure5showsthetanglingfortheentirerepository.The \ncurves areproducedbysortingthetanglingentropyvaluesfor each .leindescendingorder,andthenplottingthevaluesdirectly. \n Tangling Curve for Selected Projects Figure 3. TanglingCurvesfor the3SmallerProjects Tangling Curves \nfor 2 Large Projects 0 1000 2000 3000 4000 5000 6000 7000 Number of Files Figure 4. TanglingCurvesforthe2LargerProjects \nTable 10. ExampleTanglingResultsforJikes. Table 11. Estimated Parameter Values for Software Tan\u00adgling \nFile Entropy DebugerThread.java 0.6932 TraceBuffer.java 0.6845 VM Process.java 0.6736 VM Listener.java \n0.0693 PPC Disassembler.java 0.0554 VM Contstants.java 0.0 Parametric Model of Full Repository Tangling \n Figure 5. Fit of Parameterized Model to Full Repository TanglingCurve In additionto understandingthehigh-level \npicture of tan\u00adgling behavior, such curves are also useful for identifying areas of interest within tangling, \nallowing one to focus on groupsof.leswithparticularlyhighorlowtangling. Fromthe.gures onealso noticesthattanglingcurvesfol\u00adlowaninverted \nS shape, wheretheS shapeis commonly associated withthesigmoidfunction: 1 f(x)= 1+ e-x We discuss this \nobservation next, where we leverage the functionalformof the curvestobuild aparametricmodel fortangling. \n 4.7 A Parameterized Model of Tangling When examining Figures 3, 4, and 5 one is immediately struckbythefactthatthetanglingcurves,withoutexception, \nfollowinversesigmoidalbehavior.Such knowledge canbe usedto constructa parameterized modelofprojecttangling, \nandifthe modelis accurate,allows thetanglingbehaviorof softwaretobe characterizedusingonlyafewparameters.To \ntestthis hypothesisweconstructed asimpletwoparameter modeloftanglingofthe form f(x)= a * ln((1/x) - 1) \n+ \u00df Project a \u00df R-Square JHotDraw .06703 .4201 .9485 Jikes .08395 .4015 .9556 PdfBox .09231 .5248 .9557 \nJNode .08843 .3599 .9630 CoffeeMud .1024 .5176 .8985 Full Repository .08564 .3956 .9624 Mean .08662 .43808 \n.94728 Standard Dev .01163 .06759 .024481 where a and \u00df arethe functionparametersthataretobe.t to the \nmodel. Using nonlinear optimization with least squares we esti\u00admated thetanglingparametersfor5individualprojects, \nas well asourfullrepository.Table11presentstheestimated parameters,aswellastheR-Squarevaluesforthe.tcurves. \nFrom the table we see that the values of a and \u00df are rea\u00adsonably concentrated across projects. More telling \nare the R-Squarevalues,whichindicatethat, onaverage, 94.7%of thevariationinsoftwaretangling canbeexplainedby \nthe model. Thisis demonstratedvisuallyinFigure5, wherethe observedtanglingcurveofthefullrepositoryis \ncomparedto thetanglingcurve producedbyinvertedsigmoidmodel. 5. Comparison to Other Aspect Mining Techniques \nTo further validate the approach of identifying aspects throughLDA-basedtopicmodeling,theresults obtainedfor \ntheJHotDrawproject arecomparedwithpreviousresultsfor thesameprojectpresentedinthe literature.JHotDrawisa \ngood choice because it is widely used in the aspect mining literatureandincludesrobustandveri.ableimplementations \nof various features that makes it suitable for this kind of analysis (Kellens et al. 2007;Robillard andMurphy \n2007; Ceccatoetal. 2005; ZhangandJacobsen 2007;Canforaand Cerulo 2005). Since existing techniques have \nvarious underlying as\u00adsumptions about what aspects or concerns are and how to minethem,thereis notaconsistent \nbenchmarkof aspects to be compared, even for the same project. Results differ from one approach to another. \nThus, we collect a handful of candidateaspectsthathavebeeneither manuallymapped totheJHotDrawimplementationorautomaticallyfoundby \nvariousaspectminingtechniquesand comparetheminthree ways:(i)whetherwe can .nd similartopicsinourresults, \n(ii) whether we observe similar degrees of scattering; and (iii)whetherweobservesimilardegreesoftangling.Forthe \nlasttwo,welookinto scattering andtanglingbehaviorthat hasbeen identi.ed beforeinJHotDraw.  Figure 6. \nConcernMappingforJHotDrawUsing ourLDA-BasedApproach. To performthesecomparisonsweinspectthe document\u00adtopicmatrixforJHotDrawthat \nprovides uswiththeproba\u00adbilitydistributionoftopicsover.les.For each latenttopic identi.edbyasetof5words,weassignameaningful \ncon\u00adcernname.Insome cases thetermsin thesetsof words are good enoughtoidentifythe concerns.Forothers,weconsult \nthedocumentationofJHotDrawandassociationofthetopics withthe.lestodetermineameaningful name.While nam\u00adingthese \nconcerns we followed a convention of appending each one withamoregeneral term,ifpossible. Figure6 showsa \nportionof the document-topicmatrix. Itincludesall thelatenttopics andcorresponding concern names for \nJHotDraw, except those that were identi.ed as belongingtotestingfeatures.The .rst rowshowsthesets ofwords(each \ntopicina column), andthesecond row shows the concerns that were identi.ed from the topics. The .rst column \nfrom the third row onwards is the list of all the .les, with only a portion shown here to save space. \nThe rest of the cells in the matrix contain numbers that indicate the probability of a topic (from a \ncolumn) belongingtoanindividual.le(inarow).Emptycellsdenote zeroprobability.The last column liststheentropyfor \neach document that measures the degree of tangling. It is easy to seethat withthisrepresentationone canget \nanintuition aboutscattering andtangling. Toobservethedegreeofscattering one can inspect allthe documentsthatwouldbeassignedtoa \nparticular concern.A reasonable threshold can be adopted to exclude documents withlowerprobabilities.Toobserve \ntangling,one canlook across the row to see what other topics also belong to the same .le. Basedonprobabilitiesone \ncanmakeaneducated guessonwhetherthemultiple concernsmightbeinteract\u00adingwith each other.Wenowdiscusssomeoftheexisting \nconcernsthathavebeennotedinthe literaturethat were also identi.ed in our results. Finding Aspects: Aspectsmined \nfromJHotDraw,forthe most part,fallintotwo categories: project-speci.c fea\u00adturessuchasthosethatdealwith \nmanipulating.gures, andgeneral-purposeaspectssuchasdesignpatterns. In Table12welistmostofthosethatwerelistedbyother \nau\u00adthors(Robillard andMurphy 2007;Ceccatoetal. 2005; Zhang and Jacobsen 2007; Canfora and Cerulo 2005). \nThe.rst columngives theaspectsthatweremined.The second column lists the techniques that have been ap\u00adplied \ntominethe aspectgiveninthe.rstcolumn.The following abbreviations areusedforthetechniques:IA = Identi.er-analysis,FA \n=Fan-In Analysis,D=Dynamic Analysis,M=Manual, andR=MiningCodeRevisions. Thethird columnprovidesasimilarconcernthatweiden\u00adti.edwithourtechnique(alsoshowninFigure6). \nThis result shows that the automated topic modeling based approachis equallygoodinminingidenti.ed as\u00adpects \nfrom a well-known and studied sample project. Among all the aspects that we could .nd in the stud\u00adieswelooked \nat,only thefollowing werenot explicitly identi.ed by our approach: consistent behavior,contract enforcement,andcomposite \ndesign pattern.The.rsttwo are more of a speci.cation for a concern rather than a concernitself and couldonlybedetected \nproperly with atechniquethathadan earlierassumptionaboutthepro\u00adgramstructure.Ourtechnique does notlook \nforanypre\u00adspeci.ed structure in the source code, so as not to in\u00adject biastoward whataspectsare.Unlessdesignpatterns \nmanifest themselves with meaningful names, any text basedmining,like ours,willdismissthem. Degreeofscatteringamongsomecommonconcerns:The \ntechnique in (Zhang and Jacobsen 2007) ranked three commonaspect-candidatesindescending orderof mea\u00adsured \ncrosscutting:Persistence > Undo> FigureSelec\u00adtion.Whenwe rankthecorresponding concerns from our results, \none obtainsexactlythesameordering:PERSIS-TENCE (0.65) > UNDO (0.63) > DRAWING(Figure Selection) (0.46),with \nthevaluesinsidethe parenthesis denotingentropies.While this isjustasingleresult, the similarity of the \nresults obtained with these two com\u00adpletelydifferent approachesisstriking andatteststothe potentialofthetopic \nmodelingapproach.  Traces ofTangling:Some notable instances of tangling that have been discussed in \nJHotDraw are: tangling of Undo andCommand concerns;tangling ofUI(userin-terface);Storage Management andWriting; \ntangling of change noti.cation; andsubject registrationinObserver concerns (Robillard and Murphy 2007; \nCanfora and Cerulo 2005). We noted similar tangling of concerns in our results.Figure6 showsthatwhilelooking \natthe UNDO concern, tangling ofCOMMAND,DRAWING, ITERATION, andVISITOR concerns arelikely. Look\u00adingat \nthe complete concern map (not shown), concerns likeSTORAGEFORMAT,DRAWING andCONTENT appear likelytobetangled \nwith thePERSISTENCEcon\u00adcern.  The observations above provide con.dence that the au\u00adtomated topic modelling \napproach for identifying aspects and quantifying scattering and tangling is consistent with theresultsobtainedbypriorapproachestoaspect \nidenti.ca\u00adtion. Howeverthetopicmodellingapproachextendsthepre\u00advious approaches and overcomes some of \ntheir conceptual de.ciencies. Most previous approaches introduce a some\u00adwhat circularde.nitionof aspectsby \nfocusing onspeci.c program orexecutionstructures(DynamicAnalysis,Fan-In/Fan-Out,CodeRevisions).By saying, \nforexample,that an aspect is a program/design element with high fan-in, fan-in analysisimmediatelyintroducesacircularityrelated \ntotherepresentationofthe program/design,andthespeci.c programming/design technologies used. In our view, \nsoft\u00adware concernsexist at ahigher-levelthanthe program rep\u00adresentation,soa goodtheoretical framework \nforthemmust Table 12. ComparativeAnalysisofAspectsinJHotDraw.IA = Identi.erAnalysis,FA =Fan-InAnalysis,DA \n=Dynamic Analysis,M=Manual,R=MiningCodeRevisions Aspects/Concerns from other techniques Technique used \n# Concerns identi.ed with our technique LoadingRegisters ManipulatingFigures (drawing, moving, connecting) \nManaging Views Adding Text AddURLto .gure Persistence Storage Management GettingandSettingattributes \nCommand Execution Undo operation Iteratingover collection Manage Handles Observer Decorator Visitor Adapter \nUser Interface IA IA, DA DA DA DA IA,FA, DA,R, M M DA FA, M IA, FA, DA, R IA, DA IA, FA, R FA IA FA M \nIMAGE, LoadRegister DRAWING LAYOUT, UIDecorator, UI Dimensions TEXTTyping TOOL Applet URL PERSISTENCE \nRead-Write STORAGEFORMATGetting/Settingattributes DRAWING Figure Attributes COMMAND menu UNDO ITERATION \nDRAWINGHandle Invocation Events, UIObserver DrawingFigure Decorator, DrawingLine Decorator VISITOR TestAdapter \nDisplay, UI exist above concrete programming/designtechnologies and tools. Identi.er analysis (IA), \ntheclosestto our approach, does not makesuch assumptions.However,being based onfor\u00admalconceptanalysis,it \nhasseveral limitations.Because the LDA-basedapproachmodelsprogram entitiesasmixturesof concepts(topics)which \narethemselvesmixturesofwords,it can capture more subtle statistical relationships amongtop\u00adics,words, \nand entities, withdemonstratedbene.tsincon\u00adcernidenti.cation. 6. Implications of the Theory This study \nis mainly descriptive; it describes empirically veri.edpropertiesof real-world software programs,atboth \nlargeandsmallgranularityscales.Softwareresearchis usu\u00adallyprescriptive,aiming toprovide solutionsforperceived \nproblems.Assuch,wemakea .rstattemptatlaying out the implicationsof ourobservationsforthedevelopmentofpro\u00adgramming \nmodels and the design of software tools. These commentsareintentionallygeneric, asthe goalis notto ad\u00advocateanyparticularsolution,buttopoint \noutthelarge re\u00adsearchanddesignspacethatis stillopenrelatedtosoftware concerns.We notethat,atthispoint,theissueof \nwhether excessivescattering andtangling are bad (hypothesis2in theIntroduction)isstill an open question, \nalthough thereis someevidencethatitisso (Eaddyetal. 2008). At .rst glance, based on the empirical validation \nof our machinelearningtechniques,it would appearthat one can onlyidentifythe high-levelsoftwareconcerns,andtherefore \nthe aspects, after theprogramsare written.Thisisnot nec\u00adessarily the case, asexplainednext. AsshowninSection4.3,thestudyofaverylarge \nreposi\u00adtoryofJava programsshowsthatthereare abouttwo dozen high-level, highly crosscutting software concerns \nthat are likely to affect any new Java project. Without any special newtools, developers can usethis \nknowledgetokeepthose crosscuttingconcerns undera tight controlbybeing careful withnamingandcodingconventions.Our \nresultsatthisvery largescaleexplainthestrongintuitions drivingAOP from thebeginning towards aspects such \nas exceptionhandling, authentication,persistency,andsoforth. As forproject-speci.c concerns,thereis no \nabsolute ref\u00aderence about whatis andwhatis not crosscutting, as there arenoa-prioriaspects;thereare onlyproject-speci.c \ncon\u00adcerns.Accordingtothetheorypresentedhere, crosscutting is notabinary quantity,but insteadacontinuous \nvalueof entropybetween0 an1.Depending onhowthedevelopers specify anddesigntheirsoftware,these concerns \nmaybe\u00adcome more or lessscatteredand tangled with each otherand withthegeneral-purposeconcernsintheprogram \nrepresen\u00adtations.2 So, for these, crosscutting can only be measured afterthefact as an emergent propertyofthe \nrepresentations andthedevelopmentprocess itself.Ifaconcern becomes scattered,developers canrethinkitsrepresentation(atwhat\u00adeverleveltheyareworking) \nandrefactor it. Our results show that project-speci.c concerns tend to be less scattered than the general-purpose \nones, possibly becausedevelopersdoa goodjobat modularizingthemin their designs. But, as seen in CoffeeMud \nand others, it is alsoquite possibletoscatterthemwidely. Thetechnique describedinthispaper canbeintegrated \nintoawidevarietyofdevelopmenttools, such as anIDE, in orderto both trackthevocabularyusedby thedevelop\u00ad \n2By program representation we mean any representation, from formal speci.cations to code. ers, andmeasurescattering \nandtangling asthe project pro\u00adgresses.Aprojectwhoselatenttopicslook mostlylike noise is likely to have \nserious problems in terms of vocabulary choices amongdevelopers,whichinturnislikely to cause misunderstandings \nand, consequently,bugs.Aprojectwith well-identi.edproject-speci.ctopics,butwithhighlevelsof scatteringofthosetopics,islikelytorequire \nrefactoring,or atleast rethinking. Theresults forthe entirerepository raisesome questions forexistingAOPsolutions.Ifallofthosesoftwaretopics \nare scattered, AOP solutions should support them all in equal manner; some of them do. For example, AspectJ, \nbeing so general-purpose, provides support for designing string andlistmanipulationasseparatemodules.That, \nhowever, producesodddesigns,withmostoftheinnercoreofobjects pulledout fromthemand programmedinreverse-style;that \nisrarelydone.Butifthatwouldbeodd,thequestionisraised aboutthereason for doingthat forconcernssuch aslogging \nandconcurrency.Attheveryleast, that practice, advocated byAOPfrom earlyon, requiresa betterjusti.cation. \nMoreimportantly,though,ifconcerns aretopicsthathave to bewoven/coordinatedtogetherinthesoftwarerepresen\u00adtations,somehow,we \ncan usethis knowledgeto forgeim\u00adproveddevelopmentmethodologies andtoolstosupportthis inevitableprocessthat \nunderliessoftwareconstruction.As such,thework presentedhereprovidesatheoretical founda\u00adtionand ameanformodeling \naspects earlyinthesoftware developmentlife cycle, and supports work (Clarke andBa\u00adniassad 2005;Baniassad \net al. 2006)thatis fundamentally groundedonthe assumptionthatcrosscuttingconcernsexist abovetherepresentations,andthusthereshouldbeasupport \nfortheir earlymodeling. To validate our methodology, we focused only on Java programs, becausethevast \nmajorityof practicalAOP work hasbeen doneinJava.While an argument canbe madethat the same theory applies \nto software written in other pro\u00adgramminglanguagesandotherrepresentations (e.g.UML), strictly speaking, \nthe results should not be extrapolated at thispoint.Furtherempirical analysisofprojectsusingother representations \nmustbe donein orderto.nd outhowwell theproposed de.nitionsof concernsandaspectsappliesto them. 7. Related \nWork Thisworkbuildsonalargebodyof literatureandresearch insoftware engineeringanddatamining. The concept \nof software concern has been around for a long time, taking different names and slightly different .avors \nover the years, and leading to the concept of As\u00adpects, as crosscutting concerns. An early analysis of \ncon\u00adcernswasconductedbyBiggerstaff(Biggerstaff1989;Big\u00adgerstaffetal. 1993),who proposedtheideaof concept \nas\u00adsignment inthecontextofprogram understandingforreuse. Thisworkidenti.edthegap betweenthesource code \nand the human-level concepts,suggestingthe need fortoolsthat helpbridgethis gap. Theidenti.cationofthisproblem \ngap wasanimportant contribution,butthethespeci.csolution proposedwaslimited, andfocused onCprograms:it \ncon\u00adsistedof an earlycallfor model-drivendevelopmentwhich, thefocusbeingC,wasalsoan early callforOOP.Thosepa\u00adpersdid,however,stresstheimportanceof \nhuman-de.ned identi.ers( naturallanguagetokens )andotherinformalin\u00adformationsuchthatof comments.Assuch,this \nearly work continuestobeusedbymorerecentwork,andisstillamajor referenceforthetheoryofaspects. Most researchreports \nonAOP assessment tend tofocus onthethird hypothesis(i.e.AspectJ).Thesestudieshave used analytical argumentation(Kiczales \net al. 1997; Hanne\u00admann andKiczales 2002), case-study methodologies (Lip\u00adpert andLopes 2000;KienzleandGuerraoui \n2002; Lopes and Bajracharya 2006; Kulesza et al. 2006), comparative analyses ofverysmallcollections ofexistingsystems(Garcia \netal. 2005;Cachoet al. 2006;Filhoet al. 2006),andsmall userstudies (Murphyetal. 1999;Walkeretal. 1999).The \nsmall scaleand controlled conditionsofthesestudies make them pronetosubjectiveinterpretations andover.tting.In \nanycase,thefocusofthis paperis notAspectJ, or anyother AOPtoolin particular,buttheconceptofaspect itself. \nThus theworkmostcloselyrelatedtothispaperistherecentwork onsoftware andaspectminingdiscussedbelow. 7.1 \nTopic Modeling of Source Code Formal conceptanalysis(FCA)is an unsupervised cluster\u00adingalgorithmused \ntogrouptogether objectswith ashared setofattributes,andsimilarlytoidentifythe setofattributes sharedby \nobjectswithinacluster (GanterandWille 1999). FCA has been used to identify concepts in software. At\u00adtributes \ncorrespondingto code featuresofinterest areman\u00adually de.ned by the user beforehand. Unlike LDA, FCA doesnotoperate \nwithinaprobabilisticframework,butrather uses latticetheorytoconstructgroupsof conceptuallysim\u00adilarsoftwareartifacts.Thepresenceorabsenceofattributes \nalone drives the concept clustering, with no formal models of uncertainty,likelihood, or prior knowledge \nbeinglever\u00adaged.Theresultisthatanentity belongstoaconceptcluster or it doesn t, as opposed to LDA, where \nan entity belongs to allconcepts,but withvaryingdegreesofbelief.Identi\u00ad.eranalysis(IA) canbeusedinconjunctionwithFCA \nto attempttoclusterprogramentities.Inthis caseIAisusedto represent aprogram entity asacollectionoftokensderived \nfrom entity name or text, and it is these tokens that serve astheattributes uponwhich the formal conceptanalysisis \nbased. Ultimately the concept clusters produced are based onthesharing ofidenti.ertokens amongprogram \nentities. However,unlikethe approach presentedhere,FCA/IAis not amixture model.Because theLDA-based approach \nmodels program entitiesasmixturesofconcepts(topics)which are themselves mixtures of words, we can capture \nmore subtle statistical relationships among topics, words, and entities. Moreover,becausethis mixturemodelisprobabilistic,we \ncan applyinformationtheorydirectlytotheproblemofscat\u00adtering andtanglingquanti.cation. Theideaof modeling \nsource codewith topics hasbeen proposed before.Forexample, codetopicclassi.cationhas been explored using \nsupport vector machines (Ugurel et al. 2002),butthetechniqueissigni.cantlydifferent from ours. Firstly,atrainingsetmustbemanuallypartitionedinto \ncate\u00adgoriesbased on project metadata.Topics,consistingofcom\u00admonlyoccurringkeywords,areextracted for each \ncategory andusedtoformfeatures onwhichtotrainthemodel. The training andtestingset comprise only100 and30projects \nrespectively.Marcuset al.,inthe lineofBiggerstaff swork, use latent semantic analysis (LSA) to locate \nconcepts in code (Marcus et al. 2004). The goal is to enhance soft\u00adware maintainabilitybyeasilyidentifyingrelatedpiecesof \ncodeinasoftwareproductthatworktogetherto providea speci.cfunctionality(concept),but maybedescribed with \ndifferentkeywords(synonyms, etc).Inthissensethework sharessomeof our goals,but does not considertheprob\u00adlemofautomaticallyextractingtopicdistributionsfromarbi\u00adtraryamountsofsource \ncode.Progresswas madeinthisarea throughtheapplicationofLSA tosoftware repositoriesin ordertoclusterrelatedsoftwareartifacts(Kuhnetal. \n2006). However, newapproaches forde.ningtopicscattering and documenttanglingwere not considered.LatentDirichlet \nAl\u00adlocation has been previously applied to log traces of pro\u00adgramexecution,providingaframeworkforstatisticaldebug\u00adging(Andrzejewskietal. \n2007). Closelyrelatedto ourownworkistheMUDABluesys\u00adtem, which explicitly considers the need for unsupervised \ncategorizationtechniquesof source code,anddevelopssuch atechnique asabasisforsoftwareclustering withtheaim \nofinformationsharing(Kawaguchietal. 2004).Unlike our work,however,MUDABlueutilizes LSAratherthanaprob\u00adabilisticframework.Furthermore,their \nassessment was also doneatamuchsmallerscalethan oursand consideredonly 41 projects. Mintoand Murphyhave \nproposedatechniqueformining developerexpertisetoassistinbug.xes(Mintoand Murphy 2007).Whileexpertiseisrelatedtothegeneralidea \noftopics, the approach is substantially different, relying on author and .le update metadata of the con.guration \nmanagement system rather than source code directly. Additionally, the approachisvalidated on only3software \nprojectsratherthan thethousands consideredinthis paper. Recently,wehaveappliedauthor-topicmodels tosource \ncodetoextractdevelopercontributions fromasubsetof.les oftheEclipse3.0codebase (Linsteadetal. 2007),butthis \nworkdid not considertheanalysisof crosscutting concerns as addressedinthispaper.Welaterexpandedthescopeof \ntopic modeling techniques to multi-project repositories, as well aspresentedapreliminarystatistical analysisofalarge \nsoftware repository (Linstead et al. 2008). 7.2 Aspect Mining and Modeling As mentionedbeforeseveraltechniquesand \nmethodologies exist for aspect mining. In general aspect mining consists of identi.cation, mapping and \nuse of metrics for aspects (Eaddy et al. 2007). Identi.cation deals with discovering aspects in existing \nsoftware. This is done either manually (Robillard andMurphy 2002; Griswold et al. 2001; Hanne\u00admann andKiczales \n2001) or(semi) automatically (Marin etal. 2004; ZhangandJacobsen 2007;Kellensetal. 2007). Mapping deals \nwith associating identi.ed aspects or con\u00adcernswiththemodulesinimplementation, usuallyelements of source \ncode such as classes or methods (Robillard and Murphy 2002; Eaddy et al. 2008). The task of identi.ca\u00adtionand \nmappingof aspectsisexplicitwhenthe underlying aspect-miningmethod clearlydifferentiatesa concernmodel \nfromtheimplementation. Thesetwotasksseemtogetinter\u00admixedwhenthereisno suchexplicitdistinctionbetweenthe \nconcernmodelandtheimplementation. Metricsusedinas\u00adpectminingusuallydealwithmeasuresof crosscutting,scat\u00adtering, \nandtangling. Thesemetrics areusedintwo different ways:(1)to measuretheprecisionand accuracyoftheaspect \nminingtechniqueincapturingcrosscuttingconcerns(Cojo-carandS\u00b8erban 2007);and(2)toderivevarious conclusions \nregardingtheeffectof crosscutting,bycorrelatingthemwith selected quality attributes for software (Eaddy \net al. 2008). Kellens et al. offer a detailed survey of seven different code-basedaspectminingtechniques(Kellensetal. \n2007). Since all techniques surveyed are code-centric theydo not bringoutthedistinctionbetween identi.cationandmapping \ntasks during aspect mining. Their comparison framework implicitly assumes that there exists such a mapping \nof as\u00adpectstosource code elements.Ourwork presentedinthis paperhas focused onautomaticdiscoveryoftopicsin \ncode with measuresofscattering andtangling. Thus,thesetopics are possiblyaspectsmanifestedinthe implementation.We \ncanuseKellenetal. sframework tohighlightthefeatures of our approachto compareit against existing approaches. \nOurapproach canbe characterized withthefollowinglistof attributes takenfromtheirframework. 1. Static \nvs. Dynamic Data: Our approach is based on static data,no dynamicanalysisisrequired. 2. Token-Based \nvs. Structural/Behavioral Analysis: The informationusedintopicmodeling comes froma deep structural analysisof \ncode,aswellaslexical analysisof thenamesofentitiesextractedfromthe code elements. 3. Granularity: Ourapproachyieldsaprobabilistic \nassign\u00admentofdiscoveredtopicstoindividualsource code.les. 4. Tangling and Scattering: Our technique \nyields precise measuresfor bothtanglingandscattering. 5. User Involvement: No manual input is required \nfrom theuserinidenti.cationof thetopics.However, human  judgementis neededto makesensibleinterpretationof \nthesetofwordsthatemerge out aslatenttopics. 6. Largest System: Our technique has been validated in systemsof \nvaryingsizes,and atseveralscales.Ourval\u00adidation considered 4,632 Java projects, as well as over individualprojects \nofvaryingsizes. 7. Empirical Validation: This is possibly the strongest component of our approach. We \nhave conducted vali\u00addationexperimentsatmultiplegranularity scales,from singleprojectstoInternet-scalerepositories,several \nor\u00adderofmagnitudebeyond anypreviousexperiments. 8. Preconditions: Our approach makes verylittle assump\u00adtions \nabout what an aspect is; it simply relies on the assumption that developers choose reasonable names for \ntheir software elements. This is true for other ap\u00adproaches such as Identi.er Analysis , Method Clus\u00adtering \n, LanguageClues and Token-basedclone detec\u00adtion .While working on vocabulary selection wegained experience \nin improving topic quality by carefully ex\u00adpandingthevocabularytoincludetokens fromtheJDK and method \ncalls.  Manualapproachesofmining aspectshavethe advantage ofbeingcontrolled,andthusproduceahighly accurateiden\u00adti.cationand \nmappingof concernstothe underlyingimple\u00admentation. This,however, can also beadrawback;the re\u00adsults andthe \nmethodology arepronetosubjectiveinterpre\u00adtationandthey aredif.culttoreplicate, especiallyat large scale. \nManualtechniquesarehighlylaborintensive, requir\u00adinghundredsofhourstoanalyzeevenasingleproject,which renderssuch \nmethodsinappropriate forgeneral application. Recent work in early aspects has employed automated techniques \nto mine aspects in non-code artifacts such as requirements (Duan and Cleland-Huang 2007; Kit et al. 2006).These \ntechniques are similarin naturethatthey em\u00adploy mostly text-mining techniques and bear some resem\u00adblancewiththetext-basedaspectmining \nmentionedbefore. 8. Conclusion Wehavepresentedan operationaltheoryofaspectsbasedon unsupervised,probabilistic \ntopicmodeling and on informa\u00adtiontheory.Ourframeworkaimsatprovidingasolidfounda\u00adtionfor understandingwhat \naspectsare andwheretheycome from. It can be summarized in the following sentence: as\u00adpectsare latenttopicswithhighscatteringentropy.Toiden\u00adtifylatenttopics,weuseatechniqueknownas \nLatentDirich\u00adletAllocation,arelativelyrecentstatistical data mining tech\u00adniquethat hasbeen usedverysuccessfullyintopicmodeling \nfornaturallanguagetexts.Tobe ableto applyittosoftware in a meaningful way, we pre-process the words according \ntowidely-usednaming conventions,and choosetouse only certain words of the source .les that we know, by \ndomain experience,directlycontributetotheeffectivefunctionalin\u00adformationofsoftware. Theresultisa modelofsoftwarecon\u00adcernsthat \ndirectlymapstotheconceptoflatenttopics. Byusing thisprobabilistic technique,we canthen eas\u00adily measurescattering \nandtanglingby the entropiesofthe probabilitydistributions of topics over .les in the case of scattering,and.lesovertopicsinthe \ncaseoftangling. We have validated our model empirically at two scales: 1) onaverylarge dataset consistingof4,632Java \nprojects; and2) on5Java projectsof varyingsizes.The results con\u00ad.rmthe mainAOPintuitions abouttheexistence \ncrosscut\u00adting concerns, and the possibility of measuring scattering andtangling. Thecrosscuttingconcernsidenti.ed \nat thevery large scale include most of the aspects used as prototypi\u00adcalexamplesof crosscuttinginthe \nliterature.Furthermore, we compared our results with several other aspect mining techniques,andfoundsigni.cantagreement,con.rmingthat \nour mathematical model of aspects matches and extends the modelthatthe communityhasbeenworkingwith. Acknowledgments \nWorkinpartsupportedbyNationalScienceFoundationMRI grantEIA-0321390 andaMicrosoftFacultyResearchAward \ntoPB, as well asNationalScienceFoundationgrantCCF\u00ad0347902toCLandCCF-0725370toCLandPB. References DavidAndrzejewski, \nAnneMulhern, BenLiblit,andXiaojinZhu. Statistical debugging usinglatenttopicmodels.InStanMatwin andDunjaMladenic, \neditors, 18thEuropeanConference on Ma\u00adchineLearning,Warsaw,Poland,September 17 21 2007. SushilBajracharya,TrungNgo,ErikLinstead,YimengDou, \nPaul Rigor, Pierre Baldi, and Cristina Lopes. Sourcerer: a search enginefor opensource code supporting \nstructure-based search. In OOPSLA 06:Companiontothe 21stACMSIGPLANCon\u00adferenceonObject-OrientedProgramming \nSystems,Languages, andApplications,pages 681 682,NewYork,NY,USA, 2006. ACMPress. ISBN 1-59593-491-X. \ndoi:http://doi.acm.org/10. 1145/1176617.1176671. SushilBajracharya,TrungNgo,ErikLinstead,YimengDou, Paul \nRigor, Pierre Baldi, and Cristina Lopes. A study of ranking schemes in Internet-scale code search. Technical \nreport, UCI Institute forSoftwareResearch, 2007. ElisaL.A.Baniassad,PaulC. Clements,Jo ao Ara\u00b4ujo,AnaMor\u00adeira,AwaisRashid,andBedirTekinerdogan.Discovering \nearly aspects. IEEESoftware,23(1):61 70, 2006.URLhttp://doi. ieeecomputersociety.org/10.1109/MS.2006.8. \nTed J. Biggerstaff. Design recovery for maintenance and reuse. IEEE Computer, 22(7):36 49, 1989. TedJ.Biggerstaff,BharatG.Mitbander, \nandDallasWebster.The conceptassignmentprobleminprogram understanding.In ICSE 93:Proceedingsofthe 15thInternationalConference \non Soft\u00adware Engineering, pages 482 498, Los Alamitos, CA, USA, 1993.IEEEComputerSocietyPress.ISBN0-89791-588-7. \nDavid M. Blei, Andrew Y. Ng, and Michael I. Jordan. Latent dirichlet allocation. Journal of Machine Learning \nResearch, 3:993 1022, January 2003. URL http://jmlr.csail.mit. edu/papers/v3/blei03a.html. SilviaBreu. \nExtending dynamicaspectminingwith staticinfor\u00admation. In SCAM 05: Proceedings of the Fifth IEEE Inter\u00adnationalWorkshop \non SourceCodeAnalysis and Manipulation (SCAM 05),pages 57 65,Washington,DC,USA, 2005.IEEE ComputerSociety. \nISBN 0-7695-2292-0. doi:http://dx.doi.org/ 10.1109/SCAM.2005.9. Silvia Breu andThomas Zimmermann. Mining \naspects from version history. In ASE 06: Proceedings of the 21st IEEE International Conference on Automated \nSoftware Engineering (ASE 06),pages 221 230,Washington,DC,USA, 2006.IEEE ComputerSociety. ISBN0-7695-2579-2. \nM.Bruntink,A. vanDeursen,R. vanEngelen,T.Tourwe. Onthe use ofclonedetectionfor identifyingcrosscuttingconcern \ncode. IEEE Trans. Softw. Eng., 31(10):804 818, 2005. ISSN 0098\u00ad5589. NelioCacho,ClaudioSant Anna,EduardoFigueiredo,Alessandro \nGarcia, Thais Batista, and Carlos Lucena. Composing design patterns:ascalability studyof aspect-orientedprogramming. \nIn AOSD 06:Proceedings ofthe5thInternationalConference on Aspect-Oriented Software Development, pages \n109 121, New York,NY,USA, 2006.ACMPress.ISBN1-59593-300-X. Gerardo Canfora and Luigi Cerulo. How crosscutting \nconcerns evolveinjhotdraw. In STEP 05:Proceedings ofthe 13thIEEE InternationalWorkshop on SoftwareTechnologyandEngineer\u00adingPractice,pages \n65 73,Washington,DC,USA, 2005.IEEE ComputerSociety. ISBN 0-7695-2639-X. doi:http://dx.doi.org/ 10.1109/STEP.2005.13. \nGerardoCanfora,LuigiCerulo,andMassimiliano Di Penta. On the useoflineco-changeforidentifying crosscutting \nconcerncode. In ICSM 06:Proceedingsofthe 22ndIEEEInternationalCon\u00adferenceon SoftwareMaintenance,pages \n213 222,Washington, DC,USA,2006.IEEEComputerSociety.ISBN0-7695-2354-4. M. Ceccato, M. Marin, K. Mens, \nL. Moonen, P. Tonella, and T. Tourwe. A qualitative comparison of three aspect mining techniques. InIWPC \n05:Proceedingsofthe 13thInternational Workshop onProgramComprehension,pages 13 22,Washing-ton,DC,USA, \n2005.IEEEComputerSociety. ISBN0-7695\u00ad2254-8. doi:http://dx.doi.org/10.1109/WPC.2005.2. Siobh`an Clarke \nand Elisa Baniassad. Aspect-Oriented Analy\u00adsis and Design. Addison-Wesley Professional, 2005. ISBN 0321246748. \nGrigoretaSo.aCojocar andGabrielaS\u00b8erban.Onsomecriteriafor comparing aspect miningtechniques.In LATE 07:Proceedings \nofthe3rdWorkshop onLinkingAspectTechnology andEvolu\u00adtion,page7,NewYork,NY,USA, 2007.ACM.ISBN1-59593\u00ad655-4. \ndoi:http://doi.acm.org/10.1145/1275672.1275679. Chuan Duan and Jane Cleland-Huang. A clustering technique \nforearlydetectionofdominant and recessivecross-cutting con\u00adcerns. In EARLYASPECTS 07: Proceedings of \nthe Early As\u00adpectsatICSE,page1,Washington,DC,USA,2007.IEEECom\u00adputerSociety. ISBN 0-7695-2957-7. doi:http://dx.doi.org/10. \n1109/EARLYASPECTS.2007.1. MarcEaddy,AlfredAho, andGailC.Murphy.Identifying, assign\u00ading, andquantifying \ncrosscutting concerns. In ACoM 07:Pro\u00adceedingsoftheFirstInternationalWorkshop onAssessment of ContemporaryModularizationTechniques,page2,Washington, \nDC,USA,2007.IEEEComputerSociety.ISBN0-7695-2967-4. doi:http://dx.doi.org/10.1109/ACOM.2007.4. MarcEaddy,ThomasZimmermann, \nKaitlin D.Sherwood,Vibhav Garg,GailC.Murphy,NachiappanNagappan, andAlfredAho. Docrosscutting concernscausedefects. \nIEEETransactionson SoftwareEngineering 2008. FernandoCastorFilho,NelioCacho,EduardoFigueiredo,Raquel \nMaranhao, AlessandroGarcia,andCeciliaMaryF.Rubira.Ex\u00adceptions and aspects: the devil is in the details. \nIn SIGSOFT 06/FSE-14: Proceedings of the 14th ACM SIGSOFT Inter\u00adnational Symposium on Foundations of \nSoftware Engineering, pages 152 162,NewYork,NY,USA, 2006.ACMPress. ISBN 1-59593-468-5. B. GanterandR.Wille. \nFormalConceptAnalysis:Mathematical Foundations. Springer-Verlag, 1999. AlessandroGarcia, Cl\u00b4audioSant \nAnna,EduardoFigueiredo,Uir\u00b4a Kulesza, Carlos Lucena, and Arndt von Staa. Modularizing design patterns \nwith aspects: a quantitative study. In AOSD 05:Proceedingsofthe4thInternationalConference onAspect-Oriented \nSoftware Development, pages 3 14, New York, NY, USA, 2005.ACMPress.ISBN1-59593-042-6. WilliamG.Griswold, \nJimmyJ.Yuan,andYoshikiyoKato. Ex\u00adploiting the map metaphor in a tool for software evolution. In ICSE \n01:Proceedings ofthe 23rdInternationalConference on SoftwareEngineering,pages 265 274,Washington,DC,USA, \n2001.IEEEComputerSociety. ISBN0-7695-1050-7. J. Hannemann andG.Kiczales.Overcomingthe prevalentdecom\u00adpositionoflegacycode. \nInWorkshop Advanced Separation of Concerns,ICSE 01, 2001. JanHannemann andGregor Kiczales. Designpatternimplemen\u00adtationinjavaand \naspectj. In OOPSLA 02:Proceedingsofthe 17thACMSIGPLANConference onObject-OrientedProgram\u00adming, Systems, \nLanguages, and Applications, pages 161 173, NewYork,NY,USA, 2002.ACMPress. ISBN1-58113-471\u00ad 1. ShinjiKawaguchi,PankajK.Garg, \nMakoto Matsushita,andKat\u00adsuroInoue. Mudablue:Anautomatic categorizationsystemfor opensourcerepositories.In \nAPSEC 04:Proceedingsofthe11th Asia-Paci.c Software Engineering Conference (APSEC 04), pages 184 193,Washington,DC,USA, \n2004.IEEEComputer Society. ISBN 0-7695-2245-9. doi: http://dx.doi.org/10.1109/ APSEC.2004.69. Andy Kellens, \nKim Mens, and Paolo Tonella. A survey of au\u00adtomated code-level aspect mining techniques. In Transactions \nonAspect-OrientedSoftwareDevelopmentIV.SpringerBerlin/ Heidelberg, 2007. doi:10.1007/978-3-540-77042-8 \n6. GregorKiczales,JohnLamping, Anurag Mendhekar,ChrisMaeda, CristinaLopes, Jean-MarcLoingtier, andJohnIrwin. \nAspect\u00adoriented programming. In Mehmet Aks\u00b8itand SatoshiMat\u00adsuoka, editors, European Conference on Object-Oriented \nPro\u00adgramming,volume 1241 ofLNCS,pages 220 242.SpringerVer\u00adlag, 1997. GregorKiczales,ErikHilsdale,Jim \nHugunin,MikKersten,Jeffrey Palm, and William G. Griswold. An overview of aspectj. In ECOOP 01:Proceedings \nofthe 15thEuropean Conference on Object-Oriented Programming, pages 327 353, London, UK, 2001.Springer-Verlag. \nISBN3-540-42206-4. JorgKienzleand RachidGuerraoui.AOP:Doesitmakesense?the case of concurrency andfailures. \nInECOOP 02:Proceedings ofthe 16thEuropeanConference onObject-OrientedProgram\u00adming,pages 37 61,London,UK, \n2002.Springer-Verlag.ISBN 3-540-43759-2. LoKwunKit,ChanKwunMan,andElisaBaniassad. Isolatingand relatingconcernsinrequirementsusinglatent \nsemantic analysis. SIGPLANNot., 41(10):383 396, 2006. ISSN0362-1340. doi: http://doi.acm.org/10.1145/1167515.1167506. \nAdrianKuhn,StephaneDucasse, andTudorGirba. Semantic clus\u00adtering:Identifyingtopicsin source code. Information \nandSoft\u00adwareTechnology, 2006. Uira Kulesza, Claudio Sant Anna, Alessandro Garcia, Roberta Coelho, Arndt \nvon Staa, and Carlos Lucena. Quantifying the effectsof aspect-orientedprogramming:A maintenance study. \nIn ICSM 06:Proceedingsofthe 22ndIEEEInternationalCon\u00adferenceon SoftwareMaintenance,pages 223 233,Washington, \nDC,USA,2006.IEEEComputerSociety.ISBN0-7695-2354-4. ErikLinstead,PaulRigor,SushilBajracharya,CristinaLopes, \nand PierreBaldi.Mining eclipsedevelopercontributionsviaauthor\u00adtopic models. MSR 2007: Proceedings of \nthe Fourth Interna\u00adtionalWorkshop onMining SoftwareRepositories,0:30, 2007a. doi:http://doi.ieeecomputersociety.org/10.1109/MSR.2007.20. \nErikLinstead,PaulRigor,SushilBajracharya,CristinaLopes, and Pierre Baldi. Mininginternet-scale software \nrepositories. NIPS 2007:Advances inNeuralInformationProcessing Systems20, 0, 2008. Martin LippertandCristinaVideira \nLopes. Astudy onexception detectionand handling using aspect-orientedprogramming.In International Conference \nSoftware Engineering. ACM Press, 2000. CristinaVideira Lopes. AOP:Ahistoricalperspective(what s in aname?). \nInRobertFilman,TzillaElrad,SiobhanClarke, and MehmetAksit, editors,Aspect-OrientedSoftwareDevelopment, \nchapter5,pages 97 122.AddisonWesley, 2004. Cristina Videira Lopes and Sushil Krishna Bajracharya. Assess\u00adingaspect \nmodularizationsusingdesignstructurematrixandnet option value. Transactions onAspect-OrientedSoftwareDevel\u00adopment,1:1 \n35, 2006. AndrianMarcus, Andrey Sergeyev,VaclavRajlich,andJonathan Maletic. Aninformationretrieval approachto \nconceptlocation in source code. InProceedings ofthe 11thWorking Conference onReverseEngineering(WCRE2004),pages \n214 223,Novem\u00adber 2004. Marius Marin,ArievanDeursen,andLeon Moonen. Identifying aspectsusingfan-in analysis.In \nWCRE 04:Proceedings ofthe 11thWorkingConference onReverseEngineering(WCRE 04), pages 132 141,Washington,DC,USA, \n2004.IEEEComputer Society. ISBN0-7695-2243-2. Shawn Minto and Gail C. Murphy. Recommending emergent teams. \nIn MSR 07: Proceedings of the Fourth International Workshop on Mining Software Repositories, page 5, \nWashing- ton,DC,USA, 2007.IEEEComputerSociety. ISBN0-7695\u00ad2950-X. doi:http://dx.doi.org/10.1109/MSR.2007.27. \nGail Murphy, Robert Walker, and Elisa Baniassad. Evaluating emerging softwaredevelopmenttechnologies:Lessons \nlearned from assessing aspect-oriented programming. IEEE Transac\u00adtions on SoftwareEngineering, 25(4):435 \n455, 1999. MartinP. RobillardandGailC.Murphy. Representing concerns in source code. ACM Trans. Softw. \nEng. Methodol., 16(1): 3, 2007. ISSN 1049-331X. doi: http://doi.acm.org/10.1145/ 1189748.1189751. M.R. \nRobillard and G.C. Murphy. Concern graphs: .nding and describing concerns using structuralprogram dependencies. \nIn ICSE 2002.Proceedingsofthe24thInternationalConferenceon SoftwareEngineering,pages 406 416, 2002. David \nShepherd, Jeffrey Palm, Lori Pollock, and Mark Chu-Carroll. Timna: a framework for automatically combining \nas\u00adpect mining analyses. In ASE 05: Proceedings of the 20th IEEE/ACM International Conference on Automated \nSoftware Engineering,pages 184 193,NewYork,NY,USA,2005a.ACM Press.ISBN1-59593-993-4. David Shepherd, \nLori Pollock, and Tom Tourw&#38;#233;. Using language cluestodiscovercrosscuttingconcerns. InMACS 05: \nProceedingsofthe 2005Workshop on ModelingandAnalysisof Concernsin Software,pages 1 6,NewYork,NY,USA, \n2005b. ACMPress. ISBN1-59593-119-8. PaoloTonella andMarianoCeccato. Aspect miningthroughthe formal conceptanalysisof \nexecutiontraces. InWCRE 04:Pro\u00adceedings ofthe 11thWorking Conference onReverseEngineer\u00ading(WCRE 04),pages \n112 121,Washington,DC,USA, 2004. IEEEComputerSociety. ISBN0-7695-2243-2. ClaireTristram. Untanglingcode. \nMITTechnologyReview:Ten Emerging technologies that will change the world, February 2001. S.Ugurel,R.Krovetz,andC.L. \nGiles.What sthecode?:automatic classi.cation of source code archives. In KDD 02: Proceed\u00adingsoftheEighthACMSIGKDDInternationalConference \non Knowledge Discovery and Data Mining, pages 632 638, New York,NY,USA, 2002.ACMPress.ISBN1-58113-567-X. \ndoi: http://doi.acm.org/10.1145/775047.775141. RobertWalker,ElisaBaniassad,andGailMurphy. Aninitialas\u00adsessmentofaspect-orientedprogramming. \nIn InternationalCon\u00adference Software Engineering. IEEE Computer Society Press, 1999. Carl Zetie. Aspect-oriented \nprogramming considered harmful. ForresterResearch,April2005. CharlesZhang andHans-Arno Jacobsen.Ef.cientlymining \ncross\u00adcutting concerns through random walks. In Aspect-Oriented SoftwareDevelopment(AOSD 07),March 2007. \n  \n\t\t\t", "proc_id": "1449764", "abstract": "<p>After more than 10 years, Aspect-Oriented Programming (AOP) is still a controversial idea. While the concept of aspects appeals to everyone's intuitions, concrete AOP solutions often fail to convince researchers and practitioners alike. This discrepancy results in part from a lack of an adequate theory of aspects, which in turn leads to the development of AOP solutions that are useful in limited situations.</p> <p>We propose a new theory of aspects that can be summarized as follows: concerns are latent topics that can be automatically extracted using statistical topic modeling techniques adapted to software. Software scattering and tangling can be measured precisely by the entropies of the underlying topic-over-files and files-over-topics distributions. Aspects are latent topics with high scattering entropy.</p> <p>The theory is validated empirically on both the large scale, with a study of 4,632 Java projects, and the small scale, with a study of 5 individual projects. From these analyses, we identify two dozen topics that emerge as general-purpose aspects across multiple projects, as well as project-specific topics/concerns. The approach is also shown to produce results that are compatible with previous methods for identifying aspects, and also extends them.</p> <p>Our work provides not only a concrete approach for identifying aspects at several scales in an unsupervised manner but, more importantly, a formulation of AOP grounded in information theory. The understanding of aspects under this new perspective makes additional progress toward the design of models and tools that facilitate software development.</p>", "authors": [{"name": "Pierre F. Baldi", "author_profile_id": "81100344423", "affiliation": "University of California, Irvine, Irvine, CA, USA", "person_id": "P1223241", "email_address": "", "orcid_id": ""}, {"name": "Cristina V. Lopes", "author_profile_id": "81100368185", "affiliation": "University of California, Irvine, Irvine, CA, USA", "person_id": "P1223242", "email_address": "", "orcid_id": ""}, {"name": "Erik J. Linstead", "author_profile_id": "81319496009", "affiliation": "University of California, Irvine, Irvine, CA, USA", "person_id": "P1223243", "email_address": "", "orcid_id": ""}, {"name": "Sushil K. Bajracharya", "author_profile_id": "81100100238", "affiliation": "University of California, Irvine, Irvine, CA, USA", "person_id": "P1223244", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1449764.1449807", "year": "2008", "article_id": "1449807", "conference": "OOPSLA", "title": "A theory of aspects as latent topics", "url": "http://dl.acm.org/citation.cfm?id=1449807"}