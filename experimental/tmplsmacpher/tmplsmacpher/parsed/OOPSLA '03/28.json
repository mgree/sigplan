{"article_publication_date": "10-26-2003", "fulltext": "\n Visual SDLC: Improving Requirements Engineering for Object-Oriented Systems Marc Raygoza Visual SDLC \nAliso Viejo, CA 92656 marc@visualsdlc.com ABSTRACT In theory, requirements engineering solves many of \nsoftware engineering s fundamental problems. The stakeholders know what the developers are building, \nwhy they are building it, when they are building it, and even to some degree, how they are building it. \nIf requirements engineering resolves some of the basic communication issues between IT and the business, \nwhy aren t more companies actively practicing this discipline? In practice, requirements engineering \nis almost impractical without a commercial automation tool. The critics argue that the current automation \ntools do not convincingly demonstrate its value proposition, or fulfill the longstanding promises of \nthe leading requirements engineering experts. This paper describes how the enterprise software development \nlifecycle management solution, Visual SDLC, addresses some of the outstanding issues of the present requirements \nengineering tools. Categories and Subject Descriptors D.2.2 [Software Engineering]: Requirements/Specifications \n elicitation methods, languages, methodologies, tools General Terms Design, Documentation, Management, \nReliability, Standardization Keywords Enterprise Software Development Lifecycle Management, Requirements \nEngineering, Software Development Life Cycle, use cases, test cases 1. INTRODUCTION Future requirements \nengineering tools need to provide more functionality than capturing textual specifications, and providing \ncolumnar-based tracability matrices. Since requirements interact with every facet of the software development \nlifecycle, requirements engineering tools should inherently provide the same round-trip functionality \nas enterprise lifecycle management software. Copyright is held by the author/owner(s). OOPSLA 03, October \n26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. Visual SDLC s objective is to resolve \nrequirements engineering issues, and in the process provide an intuitive enterprise lifecycle management \nsolution that: Cultivates cross-functional team interaction  Promotes software specification reuse \n Enhances integration between textual specification and modeling tools  Promotes product lifecycle \ntraceability  Automates generation of object models from use cases  2. SOLUTIONS Cross-functional \nteam interaction Requirements engineering is an area of software engineering that is more likely to involve \nmore parts of the business than any other software engineering discipline. Business stakeholders provide \nthe high-level ideas. The analysts capture these ideas, and transform them into meaningful requirements. \nThe developers and testers verify these requirements and then develop and test, respectively. Visual \nSDLC enables software development teams to collaborate collectively using a requirements engineering \nworkflow system that cognitively traces the ideas to the final product. Software specification reuse \nWhy should the term reuse be an exclusive concept to programming languages? Visual SDLC facilitates perpetual \nreuse of specifications. Some of the leading commercial requirements engineering tools use general\u00adpurpose \ntools, such as Microsoft Word , to capture its software specifications. In Microsoft Word to share information \nbetween two documents, one must perform a manual copy and paste between the source and target documents. \nWhat happens when the specification s content in the source document is updated? Obviously, the target \ndocument now has content that does not coincide with the source. Our agile document management solution \nmanages the synchronicity of the source and target documents. This ensures information is disseminated \nproperly, and developers are not reading from an obsolete specification. Integration between textual \nspecification and modeling tools Couplings between textual specification and modeling tools are immature \nand seldom used [1]. Engineers are required to develop specification using two or more tools: a tool \nfor textual specifications and one or more tools for model-oriented analysis and design [1]. Visual SDLC \nis integrated lifecycle product that allows teams to visually model and textually define the software \nsystem in a single integrated environment. Hence, significantly minimizing the risk of redundant work \nand artifacts. Product lifecycle traceability Traceability is an undisputable characteristic of robust \nrequirements engineering. There are two challenges with traceability: usability and maintainability. \nRightfully so, most commercial requirements engineering products use a table-based traceability matrix \nthat permits a many-to\u00admany relationship. The graph data structure is appropriate since the notion is \nto map any traceable link to another traceable link. However, why does the underlying data structure \nneed to be synonymous with the user interface? One of the basic problems experienced with a traditional \ntable-based traceability matrix is that requirement specifiers almost blindly map high level ideas to \nfunctional and non-functional specifications thus defeating the purpose of traceability. Instead of assuring \nproper requirements coverage, and traceability to downstream specifications, it becomes an overlooked \nreport since everything traces to everything. Visual SDLC provides an intuitive specification workflow \nthat demonstrates the power of both requirement and document traceability. This presents a very powerful \nquality assurance feature for developing complex object\u00adoriented systems. Automatically generate object \nmodels from use cases Migrating from use cases to object models still remains a challenge for some developers. \nThe leading cause for this problem is poorly written use cases, and the level of granularity necessary \nto start generating an object model. This leaves a large margin of room of error for the developer. To \nresolve this issue, Visual SDLC instills proper use case development by providing a unique use case parsing \nalgorithm to ensure use cases comply with simple active tense English sentences. Subsequently, Visual \nSDLC performs noun+verb identification extraction, and builds the object model automatically. The notion \nis not to generate a perfect object model from the use case specifcation; no lexical parsing program \ncan knowingly achieve such greatness, yet to automate a meaningful percentage of the object model.  \n3. CONCLUSION There is no Silver Bullet to improving requirements engineering for object-oriented systems. \nThe closet thing could be bridging the ever prevalent communication gap between IT and business. As object-oriented \nsystems become increasingly more complex and software development teams become more geographically dispersed, \nrequirements engineering will only become more challenging. Visual SDLC offers a unique solution to address \nthe outstanding and future requirements engineering issues. REFERENCES [1] M. Weber and J. Weisbrod, \nRequirements Engineering in Automotive Development: Experiences and Challenges, IEEE Software, 20, 1 \n(January-February 2003), pp. 16-24. [2] D. Leffingwell and D. Widrig, Managing Software Requirements: \nA Use Case Approach, Addison Wesley, 2003 [3] V. Leino, Documenting Requirements Traceability Information: \nA Case Study, Helsinki University of Technology, December 2001  \n\t\t\t", "proc_id": "949344", "abstract": "In theory, requirements engineering solves many of software engineering's fundamental problems. The stakeholders know what the developers are building, why they are building it, when they are building it, and even to some degree, how they are building it. If requirements engineering resolves some of the basic communication issues between IT and the business, why aren't more companies actively practicing this discipline? In practice, requirements engineering is almost impractical without a commercial automation tool. The critics argue that the current automation tools do not convincingly demonstrate its value proposition, or fulfill the longstanding promises of the leading requirements engineering experts. This paper describes how the enterprise software development lifecycle management solution, Visual SDLC, addresses some of the outstanding issues of the present requirements engineering tools.", "authors": [{"name": "Marc Raygoza", "author_profile_id": "81100096230", "affiliation": "Visual SDLC, Aliso Viejo, CA", "person_id": "P643471", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949375", "year": "2003", "article_id": "949375", "conference": "OOPSLA", "title": "Visual SDLC: improving requirements engineering for object-oriented systems", "url": "http://dl.acm.org/citation.cfm?id=949375"}