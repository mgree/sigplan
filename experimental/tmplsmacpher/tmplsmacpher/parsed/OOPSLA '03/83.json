{"article_publication_date": "10-26-2003", "fulltext": "\n A Metamodeling Approach to Model Transformation Sheena R. Judson Doris L. Carver Robert B. France Computer \nScience Department Computer Science Department Computer Science Department Louisiana State University \nLouisiana State University Colorado State University Baton Rouge, Louisiana USA Baton Rouge, Louisiana \nUSA Fort Collins, Colorado USA 1-817-935-4518 1-225-578-3901 1-970-491-6356 judson@csc.lsu.edu carver@csc.lsu.edu \nfrance@cs.colostate.edu ABSTRACT The Model Driven Architecture (MDA) is a framework that is intended \nto support the development of software-intensive systems through the transformation of models to executable \ncomponents and applications. A key facilitator of the MDA is a standard to express model transformations. \nThis poster describes a rigorous approach to modeling pattern-based transformations at the metamodel \nlevel. Categories and Subject Descriptors D.2.2 [Software Engineering]: Design Tools and Techniques \n Object-oriented design methods; D.2.13 [Software Engineering]: Reusable Software Reuse models, Domain \nengineering. General Terms Design Keywords model transformation, evolution, UML, design patterns, Model \nDriven Architecture (MDA), Query/View/Transformation (QVT) 1. INTRODUCTION Model Driven Architecture \n(MDA) is intended to support the development of software-intensive systems through the transformation \nof models to executable components and applications. The main motivation behind MDA is to transfer the \nfocus of work from programming to solution modeling by treating models as the primary artifacts of development. \nTransformation of models and mapping between models are the key aspects of MDA [1]. Well-defined transformations \nthat support rigorous model evolution, refinement, and code generation are considered key elements of \nan MDA approach. This research focuses on developing a technique that supports rigorous modeling of well\u00addefined \npattern-based model transformations. The modeled transformations can be used as the basis for developing \ntools that support rigorous and systematic application of reusable transformations. As stated in [1], \nMDA provides a set of guidelines for structuring specifications expressed as models and the mappings \nbetween those models . These mappings are responsible for transforming the elements of a model conforming \nto a particular metamodel into elements of another model that conforms to another, or possibly the same, \nmetamodel [1]. In response to the need for having a standard approach to define mapping functions that \nmap between metamodels, the OMG issued the MOF 2.0 Query/View/Transformation (QVT) Request for Proposals \n[1]. Copyright is held by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. \nACM 1-58113-751-6/03/0010. The principle requirement of QVT is to develop a standard that provides means \nfor expressing transformations [2]. A QVT transformation describes the relationship between a source \nMOF metamodel and a target MOF metamodel. Source and target metamodels may be the same metamodel [1]. \nThis research focuses on developing a metamodeling technique for describing families of transformations \n(i.e., developing Unified Modeling Language (UML) model transformations at the metamodel level) which \naligns with both MDA and QVT. The focus is on a type of transformation referred to as pattern-based model \nrefactoring. In pattern-based refactoring, a well-defined pattern is incorporated into a source design \nmodel. The result is a target model that contains an instantiation of the pattern. Controlled model refactoring \ncan be accomplished by developing metamodels for the transformations. The metamodels can be used to constrain \nhow the refactoring is carried out on the models and can act as points against which the model-level \ntransformations can be checked for conformance. The goals of this research are to: 1. Capture transformations \nin a form that is reusable, which can lead to the development of tools that support controlled evolution \nof models (with respect to the reusable transformations) at the metamodel level. 2. Support the MDA \ngoal of reducing software development time by raising the level of abstraction through the use of models \nand design patterns.  2. METAMODELING APPROACH An overview of the transformation approach developed \nin this research is shown in Figure 1. The M2 level is an extension of the UML metamodel level (M2) that \nsupports metamodeling of transformations. The M1 level is an extension of the UML model level (M1) that \nsupports representation of model transformations. A model transformation, T1, at the M1 level takes a \nsource UML model and transforms it to a target UML model. The transformation T1, which is denoted using \na notation adopted from [3], is a member of the family of transformations characterized at the metamodel \nlevel by Transformation Pattern. A transformation pattern consist of characterizations of source and \ntarget models (Source Pattern and Target Pattern, respectively), and constraints on relationships between \nsource and target elements. The Source Pattern is a metamodel that characterizes source UML models and \nthe Target Pattern is a metamodel that characterizes target models for the family of transformations \ncharacterized by Transformation Pattern. A transformation (e.g., T1) conforms to a transformation pattern \nif: (1) the source model (Source Model) is an instantiation of the source pattern (Source Pattern), (2) \nthe target model (Target Model) is an instantiation of the target pattern (Target Pattern), and (3) the \nrelationship between elements of source and target models satisfy the constraints specified by the transformation \npattern. A UML model that conforms to a source or target pattern metamodel is said to be an instance \nof the source or target pattern. Similarly, a model transformation that conforms to a transformation \npattern is said to be an instance of the transformation pattern.  Characterization of UML models that \nconsist of client Source model elements that are deleted by characterized classes with create operations, \nthat are associated transformations are marked by X. with product classes. The create operations create \nThe elements in the dashed box are new elements instances of the Product classes added by characterized \ntransformations Each create operation in a client determines a factory class in the target model. Figure \n2. Abstract Factory Class Transformation Pattern The source pattern defines the set of source models \nto which transformations characterized by the transformation pattern can be applied. The pattern is expressed \nas a metamodel fragment that consists of classes characterizing model elements that are affected by the \ntransformations. The source pattern, given in Figure 2(a), determines source UML models that consist \nof (1) product classes (2) client classes that are associated with a subset of product classes these \nproduct classes are referred to as primary product classes, and (3) create operations in client classes \nthat create products. Each of the classes shown in the source pattern are specializations (subclasses) \nof classes in the UML metamodel. The source pattern thus determines a specialized UML metamodel for static \nstructures: the specialized metamodel characterizes the class diagrams that can be transformed by AF \ntransformations. The transformation schema, shown in Figure 2(b), shows the classes of model elements \nthat are created by the transformations and the classes of source model elements that the transformations \nremove by conforming transformations. The classes in a transformation schema are specializations of UML \nmetamodel classes. The schema is expressed as a metamodel fragment in which the classes of new model \nelements are enclosed in dashed boxes and classes of deleted source model elements are marked with an \nX (e.g., see Figure 2(b)). The schema indicates that AF transformations introduce factory classes (instances \nof Factory), specializations of factory classes (instances of SpecializedFactory), create operations \nassociated with the factory classes (instances of CreatePartOp), and associations between factory and \nclient classes. The schema also indicates that the create operations in client classes are removed. The \ntransformation schema determines the basic structure of the target model. The transformation constraint, \nshown in Figure 2(c), determines the relationships that must hold between target and source model elements. \nIt is expressed as object structures, where the objects are prototypical instances of classes in the \nsource pattern and the transformation schema (i.e., the objects are prototypical representations of UML \nmodel elements). The object structures describe transformation constraints in terms of relationships \nthat must hold between elements of the source and target models. For example, in an AF transformation \na unique specialized factory must be created for each create operation (instance of CreateOp) in the \nsource client. This constraint is expressed by the determines dependency between unique instances of \nCreateOp and unique instances of SpecializedFactory. The create actions defined by the instances of \nCreateOp become operations in the specialized factories corresponding to the CreateOp operations in an \nAF transformation. That is, for each product created by an instance of CreateOp (i.e., each product in \nthe set determined by the calculated relationship CreatedProducts) there must exist in the corresponding \nspecialized factory an instance of CreatePartOp that creates the product. This constraint is represented \nby the set of links between the sets Products and CreatePartOps. The set of links between the sets CreatePartOps \nand CreatPartOpsF indicates that the factory class (the root generalization) consists of create operations \nthat are inherited by the specialized factories. 3. STATUS AND FUTURE RESEARCH To date our metamodeling \napproach has been used to define Abstract Factory transformation patterns for both UML class and interactions \ndesign models. Current work focuses on the formalization of the foundation of the metamodel transformation \napproach. The approach needs to be extended to other design and UML models to determine whether the transformation \nconstraints can be expressed diagrammatically or via the OCL. Our goal is to show that the transformations \nconform to the UML metamodel through the use a transformation language. 4. REFERENCES [1] Object Management \nGroup. Request for Proposal: MOF 2.0 Query / View / Transformations RFP. OMG, 2002. http://www.omg.org/docs/ad/02-04-10.pdf. \n[2] QVT Partners. QVT: The high level scope. QVT-Partners, 2003. http://qvtp.org/downloads/qvtscope.pdf. \n[3] QVT Partners. Initial Submission for MOF 2.0 Query/View/Transformations RFP. QVT-Partners, 2003. \nhttp://qvtp.org/downloads/1.0/qvtpartners1.0.pdf. [4] Porres, Ivan. A Toolkit for Manipulating UML Models, \nTUCS Technical Report No. 441, Turku Center for Computer Science, \u00c5bo Akademi University, January 2002. \nhttp://www.tucs.fi/Research/Series/index.php.  \n\t\t\t", "proc_id": "949344", "abstract": "The Model Driven Architecture (MDA) is a framework that is intended to support the development of software-intensive systems through the transformation of models to executable components and applications. A key facilitator of the MDA is a standard to express model transformations. This poster describes a rigorous approach to modeling pattern-based transformations at the metamodel level.", "authors": [{"name": "Sheena R. Judson", "author_profile_id": "81100318723", "affiliation": "Louisiana State University, Baton Rouge, LA", "person_id": "P643488", "email_address": "", "orcid_id": ""}, {"name": "Doris L. Carver", "author_profile_id": "81100188398", "affiliation": "Louisiana State University, Baton Rouge, LA", "person_id": "P69285", "email_address": "", "orcid_id": ""}, {"name": "Robert B. France", "author_profile_id": "81310491615", "affiliation": "Colorado State University, Fort Collins, CO", "person_id": "PP14112168", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949435", "year": "2003", "article_id": "949435", "conference": "OOPSLA", "title": "A metamodeling approach to model transformation", "url": "http://dl.acm.org/citation.cfm?id=949435"}