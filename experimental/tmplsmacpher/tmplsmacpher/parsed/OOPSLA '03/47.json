{"article_publication_date": "10-26-2003", "fulltext": "\n Reuse of Teaching Components, A UML-based Approach to Delivering and Managing Academic Courses Luis \nPalomino Ram\u00edrez Department of Computer Science ITESM, Campus Guadalajara Av. Gral. Ram\u00f3n Corona 2514 \nZapopan, Jalisco, MEXICO Tel. (52-33) 3669 3000 lpalomin@itesm.mx ABSTRACT In this paper we present \na model for the representation of academic courses based on the organization and semantic relation of \nreusable teaching components using the unified modeling language. We describe an application of the model \nto cs101, but we believed that the model can be applied to any subject content of any discipline. Results \nindicate that by following this model, the knowledge of more experienced teachers can be stored in its \nrepresentation and the course components are easier to be reused by less experienced teachers. Categories \nand Subject Descriptors D.2.2 [Software Engineering]: Design Tools and Techniques \u00adobject-oriented design \nmethods. D.2.13 [Software Engineering]: Reusable Software Reuse models. K.3.1 [Computers and Education]: \nComputer uses in education Computer-Managed Instruction. General Terms Management, Design. Keywords \nTec de Monterrey educational model, Curriculum design, UML, Reuse, teaching component. 1. INTRODUCTION \nMonterrey Tec (or ITESM) is a private Mexican university with more than 30 campuses throughout the country. \nIn recent years, the university has committed itself to changing the traditional teaching practice of \nlecture-based courses to a more active student-centered learning approach [1]. Copyright is held by the \nauthor/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. \n Juan Antonio Vega Fern\u00e1ndez Department of Computer Science ITESM, Campus Guadalajara Av. Gral. Ram\u00f3n \nCorona 2514 Zapopan, Jalisco, MEXICO Tel. (52-33) 3669 3000 javega@itesm.mx In the computer science \ndepartment, there are two didactic techniques that have been supported, Problem-Based Learning (PBL) \nand Project-Oriented Learning (POL). The main difference between these two techniques, as used at Monterrey \nTec, resides in the time spent in a complete cycle for the learning activity, the PBL activity lasts \na few weeks at the most, while the POL activity lasts the full semester. Teachers were required to have \nextensive training in the new teaching practices before they could rethink the way they will change a \ncourse. Once the training was completed, the teacher came up with what is called a redesign of a course. \nThis redesign is a piece of software accessible through the web that describes all the learning activities \nthat will take place in the classroom, and all the resources used by students and professors. The redesign \nof a course typically involves the development of activities that connect knowledge content with learning \ngoals, and the use of a technological platform for the course such as Lotus Notes/Learning Space, Blackboard, \nor Web-Tec, -our own learning environment. 1.1 Justification This Model requires each professor to develop \nhis/her own course, which happens pretty straightforward, but the problem arises when the same course \nis taught by several professors. Since the platform in use contains the whole course, it is difficult \nto take away parts of the course to be used by other professors. Some other problems are that there is \nnot a standard way to show the relations among the different course components such as content, objectives, \nand activities to allow for different views of a course. For example, the static structure of the course \nand the dynamic structure of the course. Conceptual maps are too abstract and they are based on concepts, \nrather than content, besides, they do not use a standardize language for its representation, limiting \nthe use and exploitation we can make of it. When a complete course is redesigned, it constitutes a source \nfrom which several copies called transfers are made. A copy of the course is made for each of the groups \nor sections made for the class either for the groups taught by the same professor or by another one if \nhe wishes so. The problem is that when a different professor tries to adopt the redesigned course made \nby other, the package comes complete with all activities and idiosyncracies and learning style of the \noriginal author. And many times this is not convenient, so the professor ends up writing its own redesign, \nsince it is easier to make a new course than to modify and adapt the existing one; much in the same way \nas in software development, where writing new code is easier than modifying an existing program, incurring \nin expenses that could be avoided in the first place. When the professor is writing a new course, there \nare some general guidelines to comply with the student-centered approach required by our institution, \nbut these guidelines do not consider a standard representation to connect learning activities with knowledge \ncontent, making very difficult to do a search of specific contents or specific activities to be used \nin the new course. As previously noted, the professor prefers to specify his or her own activities based \non his experience or even the lack of it. Activities redesigned from professors with lots of experience \nare lost in the same way, due to this lack of formal specification of the learning activities. The lost \nof experience could be solved by implementing a knowledge base that is formally build from the redesign \nof the course in a way that learning activities relate to the course official content, and the learning \nobjectives for that course in such a way that the basic unit of learning constitutes a teaching component \nthat can be reused by other professors, if they wishes so. 1.2 Goal Our aim is to develop a general \nstrategy for the formal &#38; standard representation of redesigned courses in order to incorporate teaching \ncomponents that are easier to be reused by other professors. To achieve this goal, we have designed course \ncomponents grouped in different kinds of diagrams for the educational domain, which are semantically \nrelated among them, and are represented using a standard object oriented language such as UML. By doing \nthis, the professor who is already familiar with the language and representations of object oriented \nsystems, can very easily design activities that could be reused by other professor who share the same \nknowledge. Note that here we are only talking about the representation of the course, if this model were \nto be implemented, then the professor would be exposed to only a graphical user interface that would \ncapture not only the objectives, and contents but the activities, making them reusable to other professors \nthrough this interface, so that no knowledge of object orientation is required and could be use for any \nsubject domain.  2. THE TEACHING COMPONENTS MODEL In this section we present the representation model \nfor designing courses through the organization and semantic relation of reusable teaching components \nin the educational domain, using the Unified Modeling Language (UML) [2]. The model incorporates two \nviews for the course, as shown in figure 1. In the static view, we present the architecture of the course. \nIn it, the activity diagram relates course content with learning objectives. In the dynamic view we present \nthe behavior of the class. The activities sequence diagram represent the chronological order by which \nthe professor decided to carry on the selected activities for the course, based on the activity diagram. \nWith this strategy we accomplished an iterative and incremental process in the design of a course, since \nif the sequence diagram does not meet the pre-established schedule, we just go back to the activity diagram \nand iterate one more time through the process until the learning objectives are met. 2.1 Designing CS101 \nAs an example, we have selected the CS101 course to show how the model works. The diagrams shown are \nonly a small part of the actual diagrams, but they have enough detail to represent the idea. Course Dynamic \nActivities View Sequence Diagram Content Diagram Course Objective Diagram Static View Activity Diagram \n Figure 1. Views for a course. 2.2 Content Diagram for CS101 The content diagram is represented by \na tree that relates by aggregation the different contents for the course. This is generated automatically \nfrom the official curricular content of the course (figure 2). Figure 2. A view of the content diagram \nfor CS 101. 2.3 Objectives Diagram for CS101 The learning objectives diagram is represented by the aggregation \ntree of general and specific objectives required to meet the educational intentions of the course and \njust like the content diagram it is generated automatically from the objectives in the curriculum of \nthe course. An example is shown in figure 3. Figure 3. A view of the learning objectives diagram for \nCS101.  2.4 Activity diagram for CS101 The activity diagram is a graph representing the relations among \nthe activities, the contents and the learning objectives. The basic idea is that the professor who is \ndesigning a course and needs to cover a specific topic within the course, can make a search on the knowledge \nbase to find all the activities already done by other professors to cover that specific content or learning \nobjective. If the component is not found, the professor would design his or her own component that is \nautomatically store in the knowledge base for other professors to look at (See figure 4). Figure 4. \nA view of the activity diagram for CS101. 2.5 Activity sequence diagram for CS101 The activity sequence \ndiagram represents the dynamic view of the course and it indicates the chronological sequence of the \nactivities carry on in the class. With this diagram, the professor could realize if the selected activities \nfrom the activity diagram are doable in the alloted time or if the activities need to be modified, or \nif new activities are to be designed. The professor works in an incremental and iterative way in the \ndesign of the course, using teaching components already designed by other professors or designing his \nor her own components (see figure 5).  3. CONCLUSIONS The main findings of our work are the following: \n. We have shown that it is possible to use a standard representation based on the context and language \nof object oriented programming. . A course can be represented via multiple diagrams from the educational \ndomain that show the static and dynamic view of the course. . The diagrams are made of different reusable \ncomponents taken from the original curriculum already designed and the diagrams show the semantic relations \namong the different components. . Using UML as the standard representational language is easier for \ncolleagues in computer science department already familiar with the notation and with object orientation. \n . With this representation, a professor can decide if it just makes an instance of the course, if it \npersonalizes and adapts an existing course, or if it creates and designs a new course from scratch in \nan easier way. . By using the proposed representation, it is possible to create a knowledge base which \nis easily searchable by content, by learning objective of by activity, facilitating not only the reuse \nof teaching components, but also facilitating the transfer of experience among professors. . It is possible \nto apply this framework to other disciplines besides computer science. The only requirement would be \nthe design of a system with a graphical user interface that hides the formalism of UML, making it transparent \nto a user who is not familiar with this notation.  4. REFERENCES [1] Mart\u00edn P\u00e9rez, M. (2002). El modelo \neducativo del Tecnol\u00f3gico de Monterrey. Vicerrector\u00eda Acad\u00e9mica, Sistema ITESM. Monterrey, Nuevo Le\u00f3n. \n[2] Booch, G., Rumbaugh, J., &#38; Jacobson, I. (1999). The Unified Modeling Language User Guide. Addison-Wesley, \nReading, MA.  \n\t\t\t", "proc_id": "949344", "abstract": "In this paper we present a model for the representation of academic courses based on the organization and semantic relation of reusable teaching components using the unified modeling language. We describe an application of the model to cs101, but we believed that the model can be applied to any subject content of any discipline. Results indicate that by following this model, the knowledge of more experienced teachers can be stored in its representation and the course components are easier to be reused by less experienced teachers.", "authors": [{"name": "Luis Palomino Ram&#237;rez", "author_profile_id": "81100563654", "affiliation": "ITESM, Zapopan, Jalisco, MEXICO", "person_id": "P643468", "email_address": "", "orcid_id": ""}, {"name": "Juan Antonio Vega Fern&#225;ndez", "author_profile_id": "81100001921", "affiliation": "ITESM, Zapopan, Jalisco, MEXICO", "person_id": "P643462", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949396", "year": "2003", "article_id": "949396", "conference": "OOPSLA", "title": "Reuse of teaching components: a UML-based approach to delivering and managing academic courses", "url": "http://dl.acm.org/citation.cfm?id=949396"}