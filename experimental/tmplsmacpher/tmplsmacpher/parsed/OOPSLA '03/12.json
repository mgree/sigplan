{"article_publication_date": "10-26-2003", "fulltext": "\n QuickUML: A Tool to Support Iterative Design and Code Development Carl Alphonce Phil Ventura Dept. \nComp. Sci. &#38; Eng. Dept. Comp. Sci. &#38; Eng. University at Buffalo, SUNY University at Buffalo, \nSUNY Buffalo, NY 14260-2000 Buffalo, NY 14260-2000 alphonce@cse.buffalo.edu pventura@cse.buffalo.edu \nABSTRACT We demonstrate QuickUML, a tool which supports itera\u00adtive design and code development by providing \nfacilities to draw UML class diagrams, to generate Java code from such diagrams, and also to automatically \ngenerate a UML class diagram from a collection of Java source code .les. We also discuss how use of the \ntool provides general support for teaching students the importance of design in software development. \n Categories and Subject Descriptors K.3.2 [Computers and Education]: Computer and Infor\u00admation Science \nEducation Computer Science Education; D.2.3 [Software Engineering]: Coding Tools and Tech\u00adniques Object-oriented \nprogramming  Keywords Design, Object-orientation, UML, CS1, CS2, Java, tool 1. INTRODUCTION AND MOTIVATION \nFOR QUICKUML We teach introductory programming classes which are strongly object-oriented. We believe \nthat in order to lay a solid foundation for our students it is important that they be exposed to program \ndesign and be given ample oppor\u00adtunity to put iterative design and coding into practice. We also need \nthe design component of the course to support discussion of design patterns later in the course. Our \ngoals in these introductory classes therefore include, an early introduction to program design,  a \nrequirement that students to design and code incre\u00admentally, and  a timely presentation of good design \nsolutions in the form of design patterns.  Copyright is held by the author/owner. OOPSLA 03, October \n26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. We make use of UML class diagrams \nin lectures and labo\u00adratory work. This has the bene.t that the language we use to talk about program \ndesign is not tied directly to a single programming language. A signi.cant problem that must be addressed \nwhen at\u00adtempting to treat program design seriously in an introduc\u00adtory course is that most problems assigned \nto students at this level are very simple. The importance of good design is therefore not evident to \nthe students, and worse, design can be seen as an obstacle to doing the important thing , writing code. \nTo overcome this it is crucial that students see that there is some payback for learing about and practicing \ngood pro\u00adgram design. It is also critically important to students that the faculty treat design as important. \nTo this end faculty must practice what they preach: they must design when de\u00adveloping code in lecture, \nand design must be checked and accounted for in grading schemes. This last point is espe\u00adcially important: \nif students realize that the design work they do does not count directly towards their grade, they simply \nwill not do it, or it will become an added burden without meaning, done as an afterthought rather than \nan integral part of the program development process. These are de.nitely not trivial obstacles to overcome. \nIn order to help us to address them e.ectively we developed a UML class diagram tool which we call QuickUML, \naimed primarily at students in our introductory courses. The tool has proved .exible enough to be useful \nto us as faculty when teaching these courses, and to our teaching assistants when grading student programming \nprojects. The functionality of the QuickUML tool is described in the next several section. The demonstration \nwill show these abilities live.  2. THE TOOL 2.1 Overview QuickUML is a tool written in Java which supports \niter\u00adative design and code development by providing facilities to draw UML class diagrams, to generate \nJava code from such diagrams, and also to automatically generate a UML class diagram from a collection \nof Java source code .les. The tool was developed for use by students in our intro\u00adductory object-oriented \ncourses. We found existing tools inappropriate due to slow graphics and complex user in\u00adterfaces. QuickUML \nis now used in several courses from freshman to senior level. The demonstration will show QuickUML s \nvarious fea\u00ad Figure 1: Screenshot of the QuickUML tool public class Dog extends Mammal { private Tail \n_tail; public Dog() { _tail = new Tail(); } } public class Tail { public Tail(){} } public class Mammal \n{ public Mammal(){} } Figure 2: Code generated for Dog.java from diagram in .gure 1 tures, including \nhow to draw diagrams, how to generate code from diagrams and how to generate a diagram Java source code. \nThe ability to move between source code and diagrams facilitates the use of an iterative design-and-code \nsoftware development process. Our experience is that when students have a tool which allows them to easily \nexpress their designs at a high level and frees them from the tedium of repeatedly coding funda\u00admental \nrelationships they begin to think of coding in terms of the higher-level constructs. This in turn allows \nus to focus more on issues of object-oriented design and less on issues of syntax. Educators or trainers \nteaching or using object-orientation in their courses can use QuickUML to support iterative design-and-code \ndevelopment. 2.2 UML class diagram drawing Figure 1 shows a simple class diagram drawn directly us\u00ading \nthe tool. A pallet of tools is available along the left edge of the tool window, while the bulk of the \ntool window is occupied by the (resizable) drawing canvas. Arcs are drawn between class (or interface) \nboxes, and remain connected if the boxes are moved. 2.3 Code generation from UML class diagram Figure \n2 shows the code (edited to show only the most relevant details in order to conserve space) generated \nby the tool for the diagram shown in .gure 1. The tool has a spe\u00adci.c semantics for each arc and generates \ncode accordingly. In a future version of the tool we intend to make the se\u00admantics for the arcs entirely \nskinnable , making the tool signi.cantly more versatile. public class Dog extends Mammal { private Tail \n_tailOne, _tailTwo; private Collar _collar; public Dog(Collar c) { _tailOne = new Tail(); _tailTwo = \nnew Tail(); _collar = c; } public void putOn(Collar c) { ... } public Collar takeOff() { ... } } public \nclass Collar {} public class Tail { public Tail(){} } public class Mammal { public Mammal(){} } Figure \n3: Edited code Figure 4: Geneated (extracted) class diagram after code revisions 2.4 UML class diagram \ngeneration from code Figure 3 shows the code of .gure 2, edited to add some more relationships and another \nclass. The code in the .gure has been edited to conserve space; since it is irrelevant for this example, \nthe code for the added methods of the Dog class is not shown. Figure 4 shows the diagram which the tool \nconstructed from the Java source code.  3. TEACHING DESIGN WITH QUICKUML QuickUML supports our teaching \ngoals in several ways. Students now have a tool which they can use to switch be\u00adtween code and design \nviews of their work. Students no longer need to code the basic relationships between classes, which can \nquickly become tedious. The tool is useful to faculty in the classroom for the same reason: we can do \nprogram development starting with a rough design and iter\u00adatively re.ning it as we code. Finally, students \nare able to receive feedback on their designs because teaching assistant no longer have to manually check \nthe design of a submission through painstaking examination of code. The tool quickly shows them the classes \nand their relationships in a submis\u00adsion. 4. ACKNOWLEDGEMENTS Many thanks are due to students and faculty \nin the CSE department who have contributed to the tool through coding and feedback. Initial development \nof the QuickUML tool was supported by a University at Bu.alo Ed Tech grant.  \n\t\t\t", "proc_id": "949344", "abstract": "We demonstrate QuickUML, a tool which supports iterative design and code development by providing facilities to draw UML class diagrams, to generate Java code from such diagrams, and also to automatically generate a UML class diagram from a collection of Java source code files. We also discuss how use of the tool provides general support for teaching students the importance of design in software development.", "authors": [{"name": "Carl Alphonce", "author_profile_id": "81100135442", "affiliation": "University at Buffalo, SUNY, Buffalo, NY", "person_id": "PP14058142", "email_address": "", "orcid_id": ""}, {"name": "Phil Ventura", "author_profile_id": "81100151694", "affiliation": "University at Buffalo, SUNY, Buffalo, NY", "person_id": "P361190", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949359", "year": "2003", "article_id": "949359", "conference": "OOPSLA", "title": "QuickUML: a tool to support iterative design and code development", "url": "http://dl.acm.org/citation.cfm?id=949359"}