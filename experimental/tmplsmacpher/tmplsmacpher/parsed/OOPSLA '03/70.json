{"article_publication_date": "10-26-2003", "fulltext": "\n Agile Software Development for Component Based Software Engineering Wolfgang Radinger Institute of \nComputer Technology Vienna University of Technology Gusshausstrasse 27-29/384 A-1040 Vienna, Austria \n radinger@ict.tuwien.ac.at ABSTRACT Agile Software Development and Component Based Soft\u00adware Engineering \nare two fundamentally di.erent methods to serve today s demands of software engineering. By com\u00adbining \nthe technical and organizational issues, we introduce an approach for a consequent integration to allow \nagile com\u00adponent development in the small and system engineering in the large, respectively. Categories \nand Subject Descriptors K.6.3 [Software Management]: Software process; D.1 [Programming Techniques]: \nMiscellaneous General Terms Process design Keywords Agile Software Development, CBSE, Software Development \nProcess 1. SOFTWARE ENGINEERING ASPECTS Today s challenges in software engineering are to develop new \nsystems in a short time, with suitable technologies, and with a high ratio of reuse. One of the most \npromising tech\u00adnical approaches to cope with this task is Component-Based Software Engineering (CBSE), \naiming at heavy methodolo\u00adgies and processes, certi.cations and infrastructure e.orts in order to make \nsoftware engineering a true engineering discipline. In contrast, Agile Software Development (ASD) focuses \non shorter product development cycles, feature driven de\u00advelopment with small teams, light methodologies \nbut heavy customer involvement. Apparently these two approaches are quite di.erent in terms of technological \nand organizational Copyright is held by the author/owner. OOPSLA 03, October 26 30, 2003,Anaheim,California, \nUSA. ACM 1-58113-751-6/03/0010. Karl Michael Goeschka Frequentis Nachichtentechnik Ges.m.b.H. Wolfganggasse \n58-60 A-1120 Vienna, Austria goeschka@acm.org aspects. Instead of suggesting a new method war, we favor \na smooth integration of both methods, which rather supple\u00adment than oppose each other. Therefore, ASD \nis proposed for software engineering in\u00adthe-small, e.g. to build a single, coherent component, and to \nuse CBSE for software engineering in-the-large. Thus, the right balance between people and processes \non the one hand and technologies on the other has to be found. 1.1 Agile Software Development Agile Software \nDevelopment is one answer to the changing environment of the information technology sector. Several software \nproject managers and developers de.ned their agile processes in parallel. An important date for the agile \ncom\u00admunity was in February 2001, when a group of people came together in Utah and drew up The Manifesto \nfor Agile Soft\u00adware Development [2]. It describes the principle aspects of ASD methods. In order to integrate \nASD with CBSE, a consolidated agile process has been de.ned. 1.2 A Consolidated Agile Process Based \non the concepts of ASD methods and on the man\u00adifesto, the following attributes are used to describe the \nre\u00adsulting process: Iterative and Incremental: The phases are passed in it\u00ad eration to be .exible regarding \nchanges of require\u00ad ments and to develop the software step by step. Lightweight: The process is light \nand o.ers only reduced guidelines. Focus is not on extensive documentation. Collaborative: The team itself \nshould primarily use direct communication including the customer. A comparison of the number of phases \nshows that ASD methods processes have between three and .ve phases, which are passed iteratively. Hence, \nwe de.ne the consolidated process with .ve phases to have a .ner granularity: Requirements Engineering: \nThe requirements are com\u00ad piled with strong customer involvement, resulting is a detailed plan of the \nfeatures of the system. Planning: Based on the feature plan, an implementation schedule is built in co-operation. \nDesign: In the design phase the developer builds a model. Build: Based on the design the features will \nbe built, re\u00adsulting in a demonstrable and tested feature. Test and Release: In the last stage integration \ntests of the features are performed and documented. For the de.ned agile process the length of the design \nand build phase has to be estimated in advance and it should vary between a few days and a few weeks. \nThese two phases are passed iteratively. Most of the agile methods also have di.erent view points regarding \nthe team size. Following the agile principle Individuals and interactions over processes and tools , \na team size of maximal ten persons can be seen as appropriate for the consolidated agile process. 1.3 \nComponent Based Software Development There exist various de.nitions of components in the lit\u00aderature. \nHowever, these de.nitions of components are not clear and exact and the explanations in the literature \noften argue in cycles. CBSE, on the other hand, de.nes the terms exactly to avoid con.icts. This is essential \nfor a common understanding. In [4], Heineman and Councill try to de.ne the terms related to CBSE precisely. \nSoftware components cannot be de.ned on the basis of a particular programming language or technology. \nIt is im\u00adportant in which manner the component will be used. Also, essential is the context and the composition \nwithout any adaptions. The component model describes how compo\u00adnents interact and how they can be composed. \nAdditional to the component de.nition, CBSE de.nes the Component-Based Software Life Cycle (CSLC), which \nspec\u00adi.es everything from gathering requirements to the integra\u00adtion of the system. The overall e.ort \nfor the implementation is reduced through reuse and purchase of components.  2. AGILE COMPONENT DEVELOPMENT \nA smooth integration of both approaches provides .exibil\u00adity for software development in the large by \nmeans of CBSE and in the small through ASD. Both approaches have inter\u00adesting aspects which are worth \nto be integrated. An interesting aspect is the dynamics of a project. As Boehm mentioned [1], agile methods \nare more suitable for small and changing projects. On the other hand, bigger projects often tend to change \nmore. Hence, it makes sense to include a small amount of agility in larger CBSE projects. When integrating \nthese approaches to get the best of both worlds, CSLC is ideal for building the overall software sys\u00adtem. \nMoreover, it focuses on a detailed analysis and design, whereby a well documented overall architecture \nof the sys\u00adtem results. In the planning stage it was decided either to develop components by oneself \nor to buy respectively reuse suitable components. Normally, a mixture of both makes CBSE reasonable. \nFor the case of self developed components we propose to use an agile approach. Agile software devel\u00adopment \nis well suited for small software parts which compo\u00adnents are. The phase of component development is \nreplaced by the consolidated agile process. According to the de.\u00adnition, a component is independently \ndeployed which is warranted. The componentmodel hastobespeci.edinthe requirements engineering and planning \nphase of the CSLC and is a requirement for the agile process. Furthermore, the complete performance speci.cation \nof the CSLC is also an input for the agile component development. As components are widely independent, \ntheir development can proceed in parallel. The self developed components and the bought ones are assembled. \nThe component is handed over with a minimum of internal documentation, but the customer com\u00adponent documentation \nbased on the CSLC. Finally, system tests and deployment complete the process. 3. RELATED WORK AND RESULTS \nIn [5] Allan Wills describes an approach for Agile Product Line Development. His approach focuses on \nthe develop\u00adment of a generic system and a coherent framework rather than on a set of di.erent components. \nHe starts the develop\u00adment of the product line with a single, small application for a particular customer. \nIn contrast to the approach proposed he focuses more on the leisurely development of a generic agile \nproduct line approach. Agile software development is a very young discipline, re\u00adsearch in this area \nhas just began. [3] provides a detailed overview of the primary agile methods. Additionally, they analyze \nthe support for project management, which is in their opinion not adequate. Here CBSE provides a suitable \nmanagement umbrella for large systems to satisfy the man\u00adagement which insists on legacy methodologies \nand shields the ASD development teams. Component-based software development turned out to be a suitable \napproach for today s software development. Addi\u00adtionally to the technical solution, the integration with \nagile development methods allows the development of long liv\u00ading software systems. CBSE and ASD combined \nprovide an approach for the development of large complex software sys\u00adtems and a .exible and customer-oriented \napproach for the development of single coherent components. The smooth in\u00adtegration of both methods seems \nmore promising than any of them alone. 4. REFERENCES [1] Barry W. Boehm. Get ready for the agile methods, \nwith care. IEEE Computer, 35(1):64 69, Jan 2002. [2] http://www.agilealliance.org/. Agile Alliance. [3] \nPekka Abrahamsson, Outi Salo, Jussi Ronkainen, and Juhani Warsta. New Directions on Agile Methods: A \nComparative Analysis. Proceedings of the 25th International Conference on Software Engineering, pages \n244 -254, May 2003 [4] George T. Heineman and William T. Councill. Component-Based Software Engineering, \nPutting the Pieces Together. Addison-Wesley, New York, 2001. [5] Alan C. Wills. Agile components. Technical \nreport, Trireme International Ltd, Feb 2002. http://www.ltt.de/otland/experts/a.c.wills.shtml.  \n\t\t\t", "proc_id": "949344", "abstract": "Agile Software Development and Component Based Software Engineering are two fundamentally different methods to serve today's demands of software engineering. By combining the technical and organizational issues, we introduce an approach for a consequent integration to allow agile component development in the small and system engineering in the large, respectively.", "authors": [{"name": "Wolfgang Radinger", "author_profile_id": "81100525454", "affiliation": "Vienna University of Technology, Vienna, Austria", "person_id": "P502571", "email_address": "", "orcid_id": ""}, {"name": "Karl Michael Goeschka", "author_profile_id": "81537772756", "affiliation": "Frequentis Nachichtentechnik Ges.m.b.H., Wolfganggasse, Vienna, Austria", "person_id": "P588932", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949422", "year": "2003", "article_id": "949422", "conference": "OOPSLA", "title": "Agile software development for component based software engineering", "url": "http://dl.acm.org/citation.cfm?id=949422"}