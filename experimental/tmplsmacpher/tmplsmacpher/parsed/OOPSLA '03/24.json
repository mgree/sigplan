{"article_publication_date": "10-26-2003", "fulltext": "\n Requirements Use case Tool (RUT) James R. McCoy Software Assurance Technology Center NASA Goddard Space \nFlight Center Greenbelt, MD 20771 301-286-9643 james.mccoy@gsfc.nasa.gov ABSTRACT The Requirements Use \ncase Tool (RUT) provides assistance to managers, customers, and developers in assessing the quality of \nuse cases. In addition, RUT serves as a database repository for requirements developed as use cases. \nTo ensure consistency, the tool provides a standard use case template to be used for all use case entry \ninto the repository. Furthermore, RUT provides integration with Rational Rose, the industry-standard \ntool for developing UML diagrams. The tool also provides a series of metrics useful for calculating information \nabout the relationships among the captured use cases. RUT performs use case evaluation by searching text \nand identifying risk indicators such as incomplete or weak phrases. The Requirements Use case Tool is \na valuable resource for collecting, evaluating, and maintaining software requirements gathered as use \ncases. RUT is a web-based, multi-user application that provides project team members with the ability \nto create, view, and modify use cases and related information for a particular project. The dashboard \nview provided by the tool gives managers and others the ability to quickly ascertain the status of a \nproject by viewing various use case metrics. The tool was developed using multi\u00adplatform, open source \ntechnologies (PHP and MySQL). All features of the Requirements Use case Tool described above will be \ndemonstrated at the conference.  Categories and Subject Descriptors D.2.2 [Software Engineering]: Requirements/Specifications \nmethodologies, tools.  General Terms Measurement, Documentation, Verification. Keywords Use cases, \nrequirements analysis, risk indicators. 1. INTRODUCTION It is generally considered fundamental by software \nengineers that requirements are the foundation upon which an entire system is built. It is further presumed \nthat verification and validation are needed to assure that the desired functionality, embodied in the \ntotal set of requirements, is ultimately and correctly delivered. All too often, however, development \nteams fail to satisfy customer requirements, and it is this shortfall, usually discovered quite late \nin the schedule, that leads to a frantic cycle of fixing, patching, and clock watching. The belief is \nthat correct, complete, and testable software requirements are critical. The success of a project whether \nmeasured in functional or financial terms can be directly related to the quality of the requirements \n[4]. The disciplined development and management of software requirements have always been critical in \nthe implementation of software systems engineers are unable to build what analysts and designers cannot \ndefine. It is also generally accepted that the earlier in the life cycle potential risks are identified \nthe easier it is to eliminate or manage the conditions that introduce those risks. Having accepted that \nrequirements of good quality are the basis for successful project development efforts, the objective \nof work in all phases is to implement those requirements accurately. Studies indicate that problems with \nrequirements are as much as 14 times more costly to fix if they are not found until the testing phase \nas opposed to finding them in the requirements phase. The traditional vehicle for capturing and communicating \nrequirements is the Software Requirements Specification (SRS), which is usually a text-based document. \nThe requirements specification, as the first tangible representation of the capability to be produced, \nestablishes the basis for all of the project s subsequent engineering, management, and assurance functions. \nWhenever the quality of an SRS is poor, it gives rise to risks in all areas of the project. Today, other \nformats for capturing and expressing software requirements are gaining popularity. These modern techniques \nplace an emphasis on both the user and the software rather than simply the software s features only. \nThe Unified Modeling Language (UML) [1] provides such a method for capturing requirements through structured \ntext called use cases. 2. THE UML AND USE CASES Copyright is held by the author/owner(s). The UML is \nthe industry-standard, general-purpose notational OOPSLA 03, October 26 30, 2003, Anaheim, California, \nUSA. language for specifying, visualizing, constructing, and ACM 1-58113-751-6/03/0010. documenting the \nartifacts of complex software systems especially large, object-oriented projects. It simplifies the complex \nprocess of software design, making a blueprint for construction. At the heart of the UML are use cases; \nthe use case diagram is the driver for the eight remaining diagrams that comprise the UML. Use cases \nform the basis of how the system interacts with actors in the outside world, e.g., other users or systems. \nUML use cases were designed to capture, via a combination of structured text and graphics, the functional \nrequirements of a system. The user-centered analysis provided by use cases is vital to capturing understandable, \nbuildable, and verifiable requirements. Strictly speaking, a use case describes an interaction that provides \nvalue to a particular actor [3]. A use case model illustrates a system s intended functions (use cases), \nits surroundings (actors), and relationships between use cases and actors (use case diagrams). 3. REQUIREMENTS \nUSE CASE TOOL Extensive research has been conducted in the mechanics of expressing software requirements \nvia natural language and has resulted in various tools commercial and homegrown for evaluating their \nquality and usability. That work was extended to apply to use case requirements. This initiative, undertaken \nby the Software Assurance Technology Center at the NASA Goddard Space Flight Center, was intended to \nenhance and refine a use case tool that offers a more methodological basis for specifying and managing \nunderstandable, buildable, and verifiable functional requirements. The Requirements Use case Tool (RUT) \nprovides assistance to software managers, customers, and developers in assessing the quality of use cases \nand serves as a project s database repository for requirements developed as use cases. RUT was originally \ndeveloped in 2001 and operated on Microsoft Windows operating systems installed with Microsoft Access \n2000. The tool has recently been redeployed as a web-based application, which facilitates a multi-user \nenvironment so that various project team members have the ability to create, view, and modify use cases \nand related information collaboratively for a common project. End users need only have a web browser \ninstalled on their computers to access the system and can do so remotely. The current tool was developed \nusing multi-platform, open source technologies (specifically, the PHP scripting language and the MySQL \nrelational database management system). This allows the tool to be installed on multiple operating systems \nand web servers without the need to purchase additional software. Furthermore, this development approach \nprovides users the ability to modify the system to suit their individual project needs and will simplify \nthe process of adding additional features or components to the tool in the future. To ensure consistency, \nRUT provides a standard use case template [2] to be used for all use case entry into the repository. \nIn addition, the tool provides integration with Rational Rose, the industry-standard tool for developing \nUML diagrams. Individual use cases can be exported from RUT and linked to use case diagram constructs \nspecified in Rational Rose. One of the most beneficial features of RUT in terms of quality analysis is \nits capability to parse use case text for matches against a pre-defined and user-modifiable set of risk \nindicators. Predefined indicators are comprised of words and phrases in the following categories: options, \nwhich give the developer latitude in satisfying the specification statements that contain them (e.g., \ncan, may, and optionally); incompletes, which provide a basis for expanding a requirement or adding future \nrequirements (e.g., TBD, not defined, and as a minimum); and weak phrases, which are clauses that are \napt to cause uncertainty and leave room for multiple interpretations (e.g., adequate, normal, and timely). \nThe tool also provides a series of metrics useful for calculating information about the relationships \namong the captured use cases. Included metrics define the levels of ambiguity, completeness, volatility, \nand traceability among use cases. 4. SUMMARY Extensive research has been conducted into writing software \nrequirements of higher quality via natural language. That research has resulted in the development of \nguidelines for writing more effective requirements as well as tools for evaluating them. However, current \nsoftware development practices provide a more methodological basis for specifying and managing quality \nfunctional requirements. The goal of the Requirements Use case Tool is to provide a clear evaluation \ntechnique for software requirements written as use cases. Due in part to its multi-user, multi-platform \nfunctionality as well as its extensibility and text\u00adparsing capability, RUT is a valuable resource for \ncollecting, evaluating, and maintaining software requirements gathered as use cases. An effort is currently \nunderway to transition this tool into general usage among NASA s software project teams. 5. REFERENCES \n[1] G. Booch, J. Rumbaugh, and I. Jacobson. The Unified Modeling Language User Guide. Addison-Wesley, \n1999. [2] A. Cockburn. Writing Effective Use Cases. Addison-Wesley, 2001. [3] D. Kulak and E. Guiney. \nUse Cases: Requirements in Contex. ACM Press, 2000. [4] W. Wilson, L. Rosenberg, and L. Hyatt. Automated \nquality analysis of natural language requirements specifications. In Pacific Northwest Software Quality \nConference, October 1996.  \n\t\t\t", "proc_id": "949344", "abstract": "The Requirements Use case Tool (RUT) provides assistance to managers, customers, and developers in assessing the quality of use cases. In addition, RUT serves as a database repository for requirements developed as use cases. To ensure consistency, the tool provides a standard use case template to be used for all use case entry into the repository. Furthermore, RUT provides integration with Rational Rose, the industry-standard tool for developing UML diagrams. The tool also provides a series of metrics useful for calculating information about the relationships among the captured use cases. RUT performs use case evaluation by searching text and identifying risk indicators such as incomplete or weak phrases. The Requirements Use case Tool is a valuable resource for collecting, evaluating, and maintaining software requirements gathered as use cases.RUT is a web-based, multi-user application that provides project team members with the ability to create, view, and modify use cases and related information for a particular project. The \"dashboard\" view provided by the tool gives managers and others the ability to quickly ascertain the status of a project by viewing various use case metrics. The tool was developed using multi-platform, open source technologies (PHP and MySQL).All features of the Requirements Use case Tool described above will be demonstrated at the conference.", "authors": [{"name": "James R. McCoy", "author_profile_id": "81100228217", "affiliation": "NASA Goddard Space Flight Center, Greenbelt, MD", "person_id": "P547950", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949371", "year": "2003", "article_id": "949371", "conference": "OOPSLA", "title": "Requirements use case tool (RUT)", "url": "http://dl.acm.org/citation.cfm?id=949371"}