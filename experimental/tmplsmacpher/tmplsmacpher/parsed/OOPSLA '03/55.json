{"article_publication_date": "10-26-2003", "fulltext": "\n Panel Xtreme Programming and Agile Coaching Steven Fraser (Impresario) Rachel Reinitz (Chair) Jutta \nEckstein Independent Consultant IBM Independent Consultant Joshua Kerievsky Industrial Logic Rob Mee \nPivotal Computer Systems Mary Poppendieck Agile Alliance ABSTRACT This panel brings together coaches \nto discuss all aspects of the prac\u00adtice how to become a coach, choosing a coach, and describing what \nis to be an (in) effective coach. A coach watches, provides feedback, and suggests subtle direction. \nThe coach may be more for example an architect or team lead. The panelists will describe their positions \nand offer feedback. Panelists were asked to offer responses to three questions: How did YOU become a \ncoach?  What s the toughest thing you ve had to do as a coach?  What s your advice for teams looking \nfor a coach?  Categories &#38; Subject Descriptors: D.2.1 [Software Engineering]: Requirements/Specifications: \nElicitation methods K.6.1 Project and People Management: Management techniques K.7.1 [The Computing \nProfession]: Occupations General Terms: Design, Human Factors, Management Keywords: Coaching, Team Building, \nMentoring  1. Steven Fraser, sdfraser@acm.org Steve Fraser (panel impresario) is an independent consultant \nin Santa Clara California. Until 2002, Steve served fifteen years in a variety of cool software technology \nprogram management roles at Nortel Networks including: Process Architect, Senior Manager (Dis\u00adruptive \nTechnology), Process Engineering Advisor, and Software Reuse Evangelist. In 1994 he served a year as \na Visiting Scientist at the Software Engineering Institute (SEI) collaborating with the Ap\u00adplication \nof Software Models project on the development of team\u00adbased domain analysis techniques. Steve is an avid \noperatunist and videographer. Coaching is about teamwork, motivation, communication, skills and strategy. \nCoaches help team members become a cohesive unit, un\u00adderstand the rules-of-the-game , facilitate interaction, \noptimize skills, and build motivation towards common goals. Depending on the team and their role, coaches \ndevelop and execute tactics and strategy in much the same fashion as sport team coaches. Interest\u00adingly \ntwo distinct coaching roles have emerged the manager as coach, and the consultant as coach. 2. Rachel \nReinitz, rreinitz@us.ibm.com Rachel Reinitz (chair) is a Senior Consultant with IBM Web Sphere Services \nfocusing on Web Services. She is also an experienced eX\u00adtreme Programming coach who has used XP practices \nfor four years. Copyright is held by the author(s)/owner(s). OOPSLA 03, October 26-30, 2003, Anaheim, \nCalifornia, USA. ACM 1-58113-751-6/03/0010. Rachel advises customers on incorporating web services into \ntheir applications and on incorporating Agile/XP practices and tools into their development processes. \nRachel spent a year as technical lead for supplier integration at the B2B marketplace builder, Ventro \n(Chemdex) and two years as an XP independent consultant. 3. Jutta Eckstein, www.jeckstein.com Jutta \nEckstein is an independent consultant, XP coach and trainer from Munich, Germany. Jutta s experience \nwith agile processes developed over ten years developing object-oriented applications. Jutta has worked \nwith teams of different sizes mainly in the finance industry to help them use agile processes. Besides \nengineering soft\u00adware she has designed and taught OT industry courses. Jutta trained as a teacher and \nexperienced leading many train-the-trainer pro\u00adgrams in industry. She focuses on techniques which help \nteach OT and is a main lead in the pedagogical patterns project. She is cur\u00adrently writing a book on \nScaling Agile Processes, which will be published in 2003. She is a member of the Agile Alliance and a \nsupporter of the Manifesto of Agile Software Development (http://www.agilealliance.org). Jutta uses the \nteam s best practices as a starting line. Interviews are an excellent technique for mining the team s \nbest practices. Alternatively one can use a specific agile process, such as XP as a starting line allowing \nfor deviations where necessary. Although as a coach you might have experienced XP as the ideal process \nfor a specific team, it might not work for a different team. Be flexible in the process as long as it \nsupports the overall goal since working software providing the highest business value to the customer. \nEvery team and every team member buries a wide range of good and bad practices also concerning software \ndevelopment processes. As a coach it is very important to mine this knowledge and use it for defining \nthe team s own process. Thus it is much more important to respect the experiences of the team than the \nexperiences of some process methodologist. Of course the knowledge of colleagues and other process methodologists \nis a great source for filling the gaps in the team s own process and for improving it. Regular project \nretro\u00adspectives after really short iterations help to find these gaps and the necessary improvements. \nAs soon as the team trusts in the process and knows how to make any necessary changes the coach needs \nto step out since the team can only organize itself when it really gets the responsibility for doing \nso. The coach has to ensure to lead the team towards self-organization by leaving the team alone as early \nas possible. The customer is the key person for making the team suc\u00adcessful. Thus the customer needs \nadditional support from the coach for mastering this burden. I became a coach after several years as \nan on-site/off-site developer. When I first started with ParcPlace, I was a fire-fighter for cus\u00adtomers. \nAfter a time, some of these customers decided to call me before their fires started! My toughest challenge \nwas a decision on whether to coach a project with about 200 people. I finally decided to do it. At the \ntime, I was absolutely convinced that success comes only with small teams. However, now I ve had good \nexperiences with teams of 50 - these teams still seem small. The 200 person project will be a win-win \nsituation -if the project succeeds, it will be through my coaching skills, while if it fails I ve validated \nmy prediction. If you seek a coach, I absolutely recommend one with strong social skills rather than \nsimply technical skills. I have never seen a project fail because of technical reasons. The coach has \nto be a catalyst, a facilitator, an ombudsman, a team player, and someone able to make hard decisions. \n4. Joshua Kerievsky, www.industriallogic.com Joshua Kerievsky has been programming professionally since \n1987 and is the founder of Industrial Logic, a company specializing in Extreme Programming (XP). Since \n1999, Joshua has been coaching and programming on small, large and distributed XP projects and teaching \nXP to people throughout the world. He is the author of numerous XP and patterns-based articles, simulations \nand games, including the forthcoming book, Refactoring to Patterns. To be a great XP coach, you must \nbe fearless. Fearlessness comes from knowing your stuff, walking the walk, telling it like it is, taking \nrisks, embracing change, learning from failure and loving what you do. Fearless XP coaches don t ignore \ncritical problems, such as personality conflicts, poor design decisions, insufficient customer support \nor uncomfortable work environments: they courageously help programmers, customers and managers apply \nXP s values and practices to solve problems and iterate to success.  5. Rob Mee, robmee@ieee.org Rob \nMee is a consultant, XP coach, and programmer from San Francisco. He recently coached with Jutta Eckstein \nand Kent Beck a very successful XP project in Munich, Germany. In December 2002 he was an invited speaker \nat the first XP Brazil conference, where he talked about patterns of XP coaching and fought Kent Beck \nto a draw in a hotly contested battle of the coaches. I ve heard speculation about the suitability of \nXP for teams around the world. Some people reason that XP cannot work in this or that country due to \nperceived cultural incompatibilities with its values or practices. But the more I coach, the more I come \nto the conclusion that teams, regardless of their cultural makeup or location, have more similarities \nwith each other than differences. And more inter\u00adesting than the differences between teams is the variety \nto be found within a team. In the past, I have found some of this variety frustrating. Now, how\u00adever, \nit is becoming clear to me that creatively tackling in\u00adcompatibilities within a team can lead to substantial \nbenefits. For example, there is an enormous divide between those programmers who are born refactorers \n, and those who don t notice rampant code duplication until their own programs are printed out and the \nfull weight of them dropped on their heads. One might be tempted, in an XP team, to recruit only the \nrefactorers. I think that would be a mistake. In my experience, programmers who care deeply about code \ncleanliness tend to focus excessively on technical details. On the other side of the coin, sloppy coders \noften have a closer identifi\u00adcation with business processes, and a strong desire to crank out features. \nBringing these two sides closer together in their practices and philosophy helps in the evolution of \na productive team and a code base with a high resistance to entropy. XP practices such as pair programming \nand collective code own\u00adership enable not just the dissemination of technical knowledge, but also the \nproductive merging of widely differing personal styles and approaches to software development. Extreme \nprogramming pro\u00advides a vehicle, absent in the isolated programmer islands of teams past, for coaches \nto immerse themselves daily in the complexity and variety of their teams. As XP becomes more widely practiced \nand better understood, it is my position that finding ways to maximize benefit from the diversity of \na software team will increasingly be\u00adcome the mark of an effective coach. 6. Mary Poppendieck, www.poppendieck.com \nMary Poppendieck has over thirty years of experience as an engi\u00adneer, IT manager, program manager and \nproduct development man\u00adager. A twenty year veteran of 3M, she is an expert in process con\u00adtrol, lean \nmanufacturing systems, and commercialization of hard\u00adware and software products. She is the president \nof Poppendieck. LLC as well as Treasurer and Managing Director of the AgileAlli\u00adance. She is the author \nof numerous articles, including Lean Pro\u00adgramming and Wicked Problems in the Software Development Magazine. \nHer book Lean Software Development; A Agile Toolkit was published by Addison Wesley in May, 2003. When \nI think of the word coach, I think of my children s swim team. Their coach was at every practice and \nevery meet. He gave the swimmers exercises during practices, taught them good eating hab\u00adits, and made \nsure no one even thought about smoking. He made sure the kids were properly registered at meets and assigned \nthe relay teams. He discussed strategy with each swimmer before each race, he timed their splits and \nshouted encouragement during the races. When it was over he congratulated those who did well and discussed \nhow to do better the next time. A swim team is never without a coach, not for practice or at a meet. \nThe head coach might delegate some responsibilities to an assistant who is learning how to be a coach, \nbut the team always had a coach. The coach isn t there to swim for the swimmers, or even to teach them \nhow to swim. The coach s job is to field a winning team and to make sure each swimmer is trained and \nmotivated to do well. Be\u00adhind every really good sports team you will find a really good coach. Software \ndevelopment is a team sport, and team sports do well to have a coach-on-site. I m not talking about a \ntrainer who shows up occasionally and gives some pointers; I m talking about a full-time leader. I m \nnot talking about someone who tells the team what to do or tries to play the game for the team; I m talking \nabout a coach who helps team members develop their own skills and strategies. Behind every really good \nsoftware development team, you will find a really good coach. How I became a coach. I was lucky enough \nto work for Roger Ap\u00adpeldorn, the inventor of the Fresnel lens for overhead projectors who led the team \nthat made this one of 3M s more successful prod\u00aduct lines. He went on to develop many businesses using \nstructured surfaces on clear plastic: from very bright traffic signs to the lens that limits the spray \nof light from your laptop. Under his guidance, I became a coach for a team developing a lighting system \nwith ultra pure plastics. I ll never forget the lessons I learned on how to recruit the team, how to \nmotivate members, and how to get support from senior management. What is the toughest thing I had to \ndo as coach? I had to shut down a new product development program when the product line was dropped. \nThe team was devastated, so we held a funeral in the basement of a very nice restaurant. The marketing \nguy acted as MC and came loaded with jokes and memories of good times. We shared our disappointment and \nfound that it was then a lot easier to move on, but the members of this team stayed in touch with each \nother for years. What advice would I give to a team looking for a coach? Look for a coach who knows the \nbasics, the blocking and tackling of software development, and can teach these to a team. Look for a \ncoach who knows how to get the right people in the right positions and every\u00adone headed in the right \ndirection. Look for a coach who will run interference with management and provide the resources and cus\u00adtomer \ninvolvement necessary to get the job done right. Finally, look for a coach knows how to bring out the \nbest in a team and can in\u00adspire great performance.  \n\t\t\t", "proc_id": "949344", "abstract": "This panel brings together coaches to discuss all aspects of the practice - how to become a coach, choosing a coach, and describing what is to be an (in) effective coach. A coach watches, provides feedback, and suggests subtle direction. The coach may be more - for example - an architect or team lead. The panelists will describe their positions and offer feedback. Panelists were asked to offer responses to three questions: <ul><li>How did YOU become a coach?</li><li>What's the toughest thing you've had to do as a coach?</li><li>What's your advice for teams looking for a coach?</li></ul>", "authors": [{"name": "Steven Fraser", "author_profile_id": "81339499863", "affiliation": "Independent Consultant", "person_id": "PP39039573", "email_address": "", "orcid_id": ""}, {"name": "Rachel Reinitz", "author_profile_id": "81100340406", "affiliation": "IBM", "person_id": "P488734", "email_address": "", "orcid_id": ""}, {"name": "Jutta Eckstein", "author_profile_id": "81100326926", "affiliation": "Independent Consultant", "person_id": "PP31037333", "email_address": "", "orcid_id": ""}, {"name": "Joshua Kerievsky", "author_profile_id": "81100147265", "affiliation": "Industrial Logic", "person_id": "PP33023892", "email_address": "", "orcid_id": ""}, {"name": "Rob Mee", "author_profile_id": "81542535756", "affiliation": "Pivotal Computer Systems", "person_id": "P643481", "email_address": "", "orcid_id": ""}, {"name": "Mary Poppendieck", "author_profile_id": "81100174369", "affiliation": "Agile Alliance", "person_id": "PP35025428", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949406", "year": "2003", "article_id": "949406", "conference": "OOPSLA", "title": "Xtreme programming and agile coaching", "url": "http://dl.acm.org/citation.cfm?id=949406"}