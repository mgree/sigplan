{"article_publication_date": "10-26-2003", "fulltext": "\n Metamodel Based Model Transformation Language to Facilitate Domain Specific Model Driven Architecture \n Aditya Agrawal Institute for Software Integrated Systems (ISIS) Vanderbilt University Nashville, TN \n 37235 aditya.agrawal@vanderbilt.edu ABSTRACT The Model Driven Architecture (MDA) can have a greater \nimpact by expanding its scope to Domain Specific MDA (DSMDA). This helps developers to represent their \nsystems using familiar domain concepts. For each DSMDA, a transformer is needed to convert Domain Specific \nPlatform Independent Models (DSPIM-s) to Domain Specific Platform Specific Models (DSPDM-s). Such model \ntransformers are time consuming and error prone to develop and maintain. A high-level specification language \nto formally specify the behavior of model transformers is required. The language must also have an efficient \nexecution framework. This research proposes to develop such a language and execution framework. Categories \n&#38; Subject Descriptors: D.2.2 Design Tools and Techniques, F.4.2 [Grammars and Other Rewriting Systems] \nand D.2.6 [Programming Environments]: graphical environments. General Terms: Design, Algorithms, Languages. \nKeywords: Model Driven Architecture, Model Integrated Computing, Graph grammars and transformations. \n1. THE PROBLEM STATEMENT The Model Driven Architecture (MDA) [3] effort has drawn focus to the aims of \nModel Integrated Computing (MIC) [1]. MIC has benefits in terms of high productivity when applied to \nspecific domains where users are familiar with the use of modeling. To leverage the benefits of MIC in \nMDA, the MDA scope needs to be expanded to Domain Specific MDA (DSMDA) where the focus is on developing \nthe MDA process for specific domains. MIC however, has its own problems such as high development cost, \nlack of standardization and vendor support [9]. These problems can be tackled with a framework that supports \nthe development and use of Domain Specific Modeling Environments (DSME). This approach helps distribute \nthe framework development cost over many DSME-s. DSME-s can then be used to develop Domain Specific Platform \nIndependent Models (DSPIM). These models represent the behavior and structure of the system with no implementation \ndetails. Such models then need to be converted to a Domain Specific Platform Specific Models (DSPSM). \nCopyright is held by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM \n1-58113-751-6/03/0010. Tools such as GME [2] and DOME [4] already provide a major portion of the framework \nsupport. They allow developers to specify the abstract syntax and static semantics of the modeling environments/languages. \nHowever, developers spend significant effort in writing code that implements the transformation from \nDSPIM to Domain Specific Platform Specific Model (DSPSM). To speed up the development of DSMDA-s a high-level \nlanguage it required for the specification of model transformers. An execution framework can then be \nused to execute sentences of the language. Design of such a language is non-trivial as a model transformer \ncan work with arbitrarily different domains and can perform fairly complex computations. Models in MIC \nare graphs. To me more precisely they are vertex and edge labelled multi-graphs. Thus, the model transformation \nproblem can be converted into a graph transformation problem. We can then use the mathematical concepts \nof graph transformations [5] to formally specify the intended behaviour of a model interpreter. There \nexists a variety of graph transformation techniques described in [5][6][7][8]. The prominent among these \nare node replacement grammars, hyperedge replacement grammars, algebraic approaches and programmed graph \nreplacement systems. These techniques have been developed mostly for the specification and recognition \nof graph languages, and performing transformations within the same domain (i.e. corresponding to a graph \ntype system), while we need a graph transformer that works on graphs conforming to different domains. \nMoreover, these transformation techniques rarely use a widely accepted language for the specification \nstructural constraints on the graphs. In summary, the following features are required in the transformation \nlanguage: 1. The language should provide the user with a way to specify the different graph domains being \nused. This helps to ensure that graphs/models of a particular domain do not violate the syntax and static \nsemantics of the domain. 2. There should be support for transformations that create independent models/graphs \nconforming to different domains than the input models/graphs. In the more general case there can be n \ninput model/domain pairs and m output model/domain pairs. 3. The language should have efficient implementations \nof its programming constructs. The generated implementation should be comparable to its equivalent hand \nwritten code. 4. All the previous points aim to increase productivity and achieve speed up in the time \nrequired for writing model interpreters. This is the primary goal and the most important.  2. RESEARCH \nHYPOTHESIS A Metamodel based language using graph rewriting and transformations with support for multiple \ninput and output graphs (corresponding to different domains) with an efficient implementation is suitable \nfor specification of model transformers. Such a language will achieve a considerable speed\u00adup (in the \norder of 1 to 10) in the time to develop model transformers and thus help develop a family of Domain \nSpecific Model Driven Architecture tools. 3. RESEARCH METHODS After identifying the problem, the next \nstep was to study the literature for solutions. Graph grammars and transformations provided many solutions \nbut they were not tailored to solve the model-to-model transformation problem. The key missing feature \nwas support for transformations where the input and output graphs belonged to different domains. A new \nlanguage was required that leveraged on the benefits of graph grammars and transformations and also provided \nthe required language constructs for the development of model transformers. Requirements for the language \nare gathered from challenge problems. Then research is conducted on how these needs can be fulfilled \nby simple and formal language constructs. Language constructs are then evaluated on the basis of expressiveness, \ngenerality and efficiency. A few candidate constructs are then implemented in the execution engine to \nfurther evaluate them. A prototypical language has been developed using GME that is used to create and \ntest new ideas. This language is then used to solve the challenge problems to see if the language meets \nits requirements. The challenge problems currently used are: 1. Specify a transformer that will generate \nan equivalent Finite State Machine (FSM) from a Hierarchical Concurrent State Machine (HCSM). This problem \nintroduces interesting challenges. To map concurrent state machines to a single machine there is a need \nfor complex operations that include Cartesian production of the parallel state space. Different traversal \nstrategies can be used to solve the problem and the language should provide support for them. 2. Specify \na transformer that will generate the equivalent Hybrid System from a given Simulink and Stateflow model. \nThis is another non-trivial example as the mapping is not a straightforward one-to-one mapping. It is \nnot even obvious if the problem can be solved in the most general case. One algorithm used to solve this \nproblem converts a restricted Simulink-Stateflow model to its equivalent hybrid system. This algorithm \nhas some interesting steps such as state splitting, reachability analysis and special graph walks that \nmake it another interesting problem to try. 3. Specify a pre-processor for domain specific extensions \nto a language. For example, to develop a pre-processor that converts Aspect-Java code to its equivalent \nJava code. This example is chosen because it is not a toy problem and should be able to test that system \nthoroughly and see if the system can be used to solve real world problems.  The diversity of the example \nproblems chosen above gives confidence that if the new language can actually solve all the above-mentioned \nproblems using easy to use concepts and if the system can generate efficient implementations from the \nspecification then it should be able to solve a large number of non-trivial real world problems. A large \npart of this research effort will focus on the execution framework for the language. Efficient algorithms \nneed to be developed that can generate efficient code. Success will be measured using three metrics. \nThe first is the time taken to solve the problem in the new language compared to the traditional approach \n(hand written code). This will give an idea of the speed up achieved. The second will be a qualitative \nmetric that will evaluate the usability of the language as well as the time and background knowledge \nrequired for using the language. The third metric is the speed of the generated model transformer compared \nto the hand written model transformer. The language along with the execution framework should allow used \nwith little programming knowledge to specify model transformers, achieve a speed up (greater than 2) \nin the time to develop these transformers and it should not degrade the performance of the transformers \nby more than a constant factor. 4. ACKNOWLEDGEMENTS The DARPA/IXO MOBIES and NSF ITR on \"Foundations \nof Hybrid and Embedded Software Systems\" programs have supported, in part, the activities described in \nthis paper. Feng Shi was also involved in the development of the Graph Rewriting and Transformation Engine \n(GReAT E) - the current implementation of the language. I would also like to thank Prof. Gabor Karsai, \nmy advisor for his guidance and support. 5. REFERENCES [1] J. Sztipanovits, and G. Karsai, Model-Integrated \nComputing , Computer, Apr. 1997, pp. 110-112 [2] A. Ledeczi, et al., Composing Domain-Specific Design \nEnvironments , Computer, Nov. 2001, pp. 44-51. [3] The Model-Driven Architecture , http://www.omg.org/mda/, \nOMG, Needham, MA, 2002. [4] Dome Guide , Honeywell, Inc. Morris Township, N.J, 1999. [5] Grzegorz Rozenberg, \nHandbook of Graph Grammars and Computing by Graph Transformation , World Scientific Publishing Co. Pte. \nLtd., 1997. [6] Blostein D., Sch\u00fcrr A., Computing with Graphs and Graph Rewriting , Technical Report \nAIB 97-8, Fachgruppe Informatik, RWTH Aachen, Germany. [7] H. Gottler, Attributed graph grammars for \ngraphics , H. Ehrig, M. Nagl, and G. Rosenberg, editors, Graph Grammars and their Application lo Computer \nScience, LNCS 153, pages 130-142, Springer-Verlag, 1982. [8] J. Loyall and S. Kaplan, \"Visual Concurrent \nProgramming with Delta-Grammars,\" Journal of Visual Languages and Computing, Vol 3, 1992, pp. 107-133. \n[9] Agrawal A., Karsai G., Ledeczi A.: An End-to-End Domain-Driven Development Framework , 18th Annual \nACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, (accepted), \nAnaheim, California, October 26, 2003  \n\t\t\t", "proc_id": "949344", "abstract": "The Model Driven Architecture (MDA) can have a greater impact by expanding its scope to Domain Specific MDA (DSMDA). This helps developers to represent their systems using familiar domain concepts. For each DSMDA, a transformer is needed to convert Domain Specific Platform Independent Models (DSPIM-s) to Domain Specific Platform Specific Models (DSPDM-s). Such model transformers are time consuming and error prone to develop and maintain. A high-level specification language to formally specify the behavior of model transformers is required. The language must also have an efficient execution framework. This research proposes to develop such a language and execution framework.", "authors": [{"name": "Aditya Agrawal", "author_profile_id": "81100288721", "affiliation": "Vanderbilt University, Nashville, TN", "person_id": "PP39036140", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949379", "year": "2003", "article_id": "949379", "conference": "OOPSLA", "title": "Metamodel based model transformation language to facilitate domain specific model driven architecture", "url": "http://dl.acm.org/citation.cfm?id=949379"}