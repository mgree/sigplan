{"article_publication_date": "10-26-2003", "fulltext": "\n A Policy Based System to Incorporate Self-Managing Behaviors in Applications Hoi Chan, Bill Arnold \nIBM T.J Watson Research Center 19 Skyline Drive Hawthorne NY, 10532 914-784-7741 hychan@us.ibm.com ABSTRACT \nWith the rapid increase in complexity of software systems and applications, it becomes necessary to develop \ntools to simplify the incorporation of self-managing features into applications. The use of object and \ncomponent technologies, together with a policy system which externalizes business logic from an application, \nplays an important role in enabling systems with greater manageability and variability. In this presentation, \nwe will show an approach to build policy based applications with much greater flexibility, expressiveness \nand reusability . The key concept in this approach is the separation of business logic expressed as policy \nor rules into its various sub-components and these sub\u00adcomponents are dynamically configurable. Categories \nand Subject Descriptors D.2.3 [Software Engineering]: Coding Tools and Techniques object oriented programming \nGeneral Terms Management, Design Keywords Autonomic, Self-Management, Policy, Components,. 1. INTRODUCTION \nAs the complexity of software system increases, building system with self-managing or autonomic features \n[1] becomes increasingly important. Developing tools and creating new software engineering methodologies \nto incorporate self-managing features into applications is an important engineering and research topic. \nThe externalization of business logic in applications by using business rules or policies is a common \napproach to increase flexibility, manageability and variability of the applications. Current policy systems \nare mainly domain specific, and there is a need for an execution system which is flexible and usable \nacross a variety of domains. Our policy execution system provides a framework which utilizes object and \ncomponent technologies to separate the process of executing a policy into various components and processes. \nEach component and sub-process can be developed independently, configured and reused [2]. Copyright is \nheld by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. \n 2. THE COMPONENTS OF EXECUTING A BUSINESS POLICY In general, a typical business policy consists of the \nfollowing logic and execution components: Basic business logic is instructions which guide the foundation \nbusiness operations, these instructions can be viewed as business policies used to make everyday business \ndecisions. These policies are more structurally oriented than declarative, and are commonly expressed \nas if condition-then action statements.  Conflict Resolution logic [3] is the set of instructions which \ncan resolve conflict among various outcomes of executing a policy.  Priority Handling Logic is the set \nof instructions which determines the priority of each individual policy rule in the policy  Execution \nstrategies are the sets of instructions which control the way the policy is executed  Knowledge provider \nis the repository where facts and usually persistent information which are required by policy execution \nare stored  Rule engines and execution algorithms are the underlying mechanism which executes the policy, \n Mappings provide the links between the conditions and actions specified in policy to the actual data \nor functions which provide the data and generating the associated actions  In this presentation, we \nwill show the creation and incorporation of the various components of an externalized policy in an application. \nThe first step is to identify the various points of an application whose logic can and should be externalized, \nthese points are called decision points. These decision points usually consist of well-defined input \nand output requirements, and more importantly, frequent changes are required. The second step is to analyze \nthe business logic (decompose if necessary to smaller logic components) and express the logic in rules \nor policies ( parts of business can be reused if one is already available) . The third step is to examine \nthe input and output requirements of the decision points and create the mapping information (or get the \ncomponent from a repository if one is available) to connect the business logic to external data. build \nor select ( if one is readily available from a repository ). the necessary logic and run time components \nto create a policy execution episode. The fourth step is to construct the policy execution instance from \nthe components and deploy the executable policy instance to an application. An appropriate execution \nmechanism can be selected. Subsequently, each component can be changed without affecting the other components \nand the various components can be dynamically configured to meet various conditions and requirements \n[4]. p1 p2 p3 Figure 1. Multiple applications may share the same policy execution instance.  p1 \n Figure 2. A policy execution instance can be dynamically configured by its various components which \ncan be developed separately and reused. 3. CONCLUSION This presentation shows a policy system which \nallows applications to use external policies or rules to incorporate flexible self management behavior. \nIt also shows the various components dynamically configured to form a policy instance to meet specific \nrequirements. 4. REFERENCES [1] Jeff O. Kephart, David M. Chess, The Vision of Autonomic Computing \n, Computer Journal, IEEE Computer Society, January 2003 issue [2] Reusable Architecture for Embedding \nRule-based Intelligence in Information Agents\" (Dec. 01 1995). By Benjamin N. Grosof, David W. Levine, \nHoi Y. Chan, Colin J. Parris, and Joshua S. Auerbach. In: Proceedings of the Workshop on Intelligent \nInformation Agents, at the ACM Conference on Information and Knowledge Management (CIKM-95), edited by \nTim Finin and James Mayfield. Held Baltimore, MD, USA, Dec. 1-2, 1995 [3] Prioritized Conflict Handling \nfor Logic Programs\" (Oct. 12 1997). By Benjamin N. Grosof. In: Proceedings of the International Symposium \non Logic Programming (ILPS-97), edited by Jan Maluszynski, MIT Press, Cambridge, MA, USA, pages 197-211 \n[4] Approach to Policy Execution In Autonomic Manager Toolkit ( June, 2003 ) . By Hoi Chan, Dinesh Vrema, \nAlla Segal..etc. In First Workshop on Algorithms and Architectures for Self-Managing System, Federated \nComputing Research Conference 2003.  \n\t\t\t", "proc_id": "949344", "abstract": "With the rapid increase in complexity of software systems and applications, it becomes necessary to develop tools to simplify the incorporation of self-managing features into applications. The use of object and component technologies, together with a policy system which externalizes business logic from an application, plays an important role in enabling systems with greater manageability and variability. In this presentation, we will show an approach to build policy based applications with much greater flexibility, expressiveness and reusability . The key concept in this approach is the separation of business logic expressed as policy or rules into its various sub-components and these sub-components are dynamically configurable.", "authors": [{"name": "Hoi Chan", "author_profile_id": "81406595597", "affiliation": "IBM T.J Watson Research Center, Hawthorne, NY", "person_id": "PP77026153", "email_address": "", "orcid_id": ""}, {"name": "Bill Arnold", "author_profile_id": "81416594590", "affiliation": "IBM T.J Watson Research Center, Hawthorne, NY", "person_id": "P643431", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949366", "year": "2003", "article_id": "949366", "conference": "OOPSLA", "title": "A policy based system to incorporate self-managing behaviors in applications", "url": "http://dl.acm.org/citation.cfm?id=949366"}