{"article_publication_date": "10-26-2003", "fulltext": "\n Panel Discipline and Practices of TDD (Test Driven Development) Steven Fraser (Chair) Dave Astels Kent \nBeck Independent Consultant Adaption Software Three Rivers Institute Barry Boehm John McGregor USC Clemson \nUniversity ABSTRACT This panel brings together practitioners with experience in Agile and XP methodologies \nto discuss the approaches and benefits of applying Test Driven Development (TDD). The goal of TDD is \nclean code that works. The mantra of TDD is: write a test; make it run; and make it right. Open questions \nto be addressed by the panel include: How are TDD approaches to be applied to data\u00adbases, GUIs, and \ndistributed systems? What are the quantitative benchmarks that can demonstrate the value of TDD, and \nwhat are the best approaches to solve the ubiquitous issue of scalability? Categories &#38; Subject \nDescriptors: D.2.4 Software/Program Verification D.2.5 Testing and Debugging D.2.10 Design Methodologies \nGeneral Terms: Design, Management Keywords: TDD, Test-Driven Design, XP Practices, Refactor, Inspections \n 1. Steven Fraser, sdfraser@acm.org Steve Fraser consults on software engineering and technology transfer \nbest-practices in Santa Clara, California. Until 2002, Steve served fifteen years in a variety of diverse \nsoftware tech\u00adnology program management roles at Nortel Networks including: Process Architect, Senior \nManager (Disruptive Technology), Process Engineering Advisor, and Software Reuse Evangelist. Steve served \nas the initiator, Chair, and Event Director of the Nortel Networks Design Forum, a proprietary global \ntechnology transfer event run by video, audio and web conferencing. In 1994 he served a year as a Visiting \nScientist at the Software Engineer\u00ading Institute (SEI) collaborating with the Application of Software \nModels project on the development of team-based domain analy\u00adsis techniques. Steve is an avid operatunist \nand videographer. 2. Dave Astels, david@adaptionsoft.com Dave Astels has built hardware and software \nsystems for over 20 years, and used OO technologies for the last 12 years. Dave has studied, practiced, \ntaught, evangelized, and coached XP and Agile Processes since 1998. He is a co-author of A Practical \nGuide to eXtreme Programming, and author of Test-driven Development: A Copyright is held by the author(s)/owner(s). \nOOPSLA 03, October 26-30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010.  James Newkirk \nCharlie Poole Microsoft Poole Consulting Practical Guide, both published by Prentice Hall. Dave edits \nthe Test-Driven Development Edition of The Coad Letter and isa Founding Partner at Adaption Software, \nInc. Test-driven Development (TDD) is one of the few XP practices that have stand-alone benefits. Indeed, \nit is an enabler for several other XP practices, e.g. refactoring and continuous integration. TDD is \nalso a great first step towards adopting an Agile process (particularly XP): it s the thin end of the \nwedge, the sharp end of the stick. I personally know several projects that are practicing TDD to various \ndegrees of rigor. Without exception they have experienced dramatic increases in quality and significant \noverall time savings. My personal stand in the TDD camp is toward the extreme end: tests should be grouped \nby fixture, not by any structural or lin\u00adguistic criteria; tests should be as simple as possible, ideally \na single assertion; tests should be refactored as ruthlessly as produc\u00adtion code; tests are written for \ndesign and specification, not for verification; a developer should spend at least as much, if not more, \ntime writing tests as production code. I am currently involved in raising the visibility of TDD in the \nSmalltalk community (ironic isn t it?) with my work on SUnit, FIT, and various Mock Object related frameworks. \n3. Kent Beck, kent@threeriversinstitute.org Kent Beck is best defined in terms of relationships. Kent \ninvented and named Extreme Programming following work by Jim Coplien and Ward Cunningham on software \ndevelopment process, with Ron Jeffries and the C3 team at Chrysler - resulting in the Jolt Productivity \nAward-winning Extreme Programming Explained: Embrace Change. He is the co-author of Planning Extreme \nPro\u00adgramming with Martin Fowler, with whom he also collaborated on Refactoring: Improving the Design \nof Existing Systems. With Ward Cunningham he wrote HotDraw, a widely copied drawing editor framework, \npioneered patterns for software development, and popularized CRC cards. He channeled the Ancient Smalltalk \nMasters to produce The Smalltalk Best Practice Patterns, and is currently reviving a decades-old technique \nin Test-Driven Devel\u00adopment by Example (Addison Wesley). He lives on a southern Oregon farm with a dwindling \nbut still-impressive gaggle of chil\u00addren, his lovely wife Cindee, four dogs, and a bunch of chickens. \nLean Production identifies two kinds of waste. The first kind of waste is pure waste--you screwed up \nand you knew better, or you are sitting around waiting because of poor resource allocation. The second \nkind of waste is waste that is necessary at the moment, but doesn t really add value. Inspections are \na perfect example-\u00adyour process creates too many defects to just ship units to custom\u00aders, but you d \nreally rather eliminate the defects at the source, at which point you can eliminate the inspections without \nremoving value. The tests we write in TDD, then, are Type II waste--necessary at the moment but not a \ndirect addition of value. We need the tests to write clean code that works, but the customer isn t paying \nfor the tests, but the code. If we could figure out how to eliminate the tests and still have clean code \nthat works, we could improve pro\u00adductivity substantially. How might it be possible to move from Test-Driven \nDevelopment to just Driven Development? 4. Barry Boehm, boehm@cse.usc.edu Barry Boehm manages an annual \nensemble of increasingly test\u00addriven software developments, and analyzes data on these and a number of \nother commercial and government software develop\u00adments. He is a professor at USC, and is the co-author \nwith Rich\u00adard Turner of a recent book comparing agile and plan-driven methods, Balancing Agility and \nDiscipline. Test-driven development is a significant step forward from test\u00adlast approaches. However, \ntest-driven developers often find it even easier to fall into several software testing pitfalls, such \nas: Testing to the stated (nominal-case) requirements. Data on software rework distributions usually \nshows that the 20% of the problems causing 80% of the rework are off-nominal re\u00adquirements.  Value-neutral \nor risk-insensitive testing. Again, software applications tend to have a Pareto 80-20 distribution in \nwhich 20% of the requirements account for 80% of the busi\u00adness value. Spending an equal amount of test \neffort on each requirement is usually an inefficient allocation of resources.  Overemphasizing testing \nor people-reviewing at the expense of the other. Data indicates that each is much better than the other \nat detecting some classes of defects, while some defects are about equally addressable by both.  5. \nJohn McGregor, johnmc@cs.clemson.edu I have had more than a quarter of a century experience with re\u00adsearch \nand trends of software design and development. I have over a decade of substantial experience working \non a wide variety of systems developed using object-oriented techniques. This ex\u00adperience includes distributed, \nreal time, embedded systems as well as business information systems in a multi-tiered environment. I \nhave worked in various domains. These include telephony, finan\u00adcial, personnel, medical, scientific, \naerospace, and the murky re\u00adgions of the legal domain and expert witness testimony. My roles vary from \nan independent consultant mentoring corporate and project management through an actual project team member \nas\u00adsisting with day-to-day tasks. I have assisted software develop\u00adment organizations transition their \nprojects as they adopted new techniques such as product line development, object-oriented development, \nand iterative, incremental development. For TDD to be successful equal attention must be given to the \ntesting and design goals we hope to satisfy. Design is more than just specification. Design coordinates \ninteracting entities. Choos\u00ading test cases that will adequately fill this role is difficult though not \nimpossible. It is true that a test case is an unambiguous re\u00adquirement, but is it the correct requirement? \nMore robust design techniques have validation methods that ensure the correctness, completeness, and \nconsistency of the design. How does this hap\u00adpen in TDD? 6. James Newkirk, jamesnew@microsoft.com James \nNewkirk has been a software practitioner for over 19 years. He has designed and implemented software \nin many different environments, from real-time micro-controllers to large-scale multi-tiered business \nsystems. In addition he has managed groups varying in size up to 40 software developers. He has been \ninti\u00admately involved with the Agile Processes Community almost since its inception. In 2001 he co-wrote \nExtreme Programming in Practice with Robert C. Martin, published by Addison-Wesley. The book is a pragmatic \nlook at what it s like to do an XP project. He has also written many articles related to Extreme Programming \n(XP) and Object-Oriented Design and spoken at conferences such as XP/Agile Universe and OOPSLA. He is \na major contributor to the book Agile Software Development by Robert C. Martin, which was published by \nPrentice-Hall in the fall of 2002. He is currently writing Test-Driven Development with .NET with Alexei \nVorontsov, which will be published by Microsoft Press in the fall of 2003. For the past 2 1/2 years he \nhas been a frequent contribu\u00adtor to the development of NUnit, a unit testing tool for the .NET environment. \nIn early 2002 he became the administrator of this open source project and led a small team that completely \nredes\u00adigned and implemented V2.0 of NUnit. The initial version of NUnit was simply a transliteration \nof the Java unit testing tool JUnit. V2.0 leverages more of the .NET platforms capabilities. I believe \nthat Test Driven Development works in practice because it helps guide the design process from requirements \ninto actual running code. The act of writing a test starts the transformation. The test represents an \nunambiguous requirement that the program must satisfy. Since the rules state that you must satisfy this \ntest in order to proceed you have to focus on this single requirement. This enables you as the programmer \nto shut off all the other re\u00adquirements and focus solely on satisfying this one. Once the test runs successfully \nyou can then take a step back, survey the land\u00adscape that was created, and touch up a few things (refactor) \nand then move on to the next requirement. Often in other design ap\u00adproaches I have used the programmers \ngets paralyzed because the problem that is being solved is so huge that it is difficult to know where \nto begin. TDD recognizes the reality that you don t solve big problems with huge sweeping changes with \nlittle or no feed\u00adback. You solve a problem by making small incremental steps which provide crucial real \nfeedback. These small incremental steps eventually lead to solving the large problem with a better and \nmore verifiable solution. 7. Charlie Poole, poole@pooleconsulting.com Charlie Poole has worked in the \nsoftware development field for over 25 years, first in the IT department of a government agency and subsequently \nas an independent developer, coach and con\u00adsultant. Charlie is a veteran C++ developer with a background \nin the Windows SDK and COM. He has been working with the .Net framework and C# language since the early \nbeta releases and is one of the developers of the NUnit open-source testing framework for .Net. He is \nthe president of the Seattle XP Users Group and is active in promoting XP in the Northwest. TDD is one \nof the harder things for certain folks to grasp when it comes to understanding XP practices. On the one \nhand, we would like to get people to use TDD from the beginning. On the other hand, insisting on it too \nfirmly may prevent any movement toward XP in certain environments. My current solution is to try to un\u00adderstand \nclearly what the client is asking for: if it tells me how to do XP then TDD is central, but if it s how \ncan I improve my proc\u00adess then TDD may come a bit later. Others approach this differ\u00adently and, of course, \nwe all get to choose what kind of work we want to do. Aside from the tactics around adoption, the most \nin\u00adteresting part of TDD for me is its interaction with the overall vision of the application held by \nthe team at any given time. That overall view is the cumulative result of many decisions, some made up \nfront but most emerging through TDD as the pro\u00adject progresses. At any given point, there is a tension \nbetween the overall design/metaphor of the project and the decisions one feels the need to make right \nnow. It s a fact that this tension gets re\u00adsolved, but the process by which it happens isn t too well \nunder\u00adstood and needs some clarification. The practice of routinely ex\u00adposing the cumulative result of \nall previously decisions to the team is what I call the Big Story practice: a translation of meta\u00adphor \ninto something we can actually do, rather than something we simply have. By regularly telling the story \nof the application - the result of many prior decisions -team members are helped to main\u00adtain a common \nview - a theory, in Naur s usage - of what the ap\u00adplication is about. The relation of this to TDD is \nthat each small decision is made against a common background which is shared by the entire team. And \nwhen those emerging decisions turn out to be not quite so small, the impact they will have on the overall \nBig Story is known at the point of making the choice and can be quickly shared with the team in a form \nthat s easy to digest. The updated design/metaphor/story of the application forms the back\u00adground for \nthe next decisions that must be made.  \n\t\t\t", "proc_id": "949344", "abstract": "This panel brings together practitioners with experience in Agile and XP methodologies to discuss the approaches and benefits of applying Test Driven Development (TDD). The goal of TDD is clean code that works. The mantra of TDD is: write a test; make it run; and make it right. Open questions to be addressed by the panel include: - How are TDD approaches to be applied to databases, GUIs, and distributed systems? What are the quantitative benchmarks that can demonstrate the value of TDD, and what are the best approaches to solve the ubiquitous issue of scalability.", "authors": [{"name": "Steven Fraser", "author_profile_id": "81339499863", "affiliation": "Independent Consultant", "person_id": "PP66022665", "email_address": "", "orcid_id": ""}, {"name": "Dave Astels", "author_profile_id": "81367591391", "affiliation": "Adaption Software", "person_id": "PP64022731", "email_address": "", "orcid_id": ""}, {"name": "Kent Beck", "author_profile_id": "81100558273", "affiliation": "Three Rivers Institute", "person_id": "PP31047638", "email_address": "", "orcid_id": ""}, {"name": "Barry Boehm", "author_profile_id": "81100662018", "affiliation": "USC", "person_id": "PP40029609", "email_address": "", "orcid_id": ""}, {"name": "John McGregor", "author_profile_id": "81339516570", "affiliation": "Clemson University", "person_id": "PP14149195", "email_address": "", "orcid_id": ""}, {"name": "James Newkirk", "author_profile_id": "81100431185", "affiliation": "Microsoft", "person_id": "PP66022650", "email_address": "", "orcid_id": ""}, {"name": "Charlie Poole", "author_profile_id": "81372590943", "affiliation": "Poole Consulting", "person_id": "P643434", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949407", "year": "2003", "article_id": "949407", "conference": "OOPSLA", "title": "Discipline and practices of TDD: (test driven development)", "url": "http://dl.acm.org/citation.cfm?id=949407"}