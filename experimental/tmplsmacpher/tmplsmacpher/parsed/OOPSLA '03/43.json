{"article_publication_date": "10-26-2003", "fulltext": "\n Reality Abstraction and OO Pedagogy: Results from 5 Weeks in Virtual Reality John Towell, Ph.D.  \nElizabeth Towell, Ph.D. Carroll College  Carroll College 100 N. East Ave.  100 N. East Ave. Waukesha, \nWI, 53186  Waukesha, WI, 53186 262-524-7656 262-524-7655 jtowell@cc.edu etowell@cc.edu ABSTRACT \nA five week program which involved extensive exposure to a complex object-oriented virtual environment \nwas evaluated for efficacy in learning fundamental object-oriented principles. Students (n=57) from two \nCS1 classes were asked to write essays on their knowledge of object-oriented programming concepts following \ntheir participation in the program. A systematic method for evaluating student knowledge was followed \nby rating the student s knowledge on a one-to-five rating scale. The results indicated that the students \nunderstood, by virtue of their ability to write intelligibly, the concepts of abstraction, inheritance \nand method override. Demonstrated knowledge of the concept of state was far less convincing.  Categories \nand Subject Descriptors K.3.1 [Computers and Education]: Computer Uses in Education - Computer-assisted \ninstruction (CAI) General Terms: Experimentation Keywords: Java, networked virtual environments, pedagogy, \nMOO, MUD, virtual reality, presence 1. INTRODUCTION A paradox exists in the process of teaching beginning \nobject\u00adoriented (OO) programming. Students learning introductory concepts can solve beginning problems \nwithout really understanding OO principles. The problems and examples used to teach introductory programming \nare not of sufficient complexity to convey the advantages of the OO approach. In an attempt to resolve \nthis problem we have studied students in two CS1 classes after a five week exposure to a complex OO virtual \nenvironment. The students explored ths environment as avatars serving as abstractions of real persons. \nThus, all interactions with the virtual environment were the result of messages sent by the avatar to \nother objects which included other avatars (students in the class), rooms, and various objects. After \nfive weeks, teaching efficacy was measured by evaluating students descriptions in the form of essays \nwritten during a midterm examination. The results of the studies indicate that the students understand \nthe concepts of abstraction, inheritance and method override, while the concept of state was not as clearly \nunderstood. Copyright is held by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, \nUSA. ACM 1-58113-751-6/03/0010. 2. METHODS 2.1. Subjects The subjects were 57 students enrolled in two \nsections of CSC111 Introduction to Java at Carroll College during the Spring 2003 semester. All students \nenrolled in this course were required to have passed CSC110 which is an introductory programming course \nbased on the Visual Basic Language. 2.2. Virtual Environment The virtual environment used in the studies \nreported here was of the MOO (Multi-user dimension Object Oriented) type which was developed primarily \nat Xerox PARC (Palo Alto Research Center) by Pavel Curtis and collaborators [1]. This system is composed \nof a server and a database which are freely available (ftp://ftp.lambda.moo.mud.org/pub/MOO/). The server \nis capable of providing simultaneous connections for hundreds of Internet users via the telnet protocol \n(or other more specialized clients). It acts as a parser for interpreting commands given by connected \nusers, and it serves as a database management system. The database contains information about objects \nthat constitute the environment in which the user operates. This information includes the structure of \nthe environment, or topography which typically consists of rooms connected by entrances/exits that can \nbe navigated with the use of simple commands. The topography of the environment used here, called Carroll \nMOO (Figure 1), was recorded on a map which could be easily accessed by the user. Figure 1: Topography \nof Carroll MOO The database also contains information about objects contained within the topography and \nfinally, it contains information about the object to which the user is connected. This object is referred \nto as an avatar or virtual abstraction of the user. Students can easily communicate by textual exchange \nwith any other students (and the instructor) who occupy the same room. The MOO environment is extensible \nand equipped with a simple yet robust programming language called the MOO Language. We have hypothesized \nthat this combination of being in an architecture of connected rooms (in a virtual sense), building and \ninteracting with objects, and communicating with others, creates an environment which is aptly suited \nfor active-learning or constructionist experiences [2], particularly with regard to object-oriented concepts \n[3,4]. Others have also recognized the potential of this environment for teaching [5]. In weeks four \nand five of the program described here, beginning Java programs were written, compiled and executed from \nwithin Carroll MOO. The programs were written on objects called notes and the notes were placed into \ninstances of a class called the Javaputer [6]. 2.3. Five Week Program of Study During the first five \nweeks of the semester, the students were exposed to a combination of lecture sessions and tutorials, \nand assignments requiring each student s performance in the virtual environment. Three tutorials were \nused that were previously created by the following MOO educators (see acknowledgments): Ken Schweller \ns Box of Donuts Tutorial; Judy Anderson s Wind-up Toy Tutorial; and Elizabeth Hess s Pet Rock Tutorial. \nFurther information on these tutorials is available from the authors. A short description of the five \nweek program follows: Week 1: Lecture: Introduction to MOO and OO programming; Assignment: Take introductory \nMOO tutorial from within the MOO; learn MOO navigation and communication; build (instantiate) student \noffices; set descriptions on avatar and office; learn to use methods on MOO objects; learn MOO help system; \nreading assignment in MOO programmer s manual. Week 2: Lecture: Review previous week s topics with emphasis \non classes, objects, instantiation, methods and messages in navigation and communication; demonstrate \ncurrent week s assignment; Assignment: Tutorial on MOO editor; generic wind-up toy instantiation and \nimplementation; tutorial on using evals to determine and set values of object properties without using \nmethods; first MOO programming assignment from tutorial which ran on MOO TV object that each student \ninstantiated. Week 3: Lecture: Multiple choice quiz on terminology from first two weeks; review last \nweek; discuss and demonstrate MOO example of method override; discuss method specialization, recursion \nand fork(); demonstrate assignment for current week. Assignment: Second MOO programming assignment \u00adstudent \ninstantiated parent object, toy, and a child of toy called duck. All programming done with toy (parent) \nall testing done with duck (child); third MOO programming assignment involved improvements to toy. Week \n4: Lecture: Return quizzes and discuss; review previous week and present toy-duck relationship in UML \nand emphasize inheritance of methods and properties, object instantiation and method override and specialization; \ndiscuss this week s topics including intoduction to Java programming and use of Javaputer. Assignment: \nFirst part of YIB Pet Rock tutorial; Java programming tutorial plus two programming problems to be solved \nwith programs written in Java. Week 5: Lecture: review previous week; continue introductory Java programming \nAssignment: Second part of YIB Pet Rock Tutorial; second set of Java programming problems to be done \nin MOO. Week 6: Midterm Examination 2.4. Measuring Teaching Efficacy After the five week program described \npreviously, the following four questions were given to the students who answered them in formal essays \nin a closed-book, two-hour examination. 1. Beginning with the idea that OO programming is based on the \nabstraction of real world things, discuss how OO programming works. Include in your discussion the advantages \nof OO programming. 2. Discuss the concept of inheritance and show how the toy1\u00adduck1 exercise studied \nin class relates to your discussion of inheritance. 3. Define and discuss override and give an example \nof how an override was used in one of the MOO exercises. 4. In the following code example, discuss what \nis happening and how it relates to the concept of state.  pass(@args); if (this.wound) this.location:announce_all(this.name, \n , this.startup_msg); for x in [1..this.wound] fork (x * 15) this.location:announce_all(this.name, ,this.continue_msg); \nthis.wound = this.wound - 1;  endfork endfor Each of the four questions was evaluated for the entire \ncollection of examinations in the following steps. In the first step each essay was read and subjectively \nclassified ranging from marginal to good. In the second step, beginning with the best essays, criteria \nwere devised for awarding points for specific details or concepts included in the essay. The third step \ninvolved reading all the essays and applying the criteria developed in the second step to generate a \nnumber score for each essay. After each essay was read and awarded points, the student s knowledge of \nfour OO principles: abstraction, inheritance, override and state was evaluated. If the student was clearly \nknowledgeable about the topic a 1 was awarded. If the student was clearly not knowledgeable, a 5 was \nawarded. Students regarded as demonstrating some knowledge lying between these two extremes were awarded \n2, 3 or 4 accordingly. (Actual grades awarded to students ranged in a similar fashion but were not tied \ndirectly to this assessment.) After a question was evaluated as described above, the examination books \nwere reshuffled and the process repeated again as described for the next question. The identity of the \nstudents was concealed during the entire grading process.  3. RESULTS The results for the four midterm \nexamination questions are shown in Figures 2-5. Although the first question was about how OO programming \nworks, the responses were rated according to whether the student displayed an understanding of abstraction. \nSince sixteen responses did not discuss abstraction, these were assigned to the no (5) category (Figure \n2). out of the four programming exercises involved an override, many students were able to demonstrate \ntheir knowledge of the concept by explaining how it was used in the programming exercise even if their \ndefinition and discussion was not clearly explained. 40 35 NUMBER OF STUDENTS 30 25 20 15 10 NUMBER \nOF STUDENTS 40 35 30 25 20 15 10 5 0  Figure 2: Results from the first question which was evaluated \naccording to demonstration of knowledge of abstraction. 5 0 12345 KNOWLEDGEABLE NOT KNOWLEDGEABLE Figure \n4: Results from the third question which was evaluated according to demonstration of knowledge of override. \nThe fourth question required the students to explain what was happening in a MOO code sequence which \nwas dependent on the value of a property which was being decremented in a loop. Although many students \nunderstood and explained properly the code they failed to mention state and for assessment purposes were \ngiven a rating of 5 (not knowledgeable). 30 25 The second question was about inheritance with particular \nreference to the wind-up toy/duck exercise where the toy was programmed but the child of the toy, the \nduck, was tested. As part of the criteria for successfully responding, the student was required to discuss \nthe inheritance of both methods and properties. If the student omitted one or the other, they were given \na 2 rating instead of 1. The two students given ratings of 3 were because of confusion in their writing \nwhich made it unclear whether the concept of inheritance was understood. NUMBER OF STUDENTS 20 15 10 \n5 0 NUMBER OF STUDENTS 35 30 25 20 15 10 5 0  Figure 3: Results from the second question which was evaluated \nKNOWLEDGEABLE NOT KNOWLEDGEABLE Figure 5: Results from the fourth question which was evaluated according \nto demonstration of knowledge of state.  4. DISCUSSION In a previous study [3,4] Northern Illinois \nUniversity students were asked to write essays about an OO topic of their choice and relate it to MOO \nexercises similar to those that were conducted in the studies reported here. The same type of rating \nsystem as was used to evaluate the students demonstration of their knowledge via their essays. More students \nscored in the not knowledgeable range (30) than those in the knowledgeable range (23). This is in contrast \nto the results of the studies reported here where no students scored in the not knowledgeable according \nto demonstration of knowledge of inheritance. range (Figure 2). In the previous studies it was suggested \nthat more class time be given to discussion of the OO terminology as The third question required that \nthe student define and discuss it related to the MOO exercises. Also, it was suggested that the override \nand relate it to one of the MOO exercises. Since three students work with the MOO objects at the programming \nlevel. From these indicators we have concluded that the level of engagement in the MOO exercises reported \nhere is sufficient to impart satisfactory knowledge of the concepts of abstraction, inheritance and override. \nThe question involving the topic of state required the student to read a sequence of MOO code and relate \nthe activity executed by the code to the concept of state. The results indicated that the number of subjects \nwho showed lack of knowledge was equal to those who showed understanding (Figure 4). As mentioned earlier \nmany students discussed the function of the code and then presented no discussion of the concept of state. \nFor purposes of assessing the exercises conducted, these students were automatically given a rating of \n5 even though it was clear from their description of the code that they understood the role of the value \nof the wound property which was a control variable. Thus, while it is suspected that the way in which \nthe question was asked influenced how the students responded, the marginal results indicated that further \ndiscussion of state in the lecture portion of the class is needed. As explained earlier students enrolled \nin introductory OO courses are not equipped to demonstrate their knowledge of OO principles by writing \nprograms complex enough to reveal sufficient knowledge. From our studies we believe that in the act of \nwriting about OO principles and relating these principles to the exercises performed in the course, the \nstudents revealed clearly that the concepts were mastered. Thus we suggest that evaluation of student \nessays can serve as a means to measure teaching efficacy at the introductory level. On preliminary exposure, \nthe MOO environment appears dull and uninteresting because of its use of a command line interface and \nreliance on textual description. The magic of the system is not evident when scrutinized superficially. \nHowever, after connecting, navigating the topography, communicating with other students, and interacting \nwith the objects that are abstractions of real things, students become engaged and quickly find the MOO \nexperience enjoyable [3]. In this regard it should not be forgotten that is was only ten years ago, that \nthese environments were so compelling for students that they were causing enormous problems on college \ncampuses because the students connected to networked virtual environments were monopolizing computing \nresources [7]. In regard to the magic mentioned above, several research reports have shown that roughly \ntwo-thirds of subjects surveyed from various MOO-user groups reported experiencing a sense of being there \nor virtual presence [4, 8 ,9]. We believe it is this sense of presence that strongly contributes to making \nthe MOO experience compelling and engaging. While it was not presented as an advantage of OO programming \nin class, 51% of the responses to the first question about how OO programming works and its advantages, \nindicated that reality abstraction was an advantage of OO programming. This idea was generated from the \nstudent s experiences in the MOO. These students clearly understood the relationship between the experience \nof being in a virtual reality and the idea of modeling objects as abstractions of real world things. \nOne reason for the apparent improvement of the approach reported here over the approach reported in an \nearlier study [10], is the inclusion of the MOO programming exercises. In addition to being freely available, \nthe MOO environment also provides a robust but easy to use programming language also referred to as the \nMOO language. The language is easy to use because it is forgiving regarding its use of data types. In \nthis regard it is similar to earlier versions of Visual Basic (preceding Visual Basic.NET). Conversely, \nfrom a comparison of the MOO language selection and control structures, as well as other features, we \nbelieve the MOO language is closer to Java than Java is to Visual Basic. This makes it easier to focus \non the OO principles without the distractions from the intricacies of the language itself.  5. CONCLUSION \nWe have developed a five week program where introductory OO programming students were exposed to and \nwrote programs in an object-oriented virtual environment. With the use of a metric based on the evaluation \nof student s writing about OO topics, we have strengthened our belief that the students got it. We believe \nthat complex OO environments where students become objects (avatars) are clearly advantageous for learning \nthe fundamentals of OO programming. 6. ACKNOWLEDMENTS The authors thank Pavel Curtis and other members \nof the MOO community for the MOO server, database and other MOO\u00adrelated software. In particular, to Ken \nSchweller for the MOO TV-VCR system which was used to view the Box of Donuts tutorial which was the first \nMOO programming exercise in the program described in this paper. Also, many thanks for the generic wind-up \ntoy and respective tutorial created by yduJ (Judy Anderson; http://www-cs-students.stanford.edu/~yduj) \nat LambdaMOO (lambda.moo.mud.org 8888). The wind-up toy exercises were the second and third MOO programming \nexercises in the program described here. And finally to YIB (Elizabeth Hess) for her Pet Rock Tutorial \nwhich was used as the fourth MOO programming exercise used here. YIB also permitted the reproduction \nof portions of her manuscript entitled, Yib s Guide to MOOing: Getting the Most from Virtual Communities \non the Internet. 7. REFERENCES: [1] Curtis, P. (1992, May) Mudding: Social phenomena in text\u00adbased \nvirtual realities. Proceedings of the 1992 Conference on Directions and Implications of Advanced Computing, \nBerkeley, CA. [2] Papert, Seymour, Situating Constructionism, Constructionism, eds. Idit Harel, and Seymour \nPapert. Norwood, NJ: Ablex Publishing, 1991. [3] Towell, JF (2000) MOO: An active-learning environment \nfor teaching object-oriented concepts in business information systems curricula, Journal of Information \nSystems Education, 11(304) 147-150. [4] Towell, JF &#38; Towell, ER (2001a) Virtual Scientific Collaboration \nand Nonaka s Ba, 34th Meetings of the Hawaii International Conference on Systems Science (HICSS-34), \nJanuary 2001, Maui, Hawaii. [5] Haynes, C, &#38; Holmevik, JR High wired: On the design, use, and theory \nof educational MOOs, Ann Arbor, MI, University of Michigan Press, 1998. [6] Towell, JF &#38; Towell, \nER (2002) The Javaputer: Java Programming in a MOO, OOPSLA Meetings, November 2002, Seattle, Washington. \n[7] Evard, R. (1993, November). Collaborative networked communication: MUDS as systems tools. Proceedings \nof the Seventh Systems Administration Conference (LISA VII), pp. 1-8, Monterey, CA. [8] Towell, JF, &#38; \nTowell, ER (1997). Presence in text-based networked virtual environments or MUDS, Presence: Teleoperators \nand Virtual Environments, 6(5) 590-595 [9] Schiano, T.B. (1999) Lessons from LambdaMOO : A Social, Text-Based \nVirtual Environment Presence: Teleoperators and Virtual Environments, 8(2), 127-139 [10] Towell, JF &#38; \nTowell, ER (2001b) MOO: A Programming Environment that Promotes Feelings of Being There or Presence, \nOOPSLA Meetings, October 2001, Tampa Bay, Florida.  \n\t\t\t", "proc_id": "949344", "abstract": "A five week program which involved extensive exposure to a complex object-oriented virtual environment was evaluated for efficacy in learning fundamental object-oriented principles. Students (n=57) from two CS1 classes were asked to write essays on their knowledge of object-oriented programming concepts following their participation in the program. A systematic method for evaluating student knowledge was followed by rating the student's knowledge on a one-to-five rating scale. The results indicated that the students understood, by virtue of their ability to write intelligibly, the concepts of abstraction, inheritance and method override. Demonstrated knowledge of the concept of state was far less convincing.", "authors": [{"name": "John Towell", "author_profile_id": "81100004390", "affiliation": "Carroll College, Waukesha, WI", "person_id": "P643459", "email_address": "", "orcid_id": ""}, {"name": "Elizabeth Towell", "author_profile_id": "81100004399", "affiliation": "Carroll College, Waukesha, WI", "person_id": "PP43115042", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949392", "year": "2003", "article_id": "949392", "conference": "OOPSLA", "title": "Reality abstraction and OO pedagogy: results from 5 weeks in virtual reality", "url": "http://dl.acm.org/citation.cfm?id=949392"}