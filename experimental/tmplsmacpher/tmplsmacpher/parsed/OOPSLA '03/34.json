{"article_publication_date": "10-26-2003", "fulltext": "\n Pattern-Based Model Transformation Sheena R. Judson Computer Science Department Louisiana State University \nBaton Rouge, Louisiana USA 1-817-935-4518 judson@csc.lsu.edu ABSTRACT Model Driven Architecture (MDA), \nwhich supports the development of software-intensive systems through the transformation of models to \nexecutable components and applications, requires a standard way to express transformations. The approach \ndeveloped by this research focuses on defining pattern-based transformation at the metamodel level. This \nresearch has two primary objectives. The first objective is to support systematic application of patterns. \nThe use of patterns as model building blocks (through pattern-based transformations) helps raise the \nlevel of abstraction at which systems are developed. The second research objective is to support controlled \nmodel evolution by specifying pattern-based transformations at the metamodel level. Categories and Subject \nDescriptors D.2.2 [Software Engineering]: Design Tools and Techniques Object-oriented design methods; \nD.2.13 [Software Engineering]: Reusable Software Reuse models, Domain engineering. General Terms Design \n Keywords model transformation, model evolution, UML, design patterns, Query/Views/Transformations (QVT), \nModel Driven Architecture (MDA) 1. INTRODUCTION Since the emergence of the Model Driven Architecture \n(MDA) initiative, numerous techniques have been proposed for the transformation of models (e.g., [1, \n2]). MDA supports the development of software-intensive systems through the transformation of models \nto executable components and applications. The main motivation behind MDA is to transfer the focus of \nwork from programming to solution modeling by treating models as the primary artifacts of development. \nAs stated in [3], MDA provides a set of guidelines for structuring specifications expressed as models \nand the mappings between those models . The mappings transform the elements of a source model, which \nconforms to a particular metamodel, into elements of another model, the target model, which conforms \nto a metamodel [3]. In response to the need for a standard approach to define mapping functions that \nmap between metamodels, the Object Management Group (OMG) issued the MOF 2.0 Query/View/Transformation \nCopyright is held by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM \n1-58113-751-6/03/0010. (QVT) Request for Proposals (RFP) [3]. The principle requirement of QVT is to \nprovide a standard means for expressing transformations [4] . QVT requires that model transformations \nbe defined precisely in terms of the relationship between a source MOF metamodel and a target MOF metamodel. \nThe transformation of, and mapping between, models are the key aspects of MDA [3]. In particular, well-defined \ntransformations that support rigorous model evolution, refinement, and code generation are considered \nkey elements of an MDA approach and the QVT. This research focuses on developing a technique that supports \nrigorous modeling of pattern-based model transformations. The modeled transformations can be used as \nthe basis for developing tools that support rigorous and systematic application of reusable transformations. \n 2. GOALS The research is aligned with the goals of both MDA and QVT and centers on developing a metamodeling \napproach for describing families of transformations. Specifically it is concerned with developing Unified \nModeling Language (UML) [5] model transformations at the metamodel level. The focus is on a type of transformation \nreferred to as pattern-based model refactoring. In pattern-based refactoring, a well-defined pattern \nis incorporated into a source design model. The result is a target model that contains an instantiation \nof the pattern. Controlled model refactoring can be accomplished by developing metamodels for the transformations. \nThe metamodels can be used to constrain how the refactoring is carried out on the models and act as points \nagainst which the model-level transformations can be checked for conformance. The goals of this thesis \nare to: 1. Support the MDA goal of reducing software development time by raising the level of abstraction \nthrough the use of models and design patterns. 2. Capture transformations in a form that is reusable, \nwhich can lead to the development of tools that support controlled evolution of models (with respect \nto the reusable transformations) at the metamodel level.  3. METAMODELING APPROACH Figure 1 provides \na diagrammatical overview of the transformation approach that will be the base of this research. The \nM2 level, an extension of the UML metamodel level (M2), supports metamodeling of transformations. The \nM1 level, an extension of the UML model level (M1), supports representation of model transformations. \nA model transformation, T1, at the M1 level takes a source UML model and transforms it to a target UML \nmodel. T1, which is denoted using a notation adopted from [6], is a member of the family of transformations \ncharacterized at the metamodel level by Transformation Pattern. A transformation pattern consists of \ncharacterizations of source and target models (Source Pattern and Target Pattern, respectively) and constraints \non relationships between source and target elements. The Source Pattern is a metamodel that characterizes \nsource UML models and the Target Pattern is a metamodel that characterizes target models for the family \nof transformations characterized by Transformation Pattern. A transformation (e.g., T1) conforms to a \ntransformation pattern if: (1) the source model (Source Model) is an instantiation of the source pattern \n(Source Pattern), (2) the target model (Target Model) is an instantiation of the target pattern (Target \nPattern), and (3) the relationship between elements of source and target models satisfy the constraints \nspecified by the transformation pattern. A UML model that conforms to a source or target pattern metamodel \nis said to be an instance of the source or target pattern. Similarly, a model transformation that conforms \nto a transformation pattern is said to be an instance of the transformation pattern. The transformation \npattern developed by this research consists of three parts: Source Pattern, Transformation Schema, and \nTransformation Constraint. transformation Figure 1. Transformation Overview. The source pattern defines \nthe set of source models to which transformations characterized by the transformation pattern can be \napplied. The pattern is expressed as a metamodel fragment that consists of classes characterizing model \nelements that are affected by the transformations. Each of the classes in the source pattern are specializations \n(subclasses) of classes in the UML metamodel. The source pattern thus determines a specialized UML metamodel \nfor static structures. The transformation schema shows the classes of model elements that are created \nby the transformations and the classes of source model elements that the transformations remove by conforming \ntransformations. The classes in a transformation schema are specializations of UML metamodel classes. \nThe schema is expressed as a metamodel fragment in which the classes of new model elements are enclosed \nin dashed boxes and classes of deleted source model elements are marked with an X. The transformation \nschema determines the basic structure of the target model. The transformation constraint determines the \nrelationships that must hold between target and source model elements. It is expressed as object structures, \nwhere the objects are prototypical instances of classes in the source pattern and the transformation \nschema (i.e., the objects are prototypical representations of UML model elements). The object structures \ndescribe transformation constraints in terms of relationships that must hold between elements of the \nsource and target models. 4. STATUS AND FUTURE RESEARCH This research presents an approach for model \ntransformations that focuses on defining pattern-based transformations at the metamodel level. These \npattern-based transformations are defined declaratively using the metamodel. We have applied the previously \ndescribed approach to the Abstract Factory (AF) design pattern. As a result, AF transformation patterns \nhave been developed for UML class and interaction design models. For both transformation patterns, the \nconstraints are expressed both diagrammatically and through the use of the Object Constraint Language \n(OCL). We plan to apply our approach to other design patterns and UML models. Future work includes the \ndevelopment of a technique for obtaining model level transformations from the metamodel characterizations. \nCurrently, we are investigating whether the approach can be used to derive a SMW (Software Modeling Workbench) \n[7] transformation from a transformation pattern. Our goal is to show that the transformations conform \nto the UML metamodel through the use of the SMW transformation language. In addition, we are developing \na formal basis for model transformations. That is, we develop a formal basis for the metamodel descriptions \nand model level transformations so that one can establish that model level transformations conform to \ntransformation specifications at the metal model level. With the continued development of our model transformation \napproach, we hope to complete this work by May 2004. 5. REFERENCES [1] Song, E., R. B. France, D. K. \nKim, and S. Ghosh. Using Roles for Pattern-based Model Refactoring. in Proceedings of the Workshop on \nCritical Systems Development with UML (CSDUML'02). 2002. [2] Akehurst, David and Stuart Kent. A Relational \nApproach to Defining Transformations in a Metamodel. in UML 2002 -The Unified Modeling Language: Model \nEngineering, Concepts, and Tools. Springer, October 2002. [3] Object Management Group. Request for Proposal: \nMOF 2.0 Query / View / Transformations RFP. OMG 2002. http://www.omg.org/docs/ad/02-04-10.pdf. [4] QVT \nPartners. QVT: The high level scope. QVT-Partners, 2003. http://qvtp.org/downloads/qvtscope.pdf. [5] \nObject Management Group, UML 2.0 Superstructure Final Adopted Specification. OMG 2003. http://www.omg.org/cgi\u00adbin/doc?ptc/2003-08-02. \n[6] QVT Partners. Initial Submission for MOF 2.0 Query/View/Transformations RFP. QVT-Partners, 2003. \nhttp://qvtp.org/downloads/1.0/qvtpartners1.0.pdf. [7] Porres, Ivan. A Toolkit for Manipulating UML Models, \nTUCS Technical Report No. 441. Turku Center for Computer Science, \u00c5bo Akademi University, January 2002. \nhttp://www.tucs.fi/Research/Series/index.php.  \n\t\t\t", "proc_id": "949344", "abstract": "Model Driven Architecture (MDA), which supports the development of software-intensive systems through the transformation of models to executable components and applications, requires a standard way to express transformations. The approach developed by this research focuses on defining pattern-based transformation at the metamodel level. This research has two primary objectives. The first objective is to support systematic application of patterns. The use of patterns as model building blocks (through pattern-based transformations) helps raise the level of abstraction at which systems are developed. The second research objective is to support controlled model evolution by specifying pattern-based transformations at the metamodel level.", "authors": [{"name": "Sheena R. Judson", "author_profile_id": "81100318723", "affiliation": "Louisiana State University, Baton Rouge, LA", "person_id": "P643488", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949382", "year": "2003", "article_id": "949382", "conference": "OOPSLA", "title": "Pattern-based model transformation", "url": "http://dl.acm.org/citation.cfm?id=949382"}