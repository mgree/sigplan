{"article_publication_date": "10-26-2003", "fulltext": "\n Automated Impact Analysis of Object-Oriented Software Systems Michael A. Hoffman, Ph.D. Department \nof Computer Engineering and Computer Science California State University Long Beach hoffman@cecs.csulb.edu \n Categories and Subject Descriptors D.2.5 [Software Engineering]: Testing and Debugging diagnostics, \ntesting tools D.3.3 [Programming Languages]: Language Contructs and Features abstract data types, classes \nand objects, inheritance, polymorphism General Terms Management, Measurement, Design, Languages  Keywords \nObject-oriented software maintenance, object-oriented impact analysis, object-oriented CASE tools 1. \nINTRODUCTION Object-Oriented (OO) systems are difficult to understand due to the complex nature of the \nrelationships that object-orientation supports. Inheritance, polymorphism, encapsulation, information \nhiding, aggregation, and association combine to make maintenance of OO systems difficult. Due to the \npresence of these characteristics in OO systems, maintenance activities on OO systems often have unexpected \nor unseen effects on the system. These effects can ripple through system components, complicating maintenance \nand testing of the system. The ability to trace the effects of maintenance provides the maintainer with \nknowledge that assists in debugging and testing modified and affected components. 2. MODELLING OO RELATIONSHIPS \nComparative Software Maintenance (CSM) [2] is a methodology that models OO software relationships. It \nlocates changes made to an OO software system as a result of maintenance, and predicts or determines \nthe affects produced by the changes, facilitating testing of the OO system by locating affected components. \nCSM is a multi-stage maintenance methodology that encompasses the following: determines OO system components \n classes, methods and objects, and interactions such as aggregation, inheritance and uses Copyright is \nheld by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. \n models system components in the Extended Low-Level Software Architecture (ELLSA) for the OO systems \n[1]  creates virtual software systems for use in Predictive Impact Analysis (PIA) [1]  compares ELLSA \nmodel structures for both PIA and Comparative Impact Analysis (CIA) in order to determine which components \nwill be or have been affected by changes to the OO software system  instruments source code for testing \nexecution coverage and tracking dynamic execution data  Figure 1 shows an overview of CSM. CSM performs \nstatic and dynamic analysis of OO software systems. CSM discovers relationships such as aggregation, \ninheritance, association and polymorphism, and other OO characteristics. Each component (class, method, \nobject) is modeled in a descriptor. All of the descriptors for the whole system present its interactions \nand relationships in a unified model. CSM performs detailed change analysis of OO software systems. The \nresult of change analysis is the basis of the impact analysis performed by CSM. CSM helps automate the \ntesting process by automatic instrumentation of modified source code and test coverage tracking. Automation \nof the CSM process for Java software systems is embodied in JFlex.  3. JFLEX JFlex is written in C++ \nusing Microsoft Foundation Classes in Visual C++. JFlex runs in the Microsoft Windows XP/NT environments. \nIt is composed of 25 classes and, with the exception of the parsing functions, adheres to OO design principles \nthroughout. (The parser was generated by lex/yacc software as procedural code.)  Figure 2 JFlex Screen \n[2] JFlex allows the maintainer to assemble projects that contain any number of Java source code files. \nJFlex scans the source code looking for class, method and object declarations. This data is then compiled \ninto an ELLSA which models the system in terms of classes, methods and objects. The ELLSA contains data \non inheritance, aggregation, association, and called by relationships, and data on data members, methods, \nfile locations, and other data dependencies. The ELLSA may be stored for later use. Next, maintainers \ncan use JFlex to ask \"what if\" questions about modifications to the Java system. This is PIA. JFlex creates \na \"virtual\" Java system, a duplicate of the original system. The maintainer can, for example, ask which \nclasses will be effected by deleting a method from a class. JFlex can help predict impacts and ripple \neffects to the system by examining its ELLSA. JFlex also allows the maintainer to compare two versions \nof the same software system to determine which components have be changed since the previous ELLSA snapshot \nwas taken and which components have been impacted by those changes. Figure 2 presents a screen shot of \nJFlex in ELLSA display mode. The left pane is the ELLSA. Each component of the software system is presented \nalong with its relationships, interactions, and attributes (data members, parameters, and so on.) Future \nplans include using the ELLSA and JFlex to automate maintenance documents to reflect changes to software \nsystems.  4. REFERENCES [1] Hoffman, Michael A. and Carver, Doris. Predictive Impact Analysis. Proceedings \nof 2000 Conference on Software Engineering. and Knowledge Engineering, pp. 111-116, 2000. [2] Hoffman, \nMichael A. A Methodology to Support the Maintenance of Object-Oriented Software Systems Using Impact \nAnalysis. Doctoral dissertation, Louisiana State University, 2000.  \n\t\t\t", "proc_id": "949344", "abstract": "", "authors": [{"name": "Michael A. Hoffman", "author_profile_id": "81339504684", "affiliation": "California State University Long Beach", "person_id": "P643475", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949355", "year": "2003", "article_id": "949355", "conference": "OOPSLA", "title": "Automated impact analysis of object-oriented software systems", "url": "http://dl.acm.org/citation.cfm?id=949355"}