{"article_publication_date": "10-26-2003", "fulltext": "\n Dynamic Personal Roles For Ubiquitous Computing Robert E. McGrath Department of Computer Science Digital \nComputer Laboratory University of Illinois, Urbana-Champaign +1 (217) 333-6549 mcgrath@cs.uiuc.edu M. \nDennis Mickunas Department of Computer Science Digital Computer Laboratory University of Illinois, Urbana-Champaign \n+1 (217) 333-6351  mickunas@cs.uiuc.edu ABSTRACT This paper presents doctoral research on a key problem \nfor ubiquitous computing: implementation of representatives for physical objects, particularly people. \nThis poster outlines an approach to implementing dynamic personal roles suitable for a ubiquitous computing \nenvironment. Categories and Subject Descriptors D.3.3 [Programming Languages]: Language Contructs and \nFeatures classes and objects, frameworks, patterns D.4.7 [Operating Systems]: Organization and Design \ndistributed systems, interactive systems  General Terms Design, Languages  Keywords Post-object programming, \nroles, ubiquitous computing. 1. INTRODUCTION One critical challenge in the development of pervasive \nand ubiquitous computing is the incorporation of representatives of physical objects within software \nsystems, including the especially important class: people. A person participates in a ubicomp system \nin a variety of ways; as an active participant, as an object, and as an important part of the environment \n(context) of applications. Furthermore, a single person plays many roles in the system, each role represents \na particular interface to or view of the person. This study is investigating how to implement a Person \nobject with dynamic Personal Roles, in a Pervasive Computing Environment, such as GAIA [15]. A Person \nobject with dynamic roles is an instance of the more general problem of persistent objects with dynamic \ninterfaces, behavior, and multiple views. The novel contribution of this study is to integrate work from \naccess control models (e.g., [2]), database design (e.g., [1, 8, 14]), intelligent agent systems [4, \n9, 10] and Object-Oriented models [3, 7, 11] to design a more complete solution. [12] gives a more complete \nreview of the literature. Copyright is held by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, \nCalifornia, USA. ACM 1-58113-751-6/03/0010.  1.1 Scenario An example scenario of multiple roles is a \nUniversity Library. While using the Library, people adopt the role of Patron, which entails credentials \n(a library card ) and a context, including recent searches, currently charged materials, and so on. This \nrole is deactivated when not using the library, and reactivated each visit. The person has many other \nroles simultaneously, such as Professor, which may be active while she is using the library. The basic \nprinciple is that activating the Patron role is the necessary and sufficient condition for the person \nto use the library services. There can be many hierarchies of Roles; in general, every application domain \nmay have its own set of roles for people. So the set of potential roles is large and open. A Person can \nplay roles from many different hierarchies simultaneously, requiring the dynamic composition of roles, \npossibly from different hierarchies. Figure 1 shows a sketch of a model of a person with several roles \n(see [12]). Figure 1 The important characteristics of dynamic personal roles are: A Role is an interface \nto a Person.  A Role is both acted on by and acts for the Person.  Roles are related to each other. \n The set of roles is large and open.  A person uses many roles simultaneously.  Roles are persistent. \n Roles are activated and deactivated.  There are conditions and dependencies between roles.   2. \nAnalysis: Problems to Solve Design and implementation of dynamic personal roles requires solutions to \nmany significant problems. This study will consider five related issues, described in more detail in \n[12]. 2.1 Role Classification and Relationships One important aspect of roles is to function as classifications, \nas in Role-Based Access Control (RBAC) [2]. A simple, extensible, model of roles as classes can be implemented \nusing Semantic Web technology, as in [13]. 2.2 Role Interfaces Role interfaces can be implemented by \nlanguage constructs such as C++ abstract classes or Java Interfaces. A mechanism similar to a database \nschema language is valuable for clearly defining the relationships among roles: what is inherited, introduced, \nor renamed by each role (e.g., [1]). 2.3 Adopting and Dropping Roles In addition to the hierarchy of \npossible roles, each person has a collection of current roles . When a role is adopted, it must be checked \nfor consistency with other roles, and added to the set according to constraints. Dropping roles requires \nrechecking the collection of active roles, to remove and revise any dependencies. This dynamic reconfiguration \nmight be implemented within a framework such as [16]. 2.4 Activation/Deactivation The role specific \nstate and methods operate as a persistent object, which should be activated in the intended context, \nand deactivated outside that context. This can be implemented with a persistent object store. 2.5 Object \nIdentity Method Invocation The Person object plus current roles form a virtual object ([1]) or subject \n([5]), There are many challenging problems including: Identity of the person-with-roles  Dynamic dispatch \nof methods depending on the role context and current roles  Programming language support to define method \nweaving (e.g., [6]) and dynamic reconfiguration of object behavior (e.g., [16]).   3. Approach to Solution \nThis is work in part of ongoing dissertation research. The overall goal is to integrate several technologies \nto create a language and environment that implement dynamic roles, building on the infrastructure provided \nby the GAIA middleware [15]. The complete implementation will require a model and language to define \nthe different aspects of roles discussed here, along with tools to specify role classifications, to generate \ninterface code, and to implement the dynamic behavior of roles and method dispatch. 4. ACKNOWLEDGMENTS \nThis research is supported in part by the National Science Foundation grant NSF 98-70736, NSF 9970139, \nand NSF infrastructure grant NSF EIA 99-72884.  5. REFERENCES [1] Albano, A., Antognoni, G., and Fhelli, \nG. View Operations On Objects with Roles for a Statically Typed Database Language. IEEE Transactions \non Knowledge and Data Engineering 12 (4), 548-566, 2000. [2] Bacon, J., Moody, K., and Yao, W. A Model \nof OASIS Role-Based Access Control and Its Support for Active Security. ACM Transactions on Information \nand System Security 5 (4), 492-540, 2002. [3] B\u00e4umer, D., Riehle, D., Siberski, W., and Wolf, M. The \nRole Object Pattern. PLoP'97 (Monticello, 1997) [4] Castelfranchi, C. Engineering Social Order. Engineering \nSocieties in the Agents' World 2000 (Berlin, 2000), Springer-Verlag 1-18. [5] Clarke, S., Harrison, W., \nOssher, H., and Tarr, P. Subject-Oriented Design: Towards Improved Alignment of Requirements, Design, \nand Code. OOPSLA'99 (Denver, 1999), ACM Press 325-339. [6] Constantinides, C.A., Bader, A., Elrad, T.H., \nFayad, M.E., and Netinant, P. Designing an Aspect-Oriented Framework in an Object-Oriented Environment. \nACM Computing Surveys 32 (1es), 2000. [7] Fowler, M. Dealing with Roles. PLoP'97 (Monticello, 1997) [8] \nGhelli, G. Foundations for Extensible Objects with Roles. Information and Computation 175, 50-75, 2002. \n[9] Hilaire, V., Koukam, A., and Gruer, P. A Mechanism for Dynamic Role Playing. Agent Technology Workshops \n2002 (Erfurt, October 7-10 2003), Springer Verlag 36-48. [10] Kendall, E.A. Role Modeling for Agent System \nAnalysis, Design, and Implementation. IEEE Concurrency 8 (2), 34\u00ad41, 2000. [11] Kristensen, B.B. and \nOsterbye, K. Roles: Conceptual Abstraction Theory &#38; Practical Language Issues. Theory and Practice \nof Object Systems 2 (3), 143-160, 1996. [12] McGrath, R.E. and Mickunas, M.D. Dynamic Roles: Organizing \nSoftware Representatives for People. Department of Computer Science, Urbana, UIUCDCS-R\u00ad2003-2355 UILU-ENG-2003-1742, \nJuly 2003. [13] Ranganathan, A., McGrath, R.E., Campbell, R., and Mickunas, M.D. Ontologies in a Pervasive \nComputing Environment. Workshop on Ontologies in Distributed Systems at IJCAI (Acapulco, 2003) [14] Reenskaug, \nT. Working with objects: A three model architecture for the analysis of information systems. Journal \nof Object Oriented Programming 10 (2), 22-30, 1997. [15] Roman, M., Hess, C.K., Cerqueira, R., Ranganathan, \nA., Campbell, R.H., and Nahrstedt, K. GAIA: A Middleware Infrastructure to Enable Active Spaces. IEEE \nPervasive Computing 1 (4), 74-83, 2002. [16] Yoder, J.W. and Johnson, R. The Adaptive Object-Model Architectural \nStyle. Working IEEE/IFIP Conference on Software Architecture (WICSA) (Montreal, August 25-31 2002)  \n\t\t\t", "proc_id": "949344", "abstract": "This paper presents doctoral research on a key problem for ubiquitous computing: implementation of representatives for physical objects, particularly people. This poster outlines an approach to implementing dynamic personal roles suitable for a ubiquitous computing environment.", "authors": [{"name": "Robert E. McGrath", "author_profile_id": "81100249688", "affiliation": "University of Illinois, Urbana-Champaign", "person_id": "P245785", "email_address": "", "orcid_id": ""}, {"name": "M. Dennis Mickunas", "author_profile_id": "81100040027", "affiliation": "University of Illinois, Urbana-Champaign", "person_id": "PP39024421", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949420", "year": "2003", "article_id": "949420", "conference": "OOPSLA", "title": "Dynamic personal roles for ubiquitous computing", "url": "http://dl.acm.org/citation.cfm?id=949420"}