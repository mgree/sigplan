{"article_publication_date": "10-26-2003", "fulltext": "\n Engineering and Reusing Stable Atomic Knowledge (SAK) Patterns Haitham Hamza Mohamed E. Fayad Computer \nScience&#38; Engineering Dept. University of Nebraska-Lincoln Lincoln NE 68588, USA hhamza@cse.unl.edu \n ABSTRACT Reusing domain-independent knowledge might be hindered if such knowledge is presented as an \nintegral part of domain specific components. This poster presents the concept of Stable Atomic Knowledge \n(SAK) patterns. A SAK pattern presents a domain\u00adindependent knowledge in such a way that makes this knowledge \nreusable whenever it is needed. Categories and Subject Descriptors D.2.13 [Software Engineering]: Reusable \nSoftware reusable models.  General Terms: Design Keywords: Stable Analysis Patterns, Software Stability \nModel, Enduring Business Themes, and Business Objects. 1. INTRODUCTION Knowledge artifacts can be broadly \nclassified into two main categories: domain-specific and domain-independent knowledge. Domain-specific \nknowledge artifacts present the knowledge of notions and concepts that are tied to a specific domain. \nConversely, domain-independent knowledge artifacts encapsulate the knowledge of notions that are not \ntied to specific domains and, hence, can be reused to model the same notions wherever these notions appear. \nContemporary reusable artifacts, whether they are models, components, or patterns, are usually developed \nfor specific domains. Thus, they encapsulate a fusion of both domain-specific and domain-independent \nknowledge. This makes it difficult to reuse domain-independent knowledge across domains. In this poster \nwe address the problem of reusing domain\u00adindependent knowledge across domains. In particular, we provide \na new class of stable patterns, called Stable Atomic Knowledge (SAK) patterns that can be used to enable \nknowledge reuse across domains. A brief background of these concepts is provided in the next section. \nThe idea of atomizing knowledge into small reusable components has been addressed in [1]. In [1], the \nconcept of Knowledge CenterTM is introduced. A Knowledge CenterTM is a network of nodes and relationships \nthat contains all the knowledge in a particular system. Each node Computer Engineering Dept. San Jos\u00e9 \nState University, San Jos\u00e9, CA 95192, USA m.fayad@sjsu.edu stories a small component that represents \na useful concept or idea. Each system has its own unique network of nodes that are related to the nature \nof the project. This work does not address the idea of building knowledge components that can be used \nacross domains. Instead, it focuses in small scale knowledge elements (e.g. class attributes), which \ncan be reused within a specific project. 2. SOFTWARE STABILITY AND STABLE PATTERNS: AN OVERVIEW Software \nstability approach [10] is a layered approach for developing software systems. In this approach, the \nclasses of the system are classified into three layers: the Enduring Business Themes (EBTs) layer, the \nBusiness Objects (BOs) layer, and the Industrial Objects (IOs) layer. EBTs are the classes that present \nthe basic knowledge of the underlying industry or business. BOs are the classes that map the EBTs of \nthe system into more concrete objects. IOs are the classes that map the BOs of the system into physical \nobjects. The practitioner should consult [10], [3], [4] for heuristics to help identify EBTs, BOs, and \nIOs, and [12], [7], and [5] for examples of using these concepts. Stable analysis pattern introduced \nin [2]-[4], is a new approach for developing patterns by utilizing software stability concepts. Based \non the number of EBTs they embody; stable patterns can be broadly classified into two main categories: \nstable architectural patterns, and stable atomic knowledge (SAK) patterns. An architectural pattern should \ncontain more than one EBT, whereas SAK pattern should contain one EBT.  3. SAK PATTERNS CONCEPT AND \nPROPERTIES A SAK pattern should satisfy the following essential properties: 1) Focus: A SAK pattern is \nnot intended to represent a model for a complete system or combined problems; rather it focuses on a \nspecific and well-defined problem that commonly appears within larger problems. 2) Stable: stability \ninfluences pattern reusability. Because they consist of the EBTs and BOs of the problem they model SAK \npatterns inherent the stability features of these two artifacts. 3) Natural: SAK patterns are indented \nto be used in a broad range of applications, and by different domain expertise. Therefore, it is essential \nthat a SAK pattern is presented and described in a simple and natural language than can reflect the knowledge \nit embodies. Copyright is held by the author/owner(s). 4) Domain-independent: From the definition of \nSAK patterns, OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. they should model domain-independent \nrecurring problems. ACM 1-58113-751-6/03/0010. 5) Abstract: To accomplish the adequate level of generality, \na SAK pattern should be put in an appropriate level of abstraction. 6) Easy to use: As any other reusable \ncomponents, SAK patterns should be developed and presented in such a way that makes them easy to understand \nand use. 7) Single EBT: Constraining the number of EBTs to one helps in focusing on a single problem. \nMultiple EBTs indicates several problems.  4. ENGINEERING SAK PATTERNS The development process of a \nSAK pattern consists of four main phases. In the first phase, the problem is clearly identified. The \nultimate output of this phase is a well-defined problem with clear boundary. The second phase deals with \nthe identification of the EBT in the problem and its BOs. Practical experience shows that coming up with \nthis single EBT needs several iterations [7]. In the third phase, the relationships (associations, aggregation, \ninheritance, etc.) that depict the interaction between the different elements of the model, along with \nthe roles and multiplicity on each relationship should be defined. Phase four is concerned with the verification \nissue for the developed SAK pattern. The main objective of this phase is to validate the constructed \nSAK patterns to ensure that it is satisfies the essential properties discussed in the previous section. \nThe high-level engineering process is shown in Figure 1. The solid lines indicate the normal directions \nof the construction process, whereas the dotted lines represent the iterative directions of the process. \nPhase-1 Define the problem  Figure 1. High-level steps of developing SAK Patterns. Figure 2 shows the \nAnyParty pattern as an example of the SAK patterns. The objective of this pattern is to provide a generic \nmodel that captures the core knowledge for any party. The prefix Any is used as an indicator for the \ngenerality of the class and its ability to virtually present any kind of parties. Applications for this \nSAK can be found in [6]. Figure 2. AnyParty SAK pattern 5. REFERENCES [1] Cagito, Inc. Concept Summary: \nAtomic Knowledge. Available: http://www.cogitoinc.com [2] Hamza, H. A foundation for building stable \nanalysis patterns. M.S. thesis, Dept. Computer Science, University of Nebraska-Lincoln, Lincoln, NE 2002. \n[3] Hamza, H. Building Stable Analysis Patterns Using Software Stability. 4th European GCSE Young Researchers \nWorkshop 2002 (GCSE/NoDE YRW 2002), Erfurt, Germany, October 2002. [4] Hamza, H. Hamza, and Fayad, M.E. \nModel-based Software Reuse Using Stable Analysis Patterns. ECOOP 2002, Workshop on Model-based Software \nReuse, Malaga, Spain, June 2002. [5] Hamza, H., and Fayad, M.E. A Pattern Language for Building Stable \nAnalysis Patterns. 9th Conference on Pattern Language of Programs (PLoP 02), Illinois, USA, September \n2002. [6] Hamza, H., and Fayad. M.E. The Negotiation Analysis Patterns. 8th European Conference on Pattern \nLanguages of Programs (EuroPLoP 03), Irsee, Germany, June 2003. [7] Fayad, M. E. , and Altman, A. Introduction \nto Software Stability. Communications of the ACM, Vol. 44, No. 9, Sept. 2001. [8] Fayad, M. E. Accomplishing \nSoftware Stability. Communications of the ACM, Vol. 45, No. 1, January 2002. [9] Fayad, M. E. How to \nDeal with Software Stability. Communications of the ACM, Vol. 45, No. 4, April 2002.  \n\t\t\t", "proc_id": "949344", "abstract": "Reusing domain-independent knowledge might be hindered if such knowledge is presented as an integral part of domain specific components. This poster presents the concept of Stable Atomic Knowledge (SAK) patterns. A SAK pattern presents a domain-independent knowledge in such a way that makes this knowledge reusable whenever it is needed.", "authors": [{"name": "Haitham Hamza", "author_profile_id": "81100308956", "affiliation": "University of Nebraska-Lincoln, Lincoln, NE", "person_id": "P643450", "email_address": "", "orcid_id": ""}, {"name": "Mohamed E. Fayad", "author_profile_id": "81339498936", "affiliation": "San Jos&#233; State University, San Jos&#233;, CA", "person_id": "PP43122399", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949426", "year": "2003", "article_id": "949426", "conference": "OOPSLA", "title": "Engineering and reusing stable atomic knowledge (SAK) patterns", "url": "http://dl.acm.org/citation.cfm?id=949426"}