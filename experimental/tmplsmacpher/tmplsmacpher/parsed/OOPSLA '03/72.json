{"article_publication_date": "10-26-2003", "fulltext": "\n MAS-ML: A Multi-Agent System Modeling Language Viviane Torres da Silva Carlos J. P. de Lucena Pontifical \nCatholic University of Rio de Janeiro (PUC-Rio), Computer Science Department/TecComm Group Rua Marques \nde S\u00e3o Vicente, 225, Rio de Janeiro, RJ, Brazil 22.453-900 {viviane, lucena}@inf.puc-rio.br ABSTRACT \nA multi-agent system modeling language (MAS-ML) that extends the UML (Unified Modeling Language) is proposed \nhere based on a conceptual framework (metamodel) called TAO (Taming Agents and Objects). The most important \ndifference between our approach and others presented in the literature is our clear definition and representation \nof the abstractions and behavioral features that compose MASs.  Categories and Subject Descriptors D.2[Software \nEngineering]: Design representation. General Terms Design, Languages  Keywords Modeling language, \nmulti-agent system, conceptual framework 1. INTRODUCTION Multi-agent systems (MASs) are gaining wide \nacceptance in both industry and academia as a powerful paradigm for designing and developing software \nsystems [1]. Together with this growth, new methodologies, methods, modeling languages, development platforms, \ntools and programming languages are being proposed. Agent-based systems require adequate techniques that \nexplore their benefits and their peculiar characteristics. In particular, there is a need for modeling \nlanguages for multi\u00adagent systems that explore the use of agents and other abstractions as first order \nmodeling elements. Modeling languages should represent the static and dynamic aspects of such systems \nby expressing the characteristics of all essential elements of MASs. Some modeling languages proposed \nin the literature such as [2,6] are based on the UML in order to reduce the risk of adopting a new technology. \nThe UML is used as a basis for extension because it is widely accepted as a de facto standard for object\u00adoriented \nmodeling; whereas we believe, as in [2], that a new modeling language preferably should be an incremental \nextension of a known and trusted modeling language. Nevertheless, in its original form UML provides insufficient \nsupport for modeling MASs. Among other things, the UML metamodel does not provide support for modeling \nagents, organizations and agent roles. Current approaches [2,6] propose to extend the UML by expressing \nagents as a stereotype of objects/classes. This is not satisfactory because stereotypes can only be used \nto indicate a difference in meaning or usage between two model elements with identical structure. Based \non the definition presented in the UML specification [5], stereotypes may not be used to represent two \ncompletely different paradigms. As a consequence, the current Copyright is held by the author/owner(s). \nOOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. UML extensions \nto deal with the fundamental MAS characteristics neither define nor clearly represent the elements they \nidentify, nor their relationships. Therefore, we felt the need for a new approach to extend the UML metamodel \nso that it could incorporate all features of multi-agent systems. Our aim is to provide a multi-agent \nsystem modeling language that encompasses the essential static and dynamic aspects of MASs by emphasizing \na clear representation for their concepts and relationships. Due to the non-existence of a set of commonly \naccepted abstractions to describe the static and dynamic aspects of MASs we have developed a conceptual \nframework (metamodel) that expresses most aspects of MASs. The TAO (Taming Agents and Objects) [3] provides \nan ontology that associates well accepted abstractions, such as objects and classes, to other abstractions, \nsuch as agents, roles and organizations, which together establish the foundation for agent and object-based \nsoftware engineering. We propose a multi-agent system modeling language (MAS-ML) [4] that extends the \nUML based on TAO. To extend the UML metamodel according to the TAO metamodel concepts, we needed more \nthan the three extensions mechanisms provided by the UML, namely: tag definitions, constraints and stereotypes. \nOften it was necessary to add new metaclasses to the UML metamodel to represent some new MAS concepts. \n 2. TAO In order to understand the difference between MASs and object\u00adoriented systems and to provide \nfoundations to better understand and define MAS elements, we have proposed the TAO framework. TAO is \nan evolving innovative conceptual framework based on agent and object abstractions, which are the foundations \nfor modeling distributed software systems. The TAO metamodel [3] defines the static and dynamic aspects \nof MASs. The static aspects are related to the definition of the entities (structural and behavioral \nfeatures) and the relationships between them. The entities defined in TAO are object, agent, organization, \nrole (agent role and object role), environment and event. The relationships link two elements and describe \nhow these elements are related to each other. The relationships defined in TAO are inhabit, ownership, \nplay, control, dependency, association, aggregation and specialization. The dynamic aspects of the TAO \nmetamodel describe the interactions between its static elements. They can be classified as primitive \n(elementary) dynamic processes and high-level dynamic processes. Primitive processes describe the most \nbasic domain\u00adindependent interactions that exist between elements. The processes of creating and destroying \nMAS elements are characterized as primitive processes. High-level dynamic processes are more complex \ndomain-independent behavior that are described based on primitive dynamic processes and other high-level \ndynamic processes.  3. MAS-ML Our purpose is to extend the UML metamodel to incorporate concepts related \nto the MAS theory. TAO defines three main concepts entities, properties (structural and behavioral features) \nand relationships that have been mapped to the UML metamodel. In order to extend UML according to TAO \nnon-object concepts, new metaclasses and stereotypes have been created and associated with the UML metamodel \n(Figure 1). When introducing new abstraction in the UML metamodel, it is necessary to create new diagram \nelements to represent the new elements and relationships. Because of the set of different elements and \nrelationships defined in the TAO metamodel that have been incorporated in the UML metamodel, new diagrams \n Organization and Role Diagram have been created and UML diagrams that already exist Class and Sequence \nDiagram have been adapted. The three structure diagrams Class, Organization and Role diagrams show \nall elements and all relationships defined in TAO. The Sequence diagram represents the dynamic interaction \nbetween the elements that compose a MAS i.e., between objects, agents, organizations and environments. \nThe extended class diagram also represents the agents, organizations and the relationships between agents, \norganizations and classes as defined in TAO. The Organization Diagram (Figure 2) models the system organizations \nidentifying their habitats, the roles that they define and the elements that play these roles. This diagram \nshows the TAO s ownership, play and inhabit relationships. The Role Diagram (Figure 3) is responsible \nfor clarifying the relationships between the agent roles and object roles. This diagram shows the TAO \ns control, dependency, association, aggregation and specialization relationships. Figure 1 MAS-ML metamodel \nSimilar to the notation that defines a class in the UML, the new diagram elements are composed of three \ncompartments separated by horizontal lines. All diagram elements in Figure 2 and Figure 3 were illustrated \nusing simplified representation that suppresses the middle and the bottom compartment, showing only the \ntop compartment presenting the element s class name. The organization diagram, illustrated in Figure \n2, models an example of a Store of Goods organization. This diagram shows the roles that the organization \ndefines Seller, Buyer, Market of Special Goods, Market of Used Goods, Desire and Offer the agents \nUser and Store Agent , the sub-organizations Store of Imported Goods and Store of Used Goods and the \nobject Item that may play these roles. Figure 3 illustrates the relationships between the object roles \n Desires and Offer and the agent roles defined in the organization Store of Goods.  Figure 3 - Role \ndiagram 4. SUMMARY The most important difference between our approach and others presented in the literature \nis the clear definition and representation of the elements that compose MASs and their behavior. Our \nproposal is based on a conceptual framework (TAO) that describes the structural and dynamic properties \nof MASs. The main contributions of our work can be summarized in three aspects: i) the proposal of a \nconceptual framework that defines the structural and dynamic aspects of MASs; ii) the proposal of a modeling \nlanguage that extends the UML based on the conceptual framework; and iii) the mapping of the design elements \nin the agent level of abstraction to a programming language. Software development based on agent-oriented \nparadigm depends on modeling and programming languages that provide the traceability between the design \nand the implementation code [2]. Our work includes an analysis of existing agent and object\u00adoriented \nprogramming languages to support MAS implementation.  5. REFERENCES [1] Jennings, N.: On agent-based \nsoftware engineering, In Artificial Intelligence, 2000, 11, 277-296. [2] Odell, J., Parunak, H. and Bauer, \nB.: Extending UML for Agents, In: Proceedings of the Agent-Oriented Information Systems Workshop, Odell, \nJ., et. al, Eds., 17th National Conference on Artificial Intelligence, 2000, 3-17 [3] Silva, V. et a.: \nTaming Agents and Objects in Software Engineering, In Software Engineering for Large-Scale Multi-Agent \nSystem, Garcia, A. et. al Eds., LNCS, Spring 2003. [4] Silva, V., Lucena, C.: From a Conceptual Framework \nfor Agents and Objects to a Multi-Agent System Modeling Language, Technical Report CS2003-03, School \nof Computer Science, University of Waterloo, Canada, 2003. [5] UML, Unified Modeling Language Specification, \nVersion 1.5, http://www.omg.org/uml/, 2002. [6] Wagner, G.: The Agent-Object-Relationship Metamodel, \nIn Proceedings of the 2nd International Symposium: From Agent Theory to Agent Implementation, 2000. \n \n\t\t\t", "proc_id": "949344", "abstract": "A multi-agent system modeling language (MAS-ML) that extends the UML (Unified Modeling Language) is proposed here based on a conceptual framework (metamodel) called TAO (Taming Agents and Objects). The most important difference between our approach and others presented in the literature is our clear definition and representation of the abstractions and behavioral features that compose MASs.", "authors": [{"name": "Viviane Torres da Silva", "author_profile_id": "81100631614", "affiliation": "Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, RJ, Brazil", "person_id": "P643500", "email_address": "", "orcid_id": ""}, {"name": "Carlos J. P. de Lucena", "author_profile_id": "81100226357", "affiliation": "Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, RJ, Brazil", "person_id": "PP37025365", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949424", "year": "2003", "article_id": "949424", "conference": "OOPSLA", "title": "MAS-ML: a multi-agent system modeling language", "url": "http://dl.acm.org/citation.cfm?id=949424"}