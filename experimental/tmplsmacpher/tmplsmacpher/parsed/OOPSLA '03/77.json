{"article_publication_date": "10-26-2003", "fulltext": "\n Model Driven Architecture Development Approach for Pervasive Computing Kai Hemme-Unger Thomas Flor \nGabriel V\u00f6gler DaimlerChrysler AG DaimlerChrysler AG DaimlerChrysler AG P.O. Box 23 60 P.O. Box 23 60 \nP.O. Box 23 60 89013 Ulm 89013 Ulm 89013 Ulm +49-(0)7 31-5 05-24 06 +49-(0)7 31-5 05-28 59 +49-(0)7 31-5 \n05-48 70 kai.hemme-unger@web.de thomas.flor@ gabriel.voegler@ daimlerchrysler.com daimlerchrysler.com \n ABSTRACT This paper describes a model-based development approach for pervasive computing applications. \nThe key concept introduced is the use of the Model Driven Architecture (MDA) for development of system \nfamilies. Categories and Subject Descriptors D.2.13 [Software Engineering]: Reusable Software - domain \nengineering; D.2.9 [Software Engineering]: Management productivity, life cycle. General Terms Design \n Keywords Component Composition, Generic Modeling, MDA, Model Driven Architecture 1. INTRODUCTION Pervasive \ncomputing applications are the link between existing business services and client devices with differing \ncharacteristics and features. The notion of having data and processes accessible anywhere and anytime \nenforces the ability to quickly and efficiently adapt existing applications to new devices and applications. \nWe consider a model-based development approach to be most suitable for this purpose. 2. DEVELOPMENT \nCONCEPT 2.1. Requirements The vision of pervasive requires new approaches for software engineering. In \nparticular, an important economic requirement is the conservation of value of existing IT investment \nas well as technical requirements such as scalability and adaptability. In the respective project, platform \nindependence is a requirement of subordinate priority. 2.2. Architectural Design In order to conserve \nexisting IT investment, we add an overlaying Pervasive Service Layer to the existing architectural layers. \nIt Copyright is held by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. \nACM 1-58113-751-6/03/0010. serves as a component-based run-time environment to facilitate future changes. \nOur goal is to devise a model-integrated application development approach to ensure greatest possible \nefficiency. 2.3. Model Driven Architecture The Object Management Group s (OMG) Model Driven Architecture \n(MDA) emphasizes the importance of modeling for software development. The dedicated objective of the \nMDA is to support platform-independent application development. Therefore, models of two different abstraction \nlevels are created, more specifically, a distinction is made between Platform Independent Models (PIM) \nand Platform Specific Models (PSM). The MDA promises an increased productivity as well as modeling quality. \nThis is reached by applying transformation rules to models in order to eventually generate code. Thus, \nthe programmer can focus entirely on the design of the business logic without paying attention to the \ncomplexity of the implementation [1]. A disadvantage, however, of MDA is the currently missing technical \nsupport for the development of system families. Therefore, it should be possible to define rules of how \nto check consistency and validity of system models at design-time already. This functionality might, \nin the future, be provided by an extension to the Object Constraint Language (OCL). We employ a widely \nused standard UML tool for modeling the necessary components. We consider the UML profile EDOC most suitable \nfor our requirements [2]. Since the Model Driven Architecture was designed mainly to develop discrete \nsystems, we suggest using MDA only for the development of components, and not for business processes. \nInstead, the actual application is modeled using a development environment that supports the modeling \nof system families. For this purpose, the Generic Modeling Environment (GME) which was developed at Vanderbilt \nUniversity provides the most comprehensive functionality [3]. 2.4. Four-Layer Modeling Architecture \nWe suggest modeling pervasive systems with a model architecture consisting of four layers [4]. The tool's \ninternal modeling profile (e.g. UML) generates the meta-model of the pervasive business applications. \nIn the terms of MDA, this model is the PIM of the pervasive business system family. It abstractly describes \nstandard components of a pervasive computing architecture as well as its interactions. According to the \nMDA terminology, the PSM is derived from the PIM by adding platform-specific attributes to the standard \ncomponents. The attributes are described separately from the user's and the programmer's points of view. \nIn the last step, the functionality of the platform-specific components have to be put into sequence. \nFor the sake of simplicity, in this step, the modeler is only aware of the user's view on the functionality \nof the available components. 2.5. Development Process The combination of MDA and generic modeling results \nin a development process whose phases are depicted in Figure 1. Because the development of the components \nmay proceed simultaneously with the application modeling, the generic modeling tool should be capable \nof importing the component models. Unfortunately, we are aware of no generic modeling tool at the moment \nthat supports the standard file format for model exchange (XMI). It is conceivable to accomplish the \nintegration with a tool that is able to convert the file formats  3. APPLICATION WORKFLOW Pervasive \nBusiness Applications offer services that the user can accomplish by offer and acceptance. In order to \nreceive an offer, the user launches a request and proves his authorization. When authorized, he receives \nan offer for the requested service according to his connection bandwidth, the limitations of his device \nand his personal settings. In order to provide the user with a profound basis for his decision of whether \nto accept the offer or not, he receives information about the expected online time and the estimated \nnumber of required interactions for the service. The application obtains this data from the records of \nformer transactions. GME features the export of models which will then be interpreted. The runtime environment \nextracts a series of activities from the exported file. The data retrieval operations trigger events \nthat are handled by the appropriate component.  4. REFERENCES [1] Warmer, J., Kleppe, A. and Bast, W. \nMDA Explained, 2003. [2] UML Profile for Enterprise Distributed Object Computing Specification. http://www.omg.org/docs/ptc/02-02-05.pdf \n[3] Lu, Y. Comparison of Meta-modeling Techniques and Tools, McGill University, 2003. [4] Nordstrom, \nG. and Ledeczi, A. Formalizing the Specification of Graphical Modeling Languages. Vanderbilt University, \n2000.  \n\t\t\t", "proc_id": "949344", "abstract": "This paper describes a model-based development approach for pervasive computing applications. The key concept introduced is the use of the Model Driven Architecture (MDA) for development of system families.", "authors": [{"name": "Kai Hemme-Unger", "author_profile_id": "81100144195", "affiliation": "DaimlerChrysler AG, Ulm", "person_id": "P643463", "email_address": "", "orcid_id": ""}, {"name": "Thomas Flor", "author_profile_id": "81100143173", "affiliation": "DaimlerChrysler AG, Ulm", "person_id": "P643490", "email_address": "", "orcid_id": ""}, {"name": "Gabriel Vogler", "author_profile_id": "81100072325", "affiliation": "DaimlerChrysler AG, Ulm", "person_id": "P643445", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949429", "year": "2003", "article_id": "949429", "conference": "OOPSLA", "title": "Model driven architecture development approach for pervasive computing", "url": "http://dl.acm.org/citation.cfm?id=949429"}