{"article_publication_date": "10-26-2003", "fulltext": "\n Dynamically Updatable Component-based System (DUCS) Robert Bialek University of Copenhagen Department \nof Computer Science, DIKU Universitetsparken 1 DK-2100 Copenhagen, Denmark bialek@diku.dk ABSTRACT We \npresent our framework called DUCS. DUCS supports on-the-.y updates of distributed component-based applica\u00adtions. \nDUCS has a layered architecture running on top of a virtual machine extended with a support for object \nun\u00adload and replacement. DUCS is a meta-level framework, so the impact on the application s implementation \nis minimal. It supports dynamic component replacement, state transfer among components, interface modi.cations, \nand automatic propagation of updates. The framework is expandable and can be applied to many programming \nlanguages as well as many hardware platforms.  Keywords dynamic updates, components, re.ection, state-transfer, \nin\u00adterface adaptation 1. INTRODUCTION &#38; MOTIVATION The popularity of component based frameworks (e.g., \nEJB) as well as standardisation of communication protocols (e.g., SOAP) support production of distributed \ncomponent based systems connected by the Internet. Updating such distribut\u00aded applications is very challenging. \nFirst, the maintainers may not always be able to stop the application (e.g., .\u00adnancial services require \ncontinuous uptime). Second, some components of the applications are often used on remote nodes that connect \nspontaneously, may have limited net\u00adwork bandwidth or hardware and are therefore di.cult to access and \nmaintain when needed. This Ph.D. project is about how we can build a distributed component-based system \nthat can be updated dynamically. We present a general structure of our Dynamically Updat\u00adable Component-based \nSystem (DUCS). To demonstrate the viability of our ideas, we use DUCS to build a distributed group-ware \napplication that can be extended with new func\u00adtionality on-the-.y. 2. ASSUMPTIONS We design the framework \nfor distributed, component-based applications that are executed in virtual machines (we use Java VM). \nNodes (for example clients) connect spontaneously to other nodes (for example servers). The total number \nof Copyright is held by the author/owner. OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM \n1-58113-751-6/03/0010. nodes does not need to be determined (e.g., client-server applications with big \nnumber of clients). Such application s components can be executed in heterogeneous environments (e.g., \nserver on a main-frame system, clients on PDAs) and some of the application s components must remain \nopera\u00adtional continuously (e.g., server s web services). 3. GOALS The goal of this project is to provide \na model for a frame\u00adwork facilitating dynamic updates of component based ap\u00adplications and build a prototype \nthat proves the viability of the framework. The framework shall have the following properties: It shall \nfacilitate update process of distributed applica\u00adtions by supporting dynamic object replacement, state \ntransfer, and re.ection,  It shall support automatic propagation of updates,  It shall not complicate \nthe process of building the ap\u00adplications using it,  It shall be able to be applied to the existing \napplication with little or no impact on them,  It shall be expandable and modi.able.  The goal of the \nprototype is to identify all (or at least ma\u00adjor) requirements for the framework, present how to use \nthe framework, and to evaluate its impact on the applications using it (with respect to performance, \nmemory usage, etc). 4. FRAMEWORK DETAILS An update is a replacement of one component by an other where \na semantical relationship between these two compo\u00adnents can be de.ned (In our prototype we use the functional \nrelationship.) A dynamic update is an update which is per\u00adformed on executing components. A correct update \nprocess is a set of dynamic updates to a running systems, which transfer a running set of components \nto a state that would be achieved if the system was shut down and later restarted after the replacements \nof the intended components. DUCS supports correct update process and guarantees that the updates (not \nall modi.cations) are performed cor\u00adrectly. A set of update layers supervises the update process, a set \npluggable interface adapters handle potential version mismatches and update requests propagate the updates \nin the system. 4.1 Layers Similarly to our previous work[1], DUCS separates appli\u00adcation logic from the \nupdate logic. DUCS is a layered frame\u00adwork with the following layers (presented in the bottom-up order:) \nVM layer is the environment in which the application is being executed. In our case the VM layer includes \na standard Java VM, on top of which we added a meta-VM that provides the functionality of compo\u00adnent \nloading, unloading, versioning and updating as well as re.ection. These functionalities are needed by \nthe Con.guration Manger layer. Application layer is the layer, where applications consist\u00ading of components \nare built. The communication be\u00adtween the components goes through their interfaces, which are controlled \nby their meta-level component, the Con.guration Manager. Con.guration Manager (ConfMgr) layer is the \nmeta\u00adlevel entity responsible for performing updates on sin\u00adgle nodes. The ConfMgr handles object updates \nand manages interface changes by supporting pluggable adapters. ConfMgr, provides an update-interface \nfor receiving Update Requests (see 4.2) that initiate the update pro\u00adcess. ConfMgr can be expanded with \nadditional functional\u00adity like security control, proof carrying code, encryp\u00adtion, and more. Architecture \nManager (ArchMgr) layer is responsible for managing the con.guration of components across many nodes. \nIt manages addition, removal, movement and updates of groups of components. ArchMgr is only contacted \nby the ConfMgr when interface adapters (described later) can not handle a version mismatch. In the current \nwork, we have not addressed issues in this layer, but we expect it to be the necessary element of a general \nDUCS hence it will be analyzed in the future. 4.2 Update request Update requests are used to initiate \nthe update process on the Con.guration Manager layer. Update requests in\u00adclude new implementations, state \ntransfer functions, inter\u00adface adapters, and (optionally) update constraints. Update requests are used \nto propagate the updates across the dis\u00adtributed application. 4.3 Interface adaptation Because we deal \nwith heterogeneous networks with spon\u00adtaneously connecting nodes, updating applications in one atomic \nstep is not possible. Additionally, because of hard\u00adware and bandwidth limitations, we may not always \nbe able to perform the necessary updates. Therefore, we need to deal with simultaneous cooperation of \ncomponents with dif\u00adferent versions. To allow updates of components interfaces, we introduce Interface \nadapters. Interface adaptors are Con.guration Manger layer s functions that translate calls between pro\u00advides \nand requires interfaces across di.erent component ver\u00adsions. The interface adapters are pluggable during \nupdates.  5. IMPLEMENTATION DETAILS The application layer communicates with the ConfMgr layer using \nre.ection on every method call. To support re\u00ad.ection, we need some extra functionality from the VM. \nThis extra functionality includes re.ection, unloading, and ver\u00adsioning of objects and is placed in the \nmeta-VM. We implement re.ection using wrapper components based on Javassist [2] framework, which allows \nrun-time creation of wrapper-classes (components). The object replacement will be implemented by changing \nobject references (similar to the Gilgul approach [3]) extended with the state transfer function and \nthe pluggable interface adapters. 6. STATUS This Ph.D. project runs from 1st June 2003 to 31st of May \n2006. Now we are in the process of building the basic ele\u00adments of the framework for future prototyping. \nCurrently, we are programming the meta-VM and incorporating re.ec\u00adtion to ConfMgr into the component \nmodel. Next, we will expand the ConfMgr with the state transfer functions and propagation of updates \nusing update requests. 7. CONTRIBUTIONS The poster provides a brief description of a framework called \nDUCS that supports buildling and adapting existing applications to the updatable framework. DUCS uni.es \nre\u00adsearch within the area of dynamic updates: state transfer function [5], dynamic object replacement \n[3], use of re.ec\u00adtion [4], integrated in a layered framework. DUCS supports building updatable distributed \nsystems with unknown num\u00adber of components using interface adapters. In the prototype, we are extending \nreal worlds products (Java virtual machine) with the support for component up\u00addates and re.ection. The \nupdate logic is separated from the application logic so the separation of the application code gives \nthe freedom for optimizing the update functions while keeping the application code (almost) intact. This \nful.lls all the goals outlined in section 3. 8. REFERENCES [1] R. Bialek. The architecture of a dynamically \nupdatable component-based system. COMPSAC, 2002. [2] S. Chiba. Load-time structural re.ection in Java. \nhttp://citeseer.nj.nec.com/chiba00loadtime.html, 2000. [3] P. Costanza. Transmigration of object identity: \nThe programming language gilgul. http://citeseer.nj.nec.com/483031.html. [4] C. E. Cuesta, P. de la Fuente, \nand M. Barrio-Solorzano. Dynamic coordination architectur through the use of re.ection. SAC 2001, Las \nVegas, NV, ACM 1-58113-287-5/01/02:134 140, 2001. [5] M. W. Hicks, J. T. Moore, and S. Nettles. Dynamic \nsoftware updating. In SIGPLAN Conference on Programming Language Design and Implementation, pages 13 \n23, 2001.  \n\t\t\t", "proc_id": "949344", "abstract": "We present our framework called DUCS. DUCS supports on-the-fly updates of distributed component-based applications. DUCS has a layered architecture running on top of a virtual machine extended with a support for object unload and replacement. DUCS is a meta-level framework, so the impact on the application's implementation is minimal. It supports dynamic component replacement, state transfer among components, interface modifications, and automatic propagation of updates. The framework is expandable and can be applied to many programming languages as well as many hardware platforms.", "authors": [{"name": "Robert Bialek", "author_profile_id": "81100459122", "affiliation": "University of Copenhagen, Copenhagen, Denmark", "person_id": "P643482", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949423", "year": "2003", "article_id": "949423", "conference": "OOPSLA", "title": "Dynamically updatable component-based system (DUCS)", "url": "http://dl.acm.org/citation.cfm?id=949423"}