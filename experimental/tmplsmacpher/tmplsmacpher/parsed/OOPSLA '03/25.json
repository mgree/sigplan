{"article_publication_date": "10-26-2003", "fulltext": "\n Issues on Building T++, a Tool for Web Application Development with C++ Antonio Soares de Azevedo \nTerceiro Christina von Flach G. Chavez terceiro@im.ufba.br .ach@im.ufba.br Departamento de Ci encia da \nComputac\u00b8ao.  Instituto de Matem\u00b4atica Universidade Federal da Bahia. Campus de Ondina Av. Ademar \nde Barros, Ondina 40170-110. Salvador, Bahia, Brazil ABSTRACT As the demand for web applications grows, \nso does the demand for tools that support them. As a general rule, such tools extend gen\u00aderal purpose \nprogramming languages, like Servlets/JSP [2] does for Java [4], or de.ne their own programming language, \nlike PHP [3]. But there is no established engine for web applications written with C++. This work presents \ntechnical challenges that were faced when developing T++, an engine that supports web application develop\u00adment \nwith C++.  Categories and Subject Descriptors D.3.3 [Programming Languages]: Language Constructs and \nFea\u00adtures Frameworks, Polymorphism, Concurrent programming struc\u00adtures, Classe sand objects General \nTerms Design, Languages Keywords Web Application Development, C++, Object Orientation 1. INTRODUCTION \nThe demand for web applications is getting more and more in\u00adtense. They require less resources from clients, \nsince business logic resides in application servers. This characteristic also facilitates ap\u00adplication \nupgrades: they can be done simply by replacing the code that resides in the application server. Two kinds \nof tools have been used for web application develop\u00adment: programming languages designed speci.cally \nfor web appli\u00adcations, like PHP [3]; and extensions of general purpose program\u00adming languages, like Servlets/JSP \n[2], a Java [4] extension. The latter general purpose programming language extensions can be used to \nport applications originally designed for desktop systems to the web environment. The C++ language [9] \nhas been used in the development of many types of applications, from simple tools to complex information \nsystems, including scienti.c and industrial applications. However, up until now, there is no established \nengine for web application de\u00advelopment in C++. The lack of such a tool complicates the devel\u00adopment \nof new C++ applications for the web environment; more\u00adover, it hampers the deployment of a solid bulk \nof C++ applications on the web. This work brie.y presents T++, an engine designed for running web applications \nwritten in C++. T++ comprises two parts: Figure 1: The processing of a request to a T++ document a programming \nlanguage that works as an interface for web appli\u00adcation development in C++, and an execution engine. \nIn the present work we focus on the execution engine implementation, while as\u00adpects related to the programming \nlanguage interface are detailed in [5]. Specially, we discuss some challenging issues regarding object-oriented \nimplementation in C++, that have been subject of research during T++ development. 2. TOOL DESCRIPTION \nT++ is a tool for web application development in C++. It is free software, licensed under the GNU General \nPublic License [1]. T++ comprises a programming language and an execution engine. Run\u00adning T++ requires \na GNU/Linux system, an Apache web server, and GNU Compiler Collection (gcc) with support to C++. Figure \n1 shows a high-level representation of the behavior of a T++ application. From the users point of view, \nT++ documents are ordinary ones and are available for users request through their web browsers (1). Users \nsend HTTP requests, and receive arbitrary content as result. The web server forwards the request to the \nT++ engine (2). The T++ engine, then, maps the requested document to an object in memory (3). If it is \nis necessary, this object is (re)built (4) before it is used to process the request (5). Finally, output \ngenerated by this object (6), often in HTML format, is sent back to the user (7). The T++ programming \nlanguage supports writing T++ docu\u00adments, mixing up static content -often HTML code and C++ statements \nand expressions. C++ code is embedded in special lan\u00adguage blocks, surrounded by special delimiters. \nThere are blocks for code execution, expression evaluation and others. 3. TECHNICAL ASPECTS C++ code \nis compiled into native code, unlike other languages commonly used for web application development. Java, \nfor in- Copyright is held by the author/owner. stance, is compiled into intermediate code, while PHP \nis purely OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. interpreted \n(but there are optional features for caching precompiled intermediate code). Restrictions related to \nworking with native code, and the absence of a virtual machine to support portability raise several issues \nthat must be handled when developing a tool like T++. In the next sub\u00adsections, we discuss some important \nissues and describe the pro\u00adposed solutions to deal with them. 3.1 Automatic C++ source code generation \nand compilation The objects shown in .gure 1 are dynamically created, based on T++ documents that contain \nstatic content (usually HTML code), C++ statements, and other types of C++ code (classes, methods, and \npreprocessor directive declarations, for example). Their trans\u00adlation mixes both a template skeleton \nand the content read from the source document, creating a class that represents the T++ doc\u00adument. The \ngenerated class extends an abstract Pageclass, which pro\u00advides the standard interface for T++ documents. \nThe translated content generates the body of a method called service() in the tar\u00adget class, for answering \nusers requests. After the class is generated, it is compiled into a shared library (.soin UNIX systems), \nwhich will contain the class de.nition and other resources required for dynamic loading. 3.2 Dynamic \nclass loading T++ needs a dynamic loading mechanism, because users can change document source code after \nT++ and web server are al\u00adready running, and restarting web server at each document update is a very \nbad idea. In this case, the class has to be generated once again, recompiled, and reloaded in order to \nmake the objects in memory correspond to the code in source documents. Since C++ is compiled, dynamic \nloading of classes is not as easy to implement as it could be in interpreted or even semi-interpreted \nprogramming languages. T++ dynamic loading mechanism is based on a technique for dy\u00adnamic class loading \nin C++ proposed by Norton [8]. This technique is presented below. Each class is compiled into its own \nshared library. Native library calls are used to load object code from the shared library .le and to \nget pointers to named symbols inside the module loaded. In order to process the request for a document, \nT++ needs to get an instance of the corresponding class, de.ned in the shared library. However, the only \navailable information is that such class is a subclass of the Page class. Furthermore, it is not possible \nto refer to types at runtime in C++. These restrictions lead to the following implementation: .The generated \nclass extends the Pageclass, that de.nes the standard interface that all document classes must conform \nto. .The generated source .le has a public function, with a prede\u00ad.ned name, let us say, getInstance(), \nthat returns a pointer to an instance of the class, implementing the Singleton design pattern.  .After \nloading the library, the dynamic loading mechanism gets a pointer to getInstance(), and calls the function. \nThe returned pointer is then used to forward the request to the object it points to. 3.3 Shared memory \nallocation Web servers are designed to be robust and scalable, since they can host applications used \nby hundred, or even thousands of users. To achieve these requirements, web servers are by nature multipro\u00adgrammed: \nthe main web server has several child processes that deal with users requests. Document instances must \nbe shared between all server s subpro\u00adcesses, so that all users will be served by the same instance of \nthe class corresponding to the requested document. Another reason for sharing unique instances between \nsubprocesses, is that application programmers may wish to keep information between successive re\u00adquests \nfor some document in the document s object internal state. These requirements would pose unnecessary \nadditional complexity if there were several instances of each document in memory. To implement such functionality, \nwe must: .Provide a shared memory allocation mechanism, and some means to instantiate objects in shared \nmemory. .Provide a synchronization mechanism, since there will be a lot of race conditions using unique \ninstances, specially if they keep internal state between requests. .Provide a programming library for \nusing shared memory, like shared memory versions of C++ containers and shared mem\u00adory allocation operations. \n An interesting approach for memory management was proposed by Meyers [7], using memory heaps and overloading \nC++ s new and deleteoperators. A technique that can be used for attaching this approach to C++ standard \ntemplate library containers, rede.n\u00ading their memory allocation strategy, was described by Austern [6]. \nIn T++, the shared memory allocation problem is solved by com\u00adbining these two techniques, wrapping shared \nmemory allocation with memory heaps and de.ning C++ allocators that are used when collections of objects \nare needed.  4. CONCLUSIONS T++ is a tool that helps web application development, either for creating \nnew applications from scratch, or for reusing existing C++ source code for providing a web interface \nfor existing, con\u00adventional, applications. T++ represents an important contribution, since, as far as \nwe know, there is no established engine for web application development in C++. The reported design and \nimplementation issues are interesting by themselves, and putting them to work together has been really \nchal\u00adlenging. The resulting knowledge will certainly bene.t the design of other types of applications \nthat have some requirements in com\u00admon with a web application server mechanism, like on demand plu\u00adgin \nloading mechanisms, component architectures with dynamic component loading, memory sharing components, \namong others. Further information about T++ can be found at [5]. 5. REFERENCES [1] The GNU general public \nlicense. http://www.gnu.org/licenses/gpl.html. [2] Javaserver pages technology. http://java.sun.com/products/jsp. \n[3] PHP Hypertext Preprocessor. http://www.php.net. [4] The source for Java technology. http://java.sun.com. \n[5] T++ website. http://tplusplus.sourceforge.net. [6] M. Austern. What are Allocators good for? The \nC/C++ Users Journal, Dec. 2002. [7] N. C. Mayers. Memory management in C++. C++ report, July 1993. [8] \nJ. Norton. Dynamic class loading for C++ on Linux. Linux Journal, May 2000. [9] B. Stroustrup. The C++ \nprogramming language. http://www.research.att.com/ bs/C++.html.  \n\t\t\t", "proc_id": "949344", "abstract": "As the demand for web applications grows, so does the demand for tools that support them. As a general rule, such tools extend general purpose programming languages, like Servlets/Jsp [2] does for Java [4], or define their own programming language, like PHP [3]. But there is no established engine for web applications written with C++. This work presents technical challenges that were faced when developing T++, an engine that supports web application development with C++.", "authors": [{"name": "Antonio Soares de Azevedo Terceiro", "author_profile_id": "81100145131", "affiliation": "Universidade Federal da Bahia, Salvador, Bahia, Brazil", "person_id": "P643427", "email_address": "", "orcid_id": ""}, {"name": "Christina von Flach G. Chavez", "author_profile_id": "81100412458", "affiliation": "Universidade Federal da Bahia, Salvador, Bahia, Brazil", "person_id": "P643435", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949372", "year": "2003", "article_id": "949372", "conference": "OOPSLA", "title": "Issues on building T++: a tool for web application development with C++", "url": "http://dl.acm.org/citation.cfm?id=949372"}