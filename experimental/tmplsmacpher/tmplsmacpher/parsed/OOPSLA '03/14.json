{"article_publication_date": "10-26-2003", "fulltext": "\n F-Script: Smalltalk Scripting for the Mac OS X Object System Philippe Mougin pmougin@acm.org ABSTRACT \nF-Script is a Smalltalk-like interactive scripting language based on the Mac OS X object model. F-Script \nprovides scripting and inter\u00adactive access to Mac OS X frameworks and custom objects. It also introduces \nan innovative high-level object-oriented programming model based on APL-like array programming principles. \n Categories and Subject Descriptors D.3.3 [Programming Languages]: Language Constructs and Fea\u00adtures \n General Terms Language, Design Keywords F-Script, Scripting Language, Array Programming, Message Pat\u00adtern, \nMac OS X, Cocoa, Objective-C, Smalltalk, APL 1. INTRODUCTION TO F-SCRIPT F-Script [1] is a new scripting \nlanguage based on Smalltalk and speci.cally designed for the Mac OS X object system (i.e. Cocoa). F-Script \nprovides scripting and interactive access to Mac OS X frameworks and custom Objective-C objects. It aims \nto be a useful and fun tool for both beginners and experts, allowing interactively exploring, testing \nand using Cocoa-based objects and frameworks. As a Smalltalk dialect, F-Script provides a pure object-oriented \nen\u00advironment that leverage Mac OS X technologies. It introduces sig\u00adni.cant innovations including OOPAL, \na high-level model for ob\u00adject manipulation, and a graphical object browser. F-Script is used in various \n.elds including astrophysics, biology, music analysis, game development, software debugging, etc. F-Script \nis an open\u00adsource project sponsored by the European Smalltalk User Group and SQLI. It is available at \nhttp://www.fscript.org. 2. A SMALLTALK DIALECT ON TOP OF THE MAC OS X OBJECT MODEL F-Script uses and \nexposes the native object model of Mac OS X (i.e., the Objective-C object model). This model comes as \na lightweight object-oriented extension of ANSI C modeled after Smalltalk. Objective-C uses Smalltalk \ns keyword syntax. It is based on sin\u00adgle inheritance with support for protocols, which are similar to \nCopyright is held by the author/owner. OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM \n1-58113-751-6/03/0010. java interfaces. It is dynamically typed, with optional static typ\u00ading. Objective-C \nclasses and meta-classes are regular objects. The Objective-C object model is .exible. For instance, \nthe notion of category lets you add methods to classes you haven t produced, the poseAsClass: method \nlets you replace a class by another one at run-time, etc. It features introspection and message handling \nca\u00adpacities: isKindOfClass:, respondsToSelector:, performSelec\u00adtor:, doesNotRecognizeSelector:,etc. F-Script \nis built on top of this object model and Apple s object\u00adoriented frameworks. It provides the object-oriented \ninteractive and scripting layer currently missing in the Cocoa stack. Key charac\u00adteristics of F-Script \ninclude: Pure object language with Smalltalk syntax and concepts.  Interactive and scripting access \nto Cocoa and custom Objective-C objects.  Direct access to the Mac OS X objects. No bridging between \ntwo different object models. The F-Script object model is the Mac OS X object model. See [3].  Integration \nwith existing Mac OS X development tools.  User-friendly support for Cocoa s object services like object \narchiving and distributed objects.  Graphical access to objects with the F-Script object browser (a.k.a. \nbehavioral inspector). Support for method invocation from within the graphical browser [2].  Embeddable \ninto applications through an easy to use set of components[4].  Thanks to its integration with Cocoa, \nF-Script gains for free , many advanced features, directly available for the F-Script user. This includes: \n A sophisticated GUI framework.  Access to the features of Quartz (the Mac OS X graphic sub\u00adsystem). \n State-of-the-art networking frameworks.  A distributed object system.  An object archiving service. \n Integration with Apple s Interface Builder.  A state-of-the-art HTML rendering framework.  UNIX abstractions \n(tasks, pipes etc.)  File system interaction.  Etc.   Figure 1: The F-Script interactive environment \n 3. UNIFYING OOP AND ARRAY PROGRAM-MING 3.1 OOPAL While object-oriented programming offers high-level \ntools for data modeling, the same is not true for data manipulation. The basic operation provided for \nobject manipulation is message send\u00ading, which remains a very .ne-grained, low-level operation. Indeed \nOOP does not offer a high-level model for manipulating whole sets of data (i.e., collections of objects). \nThe aim of the OOPAL model [5] is to offers higher-level capacities for data manipulation within the \nscope of object-oriented programming. OOPAL, which is fully supported by F-Script, de.nes a minimum set \nof modi.cations that must be made to the traditional object model in order to take ad\u00advantage of the \npossibilities of array programming. It is based on a minimal extension of method invocation called message \npattern and the de.nition of a kernel of methods implementing the funda\u00admental array programming operations. \nOOPAL shines in its ability to express computations at a high-level of abstraction, allowing one to manipulate \nand query whole sets of objets at once. 3.2 Message Patterns An object-oriented program can be considered \na speci.cation that de.nes which messages are sent to which objects. In traditional OOP, the basic syntactic \nstructure makes it possible to specify the sending of a simple message. We suggest adopting a new message \nsending paradigm that allows for the sending not of simple mes\u00adsages, but a complex group of messages. \nWe call this new structure message pattern. F-Script provides notation that allows for spec\u00adi.cation \nof message patterns. This notation enables the expression of a wide range of patterns. The classic message \nsend notation be\u00adcomes naturally a particular case of message pattern. The heavy use of explicit loop \ncontrol structures that is common in traditional languages is replaced with message patterns in F-Script. \n 4. DEMONSTRATION DESCRIPTION This demonstration will cover: The F-Script interactive and scripting \nenvironment.  OOPAL, which integrates array programming in OOP.  An innovative graphical object browser. \n The integration between F-Script and Mac OS X.  F-Script Anywhere: dynamically taking control of running \napplications with F-Script.   5. REFERENCES [1] P. Mougin. F-Script Guide, 1999. http://www.fscript.org. \n[2] P. Mougin. Browsing Cocoa with F-Script, Dec. 2001. O Reilly Network, http://www.macdevcenter.com/pub/a/mac \n/2001/12/21/browsing cocoa.html. [3] P. Mougin. Scripting cocoa with F-Script, Nov. 2001. O Reilly Network, \nhttp://www.oreillynet.com/pub/a/mac/2001/11/30 /scripting fscript.html. [4] P. Mougin. Embedding F-Script \ninto Cocoa Applications, July 2002. O Reilly Network, http://www.macdevcenter.com/pub /a/mac/2002/07/12/embed \nfscript.html. [5] P. Mougin and S. Ducasse. OOPAL: Integrating Array Programming into Object-Oriented \nProgramming. In Conference proceedings on Object-Oriented Programming Systems, Languages and Applications. \nACM Press, 2003.    \n\t\t\t", "proc_id": "949344", "abstract": "F-Script is a Smalltalk-like interactive scripting language based on the Mac OS X object model. F-Script provides scripting and interactive access to Mac OS X frameworks and custom objects. It also introduces an innovative high-level object-oriented programming model based on APL-like array programming principles.", "authors": [{"name": "Philippe Mougin", "author_profile_id": "81100249743", "affiliation": "", "person_id": "P386170", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949361", "year": "2003", "article_id": "949361", "conference": "OOPSLA", "title": "F-Script: smalltalk scripting for the Mac OS X object system", "url": "http://dl.acm.org/citation.cfm?id=949361"}