{"article_publication_date": "10-26-2003", "fulltext": "\n Using Events to Debug Java Programs Backwards in Time Bil Lewis Lambda Computer Science 352 Central \nAve Park, CA, 94301, USA  Bil.Lewis@LambdaCS.com ABSTRACT An\\OmniscientDebugger\"worksbyrecordingallstate \nchangesintherunofaprogram,andthenallowingthe programmertoexplorethehistoryofthatprogramefec\u00adtivelygoing\\backwardsintime.\"Eventanalysisdebuggers \nworkbyobservingeventsastheyoccur,andallowingthe programmertowritequerieswhichwillpausetheprogram whenmatchedefectivelyhighlysophisticatedbreakpoints. \nRecentlywehaveintegratedthetwotechniquestopro\u00adduceanomniscientdebuggerwhichcanuseeventqueries tosearchthehistoryofaprograminteractively.Thequery \nmechanismisdesignedalongthelinesofanEMACSincre\u00admentalsearch,wherethequeryistypedintoa\\minibufer\" atthebottomofthedebuggerwindow,andthecommands \n\\nextmatch\"and\\previousmatch\"aresinglekeystrokes. Theresultisinstantaneousfeedbackwithnodangerofmiss\u00adinganinterestingstatebygoingtoofar. \nCategoriesandSubjectDescriptors:D.2.5[Software Engineering]:testingandDebugging{DebuggingAids,Trac-ing;D.1.5[ProgrammingTechniques]:Object-orientedPro\u00adgramming{Java \nGeneralTerms:Design,Languages. 1. THE ODB OMNISCIENT DEBUGGER TheODBisanimplementationofanomniscientdebugger \ninJavaandrecordstwotypesofevents:methodcalls(and returns)andassignments(localvariables,instancevariables, \narrayelements).Thetargetprogramisinstrumentedbya specialclassloaderandthenrun.Theeventsarerecorded andthemaindebuggerwindowpopsupwhentheprogram \nfnishes. Theprogrammercanthen\\navigate\"throughthehistory oftheprogram,selectinganylineinthemethodtracepane \n(seeFigure1),theTTYoutputpane,orthecodepane.The ODBwill\\revert\"allotherpanestorefectthestateofthe programwhenthatlineexecuted. \nTheprogrammercanlookinsideofanyobjectdisplayed anywherebydouble-clickingonit,whichwillcopyittothe objectspane(e.g.,jDemo0l).Theprogrammercanselect \nanyvariable(local,instance,orstatic)andgo\\backwards intime\"toseewhereitwasset,andwhatitsvaluewas. Alistofallvaluesiteverhadcanpoppedupandselected \nfrom.Ifanobject(array)isselected,thenthefourarrow Copyright is held by the author/owner. OOPSLA 03, October \n26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. Mireille Ducass\u00b4e IRISA/INSA de Rennes \nCampus Universitaire de Beaulieu F-35042 Rennes Cedex, France Mireille.Ducasse@irisa.fr buttons(frst,previous,next,last)willreverttowhenany \ninstancevariable(arrayelement)inthatobjectchanged. Inthecodepaneitispossibleto\\singlestep\"theprogram \nforwardsorbackwards,tostepinto/outofanymethodcall, followanyexceptionthrow,etc. Thereareanumberofthingsthatmakeomniscientde\u00adbuggingworththeefortofexploring. \n.Debuggingiseasierifyoucangobackwards(aclaim tobetested!). .Iteliminatestheworstproblemswithbreakpointde\u00adbuggers:no\\guessing\"wheretoputbreakpoints,no \n\\extrasteps\"todebugging,no\\Whoops,Iwenttoo far\",nonon-deterministicproblems. .Itgivestheprogrammerauniqueviewoftheprogram \nwhichisparticularlyvaluableforunfamiliarcode. .Allthedataisserializable.Severalprogrammerscan workwiththeexactsamedebuggingsession.Beta \ncustomerscane-mailadebuggingsessiontodevelopers eveniftheydon'thavethesource.  2. SNAKE-IN-THE-GRASS \nPROBLEMS TheODBisparticularlywell-suitedfor\\snake-in-the-grass\" problems(wheretheprogramdoessomethingvisiblyincor\u00adrect:outputsawronganswer,throwsanexception,etc.). \nTheprogrammercansimplyfollowachainofbadvalues backwardstotheirsource(ifyoupullonasnake'staillong enough,youwillgettoitshead).Theotherkindofproblem, \nwheretheprogramfailsdosomethingtheprogrammerex\u00adpected(itwassupposedtosortalist,butmissedonevalue), isharder. \nThisiswhereeventanalysisbecomesuseful.Afterthe programfnishes,theprogrammercantypesearchpatterns intotheminibufertoreverttoplacesintheprogramwhere \nsomethingshouldhavehappened.Forexample,thedemo quicksortprogramfailstosortelement0,soagoodsearch patternwouldbe\\Findacalltosort()whoselowerbound \nis0.\"Thereareahalf-dozensuchcallsandtheprogrammer canmovethroughthemwithasinglekeystroke.Amore detaileddescriptionofeventflteringcanbefoundin[1]. \n 3. THE DISPLAY Everymethodcallthatisrecordedwillbedisplayedin the\\methodtrace\"pane.Theformatofthetracelinewill \nbe:<Object>.methodName(arg0,arg1)->returnValue. Figure1:AsnapshotoftheODBinterface Eachlinewillbeindentedaccordingtodepthandamatch\u00ading\\returnline\"willbeaddedwhenitreturns. \nFromthefgurewecanseethattheODBisdisplaying thestateoftheprogramattimestamp272(outof1265), whichisthefrstline(line19inDemo.java)inacallto \naverage(6,10)(whichreturned856),thatit'sbelowtwo callstosort()inthread<Sorter1>,andthelastthing printedoutwasStartingQuicksort:20.Theprogram\u00admerhascopiedthreeobjectsintotheobjectspane,opening \noneinstancevariablerecursively.Thestarsindicatevalues whicharediferenttheninthepreviouslydisplayedtime. \nAsdatasetsgetlarge(past100,000events),itbecomes usefultoflterout\\uninteresting\"tracelines,sothepro\u00adgrammercanrequestthatcertainmethodsnotbeshown, \noronlythoseunderaselectedmethodcallbeshown,etc. Methodswhoseinteriorsarenotinterestingorhighlytrusted \n(e.g.,Swing,JFC)willnotbeinstrumented,reducingthe amountofdatacollected. Itisalsopossibletorequestthatrecordingnotbeturned \nonuntilaspecifceventoccurs,eitherautomaticallywith aneventqueryormanuallywitha\\Start/Stop\"button. 4. \nCURRENT STATUS TheODBisquiterobust(althoughitisstillanexperi\u00admentalsystem)andhasbeentestedonprogramsaslarge \nasAntandTomcat.ItispureJavaandrunson1.3+.It isGPL'dandavailablefromwww.LambdaCS.com.Amore detaileddescriptionofODBcanbefoundin[2].Thedesign \nandimplementationoftheeventmodelwasaccomplished incollaborationwithYannGravrandandEricWestrelinof INSAdeRennes. \n 5. REFERENCES [1]M.Ducass.e.Coca:AnautomateddebuggerforC.In Proc.ofthe21stInt.ConferenceonSoftware Engineering,pages504{513.ACMPress,May1999. \n [2]B.Lewis.Debuggingbackwardsintime.InM.Ronsse andK.D.Bosschere,editors,Proc.oftheFifthInt. WorkshoponAutomatedDebugging,September2003. \nComputerScienceRepository,CoRRcs.SE/0309027, http://xxx.lanl.gov/abs/cs.SE/0309027/.  \n\t\t\t", "proc_id": "949344", "abstract": "An \"Omniscient Debugger\" works by recording all state changes in the run of a program, and then allowing the programmer to explore the history of that program - effectively going \"backwards in time.\" Event analysis debuggers work by observing events as they occur, and allowing the programmer to write queries which will pause the program when matched - effectively highly sophisticated breakpoints.Recently we have integrated the two techniques to produce an omniscient debugger which can use event queries to search the history of a program interactively. The query mechanism is designed along the lines of an EMACS incremental search, where the query is typed into a \"minibuffer\" at the bottom of the debugger window, and the commands \"next match\" and \"previous match\" are single keystrokes. The result is instantaneous feedback with no danger of missing an interesting state by going too far.", "authors": [{"name": "Bil Lewis", "author_profile_id": "81100349482", "affiliation": "Lambda Computer Science, Menlo Park, CA", "person_id": "P30308", "email_address": "", "orcid_id": ""}, {"name": "Mireille Ducasse", "author_profile_id": "81100624760", "affiliation": "IRISA/INSA de Rennes, Rennes Cedex, France", "person_id": "P643477", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949367", "year": "2003", "article_id": "949367", "conference": "OOPSLA", "title": "Using events to debug Java programs backwards in time", "url": "http://dl.acm.org/citation.cfm?id=949367"}