{"article_publication_date": "10-26-2003", "fulltext": "\n Time Conscious ObjectsTM Jorn Bettin Jeff Hoare jorn.bettin@softmetaware.com jeff.hoare@softmetaware.com \nSoftMetaWare PO Box 617 Waiheke Island Auckland, New Zealand ABSTRACT In most business software systems \nthe time dimension of business objects plays a significant role. Time is a crosscutting concern that \nis hard to separate from other business logic. We have developed a toolkit that allows existing business \napplication systems to be extended with \"time-conscious\" behavior in a non-intrusive way by factoring \nout all aspects of time-related behavior into a framework and a set of classes that is distinct from \nthe existing code base. The Time Conscious ObjectsTM (TCOTM) toolkit is currently implemented in JavaTM, \nbut through the use of generation technology the toolkit can easily be made available in any language \nthat supports polymorphism. Categories and Subject Descriptors D.2.2 [Design Tools and Techniques]: \nModel Driven Architecture - domain-specific architectures. General Terms Design, Standardization, Languages. \n Keywords Model Driven Architecture (MDA), domain-specific languages, domain-driven development, time, \ntemporal, versioning, undo, redo, auditability, logging. 1. INTRODUCTION For an overview of TCO functionality \nwe refer to the abstract of the OOSPLA'03 poster \"Time Conscious ObjectsTM : A Domain-Specific Framework \nand Generator\" in the OOPSLA'03 Companion. Currently the TCO toolkit is still a prototype. The intention \nis to release an early beta version towards the end of 2003 and to make TCO available as a commercial \nproduct in 2004. The potential of TCO lies in its ability to be easily integrated into existing application \nsystem environments. It provides opportunities for reengineering maintenance-intensive legacy code in \nmanageable, incremental steps. Before the functionality of TCO is expanded to provide advanced support \nfor the time-dimension-related requirements of specific types of application systems, we are looking \nfor constructive feedback from potential users, so that specific requirements can be factored into the \nTCO toolkit. It is quite possible that TCO quickly evolves into a small product line rather than a specific \nproduct. Already now it is clear that implementations will have to be provided for various technology \nstacks, such as a JavaTM J2EE\u00adcentric technology stack and a Microsoft\u00ae DotNET-centric technology stack. \nMDA\u00ae [1] generation technology is part of the TCO architecture, which will enable TCO to be released \nin a form that is suitable for extensive customer-specific configuration. The success of TCO toolkit \nwill depend on not relying on assumptions about the overall architecture and technologies present in \nthe development and deployment environment. Rather TCO is designed to smoothly plug into existing enterprise \napplication architectures, providing comprehensive functional coverage for a specific architectural concern \nthe time dimension. 2. SCOPE OF THE DEMONSTRATION The demonstration provides an overview of the architecture \nand the APIs that TCO uses to integrate with existing application system environments. Beyond that, the \ndemonstration shows on the basis of one or more small example applications, how TCO can be used to raise \nthe level of abstraction in platform independent models and in business application code [2]. TCO product \ndevelopment is work-in-progress and the demonstration is intended to be highly interactive, giving the \naudience opportunity to raise and discuss their specific time\u00addimension-related requirements. 3. REFERENCES \n[1] Model Driven Architecture. www.omg.org/mda/ [2] J. Bettin. Raising the level of abstraction of design \nmodels. OOPSLA 2001 Companion, (October 2001). Copyright is held by the author/owner(s). OOPSLA 03, October \n26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010.   \n\t\t\t", "proc_id": "949344", "abstract": "In most business software systems the time dimension of business objects plays a significant role. Time is a crosscutting concern that is hard to separate from other business logic. We have developed a toolkit that allows existing business application systems to be extended with \"time-conscious\" behavior in a non-intrusive way by factoring out all aspects of time-related behavior into a framework and a set of classes that is distinct from the existing code base. The Time Conscious Objects&#8482; (TCO&#8482;) toolkit is currently implemented in Java&#8482;, but through the use of generation technology the toolkit can easily be made available in any language that supports polymorphism.", "authors": [{"name": "Jorn Bettin", "author_profile_id": "81100085010", "affiliation": "Waiheke Island, Auckland, New Zealand", "person_id": "P643461", "email_address": "", "orcid_id": ""}, {"name": "Jeff Hoare", "author_profile_id": "81100032417", "affiliation": "Waiheke Island, Auckland, New Zealand", "person_id": "P643456", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949376", "year": "2003", "article_id": "949376", "conference": "OOPSLA", "title": "Time Conscious Objects&#8482;", "url": "http://dl.acm.org/citation.cfm?id=949376"}