{"article_publication_date": "10-26-2003", "fulltext": "\n A Modular QoS-enabled Load Management Framework for Component-Based Middleware Octavian Ciuhandu, John \nMurphy Performance Engineering Laboratory Dublin City University +353 1 700 7644 {ciuhandu,murphyj}@eeng.dcu.ie \nABSTRACT We present a new QoS-enabled load management framework for component oriented middleware. It \noffers the possibility of selecting the optimal load distribution algorithms and changing the load metrics \nat runtime. The QoS service level agreements are made at user level, transparent to the managed application. \n Categories C.4 [Performance of Systems]; D.2.8 [Software Engineering]: Metrics --- Complexity measures, \nperformance measures; D.2.12 [Software Engineering]: Interoperability --- Distributed objects. Keywords \nLoad, distribution, QoS, platform, middleware, optimization, adaptation, management, component. General \nTerms Algorithms, Management, Measurement, Performance, Reliability, Standardization 1. INTRODUCTION \nThe increasing demand for distributed applications and increasing load on existing distributed systems \nleads to a growing need for improved throughput and scalability. Many types of applications rely heavily \non predictable computing and networking services for performing their jobs in a timely manner. Distributed \napplications require a broad range of features, such as service guarantees and adaptive resource management \nfor supporting a wider range of QoS aspects, such as dependability, predictable performance, secure operation \nand fault tolerance [1]. As a result, the focus is shifting from programming to integration. Component \nand application QoS proves to be insufficient, end-to\u00adend (i.e. client to server) QoS support being needed. \n 2. MOTIVATION An architecture that integrates and coordinates the existing QoS technologies is needed \nfor providing end-to-end QoS. Integration and coordination must take place across all system resources, \nat all system levels and on all time scales of system development, deployment and operation. Copyright \nis held by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010 \n Most distributed systems are increasingly required to use commercial of-the-shelf components. The newly \navailable component technologies allow clients to invoke operations ignoring details such as component \nlocation, programming language, operating system platform, communication protocols or interconnects and \nhardware. Nevertheless, the lack of support in these components for QoS specification and enforcement \nfeatures, technology, performance, predictability and scalability optimizations has resulted in a very \nlimited development rate for advanced distributed applications [2]. This also causes an increase in complexity \nfor the load management problem. 3. PROPOSED APPROACH We propose a new QoS enabled load management service \nfor component-based middleware. It consists of a load monitoring module, a load prediction module, a \nQoS control module, all feeding information to the load evaluator module which selects the optimal load \ndistribution policy and a load distribution module that uses the selected policy for request distribution. \nAll modules have well-defined interfaces. The load management service has an instance active on every \nserver. The load distribution decisions can be taken in a collaborative way, all instances of the load \nmanagement service participating in this process, or using an elected coordinator (the other servers \nperiodically reporting to it and checking its state). While it reduces the load overhead it does not \nguarantee availability. Both options are available and according to application requirements one will \nbe chosen. Key features of the proposed load management service are that it provides application-level \nQoS, its modules can be activated / deactivated / exchanged at runtime and the service can be extended \nby adding new load distribution algorithms and new monitors at runtime. 3.1 Load Monitoring Module For \nsimple systems, observing only a few basic load metrics, (e.g. CPU, memory, network usage) are sufficient \nfor making good load distribution decisions. For complex systems, the performance can be influenced by \nresource contention and other complex factors thus component instances have to be monitored in order \nto select optimal load distribution. Our proposed solution is the use of pluggable load monitoring modules \n(e.g. CPU, memory, component instances monitors) that can be activated, deactivated or swapped at runtime, \naccording to system requirements. Different performance monitoring and prediction frameworks are being \ndeveloped [3] and can be used as plug-ins for our load management service. 3.2 Load Prediction Module \nFor some distributed systems, workload time evolution is fairly deterministic, thus predictions for its \nevolution in the near future can be easily made. For other systems, creating such a model is a difficult \nif not impossible task. We propose a load prediction module that will use the information it receives \nfrom the runtime environment and from the load monitoring modules. Information about the time evolution \nfor client workload will also be gathered. These will represent the entries for a modeling algorithm \nthat will create a model, based on which predictions will be made. 3.3 QoS Control Module The implementation \nof QoS as a part of the load management system is a key design issue (being totally transparent to the \ndistributed application load-managed). The QoS service levels are at application level, i.e. different \nusers accessing the distributed application can avail of different service levels but a user can not \navail of different QoS service levels for different operations. By QoS guarantees, beside guaranteed \nresponse we mainly understand response time guarantees. The QoS levels and their performance guarantees \nare specified in a standardized format at deployment time and can be changed during runtime. This is \nan important requirement since it offers the possibility of changing/adding QoS guarantees without the \nneed of changing any code in the distributed application. Based on the specified QoS levels, the QoS \nmodule establishes for every newly created connection the end-to-end QoS requirements (for the required \nservice level for that particular user). If end-to-end QoS requirements are not available for a connection \n(due to the infrastructure not fully supporting QoS) local QoS requirements are enforced and the connection \nis continuously monitored. If increased communication delays are detected the algorithm adapts the enforced \nQoS policies trying to maintain the service level agreement. While this can not offer full hard end-to-end \nguarantees, it offers the best solution for this situation. 3.4 Load Evaluator Module Most load distribution \nalgorithms are designed targeting specific load conditions, for which they realize an optimal distribution. \nA load distribution algorithm might not be able to handle degenerated load conditions (unstable applications) \nand the use of specifically designed algorithms for restoring system equilibrium is required [4]. Thus, \na key requirement for any load management system is the possibility of changing the load distribution \nalgorithm. The selection is made dynamically, at runtime, for ensuring high availability. For automatic \nload distribution algorithm selection it is required that all algorithms include a standard description \nfor the workload type for which they are most suitable. In order ensure that the modules of the load \nmanagement system are exchangeable, the particular combination of metrics used for load monitoring should \nbe completely unimportant, only the magnitude of the metric being considered while optimizing the load \ndistribution policy. This is a critical requirement for allowing dynamic load distribution algorithms \nand load monitoring modules runtime replacement. Based on the predictions from the load prediction module, \nthe system can preemptively adjust its configuration, minimizing the response time and optimizing the \nload distribution and system response for high-priority service levels. Servers can be activated/deactivated, \naccording to the information received from the load monitoring and load prediction modules (especially \nfor farms of servers hosting a number of distributed applications) 3.5 Load Distribution Module The \npolicy selected by the load evaluator module is used by the load distribution module for forwarding the \nincoming requests to the servers. The most important feature of this module is failover protection. A \ngood load distribution module should be always available and should be able to distribute the incoming \nrequests even if other modules of the load distribution service fail. The solution proposed is the inclusion \nof a simple load distribution algorithm, like round robin, in the load distribution module. If the load \nevaluator module fails due to some unknown errors, the load distribution module reverts to the simple \nalgorithm, ensuring that the system will keep on running albeit with degraded performance.  4. CONCLUSIONS \nWe have presented a framework for a modular QoS-enabled load management system. According to the complexity \nof the managed application, only some of the modules might be required, thus activated. The framework \noffers the possibility of optimally selecting the desired point of tradeoff between distribution overhead \nand performance improvements. The load management service offers the possibility of connecting to other \nsimilar services. The group of services, each managing the workload of a distributed application, can \ncooperate and share available resources in order to maximize the performance of all distributed applications. \nThe group can maintain a shared list of available servers and can temporarily transfer the control of \na (group of) server(s) from a low loaded system to a high loaded system. 5. ACKNOWLEDGMENTS The authors \nwork is funded by Enterprise Ireland Informatics Research Initiative 2002. 6. REFERENCES [1] R. Schantz \nand D. Schmidt, Middleware for Distributed Systems: Evolving the Common Structure for Network\u00adcentric \nApplications , The Encyclopedia of Software Engineering, J. Wiley &#38; Sons. December 2001, pp. 801-813. \n[2] V. Kachroo, Y. Krishnamurthy, F. Kuhns, R. Akers, P. Avasthi, S. Kumar, and V. Narayanan. Design \nand Implementation of QoS Enabled OO Middleware , Internet2 QoS Workshop, February 2000. [3] A. Mos and \nJ. Murphy, Understanding Performance Issues in Component-Oriented Distributed Applications: The COMPAS \nFramework , WCOP 2002, at ECOOP, Malaga, Spain, 2002. [4] C.-C. Hui and S. T. Chanson, Improved Strategies \nfor Dynamic Load Balancing , IEEE Concurrency, vol.7, July 1999.  \n\t\t\t", "proc_id": "949344", "abstract": "We present a new QoS-enabled load management framework for component oriented middleware. It offers the possibility of selecting the optimal load distribution algorithms and changing the load metrics at runtime. The QoS service level agreements are made at user level, transparent to the managed application.", "authors": [{"name": "Octavian Ciuhandu", "author_profile_id": "81309502788", "affiliation": "Dublin City University", "person_id": "PP14138674", "email_address": "", "orcid_id": ""}, {"name": "John Murphy", "author_profile_id": "81332517374", "affiliation": "Dublin City University", "person_id": "PP14189724", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949432", "year": "2003", "article_id": "949432", "conference": "OOPSLA", "title": "A modular QoS-enabled load management framework for component-based middleware", "url": "http://dl.acm.org/citation.cfm?id=949432"}