{"article_publication_date": "10-26-2003", "fulltext": "\n Extracting Domain- Specific and Domain- Independent Patterns Haitham Hamza Ahmed Mahdy Mohamed E. Fayad \nMarshall Cline Computer Science&#38; Engineering Dept. University of Nebraska-Lincoln Lincoln NE 68588, \nUSA Computer Engineering Dept. San Jos\u00e9 State University, San Jos\u00e9, CA 95192, USA MT Systems Co. 5419 \nBent Tree Dr., Dallas TX 75248, USA {hhamza, amahdy} @ cse.unl.edu m.fayad@ sjus.edu cline@ parashift.com \n ABSTRACT There are no mature guidelines or methodologies exist for extracting patterns. Software Stability \nModel [2] can provide a base for extracting patterns. This poster presents the concept of extracting \nboth domain-specific and domain- independent patterns from systems that are built using software stability \nconcepts. Categories and Subject Descriptors D.2.13 [Software Engineering]: Reusable Software reusable \nmodels. General Terms Design Keywords Stable Analysis Patterns, Software Stability, Enduring Business \nThemes, and Business Objects. 1. INTRODUCTION Theoretically, patterns seem to be obvious and can be easily \nlocated within the developed system. By observing considerable numbers of systems, developers can spot \nand extract their patterns [6]. However, in practice this approach does not scale well, since many developers \nfail to extract the patterns this way. Domain-specific patterns are defined here as those patterns that \ncapture the core knowledge of specific applications and, therefore, they can be reused to model applications \nthat share the core knowledge. On the other hand, domain-independent patterns are those models that capture \nthe core knowledge of atomic notions that are not tied to specific application domains and, hence, can \nbe reused to model the same notions whenever they appear in any domain. In SSM the model of the system \nis viewed as three layers: the Enduring Business Themes (EBTs) layer, the Business Objects (BOs) layer, \nand the Industrial Objects (IOs) layer. EBTs are the classes that present the basic knowledge of the \nunderlying industry or business. Therefore, they are extremely stable. BOs Copyright is held by the author/owner(s). \nOOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM 1-58113-751-6/03/0010. are the classes \nthat map the EBTs of the system into more concrete objects. BOs are tangible and externally stable, but \nthey are internally adaptable. IOs are the classes that map the BOs of the system into physical objects. \nFor instance, the BO Agreement can be mapped in real life as a physical Contract , which is an IO. The \npractitioner should consult [10], [3], [4] for heuristics to help identify EBTs, BOs, and IOs, and [12], \n[7], and [5] for examples of building systems using SSM.This poster presents the concept of extracting \nboth domain-specific and domain-independent patterns from systems that are built using software stability \nconcepts. 2. EXTRACTING PATTERNS USING STABILITY CONCEPTS The concept of extracting stable patterns \nfrom SSM is made possible due to the stable characteristic of both the EBTs and BOs. Systems that share \nthe same domain have commonalities in their models. As mapping to software stability concepts, the model \nthat captures the common aspects of some applications is a model that combines both the EBTs and the \nBOs of these applications. This sub-model forms a stable domain-specific pattern for these systems. To \nobtain stable domain-independent patterns from the stability model of one problem, we need to obtain \na second level of abstraction for each EBT and BO in the problem stability model. This second level of \nabstraction is obtained by modeling each EBT and BO using stability concepts. Each new stable model will \nstand as a pattern by itself. This pattern is focused on a specific problem and can be reused to model \nthis problem whenever it appears, therefore, it is considered to be a domain-independent pattern. Stable \ndomain-independent patterns can be further classified into stable analysis pattern (EBTs models) [6], \n[7], [8], and stable design pattern (BOs models). For instance, the stable model that represents the \nEBT Satisfaction is a stable analysis pattern. Similar reasoning can be applied to BOs: the stable model \nrepresenting the Account BO is a stable design pattern. 3. EXAMPLES OF EXTRACTING DOMAIN-SPECIFIC PATTERNS \n Renting applications have core aspects that are common and independent of the nature of the rented item. \nTherefore, capturing these core aspects in a single model is beneficial for developing different renting \nsystems without starting from scratch. Figure 1 gives part of the system for renting a car, as modeled \nusing the SSM concept. The EBTs, BOs, and their relationships in this system form a renting pattern that \ncan be reused as a base for modeling the rental of any entity [12]. The extracted renting pattern is \ngiven in Figure 2.  specifies  1.. * Figure 2. Renting Pattern Object Model  4. EXAMPLES OF EXTRACTING \nDOMAIN-INDPEDENT PATTERNS The EBT Negotiation can be used as a driver for building a stable analysis \npattern by generating its second level of abstraction. This can be achieved by modeling this EBT further \nusing software stability concepts. The resultant pattern is the Negotiation stable pattern (Figure 3). \nIn this model, AnyParty is a stand-alone stable pattern that models the party notion; hence it can be \nused to model any party in any application. The full documentation of this pattern can be found in [11]. \nExtraction of stable design patterns follows the same reasoning [12]. Figure 3. Negotiation pattern \nobject model  6. REFERENCES [1] Cline, M., and Girou, M. Enduring Business Themes. Communications of \nthe ACM, Vol. 43, No. 5, May 2000 101-106. [2] Fayad, M.E. Accomplishing Software Stability. Communications \nof the ACM, Vol. 45, No. 1, January 2002. [3] Fayad, M.E., and Altman, A. Introduction to Software Stability. \nCommunications of the ACM, Vol. 44, No. 9, September 2001. [4] Fayad, M.E. How to Deal with Software \nStability. Communications of the ACM, Vol. 45, No. 4, April 2002. [5] Fayad, M.E., and Wu, S. Merging \nMultiple Conventional Models into One Stable Model. Communications of the ACM, Vol. 45, No. 9, September \n2002. [6] Gamma, E., et al. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley \nProfessional Computing Series. Addison-Wesley Publishing Company, New York 1995. [7] Hamza, H. A Foundation \nfor Building Stable Analysis Patterns. Master thesis, University of Nebraska-Lincoln, USA, August 2002. \n[8] Hamza, H. Building Stable Analysis Patterns Using Software Stability. 4th European GCSE Young Researchers \nWorkshop 2002 (GCSE/NoDE YRW 2002), Erfurt, Germany, October 2002. [9] Hamza, H., and Fayad, M. E. Model-base \nSoftware Reuse Using Stable Analysis Patterns. ECOOP 2002, Workshop on Model-based Software Reuse, Malaga, \nSpain, June 2002. [10] Hamza, H., and Fayad, M. E. A Pattern Language for Building Stable Analysis Patterns. \nProceedings of Pattern Language of Programs 2002 (PLoP 02), Monticello- Illinois, USA, Sept. 2002. [11] \nHamza, H., Fayad, M.E. The Negotiation Analysis Pattern. Eighth European Conference on Pattern Languages \nof Programs (EuroPLoP 03), Irsee, Germany, July, 2003. [12] Hamza, H., Mahdy. A., Fayad, M.E., and Cline, \nM. Extracting Domain-Specific and Domain-Independent Patterns Using Software Stability Concepts. 9th \nInternational Conference on Object-Oriented Information Systems (OOIS 03), Geneva, Switzerland, September \n2003.  \n\t\t\t", "proc_id": "949344", "abstract": "There are no mature guidelines or methodologies exist for extracting patterns. Software Stability Model [2] can provide a base for extracting patterns. This poster presents the concept of extracting both domain-specific and domain- independent patterns from systems that are built using software stability concepts.", "authors": [{"name": "Haitham Hamza", "author_profile_id": "81100308956", "affiliation": "University of Nebraska-Lincoln, Lincoln, NE", "person_id": "P643450", "email_address": "", "orcid_id": ""}, {"name": "Ahmed Mahdy", "author_profile_id": "81100347632", "affiliation": "University of Nebraska-Lincoln, Lincoln, NE", "person_id": "P643419", "email_address": "", "orcid_id": ""}, {"name": "Mohamed E. Fayad", "author_profile_id": "81339498936", "affiliation": "San Jos&#233; State University, San Jos&#233;, CA", "person_id": "PP43122399", "email_address": "", "orcid_id": ""}, {"name": "Marshall Cline", "author_profile_id": "81100021656", "affiliation": "MT Systems Co., Dallas, TX", "person_id": "PP31023575", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949427", "year": "2003", "article_id": "949427", "conference": "OOPSLA", "title": "Extracting domain- specific and domain-independent patterns", "url": "http://dl.acm.org/citation.cfm?id=949427"}