{"article_publication_date": "10-26-2003", "fulltext": "\n MAS-ML: A Multi-Agent System Modeling Language Viviane Torres da Silva Carlos J. P. de Lucena Pontifical \nCatholic University of Rio de Janeiro (PUC-Rio), Computer Science Department/TecComm Group Rua Marques \nde S\u00e3o Vicente, 225, Rio de Janeiro, RJ, Brazil 22.453-900 {viviane, lucena}@inf.puc-rio.br ABSTRACT \nA multi-agent system modeling language (MAS-ML) that extends the UML (Unified Modeling Language) is proposed \nhere based on a conceptual framework (metamodel) called TAO (Taming Agents and Objects). The most important \ndifference between our approach and others presented in the literature is our clear definition and representation \nof the abstractions and behavioral features that compose MASs. Extensive experimentation is being used \nto access the expressiveness of models represented in MAS-ML and the ease to implement a multi-agent \nsystem from a specification expressed in our notation.  Categories and Subject Descriptors D.2[Software \nEngineering]: Design representation. General Terms Design, Languages Keywords Modeling language, multi-agent \nsystem, conceptual framework 1. PROBLEM DESCRIPTION In the present section we justify the need for a \nnew multi-agent system modeling language called MAS-ML (Multi-Agent System Modeling Language). Multi-agent \nsystems (MASs) are gaining wide acceptance in both industry and academia as a powerful paradigm for designing \nand developing software systems [1]. Together with this growth, new methodologies, methods, modeling \nlanguages, development platforms, tools and programming languages are being proposed. Agent-based systems \nrequire adequate techniques that explore their benefits and their peculiar characteristics. In particular, \nthere is a need for modeling languages for multi\u00adagent systems that explore the use of agents and other \nabstractions as first order modeling elements. Modeling languages should represent the static and dynamic \naspects of such systems by expressing the characteristics of all essential elements of MASs. Some modeling \nlanguages proposed in the literature, such as [2,6], are based on the UML in order to reduce the risk \nof adopting a new technology. The UML is used as a basis for extension because it is widely accepted \nas a de facto standard for object-oriented modeling; whereas we believe, as in [2], that a new modeling \nlanguage preferably should be an incremental extension of a known and trusted modeling language. Nevertheless, \nin its original form UML provides insufficient support for modeling MASs. Among other things, the UML \nCopyright is held by the author/owner(s). OOPSLA 03, October 26 30, 2003, Anaheim, California, USA. ACM \n1-58113-751-6/03/0010. metamodel does not provide support for modeling agents, organizations and agent \nroles. Current approaches [2,6] propose to extend the UML by expressing agents as a stereotype of objects/classes. \nThis is not satisfactory because stereotypes can only be used to indicate a difference in meaning or \nusage between two model elements with identical structure. Based on the definition presented in the UML \nspecification [5], stereotypes may not be used to represent two completely different paradigms. As a \nconsequence, the current UML extensions to deal with the fundamental MAS characteristics neither define \nnor clearly represent the elements they identify, nor their relationships. Therefore, we felt the need \nfor a new approach to extend the UML metamodel so that it could incorporate all features of multi\u00adagent \nsystems. 2. GOALS Our aim is to provide a multi-agent system modeling language that encompasses the \nessential static and dynamic aspects of MASs by emphasizing a clear representation for their concepts \nand relationships. Due to the non-existence of a set of commonly accepted abstractions to describe the \nstatic and dynamic aspects of MASs, we have developed a conceptual framework (metamodel) that expresses \nmost aspects of MASs. The TAO (Taming Agents and Objects) conceptual framework [3] provides an ontology \nthat makes it possible to understand the abstractions, and their relationships, when used to support \nthe development of large\u00adscale MASs. The ontology associates well accepted abstractions, such as objects \nand classes, to other abstractions, such as agents, roles and organizations. Together, they establish \nthe foundation for agent and object-based software engineering. We propose a multi-agent system modeling \nlanguage (MAS-ML) [4] that extends the UML based on TAO. The UML metamodel was extended by preserving \nall object-related concepts while including agent-related abstractions. To extend the UML metamodel according \nto the TAO meta-model concepts, we needed more than the three extensions mechanisms provided by the UML, \nnamely: tag definitions, constraints and stereotypes. Often it was necessary to add new metaclasses to \nthe UML metamodel to represent some new MAS concepts. 3. THE APPROACH 3.1 TAO In order to understand \nthe difference between MASs and object\u00adoriented systems and to provide foundations to better understand \nand define MAS elements, we have proposed the TAO conceptual framework. TAO is an evolving innovative \nconceptual framework based on agent and object abstractions, which are the foundations for modeling distributed \nsoftware systems. The TAO metamodel [3] defines the static and dynamic aspects of MASs. The static aspects \nare related to the definition of the entities (structural and behavioral features) and the relationships \nbetween them. The entities defined in TAO are object, agent, organization, role (agent role and object \nrole), environment and event. The relationships link two elements and describe how these elements are \nrelated to each other. The relationships defined in TAO are inhabit, ownership, play, control, dependency, \nassociation, aggregation and specialization. The dynamic aspects of the TAO metamodel describe the interactions \nbetween its static elements. They can be classified as primitive (elementary) dynamic processes and high-level \ndynamic processes. Primitive processes describe the most basic domain\u00adindependent interactions that exist \nbetween elements. The processes of creating and destroying MAS elements are characterized as primitive \nprocesses. High-level dynamic processes are more complex domain-independent behavior that are described \nbased on primitive dynamic processes and other high-level dynamic processes. 3.2 MAS-ML Our approach \ninvolved extending the UML metamodel to incorporate concepts related to the MAS theory. TAO defines three \nmain concepts entities, properties (structural and behavioral features) and relationships that have \nbeen mapped to the UML metamodel. In order to extend UML according to TAO non-object concepts, new metaclasses \nand stereotypes have been created and associated with the UML metamodel. When introducing new abstraction \nin the UML metamodel, it is necessary to create new diagram elements to represent the new elements and \nrelationships. Because of the set of different elements and relationships defined in the TAO metamodel \nthat have been incorporated in the UML metamodel, new diagrams Organization and Role Diagram have been \ncreated and UML diagrams that already exist Class and Sequence Diagram have been adapted. The three \nstructural diagrams Class, Organization and Role diagrams show all elements and all relationships defined \nin TAO. The Sequence diagram represents the dynamic interaction between the elements that compose a MAS \n i.e., between objects, agents, organizations and environments. The extended Class diagram also represents \nagents, organizations and the relationships between agents, organizations and classes as defined in TAO. \nThe Organization Diagram models the system organizations identifying their habitats, the roles that they \ndefine and the elements objects, agents and sub-organizations that play these roles. This diagram shows \nthe TAO s ownership, play and inhabits relationships. The Role Diagram is responsible for clarifying \nthe relationships between the agent roles and object roles. This diagram shows the TAO s control, dependency, \nassociation, aggregation and specialization relationships. 3.3 From Design Models to Code Software development \nbased on the agent-oriented paradigm depends on modeling and programming languages that provide the traceability \nbetween the requirement, analysis, design and the implementation code [2]. The proposed modeling language \ndefines agent, organization and environments as first order abstractions. It would be easier to use a \nprogramming language that also considers these elements as first order abstractions to implement MAS-ML \nmodels . An object-oriented programming language could be used as an alternative; however, the elements \npresented in the models need to be mapped to objects/classes. This work includes an analysis of existing \nagent and object\u00adoriented programming languages to support MAS implementation. Our aim is to evaluate \nthe mapping of agent\u00adoriented design models and concepts expressed in MAS-ML to object-oriented and agent-oriented \nprogramming languages.  4. SUMMARY The most important difference between our approach and others presented \nin the literature is our clear definition and representation of the elements that compose MASs and their \nbehavior. Our proposal is based on a conceptual framework (TAO) that describes the structural and dynamic \nproperties of MASs. The main contributions of our work can be summarized in three aspects: i) the proposal \nof a conceptual framework that defines the structural and dynamic aspects of MASs; ii) the proposal of \na modeling language that extends the UML, based on the conceptual framework; and iii) the mapping of \nthe design elements in the agent level of abstraction to a programming language. Our goal will be achieved \nthrough extensive experimentation with MAS-ML in multi-agent systems published as benchmarks in the literature \nand other realistic MAS applications. Specialists other than the author are conducting experiments. It \nis important to experiment with different application situations that explore a large spectrum of multi-agent \nsystem characteristics. The set of projects has been chosen to illustrate the structural and dynamic \naspects proposed in TAO and expressed by the MAS-ML. The contributions of creating an MAS modeling language \nwill be evaluated by expressing, in MAS-ML, several modeling situations that are difficult and/or impossible \nto represent in existing MAS modeling languages. These situations will be selected from the characteristics \nof MASs proposed in the literature. The MAS-ML designs will also be compared to designs provided by other \nmulti\u00adagent system modeling languages that extend the UML. 5. REFERENCES [1] Jennings, N.: On agent-based \nsoftware engineering, In Artificial Intelligence, 2000, 11, pp. 277-296. [2] Odell, J., Parunak, H. and \nBauer, B.: Extending UML for Agents, In: Proceedings of the Agent-Oriented Information Systems Workshop, \nOdell, J., et. al, Eds., 17th National Conference on Artificial Intelligence,2000, pp.3-17 [3] Silva, \nV. et.al: Taming Agents and Objects in Software Engineering, In Software Engineering for Large-Scale \nMulti-Agent System, Garcia, A. et. al Eds., LNCS, Springer, 2003. [4] Silva, V., Lucena, C.: From a Conceptual \nFramework for Agents and Objects to a Multi-Agent System Modeling Language, Technical Report CS2003-03, \nSchool of Computer Science, University of Waterloo, Canada, 2003. [5] UML, Unified Modeling Language \nSpecification, Version 1.5, http://www.omg.org/uml/, 2002. [6] Wagner, G.: The Agent-Object-Relationship \nMetamodel, In Proceedings of the 2nd International Symposium: From Agent Theory to Agent Implementation, \n2000.  \n\t\t\t", "proc_id": "949344", "abstract": "A multi-agent system modeling language (MAS-ML) that extends the UML (Unified Modeling Language) is proposed here based on a conceptual framework (metamodel) called TAO (Taming Agents and Objects). The most important difference between our approach and others presented in the literature is our clear definition and representation of the abstractions and behavioral features that compose MASs. Extensive experimentation is being used to access the expressiveness of models represented in MAS-ML and the ease to implement a multi-agent system from a specification expressed in our notation.", "authors": [{"name": "Viviane Torres da Silva", "author_profile_id": "81100631614", "affiliation": "Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, RJ, Brazil", "person_id": "P643500", "email_address": "", "orcid_id": ""}, {"name": "Carlos J. P. de Lucena", "author_profile_id": "81100226357", "affiliation": "Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, RJ, Brazil", "person_id": "PP37025365", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/949344.949383", "year": "2003", "article_id": "949383", "conference": "OOPSLA", "title": "MAS-ML: a multi-agent system modeling language", "url": "http://dl.acm.org/citation.cfm?id=949383"}