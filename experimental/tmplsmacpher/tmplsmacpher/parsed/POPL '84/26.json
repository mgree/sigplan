{"article_publication_date": "01-15-1984", "fulltext": "\n ON RELATIVE CQMPLEI'~NESS OF P~NG LOGICS ( Fxtended abstract ) Michal Grabowski Institute of Informatics \nUniversity of Warsaw PkiN p.o. Box 1210 00-901 Warsaw Abstract In this paper a generalization of a \ncertain Lipton's theorem (see Lipton [5]) is presented. Namely,we show that for a wide class of programming \nlanguages the following holds:the set of all partial correctness assertions true in an expressive interpretation \nI is uniformly decidable (in I) in the theory of I iff the halting problem is decidable for finite interpretations. \nIn the effect %~ show that such limitations as effective- ness or Herbrand definability of interpretation \n (they are relevant in the previous proofs)can be removed in the case of partial correctness. 1.B~CI~q~qOL~9 \nIn this section we recall same history of the considered problem and we restate the known results. In \norder to show the inherent ccmple~(ity of the problem of partial correctness Cod~ introduced the notion \nof relative completeness. Supplying }~oare's system with an oracle answering questions on vali- dity \nof first-order formulas he was able to sepa- rate the reasoning about the programs from the Permission \nto copy without fee all or part of this material is 8ranted provided that the copies are not made or \ndistributed for direct commercial advantage, the ACM copyright notice and.the title of the publication \nand its date appear, and notice is given that copying is by permission of the Association for Computing \nMachinery. To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; \n1983 ACM 0-89791-125-3/84/001/0258 $00.75 reasoning about the undrelying language of ivar- iants. The \nidea of oracle results in Ik)are-like system far programming language which is consi- dered in [3]. Tnis \nsystem is relatively complete, i.e. complete over expressive interpretations. ( An interpretation I \nis said to be expressive iff the weakest preconditions of programs are first-order definable in I. ) \n Natural question arose for other,more complica- ted programming languages : does the e~ressive- ness \nstand for the sufficient condition for the existence of relatively complete Hoare's logic ? Clarke ( \nsee [i~) d'%scovered that for languages with certain natural features ( e.g. call by name.parameter passing, \nfunctions,global variables and coroutines with local recursive procedures that can access global variables \n) it is impossibl e to construct a Hoare\u00b0s logic which is sound and relatively camplete in the sense \nof Cook.Tb~s inccmioleteness result is based om the observation that if a programming language possesses \na relatively ccmplete proof system for partial correctness assertions then the halting problem for finite \ninterpretations must be decidable. Lipton ( see [5 ]) attempted to prove the convers  e : if PL is \nan acceptable programming language and the halting problem for progra~s in PL is decidable for finite \ninterpretations then PL has a relatively complete proof system for partial correctness assertions. 258 \nRoughly spe6f~ing, a programming language ?L is said to be acceptable iff every program in PL can be. \neffectively translated into, for instance, Priedman's sehems ( see- [4]) and ~ is closed under reasonable \nprogramming constructs. Eventually, Lipton obtained the following partial answer : Th.l ( Lipton, 1977 \n) Let PL be a deterministic acceptable program- ruing language. Then the following are ecuivalent: i. \nIgJ has a ~ecidable halting problem for finite interpretat ions. 2. The true quantifier-free partial \ncorrectness assertions are recursively enumerable in .'n(I) and in a certain presentation of I for expressive \nand effective interpretations I. Clarke,German and }{alpern (see [2]) obtained a significant generalization \nof the Lipton's theorem to the first-order partial ( and total too ) correctness assertions. Their results \nare quoted below. An interpretation I is said to be Herbrand- -definable iff every element of I is the \nvalue of a constant term. Th. 2 (Clarke, C,~rman, Halpern 1982) Let PL .be a deterministic acceptable \nprogram- ruing language with recursion. Then the following are equivalent : i. PL has a decidable halting \nproble~ for finite interpretations. 2. The true first-order partial (resp. total) correctness assertions \nare uniformly (in I) decidable in Th(1) for expressive and !lerbrand- -definable ~nterpretations I. \nIf we limit ourselves to expressive interpreta- tions,then the following holds : Th. 3 (Clarke,Cerman,Halpern \n1982) Let PL be a deterministic acceptable program- ming language. Then the following are equivalent: \n I. PL has a decidable halting problem for finite interpretat iotas. 2. The true first-order p~rtial \n(resp. total) correctness assertions are decidable in Th(I) and in a certain presentation of I for exoressive \nand effective interpretations I. ~btice that a decision procedure (in Th.3) for correctness assertions \ndepends simultaneously on Th(1) and on I,i.e. it is not uniform in I. It means that such a procedure \ndoes not stand for a realistic analogue_ of Hoare-type proof system, since ~bare-type proof systems are \ninc~e,nencl~.nt of the particular concrete interpretation. 2.RELATIVE C(IMPLETF/TF~S OF PARTIAL COP~RECFNESS \n In this section our main result is presented. ~b shall prove, the following Th.4 Let PL be a deterministic \nacceptable program- mJ.ng language with recursion. Then the following are equivalent : I. PL has a \ndecidable halting problem for finite interpretations. 2. The t~ue first-order partial correctness assertions \nare uniformly decidable in Th(I) for expressive interpretations I. It seem~ that theorem 4 (ccrgparing \nto th.2,th.3) provides more information on ability to find good axiom system for ccmplicated programming \nlanguages In words of Clarke,german and Halpern [2] : \".Tn order for a d~cision procedure to be a realistic \nanalogue of ~ rlny~-}bare axiom system it should, in some. sense,be uniform; i.e. indepen- de.nt of the \nparticular interpretation that is being used.\" In order to outline the proof of our result some. definitions \nand notions are necessary.The basic one is the notion of an acceptable programming language. ~ do not \nquote the long definition and we refer the reader to the paper L2]. Intuitively, a programming language \nPL is said to be acceptable iff for every program in PL it is possible to effectively ascertain its \nstep-by-step C(mlputatio n in interpretation I by checking in I open formulas; moreover, PL is closee \nunc]er reasonable programming constructs. Vor instance, almost all  259 Algol-like programming languages \nare acceptable. Let ~ be an acceptable programming language. For a program P in PL ond for an interpretation \nI  ~(x,y) denotes the input-output relation of the program P in the interpretarion I. def. An interpretation \nI is expressive (for PL) iff for every program P in PL there is a first- -order formula Bp(x) such t~hat \nI Bp(X) iff for T \"  some y in I, ~(x,y). ~ef. TE ~\u00a3DI '~ iff for all x,v in T,if I ~(x) ' ' ! 3\" \n and ~(x,y) then I ~T(y). def. An interpretation I is weakly arithmetic iff there exist first-order \nformulas N(x) ,F(x,y) ,.q(x,y) , Z(x) ,h~d(x, y, z) ,Mult(x,y, z) (with respectively k, 2k,2k,k,3k ~nd \n3k free variables for sane. k) such that E der ~(:.s an equivalence relation on I k and formulas !:,7,'~,Add,Mult \n~efine on the .get {x I I~](x~ the mo~el M such that the guoteient model M/E ~ isomorphic to the standard \nmodel <~; 0, +l, +, * -) hbw we ar in e .nos~tion to outline t~ne proof of t~heorem 4. T~et 1 'rj= \n= expressive interpretation. AS in Lipton [5] ,our proof splits into two cases. The case when for every \nprogram P in PL there  is a number B such that P never accesses more than B values on any input was \nproved by Clarke,C~.rman and l~ipern in [2]. In the case when some program can access an un- bounded \nnumber of different values our approach is different from that of Clarke,German and I~alpern. The key \nidea is to represent the input-output rela- tion of a program by means of the le&#38;st relations satisfying \ncertain first-order conditions. ~ join fi~ed-point approach and ideas of coding of terms used by Clarke,German \nand ~Lalpern in [2]. Let P be in PL and let x={x I ..... Xq} be the set of t3~ee variables of the program \nP (dep(P) in ~] ) Let y = {Yl ..... Yql be a copy of x. Let N,E,Z,S,Add ,~llt be new predicate symbols \nfor arithmetical notions, H,U,F be (respectively) 2-ary, l-ary and and. 2-ary new predicate symbols. \n Lemma  We can effectively construct first-order axioms Fac (encod~ing) for }_~,U, and axioms SyntP \nfor F and a first-order formula InOUtp(N, ...,Mult,H,U,F) such that : i. For every first-order formulas \nN,...,Mult which model in I axioms Ax for aritahmatic (AXI-9 in [2]) and for ev~-ry first-order formulas \nII,U,F which moclel in I axioms Fac and SyntP,the following holds : for all x,y in I,if ~(x,y) then \nI ~InOu~(N ..... F) (x,y). 2. There exist first-order formulas N~, ..... F~ such that they model in \nI axionzs Ax, Falc,SyntP and for all x,y in I , ~(x,y) iff iff I~InOu~(N w ..... F~ )(x,y). Proof (Outline) \n The set Enc consists of recursive definitions for coding of terms over variables xvy (scmet/~ing like \nH(z,d) in [2]) and recursive definitions for uni- versal predicate [!(z) for open formulas over variables \nxuy: U(z) iff the z-th open formula over xvy is satisfied. (RecursJve definitions for I!,F involve~ N,E, \n...,~llt and recursive definitions for [I involve H,N,E,... ,Mult. ) ~ can construct a recursively enumerable \nsequenc e B0(x,y),81(x,y) .... of open fc~T~ulas such that ~ (x,y) iff I~B0(x,y)vBl(x,y)v... Let f(n) \n= standard cod of Bn(X,y). The set SyntP consists of recursive definitions  (for F) representing f \n(treated as a relation). We define InOUtp(N ..... F) = (~w) (.gv) (N(w)^N(v)AF(w,v)^U(v)). Let I be \nthe interpretation that is being consi- dered.Since. I is expressive,tJ~e theor~n of deMillo, Lipton, \nSnyder (see ~]) imply that I is we&#38;kly arithmetic.The relations which are defined in I by first-ordem \nformulas which make I we~kly arith- metic are programmable .in I (as relations). This fact is derivable \nfrom the proof of the theorem of de Millo,Lipton, Snyci~r. Recall that PL is assumed to be deterministic \nand it is closed under recursion. Recursive definitions in Fac and in SyntP \"work right\" on standard \nnatural ntunbers. Hence,point 2 of our lemma holds by expressivity of I. []  260 ~,~ Drove the theorem \nby r~-J~ing use of the followi ng. fixed-point r~le (,?R.) : pre:~.i.sses : Ax(~,... ,Mult), ~nc (.~,... \n,Mult, ~'{, U), ~qyntP (N ..... Mult), ~(~)--~(.Vy. ) (InOUtp(N\" ..... F) (x,y) --9 -~ ~(y) ) (for certain \nfirst-order formulas N,... ,M~It, H, U,F)  conclusion: ~{P]~ Let I ~ ~{P]~; . After constructing a \nformula InOutp(_N ..... _~) and .~.ts Er~.(N ..... H,U),.~yntP(N .... .... Mult), algorithms guesses \nthe forrm/las N,..., F such that the premisses of the rule (FR) are true in I,then applies the rule (FR). \n The lemma implies correctness of pur algorithm. Thus we have proved that the ~t of all parti&#38;l assertions \ntrue in I is uniformly recursively en~m~erable in Th ( I). It remains to be pro~ that the set of all \ntrue in I negations of partial correctness assertions is uniformly recursively en%mlsrable in Th(1). \n Notice that it is possible to assign, effectively to a program P a rec~sively enumerable sequence B0(x,y) \n,Bl(x,y),... ol .-,~en formulas such that ~(x,y) iff I~80(x,y).B l(x,y)v... The theorem follows from \nthe following fact: I ~ ~{P~/ iff there exists n in 60 such that I~ (3x, y) (\u00a2~(x) ~ 8n(X,y) z, -1~;(y) \n~. Concluding remarks i. Our method can not .be. transferred to the c&#38;se of total correctness.Tnis \nis solved by Clarke, German and }~alpern in ~] for case of Herbrand- -~'efinable and expressive interpretations. \n 2. He do not use coding, of finite sequences. 3. It seer~ that the proof of the theorem 4 suggests \na way for constructing, a relatively comp- lete ~roo r\" systPJn for c~lJ.cat~ prograrm~i.ng l~nguages. \n~m~e.lv, such a system sho~l].c! contain the rule (.~2.) eJ~d it should employ relational variable s \nin ordex to make possible to construct a formula InOutp (N, ... ,F) . 4. ~\"~leoreln 4 does not stan~ \nfor a ~efinite improvement of the Liptons theorem. Is ,it [x~ssible to reskn~e the assuraption that r~ \nis closed under recursion ? ,Moreover,the probleln of relative corapleteness of .c~n~,~Jc logics b~sed \non acceptable programming langLmges remains c~en. [i~ Clarke, F..M., ProgrammJ.ng lanquage constructs \nfor ~ich it is impossible to ob rain good. ;Toare axiom syste~%g. JACM 26, i, January, 1979 [2] Clarke,F..M. \nand CP.rman,S.M. and }~.Ipern, J.Y. On effective axionatizatio~s of Ibare Logics in 9th POPL symp.,January \n1982, 309-321 [3~ Cx)ok S.A., Soundness and c~leteness of axiom systeJa for program verification.SIAM \nJourn. on CxJnp. 7, i, pp. 70-90, Febr. 197~, t [~ Friedman, H., Algorithmic procedures, generali- zed \nTuring algnrit~,~ and elementary, recursion theory.Gandy and Yates (eds) Logic CJolloquJln 5] Lipton,R.J.,A \nnecessary and. sufficient cond- itions for exi.stence of ;k~_re Tx~ics.18th IDL~/~. Symp.FOC.S,pp. l-6,(]ctober \n1977 261 \n\t\t\t", "proc_id": "800017", "abstract": "<p>In this paper a generalization of a certain Lipton's theorem (see Lipton [5]) is presented. Namely, we show that for a wide class of programming languages the following holds: the set of all partial correctness assertions true in an expressive interpretation I is uniformly decidable (in I) in the theory of I iff the halting problem is decidable for finite interpretations. In the effect we show that such limitations as effectiveness or Herbrand definability of interpretation (they are relevant in the previous proofs) can be removed in the case of partial correctness.</p>", "authors": [{"name": "Michal Grabowski", "author_profile_id": "81100135636", "affiliation": "Institute of Informatics, University of Warsaw, PkiN p.o. Box 1210, 00-901 Warsaw, Poland", "person_id": "PP31079961", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/800017.800537", "year": "1984", "article_id": "800537", "conference": "POPL", "title": "On relative completeness of programming logics", "url": "http://dl.acm.org/citation.cfm?id=800537"}