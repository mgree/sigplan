{"article_publication_date": "06-21-1989", "fulltext": "\n\t\t\t", "proc_id": "73141", "abstract": "<p>Access anomalies are a common class of bugs in shared-memory parallel programs. An access anomaly occurs when two concurrent execution threads both write (or one thread reads and the other writes) the same shared memory location without coordination. Approaches to the detection of access anomalies include static analysis, post-mortem trace analysis, and on-the-fly monitoring.</p><p>A general on-the-fly algorithm for access anomaly detection is presented, which can be applied to programs with both nested fork-join and synchronization operations. The advantage of on-the-fly detection over post-mortem analysis is that the amount of storage used can be greatly reduced by data compression techniques and by discarding information as soon as it becomes obsolete. In the algorithm presented, the amount of storage required at any time depends only on the number V of shared variables being monitored and the number N of threads, not on the number of synchronizations. Data compression is achieved by the use of two techniques called <italic>merging</italic> and <italic>subtraction</italic>. Upper bounds on storage are shown to be V &#215; N<supscrpt>2</supscrpt> for merging and V &#215; N for subtraction.</p>", "authors": [{"name": "D. Schonberg", "author_profile_id": "81100198047", "affiliation": "Ultracomputer Research Laboratory, New York University, 251 Mercer St., New York, NY", "person_id": "P56229", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/73141.74844", "year": "1989", "article_id": "74844", "conference": "PLDI", "title": "On-the-fly detection of access anomalies", "url": "http://dl.acm.org/citation.cfm?id=74844"}