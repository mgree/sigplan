{"article_publication_date": "06-21-1989", "fulltext": "\n\t\t\t", "proc_id": "73141", "abstract": "<p>CST is a programming language based on Smalltalk-80<supscrpt>2</supscrpt> that supports concurrency using locks, asynchronous messages, and distributed objects. In this paper, we describe CST: the language and its implementation. Example programs and initial programming experience with CST are described. Our implementation of CST generates native code for the J-machine, a fine-grained concurrent computer. Some compiler optimizations developed in conjunction with that implementation are also described.</p>", "authors": [{"name": "W. Horwat", "author_profile_id": "81100647534", "affiliation": "Artificial Intelligence Laboratory and Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, Massachusetts", "person_id": "P293937", "email_address": "", "orcid_id": ""}, {"name": "A. A. Chien", "author_profile_id": "81406600821", "affiliation": "Artificial Intelligence Laboratory and Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, Massachusetts", "person_id": "PP39070302", "email_address": "", "orcid_id": ""}, {"name": "W. J. Dally", "author_profile_id": "81408597695", "affiliation": "Artificial Intelligence Laboratory and Laboratory for Computer Science, Massachusetts Institute of Technology, Cambridge, Massachusetts", "person_id": "PP40035201", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/73141.74827", "year": "1989", "article_id": "74827", "conference": "PLDI", "title": "Experience with CST: programming and implementation", "url": "http://dl.acm.org/citation.cfm?id=74827"}