{"article_publication_date": "06-21-1989", "fulltext": "\n\t\t\t", "proc_id": "73141", "abstract": "<p>Dynamically-typed object-oriented languages please programmers, but their lack of static type information penalizes performance. Our new implementation techniques extract static type information from declaration-free programs. Our system compiles several copies of a given procedure, each <italic>customized</italic> for one receiver type, so that the type of the receiver is bound at compile time. The compiler <italic>predicts</italic> types that are statically unknown but likely, and inserts run-time type tests to verify its predictions. It <italic>splits</italic> calls, compiling a copy on each control path, optimized to the specific types on that path. Coupling these new techniques with compile-time message lookup, aggressive procedure inlining, and traditional optimizations has doubled the performance of dynamically-typed object-oriented languages.</p>", "authors": [{"name": "C. Chambers", "author_profile_id": "81100528252", "affiliation": "Stanford University", "person_id": "PP31073982", "email_address": "", "orcid_id": ""}, {"name": "D. Ungar", "author_profile_id": "81100365263", "affiliation": "Stanford University", "person_id": "PP31098134", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/73141.74831", "year": "1989", "article_id": "74831", "conference": "PLDI", "title": "Customization: optimizing compiler technology for SELF, a dynamically-typed object-oriented programming language", "url": "http://dl.acm.org/citation.cfm?id=74831"}