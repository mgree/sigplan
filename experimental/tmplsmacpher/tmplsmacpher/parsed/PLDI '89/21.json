{"article_publication_date": "06-21-1989", "fulltext": "\n\t\t\t", "proc_id": "73141", "abstract": "<p>Inline function expansion replaces a function call with the function body. With automatic inline function expansion, programs can be constructed with many small functions to handle complexity and then rely on the compilation to eliminate most of the function calls. Therefore, inline expansion serves a tool for satisfying two conflicting goals: minizing the complexity of the program development and minimizing the function call overhead of program execution. A simple inline expansion procedure is presented which uses profile information to address three critical issues: code expansion, stack expansion, and unavailable function bodies. Experiments show that a large percentage of function calls/returns (about 59%) can be eliminated with a modest code expansion cost (about 17%) for twelve UNIX<supscrpt>*</supscrpt> programs.</p>", "authors": [{"name": "P. P. Chang", "author_profile_id": "81332492370", "affiliation": "Coordinated Science Laboratory, University of Illinois, 1101 W. Springfield Ave., Urbana, IL", "person_id": "PP31071764", "email_address": "", "orcid_id": ""}, {"name": "W.-W. Hwu", "author_profile_id": "81423595422", "affiliation": "Coordinated Science Laboratory, University of Illinois, 1101 W. Springfield Ave., Urbana, IL", "person_id": "P295860", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/73141.74840", "year": "1989", "article_id": "74840", "conference": "PLDI", "title": "Inline function expansion for compiling C programs", "url": "http://dl.acm.org/citation.cfm?id=74840"}