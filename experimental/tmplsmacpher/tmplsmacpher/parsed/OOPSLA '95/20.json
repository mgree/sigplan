{"article_publication_date": "10-01-1995", "fulltext": "\n Workshop on Design Patterns for Concurrent, Parallel and Distributed Object-Oriented Systems Organized \nBy: Dennis Kafura Greg Lavender Doug Schmidt Virginia Tech ISODE Consortium Washington University kafura@cs.vt.edu \nG.Lavender@isode.com schmidt@cs.wustl.edu 1. Overview The workshop was organized to stimulate and focus \nresearch on design patterns for concurrent, parallel, and distributed (CPD) object-oriented systems. \nWorkshop participants spent a day examining design patterns that capture the static and dynamic struc-tures \nof successful solutions to problems known to arise when building CPD systems. The goal of the workshop \nwas to document and collect common design patterns to facilitate the practical construction of CPD systems. \nThe emerging focus on design patterns in the object- oriented community offers developers of CPD sys-tems \nboth a language of discourse and a conceptual framework for capturing the essence of successful architectures, \ncomponents, policies, services, and programming mechanisms. Once expressed in the pattern form, CPD solutions \nmay be recast in new contexts to facilitate the widespread reuse of (micro- )architectures, detailed \ndesigns, algorithms, and implementations. Despite dramatic increases in network speeds and host processing \npower, the design and implementa-tion of CPD systems remains a challenging problem. Moreover, the growing \nheterogeneity of hardware/ software architectures and diversity of operating sys-tem platforms make it \nincreasingly difficult to directly reuse existing algorithms, detailed designs, interfaces, or implementations. \n1.1. Suggested Paper Topics The suggested topics for papers included: Identifying reusable patterns of \ndesign for con-structing flexible synchronization mechanisms. Identifying reusable patterns of design \nfor con-structing robust, extensible, and efficient commu-nication protocols and services. Identifying \nreusable patterns of design for con-structing reliable distributed objects. Identifying reusable patterns \nof design for con-structing groups of collaborating objects. Identifying patterns of design that enable \nthe con-struction of higher order language mechanisms for concurrent, distributed, and parallel programming \n(e.g., active objects, message passing, actors, meta-object protocols, etc).  1.2. Focus Issues Specific \nissues that authors were asked to focus on included: What types of patterns emerge when separating policy \nfrom mechanism? Can patterns of design be captured in mechanisms such that the mecha-nisms are parameterized \nby particular policies? What patterns arise when defining taxonomies for synchronization mechanisms? \nCan a standard library of reusable components be defined from which a wide-class of synchronization mechanisms \ncan be constructed? What types of patterns emerge in CPD systems, where efficiency concerns are often \nparamount, but where abstraction and efficiency are often in con-flict? What types of patterns emerge \nto support micro-architectures for common services and mecha-nisms required in distributed 00 systems; \nfor example: name services, exceptions, and event loops. Participation in the workshop was open to anyone \nwith an interest in advancing the scope of research in concurrent, parallel, and distributed computing. \nPar-ticipants were asked to submit an original paper that identified one or more design patterns based \nupon their experience building CPD systems.  2. Writers Workshop Format The workshop was organized in \nthe style of a writers workshop, popularized in the design patterns com-munity by the Pattern Languages \nof Programming (PLOP) conference and in other venues. Unlike the typical conference workshop, which is \nlike a mini- conference with authors presenting their papers to relatively passive listeners, the writers \nworkshop requires active participation by the audience, and mostly passive participation by the author. \nThe writers workshop format was conducted as fol- lows: A mediator introduces the author and the title \nof their paper. The author provides a short summary of the paper by reading a few paragraphs of his or \nher choosing. After this summary, the author is only allowed to make notes and cannot comment further \nduring the review process. The mediator asks two or three people to provide a brief summary of the key \nideas that the paper is attempting to communicate to the reader. Positive comments are then solicited \nabout the contents of the paper, the organization, and the writing style of the paper. Constructive criticisms \nare then solicited on the content, organization, and style. . Once all comments have been made, the \nauthor is reintroduced and allowed to ask for clarification of comments made on the papers by workshop \npartic- ipants. The author is then give an opportunity to make a few closing remarks about their paper. \n A key feature of this format is that once the author goes silent, any comments that are made regarding \nthe paper are addressed to the group as a whole, or the moderator, without direct reference to the author. \nThe purpose of this format is to allow the participants to make reasonably open and unconstrained remarks \nabout the author s paper. The opportunity exists for the participants to harshly critique a particular \npaper; however, the heat and rhetoric of the discussion is controlled by the mediator, who acts to focus \nthe dis- cussion on those aspects of the paper that will ulti-mately lead the author to realize where \nthe paper might be weak. The purpose is to convey to the writer how others interpret what is written \nand to help the writer make substantive improvements so that the ideas in the paper are clearly communicated. \n 3. Workshop Content Fourteen papers were accepted to the workshop. The papers were made available on \na web server so that workshop participants could have access to all papers prior to the official workshop. \nThe key to a success- ful writers workshop is that the participants read some, if not all, of the papers. \nThe organizers antici-pated that most participants would not be familiar with the writer s workshop format, \nso the workshop was organized into two separate sessions. The mom-ing session consisted of a group review \nof three papers selected by the organizers as representative of the common styles of design pattern papers. \nIn the afternoon section the participants split up into three parallel sessions, each headed by one of \nthe work-shop organizers. In the morning session, each of the organizers took turns moderating the critique \nof a paper so that par-ticipants could learn how a writers workshop is con- ducted. As expected, the \nreview of the first paper was dominated by a small number of people who had experience with the writers \nworkshop format, and who had read the paper beforehand. By the review of the second paper, more participants \nstarted contribut-ing constructive comments and criticisms (possibly having had time to skim the second \npaper while the first was being reviewed!). By the review of the third paper, most participants had caught \non to the style of the workshop and were making substantive contribu-tions. The groups and papers discussed \nduring the workshop are outlined below. 3.1. Group Discussion Papers Composite Messages: A Structural \nPattern for Com-munication between Components, by Aamod Sane and Roy Campbell, University of Illinois, \nUrbana-Champaign. The Broker Architectural Framework, by Michael Stal, SIEMENS AG Corporate Research \nand Devel- opment. Object Group: an Object Behavioral Pattern for Fault-Tolerant and Group Communication \nin Dis-tributed Systems, by Silvano Maffeis, Department of Computer Science, Cornell University. 3.2. \nGroup I (leader: Dennis Kafura) Using Replication for Distribution: Patterns for EfJi-cient Updating, \nby Charles Weir, Object Designers Ltd. Warden: A Pattern for Object Distribution, by Fem- ando Das Neves \nand Alejandra Garrido, LIFIA, La Plats, Buenos Aires. Recoverable Distributor: A Design Pattern for Fault-Tolerant \nSharing in Distributed Computing Nayeem Islam and Murphy Devarokonda, IBM T. J. Watson Labs. Managing \nContinuous Data Feed with Subscriber/ Publisher Pattern, by Raman Kannan, Monmouth University. 1. All \npapers are available on the web using the URL http://www.cs.wustl.edu/-schmidt/ OOPSLA-95/  3.3. Group \nII (leader: Greg Lavender) Design Patterns for Binding in Distributed Systems, by Steve Crane, Jeff Magee, \nNat Pryce, Department of Computing, Imperial College, London. The Pipeline Design Pattern, by Allan Vermeulen, \nGabe Beged-Dov and Patrick Thompson, Rogue Wave Inc. Identity Indirection, Chris Tarr, ObjectSpace Inc. \n 3.4. Group III (leader: Doug Schmidt) Thread-Specific Storage: A Pattern for Reducing Locking Overhead \nin Concurrent Programs, by Tim Harrison and Douglas C. Schmidt, Washington Uni-versity, St. Louis. Local \nSerialization Pattern, by Antonio Rito Silva, Joao Pereira and Pedro Sousa, INESC/IST Technical University \nof Lisbon. Buffered Collection and Buffered Iterator Patterns, by Phil Brooks, Mentor Graphics Corporation. \nPrivate Thread: A Software Pattern for the Imple-mentation of Autonomic Object Behavior John Gil-bert, \nObjective Software. 3.5. Final Discussion and Closing Remarks One sign of a successful workshop is when \nthe par- ticipants do not all rush for the door as the workshop is winding down. Almost all of the participants \nwere on hand for the final group discussion and closing remarks. The organizer s asked the participants \nto turn the table around and apply the writer s work-shop model to the way that the workshop was organ-ized. \nThey were asked to make constructive comments about the organization, structure and con-tent of the day \ns proceedings. Two key observations are: . Many participants remarked that they had not par-ticipated \nin a writers workshop before, and were really quite surprised at how much they had bene- fited and learned \nmore about the author s papers being able to have a group discussion, even though they may not have read \nthe paper in detail, Some participants commented that they plan to adopt the writers workshop format \nat their organi-zations as the preferred way to review and discuss papers. Some authors commented that \nalthough it was per- haps initially difficult for them to listen to and accept criticisms of their paper \nand ideas, they came to understand that many of the comments were in fact constructive and would enhance \nthe quality of their paper. The following summarizes some observations and issues that arose throughout \nthe group sessions and during the closing discussion: The forces that motivate an author to write a paper \nare often not the same as those that motivate some-one to read the paper. For most authors, this is a \nnot-so-obvious realization. The motivation section of a paper is often the most criticized as it either \nsets the correct framework and expectation for the rest of the paper, or leads to numerous misunder-standings \nabout the ideas and intents of the paper. There are different opinions on the degree of real code versus \npseudo-code that should be in a pat- terns paper. Some participants felt that real code was too detailed \nand detracted from the flow of the paper. Other participants felt that papers lacking real code were \nincomplete and vague. There was a fair amount of consensus that patterns should be written in a modular \nway, so that code was local-ized to the implementation section. This strategy allows readers with different \nlevels of interest in the details to benefit from the paper without being unduly distracted or disappointed \nin the level of detail. Performance is a dominant issue in CPD systems. Many patterns do not seem to \nconvey this ade-quately since they tend to focus on structural and behavioral aspects, rather than performance \naspects. There was general agreement that optimi- zation patterns are a fruitful direction for CPD patterns \nresearch. Many CPD patterns present high-level architec-tural relationships while trying to remain imple-mentation \nneutral. It is difficult to totally avoid implementation bias in describing a general pattern applicable \nto CPD systems because implementa-tion issues such as location, policies, mechanisms, and algorithms \nquickly manifest themselves. Architectural CPD patterns are perhaps best described in general terms, \nfollowed by a discus- sion of the related patterns supporting an imple-mentation and the forces that \nlead one to make specific implementation choices, or perhaps more importantly, indicate which choices \nto avoid. A final observation is that there were many instances of patterns for concurrent and distributed \nsystems, but no contributions from the parallel computing domain. Effort should be made to com- municate \nwith researchers and practitioners in the parallel computing domain to solicit their contribu- tions \nto the area of CPD patterns.  4. Participants Phil Brooks, Mentor Graphics Inc. Murphy Devarokonda, \nIBM T. J. Watson Labs Jim Doble, BNR Gabe Beged-Dov, Rogue Wave Inc. Il-Hyung Cho, Clemson University \nAlejandra Garrido, University National dela Plata John Gilbert, Objective Software Inc. Hermann Huni, \nGLUE Software Engineering Nayeem Islam, IBM T. J. Watson Labs Raman Kannan, Monmouth University Doug \nLea, SUNY Oswego Donald Liib, Royal Institute of Technology, Sweden Fernando Das Neves, University National \ndela Plata Ed Posnak, University of Texas at Austin Nat Pryce, Imperial College Aamod Sane, University \nof Illinois at Urbana Kevin Shank, Rochester Institute of Technology Antonio Rito Silva, INESC Technical \nUniversity of Lisbon Chris Tarr, ObjectSpace Inc. Patrick Thompson, Rogue Wave Inc. Anand Tripathi, National \nScience Foundation Allan Vermeulen, Rogue Wave Inc. Charles Weir, Object Designers Limited Bob Wilhelm, \nObjective Control Inc. \n\t\t\t", "proc_id": "260094", "abstract": "", "authors": [{"name": "Dennis Kafura", "author_profile_id": "81100565123", "affiliation": "Virginia Tech", "person_id": "PP14195853", "email_address": "", "orcid_id": ""}, {"name": "Greg Lavender", "author_profile_id": "81100334209", "affiliation": "ISODE Consortium", "person_id": "P99443", "email_address": "", "orcid_id": ""}, {"name": "Doug Schmidt", "author_profile_id": "81339526336", "affiliation": "Washington University", "person_id": "PP43122447", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260094.260266", "year": "1995", "article_id": "260266", "conference": "OOPSLA", "title": "Workshop on design patterns for concurrent, parallel, and distributed object-oriented systems", "url": "http://dl.acm.org/citation.cfm?id=260266"}