{"article_publication_date": "10-01-1995", "fulltext": "\n Legacy Systems and Object Technology Workshop Summary Yeona Jang AT&#38;T Bell Labs. 101 Crawfords \nCorner. Rd. Holmdel, NJ 07733 yeona.jang@att.com 1. Introduction Since the invention of the wheel, promises \nof every new technology have been clear. Unfortunately, the materialization of these promises is hardly \na trivial task, and object technology is no exception. We are learning that object technology is no silver \nbullet which will solve all legacy problems. Nevertheless, many information professionals believe that \nobject techniques can usefully reduce the difficulties associated with legacy systems in a pragmatic \nway. The Legacy Systems and Object Technology Workshop was held in Austin, TX, on October 16, 1995, in \nconjunction with the Conference on Object-Oriented Programming Languages Systems and Applications (OOPSLA \n95). The purposes of the workshop were mainly two-fold: . .. promote interaction among researchers and \npractitioners with interests in legacy systems and object technology. . to promote in-depth discussion \nof advanced directions that will improve the use of object technology in migrating and integrating legacy \nsystems. We were interested in exchanging research ideas and results which will not only contribute \nto the academic arena, but to the business community as well. In this workshop, 7 papers were presented. \nIn addition, two panels were organized to discuss issues around the use of object technology in real- \nworld legacy environments. 2. Paper Presentation Papers presented can be grouped into the following \nthree areas: Issues around migrating from legacy systems environments to object-oriented environments \nin real world Cl) Approaches to migrate from legacy systems environments to object-oriented environments \n(CZ) Approaches to convert legacy software to object-orientation ((23) Adapting a Switching System Software \nto Object- Orientation (Cl) [Aarne Yld-Rotiala]: This paper presents questions that need answers in making \ndecision on ?o migrate or not to migrate in real-world business environments. Nokia Telecommunications \nswitching software consists of around 8 million lines of code, written mostly in C, PL/M and internal \nenhancements on SDL, TNSDL. This system has its roots in the early eighties, and has a large installed \nbase. While the product is still evolving, the goal is to have it evolve in a way that does not consume \nany more development and maintenance resources than absolutely necessary. Some experience indicates that \nobject technology can provide some benefits. However, bending an existing system with a large installed \nbase toward object orientation or any other unproved technology direction could cause problems and difficulties. \nInteresting questions raised in this paper include the following: . What should be known to make the \ndecision of the new 00-layer in the product s internal architecture? . How could one reap the biggest \nbenefits from 001 . When is it too late to try OO? The reuse community seems to agree that a 20% modification \nis as costly as new development; can a similar rule of thumb be found for legacy systems and OO? Migrating \nto Object Data Management (Cl, C2) [Arthur M. Keller and Paul Turner]: This paper discusses issues of \nmigrating to object data management. It also presents risks, benefits, and how to mitigate those risks \n-medium term issues and the migration process. It identifies options for migration to object data management. \nThe key observation made in this paper is that often, much of the benefit of using object data management \narises from object-oriented programming and does not require storing data in an object-oriented database. \nIn fact, continuing to store data in a relational database, and accessing that data to allow programming \nin an object programming language provides much of the benefit at significantly reduced risk and cost, \nas compared with migrating to an object-oriented database. This paper describes the alternative of storing \ndata in relational databases and building object-oriented applications using C++. Object-Oriented Integration \nof Legacy Systems-Maintaining Global Integrity Through Mediators (CZ) [Andreas Loew and Thomas Kudrass]: \nThis paper presents an overview of the Persistence product, an object-oriented interface to relational \ndatabases, that has been tested on the integration of multiple heterogeneous relational systems. Multidatabase \naccess provided by Persistence is based mainly on mapping between local relational schemes and their \ntranslation to the equivalent object models (particular database connections and tables). This paper \npresents a Persistence-based component called mediator, to achieve interoperability (mutual accessibility, \na common query language and data model as well as global dependencies) between heterogeneous local database \nsystems and to enforce all types of global semantic integrity constraints. It also presents an evaluation \nexample developed to prove the feasibility of this approach by implementing a prototype for the mediator \nbased on Persistence. Enterprise/Integrator: Using Object Technology for Data Integration (0) [Travis \nRichardson and Jaideep Srivastava]: This paper addresses the problem of integrating data instances from \nmultiple sources, based on the concept of data integration reference model. In this reference model approach \nto integration, data from local databases undergo a multiple-step transformation process. For data from \nlocal databases, a proxy for the corresponding object/record in the local database is created. A proxy \nis called an export domain object. An export domain object is then transformed to its logical equivalent \ntype in the global database. Objects in the global database are homogenized versions of export domain \nobjects, i.e., objects modeling the same real-world object have the same structure. Once local data are \nconverted to logically equivalent global objects, groups of mapped objects that represent the same real-world \nentity are clustered, using semantic knowledge which is classified into generic, domain specific, and \nuser-provided. Each cluster of mapped objects corresponds to a unique real- world object, called a composite \nobject in the global database. The next step is to derive attribute values for a composite object from \nthe corresponding values of its cluster of mapped objects. In case of conflicts, semantic knowledge is \nused to compute the most appropriate value. The fully formed composite object is used to determine changes \nthat will have to be made to each mapped object in a cluster. Changes made to each mapped object in the \nglobal database are then communicated back to its corresponding export domain object. The final step \nis to apply the changes made to the export domain objects to the corresponding local database objects. \nIssues raised during the workshop were around the complexity of constructing and maintaining global models \nand transformation rules, particularly in fast-evolving real-world environments. ..1QIc Interfacing \nObjects to Legacy Systems in TRaDS (CZ) [Tyrone Ebert and Darko Bojanic]: This paper presents TRaDS (Telephone \nRepair and Diagnostic System), an 00-based product for use by Telephone company clerical and repair staff \nto diagnose and solve telephone related problems. A key component of TRaDS is its interface to several \nlegacy systems and RDBMSs. The approach taken is to extend an existing DCE-based server to interface \nto various legacy systems, and to design a client side framework in Smalltalk that hides legacy sources \nfrom object applications. Database objects are identified to encapsulate knowledge about different sources \nof information and any specific legacy system related data conversion. In TRaDS, a range of reusable \ncomponents were developed. In addition, a set of tools were developed that enables the development of \nObject applications interfaced to legacy systems in a timely, adaptable, and maintainable manner. Accessing \nOODB Data from Legacy (Relational) Tools (CZ) [Michael J. Carey and Jerry Kiernan]: This paper presents \nan approach to enable legacy relational database tools, such as report writers and middleware query engines, \nto access data that resides in object-oriented databases, instead of enabling object-oriented tools and \nlanguages to gain access to (object-oriented views of) legacy relational data. A major purpose is to \nprovide standard SQL access to data residing in 00-DBMSs such as ObjectStore. An effort to port 00-SQL \nto several other object-oriented platforms is currently under way. An effort to extend it to support \nadditional functionality (such as updates) in the future is planned. Using Executable Domain Models to \nImplement Legacy Software Re-Engineering (C3) l Jean-Marc DeBaud, presented by R. LeBlanc]: This paper \nadvocates a domain-centric approach to the evolution of legacy systems. The migration of legacy systems \nis a difficult endeavor because traditional methods have two principal deficiencies. First, they fail \nto capture the context of a system, i.e, its domain. Second, the legacy system s comprehension results \nare not directly usable for the system evolution. This paper proposes the construction of executable \ndomain models to alleviate both problems. The construction of an executable domain model entails a process \nof domain analysis that leads to a domain model, as well as the transition of the former to an executable \nstate. The domain model provides domain expectations that drive legacy system understanding. The executable \ndomain model provides a medium in which the result of the legacy system comprehension can be recorded. \nThe executable domain model is instantiated using the system requirements derived during program comprehension. \nThe artifact thus created takes the role of the re-engineered program. The work uses the technique of \nobject-oriented framework as the executable domain model representation. 3. Panel Discussions In addition \nto paper presentations, two panel discussions were made to address issues on using object technology \nin legacy system integration and migration. The panel held in the morning session discussed the question \nof To migrate or not to migrate , focusing on organizational issues in applying 00 technologies to legacy \nsystems. The four panelists for this panel discussion were Sandra Heiler, Steve Armstrong, Lars-Ake Johansson, \nand Arthur M. Keller. Distributed object management, heterogeneous DBMSs and metadata repositories are \nfrequently mentioned as important parts of future frameworks for exploiting legacy systems. These technologies \nshare the unfortunate property of not yet being up to the task, at least for large, production environments. \nAs information competition is increasingly fierce in the marketplace, however, waiting for these technologies \nto mature can have significant economic and social consequences to organizations. The other panel, held \nin the afternoon session, focused mainly on issues around use of immature technology in real world problems. \nThe four panelists for this panel discussion were Alice Schafer, Ken Allen, Paul Klinker, and Rich LeBlanc. \nThe following summarize results of panel discussions: . Can object technology solve information problems \nthat companies and organizations are encountering in current legacy systems environments? One suggestion \nin answering this question was to take a step back and ask ourselves the fundamental question of Why \nAustin, TX October 15-19, 1995 companies and organization are investigating an object technology migration \navenue? (Business) systems users often care less about what technology is used in support of their information \nneeds, but care more about whether or not they can get quality information in a cost-effective, timely \nmanner so that they can compete effectively in today s information economy. So, the question of Can object \ntechnology solve information problems that companies and organizations are encountering in current legacy \nsystems environments? can be reformulated to Can object technology allow to deliver quality information \nrequired by business needs fast, cheaply, and consistently? . There are lots of promises around object \ntechnology but no proof that it actually solves information problems effectively, which only adds confusion \nto decision makers such as IT managers. Object technology is often built and tested in a green field \nwhere interactions and interdependencies that are common in fast-changing, dynamic real worlds do not \nexist. Object-oriented systems can be tomorrow s legacy systems, complicating tomorrow s systems environments. \nHybrid systems environments where today s legacy systems and tomorrow s legacy systems coexist can further \nhinder a company s ability to respond to change in information needs in a timely, cost-effective manner. \nCurrent lacks in helping make go or no go? decision include, but not limited to: b lack of systematic \nmethodology or tools that will help decision makers make educated, well-calculated decisions lack of \nmetrics for measuring success of object technology migration objectively from business perspectives, \nin other words, business impacts. While there are some claims of success, lack of metrics tied to business \nimpacts makes it difficult to evaluate the success within the business context . In making go or no \ngo decisions, not only technical but also organizational issues must be taken into account. One of key \nchallenges is how to help legacy systems developers and users to make a paradigm shift (from COBOL mind \nset to object-oriented mind set ). . It appears that companies are cautious about migrating to object-oriented \nenvironments. Acknowledgment The author would like to thank Thomas Brando and Arnie Rosenthal at MITRE \nfor their help and dedication to turn the concept of this workshop into reality. The author also would \nlike to acknowledge Sandra Heiler at GTE and Alice Schafer at MITRE for moderating panels. Without their \nthought-provoking moderation, we would have not been able to have such productive and fun discussions. \nMost of all, the author would like to thank all the attendees for their support and enthusiasm - Thank \nyou all!  \n\t\t\t", "proc_id": "260094", "abstract": "", "authors": [{"name": "Yeona Jang", "author_profile_id": "81546857156", "affiliation": "AT&T Bell Labs, 101 Crawfords Corner. Rd, Holmdel, NJ", "person_id": "PP311532100", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260094.260275", "year": "1995", "article_id": "260275", "conference": "OOPSLA", "title": "Legacy systems and object technology: workshop summary", "url": "http://dl.acm.org/citation.cfm?id=260275"}