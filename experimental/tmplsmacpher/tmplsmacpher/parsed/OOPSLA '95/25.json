{"article_publication_date": "10-01-1995", "fulltext": "\n Are Object oriented CASE F rameworks Ready for Prime Time? 00~ 95 WolFkshop K. Narayy Cs3: Computing \nServices Support Solutions email: swamy@compsvcs.com WWW: www.compsvcs.comfcs3 Adrian Blakey Sybase \n Workshop I?utici~&#38; and Position F apers The following people were present at the above OOPSLA workshop: \nMark Baker, ObjectTime Frank Belz, TRW Gregory Meyers, Rational Karin Kolbe, Univ. of Technology James \nNoble, Univ. of Technology Dennis de Champeaux, Onto00 Shaike Artsy , Transtar Bruce Larsen, AT&#38;T \nDavid Laurence, AT&#38;T Nancy Lewis, AT&#38;T Christian Bremeau, Stanford Management Group Peter Pircher, \nIDE Kevin Benner, Andersen Consulting The position papers of the participants can be found on the World \nWide Web at: www. compsvcs. com/cs3/oopsla. html 1. WorlahopGoalsaudStru~ Object-oriented (00) methods \nwill not really be usable in practice unless they are accom-panied by tools that provide scalability \nto the size and complexity of real-world systems. This workshop was designed to explore the question: \nAre Object-Oriented CASE Frame- works Ready for Prime-Time? Participants were drawn community, practitioners, \nvendors. The goal was Addendum to the Proceedings from the research and CASE tool to assess how well \n OOPSLA 00 CASE tools are fulfilling their objectives in practice for production quality systems, and \nhow they could be improved. The workshop was organized into the follow- ing segments:  session I: What \nis Right and What is Wrong with 00 CASE Tools? session II: Analysis of Problems with 00 CASE Tools. session \nIII: Approaches to Improving 00 CASE Tools. !!4ssion Iv: Barriers and Enablers to Implementing Approaches \nEach session was kicked off by a couple of short (10 minute) keynote presentations. The goal of these \npresentations was to pro- vide the speaker s own opinion about issues of technology and implications \nfor the larger community rather than the details of the speaker s specific tools or projects. This proved \nto be a very effective format. 2. sessionRe_Dorts Session I provided reports from industrial users of \nCASE technology. Specifically, representatives from AT&#38;T, TRW and Andersen Consulting described their \nexperi-ences with CASE tools, either in real projects 95 155 or in assessments of their suitability to \nmeet the requirements of future large projects. The AT&#38;T group, in particular, had made heavy use \nof CASE tools in building their new products. There were several problems they discovered with CASE tools, \nlargely in areas of flexibility, ability to handle real-world complexity and abstractions for large models. \nThey did find support for simulation and early execution to be most useful for their project personnel. \nIn the general discussion that followed, concerns were expressed about the following sorts of problems: \n. Maturity/Robustness of Tools. . Adaptability of methods to real Project situations. + Inadequacy of \nmodeling primitives themselves. + Inadequacy of tools that  support the methods. . Vertical vs Horizontal \ntool support + Does the CASE tool cover the entire process or provide ability to integrate with other \ntools? . Inadequate simulation capabilities, even where it is easy to implement. . No metrics on how \ntool is helping. + Tools could be help in gathering statistics that help calibrate the exact impact of \nthe tools. . Navigation and search for components in a large system. . Overall process support --methdology \nvs entire lifecycle. + 00 CASE tools cover a small portion of the software development process. 0 No \nsupport for methodology in the large -- small view persists. + This is somewhat related to the process \nissue --CASE tools largely support individuals, not the overall large-scale design and configuration \nissues. . Interoperability between CASE tools and development environment. + How does the CASE tool interface \nto other tools? . Interoperability between methods. + Is there support for more than one method? . Configuration \nmanagement at the model level and at other levels. . No support for incorporation of non-formal knowledge. \n+ No method covers all the information in a software project. What is one to do with non-formal data? \nClearly, of the above litany of problems, not all could be discussed within the scope of the one-day \nworkshop. Nevertheless, after some prioritization discussions, substantive discus-sion of several major \nissues did follow. In Session II, the University of Technology, Sydney, group pointed out that tools \nare not doing a good job of handling CASE issues even in the small. For example, tools have unrealistic \nprocess requirements (e.g., order of specification of a diagram), that are completely unnatural for people \n--who are generally likely to specify things in arbitrary order. CASE tools treat models like pro-grams \n--and manage them just like they do program code. Models, however are not exactly the same as program \ncode --for example, models serve as communication mechanisms between people. Because of such observations, \nthe University of Tech-nology group advocated using more flexible architectures like whiteboards, etc., \nwith enough incorporated semantic content for the tools to know what the user is engaged in doing. An \nimportant point was that, while the grand technological blueprint for CASE tools envisions that they \nwill be used by masses of people connected with program-ming (but not necessarily hard-core pro-grammers), \nthe truth is that CASE tools are really engineered to be used by a small coter- ie of indulgent software \ntechnology gurus! Using ObjecTime as an example, it was pointed out that early feedback through execution \nsupport was the added advantage of CASE tools. An analysis model acquires a whole new degree of importance \nif it can be executed in some way. This kind of valida- tion is not available via any other technology, \nand could provide users with important new reasons to take CASE technology seriously. In Session III, \nthe DataBench work from Stanford Management Group was discussed. This work is interesting because it \nrepresents one particular commercial approach to ad-dressing many of the issues raised in Session I, \nalbeit in a limited manner: . Integration issues beween different CASE tools. . Method and tool interoperability \n. Accommodation of multiple server targets (flat files, SQL Engines, 00 Databases, PCTE, etc.) . Process \nmodeling and enactment hooks through Process Weaver. An important contribution of the DataBench work \nis the metamodel to span multiple methods. Vendors, for largely business reasons, are not opening up \nenvironment interfaces. CASE tools, therefore, often see themselves as little islands of computing, rather \nthan as cooperatng participants in a society of tools that together support the software development \nprocess. The reaction of the audience to the Data-Bench was somewhat mixed. While the import of the work \nwas clear, the architecture of the system itself was quite complicated and, in the view of many, it stretched \ncreduli- ty to believe that such an architecture would be the basis for constructing heterogeneous environments \nwhere the building blocks were pre-existing CASE tools. On the contrary, once one tries to build environments \nwith cooperating CASE tools as they currentIy e&#38;t, one can easily understand the complexi- ty of \nthe DataBench architecture! In the latter part of Session III, the Case Data Interchange Format (CDIF) \nwork was de-scribed in some detail. It is a consortium of CASE users and vendors who are devising standards \nand formats for the free exchange of information across CASE tools of different vendors, different methods, \nand so on. The CDIF effort brings vendors together with a sense of neutrality --highlighting opportu-nities \nfor unifying similar work, and discov- ering the basis for real differences. Because of the similarity \nof concepts between differ-ent object-oriented methods, this effort endeavors to foster cooperation through \ncanonicalization of concepts and standardiza- tion of interfaces. While it is difficult to argue with \nthe laudable goals of the CDIF effort, ironically, interest in CDIF has not been particularly large or \nvigorous --although the DataBench effort has incorporated this standard. Why this is so remains an important \nquestion --especially if the large users of CASE (such as Boeing, and other aerospace companies for example) \nsupport CDIF . Reaction from the audience to the CDIF work was quite skeptical. For example, there was \na feeling expressed by the AT&#38;T group that, in their considerable experience, no one uses a single \nmethodology all the way through its various dictates, let alone lots of different methods in all their \ndetails. People do not want to use the CASE tools of a single vendor in general because of their inflexibili- \nty or clumsiness in handling realistic situa-tions, much less the CASE tools of different vendors. In \nthe experience of the AT &#38; T team, for instance, traceability, querying of the object model, searching \nfor components, and interfaces to other environment tools seemed much more vital than the sort of problems \naddressed by CDIF. Despite these misgivings, CDIF represents one effort to address some of the issues \nraised in Session I through standardization. Whether or not the effort will prove fruitful remains to \nbe seen in the future. In the final session, there was an attempt to consolidate the day s proceedings. \nObject-Oriented CASE tools clearly do not solve all problems with small team (or even individu-al) software \nprojects because they lack semantic information about what users are doing. There are also numerous big \nteam issues that they do not address --such as configuration management, system design, and process issues. \nExecution support would make CASE tools attractive. In practice, however, few seem to provide such capabili- \nties. Part of the problem is that many of the methods themselves are not sufficiently formal as to make \nexecution or simulation computationally feasible. There are several technological tradeoffs that cause \nmajor tensions in the way CASE tools currently work: Tension 1: Deep semantics (necessitated by execution \nor simulation) requires a single, very formal, detailed notation. Practical usage by lots of novice users \nrequires a much more flexible, possibly even informal, nota-tion . T&#38;on 2: Large 00 models require \nviewing and navigation, but keeping consistency across views is very complex, especially in a large, \ndistributed software development project. T&#38;on 3: Horizontal Integration versus Vertical Integration \nof CASE tools. Not surprisingly, perhaps, no vendor has been able to solve both these problems simultane-ously. \nThose that focus on integration issues cflirT;g;vide much by way of deep support . Tension 4: At the \nfront end of a CASE tool, there is great need for flexibility in model definition. However, at the back \nend, there has to be complete compatibility with execu-tion engines, repositories, etc. These tensions \npose great technical challenges in a software engineering sense, and help to explain why CASE tools in \npractice have yet to realize their full potential. 3. Parting Short Shots... At the conclusion, participants \nwho still remained were given the opportunity to name one capability that they would add to CASE tools \nto make them more useful and usable. While this laundry list is clearly the opinion of one group, it \nmight provide CASE tool builders a good idea of how the next genera- tion of their products should look. \nMark Baker: Targetting environments and test cases for real validation of the model. Gregory Meyers: \nMore support for overall process of product development, because methodology is a small component of \nwhat goes on in an organization. Karin Kolbe: Provide more support for design-level rationale --which \nis supposed to be the whole point of 00 CASE tools anyway. James Noble: Interoperability without the \nuse of centralized repositories. Dennis de Champeaux: Use of modeling to eliminate pro-gramming, with \ntools helping in tracking the user s micro-process , and providing met-rics for evaluation of how to \ndo things. Shaike Artsy: Standards for models, libraries of concepts, and scalable CASE architectures. \nBruce Larsen: Legacy System integration into models, and integration with other tools. David Laurence: \nBetter Problem and domain under-standing, and process understanding. Christian Bremeau: Better integration \nat the back end, and better support for true design and require-ments specifications on the front end. \nKevin Benner: Because systems are long-lived, inte-grate design rationale and informal knowl-edge that \nis crucial for human consumption and ongoing maintenance by personnel other than the developers. 4. collchlsion \nIt is clear that 00 methods will be seeing increased usage in the future. This is because they represent \none of the few alternatives for the spread of formalized system development practices. Without computer \nsupport in the form of CASE tools, it is impossible to contemplate 00 technology for large pro-jects. \nTherefore, CASE tools, limited as they are, will also see increased usage in the future because there \nis no other reasonable alternative! However, continued usage of CASE tools and particularly the realization \nof their poten- tial promise in promoting software productiv- ity may well depend on how many of the \nfeatures discussed in this workshop actually make into the next generation of 00 CASE tools. \n\t\t\t", "proc_id": "260094", "abstract": "", "authors": [{"name": "K. Narayanaswamy", "author_profile_id": "81332518038", "affiliation": "Cs3: Computing Services Support Solutions", "person_id": "PP39081065", "email_address": "", "orcid_id": ""}, {"name": "Adrian Blakey", "author_profile_id": "81100046554", "affiliation": "Sybase", "person_id": "P10963", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260094.260271", "year": "1995", "article_id": "260271", "conference": "OOPSLA", "title": "Are object-oriented CASE frameworks ready for prime time?", "url": "http://dl.acm.org/citation.cfm?id=260271"}