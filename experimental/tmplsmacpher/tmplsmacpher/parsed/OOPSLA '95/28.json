{"article_publication_date": "10-01-1995", "fulltext": "\n Business Object Design and Implementation Workshop Jeff Sutherland VMARK Software 50 Washington Street, \nWestborough, MA 01.581-1021 (508) 366-3888x3728, (508) 366-3669 (fax) jsutherland@vmark.com http://www.tiac.net/users[jsuth/ \n1. Workshop Co-Chairs: Jeff Sutherland - VMARK Software Dilip Pate1 -South Bank University Cory Casanave \n- Data Access Corporation Glenn Hollowell --Sematech Joaquin Miller -SHL Systemhouse 2. Abstract The \nOOPSLA Workshop on Business Object Design and Implementation was jointly sponsored by the Accredited \nStandards Committee X3H7 (Object Information Management) and the Object Management Group (OMG) Business \nObject Management Special Interest Group (BOMSIG). A variety of papers were presented on business object \narchitectures, reusable component requirements, specification of distributed systems, and patterns which \nshould be used in design of business systems. The Workshop concluded that reengineering and rapid delivery \nof new business functionality would require significant changes in current development tools and methodologies. \nSoftware development has traditionally supported tightly coupled components built with loosely coupled \nanalysis, design, and implementation methods. New systems will require that loosely coupled, reusable, \nplug compatible components be constructed using a tightly coupled development method that combines business \nprocess reengineering, analysis, design, implementation, and reusable component market delivery systems \nsimilar to today s custom IC chip industry. 2.1 X3H7 Object Information Management In 1994, the X3H7 \nObject Information Management Technical Committee projected that over the next decade, more than 80% \nof new object-oriented software systems would be built in three object-oriented languages (Smalltalk, \nC++, and 00 COBOL) and communicate through a Object Request Broker to four primary external environments \n(SQL databases, Object Databases, Microsoft OLE/COM, and CORBA objects). Interoperability of large grained \nobjects existing in these environments was identified as a core activity in the standards process. In \naddition, X3H7 projected that software implementation will move up to a higher level of abstraction. \nA business model will be built for enterprise applications using standard object-oriented analysis and \ndesign (OOAD) techniques, legacy CASE models will be incorporated, and major amounts of code will be \nautogenerated, rather than hand coded. OOAD models, documentation, and code will be stored and versioned \nin an object repository and injected into the run time environment. Furthermore, the business object \nmodel will be a component-based model that supports software distribution over arbitrary processors on \na network. Provision for interoperability between standard business components was identified as a major \npriority [Suth94]. One can conclude, based on the experience at SEMATECH and NIST, that building large \nsoftware frameworks for chip fabrication plants requires a Austin, TX October 15-19, 1995 Business Object \nComponent Architecture to enable interoperability. This insight is applicable across a wide variety of \napplication domains. The need for a component-based enterprise architecture led X3H7 to propose development \nof an IS0 RM-ODP Enterprise Viewpoint Companion Standard. This resulted in the initiation of three activities: \n . ISO/IEC JTC l/SC 21 WG7 initiation of a New Work Item proposal for an Enterprise Viewpoint Component \nStandard to be reviewed at the May 1996 meeting of S21 in Kansas City [X3H795]. . X3H7 initiation of \na close liaison with the OMG BOMSIG work on a Business Application Architecture. . X3H7 and OMG BOMSIG \nsponsorship of an OOPSLA 95 Workshop on Business Object Design and Implementation to facilitate technical \ninput from industry, government, and academic communities.  2.2 OMG Business Object Management Special \nInterest Group (BOMSIG) The Object Management Group s central mission is to establish an architecture \nand set of specifications, based on commercially available object technology, to enable distributed integrated \napplications. Primary goals are the reusability, portability and interoperabilig of object-based software \ncomponents in distributed heterogeneous environments. To this end, the OMG adopts interface and protocol \nspecifications that define an Object Management Architecture (OMA) that supports applications based on \ndistributed interoperating objects. The current focus of OMG BOMSIG is development of a Request For Proposal \n(RFP) to address the OMA component called Common Facilities [OMG95]. The RFP solicits proposals for the \nfollowing: Common Business Objects Component Interoperability Facility The objectives of the RFP are: \nTo address the need for significantly enhanced levels of simplicity, over and above that which exists \ntoday, to the task of defining, designing, building and deploying integrated yet flexible business solutions. \nReduction of complexity is to be achieved through a higher level of abstraction and greater reuse than \nexists today for business applications. . To provide a common starting point for the work of domain \nstandards groups. Providing the required higher level of abstraction has two separate, but closely related, \naspects: Business objects as design-time (modeling-time/analysis-time etc.) constructs or models, some \nof which are domain-specific, others having cross-domain applicability (Common Business Objects) A set \nof facilities that brings significantly greater levels of simplicity in developing the run-time deployable \nsoftware that implements those constructs or models (Component Interoperability Facility). This set of \nfacilities would include both behaviors shared by all business objects and through business object linkages \nto underlying computational mechanisms. The Component Interoperability Facility should provide the abstraction \nwhich hides computational complexities, and enables business objects to interoperate efficiently and \nreliably in multi-user, concurrent, distributed, heterogeneous environments. The Common Business Objects \ncomponent of this RFP will provide a common starting point for enterprise application developers and \ndomain industry standards groups by providing a set of business concept abstractions from which more \nspecific business objects can be specialized. In some cases these abstract objects may be quite generic \nsince the concept varies considerably from one industry to the next. In other cases, the abstractions \nmay be quite specific because the concept occurs much the same in all industries. The objective is to \npromote consistency across industries and enterprises and minimize the duplication of effort to define \nand eventually implement (using the Component Interoperability Facility) enterprise and industry frameworks. \nThe people who will benefit from the greater levels of simplicity include: those tasked with business \nobject modeling, analysis and design, and those whose job it is to implement those designs in code such \nthat their end products will interoperate with those of other implementers, and the business that use \nthe resultant business object based applications, through a flexible information system designed to serve \nbusiness needs. The work of OMG BOMSIG is directly related to the current work of the X3H7 Object Information \nManagement Committee. Industry consortia standards developed by OMG can be formalized through the accredited \nstandards process through the current IS0 work item that is the designated task of X3H7.  3. Goal of \nthe Workshop The ongoing goal of the workshop is to facilitate development of design patterns and frameworks \nfor building business object systems. A common business object infrastructure is essential to an object-oriented \nsoftware platform that enables systematic reuse of components across an enterprise. Of particular concern \nis the infrastructure required for supporting domain specific business object models. At a recent Object \nManagement Group meeting BOMSIG outlined four layers of object technology for standardization: . Distributed \nObject Layer (CORBA, OLEKOM, . . . > Component Interoperability Facility (Business Object type, Business \nProcess Object and Business Entity Object subtypes, generic functionality subtypes of Business Process \nObjects, generic data specification subtypes of Business Entity Objects) Common Business Object Layer \n(Customer or Part as subtype of generic functionality object, Order as subtype of generic data specification \nobject, . ..) Domain Specific Application Frameworks (Will need to have a consistent infrastructure to \nbe widely used within and across industries. The concepts for this infrastructure are just beginning \nto emerge as standards for the distributed object layer are stabilized by the Object Management Group \nand individual software vendors.) I Component Interoperability Facility Figure 1. OMG CFTF RFP4 Architecture \n Papers addressing issues related to component interoperability and common business objects were solicited \nfrom academia, government, and industry for the workshop. 4. Presented Papers 4.1 Business Application \nComponents -Tom Digre, Texas Instruments Austin, TX October 15.19.1995 The software industry has been \nstruggling with how to produce software IC chips for years with little success. Meanwhile, the custom \nchip industry has learned how to shrink wrap software, embed it in hardware, and market custom chip sets. \nThis is the model of the future for software distribution. 4.2 Business Object Architectures and Standards \n-Cory Casanave, Data Access Corporation As the Chair of OMG BOMSIG, Cory presented the latest thinking \nof the committee on the business object infrastructure that is needed to support large domain specific \nframeworks in finance, manufacturing, heath care, and insurance. His paper summarizes the current BOMSIG \nview of a Business Application Architecture. 4.3 Implementing Business Objects: CORBA interfaces for \nlegacy systems -Thomas Grotehen and Rene Schwarb, Swiss Bank Corporation/SYSTOR In 199 1, the OMG defined \nan architectural framework (OMA-Object Management Architecture) as a milestone in realizing the vision \nof distributed object- oriented computing. This paper describes an experiment designed to examine whether \nan OMA CORBA (Common Object Request Broker Architecture) implementation can be successfully employed \nin the existing information technology environment of a bank. It provides an overview of both the benefits \nand the problems involved and an outlook on future technology developments in this area.  4.4 An Architecture \nFramework: From Business Strategies to Implementation - William Hertha, Jim E. Bennett, Frank J. Post, \nIan M. Page, Canadian Imperial Bank of Commerce Business systems architects and their clients increasingly \nsuffer from information overload. To help businesses to partition and relate the kinds of architecture \ninformation they must build and share, we propose a framework consisting of three related models, each \nincorporating four tiers of subject matter connected by use cases.  4.5 An Architectural Framework for \nSemantic Inter-Operability in Distributed Object Systems -Rainer Kossmann, Bell Northern Research, Ltd. \nThis research paper reports results of research on semantic inter-operability in real time, distributed \nobject-oriented systems. It proposes an architectural framework for distributed heterogeneous object \nsystem organization. The major goals of the framework are to provide a basis of inter-operability for \ndifferent kinds of object models and application domains. 4.6 Position Paper -William E. McCarthy, Michigan \nState University As an accounting professor, Bill McCarthy has been working for years on specifying the \nstandard design pattern for accounting systems. There is general agreement in the accounting community \nthat there is one pattern that should be the basis of all accounting systems. Bill argued that systems \nbuilt in every domain should be based on this pattern. It is clear that any business object application \narchitecture must support it as a central concept. This was an innovative and seminal paper. 4.7 Position \nPaper - Bruce Miner, Koba Software, Inc. Bruce presented an experience paper outlining the structure \nof a distributed object framework for client server systems based on Smalltalk. 4.8 Semantics: The Key \nto Interoperability - Stkphane Poirier and Colin Ashford, Bell Northern Research. Ltd. Interoperability \nand portability of business objects is fundamentally a question of agreed semantics-agreed syntax is \nof secondary importance. Agreeing common semantics is an architectural issue and involves not only high-level \nconceptual design but also architectural style. The process of building design offers us a model for \ndeveloping interoperable and portable business objects. 4.9 Object Business Modelling, Requirements \nand, Approach -Guus Ramackers, Oracle Corporation In order to exploit the advantages of object technology \nin large industrial Information System environments, additional enterprise orientation and user involvement \nare essential. Only the combination of business modelling and object-oriented design in an integrated \nfashion can leverage the promise of reuse and flexibility at the business level. Object Business Modelling \nis a tool supported approach that addresses this need. Its goals are to tailor modelling to the needs \nof domain specialists and end-users and to hide many of the complexities of system design through application \nand workflow generation. The requirements to the meta-model underlying this approach are described, as \nwell as the tool requirements for graphical manipulation of the model. 4.10 SCRUM Development Process \n-Ken Schwaber, Advanced Development Methods The stated, accepted philosophy for systems development is \nthat systems development process is a well understood approach that can be planned, estimated, and successfully \ncompleted. This is an incorrect basis. SCRUM states that the systems development process is an unpredictable, \ncomplicated process that can only be roughly described as an overall progression. SCRUM defines the systems \ndevelopment process as a loose set of activities that combines known, workable tools and techniques with \nthe best that a development team can devise to build systems. Since these activities are loose, controls \nto manage the process and inherent risk are used. 4.11 Experiences with a Manufacturing Framework -Selden \nL. Stewart and James A. St. Pierre, NIST This paper describes the first year of a joint project between \nthe National Institute of Standards and Technology (NIST) and SEMATECH. After studying the SEMATECH CIM \nFramework, we present a roadmap for adoption and use of manufacturing frameworks with four components: \ndeveloping a specification, reaching consensus, standardization, and testing and certification. Results \nof our study include numerous recommendations about online specifications, supplier involvement, standards \norganizations, usage scenarios, reference implementations, and a testing and certification plan.  5. \nConclusions of the Workshop The wide variety of papers presented and the high level of expertise at the \nworkshop led to a consensus on several important issues: . In the future, cycle time will be the most \ncritical issue for business operations. The speed with which new or enhanced products and services can \nbe developed and delivered to the marketplace will determine market share and profitability. . Products \nand services will be increasingly supported by software components. Most of these components must be \nreused from previous development efforts in order to meet required cycle times. This requires major advances \nin component interoperability and availability. A model for this activity exists in the custom chip Austin, \nTX October H-19,1995 industry which is already selling software components packaged as hardware [Digr95]. \n . A radical reversal in the current approach to software engineering is required to meet market demands. \nCurrently, systems have tight coupling between software components (inflexible systems), and loose coupling \nbetween analysis, design, and implementation (leading to excessive cost and delivery times, as well as \npoor fit of software to user requirements). In the future, Business Process Reengineering methods will \nbe tightly coupled with object-oriented analysis and design. Most of the code which is currently written \nby hand will be generated from design, or reusable components will eliminate the need to write it. . \nAdvances in the software development process are required to dramatically improve productivity in a component \nbased development environment. In particular, previous methods have assumed software development is a \ncontrolled process rather than an empirical process. Component based object systems are not Turing machines \nbecause of their event driven nature [Wegn95], and as a result are not fully specifiable. The process \ncontrol industry has developed methods to deal with these types of empirical processes and these methods \nmust be applied to software development using a SCRUM approach [Schw95]. . Component based architectures \nwill be built from replaceable units of functionality that reduce surface area of systems that are doubling \nin complexity each year. Large grain components will have clear sets of responsibilities or roles, and \nexpose semantics of the business as well as syntax of interfaces [Digr95]. . There are specific design \npatterns that should be implemented throughout business systems that will substantially improve reusability \nand rigor in business systems logic. The Give/Take pattern that has been standardized by accounting research \nshould be rigorously implemented in all business systems and mandated in all accounting systems. As much \nas 50% of the typical business application could be built from recursively implementing this pattern. \nMany companies (even banks) have trouble balancing their books or accurately determining the current \nstatus of business operations because of failure to implement this pattern properly in their business \nsoftware systems. Design and implementation of business objects is an emerging issue with major impact \non the software industry. Springer-Verlag is planning on publishing a book of Workshop papers at the \nearliest opportunity. Next year the Workshop will focus in depth on a specific area of business object \ntechnology. 6. References Digr95 Tom Digre. Business Application Components. OOPSLA 95 Workshop on Business \nObject Design and Implementation, http://www.tiac.netfusers/jsuthfoopslaloo95sum mary.html, 10 Dee 95. \nOMG95 Object Management Group. Common Facilities RFP4: Common Business Objects and Component Interoperability \nFacilit),. Draft C, 3 Nov 95. Schw95 Ken Schwaber. SCRUM Development Process. OOPSLA 95 Workshop on \nBusiness Object Design and Implementation, http://www.tiac.netJusers/jsuthfoopsla/oo95sum mary.html, \n10 Dee 95. Suth94 Jeff Sutherland. ANSI X3H7 Standardization Targets. X3H7-94-35,24 Sep 94. X3H795 Glenn \nHollowell. X3 Technical Committee X3H7 (OIM) New Work Item Proposal RM-ODP Enterprise Viewpoint Companion \nStandard. X3H7-95-20, 13 Ott 95. Wegn95 Peter Wegner. Interactive Foundations of Object-Based Programming. \nIEEE Computer, pp. 70-7 1,Oct 95. \n\t\t\t", "proc_id": "260094", "abstract": "", "authors": [{"name": "Jeff Sutherland", "author_profile_id": "81339530924", "affiliation": "VMARK Software, 50 Washington Street, Westborough, MA", "person_id": "PP39079804", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260094.260274", "year": "1995", "article_id": "260274", "conference": "OOPSLA", "title": "Business object design and implementation workshop", "url": "http://dl.acm.org/citation.cfm?id=260274"}