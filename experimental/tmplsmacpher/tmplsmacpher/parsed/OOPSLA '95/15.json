{"article_publication_date": "10-01-1995", "fulltext": "\n Report on the Workshop Framework--Centered Software Development Dipayan Gangopadhyay Wolfgang Pree \nAlbert Schappert IBM Research Division Universitaet Linz Siemens AG PO Box 704 Altenbergerstrasse 69 \nOtto--Hahn--Ring 6 Yorktown Heights, NY A--4040 Linz, D--8 1730 Munich USA Austria Germany Introduction \nThe workshop Framework--Centered Sojlware Development was announced and organized by D.Gangopadhyay, \nW.Pree, and ASchappert for OOPSLA 95. It was held on Monday, Oct. 16*. The objective of this workshop \nwas to discuss necessary support for a framwork centered approach to software development. In particular, \nthe workshop was intended to provide an overview of academic and industrial activities to serve as a \ndiscussion panel for the coordination of these efforts to identify research topics to support framework \ndevelopment to identify problems in the industrial application of frameworks to establish a network of \npeople and organizations interested in these topics. The workshop found broad interest in the 00 community \nand significant contributions were submitted. There were two groups of submissions: one for framework \ndesign and the other for framework adaptation. There were oral presentations of 2 papers selected from \neach category, followed by group-discussions in the afternoon. The rest of this report includes abstracts \nof the presentations (including links the sources), and the findings from the discussion sessions. We \nconclude the report with a list of topics where more research will be fruitful. Presentations H. Schmid \ndiscussed an approach to create frameworks with Systematic use of Design Patterns. The systematic construction \nmethod for frameworks has the following steps: 1. perform domain analysis with an aim to identifying \nthe fixed aspects that are common to all applications from the domain - called the frozen spots, and \nthe variable aspects, in which different applications may differ - called the hot spots of the framework \n 2. derive a specialized model by an object-oriented analysis from a specific application or configuration \nof the domain, 3. generalize this model by a sequence of transformation steps, one per hot spot.  Each \ntransformation creates a hot spot subsystem. The detail structure of each hot spot subsystem is determined \nby a suitable design pattern that covers the particular kind of variability and flexibility, required \nby the hot spot. If no design pattern with the desired characteristics can be found, the detail structure \nof the hot spot subsystem is determined by applying a metapattem . The resulting class structure allows \na transparent exchange of each hot spot alternative against one of the other ones. Thus, in a black-box \nframework, an I W. Pree: Design Patterns for Object-Oriented So&#38;are Development; Addison-Wesley, \n1994 100 Austin, TX October 15-19, 1995 application of the domain may be created by selecting, configuring \nand parameterizing of hot spot alternative classes. Details can be found in the full papers2,3 The paper \nIntegration of Framework Components by Reusing Design Processes, by A.Kagaya, M.Natori and S. Honiden, \ndeals with framework design and design-level reuse in the context of an automated gift order processing \nsystem. They decomposed application frameworks of gift order processing systems from three viewpoints; \n(a) the position of classes, (b) the role of classes, and (c) use cases. Results show that method (c) \nleads to smaller components of similar complexity, enhances the understandability of components most, \nand makes it easier to mix components. They propose a systematic integration method for the decomposed \nframework components with the aid of reuse history, i.e., existing design processes. Two thirds of application \nsoftware of gift systems was developed by reusing those components. J. Laubsch presented the paper Adaptation \nof Taligent s frameworks -- an experience report. He discussed the conclusions of a three months learnability \nand usability study of Taligent Application frameworks, with an aim of preparing a guide for a novice \nuser. It has been known that learnability of large object-oriented systems poses a serious obstacle to \nadoption of object-oriented technology. Taligent frameworks face this obstacle in particular, because \nof the large number of classes and frameworks provided. The talk highlighted the issues, alerts to the \nmost common pitfalls, points out important features of the learning environment, and illustrates best \npractices. A. Garrido presented her joint work with Sergio Carvalho and Gustav0 Rossi Architectural Design \nin an Object-Oriented Framework for Hypermedia. They aim to provide an integrated approach where object- \noriented applications can be enhanced with hypermedia links (reflecting relationships among objects), \nthus supporting navigation facilities without loosing the 2 H.A.Schmid: Creating the Architecture of \na Manufacturing Framework by Design Patterns; ProcOOPSLA 95, SIGPLAN, ACM 3 H.A.Schmid: Design Patterns \nto Construct the Hot Spots of a Manufacturing Framework; to be published in: Journal of Object-Oriented \nProgramming, Summer96 application s specific behavior. They accomplish this objective by building an \nobject-oriented framework modeling the hypermedia domain. In such framework, nodes are defined as object \ns views, and links allow navigating through related objects. The framework s components were defined \non the basis of some current hypermedia design models, but the thread of collaboration among internal \ncomponents and outside ones have been empowered in order to extract and support the semantic and behavior \nof the underlying application. In this task, new and existing design patterns allowed us to reason about \nnavigation in abstract terms, and simplified the construction of the framework. Some of this patterns \nare: a variant of the Observer pattern4 , Navigation Strategy and Navigation Observer pattern . Once \nthe outstanding relationships among hypermedia components and application objects have been dentified \nand described in terms of well-known design patterns it is possible to build an object-oriented framework \nthat stands for the abstract design of an application providing both navigational and behavioral services. \nA full version of this paper can be obtained via fip://sollpub/papers/garrido.  Findings from discussion \nsessions The hot topics were derived from the presentations and the interests of the audience. The discussions \ntook place in two groups, one concentrating on Framework Construction and one focusing on Framework Adaptation. \nFramework Construction Which OOA/OOD method(s) are suitable for framework development? some can help, \nbut they don t help that the result will be a framework 4 E. Gamma, R. Helm, R. Johnson, J. Vlissides: \nDesign Patterns: Elements of Reusable Object-Oriented Software; Addison- Wesley, 1994 5 G. Rossi, A. \nGarrido and S. Carvalho. Design Patterns for Object-Oriented Hypermedia Applications . Accepted at Sec. \nAnnConf. on the Pattern Lang. of Programs. Monticello, Illinois. September, 1995. Addendum to the Proceedings \nOOPSLA 95 the process proposed by OOAD methods is helpful, but the result is predominantly just documentation. \nUse-Cases/scenarios help with dynamic aspects, in finding commonalties vocabulary capture is helpful \nD.Gangopadhyay remarked that relationships are the source of coupling among components and hence constrain \nthe degrees of freedom. Thus, focusing on systematic weakening of relationships is likely to introduce \nmore variability in a design. How to find the hot spots andfrozen, i.e., fixed, aspects? requires domain \nknowledge must draw information from experts implementor must maintain framework to reflect new knowledge \nof hot and frozen spots trial and error ask previous implementor what was hard to change in the past, \nwhat changed? estimate/measure COSTS/BENEFITS to accomplish various changes too many hot spots add complexity \ngood frameworks have at least some black-box components Design patterns and frameworks. almost too new \nto use reinvented helped with design decisions vocabulary useful, potentially in all domains not sufficient \nfor real-world framework development helps with implementation domain, not the application domain OOD \npatterns represent catalysts for application domain capture application domain patterns could come from \nexpert implementors  102 Austin, understand domain first, then apply patterns, then implement in a language \npatterns are not necessarily 00 Tools for supporting design and reuse offrameworks The discussion group \nagrees that there is no adequate tool support available. The existing 00 A/D tools address designing \na single application, not a family of applications as in the case of frameworks. Can these single-application \ndesign tools evolve to design of the more intellectually demanding task of framework design? The discussants \nidentified the following requirements: explicit representation of object collaboration, not just class \nhierarchy ability to treat a pattern of collaboration as a black- box with visual identification of variable \nparts ability to generalize and specialize relationships among collaborating objects in a pattern ability \nto experiment at design level whether the designed abstractions are adequate extensive ability for change \nmanagement, e.g., to refactor responsibilities on framework redesign integration with document management \nsystems and word processors  Framework Adaptation Good frameworks are the product of few intelligent \npeople, who can abstract sufficiently and anticipate in advance where to provide the necessary flexibility. \nHowever, flexibility is a double-edged sword -- it requires deeper understanding than black-box reuse \nwhere knowing the interfaces may suffice. Thus, in order for proliferated use of frameworks to happen, \nthe reusers learning curve has to be reduced. In addressing the approaches to reduce learning curve, \nthe discussion group addressed the following issues: What reusers must learn: Architectural relationships \namong the constituents of a framework. The consensus reached at the workshop is that major difficulty \nof a framework reuser is to learn TX October 1519,199s the architecture inherent in the framework. By \narchitecture we mean the collaborative relationships among the components (i.e., the major abstractions) \nof the framework. For example, in the paper presented by A.Garrido3, the nodes and links are the central \narchitectural components in their framework for hypermedia navigation. A reuser has to understand the \ncollaboration patterns between node and link, only then he (or she) can successfully create specialized \nsubclasses thereof and supply the methods specific to his (or her) needs. The same concern, namely the \ndifficulty in discerning the relationships among the constituents of a framework, was presented by J. \nLaubsch in his experience report. How to facilitate learning: by a graduated set of examples. The competence \nlevel of a reuser needs to be built- up gradually. A person learns new concepts easier via an example. \nAs a framework is supposed to address a family of applications in a given domain, why not then provide \nminimal set of examples of these applications with the framework? If a reuser can get by at the outset \nby adapting one of these examples, the person is hooked! However, the goal should be to impart deeper \nunderstanding of the architecture, so that the person truly becomes competent for innovative reuse, and \nnot remain just a copy-cat. How should the examples be represented: in a form ready for interactive exploration. \nArchitectural descriptions can be documents, consisting of static model diagrams and object interaction \ndiagrams of key collaborations. However, although Taligent s CommonPoint documentation provides exactly \nthese, Laubsch s experiences show far more is needed. D.Gangopadhyay observed: True understanding comes \nfrom learning things at the perceptual level, by observing cause and effect relationships of one s actions. \n-- That is, you learn by doing. Can the documents be made live for interactive exploration? A paper6 \n, distributed at the workshop, proposes a solution to the architecture understanding problem. It uses \na derivative of 00 modeling environment, in which executable visual model of an framework architecture \nis provided as a live documentation. Reusers can learn the architectural relationships among components \nby interactively exploring and executing the abstract visual models of the frameworks. The next major \ntopic of discussion was the study of adaptation techniques. It is observed that the use of frameworks \nare limited to the extent the original designers had pre-planned. Whatever abstract classes were designed, \nbased on the designer s anticipation, one can only sub-class those. The research question is then: what \ndoes it take to create abstractions that allow innovative un-planned extensions and adaptations? The \ndiscussants identified the following list of research topics as enablers for unplanned reuse: Reflection \nand meta-programming. (cf. Adaptive Software workshop) Superposition techniques to enable sideways extension \n6 Subject Oriented programming.  Conclusion Frameworks are --- in conjunction with design patterns \n--one of the hot topics for object-oriented software development. Framework centered software development \npromises one of the most productive approaches using 00 techniques. One thing is clear -- study of inter-component \ncollaborations is a fundamental underpinning of design and reuse of frameworks. More research is needed \non proper understanding of abstraction process, techniques for systematic identification and introduction \nof flexibility, extension of analysis methods appropriate for domain- specific framework design and techniques \nfor unplanned adaptations and techniques for easing the learning curve. 6 D. Gangopadhyay and S. Mitra: \nUnderstanding Frameworks via Exploration of Exemplars, In Proceeding of CASE 95, IEEE Press, July 1995. \ncontact dipayan@watson.ibm.com Addendum to the Proceedings Appendix: List of participants The participants \nof the workshop are listed with their email addresses: Greg Butler Ian Chai Paul Crisholm Koen DeHondt \nSerge Demeyer Lawrence Eng Dipayan Gangopadhyay Alejandra Garriddo Shinichi Honiden Yutaka Irie Akira \nKagaya Anwadh Kare Danny B. Lange Joachim Laubsch Carine Lucas Subrata Mitra Mari Natori Wolfgang Pree \nJeff Randorf Nicolas Revault Albert Schappert Hanspeter S&#38;mid Peter Sommerlad Patrick S teyart Wilfried \nVerachtert Larry Williams gregb@cs.concordia.ca chai@chip.cs.uiuc.edu psrc@cmprime.att.com kdehondtjvnet3.vub.ac.be \nsademeye@vnet3.vub.ac.be lawrence.eng@sematech.org dipayan@watson.ibm.com garrido@ada.info.unlp.edu.ar \nhoniden@ssel.toshiba.co.jp irie@ssel.toshiba.co.jp kagaya@ssel.toshiba.co.jp kar@cs.clemson.edu culange@trl.ibm.co.jp \nlaubsch@hpljl.hpl.hp.com clucas@vnet3.vub.ac.be mitra@vnet.ibm.com inoki@ssel.toshiba.co.jp pree@swe.uni-linz.ac.at \nRandorfj@ssdc-macmaiI.army.mil Nicolas.Revault@laforia.ibp.fr Albert.Schappert@zfe.siemens.de schmidha@rz-uxazs.fh- \nkonstanz.de peter.sommerlad@zfe.siemens.de prsteyae@vnet3.vub.ac.be wiffel@oopartners.com larryw@objectime.on.ca \n Austin, TX October M-19,1995 \n\t\t\t", "proc_id": "260094", "abstract": "", "authors": [{"name": "Dipayan Gangopadhyay", "author_profile_id": "81100125214", "affiliation": "IBM Research Division, PO Box 704, Yorktown Heights, NY", "person_id": "PP39028638", "email_address": "", "orcid_id": ""}, {"name": "Wolfgang Pree", "author_profile_id": "81100530643", "affiliation": "Universitaet Linz, Altenbergerstrasse 69, A-4040 Linz, Austria", "person_id": "PP31093155", "email_address": "", "orcid_id": ""}, {"name": "Albert Schappert", "author_profile_id": "81100444853", "affiliation": "Siemens AG, Otto-Hahn-Ring 6, D-8 1730 Munich, Germany", "person_id": "P13146", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260094.260255", "year": "1995", "article_id": "260255", "conference": "OOPSLA", "title": "Framework-centered software development: report on the workshop", "url": "http://dl.acm.org/citation.cfm?id=260255"}