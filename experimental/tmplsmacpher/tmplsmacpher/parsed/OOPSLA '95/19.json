{"article_publication_date": "10-01-1995", "fulltext": "\n The Object Engine: Foundation for Next Generation Architectures Fred Cummins Roman Cunis Gail Harris \ncummins@ae.eds.com rc@maz-hh.de ak753afreenet.carleton.ca EDS 00 &#38; AI Services MAZ GmbH RES International \n5555 New King Street Harburger Schlossstrasse 6- 12 Suite 600, 100 Sparks Street Troy, Michigan 48098 \nD-2 1079 Hamburg, Germany Ottawa, ON, KlP 5B7 (810) 696-2016 t-49-40-76629-2641 (613) 238-3690 FAX: (810) \n696-2325 FAX: ++49-40-76629- 199 Abstract As we have applied object-oriented technology to larger and \nmore complex systems, we have realized the need for capabilities not readily supported by current object-oriented \nprogramming environments. The concept of the object engine is to provide an object-oriented environment \nin which to integrate different problems-solving paradigms and provide or incorporate support mechanisms \nsuch as persistence, garbage collection, testing tools and distributed concurrent processing. Standardization \nof the object engine would facilitate integration of independently developed applications and components \nand could lead to the development of hardware support to improve performance. Participants in this workshop \ndiscussed advanced features they have explored and/or have recognized as shortcomings of existing environments. \nThis year, participants developed a refined list of capabilities which should be included in an object \nengine. Introduction The goal of this OOPSLA 95 workshop was to further refine the concepts of the object \nengine and to develop an architecture for further design. Last year an object engine was defined as An \nexecution platform/environment A common base object paradigm A language independent implementation A \nmachine independent implementation An open, extensible system A participant in concurrent processing \n Several basic feature requirements were defined at that time: Small set of primitive actions (e.g., \ndata access, method invocation) Dynamic and individual assignment of meta- class Persistence Garbage \ncollection Distributed processing (including global naming) Concurrent processing Reflection (including \nexception handling) Development tools (debugger, browser, etc.) Event notification mechanism (value change, \n creation, destruction) Instance specialization Everything an object Run-time compilation at various \ngranularities Integration of multiple AI paradigms  Addendum to the Proceedings OOPSLA 95 Some implementation \napproaches were also tentatively identified: Encapsulated aspects--concealed implementation of attributes \nand relationships Textual representation of objects--a standard communication and display form Language \nexpression objects--the language of the intermediate language as objects instead of byte- codes Context \nobjects--an object representation of the active control stack Meta objects--classes and methods as objects \nThese ideas formed a starting point for the discussion in this workshop. This report will summarize the \npresentations and discussions and present the object engine features which were defined as a result of \nthe group discussion.  Discussion The workshop agenda consisted of presentations by the participants, \nwith questions and discussions. In a concluding discussion we attempted to define a layered architecture \nfor the object engine. The following paragraphs present highlights of the presentations. Gail Harris \npresented a summary of the results of the 94 workshop. She outlined the requirements, scope, constraints \nand design concepts from an analysis of last years presentations and discussion. She concluded with a \nlist of issues that should be discussed and resolved at this workshop. Bruno Achauer described the TNT \nvirtual machine, which is a new implementation of the Trellis/DOWL language. This is a strongly typed \n00 language with multiple inheritance, parametric types, iteration, exception handling and distributed \nobjects. Bruno explained that a native intermediate representation, rather than generating C code, was \n 124 Austin, essential for supporting exceptions, iterators, and migrating distributed objects in a heterogeneous \nenvironment. The intermediate code also provides an important opportunity for optimization. At present, \na compiler and base run time system is available for three architectures, but without distributed operation. \nUmesh Bellur presented the tasks needed to develop a distributed object system. Based on these tasks \nUmesh outlined a generalized architecture for an Object Manager and its services which could support \nnon-problem domain issues such as concurrency, lifecycle, security, persistence, dynamic memory management, \nand load balancing. He also described a mechanism for dynamic clustering of objects based on their interactions, \nand the use of dynamic, selective compilation. The main point is to separate and re-use a generic solution \nfor issues common to any distributed system. Jim Coker views the object engine as an environment in which \nother 00 languages could be implemented. Jim s presentation was motivated by a need to explore language \nfeatures such as formal specification (a la Eiffel), different exception models, static versus run-time \ntype determination, and other issues. The emphasis was on flexibility for the object engine, and specifically \nmeta class objects for type information and determining run-time meta-level object behavior. Jim proposed \nan implementation with a kernel containing essential features only, and new features added as extensions, \nthus encouraging experimentation in language design, compilation techniques and software development. \nJustin Coven focused on reflection, abstraction and reflective tools. Of particular interest was his \ndiscussion of reflection on control structures and the facility this can provide for exception handling. \nWith reflection, the exception handling process can operate on the control stack. This allows exception \nhandling logic to be implemented as a module rather than being scattered throughout the program as it \n TX October 1519,199s would be using the catch and throw exception-handling mechanism of LISP. Reflection \non the control structure also offers alternative mechanisms for concurrency control and process management. \nFred Cummins described the current efforts by the Object Management Group (OMG) to develop standards \nfor distributed object applications. He explained the CORBA architecture and the efforts of the Business \nObject Management Special Interest Group (BOMSIG). Fred then described several requirements of the Object \nEngine that should be standardized to support integration of independently developed components. These \nfacilities include change notification, exception handling, concurrency/serialization issues, garbage \ncollection, persistence, and others. Andreas Kind identified requirements for an object engine within \nthe World Wide Web. Andreas described the purpose of a meta object protocol using EuLisp as an example, \nand the need for a foreign function interface and dynamic linking for distributed systems. Portability \nand security issues were also included as requirements. He emphasized that garbage collection and a meta-object \nprotocol should be optional. William Kuechler Jr., Vijay Vaishnavi and Dan Turk described the implementation \nof an interpreter for a Smart Object Language (SOL), which fuses object orientation with production system \nbased logic programming. The presentation included an analysis supporting the need for reflective exception \nhandling and context objects, and a description of how this was implemented in the interpreter. The meta \ncontrol modeling mechanism for the interpreter is a possible design for the implementation of message \nresolution for individual objects. The presenters also made strong arguments for minor extensions to \nthe change notification requirement based on concerns for efficiency. The interpreter is being implemented \nin Smalltalk.  Object Engine Architecture Following the presentations the group developed an architecture \nfor the object engine. We had lively discussions about what features should be in the kernel, what should \nbe extensions, what should be services and what should be excluded. The final result is shown in Figure \n1. ObjectDevelopment Translators/ EngineEnvironment Compilers Extensions Object Engine API Object Engine \nServices Object Engine Kernel Object Request Broker Binding Figure 1, Object Engine Architecture The \narchitecture was used as a basis for identification and organization of object engine features. The following \noutline identifies the features: ORB Binding Global naming Replication Object migration Support for \ncall by wizard, call by move In/out parameters Addendum to the Proceedings OOPSLA 95 Object Engine \nKernel Control Dispatch Services Message Resolution Broadcast Control algorithm Control queues Multi-threaded \nprocessing Exception handling Ad hoc reflection Change notification Stack access Root Object Elementary \nobjects Meta Object Protocol objects Expression objects Encapsulated aspects Type hierarchy distinct \nfrom class hierarchy Reference Management (object ID) Basics Intermediate Language Compiler (to machine \nlevel) Interpreter Internals Foreign Function call Memory management/allocation  Object Engine Services \nCollections with iterators Operating System Services Transaction Management Persistence Management Garbage \nCollection Security Relationship Management Instance Specialization Composite object bounds Concurrency \n(serialization)  Development Environment Debuggers, browsers  Translators/compilers Source code to \nintermediate language (multiple languages)  Object Engine Extensions Constraint Manager Search/Pattern \nMatch AI Paradigms and development facilities User attributes and preferences Migration of active objects \n  Conclusion The following paragraphs provide an assessment of the workshop activity. Successes The \nworkshop was a useful and productive way to share and develop ideas for the object engine. The goal this \nyear was to develop details for an architecture and the participants believe we succeeded. In particular: \nThe requirements have stabilized to the point where architecture and design are possible Many good ideas \nwere presented during the workshop The discussions during presentations and during the architecture session \nwere lively and animated . The disagreement -debate -consensus process on various issues made for a \nstimulating environment and a positive experience overall.  Failures Some aspects of the workshop did \nnot work as well as the organizers had hoped: There were very few repeat participants despite extraordinary \nefforts by Fred Cummins (thanks again Fred) Some confusion remained at the end over the organization \nof the architecture layers The larger picture was poorly defined or undefined We never discussed run-time \nefficiency Austin, TX October Pi-19,1995 Themes Many issues kept re-appearing in various contexts H. \nJustin Coven throughout the presentations and discussions: Compuware Corporation coven@acm.org . Intelligent \nexception handling in a distributed system Fred A. Cummins . Iteration and invocation contexts Electronic \nData Systems . Garbage collection--optional? cummins@ae.eds.com . Don t pay for what you don t use . \nControl stack operations Roman Cunis . Distributed processing and the need for MAZ GmbH hierarchical \nglobal naming rc@maz-hh.de . Multi-paradigm integration . Persistence management Gail E. Harris . Reflection \nRES International . Typing: validation vs. performance ak753afreenet.carleton.ca . Flexible message resolution \n. Dynamic selective compilation Donald Liib . Security Royal Institute of Technology, Sweden . Use of \nan intermediate language donald@it.kth.se Participants felt that the workshop was a beneficial Andreas \nKind activity and believed there should be a follow-on University of Bath activity next year. akl@maths.bath.ac.uk \nWorkshop papers and other information is available William L. Kuechler, Jr. fromhttp://www.instantiated.on.ca/ \nGeorgia State University Ob j ect_Engine. ciswlkx@gsusgiZ.gsu.edu Participants Dan Turk Georgia State \nUniversity The organizers wish to thank each of the cisdetx@gsusgi2.gsu.edu participants for their insights, \ntime and effort in preparing and participating in this workshop. Vijay K. Vaishnavi Georgia State University \nBruno Achauer cisvkv@gsusgi2.gsu.edu University of Linz bruno@tk.uni-linz.ac.at Umesh Bellur, PhD TCSI \nCorp. bumesh@tcs.com Jim Coker Andersen Consulting jcoker@andersen.com Addendum to the Proceedings OOPSLA \n 95 127  \n\t\t\t", "proc_id": "260094", "abstract": "", "authors": [{"name": "Fred Cummins", "author_profile_id": "81100067090", "affiliation": "EDS OO & AI Services, 5555 New King Street, Troy, Michigan", "person_id": "PP14033878", "email_address": "", "orcid_id": ""}, {"name": "Roman Cunis", "author_profile_id": "81100240841", "affiliation": "MAZ GmbH, Harburger Schlossstrasse 6-12, D-21079 Hamburg, Germany", "person_id": "P248517", "email_address": "", "orcid_id": ""}, {"name": "Gail Harris", "author_profile_id": "81540366656", "affiliation": "RES International, Suite 600, 100 Sparks Street, Ottawa, ON", "person_id": "P93514", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/260094.260264", "year": "1995", "article_id": "260264", "conference": "OOPSLA", "title": "The object engine: foundation for next generation architectures", "url": "http://dl.acm.org/citation.cfm?id=260264"}