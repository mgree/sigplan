{"article_publication_date": "10-01-1999", "fulltext": "\n\t\t\t", "proc_id": "320384", "abstract": "<p>Java programs perform many synchronization operations on data structures. Some of these synchronization are unnecessary; in particular, if an object is reachable only by a single thread, concurrent access is impossible and no synchronization is needed. We describe an interprocedural, flow- and context-insensitive dataflow analysis that finds such situations. A global optimizing transformation then eliminates synchronizations on these objects. For every program in our suite of ten Java benchmarks consisting of SPECjvm98 and others, our system optimizes over 90% of the alias sets containing at least one synchronized object. As a result, the dynamic frequency of synchronizations is reduced by up to 99%. For two benchmarks that perform synchronizations very frequently, this optimization leads to speedups of 36% and 20%.</p>", "authors": [{"name": "Jeff Bogda", "author_profile_id": "81332490448", "affiliation": "Department of Computer Science, University of California, Santa Barbara, CA", "person_id": "PP31070552", "email_address": "", "orcid_id": ""}, {"name": "Urs H&#246;lzle", "author_profile_id": "81100400656", "affiliation": "Department of Computer Science, University of California, Santa Barbara, CA", "person_id": "P286890", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/320384.320388", "year": "1999", "article_id": "320388", "conference": "OOPSLA", "title": "Removing unnecessary synchronization in Java", "url": "http://dl.acm.org/citation.cfm?id=320388"}