{"article_publication_date": "10-01-1999", "fulltext": "\n\t\t\t", "proc_id": "320384", "abstract": "<p>This paper presents a sound type system for a large subset of the Java bytecode language including classes, interfaces, constructors, methods, exceptions, and bytecode subroutines. This work serves as the foundation for developing a formal specification of the bytecode language and the Java Virtual Machine's bytecode verifier. We also describe a prototype implementation of a type checker for our system and discuss some of the other applications of this work. For example, we show how to extend our work to examine other program properties, such as the correct use of object locks.</p>", "authors": [{"name": "Stephen N. Freund", "author_profile_id": "81100165065", "affiliation": "Department of Computer Science, Stanford University, Stanford, CA", "person_id": "PP14068105", "email_address": "", "orcid_id": ""}, {"name": "John C. Mitchell", "author_profile_id": "81338490160", "affiliation": "Department of Computer Science, Stanford University, Stanford, CA", "person_id": "PP43125642", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/320384.320397", "year": "1999", "article_id": "320397", "conference": "OOPSLA", "title": "A formal framework for the Java bytecode language and verifier", "url": "http://dl.acm.org/citation.cfm?id=320397"}