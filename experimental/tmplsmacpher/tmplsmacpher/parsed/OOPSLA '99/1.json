{"article_publication_date": "10-01-1999", "fulltext": "\n\t\t\t", "proc_id": "320384", "abstract": "<p>Escape analysis [27, 14, 5] is a static analysis that determines whether the lifetime of data exceeds its static scope.</p><p>The main originality of our escape analysis is that it determines precisely the effect of assignments, which is necessary to apply it to object oriented languages with promising results, whereas previous work [27, 14, 5] applied it to functional languages and were very imprecise on assignments. Our implementation analyses the full Java#8482; Language.</p><p>We have applied our analysis to stack allocation and synchronization elimination. We manage to stack allocate 13% to 95% of data, eliminate more than 20% of synchronizations on most programs (94% and 99% on two examples) and get up to 44% speedup (21% on average). Our detailed experimental study on large programs shows that the improvement comes from the decrease of the garbage collection and allocation times than from improvements on data locality [7], contrary to what happened for ML [5].</p>", "authors": [{"name": "Bruno Blanchet", "author_profile_id": "81100497004", "affiliation": "INRIA Rocquencourt Domaine de Voluceau - BP 105, 78153 Le Chesnay Cedex, France", "person_id": "PP14173660", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/320384.320387", "year": "1999", "article_id": "320387", "conference": "OOPSLA", "title": "Escape analysis for object-oriented languages: application to Java", "url": "http://dl.acm.org/citation.cfm?id=320387"}