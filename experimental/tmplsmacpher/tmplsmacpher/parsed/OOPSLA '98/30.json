{"article_publication_date": "10-01-1998", "fulltext": "\n Building Distributed Systems Everyone is building a distributed systems these days, but the how has \nbecome a matter for religious de- bate and the why is often neglected completely. This panel brings together \na variety of practitioners to explain the joys and woes of building a distributed system including: . \nwhy a distributed solution was chosen . what middleware was selected and why . what issues and gotchas \nreared their ugly heads and what was done about it Moderator: Doug Lea, University of Oswego Panelists: \n. David Forslund, Los Alamos National Laboratory . Tom Barry, Lucent Don Vines, Genesis . Rajendra Raj, \nMorgan Stanley . Ashutosh Tiwary, Boeing Information and support services Position Statements: David \nForslund, Los Alamos National Laboratory Providing secure electronic medical records over the internet \nis a continuing challenge to the healthcare enterprise. We discuss our experiences with the deployment \nof a secure, JavaiCORBA-based multimedia electronic record system in a rural healthcare setting. In particular, \nissues of scalability, portability, extensibility, interoperability, useability, and quality of service \nwill be discussed in detail.  Tom Barry, Lucent Lucent began building its custom Assistance Request \nsystem about two and a half years ago. Smalltalk was chosen for the client and a relational database \nwas chosen as the backend. Not long after the project was began, Gemstone/S replaced the relation database \nin order to provide smoother integration between the client and the server. The intent has always been \nto make this system global, however having clients attach to a single server from across the world is \nnot workable. So, instead of bringing the clients to the server, it was decided to distribute the repository \nto bring the information closer to the clients. Using Gemstone s GemEnterprise, a repository is placed \nin each region (North America, Europe, etc.) and the information available to the client is synchronized \namongst the distributed repositories. In addition, Lucent provides web access to some of the system s \ninformation to its customers. Since cus- tomers cannot access Lucent s internal network, it is necessary \nto move the data to the tirewall server. Here again GemEnterprise is used to federate selected (non-restricted) \ninformation to a repository on the firewall server. A special toolkit is then used to connect this repository \nto the web server on the firewall serving Lucent customers. GemEnterprise provides multiple policies \nfor replicating information, (copies, read-only replicates or modi- fiable replicates) as well as the \nusual mechanisms for limiting access to data, such as stubbing and class mapping. GemEnterprise is transparent \nto the client so the usual Gemstone security mechanisms also work such as groups and segments. Refreshing \nof replicate information is scheduled as often (continually for the globally distributed replicates) \nor as infrequently (daily for the web accessible repository) as necessary. The main problems encountered \nwere system response and conflict management. Federated repositories communicate via the same mechanism \na client communicates with the repository. By distributing the re- positories, difficulties clients might \nhave had connecting to a single server must now be dealt with between servers. In addition, the potential \nexists for clients on separate servers to update the same object. Once a refresh happens, someone s data \ncould potentially be overwritten without warning. The application has been deployed for some time. The \nweb piece is scheduled to come on line in June. The globally distributed solution is currently on hold. \nPerhaps the most important lesson is that federation should be planned into a product deployment early. \nSince federation is affected by such things as the com- plexity of the object model and the nature of \nupdates that will take place, it is much easier to address these issues up front, rather than in an ad \nhoc way later on. Don Vines, Genesis A number of recent publications have proposed that the combination \nof Java and CORBA is a good match for supporting leading-edge, three-tier client/server architectures \nover the Internet. A major assumption is that Java Applets make wonderful cross-platform clients that \ncan be safely downloaded and run in a browser, with commercial CORBA products providing the transparent \naccess to the middle-tier servers over the Internet. In our experience, much of this can in fact be accomplished \ntoday, but nobody should un- derestimate the engineering required to effectively integrate these two \ntechnologies. This position state- ment describes our experience with one such WWW-based system, including \na discussion of key ac- complishments, major issues, and architectural tradeoffs. Genesis has been working \nwith one of the world s leading biotechnology companies to introduce a new se- ries of applications for \nmanaging complex, chronic diseases. These applications provide healthcare work- ers with valuable information \nand decision support over the Internet in a form that is not currently available from traditional information \nsources such as medical journals or research briefings. These applications de- pend on a distributed \ncomponent infrastructure which manages clinical data over the Internet with required security/confidentiality, \nwhile encapsulating that data with business logic in the form of distributed objects and associatied \nrules. Clinics are able to access these objects and rules through a Java applet over low bandwidth lines, \ne.g. COTS 56Kb modems, where the applet uses standard CORBA IIOP to talk to the middle-tier object serv- \ners. Since the applet must communicate with servers on the other side of the firewall, we opened a single \nIIOP port through the tirewall and used an IIOP proxy to forward requests to the CORBA servers. This \nen- tire distributed object infrastructure for the middle-tier was built/integrated primarily from COTS \ncompo- nents. This includes a WWW server, WWW-enabled CORBADIOP ORB, a commercial firewall, and an HOP \nproxy forwarding service. To get over the concern that clinics were storing their data at a remote site \nacross the Internet, a com- mercial encryption algorithm is being used in a way that allows clinical \ndata to be stored in its encrypted form such that only the clinics themselves could actually see the \ndata in the clear. Commercial products have also been used to construct an application server which provided \nan interface to the business objects and a mapping of the business objects onto a relational database. \nThe system also integrates a commercial reporting engine to generate the reports on the server and to \ndownload them over the web for display on the client. A platform-independent business architecture was \nspecified using standard UML artifacts. This formal business object archtiecture was implemented largely \nas modeled in the application server, which insulated the business object logic from object storage specifics. \nJavaBeans was used to provide the business object developers with a Java-centric (versus a CORBA-centric) \nprogramming model, further insulating the GUI from the changes to the middle-tier, and totally encapsulating \nall the distributed computing mechanisms and policies. Despite the usual dose of annoying problems, the \nproject was very successful. The engineering team kept pace with numerous changes to the requirements, \nGUI updates, etc. There was no serious schedule slip- page due to product or design problems. The hardware, \nsoftware, and personnel resources remained as originally planned. The system met its look and feel requirements \nas well as its performance requirements. Despite these key accomplishments, however, there were some \nserious issues that resulted in significant ar- chitectural tradeoffs. First, the GUI design found AWT \ndeficient in terms of the ability of its widgets to display the sophisticated graphs and charts of the \nrequired clinical data. Appropriate commercial widgets are available, but down- loading these libraries \nof 500 Kbytes is too big for 56 Kbit modems to handle in an acceptable startup time. The tradeoff was \nto make a less sophisticated GUI with AWT and avoid the download, or to use the sophis- ticated widgets \nand pre-install them at the clinics. The decision was to keep the sophisticated GUI, and ac- cept the \nfact that client software installs and upgrades would not be painless or transparent for some time. Another \nissue arose when the ORB that comes with Netscape (VisiBroker) was found to be incompatible with the \nORB that we were using (Orbix). In fact, it was necessary to delete the native Netscape ORB so that Netscape \nwould download our ORB. Other alternatives might fix this problem, e.g. a patch from one of the vendors \nor compiling the client stubs with the Netscape ORB. Other incompatibility issues occur at the browser \nas well. For example, the browsers differ on how to pre- install applications, and how to grant privileges \nto local resources. Signing of applets also differs among the browsers. There are a number of other setup \nissues with regard to the firewall, the IIOP proxy forwarding engine, and so on. Finally, Internet applications \nmust be designed to get all the data that is required to populate a screen in a single call or small \nnumber of calls. For acceptable performance over low bandwidth lines, the applet can t make dozens of \nCORBA calls back to the middle-tier -- the connection overhead is simply too great over the Internet. \nWe reduced network calls by returning lists of structures instead of object references, and by passing \nan entire object s state to create and update operations, rather than setting individual attributes one \nat a time. Follow this pattern and an applet will usually perform better than downloading an HTML r-we. \nIn summary, Java and CORBA do indeed provide the benefits that have recently been described in the trade \njournals and commercial component are available that can be integrated into an infrastructure for such \nap- plications. Beans provides an excellent way to provide a Java-centric programming model and still \nuse CORBA to access remote servers transparently. To be successful, establish a distributed object infrastmc- \nture, design a platform-independent business architecture, and reduce the number of roundtrips over the \nIn- ternet. Rajendra Raj, Morgan Stanley As enterprises become more global and distributed, so does the \nneed for enterprise-wide software applica- tions. For the past several years, I have functioned in various \ncapacities---architect, developer and manager- --of successive generations of globally distributed persistent \nobject infrastructures that currently are suc- cessfully being used for a variety of high-volume real-time \nmission-critical financial applications. In late 1993, since no appropriate solution was found in the \nvendor marketplace, we decided to build Our own so- lution using vendor components and leveraging previous \nexperiences within the firm. The project was suc- cessfully implemented in 1994, with successive functional \nreleases continuing to this day; the current gen- eration also incorporates COKBA and related technologies. \nIt is likely that the next generation of this infra- structure will be relegated to a supporting role, \nprimarily on the server side, in an increasingly Web-centric world of distributed computing. This talk \nwill summarize the lessons during the development and deployment of the above infrastructures, and raise \nissues that must be addressed when constructing large distributed systems. In short, there are no canned \nsolutions to building large scale distributed object systems, and common distributed issues (e.g., naming, \nreliability, availability, replication, fault-tolerance, transactional integrity, persistence, security, \nobject mobility, heterogeneity, scalability, and performance) need to be re-addressed in an integrated \nman- ner for each application due to different practical tradeoffs. Ashutosh Tiwary, Boeing Information \nand support services Building a large scale distributed system is intrinsically hard. Current distributed \nobject technologies pro- vide good ways of managing the complexity of such systems. However, the builders \nstill have to deal with the other hard problems in building such systems. For example, when performance \nand scalability are critical requirements, the builders frequently need to look below the covers of such \ntechnologies. This ei- ther results in significant customization of existing technologies or the construction \nof home grown distrib- uted object infrastructures. In this talk, I will describe my experience in building \ntwo commercial distrib- uted object applications with home grown infrastructures. In both cases, performance \nand scalability were critical requirements. For such applications, I will argue that a single language \nenvironment with customiz- able support for distribution and persistence is more important than buzzword \ncompliance . Participant Biographies Doug Lea is a professor of Computer Science at the State University \nof New York at Oswego. He is author of the book Concurrent Programming in Java , and co-author of the \ntext Object-Oriented System Development . He is the author of several widely used software packages, \nas well as articles and reports on object oriented software development including those on specification, \ndesign and implementation tech- niques, distributed object systems, and software reusability. David W. \nForslund, a fellow of the American Physical Society, and a Fellow of Los Alamos National Laboratory, \nis a theoretical and computational plasma physicist who has made major contributions in a broad range \nof plasma physics from space plasma physics to magnetic fusion to laser fusion and, more recently, in \ncomputer science. As deputy director of the Advanced Computing Laboratory and Los Alamos National Laboratory \nFellow, he has helped guide the installation and operation of one of the largest massively parallel supercomputer \nsystems in the world and led research projects in the practical applications of parallel and distributed \ncomputing. He has over 50 publications in refereed scientific journals and has given numerous invited \ntalks in plasma physics and computer science for the past 25 years. Torn Barry is an Object-Technologist \n(a.k.a. consultant) with LinkSoft Corp. in Chicago. He has worked with Gemstone s GemEnterprise technology \nfor the past 18 months and has worked with object-oriented technology since 1989, including C++ and Smalltalk. \nHis latest project is a gateway to connect Gemstone/S to a commercial web server such as Netscape Enterprise \nor Microsoft IIS to serve dynamic content. Tom has an MSEE from U.C. Berkeley and an MBA from the University \nof Illinois. Don Vines is Director of the Distributed Object Computing (DOC) practice at Genesis Development \nCor- poration, a world leader in object technology consulting. At Genesis, Don plays a pivotal role in \nmanaging major customer engagements, technical partnerships with the major ORB vendors, and technical \nstrategies relative to the OMG and other standards bodies. He is also co-authored numerous OMG specifications \nincluding: COM- CORBA inter-working, Extended IDL data types, ORB-to-ORB interoperability, and IDL-to-C++ \nmapping. Prior to Genesis, Don was technical architect for both NEC s and IBM s CORBA product lines. \nHe has been a proponent and developer of the object paradigm since 1983, and is a well-known speaker \nand author, with articles in numerous technical journals such as C++ Report and Object Magazine. Rajendra \nK. Raj is Vice President in Morgan Stanley s Information Technology Division, Where he has led the development \nof several generations of buzzword-compliant object infrastructures used for financial applications. \nMost recently, he has been focusing on the problem of semantic integration of diverse business data for \naccess by distributed applications. Before joining Morgan Stanley, Dr. Raj was an Assistant Professor \nat the State University of New York at Oswego. He has authored several scholarly publications and Has \ngiven talks at universities, corporate centers, workshops and conferences including ECOOP and OOPSLA. \nHe holds a Ph.D. from the University of Washington, Seattle. Ashutosh Tiwary is a researcher with the \nResearch and Technology Group of Boeing Information and Support Services and a PhD candidate in the Computer \nScience Department at the University of Washing- ton. He has had about 8 years experience building 00 \nsystems and has worked on several commercial and research Large Scale Distributed 00 system. He was also \nthe chair of the OOPSLA 95 Workshop on Building Large Software Systems using Objects and OOPSLA 96 Workshop \non Objects in Large Distrib- uted and Persistent Software Systems. His current work is focused on persistence \nof object-oriented sys- tems and performance analysis and tuning of large scale systems. \n\t\t\t", "proc_id": "286936", "abstract": "", "authors": [{"name": "Doug Lea", "author_profile_id": "81100271749", "affiliation": "University of Oswego", "person_id": "PP48023830", "email_address": "", "orcid_id": ""}, {"name": "David Forslund", "author_profile_id": "81100065668", "affiliation": "Los Alamos National Laboratory", "person_id": "P61549", "email_address": "", "orcid_id": ""}, {"name": "Tom Barry", "author_profile_id": "81414598121", "affiliation": "Lucent", "person_id": "PP31069819", "email_address": "", "orcid_id": ""}, {"name": "Don Vines", "author_profile_id": "81344499602", "affiliation": "Genesis", "person_id": "P68192", "email_address": "", "orcid_id": ""}, {"name": "Rajendra Raj", "author_profile_id": "81100590340", "affiliation": "Morgan Stanley", "person_id": "P238038", "email_address": "", "orcid_id": ""}, {"name": "Ashutosh Tiwary", "author_profile_id": "81100338692", "affiliation": "Boeing Information and support services", "person_id": "P22601", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/286936.286981", "year": "1998", "article_id": "286981", "conference": "OOPSLA", "title": "Building distributed systems (panel)", "url": "http://dl.acm.org/citation.cfm?id=286981"}