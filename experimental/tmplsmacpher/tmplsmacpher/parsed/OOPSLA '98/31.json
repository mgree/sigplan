{"article_publication_date": "10-01-1998", "fulltext": "\n Software Reuse: Nemesis or Nirvana? Panel Session Steven Fraser, Nortel (Chair); Maggie Davis, Boeing; \nMartin Griss, HP Labs; Luke Hohmann, SmartPatents; Ian Hopper, Nortel; Rebecca Joos, Motorola; Bill Opdyke, \nLucent Technologies Context Models project on the development of team-based domain analysis techniques. \nSince joining Nortel As we reach the end of the millennium, the con- cept of software reuse and the practice \nof software in 1987, Fraser has contributed to the develop- engineering has existed for almost thirty \nyears. ment of 00-based CASE-Design Tools and to Both concepts were introduced into the literature software \ndevelopment processes. Fraser com- in the late sixties. To set the context for this panel, pleted his \ndoctoral studies at McGill University in Nirvana is taken to mean a state of great happi- Electrical \nEngineering. He holds a Master s degree from Queen s University at Kingston in applied ness, while Nemesis \nis understood to be a state of great frustration. The panelists will share their Physics and a Bachelor \ns degree from McGill experiences and perspectives with the audience in University in Physics and Computer \nScience. He a dialogue initiated by the following questions and is an avid operatunist and photographer. \npositions: Maggie Davis - What are the most challenging cultural barri-Boeing, Seattle, WA, USA. ers \nto software reuse? maggie.davis@pss.boeing.com  - What are the best-in-class successes achieved Maggie \nDavis will discuss what barriers she has  with software reuse? encountered working first in the large \ndefense contractor culture of Boeing where products are - How is software reuse success recognized and \nextremely large, long-lived systems and now in sustained? the information systems culture supporting \nmanu-Perhaps the key determination of success for facturing and assembly of complex airplanes. software \nreuse is how it can - as a combination of cultural and technology practices -deliver Davis is now a Computing \nSystems Architect us-customer valued systems in webtime ? What ing object and domain modeling techniques \nto are the challenges of: education; team communi- support development of a factory computing sys-cation; \ndesign technology; economics; and leader- tem architecture for Boeing Commercial Airplane ship? What \nis the role of the customer; the man- Group. She was Principal Investigator (199.5 ager; the designer; \nand the corporate executive? 1997) of the Boeing internal research and devel- opment project titled Enabling \nTechnology for Steven Fraser Product Reuse, which concentrated on architec- Panel Chair ture frameworks \nas a motivating factor in system- Nortel, Santa Clara, CA, USA. atic reuse adoption. Davis was Reuse \nTechnology sdfraser@nortel.com Area Lead for the Boeing STARS program from 1988- 1995, participating \nin the joint development Steven Fraser is manager of the Software Design of the STARS Conceptual Framework \nfor Reuse Process Engineering team at Nortel s Meridian Processes (CFRP) and the Reuse Strategy Model \nSystems Headquarters in Santa Clara, California. (RSM). He is also Chair of the Nortel Design Forum, \nan annual three day proprietary interactive video con- Martin L. Griss ference with more than 25 participating \nsites world-wide. Previously, he spent four years at HP Laboratories, Palo Alto, CA, USA. Nortel s Computing \nResearch Laboratory in Ot- griss@hpl.hp.com tawa, Canada. In 1994 he was a Visiting Scientist at the \nSoftware Engineering Institute (SEI) col- Technology is Not Enough - Cultures in Conflict laborating \nwith the Application of Software Objects are believed to be crucial to achieving the long-sought after \ngoal of widespread reuse. Un- fortunately, many people naively equate reuse with objects, libraries and \nother tools, expecting reuse to automatically emerge, but often do not get much reuse. Based on our experience \nwith re-use at HP, and with our many customers, we know that without extensive process and organizational \nchanges to support systematic reuse, objects will not succeed in giving users reuse. In almost all cases \nof successful reuse, architec- ture, a dedicated component development and support group, management \nsupport, and a stable domain were the keys to success. These largely non-technical issues seem more important \nto suc- cessful reuse than the specific language or design method chosen. As Simos has pointed out, archi- \ntecting for reuse is a social process, involving numerous stakeholders with disparate personal, political \nand technical agendas. Teams and indi- viduals may choose to work with each other, or avoid collaboration \nand sharing based on trust, prior history, credibility or perceived importance of role. Management must \nemploy systematic or- ganizational design techniques and even business- process re-engineering techniques \nto ensure a suc- cessful transition. Martin Griss is a senior Laboratory Scientist at Hewlett-Packard \nLaboratories, Palo Alto, Califor- nia where for the last 15 years he has researched software engineering \nprocesses and systems, sys- tematic software reuse, object-oriented reuse, and measurement system kits. \nHe has had a defining role as senior reuse consultant within HP s Profes- sional Services Organization. \nAs HP s reuse rabbi, he led research on software reuse process, tools, and software factories; the creation \nof an HP Cor- porate Reuse program; and the systematic intro- duction of software reuse into HP s divisions. \nHe was director of the Software Technology Labora-tory at Hewlett-Packard Laboratories, and has over \n25 years of experience in software engineer- ing research. He was previously an associate pro- fessor \nof computer science at the University of Utah, where he is currently an adjunct professor. He is a member \nof the SIGSOFT executive com-mittee, and the UML 1.1 semantics and revision taskforces. He has authored \nnumerous papers and reports on software engineering and reuse, writes a reuse column for Object Magazine, \nand is active on several reuse program committees. Luke Hohmann SmartPatents, Mountainview, CA, USA lhohmann@acm.org \n In this position statement I d like to talk about a fundamentally different approach to reuse than \nmy fellow panelists. Instead of talking about reuse from the perspective of components, objects, sub- \nsystems, or the like, I d like to talk about the reuse of knowledge. (Where does reuse start? Humans \nare reuse machines. We work at finding a solution to a problem what is the fastest way to drive to work?). \nOnce found, we reuse this solution as much as possible (we drive to work the same way every day). When \nthe reusable solution fails us, we try something new. Through this process we /earn something. We learn \nwhat didn t work (don t reuse that) and we learn what did (remember -reuse -that). Where does software \nreuse start? Software devel- opment is a special kind of problem solving, one that involves creating \nsoftware systems to meet some number of defined needs. We know from empirical evidence that what makes \nan expert de-veloper different than the novice is that the expert has amassed, inside their head, a rich \ncognitive li-brary of reusable knowledge. It is this knowledge, traditionally acquired through years \nof hard work, that enables the expert to be an expert in problem solving. But we also know that expert-level \nknowledge is often tightly coupled to a specific problem domain, such as real-time embedded system programming \nor the design of large rela- tional databases. Note that this kind of reuse is very different from the \nkind of reuse most commonly referenced in the literature. I m not talking about reusing an ob- ject, \nan OCX, a subsystem, or a framework. In-stead, I m talking about the kind of reuse that is more commonly \nreferred to as experience. How can we reuse expert knowledge? A central question in the reuse literature \nis how we can bringforth expert-level knowledge in such a way that it can be shared with novices in order \nto im- prove their performance quickly. This is the proc- ess of separating the cost (or pain) of creating \nex- pert-level analysis or design knowledge with the cost of (re)using it. While many things have been \ntried over the years, the current patterns move- ment has proven beneficial as a means of sharing expert \nknowledge in an efficient, cost-effective means. Patterns exist for general design issues (such as the \nBuilder pattern, which guides us in the creation of complex run-time object struc- tures), to teaching \na complex subject in a class- room. Finally, we are starting to see more and more pattern languages, \nor sets of inter-related patterns that deal with solving problems in a well- defined problem domain. \nWhat is the reuse from patterns? Although many patterns and pattern languages move far beyond mere reuse \nin their sharing of expert knowledge, the practical software developer in me focuses primarily on how \nthey directly impact my and my teams ability to write great software. Viewed in this light, patterns \nrepresent a form of reuse in which the (re)user engages in the intelligent cus-tomization of expert-level \nknowledge to meet the specific demands of their problem. Pattern reuse is not the same kind of reuse \nthat one achieves from using remove if() from the standard C-t+ library, nor is it the k&#38;d of reuse \nthat one achieves when they purchase an ActiveX component. Both of these forms of reuse are powerful \nin their own right, but they are qualitatively different than pat- tern-based reuse. Instead, pattern \nreuse is a deeper kind of reuse, one that also enables both the nov- ice and the expert to do more than \nsimply reuse a component or a subsystem, for in reusing patterns, we learn as humans. Luke Hohmann is \nthe Vice-President of Engi- neering at SmartPatents, Inc., the world-wide leader in the development of \nanalytical software systems that enables companies to automate the process of analyzing, protecting, \nand maximizing the value of intellectual property assets. Mr. Hohmann has extensive experience in object- \noriented analysis and design, software engineer- ing, user interface design, and project manage- ment. \nHe is the author of Journey of the Software Professional: A Sociology of Software Develop- ment (Prentice \nHall). Mr. Hohmann is currently working on two books, GUZs with Glue: Creating Usability Through Lo-Fi \nDesign and Pattern Vi- gnettes: Using Design Patterns in the Real World. He has authored numerous papers \non the sociol- ogy of software development. Ian Hopper Nortel, Santa Clara, USA. ihopper@nortel.ca Carry-Over \nReuse: Hoisting Reuse appears to be in the realm of the real world; neither nemesis nor nirvana. Our \nsolutions are very much in the rubber bullet category: insufti- cient to solve the biggest problems, \nbut useful in some cases. Software engineering research has re- solved most of the smaller issues and \nis moving on to the larger issues, which involve soft-sciences like economics and psychology. Progress \non programming in the large will be slow. As we explore new avenues and technologies for higher productivity, \nwe tend to forget the basics. Old (existing) software is frequently a good- enough basis for the development \nof new soft- ware. In this discussion, I will review cultural and economic factors that may lead away \nfrom soft- ware reuse and suggest a practical middle course. Old software is difficult to sustain over \ntime due to incremental development encroaching on ar- chitecture limitations, challenges in maintaining \na high-productivity development environment and difficulties retaining staff. However, replacing the \nsoftware of an existing product often forces dou- ble development of features until the new software \ncompletely covers all existing capabilities. Fi-nally, new software for a new product is higher risk \ndue to vague requirements and resulting un-predictable schedules. The new product may be awkward in the \nmarketplace due to functionality overlap and integration expectations. We have had success with software \nevolution us-ing a pattern that I call hoisting. It is practical to put a new series of layers below \nan entire software structure. The classic and lowest risk variant is to port to a more sophisticated \noperating system, which allows new development to exploit the new platform and to be marketed easily \nas new fea- tures for a proven product. In the more general case, the new layers creatively interpret \nthe for- merly low-level operations to allow new capabili- ties to be controlled by the older software. \nIan Hopper is the Software Architect for the Nortel Meridian 1 PBX product in Santa Clara, California. \nHe joined the Nortel, Ottawa lab in 1983 as a software designer on multi-media and data communications \nsystems. He worked on early voice-data integration and twisted pair LAN technology (802.9). Hopper has \nbeen exploring and applying the object-oriented computation model since 1981. He is an Honors B.Math./CS \ngraduate of the University of Waterloo. His week- ends are often spent wind surfing on San Fran- cisco \nbay. Rebecca Joos Motorola, Arlington Heights, lL, USA. joos@cig.mot.com When is Too Much Enough? and \nWhen is It Too Little? The first hurdle of introducing software reuse is the selling and support phase. \nThe success of this phase depends upon getting the right kind of sup- port from the right level of management. \nOnce that is accomplished the next phase, or hurdle, is selling the troops i.e., the engineers. Joos \nwill ad-dress some of the issues (a what has worked and what hasn t approach) of getting reuse into the \nen- gineering culture. Rebecca Joos is a Principal Staff Engineer at the Cellular Infrastructure Group \nlooking into new and better methods, techniques, and tools to more accurately and efficiently develop \nsoftware in the switching division. Her concentration on software reuse has been extended to basic software \nengi- neering and quality issues. She has been instru- mental in introducing and supporting process (SE1 \ncapability matrix) and promoting reuse as a pro- ductivity and quality enhancer. Her immediate concern \nis how this technology can be made a cultural part of the engineering environment. William F. Opdyke \nLucent Technologies/Bell Labs, Naperville, IL, USA. wopdyke@lucent.com Nemesis? Nirvana? Neither! Neglected! \nNeeded! Let s consider what the terms nemesis and nirvana really mean (based on their definitions in \nthe New American Heritage Dictionary) and whether either term comes close to characterizing software \nreuse. Then, let s reflect on the current state - and speculate about the future - of software reuse. \nIs software reuse a nemesis - something that in- flicts relentless destruction on organizations that \nattempt a reuse program? No - at least not relent- lessly. Organizations have pursued reuse efforts for \nmany reasons and in many different ways. If the organizational culture is supportive of reuse (as per \nthe areas well enumerated by Griss in his position statement), software reuse can play a supportive (rather \nthan destructive) role in ena- bling an organization to achieve or at least come closer to achieving \nits cost, quality and schedule targets for application developments. If the culture doesn t support reuse, \nmost organizations will eventually abandon their reuse program and thus the pain won t be relentless. \nIs software reuse nirvana - providing blissful free-dom from pain and care? No, at least not for long. \nSoftware applications must function in the real world, where change is rapid along several dimen- sions, \nincluding technologies, user needs, external and component interfaces, and designers under- standing \nof the family of applications they are supporting. I have yet to meet a software devel- oper who could \ncredibly claim omniscience; hence, software that is intended to be reusable must be able to adapt to \nunforeseen changes. A culture supporting reuse will support the adapta- tion of existing components in \na way that mini- mizes -but doesn t eliminate - the pain. Geoffrey Moore, in his book Crossing The Chasm,notes \nthat many ideas and products are embraced by the innovators and early adopters (the folks who embrace \nnew technologies, have visions of new paradigms, etc.), but ultimately fail because they are never embraced \nby the main- stream -the early and late majorities. That audi- ence cares about reliability, technological \nmatur-ity, cost and customer support. They also want to see how others, with problems similar to theirs, \nhave already successfully applied whatever new idea or product is being marketed to them. For decades, \nthe champions of software reuse have been unsuccessful in delivering solutions that meet the needs of \nthis mainstream audience - and, hence, software reuse has been neglected by the mainstream. Software \nreuse is now being viewed afresh in in- dustries such as telecommunications, where com- petition for \nboth customers and technical talent is fierce, and where cost pressures are relentless and increasing. \nThe mainstream is taking more notice of software reuse. Technologies such as object- oriented technology \n(with its focus on reusable components and cross-application frameworks) and domain analysis (with its \nfocus on supporting application families) are among the tools being successfully applied to reduce costs \nacross related applications. Some of the critical, non-technical issues are being addressed in organizational \ncul-tures that are embracing systematic reuse. Success stories are beginning to appear (while others \nare kept secret, to retain a competitive advantage) -and I predict that we will see more success stories \nin the future. Bill Opdyke has conducted several software reuse and platform related projects at Lucent \nTechnolo- gies/Bell Labs, including cross-application design and advanced development, consulting with \nprod- uct development teams on platform technologies and vendor component selection, publishing a newsletter \nthat focuses on experience reports, technologies and other issues related to reuse. Op- dyke s research \nat the University of Illinois (which Ralph Johnson supervised) focused on refactoring object-oriented \nframeworks to support evolution and reuse. Opdyke s most recent research related to organization issues \nand reuse was presented at WISR 97 (the International Workshop on Soft- ware Reuse) and PLOP 97 (Pattern \nLanguages conference). \n\t\t\t", "proc_id": "286936", "abstract": "", "authors": [{"name": "Steven Fraser", "author_profile_id": "81339499863", "affiliation": "Nortel, Santa Clara, CA", "person_id": "PP35044439", "email_address": "", "orcid_id": ""}, {"name": "Maggie Davis", "author_profile_id": "81100601567", "affiliation": "Boeing, Seattle, WA", "person_id": "PP31073901", "email_address": "", "orcid_id": ""}, {"name": "Martin Griss", "author_profile_id": "81100145121", "affiliation": "HP Laboratories, Palo Alto, CA", "person_id": "PP31078187", "email_address": "", "orcid_id": ""}, {"name": "Luke Hohmann", "author_profile_id": "81100413804", "affiliation": "SmartPatents, Mountainview, CA", "person_id": "PP39041662", "email_address": "", "orcid_id": ""}, {"name": "Ian Hopper", "author_profile_id": "81100172411", "affiliation": "Nortel Santa Clara, CA", "person_id": "P115479", "email_address": "", "orcid_id": ""}, {"name": "Rebecca Joos", "author_profile_id": "81100328512", "affiliation": "Motorola, Arlington Heights, IL", "person_id": "PP31081624", "email_address": "", "orcid_id": ""}, {"name": "Bill Opdyke", "author_profile_id": "81100640873", "affiliation": "Lucent Technologies/Bell Labs, Naperville, IL", "person_id": "PP14219969", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/286936.286982", "year": "1998", "article_id": "286982", "conference": "OOPSLA", "title": "Software reuse (panel): nemesis or nirvana?", "url": "http://dl.acm.org/citation.cfm?id=286982"}