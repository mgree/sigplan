{"article_publication_date": "10-01-1998", "fulltext": "\n Question Time! about Use Cases Alistair Cockburn Martin Fowler Humans and Technology Independent consultant \narc@acm.org Fowler@acm.org PANEL OVERVIEW In Britain there is a very successful form of panel session, \non a television program called Question Time. In this programme, four panelists, all public figures, \nare chosen to give a spectrum of viewpoints. There is always a figure from the two main political p<a.rties, \nusually one from the third largest party, and some complementary figure, perhaps a a business leader, \nunion leader, or media person. This gives a wide spread of views. There are no position statements, the \nprogram is filled by discussing questions at about 10 minutes each. Each question is asked by an audience \nmember, all four panelists respond, moderated by the panel moderator (a well known BBC ligure). The questioner \nthen makes a brief reply, and there is a brief period of comments from the floor. The questions are submitted \nin advance by the audience members and the progr am organizers pick six questions that will be interesting. \nThis panel on use cases follows roughly the same format. A well known (English!) 00 figure will question \nfour expert panelists with differing views, to expose their views and their reasons for differing. There \nare no position statements, the 90-minute pane1 is filled by discussing eight questions. The questions \nare submitted in advance by the public and audience members. The moderator picks eight questions that \nwill be interesting and help tease ap art subtle issues and differences between the panelists. For each \nquestion, all four panelists respond, moderated by the pane1 moderator. The questioner makes a brief \nreply, and there is a brief period of comments from the floor. PANEL PARTICIPANTS Mm-fin Fowler, the \nModerator, is an independent software consultant who has been applying objects to business information \nsystems for over a decade. He has used use cases extensively, but still finds it difficult to crystallize \nthe best ways of defining and using use cases. He is the author of Analysis Patterns and UML Distilled \nand his clients have included Chrysler, Citibank, and Netscape. Ivar Jacobson, is the inventor of use \ncases, founder of Objective Systems and the Objectory method, and one of the three amigos of UML. Other \nthan the UML definitions and numerous articles on use cases, he is well known for his books Object Oriented \nSoftware Engineering, The Obiect Advantage, and Software Reuse - Architecture, Process and Organization \nfor Business Success. Bruce Anderson, formerly an academic and currently senior consultant in the IBM \nConsulting Group, was the originator of the architecture handbook project. He has been investigating \nuse cases for his consulting work and has no particular vested interest in any one definition. Alistair \nCockburn, consulting fellow at Humans and Technology and special advisor for the Central Bank of Norway. \nHis Structuring Use Cases with Goals has been used as a basis for introducing use cases in many companies, \nHe used this use case mode1 to coordinate development of a successful, 200-use-case, 60-work-year project. \nHe recently published Surviving Obiect-Oriented Proiects. Ian Graham, Vice President, Chase Manhattan \nBank, is the inventor of the SOMA method and task scripts , which are similar in spirit to use cases. \nHis books include the SOMA book and The OPEN Process Specification. I heard last year the sentence, The \nmethodology wars are over; let the use case wars begin. This showed the high level of interest, discussion \nand disagreement on the issue. If the topic of use case is suitable, I don t think the usual pane1 format \nis. The opportunity here is to let the audience see how the use case pundits differ, and to preselect \nthe questions to get ones that will be of general interest. POSITIONS Martin Powler As moderator, here \nare some plausible questions I see. l How big is a use case? Recently I worked with a project that is \ndeveloping a payroll system. The project was roughly a dozen man-years of effort. They used around 170 \nuse-cases to describe what they were going to do. Another authority on use-cases was surprised by that \nnumber: he would have expected 25. What makes a good use case? I m not sure what the areas of discussiou \nare here, bul it is an important question. How t~u~ch detail do you do up-front on use cases? The question \nis how much detail do you need in the use cases before you start incremental development of those use \ncases. I have seen variations between a couple of paragraphs on a card, to a document section of lo-20 \npages. Do use cases lead to jimctional designs? A number of people have seen use cases encourage a functioual \ndecomposition design. Do you find this a commou problem? How do you avoid it? Do you have internal use \ncases? For some people, a USC case must be something that involves user interaction. For others it can \nbe a piece of internal functionality (such as a database interaction use case). What do you use use-cases \nfor? Requirements gathering, project planriing (assigning use cases to increments), system testing. Are \nthey good for all of these? Anything else? Do you use actors? Jacobson s approach ties use-cases to actors. \nDo you find actors useful? Do you use extends and uses relationships? Jacobson s approach makes use of \nextends and uses relationships between use cases. Do you find these useful, do you find them dangerous? \nHow form1 should usecases De? Some people break down uses cases into sub uses cases and come up with \ndefined steps. others just write a few sentences to explain the basic idea. Ivar Jacobson USC cases were \nlirst made public in the OOPSLA 87 paper: Object-Orienled Development in an Industrial Euviroument, but \nthey had by then been used in a similar Corm for many years. Definitions were given for practical uses \nfor real products. Later in summer 1992 a full description of the use case construct and use case driven \ndevelopment was published in the Object-Orienled Software Engiueering book. More than 200 pages described \nuse cases and their realizatious as collaborations of a society of objects, playing roles in realizing \nthe use cases. Use case driven design was introduced, meaning tlial Ux use cases drive the whole development \nwork. Every use case found in requirements capture is mapped lo a realization of that use case in analysis \nor design <and linally lo a set of tesl cases in test. The ability to drive development and not just \nhelp in requirements capture is the great value of use cases. When writing the book, I was very careful \nin no1 tryiug lo formalize the use case idea. Working with formal specificalions for 15 years by that \ntime, I had seen what t(x) early formalization can do to good ideas. To formalize is both very simple \n(you can do it as a master thesis at some good computer science college) and very difficult (what could \nbe formalized and still practical). In the book 1 made it very clear that use cases were classes, that \ncould be inslantiated and that could interacl with actors (users) only. Interactions between use casts \nwithin tllc same system being modeled were prohibited for strong reasons. USC case instances were atomic \nso that conflicts between different instauces were avoided (they could uot be modeled here but elsewhere). \nUse cases could be relaled through Iwo kinds of class- relations: uses which is a generalization-specialization \nrelationship and extends which is a mechanism by which you can extend behavior specified in another USC \ncase. Both these relationships are very important to avoid redundancy and to allow evolution. Use cases \ncould be described by using interaction diagr ams with actors and the use case itself as participants. \nAnd, a use case could be described by activity diagrams (we called them state transition diagrams, but \nI use the UML term here) or by a state machine (similar to state charts). These techniques were further \nelaborated in a series of articles in ROAD in 1994-95. Use case realizations were described by interaction \ndiagrams with objects of specific classes being participate ts, playing roles in the realizalion. This \ntechnique had been used since 1967 to describe collaborations among objects, so il was very well proven. \nThus use cases and their realizations were as well described as anything else in object-oriented design. \nThe major reason why people still think they need to be further formalized is that they are not relyiug \nou the semantics of a programming like Smalltalk, C++, Java -at least not yet! In the work on UML we \nhave made a precise definition ol the use case related language constructs. Use cases arc classes with \nattributes and operations, participate in collaborations with actors, are realized as collaborations \nol classes or subsystems -each playing a role in realiziug that use case, have class relationships, can \nbe described by a state chart or an interaction diagram. The idea of use cases has moved over to the \nworld of business engineering. A business use case is a true business process. From a business model \nof an organization we can derive llie syslem use cases required to give IT support for the business. \nUse cases are also very important to achieve substantial reuse when building a suite of applications. \nUse cases are reusables. They help in building systems of systems with traceability betweeu higher level \nsystems and lower level subsystems. Use cases also serves as the problem specification part of patlerns, \nwhich are the solution part. However, most important is the practical acceptance and application of use \ncases. With or without formal dclinitions, users have picked up the basic ideas and intuitively applied \nthem. There <arue 100 s of reports on the successful use of use cases in commercial projects, many of \nthem not based on any particular formalism. This is very essential and most encouraging for the future \nof the ideas. Bruce Audersou I take a very pragmatic view of use cases, so here are some things that \nI ve found Remember what use-cases are for. They are something that users and developers create together \nto help them agree. There is always an element of you know what I mean . Sometimes some of this needs \nspelling out, as when we did them for a website and it was clear that you could bookmark yourself at \nany point in a course and come back later, perhaps many times. A requirements document should do the \njob, and needn t be just use-cases. For a call-centre, include a model of call states - it would be crazy \nto code this up as use-cases. The context for use-cases includes the business you re in, the team you \nhave and the kind of systems you build. Develop your own style that works for you. I ve found Alistair \nCockburn s form very useful. It makes sense, and it s good to have his paper backing it up. The name \nis a hindrance for business people. Sometimes I say that it s an anglicisation from Welsh or Japanese, \nto emphasise that use case is not an English phrase. You can make use cases only for a system that you \ncan imagine already. If you are at the stage where you (the end-user) are wondering what kind of system \nwill fit the bill, then you need to do some envisioning. This is a quite different thing. Correspondingly \nyou will have to give your use case readers some context so that they can do the imagining. Make sure \nyou have a preamble that does this. Alistair Cockburn Reponding lo Martin s suggested questions and other \nnatural once, I would answer: A use case is a collection of scenarios, bound together by a common goal. \nScenario is a trace of actions and messages from trigger to goal completion or abandonment, non- branching \nbut possibly with parallelism. Actor is actually a role, the thing or person having the goal. There \ncan be one use case for every system trigger. Use cases are for functional requirements of any system. \n They should be written black-box style. Collaboration diagrams show the white-box workings, but that \ninvolves the design, not just requirements, and therefore come later in the development process. Use \ncases can be used to gather functional requirements of companies, departments, computer systems - any \nsystem. A non-negotiable value to me of use cases is that they are easily read by any normal person, \nthe target audience is the person expert in the use of the system and the person designing the system. \nThey should be fairly easy for a non- technical person to write. For this I am willing to give up formality \nand precision in the writing and tolerate ambiguity. Use cases have a formal structure, which one is \nfree to abuse in the name of readability. How big is a use case? As big or little as it needs to be. \nThere are giant use cases and teeny use cases. I use one per business task, typically also a system transaction. \nI put them into several levels, depending on what system is being described. Those describing the corporation \nas system are not detailed enough to develop the software from. Those describing the UI are too detailed \nto serve as overall, readable, early-written functional requirements. Those below business transaction \nlevel are too detailed for readability and should only be included as they are sh,ared by other use cases. \n What make a good use case? That the goal, the value of satisfying the use case, is evident. That the \nuse case is written with steps at the same level, making it easy to follow, That the trigger and preconditions \nare clearly evident. That it is relatively brief (l-2 pages). That the set of use cases clearly cover \nthe function space. How much detail up-front? Unclear question. Before writing the first one or before \nsigning off on them or before designing? All different questions. Start writing right away, first thing, \nimmediately. Start designing as soon as the set for the initial release are identified. Start analysis \nonly after at least one use case is sketched. Continue to evolve each use case over the life of the design. \n Do they lead to functional designs? Not necessarily. Are there internal use cases? Can be. If you scope \na subsystem as The System Under Design, you can bother to write use cases for them. Most people don t \nfind it worth  the effort, but there is nothing contradictory in it and I the operations of classes \nand are therefore intrinsically have seen it done. unsuitable for this purpose. Do you use actors? I \nwork in three stages. At the lirst stage, actors are very important. They help define the breadth of \nthe system, showing whose goals need to be accommodated. In the second stage, they <are completely unimportant; \nthe goals drive the work; actors start to overlap, become generic and meaningless. At the third stage, \nthere is a mapping from real people or job descriptions lo goals, and these real people become actors \nagain, in a different and weaker sense than at the beginning. But the mapping from job descriptions to \nuse cases is important. Do you use extends and uses? Yes How formal? Formal substructure which can be \nabused in favor of readability, writing done in plain prose, not pseudo programming. Ian Graham The lack \nof a precise and universally accepted definition has led to a proliferation of approaches all calling \nthemselves use case based. I once asked if a precisely delined notion of use cases (such as task scripts) \nshould USCa different name. The consensus that emerged was, yes, we should really rename the idea but, \nno, the industry had bought the idea of use cases and so we had to live with the label - however ill \ndelined. I disagree with this pessimism and continue to talk about task scripts, while recognizing our \ndeep debt to Jacobson. A relatively simple application generated hundreds of use cases; fir too many \nto be manageable! One of several reasons for the tendency to lind too many use cases is the lack of any \nnotion of essentiality or genericity. This defect is potentially very serious. A task script represents \na generic use case. The s,ame application had only ten task scripts: an order of magnitude improvement! \nIn a system that prices orders and provides quotations or diverts them to a salesman for manual pricing \nor quotation, it wouId bc normal to have four use cases at the highest level of abstraction: autoprice \nquote, autoprice order, manual order and manual quote. This is not parsimonious because the applying \ndiversion rules that decide whether to re-route orders or quotes to the sales desk may be different for \nquotes and orders while the notilication process is the same (or vice versa). It is better to have independent \ntask scripts for the different components of the use case, which can then be assembled to model complete \nbusiness processes. This promotes greater re-usability of task objects. SOMA sequence diagrams show the \nway user- tasks are composed into end- lo-end processes, while UML sequence diagrams focus on Severe \nproblems arise if we try to treat use cases as objects. The structural links between use cases, uses \nand extends arrows, point in the wrong direction from the point of view of encapsulation. Therefore we \nare not able to treat use cases as bona fide objects. Therefore they are not really reusable. Usage links \ngive us a much better way of handling exceptions than is available with standard use cases, which suffer \nfrom the poor semantics of extends. As project managers we would like to believe that the number of use \ncases in a requirements amalysis gives some indication of the business benefit or the final system or \neven of the amount of effort involved in building it. However, use cases are notoriously hard to measure, \nsince a use case can be any length. The lack of a notion of atomicity means that no metrics can be reasonably \ndefined for use case models -unless we change their definition as many companies have indeed done: numbering \nthe sentences of a use case for example. The task script notion includes a notion of atomicity that permits \ndevelopers to measure task complexity by simply counting the atomic scripts. Use cases may be presented \nwithout business goals. This hampers traceability efforts and impedes the understanding of users. I would \nadd that the absence of the notion of triggering events is also a deficiency. Task objects have their \nscripts triggered by events in the agent model and that messages in that model have explicit goals. I \nthink that this is a better solution than attaching the goals directly to use cases as suggested by Cockburn \nand by Rawsthorne inter alia. Clearly the goal or contract is in the mind of some agent rather than being \nsomething possessed by the task itself. Use cases have been criticised for only dealing with the external, \ninterface aspects of systems. This is deliberate. The intention is to focus designers attention on what \nthe system did for its users, rather than how it did it. However, a variant on use cases that permits \ninternal modelling can be desirable in some circumstances. Finally, there is even a problem with the \nphrase use case itself. It makes for very unwieldy and unprosodic expressions. What is needed is an approach \nwith a sound, theoretical basis and a precise definition. We need a notion of genericity and a notion \nof atomicity for use cases or their equivalent. Use cases have no clear link to a business process model \nand are offered as such a model in their own right, which I feel does not make good sense. Finally, we \nneed an approach that is properly object-oriented in supporting encapsulation and inheritance.  \n\t\t\t", "proc_id": "286936", "abstract": "", "authors": [{"name": "Alistair Cockburn", "author_profile_id": "81100607756", "affiliation": "Humans and Technology", "person_id": "PP31072791", "email_address": "", "orcid_id": ""}, {"name": "Martin Fowler", "author_profile_id": "81100062314", "affiliation": "Independent consultant", "person_id": "PP14032419", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/286936.286960", "year": "1998", "article_id": "286960", "conference": "OOPSLA", "title": "Question time! about use cases", "url": "http://dl.acm.org/citation.cfm?id=286960"}