{"article_publication_date": "03-01-1993", "fulltext": "\n Formal Parametric Polymorphism Martin Abadi Luca Cardelli Pierre-Louis Curien DEC Systems Research \nCenter DEC Systems Research Center CNRS Ecole Normale Sup&#38;ieute Abstract A polymorphic function \nis parametric if its behavior does not depend on the type at which it is instantiated. Starting with \nReynolds work, the study of parametricity is typically semantic. In this paper, we develop a syntactic \napproach to parametricity, and a formal system that embod\u00adies this approach: system Z. Girard s system \nF deals with terms and types; !Ris an extension of F that deals also with relations between types. In \n%, it is possible to derive theorems about functions from their types, or theorems for free , as Wadler \ncalls them. An easy theorem for free asserts that the type V(X)X+Bool contains only constant functions; \nthis is not provable in F. There are many harder and more substantial examples. Various metatheorems \ncan also be obtained, such as a syntactic version of Reynolds abstraction theorem. 1. Explicit relations \nA polymorphic function is parametric if its behavior does not depend on the type at which it is instantiated \n[Strachey 1967], A function that reverses lists, for example, is paramernc because it does not look at \nthe types of the el\u00adements of the lists given as inputs. There are important non\u00adparametric polymorphic \nfunctions, such as a print function that maps values of any type to text representations. With this caveat, \nit can be argued that truly polymorphic func\u00adtions are parametric, and in any case it is the parametric \npolymorphic functions that form the core of languages such as ML [Milner, Tofte, Harper 1989]. Reynolds \nwork provides a precise counterpart to the informal definition of parametricity just given Reynolds 1983]. \nReynolds abstraction theorem concerns a language similar to Girards system F [Girard, Lafont, Taylor \n1989], Permission to copy without fee all or part of this material is granted provided that the copies \nare not made or distributed for direct commercial advantage, the ACM copyright notice and the title of \nthe publication and its date appear, and notice is given that copying is by permission of the Association \nfor Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. \nACM-20th PoPL-I /93-S. C., USA a 1993 ACM 0-89791 -561 -5/93 /0001 /0157 . ..$1 ,50 and says that the \ninstances of a polymorphic function at dif\u00adferent &#38;pes behave in related ways. For example, let f \nbe an expressible function of type V(X)X+X (the type of the identity function), and let f(A) and f(B) \nbe its instantiation at types A and B, respectively. In this case, the theorem says that, for any relation \n$ between A and B, if (a,b)e$ then (f(A)(a),f(B)(,b))U. A bit of calculation reveals that the identity \nfimction is the only function with this property, so f must be the identity function. This is what Wadler \nwould call a theorem for free Nadler 1989]: a result about a function that is obtained by examining its \ntype only, and not its code. Reynolds results about his system suggest that, more generally, one should \nview a function as parametric if and only if its instances at related types behave in related ways. In \nthe preceding discussion, functions, types, and rela\u00adtions are all semantic objects. Reynolds results \nconcern the models of polymorphic languages, such as F, and only indi\u00adrectly their syntax, Similarly, \nWadler s free theorems con\u00adcern semantic objects in these models, and do not immedi\u00adately refer to the \nworld of syntax, where they might serve in proving properties of programs. In this paper we develop a \nsyntactic approach to para\u00admetricity. This approach is embodied in an extension of F, called %, where \nrelations between types are constructed and treated formally. In % the free theorems can be stated and \nproved in a logical fkrnework and without reference to particular classes of models. Several of these \nfree theorems come from Wadler s work, and we hope that our detailed, formal treatment illuminates their \nproofx others seem to be new and intriguing. Various metatheorems about x can also be obtained, for example \na syntactic version of the ab\u00adstraction theorem. In all cases our results are not limited to closed terms. \nThe study of % seems to help in clarifying the notions of parametricity and the properties of parametric \nmodels. Semantic explorations steer a difficult course between heavyweight categorical constructions \nand lightweight fuzzy explanations; in contrast, we use a precise, elemen\u00adtary syntax. With this syntax, \nit is possible to formulate re\u00adsults and conjectures that relate the intuitive definition of parametricity \n( types are not needed at run time ) with Reynolds mathematical one. The remainder of this introduction \ncontains an informal technical introduction and a comparison with a few recent related works. Sections \n2 and 3 introduce !L its theory, and then some of the free theorems. In the conclusions we dis\u00adcuss further \nwork. An appendix contains the complete set of rules of the system. 1.1 Parametricity As an introduction \nto pararnehicity and to R, we give an example we prove that all parametric functions of type V(X)X+BOO1 \nare constant. (Here Bool is the type of booleans as encoded in F.) We start with an informal dis\u00adcussion \nof the functions of this type, then make the reason\u00ading a little more precise, and later introduce the \njudgments and some of the rules of K, which enable us to formalize the reasoning for this and other flee \ntheorems. At the very least, a function fin V(X)X+BOO1 maps values of any @to booleans. More precisely: \n(i) If Aisatypeand bhastype A, then f(A) maps b to a boolean. (Throughout we focus on total functions. \nThe complications in dealing with partial functions are well known.) The primary examples of functions \nthat satisfy (i) are the constant functions whose instances map any input to ei\u00adther true or false. BUL \nin some models, there are other func\u00adtions that satisfy (i) and that may be considered as belong\u00ading \nto V(X) X+ BOO1,such as a function zero-p with in\u00adstances that always map O to true and any other input \nto false. It is hard to code these additional functions in such a way that a typechecker would accept \nthem, and the result\u00ading code requires the use of types at run time. Hence, none of these functions can \nbe considered parametric. Only the constant functions remain. The sort of discussion of parametric functions \nthat we just went through, to exclude for example zero-p, is vague and not entirely satisfactory; it \ndepends on the use of partic\u00adular models and on implementation intuitions. Reynolds more satisfactory \napproach is based on relations between types. But before we discuss relations in general, it is con\u00advenient \nto introduce the per model &#38;ongo, Moggi 1991], which is based on special relations. In per semantics, \ntypes are interpreted as pers, that is, as partial-equivalence relations (symmetric and transitive relations \non the universe of values). Intuitively, b and c are related by the type A if they are equal elements \nof A, and in particular b is related to itself if it is an element of A. For example, A maybe the type \nof all records with a field n of type Nat, and band c maybe two records that have a field n with the \nvalue 3, but differ on other fields; in this case b and c are related by A. We write b[A]c for (b,c)eA. \nGiven two pers A and B, the set of all functions from A to B is also represented as a pec tlA+B]g iff \nfor all x, y, if x[A]y then f(x)[B]g(y) That is, two functions are equal in A+B if they map inputs equal \nin A to results equal in B. Universal quantiilcation is interpreted as intersection, with bound variables \nranging over pens. For example, in the language of pers, the condition for f to be in the type V(X)X+BOO1 \nis that flV(X)X+Bool]f. It follows that f(A)[A+Bool]f(A), for all A, and then (ii) If b and c are equal \nas elements of A, then f(A) maps b and c to the same boolean. In the per model, the only functions of \ntype V(X)X+BOO1 are the two obvious constant functions (but this does not follow from (ii) alone). In \ncase A is a record type, for in\u00adstance, requirement (ii) implies that f(A)(b) cannot depend on fields \nin b not shown in the definition of A. Reynolds work does not assume a per semantics, but his notion \nof parametricity can be seen as a stmmgthening of requirement (ii} in this example, it says: (iii) Ifs \nis a relation between types A and B, with a in A, b in B, and S relating a and b, then f(A)(a) and f(B)(b) \nare equal booleans. Requirement (ii) corresponds to the special cases= A = B. Intuitively, as Reynolds \nsuggests, we may think of A and B as two different representations of the same type, and of a and b as \ntwo different representations of the same value; then requirement (iii) means that the function f re\u00adspects \nrepresentation abstractions, returning results inde\u00adpendently of the representation of its input. In \norder to state the general form of (iii), we extend the operations + and V. They are defiied on arbitrary \nrelations just as they were on pers, except that the variables bound by V (now written U, W W, X, ...) \nrange over all relations, not just over pers. With this notation, there is a natural relation A* associated \nwith each type expression A the relation de\u00adnoted by the type expression, where all quantifkxl variables \nare interpreted as ranging over wbitrary relations rather than over pers. For example, the relation (V(X)X+BOOI)* \nis V(WW + Bcml, and (V(X)X+Y)* is V(WW + Y. The general form of (iii) can now&#38; stated An element \nof type A is related to itself by the associated relation A*. Essentially, Reynolds abstraction theorem \nsays that all the functions expressible in F satisfy this property. Thus, ac\u00adcording to the abstraction \ntheorem, if f is expressible with type V(X)X+BOOI, then f must be related to itself by V(WW + Bool. It \nfollows that if A and B are two types and S a relation between them, then f(A) and f(B) are re-Iated \nin fiBool, and so if $ relates a and b it follows that Bool relates f(A)(a) and f(B)(b), as stated in \n(iii). With (iii), it is simple to prove that constant functions are the only elements of the type considered \nLet f be a function of this type, let A be a type, and lets be the rela\u00adtion between A and Bool that \nassociates every element of A with true. Then f(A) and f(lhol) are related by $+BooI, and if a is an \nelement of A then f(A)(a) and f(Bool)(true) are related by Bool, that is, f(A)(a) is equal to the fixed \nboolean f(Bool)(true), independently of A and a. By exten\u00adsionality, f is one of the two constant functions. \n(The use of Bool and true is arbitrary; they can be replaced with any other closed type and closed tam \nof that type.) 1.2 Formal parametricity The relational approach to parametricity lends iklf to a syntactic \ntreatment. System K. provides such a treatment, based on judgmenw and rules in the style of those of \nF. Three judgments generalize those of F FE E is a legal environment A EI-K ~ is relation between A \nand Bin E B a:A El-R Xrelatesaoftype Aandboftype Bin E b:B In addition, an auxiliary judgment concerns \nrelation equali\u00adties E&#38;$ % S are equal relations between A and B B An equality judgment at the level \nof values is not needed. Instead of writing that b and c are equal in A, we can pro\u00admote the type A to \na relation (between A and A, intuitively, the identity relation) and write that A relates b and c. As \na consequence we write: b:A cormponding to the F judgment El-A E1-b=c:A c:A The environments of R extend \nthose of F. They contain two sorts of assumptions from F and two new ones: X is a type variable x:A \nx is a variable of type A $ Wis a relation variable between type variables X (domain) and Y (codomain) \nY x:A the variables x and y have types A and B, R respectively, and are related by R. y:B Using these \njudgments, we now review some of the central rules of ~. We start with rules that imitate those of F \nfor+ and V. The introduction and elimination rules for + are, re\u00adspectively: El- i+s 1(X : A jb :-A + \nB  b : A+B a:A El\u00ad !R.+s El- R b : A +B a : A b(a\\: B El\u00ad b (a ) : B These rules follow the same \npattern as the F rules E.x:Ai-b:B E1-l(x:A)b:A+B E1-b:A+B E1-a:A E1-b(a):B The introduction rule says: \nAssume that if X relates x of type A and x of type A, thens relates b of type B and b of type B . Then \nX.+ S, a relation between A+B and A +B , relates the functions k(x:A)b of type A+B and L(x :A )lf of \ntype A+B . An extra hypothesis that $ relates B and B is added to simplify our technical lemmas. The \nelimination rule works in the opposite direction, applying related func\u00adtions to related arguments and \nobtaining related results. The introduction and elimination rules for V are 2(X )b : V(X )B b : V(X)B \nc El-v(w~ El-r (J, b : V(X )B b(C)&#38;B~X~ C} El-b (C ) : B {X + C ) These rules are generalizations \nof the F rules: E, Xt-b:B Et-b : V(X)B El-C E 1-l(X)b : V(X)B El-b(C) : B{X+C) The introduction rule \nsays: Assume that if W is a relation between types X and X , thens relates b of type B and b of type \nB . Then V(*, a relation between V(X)B and V(X )B , relates the polymorphic terms l(X)b of type V(X)B \nand k(X)b of type V(X)B . Again, the elimination rule works in the opposite direction: it applies two \nrelated polymorphic terms to related types, obtaining related in\u00ad stances. Relations can be formed by \nquantitlcation over relation variables, as in the rules above, or by quantification over type variables \n(see the appendix). Two kinds of quantifiers are needed because of the two kinds of environment as\u00adsumptions \nfor relation variables and type variables. The fol\u00adlowing rule connects the two quantifiers, and is a \nformal counterpart to Reynolds identity extension property dis\u00adcussed in section 2. B X @B ,S,S E,$Fs=.S \nX i B,S,S X B Z ~dom(E) V(X)B Et-V(Z)S/W + Z) = V(W~ V(X)B This rule is very powerful, as it equates \nthe two quantifiers in arbitrary relation expressions; unfortunately it is also a source of semantic \ndifficulties (see section 4). We have considered several restrictions of this rule, but they lead to \nsyntactic difficulties, and we are not certain they solve the semantic ones. Hence, we prefer to keep \nthe general rule above and to leave the complete semantics of Rfor further work. structing functional \nrelations. Functional relations are often useful for obtaining free theorems for the example of sec\u00adtion \n1.1, the relevant functional relation is a constant one, obtained horn the function from A to Bool that \nmaps any a in A to true. One can easily imagine mechanisms for defining rela\u00adtions beyond taking the \ngraphs of functions. We have not yet found examples where these mechanisms are needed.  1.3 Related \nwork By now there are many papers on semantic aspects of parametricity ([Bainbridge, et al. 1990; Hasegawa \n1991; Ma, Reynolds 1991; Hasegawa 1992; Mitchell, Scedrov 1992], and others). On the other hand, the \nsyntactic study of parametricity is about one-year old. Some recent work is related to ours. Mairson \nadvocated and developed a syntactic approach to parametricity in order to provide careful formal versions \nof some of Wadler s theorems [Mairson 1991]. Mairson s approach consists in translating a polymorphic \nlanguage into a second-order logic. Because the second-order logic used is fairly weak, induction arguments \nbecome necessary in some of the proofs; our proofs, like Wadler s, do not rely on induction. Mairson \ntreated a system with implicit typing; this stands in contrast with our approach where types and relations \nare treated explicitly. The resulting formalisms For our example of section 1.1, this rule yields V(X)X+Bool \n= V(WW + Bool, and hence that if f has type V (X) X+BOO1 then it is related to itself by V(W + Bool. \nFrom here we can apply the elimination rules for V and +, and obtain requirement (iii). This kind of \nreasoning is common in our examples of section 3. Until now, the relational constructions have followed \nclosely the ordinary type constructions. In addition we al\u00adlow relations defined from functions: EFb:A+B \nEt-a:A a ~b)A El\u00adb(a) :B a:A E F (b) EFb:A+B c:B b(a) :B EF c B With these rules, terms can be turned \ninto relatiomx any function b from A to B can be seen as a relation (b) between A and B, intuitively \nthe graph of the function. The rules for functional relations have no analogue in F. Our formalism yields \nthe results typically associated with parametricity only when we include rules for con\u00adhave very different \nproperties. Cardelli et al. have defined F<:, an extension of F with subtyping [Cardelli, et al. 1991]. \nCuriously, the rules for F<: capture some aspects of parametricity; see sections 3.4 and 4 bdOW. Ma suggested \nanother syntactic approach to para\u00admetricity [Ma 1992]; it is based on encoding relations using subtyping. \nThe power of Ma s system seems to be less un\u00ad dersto@ there is also some difficulty in finding a model \nfor atl the desired subtyping rules. Longo, Milstead, and Soloviev investigated para\u00ad metricity in a \nsystem like F with just one new rule (a spe\u00adcial case of one of the rules of F<:) [Longo, Milstead, Soloviev \n1992]. The system is clearly weaker than K, and leads to different sorts of results. Finally, a forthcoming \npaper ~lotkin, Abadi, Cardelli 1992] explores an alternative formalization of parametricity closer in \nspirit to Mairson s. That paper describes a second\u00adorder logic with an axiom of paramerncity; this logic \nis not an extension of system F, like Z, but rather a logic about system F terms.  2. Formal parametricity \nIn this section we describe our formalization of para\u00admetricity. We aim at a hypothetical system called \n~ that would be sufficient to prove all the desired parametricity properties of polymorphic programs. \nOur current approxi\u00admations to $(.are called !@and 9?. E,; = (E),,X,Y YF The system @is a rather weak \nsystem of pure relations [) with relational constructions induced by the type construc-x:A tions of \nF. A number of technical lemmas can be proved for !@,and these lead to several interesting metatlmrems. \nFor example, a suitable encoding of F in S$yields all F typings and F equalities. In addition, @is a \nconservative extension of F for typing and equality derivations. The abstraction theorem for F holds \nin !@but it is not very useful (as the conservativity result indicates) without some additional means \nfor constructing relations. Hence, we extend !@with functional relations, obtaining % . Relation expressions \nbe\u00adcome dependent on value expressions, and the syntactic properties of the system become considerably \nmore com\u00adplex. Fortunately, most @ metatheorems extend easily to %1,simply because %0derivations are \nalso @ derivations. As a typing system, KI is still conservative over F, but new equations are provable. \nThe appendix contains the full set of rules of x, and it indicates which rules must be subtracted to \nobtain r. In this section, results are stated for RI unless otherwise indi\u00adcated. Preliminaries We use \nI-F for derivations in F, and l-z (or simply l-) for derivations in either@ or X, as appropriate.  We \nuse the abbreviations: a:A  We often use the derived rule:  (Rel Val Appt2 XX.) b : VCOB A El-v(xji \nEFfi , b : V(X )B b(A\\;xB~X~ A) El-b (A ) : B (X + A } Our fust result the conservativity over F for \ntyping, re\u00adquires a definition for flattening an Renvironment E into an F environment (E)F. The relation \npart of E is forgotten in (%: Definition (Environment flattening) (!0, = d (&#38;x), = O&#38;x  (E,x:A)F \n= (E)F,x:A  .E, % = (E)~,x:A,y:B y:B~ [) Theorem (Conservativity over F for typings) l-E s l- (E), .Et-~ \n+(E) FI--FAA (E)FI-FB B a:A Et-x -@)FfiF a: AA@)~FFb:B b:B A simple encoding of F in %is implicit in \nthe following soundness theorem. Using the abbreviations introduced above, we have: Theorem (Soundness \nof F in x) F*E ~ l-aE  E1-Fa:A + E1-%a:A  Et_FA + Ek~A  a:A  E1-Fa=b:A ~ El-z A b:A There is also \na more interesting way of embedding Fin !?(.,by splitting an F judgment into two related F judgments. \nThis relational interpretation of F turns out to be the fun&#38;\u00admental theorem about r, and it yields \nthe abstraction theo\u00adrem as a corollary. The following definitions are needed Definition The translation \n[-], decomtes each variable occurring in an F or R term or judgment with the subscript s. Subscripts \ncan be numbers or other symbols. (We assume that this translation does not introduce variable clashes.) \nFor example ~, x, x: V(Y)X + YI-FX]l = El,, xl, x,: V(y,)x, + y, l-F x,  The translation [A]% transforms \nan F-type into an %\u00adrelation. In particular, it transforms type quantitlers into re\u00adlation quantifiers, \nand free type variables into free relation variables.  [x]% ~x  [A+ B]% ~ [A]z + [B]z  [W@]% 4 V(X)[B]l \n  The translation [-] ~ transforms an F environment into an Renvironment. . [d]; 4 @ -. x, : [All E, \nx : A]+ 4 @3]~, [A]= x, : [A], Theorem (Relational interpretation of F in 9?.) mI-F E s l-z ~]~ 2 [a], \n: [A]l EFFa:A = lJ3]$ t-z [A]z [a], : [A]z [A]l 0 E I-F A + @]~ l-z [A]x [J% .EkFa=b:A Corollary (Reynolds \nabstracti~n theorem) Assume E I-F a : A and let X = Xl...X. be the collec\u00adtion of all type variables \nin dom(E). B, B. Assume EO b K1 ... EO 1-!&#38;, dom(EO) n dom(E) =@. nm The interpretations of F in \nRand the abstraction theo\u00adrem do not depend on the rule (Rel Eq Forall X%#). Using (Rel Eq Forall XW \n) we obtain a further result a syntactic version of Reynolds identity extension lemma. The relation A* \nwas discussed in the introduction. Definition X*=X . (A-+B)* = A*+B*  (V(X)B)* = V (X)(B* {X+x)) \n Theorem (Identity extension lemma) EI-FA A E1-~A.AA* A A weak form of this resulfi for closed terms, \nis prov\u00adable without using the rule (Rel Eq Forall XW): This explains why, in reasoning about closed \nterms, it is generally possible to avoid uses of (Rel Eq Forall X W). Finally, we show that@ equality \nis no stronger than F equality. Definition Let {E~ + E!) be the substitution that x for each W in E replaces \nY with X, Y x:A for each % in E replaces y with x. (The X a) ~:~ components of E are ignored.) Let {E! \n+ Et } be defined symmetrically. Theorem (Conservativity of !%?over F for equalities) a:A E I-zo A b:A \n* (E) F (a=b : A){ E$+E~) A (E) ~ (a=b : A){ET+E1) This result does not extend to@, as the theorems for \nfree of the next section show.  3. Theorems for free, syntactically In this section we illustrate the \npower of !@by carrying out formal proofs. The results given below apply to all terms, and not just to \nclosed terms. In some cases, even the results for closed terms are somewhat difficulc Wadler s work includes \na few interesting semantic results that can be read as results about closed terms. In order to deal with \nopen terms we do not use structural induction (like Mairson), but rather the rule (Rel Eq Forall X ??) \nand the identity extension lemma. 3.1 V(X)X -+X contains only the identity As a first example we show \nthat all terms of type V(X)X+X equal the polymorphic identity function id = A(X)A(X: X)x, and hence that \nthis type is terminal. For closed terms this result follows easily from strong normali\u00adzation, but a \nstrong-normalization argument does not ex\u00adtend to open terms. Proposition E:v(x)x+x E1-f:V(X)X+X s El-V(X)X+X \nid: V(X)X + X Proof By (Rel Val Fun A), (Rel Val Fun2 X), (Rel Val Eta), and (Rel Val Eta2), it suffices \nto prove f(x)(x) : x E, X,X:X 1-X x:x Using (Rel FRel) we fiit obtain: V(Y)Y + Y E, X,x: X1-<2(g:V(Y)Y+Y)x> \nx Hence we derive, using the identity extension lemma and (Rel Val App12 W): E, X,X:XF f(v(Y)Y + Y) : \n(V(Y)Y + Y) + (V(Y)Y + Y) < a(g : V(Y)Y + Y)x >+< a(g : V(Y)Y + Y)x > f(x): x+x By (Rel Val FRel Intro), \nwe have f :V(Y)Y + Y E, X,x: XF<2(g:V(Y)Y+Y)x> x:x and by (Rel Val Appl): f(v(Y)Y + Y)(O : (V(Y)Y + \nY) E, X,x: Xt-<a(g:v(Y)Y+Y)x> f(x)(x) : x Finally by (Rel Val FRel Elim) we obtain: x:x E, X,x: Xt-X \nf(x)(x) : x and the claim follows by (Rel Vrd Symm). 1 3.2 Properties of map The naturality conditions \nthat arise from parametricity have mundane applications, for example in proving proper\u00adties about the \ntype of the map function: V(X) V(Y) (X-+Y) + (List{X) + List{ Y)) is the composition (in either order) \nof map and a rear\u00adrangement function, like reverse. The rearrangement func\u00adtion is retrieved from m by \ninstantiating X and Y to a same type, say X, and then by applying m(x)(x) to the identity on X; the resulting \nterm has type List(X) +List {X}. The usual composition operation 2(x)g(f(x)) is written (fig). Proposition \nLetE =X, Y, m: V(X)V(Y)(X+Y)+(List{ X}+List{Y]), f:X+Y. Then: m(X)(Y)(f) : List{X) + List{Y) El-List{X) \n+ List(Y) m(x)(x)(id(x)); map(X)(Y)(f) : List(X) + List{Y) m(X)(Y)(f) : List{X) + List(Y) El-List(X) \n+ List(Y) map(x)(y)(f); m(y)(y)(id(y)) : List(X)+ List(Y) For the (omitted) proof of this proposition, \nas well as for many others, we need a commutation lemma described next. 3.3 A commutation lemma We say \nthat a type A is covariant in X when X occurs only positively in A. For example, (X+ Y) + X and List{X) \nare covariant in X. A type A depending on X (the other free variables being considered as fixed parameters) \nmay be viewed as a map B H A{X+B ) from types to types. When A is covariant in X, it determines a (covariant) \nfunctor, which associates with any h:B+B a term A{ X+-h) of type A{X+B) +A{X+B ) as follows If El-a: \nA+ A, Et-b: B+ B , then a+bk 1(x: A+ B)2(y: A )b(x(a(y))) : (A+ B) + (A + B ) If E, Y1-a:A+A, then V(Y)a \n5 2(x: V(Y)A) I(Y) a(x(Y)) : (V(Y)A) + (V(Y)A) Then A(X+h) is defined inductively: X{X+h) ~ h ( A+ \nB){X+h) 4A{X.?--h}+B(X+h)  Y(X+h) ~ id(Y) for Y # X  (V(Y)A){X + h) ~ V(Y)A{X + h) for Y # X  For \nexample, for each h:B+B , map is simply List{ Y+h). where List {B) denotes the type of B-lists, encoded \nas usual as V(X)X+(B+X+X)+X. Here we include only one theorem about this type; Wadler and Mairson have \ntreated this theorem too. Wadler s map theorem asserts that any term m of this type Typically, in our \nproofs, we get relations of the form A{ X+<h>) from an application of the identity extension lemma and \n(Rel Vat App12 W), while <A{ X+h)> may be needed. The following lemma says that covariant functors commute \nwith functional relations, so A {X+ch> ) can be transformed into cA{X+h)>. Lemma Assume E,X 1-A, where \nA is covariant in X, and EFh:B+B . Then: A(X + B) Et-A(X+c h>)=< A{ X+-h)> A(X+B ) The proof of this \nlemma relies on the rule (Rel Eq Extension) given in the appendix; this rule says that any two relations \nwith the same graph are equal. Without this rule, an extensional version of the lemma could still be \nobtained, and it would suffice for our purposes.  3.4 Type isomorphisms and initial algebras Given \na type A covariant in X, an A-algebra is a pair of a type B and a morphism LA(X+B) +B. An A-algebra morphism \nfrom (B,t) to (B ,t ) is a term h:B+B such that Ch = A(X+h) ;t . An initial A-algebra is an A-algebra \n(T,in) such that for any other A-algebra (B,t) there exists exactly one A-algebra morphism from (J ,in) \nto (B,t). The goal of this subsection is to show that, given A covariant in X, the type T= V(X)(A+ X)+X \ncan beturned into an initial A-algebra. This means that the initial algebras useful in programming (for \nexample, that of natural numbers) can be defined properly as polymorphic types; see ~dhm, Berarducci \n1985] for background and Nadler 1991] for a semantic proof. We define fold :V(X)(A + X)+ (T+ X)= A(X) \nA(k : A + X) 2(X : T) x(x)(k) in: A{ X+ T)+T= A(y:A{Xe--T)) 2(X) I(k: A-+X) k(A{X + fold(X)(k))(y)) out: \nT+ A{ Xe--T)= ~old(A{X + T))(A{X + in)) Here fo/d(X)(k) takes an algebra (X,k) to an algebra mor\u00adphism \nl(x:T)x(X)(k) from (T,in) to (X,k). Initiality of (T,in) means that if a is a morphism from @,in) to \n(Mc), then a must equalfold(X)(k): Theorem (T, in) is initial. That ix in: A{ X+ T}+T E, X,k:A+Xt-<A{ \nX+a)>+<a> k:A+X a:T+X * E, X,k:A+Xl-T+X ~old(x)(k) : T + X A consequence of initiality is that in is \nactually an isomor\u00adphism from A{X + T} to T. Hence, the initial A-algebra is a solution for the fixpoint \nequation X = A(X]; and in and ouz are the two halves of the isomorphism between T and A{ X+T). Polymorphic \ntypes thus suffice to encode covari\u00adant recursive types. In particular, if X does not occur in A, then \nA and V(X)(A + X) + X are isomorphic. Other universality properties are expressible and prov\u00adable in%, \nfor example -V(X)X + X is a terminal object 1 (as already proved). -V(X)(B + B + X) + X is a product \nBxB of B and B . -V(X)X is an initial object O. -V(X)(B + X) + (B + X) + X is a coproduct B+B of B and \nB. -The type Bool = V(X)X + X + X is isomorphic to 1+1. -The type Nat = V(X)X + (X + X) + X of Church \ninte\u00ad gers is the initial A-algebra for A=l+X. Hence Nat and l+Nat are provably isomorphic in !?L -The \ntype List {B) is the initial A-algebra for A=l+(BxX). Hence List (B) and l+(BxList {B )) are provably \niso\u00ad morphic. Weaker forms of these results, for a category of closed terms, were already available in \nF<.. We put the universality properties to use in the prcmf of a property of Bool. In F the two only \nclosed normal forms of type Bool are true = A(Z)2(X: Z)2(y: 2)x false = a(z)a(x : Z)a(y : Z)y We prove \nthat any two functions from Bool that coincide on true and false are equal. For example the terms L(x:Boo1) \n3 and k(xBool) if x then 3 else 3 are provably equal. Proposition Let El-A, E1-b:Bool+A, and E1-b :Bool+A. \nThen b(true): A b(false) : A El\u00ad , El- I) (ht) : A b (fali) : A b: Boo1+A * El-BooI+A b: Boo1+A Proof \nWe exploit the following isomorphisms: Bool is isomorphic to 1+1, (C+C)+A is isomorphic to (C+A)X(C +A) \nfor any C and C , and l+A is isomorphic to A. Hence Boo1+A is isomorphic to AxA. The two halves of the \niso\u00admorphism are i= A(f :Bool + A)l(Y)2(g :A + A + Y) g(f(true))(f(false)) j = I(h: V(Y)(A -+ A + Y) \n+ Y)2(x: Bool) h(A)(x(A)) The conclusion follows by transitivity and replacement of equals for equals \n -it is enough to prove the equality of i(b) and i(b ) (since b is equal to j(i(b)), and similarly for \nb ~ -i(b) and i(b ) are equal since the argument f occurs only in the contexts f(trne) and f(false) in \ni. 1 3.5 On erasures We end the section with a collection of examples of a somewhat different flavor. \nThey are all examples of a gen\u00aderal erasure conjecture . Roughly, the conjecture states that two F terms \nhaving the same type in the same environ\u00adment and having the same erasure are provably equal in%. The \nerasure of an F term is the untyped term obtained by erasing all its type information. Formally erase(x) \n= x erase(a(b)) = erase(a)(erase(b)) erase(k(x:A)a) = i(x) erase(a) erase(a(A)) = erase(a) erase(k(X)a) \n= erase(a) The precise formulation of the conjecture is Conjecture If Et-F a : A, El-F b : A,anderase(a) \n=erase(b), then . EFa AA b: A If the conjecture holds, it gives precise evidence that Reynolds notion \nof parametricity, which our formal system captures in syntax, reflects the intuition that types do not \nmatter in computations of polymorphic programs. Here we neither prove nor disprove the conjecture, but \n simply verify some instances Instance 1 Let El-F a: V(X)A, where XeA, and let EFFB and El-FC.Then a(B~ \nA EF a(C): A Proof We show how to prove a(V(X~X): A a(V(X~X): A El-Ei- a(B): A a(C!): A The desired \nresult follows from (Rel Val Symm) and (Rel Val Saturation Lft). We derive the fmt judgment; the other \nderivation is similar. From the hypotheses and the sound\u00adness of F in R, we have E l-x a : V(X)A. Moreover, \n(Rel FRel) yields: V(x)x E k (1(X: v~X)x@)) We conclude by using (Rel Val App12 XQ (see section 2). 1 \nThis fwst instance is the $lanalogue of Axiom C, the rule that Longo, Milstead, and Soloviev add to system \nF. The second instance concerns the terminal type: Instance 2 X(v(x)x) : V(x)x x: V(x)x 1-V(x)x  x \n: V(x)x Proof We start by constructing a functional relation: V(Y)Y x 1-< 2(X: vq)Y)x(x) > By applying \n(Rel Val App12 XQ we gec X(V(Y)Y) : V(Y)Y x : V(Y)Y, x 1-c 2(X: V(Y)Y)X(X) > x(x) :x and (Rel Val FRel \nElim) leads KX x(v(Y)Y~x) : x x : V(Y)Y, xl\u00adx(xf: x The result follows by (Rel Val Eta2). 1 A simple \nvariant of this proof yields Instance 3 Assume E t-a: A and X~A. x(V(X)X)(a): V(X)X E,x: V(X)A+Xt\u00ad V(x)x \nA(X) x(X)(a): V(X)X The final instance is based on two different ways of as\u00adsigning the type (V(X)X \n+ X) + (V(X)X + X) to the un\u00adtyped term a(x) x(x): Instance 4 X(v(x)x + x)(x) : V(x)x + x v(x)x+xt-V(x)x \n+ x a(x) x(x + x)(x(x)): V(x)x + x x: Proof We start by constructing a functional relation V(x)x + x \nx : V(x)x + x, Y F < 2(X: V(x)x + x)x(Y) > Y+Y  By applying (Rel Val App12 XK) we gec x: v(x)x+x, Yt\u00ad \nX(v(x)x + x) : (v(x)x + x) + (v(x)x + x) < 2(X: V(x)x + x)x(Y) >+< I(X : V(x)x + x)x(Y) > X(Y+ Y): (Y+ \nY)+(Y+Y)  By (Rel Val FRel Intro) we have x: V(x)x+x x : V(x)x + x, Y 1-c A(x : V(x)x -) x)x(Y) > X(Y):Y+Y \n Hence, by (Rel Val Appl) we obtain: X(v(x)x + x)(x) : (v(x)x + x) x: v(x)x+x,Yt-< A(x : V(x)x + x)x(Y) \n> X(Y + Y)(x(Y)) : (Y+ Y) and after (Rel Val FRel Elim): X(v(x)x + x)(x)(Y) : (Y+ Y) x: v(x)x+x,Yl-Y+Y \nX(Y + Y)(x(Y)) : (Y+ Y) The result follows using (Rel Val Eta2). 1 Of course K yields far more equations \nthan the ones arising from the conjecture. For example, we can show that VQQX + Bool contains only constant \nfunctions, and hence that f(A)(a) and f(B)(b) are equal for any t V(X)X + Bool. Here a and b can be any \nterms, of types A and B, respectively. In particular the terms f(A)(a) and f(B)(b) need not have the \nsame erasure. 4. Conclusions After working with Kfor some time, we feel that it is a useful system, \nwith good syntactic properties. In particular we are able to prove theorems and metatheorems in full \ngenerality for open terms. However, the power of K, both in syntactic and in semantic terms, seems to \ndeserve further exploration. In the realm of syntax, we are particularly interested in the conjecture \ndiscussed in section 3.5 that if two F terms have the same erasure and the same type, then they are provably \nequal in K. As for semantics, we have constructed a model for our rules except (Rel Eq Forall X W). The \nmodel is an exten\u00ad sion of a model of F based on pers. The works of Hasegawa [Hasegawa 1991] and Hyland, \nRobinson, and Rosolini [Hyland, Robinson, Rosolini 1990] suggest that the usual per model, or closely \nrelated ones, may validate (Rel Eq Forall X W). We have investigated other relational constructions, \nsuch as relational inverse and composition. These create further syntactic and semantic complications. \nIn particular the natural generalization of (Rel Eq Forall X W) seems un\u00adsound, since for example V(X) \n(XOX)+X contains the polymorphic identity function while V(W/J(WOW)+W is empty. As mentioned in the introduction, \nsystem F< [Cardelli, et al. 1991] captures some aspects of parametricity. An ex\u00adtension of %with subtyping \nmay yield an encoding of F<: and provide a basis for studying parametricity in languages with subtyping. \nAn analogous extension of a logic for parametric polymorphism is carried out in Plotkin, Abadi, Cardelli \n1992].  Acknowledgments We would like to thank Ryu Hasegawa and Phil Wadler for helpful discussions. \n References [Bainbridge, et al. 1990] E.S. Bainbridge, P.J. Freyd, A. Scedrov, and P.J. Scott, Functorial \npolymorphism. Theoretical Computer Science 70,35-64. [B6hm, Berarducci 1985] C. B6hm and A. Berarducci, \nAutomatic synthesis of typed %-programs on term algebras. Theoretical Computer Science 39, 135-154. [Cardelli, \net al. 1991] L. Cardelli, J.C. Mitchell, S. Martini, and A. Scedrov. An extension of system F with sub\u00adtyping. \nProc. Theoretical Aspects of Computer Software. Sendai, Japan. Lecture Notes in Computer Science 526. \nSpringer-Verlag. [Girard, Lafont, Taylor 1989] J.-Y. Girard, Y. Lafont, and P. Taylor, Proofs and types. \nCambridge University Press. [Hasegawa 1991] R. Hasegawa. Parametricity of exten\u00adsionally collapsed term \nmodels of polymorphism and their categorical properties. Proc. Theoretical Aspectes of Computer Software. \nLecture Notes in Computer Science 526. Spnnger-Verlag. [Hasegawa 1992] R. Hasegawa, Categorical data \ntypes in parametric polymorphism. Manuscript. [Hyland, Robinson, Rosolini 1990] J.M.E. Hyland, E.P. Robinson, \nand G. Rosolini. Algebraic types in PER models. Proc. Mathematical Foundations of Programming Semantics. \nLecture Notes in Computer Science 442. Springer-Verlag. mngo, Milstead, Soloviev 1992] G. Longo, C. \nMilstead, and S. Soloviev, A syntactic understanding of para\u00admetricity in polymorphic languages. Manuscript. \n[Longo, Moggi 1991] G. Longo and E. Moggi, Constructive natural deduction and its @set in\u00ad terpretation. \nMathematical Structures in Computer Science 1(2). [Ma 1992] Q.M. Ma. Parametricity as subtyping. Proc. \n19th Annual ACM Symposium on Principles of Programming Lunguages. [Ma, Reynolds 1991] Q.M. Ma and J. \nReynolds. Types, abstraction, and parametric polymorphism, part 2. Proc. Mathematical Foundations of \nProgramming Semantics. Springer-Verlag. [Mairson 1991] H. Mairson. Outline of a proof theory of parametricity. \nProc. 5th International Symposium on Functional Programming Languages and Computer Architecture. Springer-Verlag. \n[Milner, Tofte, Harper 1989] R. Milner, M. Tofte, and R. Harper, The definition of Standard ML. MIT Press. \n[Mitchell, Scedrov 1992] J.C. Mitchell and A. Scedrov, Stoning, relator$ and parametricity. Manuscript \nFlotlcin, Abadi, Cardelli 1992] G.D. Plotkin, M. Abadi, and L. Cardelli, A logic for parametric polymor\u00adphism. \nManuscript. llteynolds 19831 J.C. Reynolds, Types, abstraction, and parametric polymorphism, in Informatwn \nProcessing, R.E.A. Mason, Editor. North Holland p. 513-523. [Strachey 1967] C. Strachey, Fundamental \nconcepts in programming languages. Lecture notes for the International Summer School in Computer programming, \nCopenhagen, August 1%7. 13Vadler 19891 P. Wadler. Theorems for free! Proc. 4th International Symposium \non Functional Programming Languages and Computer Architecture. Springer-Verlag. [Wadler 1991] P. Wadler, \nRecursive types for free! Manuscript. Appendix: System ~ Notation 0 We use the following metavariables: \nX,Y,Z range over value variables; X,Yz range over type variables; Wranges over relation variable~ a,b,c,d \nrange over value terms; A,B,C,D range over type terms; x$ , T,U range over relation terms; E ranges over \nenvironments. a:A . We use the abbreviations El-A ~EF~ E1-a:A 4EI-A A a:A Environments (E!IV !3) @nv \nx) (Em x) FE X # dom(E) EFA x @dom(E) !-d l-E, X I-E,x:A (EIW XWY) (EIIV Xfy) X,W,Y # dom(E) x, y @dom(E) \nFE EEK X,W, Y distinct x, y distinct B x:A l-E, $ FE, K Y y:B Related types (Rel W) (R.I X) (Rel WX) \n(Rel WY) FE , i,E } E , X, E 1-E , ;, E t-E , ;, E Y YY E , ;,Ed E , X, E sl-X E , ;, E I-X E , ;,E}Y \nY Y YY (Rel A~) B Et-K E}.$ A B A+B El-X.+.$ A + B  (Rel Forall W) (Rel Forall X) (&#38;l Forall XW) \nB XB XkB ,S X~B ,S E,h~ E, XI--S E,WES X @B:.s X #B,s B> x, B, X B Z @dom(E) V(X)B V(X)B V(X)B E i-V(w!l$ \nE t-V(XM E 1-V(Z)..$fW + Z) v(k jB v(-xjB V(X )B (Rel FRel) [%1 only] Et-A+B E1-b:A+B E 1-(~) B Relation \nequality (Rel Eq SA~) (Rel Eq Tram) A A EI-s=ZL B EI-R=IT B (Rel I@ W) l-E , ;, E Y E , ;, EFW~W Y Y \n(Rel EqX) l-E , X, E , X,EF E X1X x (Rel Eq WX) 1-E , &#38; Y x-x E , W, EI-Y E X=X x (Rel Eq WY) l-E \n, ;, E Y E , ;, El-Y~Y Y Y A+B (Rel Eq Forall W) B E,; FS=S X @B ,s, s X t B,s,s X B V(X)B E ; V(w&#38;&#38;O=V(m \n (Rel Eq Forall X) B E, Xt-S=S B V(X)B E 1-V(X)s = V(X).$ V(X)B (R.1 Eq Ford X@) XB X@ B ,S,S E, W I-$=S \nX @B, S,.$ X B Z @dom@) V(X)B E 1-V(Z)S(% + Z) = V( nJs V(X)B (Rel Eq Extension)[xl only] x:A x:A x:A \nE,x. I-s E,. y:-B y:B y:B A E1-fL. =S B x:A $h!k. y:-B Related values (Rel Val Symrn) a:A El-A b:A b:A \nEl-A a:A (Rel El- Val Saturation M) a:A A EF b;A a:A El-X, c:B b:A x c:B (Rel El- Val Saturatie41 Rht) \nb:A K El-c:B b:A El\u00ad~ d:B c:B B d:B (M v: JyA@) Et-R El-b:B a:A El\u00ads b:B A R=.$ B 169 (Rel Val x!?(y) \n(Rel Val x) (Rel Val Z-X) (Rel Val ~) x:A x:A x:A l-E , R ,E l-E , X : A,E t-E , ~ ,E kE , ~ ,E  y:B \ny:B y:B  x:A x:A x:A x:A  E , K ,E h X. E , x: A, EFx:A E , % _ ,E t-x:A E , ~ ,E t_y:B y:-B y:-B y:-B \ny:B \u00ad (Rel V$ ~mAXJ (Rel Val Fun A) (Rel Vial Appl) b:B b:B b:A+B a:A B x~b E, ~t-s EFS E,x: AI-.$ Eh? \nEl-%+S El-% B, x ib x :A b :B b :B B b :A +B a :A 2(x:A)b : A+B A(X:A~b; ~ + B b(a) : B El-K+s El-El- \nS A(x : A )b : A + B A(X: A)b : A+B b (a ) : B (Rel V; FuI12 W) (Rel Val Fw12 X) b:B b:B Xl b ,B ,S \n E, Wt-.$ E,Xl-s X lb,B,S X b :B b :B 2(X)~(h&#38;(X)B A(X)b : V(X)B EF El-V(x)s A(X )b : V(X )B k(X)b \n: V(X)B (Rel Val App12 W) (Rel Val Aw12 X) [derivable in !R.O] b ;J~)B b : V(X)B Et-Eb; E 1-V(XM El-C \n. .\u00ad : V(X )B c b : V(X)B E ; ~C\\~B~$ C) b(c) : B(X+C} E} .S{X+ c) b (C ) : B {X + C ) b (C) : B (X + \nC) (Rel Val FRel Intro) [~1 only] (Rel Val FRel Elim) [Z-l only] a:A E1-b:A+B E1-a:A Et-(b) Et-b:A+B \nc:B a:A b(a) :B EE (b) E* B b(a) :B c:B (Rel VaI Beta) (Rel Val Beta2) E,x:At-b:B E1-a:A E, Xt-b:B \nEl-A (A(x: A!)(a) : B El\u00adb{x+a) : B (Rel Val Eta) (&#38;l Vial Eta2) EFb:A+B x @dom(E) E1-b:V(X)B X \n@dom(E) A(X : A)b(x) : A + B A(X)b(XXjBV(X)B El-A+B El- b:A+B b : V(X)B 170 \n\t\t\t", "proc_id": "158511", "abstract": "<p>A polymorphic function is parametric if its behavior does notdepend on the type at which it is instantiated. Starting with Reynolds'work, the study of parametricity is typically semantic. In this paper,we develop a syntactic approach to parametricity, and a formal systemthat embodies this approach: system <inline-equation><f><sc>R</sc></f></inline-equation>. Girard's system F deals with terms and types;<inline-equation><f><sc>R</sc></f></inline-equation> is an extension of F that deals also with relationsbetween types.</p><p>In <inline-equation><f><sc>R</sc></f></inline-equation>**, it is possible to derive theorems about functionsfrom their types, or &#8220;theorems for free&#8221;, as Wadler callsthem. An easy &#8220;theorem for free&#8221; </p> <p></p><p>asserts that the type <inline-equation><f>&forall;<fen lp=\"par\">X<rp post=\"par\"></fen>X&#8594;</f><?Pub Caret></inline-equation>Bool contains only constantfunctions; this is not provable in F. There are many harder and moresubstantial examples. Various metatheorems can also be obtained, such asa syntactic version of Reynolds' abstraction theorem.</p>", "authors": [{"name": "Mart&#237;n Abadi", "author_profile_id": "81100547147", "affiliation": "", "person_id": "PP39047996", "email_address": "", "orcid_id": ""}, {"name": "Luca Cardelli", "author_profile_id": "81100123805", "affiliation": "", "person_id": "PP39069947", "email_address": "", "orcid_id": ""}, {"name": "Pierre-Louis Curien", "author_profile_id": "81100329505", "affiliation": "", "person_id": "P227459", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/158511.158622", "year": "1993", "article_id": "158622", "conference": "POPL", "title": "Formal parametric polymorphism", "url": "http://dl.acm.org/citation.cfm?id=158622"}