{"article_publication_date": "03-01-1993", "fulltext": "\n A Categorized Bibliography on Incremental Computation G. Ramalingam and Thomas Reps University of Wisconsin \n 1. Introduction In many kinds of emnputatiomd contexts, modifications of the input data are to be processed \nat once so as to have immediate effect on the output. Because small changes in the input to a com\u00adputation \noften cause only small changes in the outpu~ the chal\u00adlenge is to compute the new output incrementally \nby updating parts of the old outpu~ rather than by recomputing the entire out\u00adput from scratch (as a \nbatch computation ). Put another way, the goal is to make use of the solution to one problem instance \nto find the solution to a nearby problem irtstanee. The abstract ~oblem of incremental computation can \nbe phrased as follows: The goal is to compute a function ~ on the user s input data x where x is often \nsome data structure, such as a tree, graph, or matrix-and to keep the output ~ (x) updated as the input \nundergoes changes. An incremental algorithm for computing ~ takes as input the batch input x, the batch \noutput ~ (x), possibly some auxiliary information, and the change in the batch input Ax. The algorithm \ncomputes the new batch out\u00adput ~ (x + Ax), where x + Ax denotes the modified input, and updates the auxiliary \ninformation as necessary. F~om the s~dpoint of the progr amming-languages emnrmm\u00adity, interest in incremental \ncomputation stems horn the following four resesrch topics: The creation of languages with facilities \nthat support incre\u00admented computation (for the purpose of providing language support for interactive \nsystems, in which input undergoes modifications).  Incremental computation as a paradigm for program \noptimiza\u00adtion, particularly loop optimization in very-high-level languages.  o The development of irteremental \nlanguage-processing algo\u00adrithms (for use in interactive progr amming tools). The creation of compilers \nand programming tools that imple\u00adment the above ideas. In addition to the work that has gone on in these \nareas of d~ect irtteresL there is a considerable body of relattxl work on incremen\u00adtal computation dta~ \nalthough less well known in the progr amrning-languages community, may have much to offer: o Several \ndifferent criteria have been developed for comparing the performance of different algorithms for an incremental\u00adeomputation \nproblem. There have been a few advances made towmls establishing general principles of incremental computing \n(e.g., the work on dy~ zatwn of static problems). o There are resulta on a hinge number of individual \nincremental-computation probl~s; these may provide an opportunity for extracting new general principles \nor for gen\u00aderating new ideas through which language support for irtcre\u00admental computation might be provided. \nlhis work was supported in patt by a David and Lucile Packard Fellow\u00ad ship for Science and Ertginecdng, \nby the National Science Foundation under grant CCR-9 100424, sttd by the Defense Advanced Researeh Pro\u00adjects \nAgeney under ARPA Order No. 8856 (monitored by the Office of Navaf Research under contract NOO014-92-J-1937). \nAuthors address: hputcr Sciences Department, University of Wisconsin-Madison, 1210 W. Dayton St., Madison, \nWI 53706. E-mail: ( ranudi, reps)@cs.wise.edu This document provides a guide to some of the literature \nthat has appesmd on incremental computin~ however, it is by no means a complete list of papers in the \nsr~ even for the topics with which we are the most familiar. The seven points listed above could have \nserved as the organi\u00adzational principle for this bibliography; however, we chose to fol\u00adlow a different \napproach to classifying the existing work on incre\u00admental computation, attempting to survey the field \nof incremental computation per se, rather than just the narrower topic of incremental-computation research \nin the programming-languages community. In so doing, the goal was to expose ties between the ideas on \nincremental computation that &#38;veloped out of research on progr ammirtg languages and progr ammirtg \ntools, and ideas that have been developed by researchers in other areas. 2. Assessment of Incremental \nAlgorithms 2.1. Computational Complexity of Incremental Computation One of the first problems that one \nmust come to grips with when dealing with algorithms for incremental-computation problems is that the \ncriteria commonly used to assess the performance of algo\u00adrithms for batch-computation problems can be \nunsatisfactory. In particular, a common way to evaluate the time complexity of a batch algorithm is to \nuse asymptotic analysis and to express the cost of the computation as a function of the size of the inpu~ \nhow\u00adever, for incremented-amputation problems, this kind of analysis can have several drawback o It may \nfail to distinguish between two different incremental algorithms for a problem, one of which is clearly \nsuperior to the other. (ht many cases, it even fails to distinguish between art incremental algorithm \nand the batch start-over algorithm.) For some incremental-computation problems, it can lead to the (erroneous) \nconclusion that the batch start-over algorithm is Optimal. Some other analysis criteria that can be of \nutility for ittcremental-computation problems are given below. Direct comparison with the batch start-over \nalgorithm Yellin, D. and Strom, R., lNC: A language for incremental computations, ACM Trans. Program. \nLang. Syst. 13(2) pp. 211-236 (April 1991). Amortized-cost analysis With amortized-cost analysis, the \nperformance of an algorithm is averaged over a worst-case sequence of operations. This some\u00ad times leads \nto an overall time bound that is much smaller than the worst-case time per operation multiplied by the \nnumber of opera\u00adtions. Sleator, D.D. and Tarj~ R. E., A data structure for dynamic trees, JOUTM1 of Computer \nand System Sciences 26 pp. 362-391 (1983). Tarjan, R.E., Amortized computational complexity, SIAM J. \nAlgebraie Discrete Methods 6(2) pp. 306-318 (April 1985). Competitiveness Another approach that measures \nthe performance of algorithms over a sequence of operations is the analysis of algorithms com\u00adpefifiveness. \nGiven an on-line problem (i.e., there is a sequence of requesta and actions that must be performed on-line \nin response to requests, where each action has an associated cost), assume that there is an adversary \nwith maximally destructive intent generat\u00ading the requests. The notion of competitiveness assesses the \namount of darnage that the adversmy can inflic~ in the sense of comparing the performance of an on-line \nalgorithm to the perfor\u00admance of art optimal off-line algorithm. The competitive ratw is the maximum \nvalue-over any sequence of requests-of the ratio between the cost of the on-line algorithm and the cost \nof art optimal off-line algorithm. Thus, an algorithm designer seeks a competitive ratio as small as \npossible (where the smallest possible ratio is 1). What has sparked particular interest in this model \nfor analyzing on-line algorithms is that it is uossible to use randomness to inhi\u00adbit the fiwer of the \nadvers~. That is, for some problems it is possible to find random on-line algorithms that have a smaller \ncompetitive ratio than the best deterministic on-line algorithm. Sleator, D.D. and Tarjm R.E., Amortized \nefficiency of list update and paging roles, Convnun. of the ACM 28(2) pp. 202-208 (February 1985). McGeoc~ \nL.A. and Sleatur, D.D. (eds.), On-Line AlgorithmsJ American Mathematical Society, Providence, RI (1992). \nKsrp, R.M., On-line algorithms versus off-line algorithms: How much is it worth to know the titure?, \npp. 416-429 in ln\u00adformatwn Processing 92: Proceedings of the IFIP Twelfih World Computer Congress, ed. \nJ. van Lecuwen,Norti-Hollan~ Amsterdam (September 1992). Probabilistic analysis Ixmchard, G., Randrharimanan~ \nB., and Schott, R., Dynamic algorithms in D.E. Knuth s mo&#38;l: A probabilistic analysis, Theoretical \nComputer Science 93 pp. 201-225 (1992). Incremental relative lower bounds BermarL A.M., Paul~ M.C., \nand Ryder, B.G., Proving rela\u00adtive lower bounds for incremental algorithms, Acts Ir@orma\u00adtica 27 pp. \n665-683 (1990). Reductions between problems Reif, J.H., A topological approach to dynamic graph cormec\u00adtivity~ \nInformatwn Processing Letters 25(1) pp. 65-70 (1987). Boundedness Because art incremental algorithm \nmakes use of the solution to one problem instance to find the solution to a nearby problem instance, \nanother alternative to expressing the cost as a function of the size of the input is to measure the time \ncomplexity of an irtcre\u00admental algorithm in terms of the sum of the sizes of the changes in the input \nand output. An incremental algorithm is said to be bounded if, for all input data-sets and for all changes \nthat can be applied to an input datit-se~ the time it takes to update the output solution dependa only \non the size of the change in the input and outpuL and not on the size of the entire current input. Otherwise, \nan incremental algorithm is said to be unbounded. A problem is said to be bounded (unbounded) if it has \n(does not have) a bounded incremental algorithm. Reps, T., Teitelba~ T., artd Demers, A., Irtcremental \ncontext-dependent analysis for language-based editttrs~ ACM Trans. Program. Lang. Syst. S(3) pp. 449477 \n(July 1983). Alpeq B., Hoover, R., Rosen, B.K., Sweeney, P.F., and Za\u00addec~ F.K., Incremental evaluation \nof computational cir\u00adcuits, pp. 32-42 in Proceedings of the First Annual ACM-SIAM Symposium on Discrete \nAlgorithms, (San Francisco, CA, Jart. 22-24, 1990), Society for Industrial and Applied Mathematics, philadelphi~ \nPA (1990). Ramaliigam, G. and Reps, T., On the computational com\u00adplexity of incremental algorithms, TR-1033, \nComputer Sci\u00adences llepartmen~ University of WNconsin, Madiaom WI (August 1991). Ramtimgsm, G. and Reps, \nT., An incremental algorithm for a generalization of the shortest-th problem, TR-1087, Computer Sciences \nDepartmen~ %versity of WEcQrtsin, Madison, WI (May 1992). Ramaliigam, G. and Reps, T., On the complexity \nof incre\u00admental computatio~ Unpublished report+ Computer Sci\u00adences Departtnen~ University of Wisconsin, \nMadiiou WI (October 1992). 2.2. Measurements of Actual Performance There have been relatively few papers \nin which the performance of an incremental algorithm has been evaluated from an experi\u00admental standpoint. \nThe little work that doea exist actually sug\u00adgests that from a practical standpoint incremental algorithms \nthat do not have good theoretical performance (according to the cri\u00adteria liited above) can give satisfactory \nperformarm. in real sys\u00adtems. Dionne, R., Etude et extension d un algorithm de Murch\u00adhmd~ ZNFOR 16(2) \npp. 132-146 (June 1978). Taylor, G.S. and ousterhou~ J.K., Magic s incremental design-rule checker: pp. \n160-165 in Proceedings of the Twenty-First Design Automatwn Conference, IEEE Computer Society, Washingto~ \nDC (1984). Scot~ W.S. and ousterhou~ J.K., Plowing: Interactive stretching and compaction in Magic, pp. \n166-172 in Proceedings of the Twenty-First Design Automation Confer\u00ad ence, IEEE Computer Society, Washingto~ \nDC (1984). Hoover, R., Incremental graph evaluation, Ph.D. d~serta\u00ad tion and Tech. Rep. 87-836, Dept. \nof Computer Science, Cor\u00ad nell University, hhac~ NY (May 1987). Ryder, B.G., Landi, W., and Pande, H.D., \nProfiling an incre\u00ad mental data flow analysis algorithm, IEEE Transactwns on Software Engineering SE-lt5(2)(Febmary \n1990). Zaxing, A., Parallel evaluation in attribute grammar based systems; Ph.D. dissertation and Tech. \nRep. 90-1149, Dept. of Computer Science, Cornell University, Ithaca NY (Au\u00ad gust 1990). Harrison, M.A. \nand Munson, E.V., Numbering document components, Electronic Publishing 4(l)(Jsrtuary 1991). 3. Data-Structure \nUpdate Problems  3.1. Incremental Updating of Annotations on Graphs and Trees One class of incremental-computation \nproblems involves comput\u00ading a function ~(x), where x is some data structure ( the sub\u00adstrate ), such \nas a tree, graph, or matrix, and ~ (x) represents some annotation of the x data structure-a mapping from \nmore primi\u00adtive elements that make up x to some space of vahtes (for exam\u00adple, a mapping from spreadsheet \ncells to values). Each annotation value is a function of other annotation vahtes, often those of neighboring \nelements in the substrate data structure. The incremental-computation problem is to keep the annotation \nvalues updated as the substrate data structure undergoes some changes. 3.1.1. Selective Recomputation \nIn seleetive recomputation annotation values that are independent of changed data are never recomputed. \nAnnotation values that are dependent on changed data are recomputed, but after eaeh new annotation value \nis obtairted, the old and new annotation values may be compared in order to help determine what further \nrecom\u00adputations must be ,porfomted. Incremental updating of attributed derivation trees Demers, A., Reps, \nT., and Teitelbaum, T., Incremental evaluation for attribute grammars with application to syntax\u00addirected \nedhors; pp. 105-116 in Conference Record of the Eighth ACM Symposium on Principles of Prograrmnhg Languages, \n(Williamsburg, VA, Jan. 26-28, 1981), ACM, New York, NY (1981). Reps, T., Optimal-time incremental semantic \nanalysis for syntax-directed editors, pp. 169-176 in Conference Record of the Ninth ACM Symposium on \nPrinciples of Programnu ng Languages, (Albuquerque, NM, January 25-27, 1982), ACM, New York, NY (1982). \nReps, T., Teitelbaum, T., and Demers, A., Tneremental contextdependent analysis for language-based editors, \nACM Trans. Program. Lung. Syst. 5(3) pp. 449477 (July 1983), Reps. T., Generating Langwzge-Based Envirowrumts, \nThe M.I.T. Press, Cambridge, MA (1984). Yeh, D., On incremental evaluation of ordered attributed gT~~S, \nBIT 23 pp. 308-320 (1983). Jones, L. and Simo~ J., Hierarchical VLSI design systems based on attribute \ngrammars, pp. 58-69 in Conference Record of the Thirteenth ACM Symposium on Principles of Programming \nLanguages, (St. Petersburg, FL, Jan. 13-15, 1986), ACM, New York, NY (1986). Reps, T., Marceau, C., and \nTeitelbaum, T., Remote attribute updating for language-based editors, pp. 1-13 in Conference Record of \nthe Thirteenth ACM Swnoosium on Principles of Prograrr&#38;dng Lunguages, (St. Pet~rsburg, FL, Jan. 13-15, \n1986), ACM, New York, NY (1986). Kaplan, S. and Kaiser, G., Incremental attribute evaluation in distributed \nlanguage-based editors, pp. 121-130 in Proceed\u00adings of the Fijih ACIU Symposium on Principles of Distributed \nComputing, (1986). Hoover, R. and Teitelbaum, T., Efficient incremental evalua\u00adtion of aggregate values \nin attribute grammars, Proceedings of the SIGPL4N 86 Symposium on Compiler Constructwn, (Palo Alto, CA, \nJune 25-27, 1986), ACM SIGPLAN Notices 21(7) pp. 39-50 (July 1986). Hoover, R., Incremental graph evaluation, \nPh.D. disserta\u00adtion and Teeh. Rep. 87-836, Dept. of Computer Science, Cor\u00adnell University, Ithaca, NY \n(May 1987). ParigoL D., Transformations, r%luation incr6merttale et op\u00adtimization des gramrnaires attribu&#38;s: \nLe systime FNC-2, These de Doctorat, L Universit4 Paris XI, Centre D Orsay, Orsay, France (1988). Kaiser, \nG.E., Incremental dynamic semantics for language\u00adbssed progr amrning environments, ACM Trans. Program. \nLang. Syst. 11(2) pp. 169-193 (April 1989). Teitelbaum, T. and Chapman, R., Higher-order attribute grammars \nand editing environments, Proceedings of the ACM SIGPLAN 90 Conference on Programming Language Design \nand Implernentatwn, (White Plains, NY, June 20-22, 1990), ACM SIGPLAN Notices 25(6) pp. 197-208 (June \n1990). Zaring, A., Parallel evaluation in attribute grammar based systems, Ph.D. dissertation and Tech. \nRep. 90-1149, Dept. of Computer Science, Cornell University, Ithac&#38; NY (Au\u00adgust 1990). The incremental \ncircuit-annotation problem Pardo, R.K. and Landa~ R., Process and apparatus for con\u00ad verting a source \nprogram into an object program, U.S. Patent No. 4,398,249, United States Patent Office, Washington, DC \n(August 9, 1983). Alpem, B., Hoover, R., Rosin B.K., Sweeney, P.F., and Za\u00addeck, F. K., Incremental evaluation \nof computational cir\u00adcuits, pp. 32-42 in Proceedings of the First Annual ACM-SIAM Symposium on Discrete \nAlgorithms, (San Francisco, CA, Jan. 22-24, 1990), Society for Indus~ial and Applied Mathematics, Philadelphia+ \nPA (1990). Ramalingam, G. and Reps, T., On the computational com\u00adplexity of irtcremerttrd algorithms, \nTR-1033, Computer Sci\u00adences DepsrtmenL University of Wisumsin, Madiio~ WI (August 1991). Ramalingarn, \nG. and Reps, T., On the complexity of incre\u00admental cmmputation~ Unpublished reporL Computer Sci\u00adences \nDep~tmenL University of Wisconsin, Madiso~ WI (October 1992). Incremental data-jlow analysis Rosem B.K., \nLinear cost is sometimes quadratic, pp. 117-124 in Conference Record of the Eighth ACM Symposium on Principles \nof Programming Lunguages, (Williamsburg, VA, January 26-28, 1981), ACM, New York, NY (1981). Ryder, B., \nIncremental data flow analysis based on a unified model of elimination algorithms, Ph.D. dissertation \nand Tech. Rep. DCS-TR-1 17, Rutgers University, New Brunswick NJ (September 1982). Ghodzsi, V., Incremental \nanalysis of uromtns, Ph.D. dissertatio~ Dept. of Computer science, Uni~ersi~ of Cen\u00adtral Florid% Orlando, \nFL (1983). Zadeck, F.K., Incremental data flow analysis in a structured program e.dhor, Ph.D. dissertatio~ \nMathematical Sciences Dept., Rice University, Houston, TX (October 1983). Zadeck, F.K., Tncrernental \ndata flow analysis in a structured program edhor~ Proceedings of the SIGPLAN 84 Symposium on Compiler \nConstruction, (Montreal, Can., June 20-22, 1984), ACM SIGPLAN Notices 19(6) pp. 132-143 (June 1984). \nCooper, K.D. and Kennedy, K., The impact of interprocedur\u00adal analysis and optimization in the Rn programming \nenviron\u00admen~ ACM Trans. Program. Lang. Syst. 8(4) pp. 491-523 (October 1986). Burke, M., An interval-based \napproach to exhaustive and in\u00adcremental interprocedural data flow analysis, Res. Rep. RC 12702, IBM T.J. \nWatson Research Center, Yorktown Heights, NY (April 1987). Burke, M. and Ryder, B., Incremental iterative \ndata flow analysis algorithms, Res. Rep. RC 13170, IBM T.J. Watson Resemch Center, Yorktown Heights, \nNY (October 1987), Canon, M. and Ryder, B., Incremental data flow update via attribute and dominator \nupdates, pp. 274-284 in Conference Record of the Fijieenth ACM Symposium on Princ~les of Programming \nLanguages, (Ssn Diego, CA, January 13-15, 1988), ACM, New York, NY (1988). Ryder, B.G. and Paull, M. \nC., Incremental data flow analysis algorithms, ACM Trans. Program. Lang. Syst. 10(1) pp. 1-50 (January \n1988). Marlowe, T.J., Data flow analysis and incremental iteratio~ Ph.D. dissertation and Tech. Rep. \nDCS-TR-255, Rutgers University, New Brunswick, NJ (October 1989). Marlowe, T.J. and Ryder, B.G., An efficient \nhybrid algo\u00adrithm for incremental data flow analysis, pp. 184-196 in Cor$erence Record of the Seventeenth \nACM Symposium on Principles of Programming Languages, (San Francisco, CA, Jan. 17-19, 1990), ACM, fiew \nYork, NY (1990). Rosene, C.M., Incremental dependence analysis, Ph.D. dissertation and Tech Rep. CRPC-TR90044, \nCenter for Research on Parallel Computation, Rice University, Housto~ TX (March 1990). Ramalingam, G. \nand Reps, T., On the computational com\u00adplexity of incremental algorithms, TR-1033, Computer Sci\u00adences \nDepartment, University of Wisconsin, Madison, WI (August i991). Maintaining shortest distances and other \npath problem in graphs Murchland, J.D., The effect of increasing or decreasing the length of a single \narc on all shortest distances in a graph Tech. Rep. LBS-TNT-26, London Business School, Trsn\u00adsport Network \nTheory Unit, hmdon, UK (1967). Loubal, P., A network evahtation procedurq Highway Research Record 205 \npp. 96-109 (1967). Rodionov, V., The parametric problem of shortest dis\u00adtances, US.S.R. Computational \nmath. and math. Phys. 8(5) pp. 336-343 (1968). Halder, A.K., The method of competing links, Traqorfa\u00adtion \nScience 4 pp. 36-51 (1970). Dionne, R., Etude et extension d on al orithme de Murch\u00adland; JNFOR 16(2) \npp. 132-146 (June 19$ 8). Cheston, G.A., Incremental algorithms in graph theory; Ph.D. dissertation and \nTech. Rep. 91, Dept. of Computer Sci\u00adence, University of Toronto, Toronto, Canada (March 1976). Goto, \nS. and Sangiovarmi-VincentelE A., A new shortest path updating algorithm, Networh 8(4) pp. 341-372 (1978). \nRohnert, H., A dynamization of the all least cost path problem: pp. 279-286 in Proceedings or SIACS \n8S: Second Annual Symposium on Theoretical Aspects o Computer Sci\u00adence, (Sadxuecken, W. Ger., Jan. 3-5, \n198 5f), Lecture Notes in Computer Science, Vol. 18Z ed. K. Mehlhom,Springer-Verlag, New York NY (1985). \nEven, S. snd Gazit, H., Updating distances in dynamic graphs, Methods of Operations Research 49 pp. 371-387 \n(1985). Lm, C.-C. and Chang, R.-C., On the dynamic shortest path problem, Journal of Information Processing \n13(4)(1990). Ausiello, G., It.aliano, G. F., Spaccameliz A.M., and Nanni, U., Incremental algorithms \nfor minimal length paths, Journal of Algorithms 12 pp. 615-638 (1991). Ramalingam, G. and Reps, T., On \nthe computational com\u00adplexity of incretnentrd algorithms, TR-1033, Computer Sci\u00adences Depiwtmen~ University \nof Wisconsin, MadisorL WI (August 1991). Ranxdingam, G. and Reps, T., An incremental algorithm for a \ngeneralization of the shortest-path problerm TR-1087, Comuuter Sciences lkuwttnen~ UniversiW of Wwconsin, \nMad~on, WI (May 19Y$. 3.1.2. Differential Updating In differential updating, rather than recomputing \nan annotation value z = g (y ) in terms of its new argument y , the old annota\u00adtion value z = g(y) is \nupdated by some difference Az computed as a function of y, y , g, and z. Koenig, S. and Paige, R., A \ntransformational framework for the automatic control of derived da@ pp. 306-318 in Proceedings of the \nSeventh International Conference on Very ?;~, Data Bases, (Cannes, France, September 1981), Shmueli, \nO. and Itai, A., Maintenance of view% pp. 240-255 in Proceedings of the ACM SIGMOD 84 Cottjkrence, (Boston, \nMA, 1984), ACM, New York NY (1984). Horwi@ S., Generating lsngusge-bssed editors: A . La Poutr6, J.A. \nand van LeeuweL J., Maintenance of transi\u00adrelatiorudly-attributed approach Ph.D. dissertation, Dept. \nof tive closures and &#38;ansitive reductions of graphs, pp. 106-120 Computer Science, Cornell University, \nhhac~ NY (August in Graph-Theoretic Concepts in Computer Science: Proceed\u00ad1985). ings of the 14th Interruztwnal \nWorkshop (1988), kcture Notes in Computer Science, (1988). Horwitq S. and Teitelbaum, T., Generating \nedhing environ\u00adments based on relations and attributes, ACM Trans. Pro-. Italiano, G.F., Fmdmg paths \nand deleting edges in directed gram. Lang. Syst. 8(4) pp. 577-608 (October 1986). acyclic graphs, I#ormation \nProcessing L.4tters 223pp. 5-11 (1988). Yell@ D. and Strom, R., INC: A language for incrernentrd computationsfl \nACM Trans. Program. Lang. Syst. 13(2) pp. . Yellin, D.M., A dynamic transitive closure algorithm, 211-236 \n(April 1991). Research Reporg IBM T.J. Watson Research Center, York\u00ad town Heights, NY (1988). 3.13. \nOther Incremental Expression-Evaluation Algorithms Di Battis@ G. and Tsmassi~ R., Incremental plsnsri \ntest- Several of the algorithms for incremental expression-evaluation \u00ading, pp. 436441 in Proceedings \nof the Thirtieth IEE 2 Sym\u00adproblems do not fit in either of the above two categories. posium on Foundatwns \nof Computer Science, IEEE Computer Society, Washington, DC (1989). Pugh, W.W., Incremental computation \nand the incremental evaluation of functional progrtuns, Ph.D. dissertation and . Buchsbaum, A.L., Kanellskis, \nP.C., and Vitter, J.S., A data Tech. Rep. 88-936, Dept. of Computer Science, Cornell structure for arc \ninsertion and regular path finding, pp. 22-31 University, hhac~ NY (August 1988). in Proceedings of the \nFirst Annual ACM-SIAM Symposium on Discrete Algorithms, (San Francisco, CA, Jan. 22-24, 1990), Pugk \nW. and Teitelbanm, T., Incremental computation via Society for Industrial and Applied Mathematics, Philadel\u00adfunction \ncsching~ pp. 315-328 in Conference Record of the phia, PA (1990). Sixteenth ACM Symposium on Principles \nof Progr~ ng Lunguages, (Austi TX, Jan. 11-13, 1989), ACM, New . Yannakakis, M., Graph-theoretic methods \nin database York, NY (1989). theory, pp. 230-242 in Proceedings of the Symposium on Principles of Database \nSystems, (1990). Field, J. and Teitelbanm, T., Incremental reduction in the lambda calculus, in Conference \nRecord of the 1990 ACM FredericksOn, G., Ambivalent data structures for dynamic 2-Symposium on Lisp \nand Functional Progr~ ng, (Nice, edge-cormectivity and k smallest spanning trees, pp. 632-641 Frsnce, \nJune 1990), ACM, New York, NY (1990). in Proceedings of the Thirty-Second IEEE Symposium on Foundatwns \nof Computer Science, JEEE Computer Society, Field, J., Incremental reduction in the lambda calculus and \nWashington, DC (1991). related reduction systems, Ph.D. dissertation, Dept. of Com\u00adputer Science, Cornell \nUniversity, Ithac% NY (May 1991). Gali~ Z. and Italisno, G.F,, Fully dynamic algorithms for edge-connectivity \nproblemsfl pp. 317-327 in Proceedings of Cohere R.F. and Tamassi~ R., Dynamic expression trees and the \nTwenty-Third Annual ACIU Symposium on Theory of their applications, pp. 52-61 in Proceedings of the Second \nComputing, ACM, New York, NY (1991). Annual ACM-SIAM Symposium on Discrete Algorithms, (San Francisco, \nCA, Jan. 28-30, 1991), Society for Industrial and Kanevsky, A., Tamsssi~ R., Di Battis@ G., and Chen, \nJ., Applied Mathematics, Philadelphia, PA (1991). On-line maintenance of the four-connected components \nof a graph pp. 793-801 in Proceedings of the Thirty-Second 3.2. Other Dynamic Graph Problems IEEE Symposium \non Foundations of Computer Science, IEEE Computer Society, Washingto~ DC (1991). Chestom G.A., Incremental \nalgorithms in graph theory, Ph.D. dissertation and Tech. Rep. 91, Dept. of Computer Sci-La Poutr6, J.A., \nMaintenance of tricormected components of ence, University of Toronto, Toronto, Canada (March 1976). \ngraphs, pp. 354-365 in Proceedings of the Nineteenth Inter\u00ad natwnal Collquium on Automata, Languages, \nand Progrmn\u00ad ming, (1992). lem, J. ACM 28(1) pp. 14 (January 1981). Eppstein, D., Galil, Z., Italiano, \nG.F., and Nissenzweig, A., Fredenckso~ G., Data structures for on-line updating of Sparsiiication A \ntechnique for speeding up dynamic graph minimum spanning trees, SIAM J. Computing 14 pp. Even, S. and \nShiloack Y., An on-line edgedeletion prob\u00adalgorithms, in Proceedings of the Thirty-third IEEE Sympo\u00ad \n 781-798 (1985). sium on Founaktions of Computer Science, (Pittsburgh, PA, Oct. 25-27, 1992), IEEE Computer \nSociety, Washington, DC (1992). Italiano, G.F., Amortized efficiency of a path retrieval data structure, \nTheoretical Computer Science 48 pp. 273-281 (1986). 3.3. Dyrtamization of Static Data-Structure Problems \n Reif, J.H., A topological approach to dynamic graph connec-Dym zation of mtdti-dimensional searching \nproblems tivity, Informatwn Processing Letters 25(1) pp. 65-70 (1987). Bentley, J.L., Decomposable searching \nproblems: It$orma\u00adtion Processing Letters 8 pp. 244-251 (1979). Bentley, J.L. and Saxe, J.B., Decomposable \nsearching prob\u00adlems E Static-todymnic transformations, Journal of Algo\u00adrithm 1 pp. 301-358 (1980). Overtnars, \nM.H., The Design of Dym c Data Structures, Lecture Notes in Computer Science, Vol. 156, Springer- Verlag, \nNew YorlG NY (1983). MeMho~ K., Data Structures and Algorithm 3: Multi- DimerKwnal Searching and Computational \nGeometry, Springer-Verlag, Berlin (1984). Dynanu zation of grqoh problems Eppstein, D., Galil, Z., Italisno, \nG.F., and Nissenzweig, A., Sparsification -A technique for speeding up dynamic graph algorithms, in Proceedings \nof the Thirty-third IEEE Sympo\u00adsium on Foundations of Computer Science, (Pittsburgh PA Oct. 25-27, 1992), \nIEEE Computer Society, Washington DC (1992).  3.4. Finite DMferencing Earley, J,, High-level operations \nin automatic programming, Proceedings of the ACM SIGPLAN Symposium on Very High Level Lunguages, (March \n1974), ACM SIGPLAN Notices 9(4)(April 1974). Earley, J,, High-level iterators and a method for automatical\u00adly \ndesigning data structure representation J. Corrywter Languages 1(4) pp. 321-342 (1976). Fong, A. and \nUnman, J., Induction variables in very high level languages, pp. 104-112 in Co~erence Record of the Third \nACM Symposium on Principles of Progrmuning Lzmguages, (Atlsn@ GA, Jan. 19-21, 1976), ACM, New York NY \n(1976). Fong, A., Elimination of cunurton subexpressions in very high level languages; pp. 48-57 in Conference \nRecord of the Fourth ACM Symposium on Princ@es of Programming Lunguages, (Los Angeles, CA, January 17-19, \n1977), ACM, New York, NY (1977). Fong, A., Inductively computable constructs in very high level languages, \npp. 21-28 in Conference Record of the Sixth ACM Symposium on Principles of Programming Languages, (San \nAntonio, TX, Jan. 29-31, 1979), ACM, New York NY (1979). Paige, R. and Koenig, S., Ftite dtiferencing \nof computable expressions, ACM Trans. Program. Lung. Syst. 4(3) pp. 402454 (July 1982). Goldberg, A. \nand Paige, R., Stream processing: in Co#er\u00adence Record of the 1984 ACM Symposium on Lisp and Func\u00adtional \nProgramming, (Aus~ TX, August 6-8, 1984), ACM, New York, NY (1984). Psige, R., Progrsmmirtg with invariants, \nIEEE So@are 3(1) pp. 56-69 (January 1986). 4. Incremental Formal Systems 4.1. Incremental Reduction \nIncremental fmtional progr~ ng Lombsrdi, L.A. and Raphael, B., Lisp as the language for an incremental \ncomputer, pp. 204-219 in The Progr~ ng Language Lisp: Its Operatwn and A placations, wI. E.C. Berkeley \nand D.G. Bobrow,The M.L I! Press, Cambridge, MA (1964). Lombsrdi, L.A., Incremental computation, pp. \n247-333 in Advances in Computers, Vol. 8, ed. F.L. Alt and M. Rubmoff,Acadetnic Press (1967). Sundaresh, \nR.S. and Hudak, P., Incremental computation via partial evaluation, in Conference Record of the Eighteenth \nACM Symposium on Principles of Programming g Languages, (Orlando, FL, January 1991), ACM, New York, NY \n(1991). Sundsresh, R. S., Building incremental programs using par\u00adtial evaluation, Proceedings of the \nSIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Mamptda\u00adtion (PEPM 91), (New Haven, \nCT, June 17-19, 1991), ACM SZGPLANNotices 26(9) pp. 83-93 (September 1991). Sundsresh, R. S., Incremental \ncomputation via arial evalua\u00adtiorL Ph.D. dissertation and Res. Rep. YALEU ksIRR-889, Dept. of Computer \nScience, Yale University, New Haven, CT (December 1991). Field, J. and Teitelbaum, T., Incremental reduction \nin the lambda calculus; in Cor@erence Record of the 1990 ACM Symposium on Lisp and Functional Programrnin \ng, (Nice, France, June 1990), ACM, New York, NY (1990). Field, J., Jncremerttal reduction in the lambda \ncrdculus and related reduction svsterns. Ph.D. dxsertation. DepL of Com\u00adputer Science, Co~ell U~versity, \nIthac% ~ (M~y 1991). Incremental parsing Ghezzi, C. and Mandrioli, D., Incremental parsing, ACM Trans. \nProgram. Lang. Syst. l(l) pp. 58-70 (July 1979). Ghezzi, C. and Msndrioli, D., Augmenting parsers to \nsupport incrementality, Journal of the ACM 27(3) pp. 564-579 (Oc\u00adtober 1980). Wegm~ M., Parsing for structural \neditors, pp. 320-327 in Proceedings of the Twenty-First IEEE S mposium on Foun\u00addatwns of Computer Science \n(Syracus% !4Y, October 1980), IEEE Computer Society, Washington, DC (1980). Jalili, F. and Gallier, J., \nBuilding friendly parsers; pp. 196-206 in Conference Record of the Ninth ACM Symposium on Principles \nof Programming Languages, (Albuquerque, NM, Jan. 25-27, 1982), ACM, New York NY (1982). Kaiser, G.E. \nand Kant, E., Incremental parsing without a parser; Journal of Systems and Soy%vare 5(2) pp. 121-144 \n(May 1985). Algebraic laws offunctional algebra MacLennan, B.J., Preliminary investigation of a calculus \nof functional differences: Fixed differences: Report NPS52-86\u00ad010, Computer Science Department Naval \nPostgraduate School, Monterey, CA (February 1986). MacLennan, B.J., An algebraic approach tu a calculus \nof functional differences: Fixed differences and integrals, Re\u00adport NPS52-87-041, Computer Science Depmtmen~ \nNaval Postgraduate School, Monterey, CA (September 1987). MacLennan, B.J., A calculus of functional differences \nand integrals, Unpublished llr~ Department of Computer Sci\u00adence, University of Tennessee, Knoxville, \nTN (). 4.2. Truth Maintenance Doyle, J., A truth maintenance system, Artificial Intelli\u00ad gence 12 pp. \n231-272 (1979). Doyle, J., A glimpse of truth maintenance, in Artificial In\u00adtelligence: An M.I.T. Perspective, \ned. P.H. Winston and R.H. Brown,The M.I.T. Press, Cambridge, MA (1979). Perlis, D., Bibliography of literature \non non-monotonic rea\u00adsoning, (Source unknown), (1984). de Kleer, J., An assumption-based TMS, Artificial \nIntelli\u00ad gence 28 pp. 127-162 (1986). de Kleer, J., Extending the ATMS, Artificial Intelligence 28 pp. \n163-196 (1986). de Kleer, J., Problem solving with the ATMS, Arti@ial In\u00adtelligence 28 pp. 197-224 (1986). \nMcAllister, D., Truth maintenance, UD. 92-104 in Proceed\u00adings of the Eighth National Confere;e on Artificial \nIntelli\u00adgence, (Bostou MA July 29 August 3, 1990), A&#38;M Press/l he M.I.T. Press, Cambridge, MA (1990). \n4.3. Incremental Deduction Shmueli, O., Tsur, S., and Zfira, H., Rule support in Prolog, (Source UnknOWn), \n(1984). Msnnil~ H. and Ukkone~ E., Time parameter and arbitrary dcunions in the set union problcm~ pp. \n3442 in Proceedings of the First Scandinavian Workrhop on Algorithm Theory (SWAT 88), Lecture Notes in \nComputer Science, Vol. 318, Springer-Verlag, New York, NY (1988). Incremental deduction for static-semantic \nanalysis Snelting, G. and Henhap!, W., Unification in many-sorted algebras as a device for incremental \nsemantic analysis, pp. 229-235 in Cor#erence Record of the Thirteewh ACM Sympo\u00adsium on Principles of \nProgr~ ng Languages, (St. Peters\u00adburg, FL, Jan. 13-15, 1986), ACM, New York, NY (1986). Attali, 1., \nCompiling TYPOL with attribute grammars, pp. 252-272 in Proceedings of the International Workxhop on \nProgramnu ng Language Implementation and Logic Program\u00adming 88, Lecture Notes in Cowuter Science, Vol. \n348. cd. P. Der-&#38;XXWL B. I-.orho, and J. Maluszynski,Springer-Verlag, New York, NY (1988). Am I. \nand Franchi-Zannettacci, P., Unification-free execu\u00adtion of TYPOL programs by semantic attribute evaluation, \npp. 160-177 in Proceedings of the Fijth International Confer\u00adence and Symposium on Logic Programnu ng, \ned. R. Kowalski and K. Bowe~The M.I.T. Press, Cambridge, MA (1988). van der Meulen, E.A., Deriving incremental \nimplementat\u00adions from algelxaic specifications, Report CS-R9072, Com\u00adputer Science/Department of Software \nTechnology, Center for Mathematics and Computer Science (CWf), Amsterdam, The Netherlands (December 1990). \nBallance, R.A., Syntactic and semantic checking in language-based editing systerns~ Ph.D. d~sertation \nand Tech. Rep. UCB/CSD 89/548, Dept. of Electrical Engineering and Computer Science, University of California-Berkeley, \nBerkeley, CA (December 1989). Balkmce, R.A. and Graham, S.L., Incremental cmsistency maintenance for \ninteractive applications, in Proceedings of the Eighth Internatwnal Conference on Logic Programming, \n(1991). 4.4. Incremental Constraint Solving Vander Zanden, B. T., Incremental constmint satisfaction \nand its application to graphical interfaces, Ph.D. dissertation and Tech. Rep. TR 88-941, Dept. of Computer \nScience, Cor\u00adnell University, Ithac% NY (October 1988). Freeman-Benson, B.N, Maloney, J., and Borning, \nA., An in\u00adcremental constraint solver; Cornrnun. of the ACM 33(1) pp. 54-63 (January 1990). 5. Other \nSpecial-Purpose Algorithms Incremental compilation and linking Fritzson, P., preliminary experience from \nthe DICE system, a d~tributed incremental compiling environment Proceed\u00adings of the ACM SIGSOFHSIGPLAN \nSo@are Engineering Symposium on Practical So@are Development Environ\u00adments, (Pittsburgh, PA, Apr. 23-25, \n1984), ACM SIGPLAN Notices 19(5) pp. 113-123 (May 1984). Fritzson, P., Towards a distributed programming \nenviron\u00adment based on incremental compilation, Linlu$ping Studies in Science and Technology Dissertation \nNo. 109, Dept. of Comp. and Inf. Sci., Link~ping University, L~+ping, Sweden (1984). Schwart?, M:, Delisle, \nN., and Begwani, V., Incremental compilahon m Magpie, Proceedings of the SIGPLAN 84 Symposium on Compiler \nConstruction, (Montreal, Can., June 20-2~ 1984), ACM SIGPLAN Notices 19(6) pp. 122-131 (June 1984). Tichy, \nW .F., Smart recompilation; ACM Trans. Program. Lang. Syst. 8(3) pp. 637-654 (July 1986). Schwanke, R.W. \nand Kaiser, G. E., Technical Correspon\u00addence Smarter remrnpilation~ ACM Trans. Program, Lung. Syst. 10(4) \npp. 617-632 (October 1988). Tichy, W.F., Technical Correspondence Tichy s response to R.W. Schwsnke \nand G.E. Kaiser s Smarter remmuilstion . ACM Trans. Program. Lang. Syst. 10(4) pp. 63$-634 (&#38;\u00adtober \n1988). Cooper, K.D. and Kennedy, K., The impact of intcrprocedur\u00adal analysis and optimization in the \nR programming environ\u00admen~ ACM Trans. Program. Lang. Syst. 8(4) pp. 491-523 (October 1986). Burke, M. \nand Torczon, L., Interprocedural optimization El\u00adiminating unnecessary rewmpilation, ACM Trans. Program. \nLang. Syst., (), (T o appear.) Document preparatwn Chamberlain, D.D., King, J.C., Shnz? D.R., To~ S.J.P., \nand Wa&#38;, B.W., JANUS: An interactive system for document composition Proceedings of the ACM SIGPLANISIGOA \nSymposium on Text Man@lation, (Portland, OR, June 8-10, 1981), ACM SIGPLANNotices 16(6) pp. 82-91 (June \n1981). Chamberlain, D.D., Document convergence in an interactive formatting system; IBM Systems Journal \n31(1) pp. 58-72 (January 1987). Chen, P. and Harrison, M.A., Multiple representation docu\u00adment developmen~ \nZEEE Computer 21(1) pp. 15-31 (January 1988). Chen, P., A multiple-representation paradigm for document \ndevelopmen~ Ph.D. dissertation and Tech. Rep. UCB/CSD 88/436, Dept. of Electrical Engineering and Computer \nSci\u00adence, University of California-Berkeley, Berkeley, CA (1988). Harrison, M.A. and MunsorL E. V., On \nintegrated bibliogra\u00adphy processing: Electronic Publishing 2(4) pp. 193-210 (De\u00adcember 1989). Harrison, \nM.A. and Munson, E.V., Numbering document components: Electronic Publishing 4(l)(January 1991). Brooks, \nK.P., A two-view document edkor with user\u00addefinable document structure: Technical Report 33, DEC Systems \nResearch Center, Palo Alto, CA (November 1988). VZS I design tools ousterhou~ J.K., Hamachi, G.T., Ma \no, R.N., Scot~ W.S., and Taylor, G. S., Magic: A VLS 1 layout system; pp. 152-159 in Proceedings of the \nTwenty-First Design Automa\u00adtwn Conference, IEEE Computer Society, Washington, DC (1984). Taylor, G.S. \nand ousterhou~ J.K., Magic s incremental design-rule checker, pp. 160-165 in Proceedings of the Twenty-First \nDesign Automation Conference, IEEE Computer Society, Washington DC (1984). Scott, W.S. and Gusterhou~ \nJ.K., Plowing: Interactive stretching and compaction in Magic, pp. 166-172 in Proceedings of the Twenty-First \nDesign Automation Cor@er\u00adence, IEEE Computer Society, Washington, DC (1984). Ousterhout, J.K., Comer \nstitching: A data-structuring tech\u00adnique for VLSI layout tools, IEEE Tratwactwns on ~;8~uter-Aided Design \nCAD-3(1) pp. 87-100 (January 6. Implementation Frmneworks Graph annotation cara specifiationparadigm \nBncklin, D. and Frsrtkston, B., VisiCalc Computer Software Program for the Apple II and II Plus, Personal \nSoftware, Inc., Sunnyvale, CA (1979). Alpem, B., Carle, A., RoseL B., Sweeney, P., and Zadeck, K., Graph \nattribution as a spedication paradigm; Proceed\u00adings of the ACM SIGSOFTISIGPLAN So&#38;are Engineering \nSymposium on Practical Software Development Environ\u00adments, (Bostom MA, November 28-30, 1988), ACM SIG-PLANNotices \n24(2) pp. 121-129 (February 1989). Incremental constraint solvers Borning, A. H., ThingLab-A constraint-oriented \nsimulation laboratory, Ph.D. dissertation, Comp. Sci. Dept., Stanford UniversiV, snd Tech. Rep. SSL-79-3, \nXerox Palo Alto Research Center, Palo Alto, CA (July 1979). Konopasek, M. and Jayaramsn, S., The TK!Solver \nBook, Osborne/McGraw-Hill, Berkeley, CA (1984). Systems for generating language-sensitive editors Reps, \nT. and Teitdbaum, T., The Synthesizer Generator: A System for Constructing Lunguage-Based Editors, Springer-Verlag, \nNew York, NY (1988). Reps, T. and Teitelbaum, T., The Synthesizer Generator Reference Manual: Third Edition, \nSpringer-Verlag, New York, NY (1988), Borras, P., CIErnen~ D., Despeyroux, T., Jncerpi, J., Kahn, G,, \nLang, B., and Pascual, V., CENTAUR: The system, Proceedings of the ACM SIGSOFTISIGPLAN So@are En\u00adgineering \nSymposium on Practical So#ware Development En\u00advironments, (Boston, ~ November 28-30, 1988), ACM SIGPLANNotices \n24(2) pp. 14-24 (February 1989). Bahlke, R. and Snelting, G., The PSG system From formal language definitions \nto interactive programming environ\u00adments, ACM Trans. Program. Lang. Syst. 8(4) pp. 547-576 (October 1986). \nBsllance, R.A., Graham, S. L., and Van De Vanter, M.L., The Pan language-based editing system, ACM Trans. \nSo~are Engineering and Methodology l(l) pp. 95-127 (January 1992). KlinL P. (cd.), The ASF+SDF Mets-environment \nuser s guide, Draft, Computer Science/Depsrtrnent of Software Technology, Center for Mathematics and \nComputer Science (CWI), Amsterdam, The Netherlands (1992). Compilation techniques for very high-level \nimperative languages Paige, R. and Koenig, S., Finite differencing of computable expressions, ACM Tram. \nProgram. Lung. Syst. 4(3) pp. 402-454 (July 1982). Paige, R., Transformational progr snuning-applications \nto algorithms and systems, pp. 73-87 in Conference Record of the Tenth ACM Symposium on Principles of \nProgrwnming Lunguages, (Aus@ TX, Jan. 24-26, 1983), ACM, New York, NY (1983). Goldberg, A. and Paige, \nR., Stream processing, in Confer\u00adence Record of the 1984 ACM Symposium on Lisp and Func\u00adtwrud Progr~ \nng, (Austim TX, August 6-8, 1984), ACM, New York NY (1984). Paige, R., Programming with invariants, IEEE \nSo~are 3(1) pp. 56-69 (January 1986). Cai, J. and Paige, R., Binding performance at language design timep \npp. 85-97 in Conference Record of the Four\u00adteenth ACM Synposium on Principles of Progr~ ng Languages, \n(Munick W. Germany, January 1987), ACM, New York, NY (1987). Csi, J. and Paige, R., Program derivation \nby fixed point com\u00adputation Science of Computer Programma ng 11 pp. 19 7-261 (1988/89). Csi, J. and Paige, \nR., Languages polynomial in the input plus outpuL in Proceedings of the Second International Co@er\u00adence \non Algebraic Methodology and Software Technology (AMAST), (Iowa City, Iowa, May 22-25, 1991), (1991). \nHoover, R., Alphonse: Incremental computation as a pro\u00ad amming abstractio~ Proceedings of the ACM SIGP.LAN \n~2 Cotierence on Projmunrnirw .Liwwuae Design and Itnole\u00admentatwn, (San Franc~co, CAUJune-17-~9, 1992), \nACM SIG-PLAN Notices 27(7) pp. 261-272 (kdy 1992). 7. Other Problems Related to Incremental Computation \nSensitivity analysis Ber~ekas, D.P., Linear Network Optimization: Algorithms and Codes, The M.I.T. Press, \nCambridge, MA (1991). Parametric problems Gallo, G., Grigoriadis, M.D., and Tsrjan, R.E., A fast parametric \nmaximum flow algorithm snd applications, S1 J. Computing 18(1) pp. 30-55 (February 1989). Continuous \nexecution Henderson, P. and Weiser, M., Continuous execution The Visiprog environmen~ in Proceedings \nof the Eighth IEEE International Conference on So@are Engineering, IEEE, Computer Society, Washington, \nDC (1985).   \n\t\t\t", "proc_id": "158511", "abstract": "", "authors": [{"name": "G. Ramalingam", "author_profile_id": "81100519054", "affiliation": "", "person_id": "PP31091109", "email_address": "", "orcid_id": ""}, {"name": "Thomas Reps", "author_profile_id": "81100117392", "affiliation": "", "person_id": "PP40023877", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/158511.158710", "year": "1993", "article_id": "158710", "conference": "POPL", "title": "A categorized bibliography on incremental computation", "url": "http://dl.acm.org/citation.cfm?id=158710"}