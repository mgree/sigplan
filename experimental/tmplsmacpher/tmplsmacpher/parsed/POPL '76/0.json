{"article_publication_date": "01-01-1976", "fulltext": "\n THE INFLUENCE OF PRODUCTIONS ON DERIVATIONS AND PARSING (Extended Abstract) Benton L. Leong and Detlef \nWotschke Computer Science Department The Pennsylvania State University University Park, PA. 16802 ABSTRACT \nThe concept of grammar forms [4,5] provides evidence that there seems to be no way to base the definitions \nof many grammar types used in parsing and compiling solely on the concept of productions. Strict interpretations, \nas introduced in [3,5], of unambiguous or LR(k) grammar forms generate un-ambiguous or LR(k) languages, \nrespectively. This is not true in the LL(k) case. It is decidable whether a strict interpreta-tion of \nan unambiguous grammar form is unambiguous. For any two compatible strict interpretations G 1 and G 2 \nof an unambiguous grammar form it is de-cidable whether L(Gi)_CL(G2), L(Gi)n L(G2)=~, finite, or infinite. \nFor every grammar form F 1 there exists a grammar form F 2 such that the grammatical family of F 1 under \nunrestricted interpretations is equal to the grammatical family of F 2 under strict interpretations. \nI, INTRODUCTION The definitions of most grammar types that are used for parsing and compiling depend \non the con-cept of a derivation. For example, the definition of an LR(k) grammar depends on rightmost \nderiva-tions, while the definition of an LL(k) grammar depends on leftmost derivations. On the other \nhand, the definition of a linear context-free grammar, for instance, depends solely on the concept of \na produc-tion. We will show in section II that the concept of grammar forms ([4], [5]) provides evidence \nthat there seems to be no way to base the definitions of many grammar types used in parsing and compiling \nsolely on the concept of productions instead of derivations. Bertsch has shown in [3] that so-called \nstrict interpretations [3,5] of unambiguous grammar forms require essentially the same parsing time, \nup to a multiplicative constant c, as the underlying unam-biguous grammar form. One of the conditions, \nwhich is quite restrictive and essential for the proof, is missing in the definition of a strict interpreta-tion \nin [3]. So the question arises: how restric- ted are strict interpretations. We will prove in section \nIII that strict interpretations of unambig-uous or LR(k) grammar forms generate unambiguous or LR(k) \nlanguages, respectively. This is not so in the LL case. It is decidable whether a strict interpretation \nof an unambiguous grammar form is un-ambiguous. For any two \"compatible\" strict interpre-tations G 1 \nand G 2 of an unambiguous grammar form it is decidable whether L(G I)~L(G 2) and whether L(Gi) n L(G2) \nis empty, finite, or infinite. In section IV we will compare grammar forms with strict and unrestricted \ninterpretations. Specifi- cally we will show that for every grammar form F 1 there exists a grammar form \nF 2 such that the gram- matical family of F 1 under unrestricted interpre- tations is equal to the grammatical \nfamily of F 2 under strict interpretations. There are cases where F 2 has to be ambiguous although F \n1 is un- ambiguous. A few open problems will be listed in section V. II, THE INFLUENCE OF PRODUCTIONS \nON DERI- VATIONS For many years a considerable amount of time and effort has been spent defining and \ninvestigating grammars which are useful as models for programming languages. Among these grammars are, \nto name only a few, LR(k) grammars, LL(k) grammars, bounded- context grammars, (m,n) precedence grammars, \nsimple precedence grammars (cf. m [I] as a survey reference). Although all these models differ quite \nsignificant- ly from each other in their definitions as well as in their parsing techniques, almost all \nof them .have one thing in common: their definitions rely heavily on the concept of a derivation. We \nomit quoting the definitions of LR(k)-, LL(k)-, simple precedence grammars, etc. But clearly part of \nthe definition of an LR(k) grammar is the underlying rightmost derivation. Similarly the definition of \nan LL(k) grammar depends on the underlying left- most derivation. As a consequence, testing a grammar \nfor LR(k)-ness, LL(k)-ness (for a given k) involves more, at least in the general case, than a mere checking \nof whether each production in the given production table is of a certain form. In many instances, testing \na grammar for LR(k)-ness or LL(k)-ness (for a given k) requires quite an in- volved computation. There \nare, of course, other ways to define grammars in general, and specific types of context-free grammars \nin particular. For example, it is extremely easy to define and understand the notion of a linear context-free \ngrammar. Likewise, it is a trivial task to test whether a given grammar is a linear context-free grammar, \na regular grammar, a context-free grammar, etc. The immediate question comes up whether it is really \nnecessary to define LR(k) grammars, LL(k) grammars, etc. in terms of derivations rather than just productions. \nIn other words, do there or do there not exist methods to define LR(k)-, LL(k)-, simple precedence grammars, \netc. by merely placing certain restrictions on the production type allowed. This question is extremely \nimportant since restric-tions on productions are generally easier to under-stand than restrictions on \nderivations. Many proofs (e.g., the equivalence of deterministic pushdown automata and LR(1) grammars) \nwould hopefully become simpler if the grammar definitions were based on production types rather than \non derivation types. It was often assumed that such a \"production-char-acterization\" is probably not \npossible, partly be-cause of the following reason: it is undecidable, for example, whether a given context-free \ngrammar is an LL(k) grammar or LR(k) grammar for any k ([l]). It is therefore impossible to find a characteriza-tion \n(in terms of production-types) of LR(k)-, LL(k) grammars etc. Otherwise, one could decide whether or \nnot a given grammar is LL(k) or LR(k) for any k by simply checking each production for \"characteristic\" \nproperties, assuming, of course, that testing for these \"characteristic\" properties is a decidable task. \nHowever, it is decidable whether a grammar is LR(k), LL(k) for any fixed k, and it is also de-cidable \nwhether a grammar is a simple precedence grammar [I]. So it is not at all clear whether or not there \nexist characterizations of LL(k)-, LR(k) grammars (for fixed k), or simple precedence gram- mars in terms \nof productions. Before one can start investigations of this kind one has to have a well- defined concept \nof what a characterization in terms of productions should be. Such a concept, that of a grammar form, \nhas been established by Cremers and Ginsburg ([4],[5]). Definition II.I: A (context-free) grammar form \nis a 6-tuple F= (V,S,V,Z,P,S) where I) V is an infinite set of abstract symbols, 2) S is an infinite \nsubset of V such that V-S is infinite, and 3) G F= (V,Z,P,S), called the form grammar (of F), is a (context-free) \ngrammar ([6],[11]) with V~V, Z~S, and (V-S)~ (V-S). We assume throughout this paper that V and S are \nfixed infinite sets satisfying (I) and (2) above. We will only consider grammar forms which have a context-free \nform grammar and will there-fore omit the attribute \"context-free\" in many instances. Definition 11.2: \nAn interpretation of a grammar form F= (V,S,V,Z,P,S) is a 5-tuple I= (~,Vi,ZI,Pi,Si), where I) v is a \nsubstitution on V* such that i) u(a) is a finite subset of S* for' each element a in Z, ii) ~(A) is a \nfinite subset of F-S for each A in V-E, and iii) u(A] nu(B) =~ for each A and B in V-Z if A # B, 2) PI \nis a subset of ~(P) = u ~(~), ~P ~C~+S):{u\u00f7vlu~(~), vc~(S)}, where 3) S I is in u(S), and 4) %i(VI) contains \nall symbols in Z(V) which occur in PI (together with Sl). G I= (Vi,Zi,Pi,S I) is called the grammar of \nI. A grammar form gives rise to a family of gram-mars, which are structurally related to the form grammar, \nby means of interpretations of the form grammars. For brevity, an interpretation I is frequent-ly written \nas (u,Gi). Since the productions in G I are structurally related to the form grammar G F, we sometimes \nwill call G F a \"master grammar.\" Since V and S are fixed, we will use the phrase \"an interpretation \nof G\", where G = (V,Z,P,S), rather than \"an interpretation of F\", where F= (V,S,V,S,P,S). Definition \n11.3: For each grammar G, G(G)= {Gill an interpretation of G} is called the family of grammars (of G) \nand L(G) = {L(Gi)IG I is in G(G)} the grammatical family (of G). A col- lection L of languages is a grammatical \nfamily if L=L(G) for some grammar G. It was shown in [4] that the linear context-free languages, the \nregular languages, and the con-text-free languages all constitute grammatical fami-lies. For the sake \nof exposition we briefly list grammar forms for the above mentioned classes of languages. I) Let G be \na grammar with P = {S+aS,S\u00f7e}. Then clearly L(G) is the family of regular languages. 2) Let G be a grammar \nwith P = {S+aSa,S+e}. Then L(G) is the family of all linear context- free languages. 3) Let G be a grammar \nwith P= {S+SS,S\u00f7a}, then L(G) is the family of all context-free langu- ages. The above examples demonstrate \nthat grammar forms are a reasonable model for production types. Using this model of grammar forms it \nis very easy to show that many classes of grammars that possess interesting parsing properties do not \nform families of grammars and that it is therefore highly unlikely that their relevant features can be \nex-pressed in terms of productions. But first we re- state the following theorem from [4]: Theorem 11.4: \nFor each grammar G, L(G) is closed under union, homomorphism, and intersection with regular sets. We \ncan now state: Theorem 11.5: Each of the following classes of grammars does not form a family of grammars: \nI) LL(k) grammars for arbitrary k 2) LR(k) grammars for arbitrary k 3) LL(k) grammars for arbitrary, \nbut fixed k 4) LR(k) grammars for arbitrary, but fixed k 5) Strong LL(k) grammars for any given k 6) \nSimple LR(k) grammars for any given k 7) Strict deterministic grammars 8) Simple precedence grammars \n9) Uniquely invertible extended precedence grammars 10) Uniquely invertible weak precedence gram- mars \n11) Simple mixed strategy precedence grammars 12) Mixed strategy precedence grammars 13) (I,I) bounded \nright context grammars 14) Bounded right context grammars. Proof: Consider the following two grammars \nG 1 : (Vi,Zi,Pi,S I) and G 2= (V2,%2,P2,S2) where V 1 =V 2= {a,b,c,S} E l =Z 2= {a,b,c}, P1 = {S+aSb, \nS+c}, and P2 = {S+aSbb, S+c}. Clearly L 1 =L(G I)= {ancbnlnmO} and L 2= : L(G 2) {ancb2nln~O}. Let G \ni denote the class of all grammars of type i) (i=l ..... 14) as listed in the theorem. Thus G 1 is the \nclass of all LL(k) grammars for arbitrary k, etc. It is well known that for i=l ..... 14 the languages \nwhich can be generated \"by grammars in G i are deterministic context-free [I]. Moreover grammars G 1 \nand G 2 belong to G i for every i:l ..... 14. So let us assume that for some i, where 1 ~i ~14, G i is \na family of grammars, i.e. there exists a grammar G such that G(G) =G i. Hence G 1 and G 2 belong to \nG(G) and L(Gi) and L(G2) belong to the grammatical family L(G). Since L(G) is closed under union, it \nfollows that L 1 uL 2 is also in L(G) and hence there exists a grammar G I which is an interpretation \ngrammar of the grammar G such that L 1 uL 2=L(GI). Hence G I belongs to G(G) and thus to G i. Since L \n1 uL 2 is not a deterministic context-free language [7] we obtain a contradiction. D It is therefore \nreasonable to assume that for all the above mentioned grammar types there does not exist any natural \nway to define them in terms of productions. We would be misleading the reader if we did not investigate \nthe previously asked question from a slightly different point of view: There are con-13) (I,I) bounded \nright context languages text-free grammars which generate LL(k) languages, but which themselves are not \nLL(k) grammars. Thus the family of LL(k) grammars is a proper subset of the family of all grammars that \ngenerate exactly the LL(k) languages. Similar situations occur for the other types of grammars listed \nabove. Thus our claim that restrictions on productions and restric- tions on derivations have very little \nconnection would be only partially true if one could charac-terize, for example, all grammars that generate \nLL(k) languages for a given k in terms of a pro- duction type. However, a trivial change of the proof \nof theorem 11.5 shows that, even from this modified point of view, there is only little con-nection between \nproductions and derivations. We therefore list as a corollary: Corollary: Each of the following classes \nof lan-guages does not constitute a grammatical family, i.e., there is no grammar form F such that all \ninterpretation grammars of F generate exactly any one of the following classes of languages: I) LL(k) \nlanguages for arbitrary k 2) LR(k) languages for arbitrary k 3) LL(k) languages for any given k 4) LR(k) \nlanguages for any given k 5) Strong LL(k) languages for any giv en 6) Simple LR(k) languages for any \ngiven 7) Strict deterministic languages 8) Simple precedence languages 9) Uniquely invertible extended \npreced ence languages lO) Uniquely invertible weak precedence lan- guages ll) Simple mixed strategy precedence \nlanguages 12) Mixed strategy precedence languages 14) Bounded right context languages. Other classes \nof grammars and languages that have interesting parsing properties are the unambiguous grammars and languages \nof ambiguity degree k. The definition of unambiguity and ambiguity of degree k is based on the concept \nof derivations. Here too, we can easily show that there seems to be no way to \"grasp\" the concept of \nunambiguity solely in terms of productions. Theorem 11.6: Each of the following classes of grammars does \nnot constitute a family of grammars: I) Unambiguous context-free grammars 2) Ambiguous context-free grammars \n3) Context-free grammars with ambiguity de- gree ~k for any given k 4) Context-free grammars with ambiguity \nde- gree ~k for any given k Proof: to I) Assume that there is a grammar G such G(G) equals the class \nof all unambiguous con-text-free grammars. Then the grammar G = (V,Z,P,S) has to be unambiguous since \nG is clearly an inter-pretation grammar of itself. Furthermore, L(G) has to be an infinite language, \nsince otherwise all grammars in G(G) and thus all unambiguous context- free grammars could generate only \nfinite languages which clearly is a contradiction. Hence there exists a symbol AE (V-Z) such that S~uAz \nuvAyz~ uvxyz for some u,v,x,y,z~ We define an interpretation of G as follows: ~(~) = {~} for every ~V-{A} \n~(A)= {A,A'} where A'~V. Then G I = (Vu {A'},Z,~(P),S) is an interpretation of G. Hence G I should be \nan unambiguous grammar. However G I is a grammar with an infinite degree of ambiguity. The string uvkxykz \nhas 2 k\u00f7l leftmost derivations, for every k~l. to 2) Assume that there is a grammar G such that G(G) \nequals the class of all ambiguous grammars. Then G has to be ambiguous. It fs tri-vial to find an unambiguous \ninterpretation of G and thus arrive at a contradiction. to 3 and 4) Similar to cases I) and 2). D The \nclass of grammars that generate unambiguous con-text-free languages is strictly larger than the class \nof unambiguous grammars. So again we have to address the question whether all grammars generating unambiguous \ncontext-free languages can be character- ized in terms of productions. The answer is again \"no\". Theorem \nII.7: Each of the following families of languages does not constitute a grammatical family: l) Unambiguous \ncontext-free languages, and 2) inherently ambiguous context-free langu- ages. Proof: To l) It is well \nknown that there are in- herently ambiguous context-free languages [Ill. So if there exists a grammar \nG such that L(G) equals the set of all unambiguous context-free languages then L(G) contains all context-free \nlanguages since L(G) is closed under homomor- phism and since every context-free language L l can be \nexpressed as h(L 2) with h a homomorphism and L 2 an unambiguous context-free language. Thus we obtain \na contradiction. To 2) Similar to proof of part two of Theorem II.6. III, THE INFLUENCE OF PRODUCTIONS \nON PARS I NG In [3] Bertsch has shown that so-called strict interpretations[3,5] of unambiguous grammar \nforms can be parsed in essentially the same time (up to a multiplicative constant c) as the underlying \nunam-biguous form grammar. One of the conditions, which is quite restrictive and essential for a proof \nin [3] (cf. Theorem lll.3),is missing in the definition of a strict interpretation in [3]. So the following \nquestion arises: \"How restrictive are strict inter-pretations?\" We will show that grammars given by strict \ninterpretations of an unambiguous form gram- mar generate only unambiguous languages. Similarly, strict \ninterpretations of an LR(k) grammar gene- rate only LR(k) languages. This is not so in the LL case. Finally, \nwe will prove that it is de-cidable for a given unambiguous grammar form whether a strict interpretation \nis unambiguous or not. It is also decidable for two \"compatible\" strict inter-pretations G 1 and G 2 \nof an unambiguous form grammar whether L(G I)~ L(G2), L(G I) =L(G2), and whether L(G I) nL(G 2) is empty, \nfinite, or infinite. The formal framework used in [3] is that of x-categories and x-functors. The reader \nis refer-red to [2],[3],[12],[13],[17], and [20] for further details on these concepts. The definition \nof a strict interpretation given in [3] is as follows: An interpretation I = (~,Vi,Zi,PI,S I) (of a grammar \nform F= (V,S,V,Z,P,S)) is a strict interpretation if ~(a) is a finite subset of S where a~Z. We quote \nthe following theorem from [3]. Theorem III.I: Let G F be the form grammar of a context-free grammar \nform F. Then G I is the grammar of a strict interpretation of F if and only if there exists a length-preserving \nx-func- tor @: G I + G F- One can immediately show that if u(a) n~(b)P for two symbols a. and b~Z (a \ncase that is al- ]owed under the definition of a strict interpreta-not so much the length-preserving \nproperty, that tion in [3]) then one cannot construct the length- preserving x.-functor @: G I\u00f7G F. The \nadditional condition needed is one that requires ~(a) n~(b) = for all a, bES. Thus we need to add this \ncondi- tion to the definition of a strict interpretation. (Definition III.2 was also used in [5].) Definition \nIll.2: An interpretation I= (u,Vi,Ei,Pi,S I) (of a grammar form F= (v,s,V,S,P,S)) is a strict interpretation \nif l) ~(a) is a finite subset of S Vat (length-preserving property) and 2) ~(a) n~(b)=~ Va, b~ (disjoint-images \nproperty). With this definition of a strict interpretation Theorem III.I holds. We would like to quote \nthe following Theorem from [3]: Theorem Ill.3: Let @: G l\u00f7G 2 be a length-preser- ving functor, where \nG l and G 2 are context-free grammars and G 2 is unambiguous. Suppose there is an algorithm which will \nconstruct a parse for w~L(G 2) and reject w~L(G 2) in less than f(lwl) steps. Then there is a constant \nc and an algorithm which will accept w~L(Gl) and reject w~L(Gl) in less than cf(lwl) steps. An obvious \nconsequence, as stated in [3], is: Corollary: Let G F be an unambiguous form grammar of a grammar form \nF. Then strings in L(GI) for a strict interpretation G I of G F can be parsed in essentially the same \ntime (up to a multiplicative constant c) as strings in L(GF). One of the reasons for mentioning the above \nfacts is that strict interpretations are more re- stricted than one might suspect. And as we will now \nshow, it is the disjoint images property, and limits the applicability of Theorem Ill.3 and its Corollary. \nMost of the proofs in the remainder are only sketched, and the interested reader is refer-red to [14]. \nTheorem Ill.4: For every form grammar G F of a grammar form F there exists a grammar form F such that \nL(GF) is equal to the class of all lan-guages that can be generated by grammars given by length-preserving \ninterpretations of F. If G F is unambiguous then G~ can be made unambiguous. In order to show that the \ncontext-free langu- ages can be generated by grammars given by length- preserving interpretations of \nan unambiguous gram- mar form, we state the following theorem: Theorem Ill.5: There is an unambiguous \nform grammar G F of a grammar form F such that L(G F) is equal to the class of context-free languages. \nThe proof of Theorem Ill.5 uses the following facts: l) There is an unambiguous grammar G which gene- \nrates the Dyck-language over two letters [6]. 2) L(G) is infinite. 3) L(G) is closed under homomorphism, \ninverse homomorphism, and intersection with regular sets. 4) Every context-free language L can be expressed \nas L=hl(h21(D) n R) with h I and h 2 being homomorphisms, R a regular set, and D= L(G). Combining Theorems \nIll.4 and Ill.5 we obtain the following corollary: Corollary: There is an unambiguous form grammar G \nF such that the grammars given by length-preserving interpretations of G F generate exactly the con- \ntext-free languages. Hence, the length-preserving property is not very stringent and it does not limit \nthe applicabil- ity of Theorem 111.3. However, the case is quite different with respect to the disjoint-images \npro-perty which limits the applicability of Theorem 111.3. But this also has an advantage in that strict \ninterpretations are more \"structure preserving\" than unrestricted interpretations. Notation: Henceforth \nwe will use the following no-tation: GS(GF)= {GIG is a strict interpretation of GF}, and LS(g g)= {L(G) \nIGEGS(GF)}. Theorem 111.6: If G F is an unambiguous form gram- mar with L(GF) infinite then there are \nstrict interpretations of G F that are ambiguous. However, the existence of a length-preserving functor \n\u00a2: G I\u00f7G F for a strict interpretation G I of an unambiguous grammar G F tells us that, al-though there \nmight be many distinct leftmost deri-vations for a string wEL(GI), that the corre-sponding derivation \ntrees look the same. They might differ only in their labels for the non-terminal nodes. Thus one suspects \nthat strict in-terpretations of unambiguous form grammars generate only unambiguous languages. This is \nproven by the following theorem: Theorem 111.7: Let G F be an unambiguous form grammar and let G be an \narbitrary strict inter- pretation of G F. Then there exists (effectively) an unambiguous grammar G' such \nthat L(G) = L(G'). The proof of Theorem 111.7, which is based on Definitions 111.8 and III.I0, Lemma \n111.9, and Algorithm D, follows from Lemma III.II and Lemma 111.12. Definition 111.8: Let G= (V,%,P,S) \nbe a context- free grammar. Let Gi= (Vi,Zi,Pi,Si) be a strict interpretation grammar of G given by ~. \nA merge set for G I is MEu(B) such that BEV-~, and such that (VB' ~M)(VB\"EVi-Zl) [(B' ~M and B\"~M) iff \n(3~VI*) [B'\u00f7a~P I and B\"\u00f7~EPi]]. Lemma 111.9: Let G = (V,Z,P,S) be a context-free grammar. Let G I = \n(Vi,~I,PI,SI) be a strict inter- pretation given by ~. If G is unambiguous but G I is ambiguous, then \nthere exists a merge set for G I Definition III.I0: Let G~GS(GF ) under ~. Then M(G) = {MIM is a merge \nset for G under ~}. Algorithm D: Let G F= (VF,SF,PF,SF) be an unambi- guous context-free grammar. Let \nG= (V,S,P,S)cGS(GF ) via the mapping ~. Output: A CFG G' such that L(G') =L(G) and G' is unambiguous. \nProcedure: i) Construct the merge sets M(G). 2) If G is ambiguous then, by Lemma 111.9, IM(G)J _>I. \nThus if JM(G) I =0, let G' =G and halt. 3) Let B={BxlX_CM and M~M(G)} be a set of new symbols mutually \ndisjoint from V. Let M={BIB~M and M~M(G)}. Let V'=V-MuB if S~M or=V-MuBu{S} if S~M. 4) Let Pi:P-((MxV*)u(VxV*MV*)). \n5) Let P2 {Bx 0 . . . . aml  = aoBx1 a 1 Bx2a 2 Bo\u00f7aoBlC~lB2a 2 ... a m~p, (Vi)o_< i <m(Bi ~M and a \ni ~ (V-M)* and B i ~X i), and X O= {Bo}}. 6) Let P3 = {Bx\u00f7~I3MEM(G) such that X_~M and X= {BoIB{Bo}\u00f7aEP2}}. \n 7) Let P4 = {A\u00f7moBXlmlBx2m2 ... mml A\u00f7moBlmlB2m2 ... a meP, (Vi)o~i~m~i ~ (V-M)*, (Vi)l ~i~m(Bi e ~ \nand B i eX i), and A~B}. 8) Let P5 = {S\u00f7aoBXlal ... BXmaml S\u00f7~oBial ... Bmam E P, (Vi)o ~ i ~ m~i E (V-M)*, \n(Vi)l ~i~m(Bi ~Mi and B i ~Xi)}. 9) Let P':PI uP3uP4(uP5 if SE~). Let G'= (V',Z,P',S) andhalt. In the \nalgorithm above, nonterminal symbols of G that may be a source of ambiguity, i.e. symbols in M, are eliminated. \nThey are replaced by new nontermi- nal symbols based on subsets of the merge sets. B x generates (in \nP') exactly that which the nonterminal symbols in X generate in common (in P). This leads to the following \nlemma: Lemma III.II: The grammar produced as output by Algorithm D is unambiguous. Lemma 111.12: Let \nG be the input to Algorithm D and G' be the output of the algorithm. Then L(G) =L(G'). Corollary (to \nTheorem 111.7): If G F is an unambi-guous form grammar then LS(GF ) contains only un-ambiguous languages. \nThere are context-free languages ;that are in-herently ambiguous. Hence we obtain: Theorem 111.13: There \nis no unambiguous form gram- mar G F such that the grammars given by strict interpretations of G F generate \nexactly the con- text-free languages. The technique used in the proof of Theorem 111.7 can also be used \nto prove the following theorem. Theorem 111.14: If G F is an LR(k) form grammar then LS(GF ) contains \nonly LR(k) languages. However, a similar statement for the LL(k) case is not true. Not only are there \nunambiguous LL(k) grammars whose strict interpretation grammars can be unambiguous and non-LL(k), there \nare unambiguous LL(k) grammars whose strict interpretations can yield grammars which generate non-LL \nlanguages. Summarizing the first part of this section we can state that strict interpretations substantially \nlimit the applicability of Theorem 111.3. However, strict interpretations have an advantage over unre-stricted \ninterpretations since they are more struc- ture preserving. We will conclude this section with a few \ndeci- dability results. Theorem 111.15: It is decidable whether a strict interpretation of an unambiguous \ngrammar form is unambiguous. The proof of this last theorem is based on the observation that for a strict \ninterpretation G in reduced form one can establish a number k such that G is ambiguous if and only if \nthere exist sentential forms uAv and uA'v with luAvl = luA'vl ~k such that A and A' are members of the \nsame merge set. Theorem 111.15 can be used to prove the follow-ing decidability results for \"compatible\" \nstrict interpretations of an unambiguous grammar form. Definition 111.16: Two strict interpretations \nI 1 = (ui,Vi,%i,Pi,SI) and 12= (u2,V2,Z2,P2,S2) of a given grammar form are compatible if (Pl(a) uP2(a)) \nn (P2(b) u~2(b)) = for any two elements a, b in E. Theorem 111.17: It is decidable for any two com-patible \nstrict interpretations G 1 and G 2 of an unambiguous form grammar whether I) L(G I) ~ L(G2), 2) L(Gi)= \nL(G2), 3) L(G I) nL(G2) is empty, finite or infinite. IV, COMPARISON OF STRICT INTERPRETATIONS In section \nIll we have seen that there exists an unambiguous form grammar G F such that L(G F) is equal to the family \nof context-free languages (Thoerem Ill.3), but that there is no unambiguous form grammar G F such that \nLS(GF) equals the class of context-free languages (Theorem Ill.13). So we want to investigate the question \nof whether grammar forms with strict interpretation are as \"powerful\" as grammar forms with unrestricted \nin- terpretations if we do not consider the ambiguity or unambiguity of the form grammar. First we ob- \ntain: Theorem IV.l: There are grammar forms F with form grammar G F such that there does not exist any \ngrammar form Fwith form grammar GF such that GS(G~) = G(GF). So with respect to the interpretation gram- \nmars strict interpretations are not as powerful as unrestricted interpretations. The situation is different \nthough, if one looks at the classes of languages which can be generated by the interpre- tation grammars. \n Theorem IV.2: For every form grammar G F there exists a form grammar G~ such that LS(G~)=L(GF). V, CONCLUSION \nWe have seen that grammar forms with unrestric- ted interpretations do not provide a characteriza- tion \nof many grammar types that are used in parsing. Strict interpretations of unambiguous grammar forms are \nstructure preserving. They preserve un- ambiguity and LR(k)-ness of the generated languages. They also \nprovide us with some interesting decid- ability results. There is a relation between the parsing time \nfor the interpretation grammars and the parsing time for the underlying unambiguous form grammar. Several \nquestions arise naturally from these observations: l Is there a \"universal\" parser for all LL(k) languages? \n2) Is there a \"universal\" parser for all LR(k) languages? 3) If the answer to questions l) and 2) is \n\"no\", are there \"universal\" parsers for \"reasonably\" large subclasses of the LR(k) languages, LL(k) languages, \nand other classes of languages? 4) Is there a master grammar which we know to be amenable to a fast parse \ntechnique but which generates a much larger class of grammars which have not been suspected be- fore \nof having a fast parse technique? The results given in this paper constitute an initial step in this \ndirection and we encourage further research along these lines. ACKNOWLEDGEMENT: The authors are grateful \nto S. Ginsburg for stimulating their interest in grammar forms. REFERENCES [l] Aho, Alfred V. and Jeffrey \nD. Ullman. The Theory of Parsing, Translation, and Compiling, Vol. I and II, Prentice Hall, Englewood \nCliffs, lO New Jersey, 1972. [2] Bertsch, Eberhard. \"An Observation on Relative Parsing Time,\" JACM, \nVoI. 22, No. 4, pp. 493- 498, 1975. [3] Bertsch, E. \"Mappings between Context-Free Derivation Systems,\" \nLect. Notes in Comp. Sci., Vol. 2, pp. 278-283, 1973. [4] Cremers, A. B. and S. Ginsburg. \"Context-Free \nGrammar Forms,\" JCSS, Vol. II, pp. 86-117, 1975. [5] Cremers, A. B., S. Ginsburg, and E. H. Spanier. \n\"The Structure of Context-Free Grammatical Families,\" submitted for publication. [6] Ginsburg, S. The \nMathematical Theory of Con- text-Free Languages, McGraw-Hill, New York, 1966. [7] Ginsburg, S. and S. \nA. Greibach. \"Determin- istic Context Free Languages,\" Inform. and Control, Vol. 9, No. 6, pp. 620-648, \n1966. [8] Ginsburg, S. and M. Harrison. \"Bracketed Context-Free Languages,\" JCSS, Vol. I, pp. 1- 23, \n1967. [9] Greibach, S. \"The Hardest Context-Free Lan- guage,\" SIAM J. Computin 9, Vol. 2, pp. 304- 310, \n1973. [I0] Harrison, M. A. and I. M. Havel. \"Strict Deterministic Grammars,\" JCSS, Vol. 7, 1973. [II] \nHopcroft, John E. and Jeffrey D. Ullman. Formal Languages and Their Relation to Auto-mata, Addison-Wesley, \nReading, Mass., 1969. []2] Hotz, G. \"Eindeutigkeit und Mehrdeutigkeit Formaler Sprachen,\" Elektr. Inform. \nund Kybernetik, 1966. []3] Hotz, G. \"Homomorphie und Aequivalenz For- maler Sprachen,\" JSNM, Vol. 6, \nBirkh~user Verlag, Basel, 1967. []4] Leong, B. L. and D. Wotschke. \"Productions, Derivations, and Parsing,\" \nTech. Rep., in preparation. [15] Knuth, D. \"A Characterization of Parenthe-sis Grammars,\" Inform. and \nControl, Vol. II, pp. 269-289, 1967. [16] McNaughton, R. \"Parenthesis Grammars,\" JACM, Vol. 14, pp. 490-500, \n1967. [17] Mitchell, B. Theory of Categories, Academic Press, New York, 1965. [18] Paull, M. and M. Unger. \n\"Structural Equiva-lence of Context-Free Grammars,\" JCSS, Vol. 2, pp. 427-463, 1965. [19] Salomaa, A. \nFormal Languages, Academic Press, New York and London, 1973. [20] Schnorr, C. P. \"Transformational Classes \nof Grammars,\" Inform. and Control, Vol. 14, pp. 252-277, 1969.  \n\t\t\t", "proc_id": "800168", "abstract": "<p>The concept of grammar forms [4,5] provides evidence that there seems to be no way to base the definitions of many grammar types used in parsing and compiling solely on the concept of productions.</p> <p>Strict interpretations, as introduced in [3,5], of unambiguous or LR(k) grammar forms generate unambiguous or LR(k) languages, respectively. This is not true in the LL(k) case.</p> <p>It is decidable whether a strict interpretation of an unambiguous grammar form is unambiguous. For any two compatible strict interpretations G<subscrpt>1</subscrpt> and G<subscrpt>2</subscrpt> of an unambiguous grammar form it is decidable whether L(G<subscrpt>1</subscrpt>)@@@@L(G<subscrpt>2</subscrpt>), L(G<subscrpt>1</subscrpt>)@@@@L(G<subscrpt>2</subscrpt>)&equil;&thgr;, finite, or infinite.</p> <p>For every grammar form F<subscrpt>1</subscrpt> there exists a grammar form F<subscrpt>2</subscrpt> such that the grammatical family of F<subscrpt>1</subscrpt> under unrestricted interpretations is equal to the grammatical family of F<subscrpt>2</subscrpt> under strict interpretations.</p>", "authors": [{"name": "Benton L. Leong", "author_profile_id": "81466648789", "affiliation": "", "person_id": "P29088", "email_address": "", "orcid_id": ""}, {"name": "Detlef Wotschke", "author_profile_id": "81100179726", "affiliation": "", "person_id": "PP39031224", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/800168.811535", "year": "1976", "article_id": "811535", "conference": "POPL", "title": "The influence of productions on derivations and parsing (Extended Abstract)", "url": "http://dl.acm.org/citation.cfm?id=811535"}