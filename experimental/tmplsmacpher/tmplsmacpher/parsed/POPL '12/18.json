{"article_publication_date": "01-25-2012", "fulltext": "\n Programming Languages for Programmable Networks Jennifer Rexford Princeton University jrex@cs.princeton.edu \nAbstract Today s computer networks perform a bewildering array of tasks, from routing and access control, \nto traf.c monitoring and load balancing. To support wireless users accessing services hosted in the cloud, \nenterprise and data-center networks are under increas\u00ading pressure to support client mobility, virtual-machine \nmigration, resource isolation between cloud services, and energy-ef.cient op\u00aderation. Yet, network administrators \nmust con.gure the network through closed and proprietary interfaces to heterogeneous devices, such as \nrouters, switches, .rewalls, load balancers, network address translators, and intrusion detection systems. \nNot surprisingly, con\u00ad.guring these complex networks is expensive and error-prone, and innovation in \nnetwork management proceeds at a snail s pace. During the past several years, the networking industry \nand re\u00adsearch community have pushed for greater openness in network\u00ading software, and a clearer separation \nbetween networking de\u00advices and the software that controls them. This broad trend is known as Software \nDe.ned Networking (SDN). A hallmark of SDN is having an open interface for controller software running \non a commodity computer to install packet-processing rules in the underlying switches. In particular, \nthe OpenFlow protocol (see www.openflow.org) has signi.cant momentum. Many commer\u00adcial switches support \nOpenFlow, and a number of campus, data\u00adcenter, and backbone networks have deployed the new technology. \n With the emergence of open interfaces to network devices, the time is ripe to rethink the design of \nnetwork software, to put net\u00adworking on a stronger foundation and foster innovation in net\u00adworked services. \nThe programming languages community can play a vital role in this transformation, by creating languages, \ncompilers, run-time systems, and testing and veri.cation techniques that raise the level of abstraction \nfor programming the network. In this talk, we give an overview of Software De.ned Networking, and survey \nthe early programming-languages research in this area. We also outline exciting opportunities for interdisciplinary \nresearch at the intersection of programming languages and computer networks. Categories and Subject Descriptors \nC.2.1 [Computer-Communication Networks]: Network Architecture and Design; D.3.0 [Program\u00adming Languages]: \nGeneral General Terms Design, Languages Keywords Software De.ned Networking, OpenFlow, network protocols \nCopyright is held by the author/owner(s). POPL 12, January 25 27, 2012, Philadelphia, PA, USA. ACM 978-1-4503-1083-3/12/01. \n  \n\t\t\t", "proc_id": "2103656", "abstract": "<p>Today's computer networks perform a bewildering array of tasks, from routing and access control, to traffic monitoring and load balancing. To support wireless users accessing services hosted in the cloud, enterprise and data-center networks are under increasing pressure to support client mobility, virtual-machine migration, resource isolation between cloud services, and energy-efficient operation. Yet, network administrators must configure the network through closed and proprietary interfaces to heterogeneous devices, such as routers, switches, firewalls, load balancers, network address translators, and intrusion detection systems. Not surprisingly, configuring these complex networks is expensive and error-prone, and innovation in network management proceeds at a snail's pace.</p> <p>During the past several years, the networking industry and research community have pushed for greater openness in networking software, and a clearer separation between networking devices and the software that controls them. This broad trend is known as Software Defined Networking (SDN). A hallmark of SDN is having an open interface for controller software running on a commodity computer to install packet-processing rules in the underlying switches. In particular, the OpenFlow protocol (see www.openflow.org) has significant momentum. Many commercial switches support OpenFlow, and a number of campus, data-center, and backbone networks have deployed the new technology.</p> <p>With the emergence of open interfaces to network devices, the time is ripe to rethink the design of network software, to put networking on a stronger foundation and foster innovation in networked services. The programming languages community can play a vital role in this transformation, by creating languages, compilers, run-time systems, and testing and verification techniques that raise the level of abstraction for programming the network. In this talk, we give an overview of Software Defined Networking, and survey the early programming-languages research in this area. We also outline exciting opportunities for interdisciplinary research at the intersection of programming languages and computer networks.</p>", "authors": [{"name": "Jennifer Rexford", "author_profile_id": "81100508545", "affiliation": "Princeton University, Princeton, NJ, USA", "person_id": "P2991380", "email_address": "jrex@cs.princeton.edu", "orcid_id": ""}], "doi_number": "10.1145/2103656.2103683", "year": "2012", "article_id": "2103683", "conference": "POPL", "title": "Programming languages for programmable networks", "url": "http://dl.acm.org/citation.cfm?id=2103683"}