{"article_publication_date": "01-01-1986", "fulltext": "\n\t\t\t", "proc_id": "512644", "abstract": "A function has a &lt;i&gt;dependent type&lt;/i&gt; when the type of its result depends upon the value of its argument. Dependent types originated in the type theory of intuitionistic mathematics and have reappeared independently in programming languages such as CLU, Pebble, and Russell. Some of these languages make the assumption that there exists a &lt;i&gt;type-of-all-types&lt;/i&gt; which is its own type as well as the type of all other types. Girard proved that this approach is inconsistent from the perspective of intuitionistic logic. We apply Girard's techniques to establish that the type-of-all-types assumption creates serious pathologies from a programming perspective: a system using this assumption is inherently not normalizing, term equality is undecidable, and the resulting theory fails to be a conservative extension of the theory of the underlying base types. The failure of conservative extension means that classical reasoning about programs in such a system is not sound.", "authors": [{"name": "Albert R. Meyer", "author_profile_id": "81100572937", "affiliation": "", "person_id": "PP15036546", "email_address": "", "orcid_id": ""}, {"name": "Mark B. Reinhold", "author_profile_id": "81100625218", "affiliation": "", "person_id": "P190937", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512644.512671", "year": "1986", "article_id": "512671", "conference": "POPL", "title": "Type is not a type", "url": "http://dl.acm.org/citation.cfm?id=512671"}