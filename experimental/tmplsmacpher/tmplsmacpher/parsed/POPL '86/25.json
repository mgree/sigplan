{"article_publication_date": "01-01-1986", "fulltext": "\n\t\t\t", "proc_id": "512644", "abstract": "Writing any large program poses difficult problems of organization. In many modern programming languages these problems are addressed by special linguistic constructs, variously known as modules, packages, or clusters, which provide for partitioning programs into manageable components and for securely combining these components to form complete programs. Some general purpose components are able to take on a life of their own, being separately compiled and stored in libraries of generic, reusable program units. Usually modularity constructs also support some form of information hiding, such as \"abstract data types.\" \"Programming in the large\" is concerned with using such constructs to impose structure on large programs, in contrast to \"programming in the small\", which deals with the detailed implementation of algorithms in terms of data structures and control constructs. Our goal here is to examine some of the proposed linguistic notions with respect to how they meet the pragmatic requirements of programming in the large.", "authors": [{"name": "David B. MacQueen", "author_profile_id": "81100334808", "affiliation": "", "person_id": "P62710", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512644.512670", "year": "1986", "article_id": "512670", "conference": "POPL", "title": "Using dependent types to express modular structure", "url": "http://dl.acm.org/citation.cfm?id=512670"}