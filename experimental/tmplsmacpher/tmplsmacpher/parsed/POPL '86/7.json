{"article_publication_date": "01-01-1986", "fulltext": "\n\t\t\t", "proc_id": "512644", "abstract": "Computations can generally be separated into stages, which are distinguished from one another by either frequency of execution or availability of data. &lt;i&gt;Precomputation&lt;/i&gt; and &lt;i&gt;frequency reduction&lt;/i&gt; involve moving computation among a collection of stages so that work is done as early as possible (so less time is required in later steps) and as infrequently as possible (to reduce overall time).We present, by means of examples, several general transformation techniques for carrying out precomputation transformations. We illustrate the techniques by deriving fragments of simple compilers from interpreters, including an example of Prolog compilation, but the techniques are applicable in a broad range of circumstances. Our aim is to demonstrate how perspicuous accounts of precomputation and frequency reduction can be given for a wide range of applications using a small number of relatively straightforward techniques.Related work in partial evaluation, semantically directed compilation, and compiler optimization is discussed.", "authors": [{"name": "Ulrik J&#248;rring", "author_profile_id": "81100268422", "affiliation": "", "person_id": "P348331", "email_address": "", "orcid_id": ""}, {"name": "William L. Scherlis", "author_profile_id": "81100605830", "affiliation": "", "person_id": "P299938", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512644.512652", "year": "1986", "article_id": "512652", "conference": "POPL", "title": "Compilers and staging transformations", "url": "http://dl.acm.org/citation.cfm?id=512652"}