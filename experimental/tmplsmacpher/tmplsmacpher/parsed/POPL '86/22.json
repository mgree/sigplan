{"article_publication_date": "01-01-1986", "fulltext": "\n\t\t\t", "proc_id": "512644", "abstract": "One of the most important pragmatic advantages of functional languages is that concurrency in a program is &lt;i&gt;implicit&lt;/i&gt; -- there is no need for special constructs to express parallelism as is required in most conventional languages. Furthermore, it is fairly easy for compilers to automatically determine the concurrency as a step toward decomposing a program for execution on a suitable parallel architecture. Yet it is often the case that one knows precisely the &lt;i&gt;optimal decomposition&lt;/i&gt; for execution on a particular machine, and one can never expect a compiler to determine such optimal mappings in all cases. This paper is concerned with ways to allow the programmer to &lt;i&gt;explicitly&lt;/i&gt; express this mapping of program to machine, by using annotations that, given a few minor constraints, cannot alter the functional semantics of the program. We show through several detailed examples the expressiveness and conciseness of the resulting \"para-functional\" programming methodology, using an experimental language called &lt;i&gt;ParAlfl&lt;/i&gt; based on our ideas. We also give a formal denotational description of the mapping semantics using a notion of &lt;i&gt;execution trees.&lt;/i&gt;This research was supported in part by NSF Grants DCR-8403304 and DCR-8451415, and a Faculty Development Award from IBM.", "authors": [{"name": "Paul Hudak", "author_profile_id": "81100539650", "affiliation": "", "person_id": "PP40028396", "email_address": "", "orcid_id": ""}, {"name": "Lauren Smith", "author_profile_id": "81100074859", "affiliation": "", "person_id": "PP14036361", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512644.512667", "year": "1986", "article_id": "512667", "conference": "POPL", "title": "Para-functional programming: a paradigm for programming multiprocessor systems", "url": "http://dl.acm.org/citation.cfm?id=512667"}