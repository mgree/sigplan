{"article_publication_date": "01-01-1986", "fulltext": "\n\t\t\t", "proc_id": "512644", "abstract": "A crucial aspect of a program intended for general use is its behavior in the presence of erroneous inputs. For instance, much attention has been devoted to the problems of error detection, reporting, and correction in compilers&lt;sup&gt;1,2&lt;/sup&gt;. As programming languages and systems based in one way or another on unification&lt;sup&gt;3&lt;/sup&gt; become more common, it becomes increasingly important to develop a theory of error detection and correction for unification-based systems. We report here on a language-based editor for a variant of ML&lt;sup&gt;4&lt;/sup&gt; that uses a novel approach to the isolation of likely causes of user errors. As the user edits and manipulates his or her program, unification is incrementally applied to determine its type correctness. If a type inconsistency arises, a maximum flow technique is applied to the set of type equations to determine the most likely source of error. In this way a determination can be made as to the relative strengths with which the set of type equations asserts multiple contradictory hypotheses. In a language such as ML, the type of an object is inferred from patterns of usage. Often it is the case that most uses of a given object are mutually consistent, whereas one or a very small number of uses conflict with the general usage pattern. In MOE (ML-Oriented Editor), if it is possible to discern that such a situation has arisen, likely errors are highlighted at high intensity and all other program components that contributed to the inferred type of the object are highlighted at a lower intensity. In providing error information to the user, two principles are observed:(1) Error indications should be complete but parsimonious; the user should see highlighted on the screen everything that contributed directly to an error, but nothing. more,(2) The user's attention should be drawn to what appear to be the anomalies that are responsible for errors.Language-based editors permit a new level of quality in the process of helping users when inputs are, for one reason or another, invalid. Unification-based type inference in language-based editors appears to have been first considered by Meertens 5. Snelting and Bahlke have more recently also explored this approach.", "authors": [{"name": "Gregory F. Johnson", "author_profile_id": "81100449078", "affiliation": "", "person_id": "PP39043252", "email_address": "", "orcid_id": ""}, {"name": "Janet A. Walz", "author_profile_id": "81100321085", "affiliation": "", "person_id": "P134881", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512644.512649", "year": "1986", "article_id": "512649", "conference": "POPL", "title": "A maximum-flow approach to anomaly isolation in unification-based incremental type inference", "url": "http://dl.acm.org/citation.cfm?id=512649"}