{"article_publication_date": "09-19-2011", "fulltext": "\n Invited Talk Programming Assurance Cases in Agda Makoto Takeyama Information Technology Research Institute, \nNational Institute of Advanced Industrial Science and Technology (AIST) 3-11-46 Nakoji, Amagasaki, Hyogo, \n661-0974 Japan makoto.takeyama@aist.go.jp Abstract Agda is a modern functional programming language \nequipped with an interactive proof assistant as its developing environment. Its features include dependent \ntypes, type universe, inductive and coinductive families of types, pattern matching, records, and nested \nparameterized modules. Based on the propositions as types, proofs as programs correspondence in Martin-L\u00f6f \ns Type Theory, Agda lets users to construct, verify, and execute a smooth mixture of programs and proofs. \nUsing Agda is similar to using an editor in a modern IDE. Users have more direct control over how programs \n/ proofs are written than in automation-oriented systems using command-scripts for proof construction. \nAgda thus encourages users to express their ideas with more sophisticated dependently typed programming \nand less logical proofs. Programming techniques for readability and maintainability now translate to \ntechniques for writing verified documents for human communication. Agda has been developed at Chalmers \nUniversity of Technology by Ulf Norell and others. A growing international community of developers and \nusers applies it in research, education, and industry. At AIST in Japan, we aim to introduce its merits \nto construction, verification, maintenance, and run-time evaluation of assurance cases , which are documented \nbodies of systems assurance arguments used as the hub for assurance- and risk-communication among stakeholders. \nThe talk gives an overview of Agda and presents our current effort on programming assurance cases in \nAgda. Categories &#38; Subject Descriptors: D.1.1 [Programming Techniques]: Applicative (functional) \nprogramming; F.3.1 [Logics and Meanings of Programs]: Specifying and Verifying and Reasoning about Programs---Mechanical \nverification, Logics of programs, Specification techniques; D.2.6 [Software Engineering]: Programming \nEnvironments---Interactive environment; D.2.9 [Software Engineering]: Management---Software quality assurance; \nI.7.2 [Document and Text Processing]: Document Preparation---Languages and system; D.2.4 [Software Engineering]: \nSoftware/Program Verification---Formal methods General Terms: Languages, Verification, Documentation, \nManagement Keywords: Dependent types, Type theory, Agda, Assurance cases Bio The speaker is a research \nscientist at National Institute of Advanced Industrial Science and Technology (AIST) in Japan. He received \nhis Ph.D. in Computer Science from the University of Edinburgh. He previously worked at Queen s University \nin Canada and Chalmers University of Technology in Sweden. His primary technical interest is in practical \napplications of formal methods, including Type Theory, combination of interactive and automatic proving, \nand standardization. He has also worked in the area of categorical semantics of programming languages. \nCopyright is held by the author/owner(s). ICFP 11, September 19 21, 2011, Tokyo, Japan. ACM 978-1-4503-0865-6/11/09. \n  \n\t\t\t", "proc_id": "2034773", "abstract": "<p>Agda is a modern functional programming language equipped with an interactive proof assistant as its developing environment. Its features include dependent types, type universe, inductive and coinductive families of types, pattern matching, records, and nested parameterized modules. Based on the \"propositions as types, proofs as programs\" correspondence in Martin-L&#246;f's Type Theory, Agda lets users to construct, verify, and execute a smooth mixture of programs and proofs.</p> <p>Using Agda is similar to using an editor in a modern IDE. Users have more direct control over how programs / proofs are written than in automation-oriented systems using command-scripts for proof construction. Agda thus encourages users to express their ideas with more sophisticated dependently typed programming and less logical proofs. Programming techniques for readability and maintainability now translate to techniques for writing verified documents for human communication.</p> <p>Agda has been developed at Chalmers University of Technology by Ulf Norell and others. A growing international community of developers and users applies it in research, education, and industry. At AIST in Japan, we aim to introduce its merits to construction, verification, maintenance, and run-time evaluation of \"assurance cases\", which are documented bodies of systems assurance arguments used as the hub for assurance- and risk-communication among stakeholders.</p> <p>The talk gives an overview of Agda and presents our current effort on programming assurance cases in Agda.</p>", "authors": [{"name": "Makoto Takeyama", "author_profile_id": "81100352174", "affiliation": "National Institute of Advanced Industrial Science and Technology, Amagasaki, Hyogo, Japan", "person_id": "P2801389", "email_address": "makoto.takeyama@aist.go.jp", "orcid_id": ""}], "doi_number": "10.1145/2034773.2034794", "year": "2011", "article_id": "2034794", "conference": "ICFP", "title": "Programming assurance cases in Agda", "url": "http://dl.acm.org/citation.cfm?id=2034794"}