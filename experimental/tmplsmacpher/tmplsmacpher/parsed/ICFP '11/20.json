{"article_publication_date": "09-19-2011", "fulltext": "\n\t\t\t", "proc_id": "2034773", "abstract": "<p>Creating correct hardware is hard. Though there is much talk of using formal and semi-formal methods to develop designs and implementations, in practice most implementations are written without the support of any formal or semi-formal methodology. Having such a methodology brings many benefits, including improved likelihood of a correct implementation, lowering the cost of design exploration and lowering the cost of certification. In this paper, we introduce a semi formal methodology for connecting executable specifications written in the functional language Haskell to efficient VHDL implementations. The connection is performed by manual edits, using semi-formal equational reasoning facilitated by the worker/wrapper transformation, and directed using commutable functors. We explain our methodology on a full-scale example, an efficient Low-Density Parity Check forward error correcting code, which has been implemented on a Virtex-5 FPGA.</p>", "authors": [{"name": "Andy Gill", "author_profile_id": "81318489268", "affiliation": "University of Kansas, Lawrence, KS, USA", "person_id": "P2801407", "email_address": "andygill@ku.edu", "orcid_id": ""}, {"name": "Andrew Farmer", "author_profile_id": "81485646555", "affiliation": "University of Kansas, Lawrence, KS, USA", "person_id": "P2801408", "email_address": "afarmer@ittc.ku.edu", "orcid_id": ""}], "doi_number": "10.1145/2034773.2034804", "year": "2011", "article_id": "2034804", "conference": "ICFP", "title": "Deriving an efficient FPGA implementation of a low density parity check forward error corrector", "url": "http://dl.acm.org/citation.cfm?id=2034804"}