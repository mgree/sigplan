{"article_publication_date": "09-19-2011", "fulltext": "\n Using Camlp4 for Presenting Dynamic Mathematics onthe Web: DynaMoW, an OCaml Language Extensionfor the \nRun-Time Generation of Mathematical Contents and their Presentation on the Web An experience report * \nFr\u00e9d\u00e9ric Chyzak INRIA (Rocquencourt, France) frederic.chyzak@inria.fr Abstract We report on the design \nand implementation of a program\u00adming tool, DynaMoW, to control interactive and incremen\u00adtal mathematical \ncalculations to be presented on the web.This tool is implemented as a language extension of OCamlusing \nCamlp4. Fragments of mathematical code written fora computer-algebra system as well as fragments of math\u00adematical \nweb documents are embedded directly and natu\u00adrally inside OCaml code. A DynaMoW-based application ismade \nof independent web services, whose parameter typesare checked by the OCaml extension. The approach is \nil\u00adlustrated by two implementations of online mathematicalencyclopedias on top of DynaMoW. Categories \nand Subject Descriptors D.1.1 [PROGRAM-MING TECHNIQUES]: Applicative (Functional) Program\u00adming; H.3.5 \n[INFORMATION STORAGE AND RETRIEV-AL]: On-line Information Services; I.1.3 [SYMBOLIC AND ALGEBRAIC MANIPULATION]: \nLanguages and Systems General Terms Languages, Web Applications, ComputerAlgebra, Symbolic Computation \nKeywords mathematical encyclopedias, quotations, an\u00adtiquotations, metaprogramming, web services 1. Introduction \nThe communication of scienti.c knowledge is still commonlycarried out via written media. Such documents \nare essen\u00adtially .xed, even though they can now and then be broughtup to date through successive editions. \nIn contrast, the web * Fr\u00e9d\u00e9ric Chyzak was partially supported by the Microsoft Re\u00adsearch INRIA Joint \nCentre and most of the work was done when Alexis Darrasse was a postdoctoral fellow there. Permission \nto make digital or hard copies of all or part of this work forpersonal or classroom use is granted without \nfee provided that copiesare not made or distributed for pro.t or commercial advantage and that copies \nbear this notice and the full citation on the .rst page. Tocopy otherwise, to republish, to post on servers \nor to redistribute to lists, requires prior speci.c permission and/or a fee. ICFP 11, September 19 21, \n2011, Tokyo, Japan. Copyright c &#38;#169; 2011 ACM 978-1-4503-0865-6/11/09...$10.00 * Alexis Darrasse \nLIP6 (Paris, France) alexis.darrasse@lip6.fr has in recent times allowed a rapid and reactive di.usionof \ninformation, as well as an interactive access to electronic content. Encyclopedias and handbooks specialised \nin spe\u00adci.c .elds of mathematics are subject to this change fromwritten media to web content, as their \nreaders now prefer ob\u00adtaining the mathematical formulas they need online, ratherthan from books on their \nshelves. Two ambitious realisa\u00adtions of this kind are the On-Line Encyclopedia of IntegerSequences1, \nwhich is essentially a database with prede.nedmathematical queries, and the Digital Library of Mathe\u00admatical \nFunctions2, which is a human-written mathemati\u00adcal text, specially typeset for the web. Both are successorsof \nbest-seller books [1, 5]. But other encyclopedias make essential use of symboliccalculations performed \nby computer-algebra systems, thatis, calculations with terms representing exact algebraicquantities constructed \nover integers and symbols: polynomi\u00adals, matrices, di.erential equations, etc. Two such projectsare the \nEncyclopedia of Combinatorial Structures ( ECS ) and the Encyclopedia of Special Functions ( ESF )3. \nThere, the symbolic calculations were performed once and theirresults stored statically, before publishing \nthe web sites.But, in the context of symbolically-generated mathematicalknowledge, a natural desire is \nto perform symbolic compu\u00adtations at run-time. For instance, ECS identi.es a combina\u00adtorial structure \nselected by the user through its .rst terms.The reply by the system consists in a collection of data \nstat\u00adically attached to the sequence and merely retrieved froma database: name, combinatorial interpretation, \nreferences,etc. A natural wish of the user would be, via new requests,to obtain an arbitrary number of \nterms of the sequence, orto draw an instance of the structure randomly. This new,dynamic information \nwould be calculated at the time of therequest by a computer-algebra server. For its part, ESF pro\u00advides, \nfor a special function given by the user, a large numberof formulas satis.ed by the function, and several \nevaluationgraphics. In this output, a series expansion of a certain or\u00adder, for example, should be extendible \nat will, based on auser-supplied parameter. Similarly, graphics should be able 1 http://oeis.org/ 2 http://dlmf.nist.gov/ \n3 The .rst author has maintained some part of ECS and has seen the development of ESF by close colleagues \nat INRIA.  to be recomputed and replotted interactively with respectto di.erent ranges of the variable. \nPart of our project consists in developing these encyclo\u00adpedias towards more interactivity, and this \ntriggered the de\u00advelopment of the present work: a tool to help developingthe above-mentioned encyclopedias. \nMore than just assist\u00ading the typing and typesetting of mathematical formulas,a human-process that is \nprone to errors, what we neededwas a programming environment for the dynamic (run-time)generation of \n(mathematical) symbolic content and its pre\u00adsentation online. We view this as dynamic mathematics on \nthe web, whence the name of our library and system, Dy\u00adnaMoW4. Beside generated encyclopedias, we believe \nthistool can have applications to design environments whoseusers are no expert of computer algebra, but \nneed some sortof symbolic calculations following a number of .xed scenar\u00adios. This would be the case, \nfor instance, in education. 1.1 Desired Features On the application level. Our main need was interactiv\u00adity, \nrequiring the ability for run-time symbolic (re)computa\u00adtions. This is well exempli.ed by our successor \nof ESF, theDynamic Dictionary of Mathematical Functions (DDMF)5 [3]. For example, its end users need \nto change parameterslike: ranges of plots, orders of asymptotic expansions, pre\u00adcisions in numerical \nevaluations, etc. Likewise, interaction with ECS allows randomness in a page, to display randomgenerated \ncombinatorial structures. Thus, the system to bedeveloped as a programming environment had to be able \ntosimultaneously monitor calculations in a computer-algebrasystem and the generation of mathematical \nweb documents. System architecture: proper role of the computer\u00adalgebra system. ECS and ESF are based \non the general\u00adpurpose computer-algebra system Maple6 for their algebraicmanipulations, but new encyclopedias \ncould use other sys\u00adtems, including smaller ones specialised to various branchesof mathematics. Besides, \nspeci.c scienti.c communities withdi.erent habits could conceivably prefer another system,whence the \nneed for possibly several cooperating computer\u00adalgebra systems in a future application. For system tasks, \nboth ECS and ESF have been exces\u00adsively Maple-centric, with a minimal part of the software inPerl (the \nCGI). The choice of ESF to perform .le manip\u00adulations and generation of XML documents inside Maplehinders \nthe versatility towards various computer-algebrasystems. Generating Maple and HTML by Perl (ECS) orjust \nHTML by Maple (ESF) goes with heavy quotations ofstrings of the guest language in print formats, as computer\u00adalgebra \nsystem is typically not well suited for string manip\u00adulations. By not dissociating the application from \nthis gen\u00aderation (ECS), any modi.cation of the application requireschanging the quotations again. For \nboth reasons, implementing the system in a computer\u00adalgebra system was not an option, and the main languagenaturally \nhad to be a general-purpose language. In addition, as we planned developing applications forend users \nwith limited knowledge of computer-algebra, wecould not expect any computer-algebra system to be in\u00adstalled \non the user side. Thus, we con.ned ourselves to a client-server architecture, with no local computation. \n4 http://ddmf.msr-inria.inria.fr/DynaMoW/. Roughly 3800 lines of OCaml code in the current version, DynaMoW-1.0.0beta. \n5 http://ddmf.msr-inria.inria.fr/ 6 commercial product by Maplesoft, http://www.maplesoft.com/ Ease \nof programming and readability. The expectedclose interaction between symbolic calculations and the restof \nthe .ow control suggested that computer-algebra codecould not be kept separate from the rest of the source. \nInearlier projects, we had implemented as much as possible inthe computer-algebra system, with induced \nheaviness. Here,we wanted several natures of programming languages to bemixed naturally in the same source \n.les: a general-purposelanguage for the general control .ow of the application; oneor several computer-algebra \nlanguages; some string repre\u00adsentation of literal fragments of web documents. Indeed, theease to merge \nvariables and HTML in PHP7 has in.uenced our development. Also, values have to migrate naturally between \ncomputer\u00adalgebra systems, control, and presentation, and, for read\u00adability, we wanted to be able to write \na symbolic expressionwhere it is used in the computer-algebra source code, ratherthan postponed (if using \na notation of formats like with printf) or with an interruption in the syntax (if using anotation of \nconcatenated strings). This all spoke in favourof a mechanism of quotations and antiquotations. As to \nthe general-purpose language, the wish for the com\u00adfort of a reasonably typed language immediately precludeda \ncomputer-algebra system as the main language. (One pos\u00adsible exception could have been Sage, which, however, \nwasnot so much developed at the time we started.)  1.2 Related Work Ocsigen [2] is a complete system \nthat provides facilitiesfor programming the web in a type-safe environment. It ismeant as a replacement \nfor the pair Apache/PHP. It is writ\u00adten in OCaml and proposes an OCaml extension, Eliom, todevelop OCaml \napplications. Our system DynaMoW workson the same level as Eliom and could be extended into a module \nfor Ocsigen, so as to rely on it as a web server. The free open-source mathematics software named Sage8 \n. This project provides a uni.ed interface to the majorfree computer-algebra systems in a minimal variant \nof thePython interpreter. Over the years, Sage has also becomea computer-algebra system per se: besides \nlibraries exposedfrom other systems, new code is being developed nativelyfor Sage. It provides users \nwith a textual read-eval-printloop, and thus is a system potentially used by DynaMoW9 . Sage also exports \na web-presented symbolic shell, whichis thus mostly targeted at computer-algebra expert users.Sage embeds \nliterally dozens of computer-algebra systems(whether big, general-purpose ones or smaller, dedicatedones). \nThis makes it a large application (around half a gi\u00adgabyte to download for the current release, 2.4 GB \nonceuncompressed and installed). By contrast, DynaMoW is de\u00adsigned with web presentation as its main \napplication andis very lightweight. Another di.erence is that Sage imple\u00adments all mathematical notions \nas objects, and manipulatesthem mostly by interpreted Python libraries, with criticalsections written \nin the related but di.erent compiled lan\u00adguage Cython10, while DynaMoW is intended for compiledOCaml \napplications and does not require programmers touse any OCaml object facility. 7 http://www.php.net/. \nPHP: Hypertext Preprocessor. 8 http://www.sagemath.org/. Sage Mathematics Software. 9 Indeed, we have \na prototype plugin to glue to Sage. 10 http://www.cython.org/. Cython: C-Extensions for Python.   2. \nInterfacing a Computer-Algebra System 2.1 Types for Values in a Mathematical Shell Few developers use \ncomputer-algebra libraries, and allgeneral-purpose computer-algebra systems behave as sym\u00adbolic shells, \nthat is, users interact with them through atextual read-eval-print loop. This makes a notion of a sym\u00adbolic \nsession central to the application. The OCaml levelin DynaMoW thus makes successive interactions with \nthesymbolic session, and needs to refer to values that persist inthe symbolic memory inbetween. To allow \nfor several computer-algebra systems to beused in the same application, parametrised types have been \nused to represent symbolic values: the type for exter\u00adnal symbolic values is t DynaMoW.symb, with an \nabstract type parameter t exported by the module implementinga computer-algebra system. This parameter \ncan itself beparametrised, to express di.erent datatypes in the samecomputer-algebra system. Thus, a \nsymbolic value is typi\u00adcally of a type a MyCAS.t DynaMoW.symb: the .rst level of parametrisation protects \nagainst using a value from somecomputer-algebra system with another, while the secondlevel can be used \nto protect against mixing types within thesame system, provided the application properly de.nes anduses \nseveral types for a. 2.2 Computer-Algebra Programs as Quotations In order to embed computer-algebra \nprograms as directlyas possible inside OCaml source, the technique of choice isquotations, which are \navailable in OCaml by using Camlp4,in the notation <:id<...>>, where id stands for an identi.er of the \nkind of quotation, and ... is the quoted text. Webelieve that quotations were introduced into the (O)Camlfamily \nby Mauny and de Rauglaudre [4]. The main kind of symbolic quotation is of the form <:symb<...>>, and \nquotes a literal fragment of symboliccode. The interpretation of such a quotation is, after evalu\u00adation \nof the code by a computer-algebra system, a referenceto an externally-living symbolic value, represented \nby some type a DynaMoW.symb. The previous quotation is meaningful for values that canhave no OCaml counterpart, \nand thus have to remain ex\u00adternal. Beside this, we made the informal assumption thata computer-algebra \nsystem has types that correspond toOCaml int, bool, and string, and designed additional quotations of \nthe forms <:int<...>>, <:bool<...>>, and <:string<...>>, to denote computations whose results canbe returned \nas native OCaml datatypes. As typical program\u00adming in a computer-algebra system uses a lot of side e.ects,we \nadded a quotation <:unit<...>> that evaluates some code in the computer-algebra system, without actually \nre\u00adturning any value to OCaml. Symbolic calculations need to be parametrised by OCaml\u00adgenerated values. \nAntiquotations are the dual of quotationsto address this need, and we followed the Camlp4 notation:the \nsyntax $(tau:expr) appearing in a quoted fragmentstands for an escape, to be replaced before symbolic \nevalu\u00adation with a representation of the OCaml expression exprof type tau that can be parsed by the computer-algebrasystem. \nThus, let a = 3 in <:symb< f($(int:a)) >> is intended to evaluate f(3) in the guest language, typically \na function call. Each antiquotation is intended to take the role of asyntactic entity in the guest language. \nFor example, let a = 3 in <:symb< f$(int:a) >> expands as f (3) rather than f3. When Maple is the guestlanguage, \nthe former results in a function call, while thelatter would be a Maple name11. We do not go beyond thisin \nensuring the validity of the generated fragment, and inparticular we perform no parsing inside quotations. \nThe type of a <:symb<...>> quotation is a MyCAS.t DynaMoW.symb: if the application programmer wants to \nusedi.erent types of symbolic objects, it is his responsibilityto con.ne the use of <:symb<...>> quotations \nto an unsafesection of the code, and to export safe functions, with morelimited types for a, to be used \nin the rest of the application.  2.3 Computer-Algebra System Plugins Computer-algebra systems can be \nused with DynaMoWthrough dedicated plugins, which are modules that abideby a .xed interface. Currently \ndistributed plugins are a welltested Maple plugin, a simple OCaml plugin that serves asan example, as \nwell as experimental Mathematica and Sageplugins. User-implemented plugins can also be developed. A module \nis considered a plugin when it exports whatenables DynaMoW to view the computer-algebra system asa shell, \ninteracting with it through a read-eval-print loop:  a type cas_code to store the symbolic commands \nafter expansion of antiquotations inside <:symb<...>> quota\u00adtions;   evaluators that run a symbolic \ncommand and return ei\u00adther a reference to the symbolic result (evaluator_symbolic : cas_code -> a t DynaMoW.symb), \nor a LATEX repre\u00adsentation of the result (evaluator_latex: cas_code -> latex), or an OCaml value (evaluator_int: \ncas_code -> int for an integer value, and similarly for boolean,strings, etc.);  a serialisation function, \nused internally for argument passing between services;  a function to return a string containing a \nreference to a symbolic value living in the computer-algebra system, used internally to implement the \n$(symb:...) antiquo\u00adtation;  a start and a reset function, used automatically by Dy\u00adnaMoW to monitor \na separate session for each service, so that users do not need to run/quit sessions explicitly;  additional \npretty-printing and related functions.  To simplify the creation of plugins, the provided func\u00adtor \nDynaMoW_cas.Shell.Generic should be well adapted togenerate plugins for most computer-algebra systems \nwith acommand-line interface. This functor takes as input a briefmodule that contains a string for each \nsymbolic commandneeded by DynaMoW.  2.4 Interaction between Functional and Imperative Programming Styles \nDDMF is the main application developed using DynaMoW.It consists of a mixture of functional code in OCaml \nand of imperative code in Maple. As of version 1.6, it is made of: 5 kloc of OCaml with Maple quotations, \n 8 kloc of generated OCaml with Maple quotations,  11 For the sake of comparison, the quoted text in \nthe precedingexample really expands in the implementation as f( (3) ), which has the same interpretation \nas the announced f(3).  12 kloc of external Maple library (only a part is used). At one end of the system, \nOCaml is used to organise thestructure of the produced web documents, the interplay be\u00adtween the web \nservices that produce them, and the inter\u00adactivity with the user. At the other end, Maple librariesdedicated \nto the manipulation of the so-called special func\u00adtions of mathematics are called by Maple quotations \nin theOCaml source. Additionally, one of our goals with DDMFwas to keep traces of the underlying symbolic \ncalculations,so as to be able to generate human-readable texts describ\u00ading the ongoing calculations. \nDoing so was made possibleby instrumenting some part of our existing Maple library, Algolib12. In quite \na few cases, this instrumentation in factrequired us to port some of the Maple code to OCaml. Whatwe \noriginally thought would be just syntactic transformationbecame in a few cases a more involved manual \noperation. Maple originally had no kind of records or data structurewith named .elds. Although records \nhave been introduced inthe language (rather recently), e.ciency issues remain and,more importantly, a \nhuge amount of legacy code, includinga large part of ours, does not use them. Instead, the tradi\u00adtional \nprogramming style in Maple bases on lists , whichare in fact immutable arrays of heterogeneous values. \nThesame approach of dereferencing by the position applies toaccessing the .elds of most Maple data structures: \ntermsin a polynomial, coe.cients in a series, etc. Additionally, thedesign of a data structure in a Maple \napplication makes veryoften the convention that a few of the .rst or last elements provide information \non the rest, which is then a collectionof values of the same type. Maple lists being immutable,they are \ncopied when modi.ed, which makes one avoid ac\u00adcumulating values in a list: this would cause a use of \nmem\u00adory quadratic in the length of the .nal list and lead to aslowdown, owing to the interaction of the \ngarbage collector.Instead, the typical idiom is to generate data into a mutablestructure (a hash table), \nbefore .attening it into a list. As OCaml lists behave di.erently, it made no sense tokeep this heavier \napproach in the port, and we constructedOCaml lists directly, by mapping over an integer interval. Finally, \nthere remains needs for alternative iteration onan iterable Maple data structure and its OCaml counterpart.To \nthis end, we provided two functions symb_of_symb_list : a maple list -> a maple symb_list_of_symb : a \nmaple -> a maple list ( a maple is a shorthand for a Maple.t DynaMoW.symb). The latter takes a Maple \nobject assumed to be a Maplelist and returns an OCaml list of Maple objects. The formerperforms the opposite \noperation: it inputs an OCaml list ofMaple objects and returns a new Maple object, hiding (andforgetting) \nthat it is a Maple list.  3. Interfacing the Mathematical Web 3.1 Services as Modules A DynaMoW application \nis structured around specialOCaml modules that we call services. Rather than OCaml functions, these are \nindependent components, communicat\u00ading over the network by serialization and deserialisation.Their general \nrole is the computation of symbolic OCamlvalues enriched with some presentation format. To this end,a \nservice returns a product of the form doc * obj, where type doc represents a document that can be serialised \nand 12 http://algo.inria.fr/libraries/ served by a CGI and type obj is the type of returned val\u00adues. \nServices can call one another, taking decisions basedon the symbolic values (obj types) so as to recombine \nthe document values (doc types). Services share a lot of (parametrised) logistic code, still,they could \nnot be generated by a mere functor application.Instead, a service is declared through a dedicated keyword \nlet_service whose expansion by Camlp4 reveals a largeboilerplate. The returned module just exports the \ninputand output types of the service, together with the optionaldefault values of its parameters and \nfunctions to call it.As an example, suppose we want a service named LogIntto calculate the integral of \nthe nth power of the logarithmfunction. This can be declared as follows: # let_service LogInt (n : int) \n: string * maple = let res = <:symb< int(log(x)^$(int:n), x) >> in (<:string< sprintf(\"%a\", $(res)) >>, \nres) Here the document returned by the service is a string, the result of letting Maple pretty print \nthe algebraic quantityby sprintf; the next section will explain how more generalweb documents can be \ngenerated. Often, the pair calculated by a service corresponds to thesame symbolic value in two forms: \nthe .rst intended for pre\u00adsentation to the end user, the second for further processingin OCaml. A more \npragmatical view is that obj is only thatpart of the computed symbolic object that is really neededin \nfurther calculations. So, for some services and typicallythose that generate a whole web page rather \nthan a sectionin a web page, obj is just OCaml s unit. (Compare .les Definition.ml and GeneralFormulaForTaylorBound.ml \nin the DDMF source, available from the DDMF web site.) When calling a service, the caller has access \nto eitheroutput via the functions obj and descr: Function obj im\u00admediately computes and returns the value \nin symbolic form: # LogInt.obj (3, ()) ;; -: LogInt.obj = << ln(x)^3*x-3*x*ln(x)^2+6*x*ln(x)-6*x >> Function \ndescr delays evaluation: it creates a descriptorthat can later be used with function DynaMoW_services. \nServices.call to obtain the presentation as a string: # let descr = LogInt.descr 3 None ;; val descr \n: LogInt.doc_type DynaMoW_services.service_descr = <abstr> # DynaMoW_services.Services.call descr ;; \n-: DynaMoW_services.Services.service_type * string = (\"Binary\", \"ln(x)^3*x-3*x*ln(x)^2+6*x*ln(x)-6*x\") \nMost computer-algebra systems leave a lot of side e.ectsin a running session. To achieve some context \nindependenceof web services, we chose to make each symbolic session localto one service execution. This \nimmobilises much resource, which made it not desirable to allow for recursive services. (And we have \nnot felt the need for it in practice.) To forbidthis, the two functions obj and descr are not exposed \nto the service de.nition.  3.2 Web Documents as Nested Quotations Web documents are structured, tree-like \ndocuments that are usually stored in some XML string representation, often acombination of HTML, MathML, \nSVG, and similar XML dialects. Each variant language is speci.c to some kind ofdata to be displayed MathML \nfor mathematics, SVG forgraphics , but XML dialects all describe static trees. Andall such languages \nshare, by nature, a source of heaviness:the markups used to create a very regularly well-balanced language. \nThis makes them better suited for automaticdocument generation than for human generation.  Concerning \nthe generation of dynamic web documents,PHP was our .rst candidate. But we rejected this choiceas it \ncould not accommodate the symbolic code as easily asthe document code, and also, we have to admit, for \na matter of taste against the programming style. Another option tobe considered was JavaScript, which \nembeds naturally inHTML. JavaScript allows to refer to the document, but intoo low a level, and would \nalso not have accommodated the symbolic code nicely. Just as symbolic programs have been incorporated \ndi\u00adrectly into OCaml code, we wanted to be able to write thepieces of text that make up a mathematical \nweb documentas quotations. Additionally, let us remark that some literalmathematics have to be part of \nthe source code, typically todisplay equations of the form f(x) = computed value . This could be obtained \nin DynaMoW by an expression of the form <:imath<f(x) = $(symb:v)>>. For the literal part, f(x) = in the \nexample, we had to choose a language that a humanwould easily type, and LATEX looked like the only reason\u00adable \nchoice: MathML was ruled out by its verbosity. Thus,although we de.ned few quotation kinds for documents, \nanadded complexity came from more levels of possible nesting,as a consequence of three input kinds that \ncan contribute totexts in documents: literal strings, playing a role akin to the character data (CDATA) \nof XML, to write natural-language text;  literal LATEX code fragments, which appear as escapesfrom literal \nstrings to denote a mathematical formula;  symbolic code fragments, which appear as escapes fromLATEX \ncode to denote a symbolic calculation whose resulthas to be displayed.  Literal strings with LATEX escapes \nare introduced by eitherof the two quotations kinds <:par<...>> and <:text<...>>, which correspond respectively: \n(i) to full paragraphs possi\u00adbly disrupted by displayed mathematical formulas; (ii) to linear text used \nfor titles and the like, as well as to portionsof sentences that have to receive a special rendering \nstyle.Literal LATEX is introduced by either of the two quotations kinds <:imath<...>> and <:dmath<...>>, \nwhich stand re\u00adspectively for an inline and for a displayed mathematicalformula. Finally, the same notation \n<:symb<...>> as used directly in OCaml allows the inclusion of generated LATEX, by introducing a symbolic \nevaluation whose output is con\u00adverted to LATEX by the symbolic plugin before presentation.(The plugin \nwill typically use the computer-algebra systemfor this task if it exports a conversion facility.) On \nthe implementation side, nesting quotations no longerrely solely on the ability of Camlp4 to detect quoted \nstringsby parsing OCaml. But, fortunately, the analysis of nestedquotations does not require more than \ncounting opening andclosing parentheses, making the implementation very simple. In addition to quotations, \nnatural antiquotations allowinsertion of simple datatypes in literal text and LATEX, and content-manipulation \nfunctions can next be used to trans\u00adform or combine the quotation-generated contents. Thus, let l = [2; \n3; 5; 7] in let n = List.length l in List.fold_left (fun s a = s @:@ <:par<, $(int:a)>>) <:par<There \nare $(int:n) elements \\ in this list, viz.>> l where ( @:@ ) is a DynaMoW operator to merge the con\u00adtents \nof two <:par<...>>, results in the display There are 4 elements in this list, viz., 2, 3, 5, 7 More functions \ncombine paragraphs into lists, sections, etc. These content quotations in DynaMoW have to be con\u00adtrasted \nwith the quotations proposed by another OCaml\u00adbased tool, OCamlDuce, a general XML transducer and val\u00adidator: \nits quotations embed general XML strings, includingXML markups (or, provided a DTD is given, this can \nbe astring in some XML dialect). By contrast, the <:par<...>>and <:text<...>> quotations of DynaMoW allow \nno HTMLmarkup. Indeed, the choice with DynaMoW is to generatea web document by calling constructors directly \non sub\u00addocuments, much like using the module XHTML.M in Eliom, the OCaml language extension that comes \nwith the web pro\u00adgramming framework Ocsigen [2]. A di.erence is that Dy\u00adnaMoW proposes a restricted set \nof document constructs,rather than arbitrary HTML markups: the rationale here isto make it easier to \nachieve the uniformity of presentationover a whole generated web site.  3.3 Mathematical Presentation \nOnline Beside symbolic computations, mathematical presentation is another key component of DynaMoW. At \nthe time of writ\u00ading, no technical solution is as good as what we would wantfor our purpose, as the existing \ntools either provide with nocompletely nice rendering or are too slow for dynamic use,as they were implemented \nfor static-only presentation. The oldest method for presenting mathematical formulasis to embed Gif or \nPNG pictures. Fast conversion from LATEX is nowadays possible on the server, and we use latex and dvipng \nfor this task. However, this approach is subject topixelisation when the user zooms in. A more modern \nway is to let the client do the rendering.A nice tool for this is jsMath, implemented in JavaScript.Here, \nmathematical formulas are embedded directly intothe web page, using dedicated markups. On the client,jsMath \nprocesses the LATEX, typesetting it very much like LATEX would, and using LATEX mathematical fonts for \nthe display. The rendering is very .ne, but JavaScript can leadto unwanted latency and can be slow on \nsome systems13 . MathML is what is presented as the future, although, atthe time of writing, it is reliably \nsupported by Firefox only.The rendering is as fast as non-mathematical text, but it isa bit less nice \nthan a typical LATEX rendering, owing mostly to too rigid alignments. As LATEX is the necessary format \natan intermediate stage of our translation process, we had touse a converter from LATEX to MathML. We \ncould .nd no perfect tool for this: Distler s itex2MML (in C) is as fast as we need, but itunderstands \na variant of TEX that we could not produceeasily (spaces are needed to denote mathematical prod\u00aducts) \nand cannot easily be extended to understand the AMS-TEX constructs we use;  Miller s LATEXML (in Perl) \ndoes an excellent job in pro\u00adducing very nice LATEX, but it is meant to be used o.ine, and is too slow \nby a factor 100 to be used for run-timegeneration of MathML (the slowness is caused by thevery general \nLATEX parser).  The current version of DynaMoW uses a cocktail ofsolutions (MathML produced by LATEXML, \njsMath, and PNG produced by dvipng) so as to get reasonable results 13 Internet Explorer, whether 8 or \n9, on Windows 7. It is not clearwhether this is due to IE itself or to the speci.c glue of jsMath.  \non the main .ve browser families. At the same time, we continue evaluating MathJax, a new software under \nveryactive development, which should supersede our solutionsabove; MathJax has speci.c code for Internet \nExplorer, butstill was too slow for our needs at the time of writing.  4. Security and Performance \nIssues Security and robustness. Minimal measures preventsimple attacks on the server: parameter passing \nbetweenservices is secured by authentication to prevent injection ofsymbolic code; an instance of a computer-algebra \nsystemwill be given limited time and memory resources to avoiddenial of service. Scalability and e.ciency. \nA large e.ort, both in the de\u00adsign of DynaMoW and in the implementation of our appli\u00adcations, has been \nput to realise the statelessness of each ser\u00advice. This allows the replication of servers, and, as a \nbonus,independent page fragments are loaded asynchronously andcan be calculated in parallel, with no \nneed for any explicitsyntax when programming: the right server con.gurationautomates parallelism provided \nthe programmer implementsin a su.ciently modular way. This is well exempli.ed bythe .le SpecialFunction.ml \nin the DDMF source, which encodes the skeleton of each article in DDMF: each of the eight calls to DC.inline_service \nresults in a di.erent sec\u00adtion in the web page, which is computed asynchronously. With respect to our \nserver architecture, DDMF and ECSuse for now a simple model with one instance of a computer\u00adalgebra system \nper DynaMoW instance, setting up severalDynaMoW instances behind a web server. In the future, weplan \nto have a single DynaMoW instance with potentiallymany instances of the same computer-algebra system \nanda cache for both documents and symbolic values (cachingoutputs from each service, keyed by the inputs). \nThis willcounterbalance the need for repeating some calculations inorder to maximise independence of \npage fragments. Still, computing a full fresh web page can require adozen seconds of sequential calculations, \nprimarily becauseof complex symbolic calculations. To mitigate this, we relyheavily on the web-server \ncache for better performance,which proves bene.cial especially when the site is visitedby web crawlers. \nText-based communication with the computer-algebrasystem is the main bottleneck. Using an API like OpenMaplewill \ngive better performance but is more system speci.c. Client-side calculations One could think to take \nadvan\u00adtage of client-side resources for both scalability and e.\u00adciency. A typical general-purpose computer-algebra \nsystemis too large an application to be transmitted from server toclient (not to mention license issues). \nA reimplementationin, say JavaScript, seems unfeasible, even for a limited set offunctionality, and could \nprove to be too slow. Additionally,it would hardly be portable, as linking to C libraries wouldbe necessary \n(at least for arbitrary-precision integers). Amore appealing approach would be to run another instanceof \na DynaMoW plugin on the client side, with the computer\u00adalgebra system installed on the client.  5. Conclusions \nDevelopment and debugging process. The source of DDMF shows two extremes of coding styles: one with longsymbolic \nquotations and no call to any external symboliclibrary, another with short quotations to a large exter\u00adnal \nlibrary. (Compare .les DiffeqToRecurrence.ml and TaylorExpansion.ml in the DDMF source.) The .rst case \nisneeded for an intrusive instrumentation of preexisting Maplelibraries. With time, we want to show more \ncerti.cates of the computed data on the web site, which will lead to moreinstrumented Maple code and \nincrease the proportion ofquotations. To modify code, we either modify the externalMaple library or the \nOCaml code, or both. Introducing anadequate ocamltop that is able to call Maple and display(external) \nsymbolic values made the debugging much easier. Advantages of functional style. Using a language thatfavours \nfunctional style had two main advantages: First, it made it very easy to deal with the contenttrees representing \nweb documents. By making us have arecursive representation of the .nal document, we could noweasily implement \na translator to a di.erent document format(say, PDF). By contrast, in an earlier implementation inimperative \nstyle, we just printed HTML along the executionof our symbolic calculations. Second, and maybe more importantly, \nit incited andhelped us to refactor the symbolic code in more independentfunctions. This made the interactivity \nof the site and thereactivity of the server easier to achieve, by enabling incre\u00admental and/or distributed \ncalculations of independent parts. Types in antiquotations. The main torment in the prototyping phase \nconcentrated around the adequacy ofCamlp4 to our project, to the point that it has not beenclear immediately \nthat DynaMoW should be an OCaml li\u00adbrary. Indeed, for our .rst prototype (used before DDMFv1.5), we wrote \nan (OCaml) interpreter for a BASIC withquotations and antiquotations . In the end, the main draw\u00adback \nwith the .nal choice is that Camlp4 does not o.er typeanalysis at preprocessing-time. This leads to too \nmuch typeannotation. The following example makes this clear: let a = 3 in <:symb< f($(int:a)) >> If the \npreprocessing stage done by Camlp4 was aware oftypes, we could simplify $(int:a) to $(a). Our source \nof DDMF proves that a typical application will have many suchannotations. We could partially alleviate \nthis by choosingdefault antiquotation types, but ironically enough, such an\u00adnotations were not needed \nin our .rst BASIC prototype.It turns out that we chose Camlp4 as it provides syntax ex\u00adtensions and quotations \nin the same tool, but there clearlyis room for a quotation/antiquotation extension tool thatcould infer \ntype information and perform di.erent calcula\u00adtions based on it. Declarations of services: Functor application \nis notenough. The main reason why services require a languageextension and cannot be obtained just by \na functor ap\u00adplication is the need for serialisation and deserialisationof the parameters exchanged between \nservices via querystrings in URLs. As the number and types of parame\u00adters vary, we could generate serialisation \nand deserialisationfunctions only on the meta-level, using Camlp4. For com\u00adparison sake, the Eliom module \nEliom_parameters also pro\u00advides a representation for the GET parameters of a service,and also requires \na language extension. A di.erence is thatservices are not intended to be called from the OCaml code (with \nthe exception, to some extent, of the use of the func\u00adtion Eliom_services.preapply). Service declarations \nandcalls in DynaMoW resemble function calls, whereas decla\u00adrations of service parameters in Eliom are \ndone by provid\u00ading the parameter names as strings together with a rep\u00adresentation of their types to a \nservice registering function(Eliom_services.new_service).  A nice side e.ect of the language extension \nfor servicedeclaration in DynaMoW is also to avoid repetitions inboilerplate (argument names, etc.). \nMathematical rendering. It seems our applications nat\u00adurally generate web pages with larger formulas \nthan whatthe online presentation tools are targeting. This made it dif\u00ad.cult for us to .nd the right \ntrade-o. between a nice and afast mathematical rendering (see section 3.3). In particular, even jsMath \nand its successor MathJaxprovide too slow rendering on certain systems. But we hadno time to test the \nversion 1.1 of MathJax, which has been released very little time before the present submission, andpromises \na number of performance improvements . Interfacing with Ocsigen. We have not used Ocsigen inDynaMoW as \nit provides with more general XML than whatwe wanted to expose to our programmers (see end of \u00a73.2)14 \n. Thus, we still rely on an external general-purpose web server(Apache or lighttpd), with DynaMoW a FastCGI15 \n. We want to explore the possibility of making DynaMoW amodule for Ocsigen and expect added e.ciency \nby doing so. Expressivity of interactivity. Although the ability ofSage with respect to web display is \nmerely to display clas\u00adsical symbolic sheets using HTML and JavaScript, in a waythat is not intended \nfor an all-user web site, Sage containsa few nice interaction functionalities. Particularly so is the \n@interact function, which from the user s point of viewpresents the input of a parameter in a range as \na draggableslider. Besides being nice, this solves the question of sound\u00adness checking of the input data. \nIn the same vein, the in\u00adteraction with parameters limited to a (closed) enumerationtype could be rendered \nbetter than by using textual .elds.We plan to develop such aspects in the future. (Symbolic) Code extraction. \nEarly in the developmentof the project, we realised that instrumenting a symboliclibrary under continued \ndevelopment would lead to theneed of double maintenance. Indeed, we need to keep aversion of the library \nfor computations o. the web. Wehave prototyped the extraction of pure Maple libraries fromour OCaml-with-Maple \napplication just enough to realisethat a complete code extraction would imply automaticallyundoing some \nof the paradigm-changing port described insection 2.4. This automation is not mature yet and will bethe \nsubject of future work.  Acknowledgments The conception of DynaMoW has bene.ted greatly fromdiscussions \nwith James Leifer, Marc Mezzarobba, Nicolas Pouillard, and Didier R\u00e9my. As DynaMoW was initiallydeveloped \nas the underlying engine of DDMF, it has alsobeen in.uenced a lot by discussions with DDMF developers. \n References [1] M. Abramowitz and I. A. Stegun, editors. Handbook of mathematical functions. Dover, \nNew York, 1992. [2] V. Balat, J. Vouillon, and B. Yakobowski. Experience report:Ocsigen, a web programming \nframework. In A. Tolmach, editor, ICFP 09, pages 311 315, 2009. 14 and for unclear license issues 15 \nhttp://www.fastcgi.com/ File Trigo.ml: use_cas Maple type_symb maple = unit Maple.t DynaMoW.symb let_service \nTrigo (n : int = 2) : DynaMoW_services.Content.sec_entities * unit = let m_expr = << cos($(int:n) * x) \n>> in let s = Expand.obj (m_expr, ()) in let par_intro = <:par<The expansion of <:imath<\\cos nx>> when \n<:imath<n = $(int:n)>> contains <:imath<$(int:s)>> terms:>> and par_math = DynaMoW_services.Content.inline_service \n(Expand.descr m_expr None) in let par = DynaMoW_services.Content.(@@@) par_intro par_math in (DynaMoW_services.Content.section \n<:text<My Trigonometric Service>> par, ()) File Expand.ml: use_cas Maple type_symb maple = unit Maple.t \nDynaMoW.symb let_service Expand (expr : maple) : DynaMoW_services.Content.sec_entities * int = let s \n= << expand($(expr)) >> in (<:par<<:dmath<$(symb:expr) = $(symb:s)>>>>, <:int< nops($(s)) >>) Table 1. \nCode for a simple service Trigo that calls a simple service Expand and, at the top, the resulting display. \nPropercon.guration makes it available from the URL http://.../ example?service=Trigo&#38;rendering=jsMath&#38;n=5. \nAfter en\u00adtering the default web page (without .nal &#38;n=5), which ren\u00addered the case n = 2, we changed \nthe value to 5 in the formso as to get the display above. [3] A. Benoit, F. Chyzak, A. Darrasse, S. Gerhold, \nM. Mez\u00adzarobba, and B. Salvy. The Dynamic Dictionary of Math\u00adematical Functions (DDMF). In The Third \nInternational Congress on Mathematical Software (ICMS 2010), volume 6327 of Lecture Notes in Computer \nScience, pages 35 41, 2010. [4] M. Mauny and D. de Rauglaudre. A complete and realisticimplementation \nof quotations for ML. In Proc. of the Workshop on ML and its applications, 1994. [5] N. J. A. Sloane \nand S. Plou.e. The Encyclopedia of Integer Sequences. Academic Press, 1995.   \n\t\t\t", "proc_id": "2034773", "abstract": "<p>We report on the design and implementation of a programming tool, DynaMoW, to control interactive and incremental mathematical calculations to be presented on the web. This tool is implemented as a language extension of OCaml using Camlp4. Fragments of mathematical code written for a computer-algebra system as well as fragments of mathematical web documents are embedded directly and naturally inside OCaml code. A DynaMoW-based application is made of independent web services, whose parameter types are checked by the OCaml extension. The approach is illustrated by two implementations of online mathematical encyclopedias on top of DynaMoW.</p>", "authors": [{"name": "Fr&#233;d&#233;ric Chyzak", "author_profile_id": "81100428578", "affiliation": "INRIA, Rocquencourt, France", "person_id": "P2801416", "email_address": "frederic.chyzak@inria.fr", "orcid_id": ""}, {"name": "Alexis Darrasse", "author_profile_id": "81430593067", "affiliation": "LIP6, Paris, France", "person_id": "P2801417", "email_address": "alexis.darrasse@lip6.fr", "orcid_id": ""}], "doi_number": "10.1145/2034773.2034809", "year": "2011", "article_id": "2034809", "conference": "ICFP", "title": "Using camlp4 for presenting dynamic mathematics on the web: DynaMoW, an OCaml language extension for the run-time generation of mathematical contents and their presentation on the web", "url": "http://dl.acm.org/citation.cfm?id=2034809"}