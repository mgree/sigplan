{"article_publication_date": "10-17-2010", "fulltext": "\n Rubber Ducks, Nightmares, and Unsaturated Predicates: Proto-Scienti.c Schemata Are Good For Agile Jenny \nQuillien New Mexico University at Highlands Santa Fe, New Mexico jenny@jqsolutions.org Abstract Fine-grain \ncase studies of scienti.c inquiry, lessons from linguistics on metaphoric thinking, the epistemology \nof Charles Sanders Peirce, recent work on architectural image-schemata, along with the computer world \ns own theorist, Peter Naur, all suggest that software developers (frequently dulled and desiccated from \noverdosing on Cartesian methodologies) could bene.t from imbibing a little mysticism .not the wave-your-hands \nwoo-woo kind but the more ineffable hunch and gut side of human cognition. Scholarly publications in \ntheir .nal polished forms rarely admit that stories, jokes, eroticism, and dreams were the fertile seeds \nthat germinated into serious results. This essay looks to these closet sources, non-reductionist, non-self \nconscious, metaphorical, aformal modes of thought as the salvation of a profession gone awry. It is notably \nproto-scienti.c image-schemata that retain our attention as a pragmatic tool for improving the fecundity \nof Agile methodology, at its roots, so to speak. The necessary context is provided by Peter Naur s fundamental \ninsights about software development as theory building coupled with an elaboration of the Agile concept \nof storytelling. ACM Categories: K. Computing Milieu, K.7 The Computing Profession, K.7.0 General General \nTerms: Design; Human Factors; Theory. Keywords: Agile; Alexander; theory-building; stories. 1. What \ns the context? Peter Naur challenged the mainstream view of software development as a kind of production \nprocess where programs and documentation constitute the deliverable. Permission to make digital or hard \ncopies of all or part of this work for personal or classroom use is granted without fee provided that \ncopies are not made or distributed for pro.t or commercial advantage and that copies bear this notice \nand the full citation on the .rst page. To copy otherwise, or republish, to post on servers or to redistribute \nto lists, requires prior speci.c permission and/or a fee. Onward! 2010 October 17 21, 2010, Reno/Tahoe, \nNevada, USA. Copyright &#38;#169; 2010 ACM 978-1-4503-0236-4/10/10 $10.00. Dave West New Mexico University \nat Highlands  Las Vegas, New Mexico profwest@fastmail.fm Naur s alternative formulation, Programming \nas Theory Building, saw true development as the collective attainment of insights (a Theory) about the \nproblems at hand and how they are addressed by the execution of the program. An affair of the world and \nhow the program handles and supports it. The explicit inclusion of an affair of the world and the emphasis \non program behavior as that which contributes to the problem solution, are critical departures from mainstream \nthinking. Both directly counter the prevailing idea that what matters in software is what goes on inside \nof the machine and not what is happening in the enveloping system. Just how revolutionary Naur s ideas \nwere can be appreciated by contrasting them with those of another computer science legend Fred Brooks. \nFor Brooks, author of the iconic piece No Silver Bullet, the essential dif.culty confronting programmers \nwas the inability to form a conceptual construct. Although there are some super.cial similarities between \nNaur s Theory and Brooks conceptual construct, they are semantically poles apart. A conceptual construct \nis a model of how the program executes: i.e., .ow of control, data structures, and algorithms.the step-by-step \nchanges of state within a .nite state machine. A Theory, in contrast, incorporates both what happens \noutside the computer and the conceptual construct. The outer boundary of a conceptual construct is a \nset of requirements for what the computer is supposed to do. Development, therefore, has been concerned \nwith building to speci.cation and making the process more formal and provable. But. . . Where do the \nspeci.cations come from? Why these requirements? What is the relationship between these speci.cations \nand the real world needs they supposedly re.ect?  Does an ambiguously stated expectation lose anything \nessential when straight jacketed by formal precision? . . .These questions are vital if we are to have \na robust Theory \u00e0 la Naur. Naur explicitly pierces the requirements boundary and asserts that affairs \nof the world are primary concerns and what goes on inside of the machine is secondary. In fact, he really \nsays that what happens inside of the machine is essentially irrelevant: it is the behavior of the executing \nprogram that determines the correctness of the software. Indeed, it is quite possible to have provably \ncorrect software, that meets every requirement and yet fails to deliver the appropriate behavior. Sometimes \nproblems arise simply because there is an imbalance in a theory, too much how the computer will handle \nit (requirements) and not enough affairs of the world. Let s take an easy and commonly experienced example.Microsoft \nWord. Word has thousands of requirements including various types of auto-formatting, e.g., .rst letter \ncapitalization and bullet point margins. Missing from the Theory of Word is an understanding of users \nbeyond rather simple-minded single writers at single desktops quite content to let Word make their decisions \nfor them. This causes all kinds of problems for writers in computer labs and for creative writers who \ndeliberately break the rules of grammar, spelling and formatting. Readers may remember Douglas Adams \ns lament of how Word lacked the speci.c (and easy to implement) feature of smart quotes, a feature essential \nto authors writing novels with extensive dialog. Agile owes a signi.cant debt to Naur s ideas about theory \nbuilding and kudos go to Alistair Cockburn for saying so. Common Agile values (simplicity, communication, \nfeedback) and practices (pair-programming, collective code ownership, whole team, metaphor, on-site customer) \ncould support the creation of the kind of Theory that Naur advocates but Agile has suffered lopsided \ninterpretation, with the formal getting more press than the aformal.  2. Telling Tales Naur s Theory \nBuilding depends on crafting and relating stories. Storytelling, since time began, has been the mainstay \nof mankind when it comes to making collective sense of life, teaching, remembering, entertaining, and \nacculturating newcomers. And no wonder. Stories are effective, powerful, easily remembered, high bandwidth \ntools whose force resides in their primarily evocative nature. Even the simplest story, operating like \na vacation snapshot, will bring to mind a dense association of other stories, circumstances, and knowledge. \nTheories, \u00e0 la Naur, are developed when a community tells stories about affairs of the world. what the \nworld is like, how it might be better if, and I bet we could get a computer to help us with that. The \nTheory continues in its development with stories about, we need the computer to behave like this, or \nhere s how the computer will actually do it, and here s how we d know that the computer was doing that. \n Theory is con.rmed and Agile rati.ed with stories about it works, that really helps, and here s another \nidea. [If the reader would like a speci.c example of the power of telling tales, check out Apple s guidelines \n(in the iPhone OS Reference Library) on Designing an App, speci.cally the section on Creating a Product \nDe.nition Statement. The material is copyrighted and too long to incorporate here, but does provide a \nmeaty example.]  3. Agile Flunks Story Telling For sure we have developed a facility for telling stories \nabout what happens inside the machine (Design Patterns) and some ability to address worldly affairs in \nsome domains; e.g. Martin Fowler s Analysis Patterns starts to address medical domains. Works such as \nEric Evan s Domain-Driven Development provide meta-patterns for telling stories about those affairs of \nthe world that we expect to handle with software. But, let s face it, we are weak when it comes to telling \nstories about the domain and we are shockingly weak when it comes to crafting stories at the boundary. \nObject stories and user stories rarely re.ect the nature of the embedding system. One of the great tragedies \nof Agile is inadequate practitioner understanding and mastery of stories and metaphor. (Metaphor was \nessentially abandoned when Kent Beck removed it as an explicit practice.) User Stories (Agile s single \nmost important practice supporting Theory Building) have devolved into being nothing but verbose expressions \nof a speci.cation. As a user I expect the system to allow me to login using an id and password. As a \nsecurity manager I expect the system to incinerate anyone that incorrectly enters an id-password combination \nfour times. Those are not stories. A good story, at minimum, means a full cast of characters (not all \ncharacters are human beings), a plot, a description of interactions among the characters to advance the \nplot, cues, and outcomes. Consider how Robert Louis Stevenson, as he writes a letter to his Meredith, \nmanages all aspects of story in just three sentences.  Robert Louis Stevenson s Battle.eld For fourteen \nyears I have not had a day s real health; I have wakened sick and gone to bed weary; and I have done \nmy work un.inchingly. I have written in bed and written out of it, written in hemorrhages, written in \nsickness, written torn by coughing, written when my head swam for weakness; and for so long, it seems \nto me I have won my wager and recovered my glove. . . I was made for a contest, and the Powers have so \nwilled that my battle.eld should be this dingy, inglorious one of the bed and the physic bottle. The \ndevolution of stories leaves us stuck with our old practices and diminishes our ability to directly link \nthe enterprise with information technology systems that could really support it. It s more than a crying \nshame. Properly put to use, stories and Theory Building can bridge business practices like scenario-based \nplanning, and play scripts, with software design. This same understanding would provide a sound foundation \nfor emerging efforts in design thinking and user experience design.  4. A Sojourn in Story Space Stories \nare equipment for living. S. I. Hayakawa A Theory is an integrated collection of stories where stories \nare told to achieve different purposes and are told at different levels of scale. In Figure One we see \na spectrum of story types based mostly on the scope of the story, for example, myths have the greatest \nscope or generality whereas design patterns are more focused and useful in narrowly de.ned contexts. \nWe also set different expectations for the truthfulness of our stories, myths are expected to be valid \nin the sense that they do not contain outright errors but there may be exceptions, meta-conditions, and \nindirect metaphorical assertions. We do not allow this latitude when it comes to formal stories, such \nas blocks of code in a program. Here we expect reliability, i.e., the same results each time the story \nis told (executed). We also superimpose in Figure One a Venn diagram to show relationships between the \nspectrum of story types and Naur s divisions of theory into affairs of the world and how the computer \nimplements or supports. A third part of the Venn diagram shows a transition space where stories are just \nabout equally concerned with affairs and implementation. Figure One shows only the most major and familiar \ntypes of stories that might be encountered and useful but we could elaborate the continuum by including \nadditional story types such as heuristics or scenario planning. Let us look at each of the main types \nof story and discuss important issues raised and resolved with each type. MYTHS tend to be global in \nscope and every organization tells itself stories about the organization as a whole and what it does. \nArie de Geus, who has researched the phenomenon of longevity in businesses, remarks that companies that \nsurvive over time are those that de.ne themselves as a community rather than as a provider of a speci.c \nproduct or service. Village Ingenuity In the canton next to Geneva, which since time immemorial has made \nSwiss cheese, a small village specialized in also making the cheesecloth used in the aging process. The \nlittle town was isolated with many families dependent on this local craft for their livelihood. When \ntheir handmade product became obsolete, the families banded together and experimented with other outputs \nfor their looms and know-how. Fabrics for furniture ran into too much competition but together they persevered, \neventually .nding a niche in airplane seats covers which must be of incredible durability. Although successful \nat this stage, more learning was ahead. The founding family, faithful to their home town, eventually \nsold the company to the employees, who are now branching out to redesign the airplane seat itself, replacing \nthe heavier frames with air cushions (covered of course with village-made fabrics) potentially saving \nairlines signi.cant fuel cost. Collective loyalty to community and place, courage and deep craft knowledge \nof technique and material has allowed the village to successfully navigate the changing times. Mythic \nstories might take the form of mission statements. valid, but subject to a lot of interpretation. Or, \nthey might relate an event that solidi.ed an organizational value. Cray took immense pride in being a \nparticipatory democracy rejecting the kind of authority common in large U.S. corporations, and reinforcing \nthose values with stories. Rubber Ducks Cray Research held an annual event, Ducky Days, grounded in a \nstory about their corporate values. Their .rst building in Minnesota had a fountain and one day a yellow \nrubber duck appeared, serenely .oating about. A rather uptight, imported from outside, manager promptly \nissued a memo banning ducks as unbe.tting the decorum of the company. Next day the fountain was over.owing \nwith rubber ducks. The responsible manager soon departed.   RELIABLE  O   M P O N E N T D O M \nA I N RESULTS  BUT REQUIRING INTERPRETATION  ALGORITHM  METAPHOR Figure 1. Story Space Or, they \nspeak of heroic individuals personifying values. Walking the Talk IBM values a culture of innovation \nand prudent risk taking. A senior VP was responsible for a signi.cant loss. Watson was being interviewed \nand the topic of the VP and the loss came up. Will you .re Mr. X? Watson was asked. The response: Hell \nno, I just paid for his education! All stories act as tropes or paradigms permanently on call to revitalize \nlisteners and their predicaments. Stories travel. Stories support subtler modes of thought. Stories are \nthe developer s life raft. PROTO-SCIENTIFIC IMAGE-SCHEMATA (PSIS) help a story retain a global point \nof view while adding explanations about observed characteristics. [Does the reader remember Kipling s \nJust So Stories?] PSIS are invaluable in improving domain stories and we will, in a later section, use \nthem extensively in our case study of insurance companies. Hard-wired in our deep structures of cognition \nare Gestalt categories, natural contents and lines of cleavage of experience: categories of shape, number, \nsize, movement, constancy, continuity, and succession. At the conscious level we verbalizable perceptions \nof change and organize events into discontinuous chunks.like the ticks on a clock. In this conscious \nmode our .eld of attention is constructed. Underneath, however, is an un-verbalized .ow of sensing and \nhunches in a diffused .eld of attention. Motility, intention, direction, kinetic centering and balance \nare sorts of non-conscious knowledge that are key to our making judgments through time and space, both \nreal and imagined, from parallel parking our car to programming. It is at this level that we can tap \ninto the insights from other .elds. Take the philosopher/linguist M.L. Johnson who explored how our metaphors \nof path, blockage and enablement are rooted in our bodily knowledge of movement and impediment, and how \nour metaphors of compulsion and restraint removal are built around our kinetic understanding of force \nor pressure. (Using such metaphors to inform our ideas about proper Web-site navigation, organization, \nand inter-activity is an obvious possibility.) Historians of science, such as Jacob Bronowski or Gerald \nHolton, go to great lengths to point out that the popular dichotomy between the rule of reason and mystical \nconviction is na\u00efve and wrong-headed. Indeed, Mr. Hugo Form is core rising to the surface. Victor Hugo \nOtto Loewi, taking his dreams seriously, found that they told him how to design his experiment which \nunpacked his hunch that nervous impulses were substantially chemical rather than purely electrical in \nnature. Elias Howe s design of the sewing machine came to him during a nightmare of being captured by \ncannibals, each with a spear with a hole in the tip. Kekul\u00e9 s discovered the circular benzene structure \nthrough dreams of Ourobos biting its tail. Holton s detailed study of unpublished notes, letters, reminiscences, \nand conversations led him to a list of schemata which drive exploratory quests in science without necessarily \nbeing explicitly at issue in the research. Included in his list are: atomicity versus continuum, evolution \nversus devolution, simplicity versus complexity, hierarchy versus unity, constancy versus evolution versus \ncatastrophic change, and the explanatory ef.cacy of mathematics versus mechanical models. From architectural \nschemata we expect Bill Hillier s work on space syntax and Christopher Alexander s image schemata (referred \nto as geometric properties in his latest work, The Nature of Order) to provide useful trail heads for \nsystems story telling. Alexander offers essentially static structural schemata while Hillier recognizes \nhow a city s underlying spatial grammar (particularly pathways versus fat nodes (caf\u00e9s or plaza s where \nwe hang out) and degrees of accessibility or blockage) guide actions and understandings which lead, in \nturn, to design decisions. Our ultimate goal in software design is to create a virtuality in which we \ncan live, not one that just establishes formally correct artifacts. If we employ the metaphor of a map, \nAlexander helps us with the layout of places, while Hillier helps us with navigation. Notice though, \nthat, Alexander-Hillier maps, and the stories told about them, cannot do more than tell us about our \nTheory of the world at a speci.c time.an important limitation. Important and problematic because stories \ncontextualize and constrain later stories. Why Are We Still Doing This? When we .rst theorized about \nairplane navigation we told stories about VORs and moving in straight lines from one VOR to another. \nOur air traf.c control systems implemented this theory and despite the fact that our understanding of \nthe world has changed to incorporate GPS, Great Circle routes, and computer assisted navigation, airlines \nstill .y point-to-point, VOR- to-VOR zigzag routes with attendant congestion above each VOR. So we need \nbe aware when telling stories that we don t unwittingly lock ourselves into systems that persist beyond \ntheir time.  USER STORIES bridge the affairs of the world and software implementation. Speci.c and idiosyncratic \nrather than generic, this story type should remain ambiguous as long as possible, permitting novel interpretations \nto surface. User stories detail the interactions among agents (some will be manifestations of executing \ncomputer code) as they collaborate on a discrete piece of work. They establish a unit of work.and a unit \nof Theory.with each story depicting a discrete affairs of the world. As a unit of work, a User Story \nbounds an activity with inter-related parts or aspects: 1) expanding the domain Theory and clarifying \nit through emerging contextualization as one story informs the next, 2) deciding (highly subject to change) \nwhat behaviors can and should be embodied in a software-driven artifact, 3) making the initial decisions \nthat will shape the conceptual construct, and 4) providing a means for the customer to establish priorities \nas to which story has the most value at any given point in time. The Product Backlog, along with the \nemerging executing software, comprise a gestalt comprehensive Theory. Stories, we would argue, should \nnever be removed from the Product Backlog but simply be changed in some visual way to indicate that they \nare conjecture, developing, or con.rmed. In this way the Backlog provides both an overview of the state \nof the project while evoking the current Theory. A User Story artifact, a story card for example, is \nbut a placeholder for the conversation that disambiguates those affairs and limns the means by which \nthe software will eventually handle and support. OBJECTS are actors in User Story plays, anthropomor\u00adphized \nindividual system elements engaged in productive activity. The object metaphor assures decomposition \nof the most complicated domain and the most equitable, simplest, distribution of workload across all \ndomain elements. Object stories are user stories from the point of view of the character i.e., when I \n(an object) found myself in this situation I did this. Object stories don t tell us anything about how \nthe character was able to do what was done but they do provide clues as to how software objects might \nbe implemented. From the stories we can discern:  what that object needs to know and how he came to \nknow it  how object behaviors are invoked, and  the nature of each discrete action expected of the \nobject.  Object stories also preserve the verisimilitude between objects and their software implementations.a \nmajor requirement if we are to realize enterprise-software integration and integrity. PATTERNS, as stories, \nare actually found across the entire transition zone, depending on whether they are stories about consistent \nprogram implementation (Design Patterns) or domain patterns (Analysis Patterns). Patterns tend to abstract \nsimilarities and codify structures for subsets of the domain. Patterns can deal with organizational structures \nand with structured interactions. They might be conceptual patterns or very low-level coding patterns. \nKent Beck s Best Smalltalk Practice Patterns and the Programming Pearls books tell pattern stories right \ndown to variable name. In the software community we often think of patterns as another syntax, but in \nstory telling we re pointing to a much wider human ability to think about motifs, such as Joseph Campbell \nwho reduces all hero journeys down to the skeletal pattern of the hero s journey. FORMAL STORIES, such \nas data structures and algorithms, are, at least in principle, provably correct. X may equal Y but both \nare semantically empty. The proof aspect is of interest to theoretical computer scientists but most consumers \nof those stories only care about the fact that they consistently deliver expected results. Formal stories \ndescribe computer operations that are the actual mechanism behind how objects do what it is that they \ndo.  5. Contextualization: Every Story Has Baggage Stories are nested, semantically contextualized, \nby all the stories to their left on the continuum de.ned in Figure One, and related to peer stories by \nvirtue of a shared context. Context provides the basis for consistency and for transition from simply \nvalid stories to reliable stories. Context, reinforced by feedback from the emerging software, reinforces \nthe plausibility of the developing Theory. There is a subtly strong determinism in the way context shapes \nthe telling of nested stories. Two examples: Don t Provoke the Gods Imagine a South Sea island blessed \nwith blue lagoons and handsome people who pray to jealous gods who resent mere mortals taking their stuff, \nlike .sh from the sea and trees from the forest. This divine resentment leads to occasional punishment \nin the form of hurricanes or volcanic eruptions. Such myths will shape various South Sea rituals concerned \nwith daily activities (building a house, for example) that include appropriate rites for propitiating \nthe gods. In turn, within the context of these rites, speci.c practices evolve (using stilts for house \nsupport and curing logs before they are used).  A Myth Under Our Own Bed Heroic CEO s steer their organizations \nby virtue of their near omniscience and .awless application of scienti.c management in a capitalist world \nunfettered by puny governments. (Think Ayn Rand.) This kind of myth leads to ritual behaviors, such as \nthe deployment of monolithic integrated systems that put corporate information and controls in one place \nas an instrument to be played by such godlike .gures. Embedded in such rituals are speci.c practices, \nsuch as offering the CEO appeasements in the form of obscene salaries and private planes and adopting \nformal procedures like RUP and formal models like UML. Business practices adopted because of their mythic \nin.uence (and the results that accrue from their use) put the enterprise in a technological straight \njacket of ossi.ed structure and infrastructure. Clearly we need better myths predicated on more perspicacious \nthinking and improved construction of derivative stories.  6. Metis versus Techne There is a qualitative \ndifference in the kind of thinking, reasoning, and storytelling required to develop domain stories as \nopposed to implementation stories. Domain, Object and User Stories require what we will call metis-ical \nthinking (we re bad at it) and those about the machine and its innards require techne-ical thinking (we \nve got it down). Metis (as a noun and from the French m\u00e9tier meaning profession, trade or craft) is a \nform of logic and thick knowledge that is contextual, particular, and .ne-grained: the kind of knowledge \nthat can be acquired only by constant adaptation to changing circumstances and long practice at similar \nbut rarely identical tasks (our Swiss village weavers, for example). Such thick knowledge can only be \nacquired when teams are constantly exposed to the full complexity of task, materials, customers, and \ncontext. Perceptive innovations and productive adaptations are absolutely dependent on the kind of wisdom, \nexperience, and thick knowledge provided by metis. Metis incorporates the kind of inference that Charles \nSanders Peirce named abductive. Peirce posited that no new idea could result from the mere application \nof deductive or inductive reasoning, but rather, new ideas come into being by way of leaps of the mind \nusing inferences to the best explanation, in much the way that our familiar hero, Sherlock Holmes, unravels \nhis mysteries. (If the butler did it, then all our collected but disparate clues fall into place.) The \nbulk of software development literature and education concentrates, however, on techne, thin reductionist \nforms of logic and knowledge that aim to be universal ways (math for instance) to render complexity more \nsimple and legible. Our currently thin modes of teaching attempt to pre-codify everything in a vain attempt \nto protect the learner from surprise (and thereby also buffered from instructive disappointment), whereas \na thicker apprenticeship system would aim for the opposite, teaching the learner to expect and embrace \nsurprise and be attentive to subtle but meaningful differences. Theory, as conceived by Naur, is metis-ical \n.rst and techn(e)-ical only when necessary. We also need to re-cast many of our user stories and object \nstories in a more metis-tical light so that they foreshadow but do not unnecessarily constrain technical \nsolutions. [ Thick versus thin, metis versus techne, is a debate common to many .elds of inquiry: see \nsidebar below for more.] Metis-ical thinking and abductive reasoning are essential for dealing with the \nworld outside the computer, for it is in this world that we encounter wicked problems not resolvable \nwith mere logic and inductive or deductive reasoning. from Representation and the War for Reality by \nWilliam Gass But the war for reality is not to be won or lost in the quarrels between historians and \nscientists or .ctionists and philosophers, because each discipline has its thick and its think side, \nits solid terms, and their invisible relations. There must be data; there must be observations; there \nmust be facts, incidents, events, the Thick side says, while the Thin reminds us that there also must \nbe order, structure, analysis and argument, no philosophy; without arrangement and connection, no history; \nand without rhetoric, without patterns, without coherence, there is only the ordinary novel. The war \nfor reality is therefore a struggle between data and design, brute dumb fact and indifferent chance; \nand then ironically, there appears the thinnish impulse to introduce the laws of probability into this \nrubbish heap, and to publish, shortly, a careful catalogue of trash. If design wins the data are deformed, \nthe system runs ahead of the load it was carrying, and there is a multiplication of arti.cial entities \nand metaphysical myths. Thins really wonder whether facts aren t entirely the creation of abstract schemes, \nlike the golf courses, lakes, and tree-lined streets of desert real estate developers; and Thicks tend \nto think that concepts carve continuities into discrete chunks, that laws are lies of some system of \nsociety, some secret legislature illegally elected. Figure 2. Thick versus Thin Apple s Conundrum  Apple \nneeds a business model which both guarantees a quality user experience with its iPhone and iPad (iOS \ncontrolled devices) and maximizes market share through third party contributions to the functionality \nof the platform (basically, lots of applications.) In order to control the quality of user experience \nApple wants to limit applications to three languages (C++ which is obsolete, Objective C which is little \nused, and Java Script which is popular but lacks respect). But this decision has negative consequences. \nOnce popular apps (like Scratch), ones that support other aspirations that Apple has for the iPhone and \niPad, are no longer allowed because they were written in other interpreted languages (Smalltalk in the \ncase of Scratch). This puts unnecessary constraints on developers using iOS-based systems for education, \nentertainment, and even development. The conundrum is that solving one part of a problem, changes other \nparts of the problem in undesirable ways. Wicked problems elude known categories and approaches. Any \nattempt at devising a solution to a wicked problem changes your understanding; any solution changes both \nthe problem and your thinking. Moreover, there is no clear rule for knowing when you have solved the \nproblem or what parameters the solution might exhibit. Perhaps if experienced craftsmen (think metis-ical) \nat Apple increased the scope of their thinking to include the larger system in which their products are \nbeing used, they might by leaps of the mind intuit different kinds of decomposition, rede.ne the nature \nof application and platform, and make the choice of language irrelevant.  7. Thangkas and Other Tricks \nof the Trade Remembering and sharing.even depicting.all the stories necessary to a Theory is less intimidating \nthan it sounds. In fact, the way the human mind is put together, we have no problem storing hundreds \nof stories in memory, recalling them to mind when presented with appropriate triggers. That said, hundreds \nof stories are never in residence in our heads at any given time. We need access to the stories, and \nwe need some kind of meta-knowledge about the stories and how they are all inter-related. We also need \nsome kind of index to the stories so we can quickly .nd and use the one(s) of immediate interest. The \nstrategy of archiving or stockpiling stories, however, is a slippery slope, as any good librarian will \ntell you. You have to know a lot before you can begin to retrieve additional information and without \nit the information is as good as gone. Rather than a storage model, let us bank on the fact that stories \nare not frozen but change with time and the intentionality of the teller. [If a six year old tells how \nhe fell in love with his .rst grade teacher, it is one story. If that same individual at sixty revisits \nthe story, it is something else entirely.] It is possible to compactly and visually represent a collection \nof continually unfolding stories. On the wall above the desk where the authors are working is a Buddhist \nWheel of Life Thangka Painting which depicts around a hundred discrete images, each capable of recalling \nstories. The images are arranged in particular ways which recall yet more stories. The overall gestalt \nbrings to mind still more stories. Agile workrooms employ similar (but less organized) visual artifacts \nfor a similar reason to create a kind of external memory with evocation-based retrieval. Big visible \ncharts, information radiators, white boards, post-it notes, and story cards are artifacts that are deliberately \nplaced on common walls so that everyone can simply look up, .nd the relevant trigger artifact, and recall \nto mind the story(ies) they need for their immediate work. Less visible but playing the same role are \ntests, test suites, and the totality of the source code for the software (collective code ownership). \nWhile the markers, acting as cues or clues, exist in the artifacts of our environment, the Theory, as \nNaur insists, exists only in the heads of those that participated in its construction and ongoing elaboration. \nIf you break up a team, and the environment full of artifacts (a sort of external hard drive), the Theory \nitself is broken up and over time dissipates entirely.  Central to our argument is the realization that \na proper Theory is comprehensive; i.e. it is comprised of all the stories. A necessary corollary is that \nthere can be but one Theory, the Theory of the enterprise and the world in which it operates. This assertion \nis in stark contrast to the situation in most organizations today where, at minimum, two contrasting \ntheories compete; one of the business system and another of the IT system. (Thus preventing the long \nsought goal of business-IT integration.) In the worst case, there are multiple, episodic, ephemeral, \nidiosyncratic, and unrelated theories of discrete projects. Everyone in the enterprise must share the \nsame Theory, even if they understand some stories in more detail than others. When everyone shares the \nsame Theory, and when the evocative artifacts are no longer isolated in an Agile team room but distributed \nacross every bulletin board, logo, intranet, and corporate report, then, but only then, the enterprise \nwill realize two signi.cant bene.ts. One, there will always be a suf.cient mass of theory-containing- \nminds to assure the preservation of knowledge and enculturation of newcomers. Two, the foundation will \nbe laid to realize enterprise goals of adaptability and innovation.  8. Alexander s Schemata in The \nNature of Order Earlier, experienced story-tellers like Beck, Wirfs-Brock and Gabriel looked to Alexander \nas a potentially rich source of new metaphor and new idiom. Unfortunately, others, like the Gang of Four \n(Design Patterns) and The Three Amigos (UML), saw only a new form in which to express old ideas, thereby \nthrowing out a lot of that proverbial baby with the bath water. Our quest now will be to show how The \nNature of Order, which carries forward much of the mystical and domain focused questions of Alexander \ns earlier works (see sidebar for more), can help us tell better stories. Alexander s magnum opus runs \na hefty 2000 pages divided into four volumes, only the .rst two are pertinent to our discussion here. \n Volume One presents .fteen image-schemata (labeled geometric properties ) which, Alexander argues, are \nalways present in natural artifacts made by Mother Nature (God, if you will). The presence of these same \nproperties universally characterizes successful man-made artifacts while their absence indicates failed \ndesign. (Figure Five offers but one example.) It is Alexander s expectation that further research will \nprovide mathematical proof of these properties, moving his insights away from loose quali.ers and more \nsquarely within a scienti.c discussion of, quite literally, the nature of order. However, a different \nand more modest interpretation is taken here: we limit ourselves to using these properties as convenient \nproto-scienti.c schemata of human perception. which in the epistemology of Charles Sanders Peirce are \nunsaturated predicates or rhemic iconic quali.ers. Peirce s idea of rheme or unsaturated predicate refers \nto our attention being on only one aspect of our experience. When, for example, we chip off a piece of \nold painted plaster or brush some red paint on a piece of wood or cardboard to take to the hardware store \nin order to purchase a matching color, we aren t concerned with the size, shape, or cost of the plaster, \nwood or cardboard, but only the redness or blueness of the color. Rhemic iconic quali.ers are useful \nshorthand expressions for talking about a variety of related experiences (hence the expression unsaturated \npredicates ). Think of elasticity as a rheme, i.e., a way of talking about how different materials act \nwhen we work with them or gravity as our experience of various falling objects or, for that matter, our \nown bodies as we slip on ice or climb stairs. Alexander s echoes, (one of the properties ) for example, \nallow us to speak about an experience of unity across a range of natural and man-made objects, city skylines, \nbluegrass ALEXANDER AND THE SOFTWARE COMMUNITY All of Alexander s writings have a dual nature. (a) An \nattempt to understand the forces used by Nature to craft living systems, in other words, a focus on the \nworld or the domain, expressed in rather mystical terms:  The non-self conscious process  QWAN, The \nQuality Without A Name  Timeless Building  Transcending the Pattern Language Gate  Wholeness  God \n  (b) A parallel attempt to de.ne pragmatic elements that humans can use to achieve a similar end.a \nfocus on implementation, expressed as concrete design directives:  A calculus of design  Resolution \nof forces  Patterns  Geometric Properties   The software community, uncomfortable with the metaphysical/mystical \ndimension of Alexander, tends to discretely whisk under the carpet the more mysterious phenomenological \nmother load, leaving the theater of their minds feeling cleaner, almost antiseptic, more brightly lit, \nwith only a sparse cast of arid characters. Figure 4. The Dual Nature of Alexander s Work music, sibling \nresemblances, or Shaker furniture. Coupling and Cohesions are examples of rhemes or unsaturated predicates \nthat have been found to echo across natural and man-made objects, including software objects.  Image-schemata \noffer ways of observing, knowing, communicating, and inventing. The risk, ever-present and ever so easy, \nis to reify these rhemes into reductionist or operational recipes a job they are ill suited to do. Volume \nTwo, the last to be published and, in signi.cant ways, the least complete, adds the dimension of time \nto the initial static presentation of the .fteen properties given in Volume One. The properties are explored \nin the second tome as transformations, i.e., the actual mechanisms of living systems as they unfold over \ntime. A video, for example, of a developing human fetus shows growth through increasing differentiation: \nparts increase in contrast, growth is through local symmetries at different levels of scale, both individual \ncells and proto-organs develop boundaries or transition zones. Simultaneously we see that no center, \nbe it heart, lungs, or pinky .nger, will be isolated, but rather there is not-separateness. [Each of \nthe words in italics is one of the .fteen properties.] At any point in the evolution of fetus, the fetus \nis whole unto itself, as is the born child who continues on to adulthood. Then, Alexander points out \nthat a parallel process of differentiation and increased density of overlapping centers can be observed \nin the unfolding of successful buildings and towns. Alexander does not offer design instructions as to \nthe order in which the properties should be conjured forth as inspiration. Rather it is the understanding \nor vision of the whole which guides the process. In Enterprise Domains we .nd something of a parallel. \nPaul Hawkins in Growing a Business speaks eloquently for the need of deep rooted knowledge and intuitive \nunderstanding of a business as a whole if that business is going to continually learn, survive, and unfold \nwell. The failure rate and short life span in business speaks to the dif.cultly of such thick domain \nknowledge. 9. What Every Schoolboy Knows. . . Before we delve into domain stories (our Agile weakness) \nand how Alexandrian image-schemata (our illustrative example) can spur good thinking, four preliminary \ncomments may provide a useful entry into the subject matter. First, we want to underscore how un-Cartesian \nAlexander s .fteen schemata really are, and, in that sense, helpful in shaking programmers out of their \ndoldrums and habitual ruts. Alexander s properties are more in tune with what phenomenologists call lived \nspace, i.e., that day-to-day unexpressed and somewhat inexpressible sense of space that we all have as \nwe orient ourselves from our source.our  bodies.into the surrounding environment. User experience designers \nare grappling with exactly this kind of problem. Roughness (one of the .fteen properties see sidebar), \nfor example, honors the relaxation and disclosure of the full range of bodily sense and posture..uid, \nnot completely open, but not that narrow. Designers of all stripes want a brief, a project charter, with \nexactly this kind of roughness. Other properties, good shape, positive space, contrast, boundaries, gradients, \nclearly make more lived space sense than the razor thin A/not A categories from our geometry lessons. \nAlexandrian space reveals a rich .eld-like structure rather than space which is empty, transparent, unstructured \nand isotropic. Alexander would subscribe to the following quote from Newton s Latin version of Optics, \nQuery 20 (for Newton, too, had his moments of metaphysical wonder), Annon spatium universuum, sensorium \nest entis incorporei, viventis, et intelligentis? (Is not in.nite space the sensorium of a being incorporeal, \nliving and intelligent?) [Newton removed the phrase from the English version when he was in a knock-down-drag-out-.ght \nwith Leibniz, perhaps not wanting to appear as too mystical.] As a second point, we need to make a special \nkind of spatial translation of Alexander s schemata. We need to think of space as something else even \nthough we use spatial metaphors (balance of power, span of control) when describing the enterprise domain. \nSeveral candidates come to mind: power, wealth, control, even market, but we will suggest another dimension, \nthat of behavior, as the most appropriate candidate. For example (and an important example) an Alexandrian \ncenter, is not a point-center of a geometric circle but, rather, a focal zone created by the .eld around \nit, just as we experience centers of power or centers of action, in an enterprise through various kinds \nof behaviors. Most of the time, in Alexander s work, centers are discussed in terms of familiar two and \nthree-dimensional space. However, when we think in terms of time, balance of power, span of control, \nor behavior, Alexander s concept of unfolding can be used more loosely. For example, if we review our \nstory of the Swiss village and its original cottage industry, the centers of behavior, village organization, \nand product lines evolved quite signi.cantly, but there is still a recognizable continuity of an essence \n( the cultural human community) that persists. Third, a few authors (R\u00e9gis Medina, an Agile practitioner \nin France, for one) have looked to Alexander s new material as a way to improve implementation stories, \nand while we think highly of these contributions, we feel the more insightful angle, and most certainly, \nthe more propitious place to start, is to borrow insights from Alexander to tell stories about the domain. \n And fourth, we must tell some mythic stories about the world as context for the Alexander inspired, \ndomain stories. The Universe We believe that the universe is a system composed of nested subsystems. \nWe used to think that the Universe was something like massive clockworks, deterministic and mechanical \nin nature. But that was an earlier Zeitgeist, although businesses and management schools held on tight \nto that idea all the way through the 20th century. Now we ve moved on to a better understanding and view \nthe universe as a complex, living, system with emergent behavior, signi.cant non-determinism, much closer \nto an organism or ecology than clockworks.  Of course, most of us are not going to be concerned with \nwriting software for the universe or even Ultra-Large Systems. Instead we will be focusing on speci.c \nsubsystems. And of course, some of those subsystems will be formal. Examples of this kind of software \nwould include operating systems, .rmware, hardware drivers, etc. When developers deal with this kind \nof static system, they are best advised to use the techniques of software engineering as is. Our interest \nhere, however, is in the design of [sub] systems (and supporting software) that are not formal in nature, \nbut consistent with our contextualizing story of the Universe as Complex System. The vast majority of \napplications software .ts into this category. 10. Excerpts from A Gecko s Tale In order to show how we \nmight tell stories about a speci.c domain using Alexandrian image-schemata, we will pick the domain of \nInsurance (an area where both of us have consulting experience) and use the Wheel of Life Mandala as \na visualization tool. Let s start with the core of the Mandala a circle that is a center. Nestled inside \nare icons which act as contributing centers. These icons represent focal ideas and gather many stories \nof the primal forces involved. The act of centering the generative engine at the spatial center of the \nWheel, draws on our primitive image-schemata to reinforce its essence as driver/creator of all else. \nThe Mandala is further strengthened and de.ned by the boundary and its good shape. Our initial circle-as-center \nwill echo across the Wheel as our work progresses. An over arching story associated with this space is \na variation on Money Makes the World Go Round with all the primal forces that generate the insurance \ndomain. We can easily create visual reminders of such forces: money (represented by a U.S. dollar sign), \npeople (a stick-.gure icon), assets (a bank vault icon), and risk (a tornado/cyclone icon). Contrast \nre.ects the categorically quite different risks such as money, people, and assets. As centers, we expect \nall three to be complex and composed of nested centers at different levels of scale. We can tell stories \nabout each to bring to mind their essential nature. For example, stories of the Great Tsunami of 2008, \nor The San Francisco Earthquake, or The Great Chicago Fire, reveal the nature and the composition of \nthe Risk center. Similarly, we could tell stories about costs, pro.ts, losses, expenses, and capital \nto better unpack the Money center. The generative power of the core arises from interlocked and ambiguously \nexpressed interactions and inter\u00adrelationships among the centers in that core. The interlock is suf.ciently \ndeep and the nuances of interaction are suf.ciently ambiguous that we will never run out of stories to \nbe told. This is a good thing, because new stories are the source of innovation (new products, re-designed \nprocesses, new organizational structures) and adaptability. Think of all the new process stories that \nhad to be invented for on-line purchase of policies. Or, just what is an asset? Jennifer Lopez s Lips \nBring in Bucks Betty Grable insured her legs, Liberace his hands, and now Jennifer s lips, full, glossy, \nsensual, were the talk of Hollywood after the debut of her .lm, Sex Kitten and Dracula. This spurred \nGecko into launching a new insurance product line around collagen and Botox mishaps. Disambiguating the \ninteractions, surfacing and removing the deep interlocks, even if possible, does not lead to greater \nunderstanding; it merely results in a reductionist, lowest common denominator, cookie-cutter systems \ndesign. Stories about the interplay among the primal movers create the context for the other centers. \nIn our insurance company (a structural center), actuaries rely on stories that illustrate the uneven \ndistribution of risk across a customer base (people) and how that distribution affects costs and pro.ts. \nFor example, the following stories, a sad saga of Sam, and Dave the Harley guy, expose the deep interlock \nbetween human hormones, particular kinds of assets, and different perspectives of risk; thereby de.ning \ndifferent actuarial centers. He Never Reached Manhood Sam, on his sixteenth birthday, took his piggy \nbank and bought himself a 2000cc crotch rocket motorcycle and took off for Denver. Taking his .rst hairpin \nturn at full throttle, he missed the curve, crashed into a boulder, and that was the end of young Sam. \nHelmetless Dave I won t wear a motorcycle helmet. Helmets impair my hearing and hasten fatigue thereby \nincreasing the likelihood of an accident. Marginal Impact injury prevention is replaced by a greater \nchance of torque injury. And .gures show that cowardly but experienced grumpy old guys like me, sans \nhelmet, are at less overall risk than helmeted but reckless teenagers. To develop a Theory of a large \nand complicated domain, we must partition the domain into more comprehensible pieces decomposition. Stories \nand objects are the metaphorical knives we use to carve out our partitions, augmented by an understanding \nof properties (especially centers and  nascent centers through boundaries, contrast, void), old programming \nconcepts, like coupling and cohesion, and metaphors like behavior and homunculi. Coupling and cohesion \ntraditionally have been misused inside out, as tools to aggregate computer functions and represented \ndata (stuff inside the machine) and not as tools to partition the World. Here, however, we look to the \nkind of user stories and objects that emerge from telling stories about primal forces to more accurately \nre.ect the natural elements of a domain. Behavior provides a criteria for decomposition that maps to \n(and translates) Alexander s spatially de.ned properties; it represents Naur s executing software, and \nis a feature common to software, human, and abstract entities in our domain. Behavior-based decomposition \nof a business enterprise begins with the people, or more precisely, with job roles and their attached \nbehaviors (duties, responsibilities, and tasks). Processes are simply ordered collections of discrete \nbehaviors. In our insurance company we see behavior centers named Agent, Underwriter, and Claims Adjuster. \nWe need to extend our thinking about behavior to the inanimate elements of the system as well. For example, \nwhat are the behaviors of a document? Using action verbs forms, a document:  Collects a set of pages \n Adds, deletes pages from itself  Orders the pages in collaboration with the individual pages  Provides \na page on request  Identi.es itself  Presents itself, also in cooperation with individual pages  We \nwant strong centers, and to strengthen them we now use our old friend, cohesion. But cohesion, in this \ncase, means that the behaviors are appropriately aggregated from the perspective of the domain. For example, \nwe do not ask actuaries to investigate claims even though they possess information about accidents that \nwould allow them to do so. Centers are strengthened (cohesion is increased) when there are boundaries, \ngood shape, contrast, and simplicity and inner calm. Centers do not exist in isolation (Alexander s not\u00adseparateness) \nbut are coupled to other centers. As we know, loose coupling is preferred. A number of properties contribute \nto loose coupling of centers: positive space (which loosely couples adjoining centers, such as the dancers \nin Figure Eight) and void are two. [For void, think of how a public square (void) decouples surrounding \nparts of a city by offering multiple pathways among them. In contrast, two parts of a city connected \nby a single bridge are tightly coupled. In software, multiple objects connected by a single name space \n(bridge) are tightly coupled, whereas the same objects connected by a directory (a container of multiple \npossible connections or, in Hillier s lingo a carrier space ) are decoupled.]   Other properties, echoes, \ngradients, and alternating repetitions, provide additional ways to couple centers, or at least establish \nrelationships among them. These are more akin to the way that we organize departments or processes as \nrelationships among centers. We apply similar coupling and cohesion principals here because we would \nlike our processes to be as adaptable and .exible as possible. Examples would include:  The way that \nCray Research echoed both the physical layout and the organizational structure of the small Chippewa \nFalls of.ce where Seymour Cray and two associates wrote the Cray One operating system across their entire \ncampus complex in Minnesota.  Well crafted, and addictive, games offer a challenge gradient that can \nascend as user experience and expertise increases.  The alternating repetitions that generate the rhythms \nof Agile development: build (test &#38; code), then improve (refactor) or listen (user stories and on-site \ncustomer), then interpret (test and code, again), or then, do (sprint), and re.ect (retrospective). Deep \ninterlock and ambiguity is a property whose name seems to suggest stronger coupling than might be desirable. \nBut in fact it captures the essence of another well-known software principle.the association. (A Reservation \ncenter resolves the deep interlock and attribute dependencies between Room and Event centers, establishes \nappropriate loose coupling, and preserves the ambiguity of what event might be in what room when until \na concrete instance must be scheduled.) The astute reader will notice that Alexander s schemata brings \nus, by another route, within range of the behavioral approach to object design \u00e0 la Ward Cunningham, \nKent Beck, Rebecca Wirfs-Brock, and Nancy Wilkerson, that was generally dismissed as informal, messy, \nartsy, and hopelessly devoid of strong manly type systems. Nor would this approach be foreign to scienti.c \ninquiry. Maxwell s Demon In a thought experiment about equilibrium in gas pressure, Maxwell s demon is \na hypothetical homunculus that has a behavioral obsession of standing in the doorway connecting two compartments \nin order to admit or block the passage of individual molecules between the two chambers. The demon s \ngoal? Balance out the distribution. If provided with information about the speed of individual molecules \n(and a bit of malice), Maxwell s demon would be able to violate the second law of thermodynamics. A .nal \nexample, this time of thinking about design and foreshadowing implementation. The properties of interest \nare: levels of scale, echoes, and roughness. We will also return to our Thangka metaphor. The outermost \ncircle of the Wheel of Life depicts the cycle of life, the sequence of stages from birth to birth. The \ncircle itself is a sequence of segments, each segment representing a life phase and each segment being \na cycle unto itself. So the Circle of Life is an object, speci.cally, an ordered collection that consists \nof phases, that are themselves objects, most often also an ordered collection. The Wheel of Life for \nour insurance company is a process, or more accurately, an ordered collection of processes identi.ed \nas: Identify Prospect Collect policy information Rate policy Underwrite policy Issue Policy Collect premiums \nAccept claim Terminate policy  Roughness comes into play when you recognize that each of the component \nparts of the overall process are stronger to the extent they are autonomous and not tightly coupled, \nyet allowing the others to .nd their place. The elements themselves are diversely shaped and loosely \ncoupled, making it possible to completely re-organize or restructure the entire process merely by changing \ncomponents, or the interfaces among the components. Organizations that ruthlessly pursue total integration \n(\u00e0 la SAP) remove roughness and hence adaptability. Echoing our collect policy information, (which is \nan ordered collection of processes), display data collection forms must accept input, validate input, \nand submit validated input. Similarly, the issue policy process would be a process collection: add page, \ncreate page, add boilerplate, add fact, and add text string. In this example we see both echoes and levels \nof scale as individual objects, such as data entry form and policy, have the same ordered collection \nof objects aspect. The form is an ordered collection of text strings and entry .elds and another, unseen, \nordered collection of validation rules. The policy is an ordered collection of pages, and a page is an \nordered collection of text strings, glyphs, and values. A text string is an ordered collection of characters. \nA validation rule is an ordered collection of operators, constants, and variables. 11. Have You Heard \nThe One About. . . In our insurance example, we have used image-schemata\u00adinspired thinking to decompose \na complicated domain and design components that could be directly and simply implemented as software. \nThere is not an algorithm, data structure, mathematical formalism, or logical argument in sight. We have \nshown the potential of metis-ical thinking and laid a foundation for developing the following corollary \ninsights. The .rst is theoretical and speculative. One of the more mystical metis-ical topics in The \nNature of Order is unfolding. Alexander, true to his dual nature approach, is looking to emulate the \nnatural behavior of a seed (as it unfolds through several stages to become a .ower or tree), to create \na kind of evolutionary design of the arti.cial. The behavior of the seed is grounded in the structure \nof its DNA which is an ordered collection of genes, which are ordered collections of bases. The ability \nof a single instance of a seed to unfold into its ultimate form is encoded in its DNA, so too is the \nvariability of forms from essentially identical instances of DNA. Variation in form comes from context \nenvironmental factors that replace or activating different members of the ordered collections, such that \ndifferent unfoldings occur. In our example of the data collection form we have something that is metaphorically \nand behaviorally similar to the seed. A form is essentially a nested set of ordered collections (\u00e0 la \nDNA string, gene, base). A .nished, behaviorally active, form unfolds from the operation of the elements \nin those nested ordered collections. Variability of form (order form, job application, insurance application, \netc.) requires simple addition, deletion, or substitution of elements in one or more of the ordered collections \nas to which change will be appropriate, that will be determined by the stories that contextualize the \nunfolding. Second, pragmatic bene.ts have also been obtained. Adaptability is readily apparent. An enterprise \n(if understood and modeled behaviorally) can change any of its processes or any of its component objects \n(including translating them from the tangible to the digital) by adding, deleting, substituting, or re-ordering \nelements of its nested ordered\u00adcollections. The property, simplicity and inner calm (a de- cluttering \nof all unnecessary centers leaving the remaining ones stronger), is also quite real. The core of the \ndata entry form.which is all possible forms.can be implemented in less than 100 lines of Smalltalk code. \nThose hundred lines are distributed across .ve objects (classes) and roughly thirty methods, so every \ncode statement or method is trivial to understand.  Third, we have reinforced Agile stories and a Lean \nprinciple, by using those stories to delay the departure from the ambiguous (ambiguity being simply maximum \npossibility). Fourth, Peter Naur s insights and Agile s concept of storytelling provided the bridge to \ncross from familiar mind sets to those that are strange. We have also opened the door for consideration \nof other essential sources of insight. Networks, weak links, design thinking, and complex adaptive systems \nare but four such sources. In essence, we have shown why more stories should be told, and object and \nuser stories recast as ambiguous and dynamic through the use of proto-scienti.c schemata. And, really, \nfolks, stories are .rst and foremost, a way to improve our sense-making skills. 12. Choose Life. Choose \nStories The moral of our tale is that we have a choice. Machines are sterile. Dead as dead can be. Only \nliving systems are fecund, intellectually productive, generative. The most compelling enterprise need, \ntoday, is the ability to innovate, adapt, and learn. These are characteristics of living systems, not \nmachines. Software can be either dead or alive in how it handles or supports and it all depends on the \nphilosophical presup\u00adpositions.our myths of the World.that contextualize our Theory. We can choose. Our \nprofession would do well to eschew what we think we know and diligently explore what others are learning \nabout living systems. Software developers could nurture their inner artist. And, just as other kinds \nof artists are drawn to the marginal, counter cultural, night life areas of a city, we need a software \ndevelopment environment that is similarly loose, permissive, and tolerant of the subliminal. We need \nstory telling as our primal social action where an utterance to an audience is a transfer to the collective. \nAcknowledgments We thank Andr\u00e9 Demailly, Charles R. Adams, Mary West and Daniel Steinberg for their invaluable \ncomments.  13. Annotated Bibliography Alexander, Christopher. Notes on the Synthesis of Form, Cambridge: \nHarvard Paperback, 1964. Alexander s published Ph.D. exposes his struggle between his training in math \nand logic and mystical intuitive sources of knowledge. Alexander, Christopher. The Timeless Way of Building, \nNew York: OUP, 1979. The Big Picture on the why of architecture.which is to achieve QWAN. The Quality \nWithout a Name is rede.ned in his latest work as God. Alexander, Christopher, Sarah Ishikawa, Murray \nSilverstein, with M. Jacobson, I. Fiksdahl-King, S. Angel. A Pattern Language, New York: OUP, 1977. The \nhow-to book which supplements The Timeless Way on the why of architecture. Alexander, Christopher. The \nNature of Order, Berkeley, California: CES, 2003-2005. Four volume magnum opus attempting quite literally \nto decipher the nature of order in the universe and how to harness its secrets. Bronowksi, Jacob. The \nVisionary Eye: Essays in the Arts, Literature, and Science, Cambridge, Massachusetts: MIT Press, 1978. \nBronowski makes the pitch that art and science are but two compatible and mutually reinforcing sides \nof man s inquisitive mind. Brooks, Frederick P. No Silver Bullet: Essence and Accidents of Software Engineering, \nComputer, Vol.20, No.4 (April 1987). As explained in the essay, he looks at the conceptual construct \nbehind programming. de Geus, Arie. The Living Company: Habits for Survival in a Turbulent Business Environment, \nCambridge, Mass., Harvard Business Press, 2002. Gabriel, Richard. Patterns of Software, Oxford University \nPress, 1996. The use of patterns thinking in software. Gass, William. Habitations of the World, Cornell \nUniversity Press, 1985. Essays on writing and source of quotes by Gass and Robert Louis Stevenson. \nGeertz, Clifford. Toward an Interpretative Theory of Culture, New York, N.Y.: Basic Books, 1973. A collection \nof essays, the .rst of which looks at thick descriptions as a major methodology in ethnography. Hawkins, \nPaul. Growing A Business, New York: Simon &#38; Schuster, 1988. A book for entrepreneurs speaking about \nhow a business unfolds, but getting the sequence of business decisions right requires in-depth understanding \nand feel for the industry. Hillier Bill and Hanson J. The Social Logic of Space, Cambridge: Cambridge \nUniversity Press, 1984. Basic text on space syntax. Provides concepts such as pathways, access, and intelligibility \nabsent in Alexander s work. Holton, Gerald. The Scienti.c Imagination. Cambridge, Harvard Press, 1998. \nCase studies of inquiry which reveal the subliminal schemata at work.  Johnson, M.L. The Body in the \nMind: The bodily basis of meaning, imagination and reason, Chicago: University of Chicago Press, 1987. \nClassic text on the role of bodily metaphors in thought. Medina, R\u00e9gis www.regismedina.com R\u00e9gis Medina \nof Crossbow Labs in France keeps an interesting blog on the using concepts from The Nature of Order in \nimplementation design. Naur, Peter. Programming as Theory Building, Micropro\u00adcessing and Microprogramming, \n15, (1985). Peirce, Charles S. Values in a Universe of Chance, Selected Writings of Charles S. Peirce, \neditor Philip Wiener, Doubleday, 1958. Quillien, Jenny. Delight s Muse: on Christopher Alexander s The \nNature of Order, Ames, Iowa: Culicidae Press, 2008. A beginner s set of cliff notes on the main themes \nof the four volumes. Quillien, Jenny. Haunted Spaces for Lesser Gods: A more modest interpretation of \nChristopher Alexander s Findings in Book Four of The Nature of Order, paper prepared for EDRA (Environmental \nDesign and Research Association), Washington D.C., June 2010. Available from the author upon request. \nPaper proposes a secular explanation rather than Alexander s theistic one. Scott, James. Seeing Like \na State: How Certain Schemes to Improve the Human Condition have Failed, New Haven: Yale University Press, \n1999. An account of how the State has required legibility in order to govern and imposed thin techne \nover thick metis knowledge. Shank, Robert. Tell Me A Story: A New Look at Real and Arti.cial Memory, \nChicago: Athenaeum Press, 1991. A look at how and why stories serve human cognition so well. Week, David. \nA hermeneutic approach to the practice of architecture in a foreign country, Ph.D. thesis, University \nof Sydney, Australia, 2000.   \n\t\t\t", "proc_id": "1869459", "abstract": "<p>Fine-grain case studies of scientific inquiry, lessons from linguistics on metaphoric thinking, the epistemology of Charles Sanders Peirce, recent work on architectural image-schemata, along with the computer world's own theorist, Peter Naur, all suggest that software developers (frequently dulled and desiccated from overdosing on 'Cartesian' methodologies) could benefit from imbibing a little 'mysticism' not the wave-your-hands woo-woo kind but the more ineffable hunch and gut side of human cognition. Scholarly publications in their final polished forms rarely admit that stories, jokes, eroticism, and dreams were the fertile seeds that germinated into 'serious' results. This essay looks to these 'closet' sources, non-reductionist, non-self conscious, metaphorical, aformal modes of thought as the salvation of a profession gone awry. It is notably proto-scientific image-schemata that retain our attention as a pragmatic tool for improving the fecundity of Agile methodology, at its roots, so to speak. The necessary context is provided by Peter Naur's fundamental insights about software development as 'theory building' coupled with an elaboration of the Agile concept of storytelling.</p>", "authors": [{"name": "Jenny Quillien", "author_profile_id": "81444607439", "affiliation": "New Mexico University at Highlands, Santa Fe, NM, USA", "person_id": "P2354186", "email_address": "", "orcid_id": ""}, {"name": "Dave West", "author_profile_id": "81414594637", "affiliation": "New Mexico University at Highlands, Las Vegas, NM, USA", "person_id": "P2354187", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1869459.1869534", "year": "2010", "article_id": "1869534", "conference": "OOPSLA", "title": "Rubber ducks, nightmares, and unsaturated predicates: proto-scientific schemata are good for agile", "url": "http://dl.acm.org/citation.cfm?id=1869534"}