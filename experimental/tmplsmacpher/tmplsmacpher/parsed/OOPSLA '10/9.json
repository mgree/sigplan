{"article_publication_date": "10-17-2010", "fulltext": "\n Agility in Context Rashina Hoda Philippe Kruchten James Noble Engineering and Computer Science Electrical \nand Computer Engineering Stuart Marshall Victoria University of Wellington Wellington New Zealand University \nof British Columbia Vancouver Canada Engineering and Computer Science Victoria University of Wellington \nWellington rashina@ecs.vuw.ac.nz pbk@ece.ubc.ca New Zealand {kjx,stuart}@ecs.vuw.ac.nz Abstract Evangelists \nfor Agile methods strongly encourage all projects to follow every practice of their chosen method. Based \non a Grounded Theory study involving 40 participants at 16 or\u00adganizations, and corroborated by 4 independent \ncase studies, we argue that development methods and practices must be adapted to .t their contexts. Understanding \nAgility in con\u00adtext will help development teams, their managers, and Agile coaches to adapt development \nprocesses to .t their projects contexts. Categories and Subject Descriptors D.2.9 [Software Engi\u00adneering]: \nManagement; K.6.1 [Management of Computing and Information Systems]: Project and People Management General \nTerms Documentation, Human Factors, Manage\u00adment, Theory Keywords Adaptation, Agile Software Development, \nAgility, Context 1. Introduction Agile evangelists exhort teams to adopt their methods whole. For example, \nevery project following Scrum must adopt ev\u00adery practice, enacted precisely as described in the Scrum \nmanuals, books, and courses [57]. Projects that do not fol\u00adlow these methods by-the-book are derided \nas Scrum\u00adbutts , and invited to measure the Ten Ways You are Not AGILE , or take the Nokia Test [12, \n57, 59]. After all, if you are almost doing XP, then you are not doing XP [20]. Prac\u00adtitioners must have \nthe courage to try [6] because Scrum works in any environment and can scale to programming in Permission \nto make digital or hard copies of all or part of this work for personal or classroom use is granted without \nfee provided that copies are not made or distributed for pro.t or commercial advantage and that copies \nbear this notice and the full citation on the .rst page. To copy otherwise, to republish, to post on \nservers or to redistribute to lists, requires prior speci.c permission and/or a fee. OOPSLA/SPLASH 10, \nOctober 17 21, 2010, Reno/Tahoe, Nevada, USA. Copyright c . 2010 ACM 978-1-4503-0203-6/10/10. . . $10.00 \nthe large [58], and if pain persists then you .rst have to believe [38]. In contrast, an increasing number \nof practitioners and re\u00adsearchers support a contextual approach to Agile develop\u00adment, where Agile methods \nare adapted to suit their context [1, 17, 18]. Conboy and Fitzgerald s study of experts opin\u00adion on Agile \nmethods notes that the very name agile sug\u00adgests that the method should be easily adjusted to suit its \nenvironment [18]. We have conducted a large-scale Grounded Theory study of Agile practices involving \n40 Agile practitioners from 16 software development organizations in New Zealand (NZ) and India [32 36]. \nIn this paper, we present the results of our study as they relate to the adaptation of Agile methods \nto suit their projects context. We have corroborated our study by four independent case studies. Agile \nmethods work well for projects within particular contexts: small; co-located teams; customers (product \nown\u00aders) who can make decisions on requirements; requirements that change over weeks or months; variable \nscope or vari\u00adable price contracts; and few legal or regulatory constraints on development processes. \nThis raises an important ques\u00adtion: what can projects do (indeed, what should projects do) when they \ndo not fall within these contexts? Our study uncovered how development teams evolve Ag\u00adile practices \nto .t other contexts offshore or distributed de\u00advelopment; projects without customers to provide require\u00adments; \nrequirements or systems that change rarely; or the legal necessity of certi.cation of product and process. \nBy .tting their practices to their project s context, teams can cleave to the principles of Agile development, \neven if they depart from one or more particular practices. The rest of the paper is organized as follows: \nwe brie.y describe the principles of Agile software development in section 2, followed by a description \nof our research method\u00adology and limitations in section 3. Section 4 presents our research .ndings, and \nthen section 5 discusses the implica\u00adtions of our .ndings. Section 6 concludes the paper.  2. Background: \nAgility in Principle Agile software development methods emerged in the late 1990s [41]. The term Agile \nwas adopted as the umbrella term for methods such as Scrum [53], XP (eXtreme Pro\u00adgramming) [6], Crystal \n[11], FDD (Feature Driven Devel\u00adopment) [46], DSDM (Dynamic Software Development Method) [54], and Adaptive \nSoftware Development [30]. Agile methods are characterized by iterative and incremen\u00adtal development \nand promote frequent delivery of product features that are prioritized in consultation with the cus\u00adtomers, \naiming to deliver business value in each iteration. Agile methods address small, co-located, dedicated, \nand highly collaborative teams [8, 21, 45]. Scrum and XP are the most widely adopted Agile methods [47]: \nXP focuses on developmental practices, while Scrum mainly covers project management [21]. Agile methods \nare well-suited to projects with highly volatile requirements they encourage projects to embrace change \n[6] and promote responding to change [31]. Adolph has de.ned Agility as the ability of an organiza\u00adtion \nto react to change in its environment faster than the rate of these changes [2]. The developers of some \nof these Agile methods collabo\u00adratively wrote the Agile Manifesto: Individuals and interactions over \nprocesses and tools Working software over comprehensive documentation Customer collaboration over contract \nnegotiation Responding to change over following a plan. That is, while there is value in the items on \nthe right, we value the items on the left more. The principles behind the Agile Manifesto [31] include \nfast, frequent, consistent, and continuous delivery of work\u00ading software; responding to changing requirements; \nencour\u00adaging effective (preferably face-to-face) communication; and motivated and well-supported self-organizing \nteams. The last principle speci.cally supports regular self-inspection and adaptation: At regular intervals, \nthe team re.ects on how to become more effective, then tunes and adjusts its behavior accordingly [31]. \n3. Research Method 3.1 Grounded Theory Study Grounded Theory (GT) is the systematic generation of the\u00adory \nfrom data acquired by a rigorous qualitative research method [26, 27]. GT was developed by sociologists \nGlaser and Strauss [29]. GT does not involve hypothesis testing, rather the research product constitutes \na theoretical formu\u00adlation or integrated set of conceptual hypotheses about the substantive area under \nstudy [25]. We chose to use GT as our research method for several reasons [34]. Firstly, Agile methods \nfocus on people and in\u00adteractions, and GT, used as a qualitative research method, enables us to study \nsocial interactions and behaviour. Sec\u00adondly, GT is suited to areas of research which have not been explored \nin great detail before, and the research liter\u00adature on contextualization of Agile methods is scarce. \nFi\u00adnally, GT is increasingly being used to study Software En\u00adgineering [5, 9, 10, 39] and in particular, \nAgile methods [3, 14, 16, 34, 43, 62]. Using GT, we have applied a rig\u00adorous research method to study \npractical applications of Agile methods and to analyze and explain the results. We started out with a \ngeneral area of interest Agile project management instead of beginning with a speci.c research question \n[16, 26]. Data Collection We interviewed 40 Agile practitioners from 16 different software organizations \nin 2 countries New Zealand and India. We interviewed participants from a range of different roles within \nAgile projects, so as to ensure that we had a rounded perspective of how their Agile teams worked. In \nparticular, we interviewed and observed Agile Coaches (Scrum Masters and XP Coaches), Developers, De\u00adsigners, \nTesters, Business Analysts, Product Owners, and Senior Management. All the teams we studied have adopted \nAgile development methods, primarily Scrum. The teams used Agile practices such as iterative development, \nrelease and iteration planning, test-driven development, daily stand\u00adup meetings, frequent delivery of \nsoftware, and continuous integration. The .rst part of table 1 shows participant and project details \nfor the Grounded Theory Research Study. The projects durations varied from 1 to 48 months and the team \nsize varied from 4 to 15 people on different projects. The products and services that the participants \nor\u00adganizations offered included web-based applications, front and back-end functionality, and local and \noff-shored soft\u00adware development services. Half the participants were prac\u00adtising in India and half in \nNZ. The organizational sizes varied from 10 to 300,000 employees. To preserve con.dentiality, we refer \nto our participants by numbers P1 to P40. We conducted face-to-face, semi-structured interviews using \nopen-ended questions. The interviews were approxi\u00admately an hour long and were scheduled at the practitioners \nworkplaces or mutually agreed public locations. The inter\u00adview questions focused on the participants \nexperiences of working with Agile methods and in particular, we asked about the challenges they faced \nin Agile projects and the strategies they used to overcome them. Although the answers varied with the \nindividual participants, we later discovered during analysis that projects contexts lead teams to adjust \ntheir practices. The interview data was strengthened by our observation of several Agile practices on \ntwo projects in NZ and two in India. We attended and observed Agile practices such as daily stand-up \nmeetings (co-located and distributed), re\u00adlease planning, iteration planning, and demonstrations of the \nteams from which our interview participants were derived. In order to maintain consistency in the application \nof Grounded  Table 1. Participants and Projects (P#: Participant Number, Agile Position: Agile Coach \n(AC), Agile Trainer (AT), Developer (Dev), Customer Rep (Cust Rep), Business Analyst (BA), Senior Management \n(SM); Organizational Size: XS < 50, S < 500, M < 5000, L < 50,000, XL > 100,000 employees) Grounded Theory \nResearch Study Corroborating Case Studies Theory, all data was collected and analyzed personally by \nthe primary researcher (.rst author). Data Analysis We used open coding to analyze the in\u00adterview transcripts \nin detail [26]. In order to illustrate GT analysis, we present an example of working from interview transcripts \nto results for one of the categories, Lack of Cus\u00adtomer Involvement. Other examples of our GT analysis \nare described elsewhere [33, 34, 37]. We began by collating key points from each interview transcript \n[4, 24]. We then as\u00adsigned a code to each key point. A code is a phrase that sum\u00admarizes the key point \nin 2 or 3 words. Interview quotation: Big, big issues are getting enough collaboration time with the \n[customers]...there s no way less than a full time person would be able to keep up with getting all the \nrequirements. P14, Agile Coach, NZ Key Points: Dif.culty in eliciting collaboration time with customers \nand Customer involvement in Agile de\u00admands full time involvement Code: Lack of customer collaboration \ntime The codes arising out of each interview were constantly compared against the codes of the same interview, \nand those from other interviews and observations. This is GT s con\u00adstant comparison method [27, 29]. \nIn this example, other similar codes were Insuf.cient time allocated to customer representatives (P11) \nand Playing Agile customer along\u00adside operational job (P5) . Using the constant comparison method we \ngrouped these codes to produce a higher level of abstraction, called concepts in GT. Concept: Lack of \ntime commitment Other concepts that emerged include: Skepticism and Hype, Distance Factor, Dealing with \nLarge Customers, and Ineffective Customer Representative [33]. Finally we re\u00adpeated the constant comparison \nmethod on concepts to pro\u00adduce a third level of abstraction called Categories. Category: Lack of Customer \nInvolvement The other concepts and categories emerged in a similar fashion. These concepts and categories \nform the contexts in which practitioners .nd it dif.cult to follow Agile methods by-the-book. Other sets \nof concepts formed the adaptation strategies used to adapt Agile practices to suit these chal\u00adlenging \ncontexts. For example, the adaptation strategies used to overcome the problem of Lack of Customer Involvement \ninclude Story Owners and Customer Proxy. Figure 1.a shows shows the levels of data abstraction using \nGT and 1.b illus\u00adtrates the emergence of the category Lack of Customer In\u00advolvement from underlying concepts. \n Figure 1. a: Levels of data abstraction in GT b: Emergence of category Lack of Customer Involvement \nfrom concepts Other important elements of GT include memoing and sorting. Memoing is the ongoing process \nof writing theoreti\u00adcal memos or notes throughout the GT process [26]. Writing memos helped us pour out \nall the ideas about certain codes, concepts, and categories and allowed us to capture the con\u00adceptual \nconnections between categories [37]. Once we were nearly .nished with data collection and analysis, we \nbegan to conceptually sort the theoretical memos a process called Sorting [37]. The .nal step of GT is \ngenerating a theory, also known as theoretical coding. Theoretical coding involves concep\u00adtualizing how \nthe categories (and their properties) relate to each other as hypotheses to be integrated into a theory \n[26]. Following Glaser s recommendation, we employed theoret\u00adical coding at the later stages of analysis \n[25], rather than being enforced as a coding paradigm from the beginning as advocated by Strauss [56]. \nGlaser lists several common structures of theories known as theoretical coding families [26, 28]. By \ncomparing our data with the theoretical coding families, it emerged that the coding family best .t for \nour data was the Strategy family [26]. The strategy family includes strategies, tactics, mechanisms, \nhandling, techniques etc. We have used the strategy family to describe our theory of adapting Agile practices \nto suit their context of use in the following section. Table 2 shows the different concepts and categories \nthat form the Contexts and the corresponding concepts that form the Adaptation Strategies used in those \ncontexts. Since the codes, concepts, and categories emerge directly from the data, which in turn is collected \ndirectly from the real world, the resulting theory is grounded within the context of the data [3].  \n3.2 Corroborating Case Studies The second author conducted separate longitudinal case studies on 4 organizations \nin North America, over a period of 7 years: FIN: Financial institution, involved in securities trading. \nLarge legacy system re-engineering.  FACT: Very large scale manufacturing process control, for continuous \noperation. Real-time software embedded in a network of several hundreds of processors.  FLY: Information \nprocessing for aerospace industry, some of it safety-critical as it is deployed in the aircraft.  MATH: \nAnalytical methods for security trading, derived from physics theories.  All the four organizations \nwere already familiar with Ag\u00adile methods, or some Agile practices; they had received training and guidance, \ndone some pilot projects and thought they were ready to deploy Agile on more signi.cant en\u00addeavours. \nThe second part of table 1 shows participant and project details for the corroborating case studies. \nThe second author was brought in as a consultant when the projects hit some dif.culties applying Agile \nmethods by\u00adthe-book. These four case studies independently corroborate the .ndings of the Grounded Theory \nstudy. Data Collection The second author had a series of consult\u00ading and training engagement with 4 companies \nin diverse industrial sectors, and at various stages of agile adoption. Examining their current state, \nanalyzing their current dif\u00ad.culties, and interviewing different teams members from CEOs, program mangers, \nand chief architects, to develop\u00aders, testers, and student interns provided a great source of insight \nboth on Agile processes themselves, and on the the impact of the context on the success of adoption. \nFurther research is being conducted with one of the companies, to analyze the root causes of their technical \ndebt [19, 44]. Data Analysis In the case of the four consulting and train\u00ading engagements, the analysis \nof the .ndings was done jointly with senior team members, and senior management to devise a plan for \nremediation or for going forward, a plan that included some process adaptation.  3.3 Limitations and \nThreats to Validity The inherent limitation of a Grounded Theory study is that the resulting theory can \nonly be said to explain the speci.c contexts explored in the study. The adaptations that we dis\u00adcovered \nduring the Grounded Theory part of our research are not an exhaustive list of all existing adaptations, \nand our study is speci.c to the industries of a few countries. As well as this, and as with any empirical \nsoftware engineering, the very high number of variables that affect a real software en\u00adgineering project \nmake it dif.cult to conclusively identify the impact that any one factor has on the success or failure \nof the project.  Table 2. Adaptation Strategies for Different Contexts Contexts Adaptation Strategies \nLack of Customer Involvement Story Owners Customer Proxy Simulation Fixed bid Contracts Providing Options \nBuffering Design/Architecture Intensive Information Architecture Design Pipeline Walking Skeleton Documentation \nIntensive Project Dictionary Comprehensive Docs. Slow Rate of Change Working from Requirements Distributed \nTeams e-Collaboration In the following sections, we discuss the .ndings of our research studies. We \ndo not claim our .ndings to be univer\u00adsal, rather they accurately describe the contexts studied. We have \nselected quotations drawn from our interviews that shed particular light on these categories and that \nare spread across participants, geographically and by their organizational title. The discussion is grounded \nfurther by underlying key points, codes, and concepts from our interviews and observations, that we cannot \ndescribe in detail for space reasons. 4. Results: Agility in Practice In this section, we present our \ngrounded theory: the strate\u00adgies used by Agile practitioners to adapt Agile practices to their context \nof use. Faced with obstacles that are outside the participants control, they have developed strategies \nfor adapting Agile practices to their context. In the remainder of this section we present examples from \nour studies to illus\u00adtrate when and how teams adapted Agile practices. These adaptation strategies are \nsummarized in table 2. 4.1 Lack of Customer Involvement Most of the participants in our Grounded Theory \nstudy re\u00adported that the customer was not heavily and frequently in\u00advolved in their projects (P1-P12, \nP14-P19, P21-P23, P25, P26, P28-P30). This lack of involvement is in sharp con\u00adtrast to the amount advocated \nby Agile methods such as Scrum and XP. Customer involvement was seen as the most dif.cult part of Agile \nand lack of customer involve\u00adment was the biggest problem because Agile [requires] fairly strong customer \ninvolvement (P4, P17, P30). Ag\u00adile teams found gathering requirements from customers as one of the worst \nthings and biggest frustration on the projects (P8,P10). Getting customer representatives to clar\u00adify \nrequirements is also a problem because of their unavail\u00adability: Things [awaiting clari.cation] would \nqueue up for them and then they d just answer the whole queue at once. . . then as soon as they got busy \nagain it would start to get a bit harder. P11, Developer, NZ If the participants applied Agile methods \nby-the-book then insuf.cient or ineffective customer involvement meant that development teams were unable \nto gather requirements and to get customer representatives to clarify them in time for development to \ncommence. Inability to gather require\u00adments in time for the iterations could result in the project get[ting] \nstalled (P5) or loss of productivity: The team has the capacity. . . [but] with Agile if you don t have \nthe requirement you can t do any\u00adthing. . . because you are supposed to be in-line with business. P1, \nDeveloper, NZ Without clear requirements and feedback, the teams were forced to make more business decisions \nthan [the team] would like (P15) and as a result would get misaligned from the desired business drivers \n(P5) consequently requiring costly rework (P2, P4, P15). Rework is taxing for developers because they \nhave to revisit stories developed several itera\u00adtions ago due to delay in customer feedback: Yes [we \nhad to rework] but it s not the re-work, it s re-worked easily as long as it s near the time you did \nit. So having to go back and augment what you did three weeks ago was [hard]. P11, Developer, NZ When \nthe level of customer involvement was not enough and was outside the participants ability to change, \nseveral teams made adaptations to their existing Agile practices in order to suit their project context. \nThese adapted practices were: use of Story Owners in place of Product Owners and Customer Proxy from \nwithin the development team acting as a customer representative [33]. We explain the two adapted practices \nbelow. Story Owners The practice of assigning Story Owners was an adaptation to the Scrum practice of \nallocating a Product Owner [53]. Story owners were responsible for particular stories (less than a week \nlong), instead of all the stories in the product backlog: every story had to have an owner to get into \nprioritisation. (P19) Assigning story owners served a three-fold purpose. Firstly, having multiple story \nowners instead of a single customer representative for entire project meant no one person from the customer \ns organization was expected to be continuously available. We didn t need that story owner for the duration \nof the project, we normally only need them for part of an iteration. P19, Senior Agile Coach, NZ Secondly, \nit allowed the team to plan out stories for de\u00advelopment in synchronization with the corresponding story\u00adowner \ns availability. Thirdly, it encouraged a sense of own\u00adership among customer representatives as they were \nencour\u00adaged to present their own stories to peers at end of iteration reviews. We get the [story owners] \nto demonstrate those sto\u00ad ries to their peers at the end of the iteration review, this concept is something \nwe ve evolved over the project. P19, Senior Agile Coach, NZ  The adapted practice of story owners proved \nsuccessful for the practitioners as it helped gain the much needed cus\u00adtomer collaboration, albeit in \nsmaller chunks and across mul\u00adtiple customer representatives rather than the prescribed sin\u00adgle Product \nOwner. After one such presentation a particu\u00adlarly skeptical customer representative was quite chuffed \n[pleased], and at the [next] iteration planning meeting, that person was all go! Instead of sitting back \nwith their arms folded, they had their elbows on the table, leaning forward, and were driving the story \ndetailing conversations we were having. (P19) Customer Proxy Some Agile teams used a customer proxy a \nmember of the development team co-ordinating with the customers to secure requirements and feedback. \nThe use of proxy was visible in Indian teams where the customers were physically distant. Some customers \nsay okay we know you do some\u00adthing called Agile and we are interested in every 6 months [involvement]...we \ncan help you prioritize the backlog but we really don t know the terms like user stories and all . Then \nwe have someone called proxy customer, who really understands the customers who is there near to him, \nthen he is able to place the view point. . . as long as he is able to answer questions and come back. \nHe may not be able to answer everything off the shelf, but get the answers and get back. P23, Developer, \nIndia Using Client proxy, so we assign a customer repre\u00adsentative who interacts with the team much often \nbut then passes on the feedback from the customer to the team and vice versa. P37, Agile Coach, India \nThe use of a proxy to co-ordinate between the customers and the team was also observed in New Zealand, \nwhere a business analyst and couple of developers on different teams served as the proxies because of \ntheir communication skills (P2, P4, P8). We ve got two people [playing proxy]. . . [due to] their ability \nto communicate ideas; they re well\u00adspoken and able to get those ideas across. . . which is great for \ndevelopers! P13, Developer, NZ Simulation The FACT and FLY corroborating case studies had a low level \nof end-user involvement due to their min\u00adimal user interfaces. In comparison, the MATH case study involved \nphysicists and mathematicians trying to apply new models and algorithms to support securities trading. \nThe de\u00advelopment was not driven by customers needs, but inno\u00advative work trying to .nd potential use. \nIn their business model, there was no customer out there to able to express a need, rather they created \nnew innovative tools and tried to see whether they would work, by simulation, then .nd po\u00adtential users. \nSo while there was end-user involvement, this was not in the traditional Agile model of the end-user \nhav\u00ading a speci.c task to accomplish, describing it in the form of user stories to the development organization. \n 4.2 Fixed-Bid Contracts The Agile Manifesto values customer collaboration over contract negotiation \n[31]. However in our Grounded Theory study we found that many of our Indian participants strug\u00adgled with \ntheir customers demand to .x time, cost and scope in a .xed-bid contract. The practitioners explained \nthat the customers perceived the .xed-bid contract to give them pre\u00addictability and control over the \nproject schedule, cost, and deliverables. Since software development teams and their customers need legal \ncontracts, and the market was such that customers could move to different software develop\u00adment companies \nif they wanted, this left our practitioners to handle the apparent contradiction between the customers \ndesire for certainty with their own commitment to Agile val\u00adues such as responding to change [32]. Our \nparticipants mentioned contract negotiation as an\u00adother main challenge they face in managing Agile projects. \nsometimes limitations are imposed by customers, like. . . contracts. . . they just want to give you scope, \nrequirements and expect you to deliver it or they are looking for a .xed price contract. . . .if you \nask me biggest problems. . . one is contracts. . . they want three things: .xed deadline, .xed price, \nand .xed scope. P27, Senior Management, India A .xed-bid contract puts the development team under pressure \nto deliver to the .xed constraints in the contract. The negative consequences of a .xed-bid contract \nin an Agile project are captured in the following comment by an Agile trainer and coach who worked mostly \nwith Indian organizations. The whole premise of the .xed-bid contract is that requirements will be .xed. \nThe nature of software de\u00advelopment is that requirements are inherently unstable and so when you are \nentering into contract negotia\u00adtion, you are dealing with the recognition that the re\u00adquirements will \nbe unstable. . . Biggest source of dys\u00adfunction is not actually from customer the greater source of dysfunction \ncomes from within the organi\u00adzation where the contract .xed bid contract is ne\u00adgotiated by sales team, \nit is negotiated for the small\u00adest amount of money possible. And so the team from day one is under pressure \nto over-commit and under\u00addeliver and that I see again and again and again. P32, Agile Trainer, India \nAgile practitioners see .xed-bid contracts as a major limi\u00adtation that the customers impose on them. \nOther practitioners shared their frustration over the issue of dealing with .xed time/scope/cost contracts. \n Fixed price doesn t work well with Agile. P39, Agile Coach, India With Agile it s dif.cult to do .xed \nprice projects. Ag\u00adile talks about embracing change, can t do .xed price projects with changes coming \nin. P24, Developer, India Providing Options Our participants shared with us some of the strategies they \nused to deal with the customers expec\u00adtation of .xed-bid contracts [32]. Agile practitioners offer different \ncontract options to customers in order to encour\u00adage them to try Agile. Practitioners P3 and P8 encouraged \ncustomers to buy a few iterations to begin with instead of signing a contract for a large project up \nfront: Most of the time. . . [we] sell a certain number of iterations. P27, Senior Management, India \nBy allowing the customers to use Agile on a trial basis, Agile practitioners are able to build con.dence \namong cus\u00adtomers and provide them with risk coverage. Once the cus\u00adtomers have tried a few iterations, \nthen they are offered the option to buy more iterations or features as needed: One thing we [development \n.rm] used to do and worked very well we used to tell the customers you don t have any risks. . . in case \nof Agile we enter into a contract with the client OK we ll show you work\u00ading software every .fteen days, \nyou ll have the op\u00adtion of ending the project within one sprint s notice. Maximum they can lose is one \nsprint. Advantage we show to client they don t have to make up their entire mind. . . [they] can include \nchanges in sprints -they see it as a huge bene.t to them. P24, Developer, India Try for a month then \nbuy more sprints. P37, Agile Coach, India Some Agile practitioners allow the customers to swap features. \nThe project is delivered at the same time and price as initially speci.ed in the contract, but the customer \ncan remove product features that they no longer require and re\u00adplace them with new ones (requiring approximately \nequiva\u00adlent effort) that are of more value to them. . . . customer after seeing demo after fourth iteration \nrealizes the features built, say the thirteenth feature, is not required and he needs something else. \n. . he can swap the two. P24, Developer, India The practitioners also provide the customers with a ter\u00admination \nclause in the contract such that customers have the option to quit on a few iterations notice. . . . \n[customers are] open to suggestions to retreat after few sprints. P33, Agile Coach, India [Developers] \nstart working on functionality from day one and you can add a sprint not enter into con\u00adtract for entire \nproject end in one sprint s notice and they [customers] can introduce change P24, De\u00adveloper, India \nBy providing the customers with the option to quit the project in the worst case scenario, some of their \n.nancial risks were covered. So if the customers were unhappy with the results, they could always quit \nthe project. Buffering Another practice used to adapt to the context of .xed-bid contracts was Buffering, \nwhich involved adding a buffer to the estimated time taken to complete a project or feature. Based on \nthe rate of development per iteration team velocity as a guideline, estimates can be made about how long \na particular set of requirements in a given domain will take to be developed. Then some amount of extra \ntime was added to the estimated time as buffer. The contract is then drawn on this estimated time (including \nbuffer) for a .xed price and scope. Agile will not ask you in how much time will you complete the project...but \n[the customer will]. Some\u00adtimes you ve got to map internal Agile practices to customer practices....Actually \nit comes from a lot of experience on Agile. When you know that okay this is generally the velocity of \nthe team that the team is able to do within the given domain, the given complexity and then you make \nsome rough estimates, including some buffer. [Customer says] okay I want these fea\u00adtures, tell me the \ntime . so then we ll make prediction based on Agile data that this is the team size, this is the velocity, \nwe assume the team won t change then the Agile burndown chart will say let s say 2 weeks so we ll say \nokay another 2 days of buffer, so 2 weeks ands 2 days, something like that. P23, Developer, India The \nsmall amount of buffer time was important to al\u00adlow the customer the possibility of introducing changes \nin requirements along the way while giving the development team time to respond to those changes. Buffering \nwas a prac\u00adtical strategy of working with a .xed-bid contract while us\u00ading Agile methods.  4.3 Design/Architecture \nIntensive One of our participants, a customer representative, shared their concern over using Agile methods \non a design intensive project. Their project involved building an entertainment website and was driven \nby the front-end design. Drawing on their experiences, the customer representative noted that Agile methods \nare better suited to projects which are light on design and need to be adapted to suit projects which \nare design intensive:  I was aware at the beginning that Agile is much better suited to pure development, \nand it needs to be twisted a bit to .t with design and IA (Information Architecture) and to run a whole \nend team project. P18, Customer Representative, NZ This team adapted regular Agile practices to make \nthem .t the context of the front-end design-intensive project. These adaptations included the use of \nan Information Ar\u00adchitecture (IA) document and Design Pipeline the practice of running design activities \nahead of development by one iteration. Information Architecture Our participant used an In\u00adformation \nArchitecture (IA) document in response to a web project context that was inherently front-end design\u00adintensive. \nThe IA document provided the intended layout of the website and also de.ned the set of rules associated \nwith each of the elements on the document. The IA was able to capture the essence of functional speci.cations \nand require\u00adment documents in one place without being overly formal or dictative. The designers and developers \nwere able to use the IA to explicitly guide their front-end design and back-end functionality respectively. \nAnd so the IA will say here s your page. . . the top navigation here and it s going to have these tabs \non it. . . here are some images. Now, a designer will take that and say actually I think these should \nbe in differ\u00adent places on the page, and they may rearrange it vi\u00adsually, but from a here s-what s-on-the-page \nperspec\u00adtive, the IA de.nes all that and then says. . . here s rule number one and when it s clicked \nit gets the [audio] playing. So it s a little more towards the functional spec, it s a little towards \na requirement document, and I don t really need a requirements document or a func\u00adtional spec, I like \nit here in one place. So it s really here s a series of pieces and then there are the rules that parallel \nit. And a designer can look it and say here are the elements I need to create and where they go, and \na developer can look at this and say ok this needs to happen with that. P18, Customer Repre\u00adsentative, \nNZ Design Pipeline One of our participants identi.ed an adaption aimed at ensuring that developers did \nnot waste substantial effort on technical matters prior to getting the front-end design right in a project \nwhose context was skewed towards being front-end design-intensive. Their concern with following by-the-book \nAgile methods is encompassed in the following quote: My personal experience is that, developers get too \nhung up on the how to do it , rather than what exactly to do . So if the problem is not well de.ned before \nthe developer gets it, he might do plenty of cool optimizations, make it very ef.cient, but in the end, \nit might not be what the people want. . . Agile doesn t depend much on initial specs it can back.re \nsometimes. P38, Designer, India Their adaption was to support the design in driving the back-end functionality. \nFor every iteration, the designs had to be ready before the development work could commence. The team \naddressed this by scheduling design activities a whole iteration ahead of development, a practice adaption \nwe call Design Pipeline. The Design Pipeline involved start\u00ading up with front-end design activities dominating \nthe zeroth iteration, with the consequence that the other developmen\u00adtal activities proceeded to continually \nfollow the front-end design by one iteration. You have to run IA half or a whole sprint ahead of development. \nIf you run them together you just waste you much time. I think you really need a sprint zero which is \nmuch more design and IA focused. P18, Customer Representative, NZ The adaptation made in response to \na software architec\u00adture intensive project was Walking Skeleton (a term derived from Cockburn [11]). \nWalking Skeleton In the corroborating case studies, project FIN had made some very good initial progress \nwith an XP+Scrum approach and a two-week iteration pace. How\u00adever the project hit a wall after 6 months \nfor lack of a suf.\u00adcient focus on developing a software architecture that would scale and that would \nshield the various teams. Software ar\u00adchitecture was initially perceived as Big Up Front Design (meaning: \nnot a good thing), and proposals to make some major architectural investment were dismissed with cries \nof YAGNI you ain t gonna need it [8] or suggestions to defer to the last responsible moment [48]. The \nfocus was initially to demo to the users and the management good progress at each iteration with user \nrecognizable features. There was no stable architecture and there was compliance pressure from external \nstandards such as the Sarbanes-Oxley act [60]. There was a naive expectation that the right archi\u00adtecture \nwill gradually emerge out of weekly refactorings. The scope of such refactorings became larger and larger, \nexpanding beyond the boundary of a two week iteration, and this brought the project to a complete stop. \nTensions arose in the project triggering the departure of several key players, then the dismissal of \na few key Agile proponents. The project was restarted, and a robust architecture was de\u00adsigned, prototyped \nas a Walking Skeleton [11], and then had new code gradually ported onto it. This project was .nally deployed \noperationally, though two years later than origi\u00adnally expected.  4.4 Documentation Intensive While \nthe Agile Manifesto sees value in documentation, it favours working software more [31]. Over the past \ndecade this has led to the practice of Agile projects focusing more on the task of coding than the task \nof documentation, and the perception of light documentation being just enough documentation [55].  Several \nof our participants worked on projects in domains where light documentation was just not enough documenta\u00adtion. \nThis stemmed either from regulatory need, or a com\u00admunication need between our participants teams and \ntheir customers. As well as this, in at least one case, existing pro\u00adcess documentation was used as a \ntool to aid initial Agile adoption in a heavily bureaucratic government context, and to encourage stakeholders \nto take up other Agile practices. We ve written a large amounts of documentation. One of the key misconceptions \nis that it is chaotic and that anything will happen and so the .rst thing you do is we present a very \nsolid, very structured methodology to people with documentation backing up all aspects of it. That way \nthey feel secure that this is not gonna be a random process, they are not gonna be thrown into a black-box \nand hopefully come out the other end. P8, Agile Coach, NZ In this section, we explore adaptions to regular \nAgile practices that usefully shifted some part of the focus back to documentation again. Project Dictionary \nSome of our participants encountered dif.culties in collaborating with customers that were not solely \nrelated to their lack of involvement. There is often a language gap between the development teams and \nthe customers, because the development teams use technical language while customers are more used to \nbusiness language [36]. The language gap between devel\u00adopment teams and their customers poses a threat \nto effective team-customer collaboration by limiting their understanding of each other s perspectives. \nCustomer representatives often have limited time to offer to the team for clari.cation and ex\u00adplanation \nof requirements and ineffective translation of busi\u00adness requirements into technical tasks can result \nin develop\u00adment of software that is misaligned from desired business drivers. We found that one of the \nIndian teams extended their use of documentation by using a dictionary to assist everyone on the team \nbetter understand business requirements [36]. This dictionary was an online editable document (wiki) \npop\u00adulated by the customers with business terms, their meaning, and their context of use. These business \nterms were trans\u00adlated directly into code by the team using the same vari\u00adable names, providing one-to-one \nmapping between the cus\u00adtomers business terms and their technical implementation for a given project. \nThe customers were able to view and edit the contents of the evolving dictionary. We have extensive documentation. \n. . a wiki [where the customers] have explained their whole infrastruc\u00adture. . . as and when they build \nup the requirements they come and edit the document. . . its kind of like a glossary and also the rules \nthat .gure in that world of theirs. . . we capture all that and ensure our domain is represented exactly \nlike that in code.. ..so when they say a port has to be in a cabinet which has to sit in a rack it directly \ntranslates to code! P40, Devel\u00adoper, India Comprehensive Documentation In some rare circum\u00adstances, \nvery detailed documentation is a major deliverable of the project, and not just an accessory. For example, \nProject FLY involved developing software which in part was used in airlines cockpits and was therefore \nsubject to certi.cation by aeronautical authorities under DO178-B [51]. The soft\u00adware had an extensive \ntest harness and a very large number of tests, many of them generated by a tool, but nonetheless allowing \nregression testing very early in the development cycle. For Project FLY, delivering extensive documentation \nto external certi.cation agencies was an integral part of the project. Newcomers to the team, familiar \nwith Agile meth\u00adods and XP in particular, did not readily understand the value of that standard, a key \nelement in this business, and initially dismissed it. Documentation was deemed anti-Agile, and contrary \nto the spirit of the Agile Manifesto [31] by some new team members, and led to some internal clash inside \nthe team, pushing back on what they perceived as the ulti\u00admate waterfall evil . The way forward was a \nkind of Ag\u00adile undercover [33] approach, where the team proceeded internally in an Agile fashion, but \nexternally presented all required artifacts in a waterfall-like sequence. While still perceived by some \nas a totally brained damaged process, the project was able to progress, though it had experienced some \nturn-over with some Agile developers leaving in dis\u00adgust.  4.5 Slow Rate of Change Part of the motivation \nin the design and uptake of Agile practices was the need to react to constant change in soft\u00adware engineering \nprojects. Agile is set up to strongly sup\u00adport garnering feedback and guiding the customer toward better \nunderstanding what they want and need [7], through close collaboration and frequently releasing working \nproto\u00adtypes. The expectation is that the customer s informed and changing requirements continually support \nsubtle changes in the project s direction, and many XP practices such as small releases and the planning \ngame are speci.cally set up to facilitate this. However, not all of our participants worked on projects \nwhere constantly changing requirements was a risk that needed mitigating. In fact in some projects the \ncus\u00adtomers already had a clear idea of what they needed due to the nature of the problem and the structure \nof the industry the customer worked in. As an example, an Agile team in NZ was catering to a customer \nfrom the Airlines industry. The customer require\u00adments for the project were pretty stable from the start \nand there were no frequent changes in the requirements from the customer s end. The senior management \nhad doubts about the suitability of Agile methods in such a context:  To be honest I was doubtful that \nit was an appro\u00adpriate type of project to use Agile for because in my mind it s most useful where there \ns a lot of user inter\u00adaction. Where there s batch systems processing data and spitting out, there s relatively \nless opportunity for interaction to demonstrate the outputs. . . I still am to some degree. . . [because] \nthe next [project is] all about batch processing systems, so it ll mean paying a bit more attention to \nhow [the team] gets [their] feed\u00adback [from the customers] P15, Senior Manage\u00adment, NZ Despite this, \nthose participants who found themselves working in requirements-stable projects still valued many other \nAgile practices. Rather than choosing a non-Agile method, they instead found adaptations to those practices \nthat assumed and were structured to deal with constant changes in requirements. Working from Requirements \nOne example is a develop\u00adment team who, through a combination of Scrum and XP, were following an iterative \nand incremental development cy\u00adcle. Because of the stable nature of the requirements, the team was able \nto collect most of the requirements from the customers in initial planning sessions. The team then had \ntheir own planning sessions where they translated those re\u00adquirements into user stories. Where the customer \nhad indi\u00adcated a high priority, the user story was put into the earlier iterations and where the customers \nhad low priority or no preference of priority, those stories were placed in later iter\u00adations. They would \ndemonstrate incremental features of the product to the customer every month or so to collect feed\u00adback. \nThus by working from requirements, the team was able to use iterative and incremental process of development \nde\u00adspite the slow rate of change of requirements. The team also practiced the other Agile practices such \nas iteration and re\u00adlease planning, story boards, and retrospectives. I m not aware of a lot of changes \nthat have been re\u00adquested. . . but like we ve sort of come across this sit\u00aduation where we ve gone hey, \nthis would work much better if we do it this way . And we ve taken it back and maybe demoed what the \nscreens would look like instead and got approval. P13, Senior Developer, NZ As the senior management \nlater noted, the project had been highly successful (P15) and the team was able to de\u00adliver the project \nrequirements while maintaining the itera\u00adtive and incremental process of development and other Agile \nprinciples and practices. In the corroborating case studies, the issues of safety and high availability \nconsideration were predominate in project FACT. The factory product chain could practically be stopped \nonly a couple of times a year and as such there the rate of change from a delivery perspective was very \nslow. Also most of the complicated software development cen\u00adtered around the implementation, test and \noptimization in code of complicated physics model, embedded in small pro\u00adcessors, which did not lent \nthemselves to be broken down in small, incremental user stories . While a dialogue with plant operator \nand with physicists was useful, the teams on this projects found little use for the Agile practice of \nhaving an on-site customer representative to help with the project re\u00adquirements. In absence of any user \nstories per se, the team found it more useful to work from the speci.ed requirement documentation. The \nteam continued with iterative develop\u00adment and other Agile practices to implement the requirement documentation. \nProject FLY similarly had only a few delivery windows, and the safety-critical aspect: compliance with \nDO178B standards [51], high stability of the requirements made it\u00aderation a help only internally, to \ngive developers short term milestones and points for re.ection, not as a way to get ex\u00adternal input or \nfeedback. This created a tension between the old timers and the proponents of Agile techniques: why should \nwe iterate furiously like this? This is exhausting.  4.6 Distributed Teams Several Agile practices such \nas XP s pair programming are best supported in a co-located team environment. Co\u00adlocation supports team \ncollaboration, that in turn can help expose technical constraints and dependencies upfront so that these \nissues can be promptly resolved. when an [Information Architect] is sitting next to all of us together, \nshe may go okay, this here would be quite cool, and if you click on this a .ash thing comes up and the \ndeveloper hears her saying this and goes Oh no! we re not using that technology, we can t do it! But \nif they re in another room, the [Information Architect] will be quite far down the track from work\u00ading \nthat out, and when they sit sown with the devel\u00adoper and says okay this is what I thought, then the de\u00adveloper \ngoes Ah, I can t do it . [It could] have been picked up earlier on. P18, Customer Representa\u00adtive, NZ \nIn the absence of team collaboration, individuals may make assumptions about the other parts of the system \nand may waste time and effort before realizing the technical constraints and dependencies. However, several \nof our participants faced a reality where standard practices targeting team collaboration were either \nnot an option, or not a practical option due to resource pressure. Some teams were physically distributed \nacross different cities or countries making co-location an impracticality. In these scenarios, they developed \nadaptations, and we now discuss these in more detail.  e-Collaboration Agile teams are highly collaborative \n[31]. As one of the participants mentioned, the need for regular collaboration is limited in plan-based \nmethods and can be done all at once by travelling to the other site. However, if our participants were \nto follow by-the-book Agile methods and insist on face-to-face collaborative sessions, then the need \nfor regular collaboration through out the project would require a lot of travelling and more .nancial \nand resource investment that is typically available. Agile talks about collaboration when outsourcing \ncollaboration between on-shore and off-shore teams same is not true for waterfall projects because [in \nwaterfall]...2 or 3 people stay [on other site] for 2 months...do requirements analysis for 2 months...[and] \ncome back...[later] you d be talking to same person over 9 months without seeing him...[or] talk for \nclar\u00adi.cation...once in 3 days...[that] doesn t work with Agile. In case of Agile project you need collabora\u00adtions \neach iteration [throughout] requirements, de\u00adsign, development...lots of travel in case of distributed \nAgile! P24, Developer, India In order to maintain regular collaboration across geo\u00adgraphic distances, \nour Agile practitioners resorted to elec\u00adtronic collaboration (e-collaboration): Video conferencing becomes \nvery important, [it is] all about collaboration you should be sitting in same room as [much as] possible. \n P24, Developer, In\u00addia E-collaboration was a popular means of regularly com\u00admunicating across geographic \nboundaries using video/voice conferencing, phone, email and chat. For distributed Agile teams, e-collaboration \nwas a practical adaption to the pre\u00adscribed practices: Well on our project we are working like distributed \nAgile so the client they also develop with us, we are like a team separate teams so they re developing \nin USA and we re developing in India. We follow scrum practices and daily meetings on chat or via telephone. \nAnd wiki pages are most important in distributed Ag\u00adile. P31, Developer, India Some teams were using \nan electronic Scrum board where the user stories and tasks could be easily tracked between the distributed \nteams. It s pretty good. Everyday we discuss three things: what we plan to do today, what we did yesterday, \nwhat the impediments are. If the impediments are big we take it after the standup and discuss it through \nSkype chat the member who is facing the impediment. . . the time difference is good so you get an overlap \ntime of about 4-5 hours....The product owner come up with the product backlog and we put it on JIRA [which] \nis hosted on the web so we have access to it....So we have the electronic scrum board. P22, Developer, \nIndia [We collaborate] through the wiki. First part is we have a user story where we decide how we have \nto do it and make individual tickets or tasks according to that. We just take it up and start working. \n P30, Developer, India Using the electronic means of collaboration enabled dis\u00adtributed Agile teams to \ncontinue collaborative Agile prac\u00adtices such as release and iteration planning, working from the scrum \nboard, and daily stand-ups. 5. Discussion: Agility in Context In this section, we discuss the implications \nof our observa\u00adtions and generated theory, and how they relate to other re\u00adsearch and opinion in Agile \nsoftware development. 5.1 The Sweet Spot Both Scrum and XP suit similar kinds of projects: a small, co-located \nteam; an on-site or available customer represen\u00adtative; an emphasis on coding and testing early; and \nfre\u00adquent feedback into updated requirements. Reifer et al., and Kruchten call this context the Agile \nsweet spot [40, 50]. The sweet spot mirrors the kinds of projects that the method designers had in mind \nwhen they constructed the .rst Ag\u00adile methods. It is unsurprising that projects in the sweet spot bene.t \nfrom the application of methods such as Scrum and XP. We found that our participants follow many Scrum \nand XP practices without adapting them. Where participants did adapt practices, we found the modi.cation \nstems from the fact that the projects do not sit within this sweet spot. Other researchers have explored \nAgile projects outside the sweet spot, such as scaling up to larger projects [22, 42]. While we did not \nobserve scalability-based problems, we did .nd several other aspects of project contexts that were signi.\u00adcantly \noutside the sweet spot. This motivates the question we answer in this paper: what can projects do (indeed, \nwhat should projects do) when their contexts do not fall within Agile s sweet spot?  5.2 Abandon Agile \nMethods If an Agile method s practices must be followed strictly, then Agile methods will only be applicable \nto projects within the sweet spot. Projects in contexts outside the sweet spot must presumably choose \ndifferent development methods. More pragmatically, we can consider a cost-bene.t analysis. Are Agile \npractices so interdependent and mutually reinforc\u00ading that any adaption completely undermines the Agile \nap\u00adproach? Can projects bene.t from one or more individual Agile practices, applied in isolation, perhaps \nwithin another kind of development method? Would another, perhaps more structured or more document-centric \ndevelopment method lead to greater bene.ts or pose less risk than adapting an Agile method?  Our research \nparticipants did not abandon Agile methods and principles to address problems outside the Agile context. \nClearly there is selection bias here: both the grounded theory study and the corroborating case studies \nwere restricted to projects that at least claimed to be undertaking Agile devel\u00adopment projects. Nevertheless, \nthe projects we studied were able to function effectively, despite adapting some practices, and without \nany overall collapse of their development pro\u00adcesses. Teams clearly derived bene.ts in terms of morale \nand productivity from adopting some Agile practices, and fur\u00adther bene.ts from the interactions between \nthose practices they were able to apply. As most of our participants had prior experience in non-Agile \nprojects they were in a po\u00adsition to judge the relative merits of different development approaches, and \nthey preferred Agile methods to their pre\u00advious methods of working. Abandoning Agile development was \nseen as neither a suitable nor desirable option by our participants. While many projects .t within the \nAgile sweet spot, many other projects do not. In choosing to ignore Agile methods, rather than adapting \nmethods to suit their contexts, projects outside the sweet spot will lose the bene.ts Agile develop\u00adment \ntechniques could bring.  5.3 Context-Independent Practices Although our participants adapted some of \ntheir method s practices, many other practices would be performed more\u00ador-less by-the-book. We found \nmost teams adhered to Scrum and XP practices such as iterative development (with it\u00aderations of various \nlengths across projects), iteration plan\u00adning, testing, regular demonstrations of working software, and \ncontinuous improvement via retrospectives or reviews. These unmodi.ed practices tended to be inward look\u00ading, \nfocusing on the development team itself, rather than the team s interactions with customers and clients, \ne.g. their contract negotiations. We call these practices context\u00adindependent , precisely because they \ndo not depend on the project s external context. Because context-independent practices mostly involve \njust the team, they can be adopted with little effect upon other project stakeholders. XP s test-.rst \nprogramming practice is the prime exam\u00adple of a context-independent practice. Indeed, test-.rst pro\u00adgramming \nhas evolved into an entire Agile (sub)method Behaviour Driven Development that can be applied across \na wide range of projects, programming languages, and de\u00advelopment methods, almost irrespective of the \nprojects con\u00adtexts [23]. BDD provides signi.cant bene.t, even applied in isolation, without the surrounding \ninfrastructure of other XP or Agile practices. Context-independent practices show that choosing to adopt \n(or adapt) an Agile method (versus another Agile method) is not an binary choice just as the decision \nto adopt an Agile method (versus a non-Agile method) is not a binary choice. Our participants projects \naimed to perform context-independent practices by-the-book, while adapting other practices to .t the \nprojects contexts.  5.4 Context-Dependent Practices In contrast to context-independent practices, we \nfound some other practices are far more context-dependent. For example, release planning (including writing \nuser stories and prioriti\u00adzation) becomes dif.cult in contexts where the customer is unwilling or unable \nto be highly involved with the project. Accepting changes in requirements throughout the project becomes \ndif.cult in contexts where the project is governed by a .xed-bid contract. Face-to-face collaboration \nis a chal\u00adlenge when teams are distributed. In such situations, teams must resolve the con.ict be\u00adtween \ntheir context and their practices. Teams have two ba\u00adsic tactics for achieving this: changing the context \nto .t the practices; or changing the practices to .t the context. 5.4.1 Changing the Context One of \nthe great strengths of Agile methods is the way their practices reinforce each other. Test .rst programming \nsup\u00adports refactoring by helping to ensure refactorings preserve correctness; refactoring supports incremental \ndevelopment because old components can be updated to meet new re\u00adquirements; incremental development \nencourages a stable pace of working, which in turn allows time for test .rst pro\u00adgramming. Projects that \ndo not take on whole methodologies lock, stock, and barrel cannot get the bene.ts of this mutual reinforcement. \nThis may be one reason why methodologists, coaches, and Scrum masters, criticize projects that adapt \nAg\u00adile methodologies, or do not adopt them in toto. Context-independent practices, however, need to be \nadop\u00adted by more than just the core development team: release planning, or user stories as a promise \nof a conversation [15], require customers or their representative to partici\u00adpate along with the team \nto play (as Cockburn would put it) the cooperative game [13]. Changing from .xed-bid to more Agile contracts \nrequires legal and .nancial support, and goodwill, from two or more separate contracting compa\u00adnies. \nCo-locating a development team can impose signi.cant relocation and travel expenses. Co-locating a team \nwith their customers could even require choosing highly-expensive in\u00adhouse or on-shore development teams, \nrather than outsourc\u00ading to much cheaper offshore contractors. Another reason methdologists criticize \nadaption is to encourage projects to work with their stakeholders to pay these costs and so reap the \nbene.ts [12, 57, 59]. Unfortunately, in our study we found that projects often face contexts business \npractices, geography, laws, or even fundamental mathematics over which the participants or\u00adganizations \nhave no authority or control. Such contexts were generally neither avoidable nor adaptable. There is \na difference between encouraging teams to change contexts where that may be possible (albeit dif.cult); \nand insisting on changing contexts where that is impossible.  5.4.2 Changing the Practices In our study, \nwe found participants tackling their own projects as best they could, devising strategies to adapt context-dependent \npractices to their projects contexts. In doing so, they were deriving as much bene.t from Agile practices \nas they could, given the control they were able to assert over their projects. As one of our more re.ective \nparticipants noted, a project s context must be understood before methods can be chosen or practices \nenforced: ...how distributed the situation is, what s the type of technology mix that you have, how many \npeople are involved...lots and lots of things like that...it s more a matter of adapting to the context \nof the client. You don t say oh no, Agile says... No, there s no such thing as Agile says . We need to \n.nd out together what works best, what gives us the best outcome in your context. P17, Agile Coach, \nNZ Another participant (P19) had gone so far as to design an Agile risk assessment questionnaire which \nlisted a set of questions to identify potential risks inherent in a project con\u00adtext. The questions are \nbased around the values and princi\u00adples of the Agile Manifesto, and were used to discuss how well Agile \nvalues and principles .t the project context. The questionnaire results were then used to devise strategies \nto overcome those factors where the project context did not support Agile principles and values. Such \nadaptations were not surprising because the funda\u00admental principles and values of Agile development include \nto favour people and interaction (that make up a project con\u00adtext) over processes and tools (including, \npresumably, Ag\u00adile development methods and practices). Again, the last Ag\u00adile principle encourages adaption: \nAt regular intervals, the team re.ects on how to become more effective, then tunes and adjusts its behavior \naccordingly. Scrum explicitly sup\u00adports the inspect and adapt principle [52] where teams are meant to \ninspect impediments in retrospective meetings and collaboratively devise innovative strategies to adapt \nto changing contexts. XP, too, fundamentally acknowledges problems in its implementation and promotes \ncontextual\u00adization by recommending practitioners to .x XP when it breaks [61] Values and principles are \nabstract: practices are concrete. Explicit instructions i.e. practices are much easier to ap\u00adply than \nabstract principles. Advice to write tests .rst is much more straightforward, and much easier to check, \nthan advice to .x your methodology . We agree with Conboy and Fitzgerald [18] who argue that the inability \nof Agile methods to provide clear adaptation guidelines is similar to that of their traditional counterparts \nwhere the need for .ex\u00ad ibility is acknowledged but not addressed and that precisely this kind of adaptability \nthat underpins the very meaning of what it is to be Agile. 6. Conclusion Being Agile is all about having \nthe courage to change [6]. In this paper, we have presented the results of a large\u00adscale, international \nstudy of multiple projects using Agile practices. Our grounded theory, corroborated by four inde\u00adpendent \ncase studies, is that Agile teams need to change their practices to .t their projects contexts. Some \npractices are context-independent, primarily affecting the team itself: iterative development, testing, \nand retrospectives or reviews were employed unchanged by essentially all the projects we studied. Other \npractices are much more context-dependent: our participants tended to adapt them as necessary to .t their \nprojects contexts. Where customer representatives are un\u00adavailable, teams .nd story owners or customer \nproxies. Where .xed price contracts are mandatory, teams negoti\u00adate contracts that explicitly specify \ndevelopment options, or allocate contingency funds to cover unforeseen changes. Where teams need to make \narchitectural decisions that will be very hard to change, they dedicate suf.cient time and resources \nto make those decisions up front . Where teams need to produce documentation to gain product or process \ncerti.cation, or to work in multiple locations, they customise their processes to satisfy those contextual \nimperatives: pro\u00adducing documentation to satisfy regulators, or using elec\u00adtronic communications in conjunction \nwith travelling for face-to-face meetings. Returning once again to the .nal principle of the Agile manifesto: \nAt regular intervals, the team re.ects on how to become more effective, then tunes and adjusts its be\u00adhavior \naccordingly. Agility, in the sense of Agility in context, cannot be eval\u00aduated simply by a tick-list \nof practices, or by weighing up individuals versus processes , software versus docu\u00admentation , or even \nresponding to change versus follow\u00ading a plan even (or especially) where that plan is called an Agile \nMethod . Rather, our study shows that Agile teams indeed evolve their methods and practices to be as \neffec\u00adtive as possible within their projects contexts. We conclude with a question: to what extent should \na team that does not adapt its practices appropriately even if it is performing every practice from Scrum, \nXP, Lean, and DSDM by-the\u00adbook really be regarded as an Agile team? Acknowledgments We thank all the \nparticipants. This research is generously supported by research grants from the Agile Alliance, Scrum \nAlliance, BuildIT PhD scholarship (NZ), and Software Pro\u00adcess and Product Improvement (NZ).  References \n[1] P. Abrahamsson, J. Warsta, M. T. Siponen, J. Ronkainen. New Directions on Agile Methods: a Comparative \nAnalysis. In Proceedings of the 25th International Conference on Software Engineering, 244 254, IEEE \nComputer Society, 2003. [2] S. Adolph. What Lessons Can the Agile Community Learn from a Maverick Fighter \nPilot? In Proceedings of Agile 2006, 94 99, IEEE Computer Society, 2006. [3] S. Adolph, W. Hall, and \nP. Kruchten. A Methodological Leg to Stand on: Lessons Learned Using Grounded Theory to Study Software \nDevelopment. In Proceedings of CASCON 08, 166 178, ACM, 2008. [4] G. Allan. The Use of Grounded Theory \nas a Research Method: warts &#38; all. European Conf. on Research Methodology for Business and Management \nStudies, 9 19, 2005. [5] B. Dagenais, H. Ossher, R. K. E. Bellamy, M. P. Robillard, J. de Vries. Moving \ninto a New Software Project Landscape. In Proceedings of the 32nd International Conference on Software \nEngineering, 275 284, 2010. [6] K. Beck. Extreme Programming Explained: Embrace Change. Addison-Wesley, \n2000. [7] I. Alexander, K. Beck. Point/Counterpoint. IEEE Software, IEEE, 24(2), 62 65, March 2007. \n[8] B. Boehm. Get Ready for Agile Methods, With Care. IEEE Computer Society, IEEE, 35(1), 2 7, January \n2002. [9] J. Carver. The Impact of Background and Experience on Software Inspections Empirical Software \nEngineering, volume 9, 259 262, 2004. [10] C.A. Crabtree, A.F. Norcio. Exploring Language in Software \nProcess Elicitation: A Grounded Theory Approach In Empirical Software Engineering and Measurement (ESEM), \n324 335, 2009. [11] A. Cockburn. Crystal Clear: A Human-Powered Methodology for Small Teams. Addison-Wesley \nProfessional, 2004. [12] A. Cockburn. Top ten ways to know you are not doing agile http://alistair.cockburn.us/Top+ten+ways+ \nto+know+you+are+not+doing+agile, accessed on 23 March 2010. [13] A. Cockburn. Agile Software Development: \nThe Cooperative Game 2ed. Addison-Wesley Professional, 2006. [14] A Cockburn. People and Methodologies \nin Software Development. PhD thesis, University of Oslo, Norway, 2003. [15] M. Cohn. User Stories Applied: \nFor Agile Software Develop\u00adment. Addison-Wesley Professional, 2004. [16] G. Coleman and R. O Connor. \nUsing Grounded Theory to Understand Software Process Improvement: A Study of Irish Software Product Companies. \nInf. Softw. Technol., 49(6), 654 667, 2007. [17] K. Conboy. Agility from First Principles: Reconstructing \nthe Concept of Agility in Information Systems Development. Information Systems Research, 20(3), 329 354, \n2009. [18] K. Conboy and B. Fitzgerald. The Views of Experts on the Current State of Agile Method Tailoring. \nIn Proceedings of the 11th IFIP 8.6 Working Group Conference on Business Agility and IT Diffusion, 235, \n217 234, 2007. [19] W. Cunningham. The WyCash portfolio management system. In Proceedings of OOPSLA 92 \n29 30, ACM, 1992. [20] Ward Cunningham. Almost Extreme Programming http: //www.c2.com/cgi/wiki?AlmostExtremeProgramming, \naccessed 25th March 2010. [21] T. Dyb\u00b0a and T. Dingsoyr. Empirical Studies of Agile Software Development: \nA Systematic Review. Inf. Softw. Technol., 50(9-10), 833 859, 2008. [22] J. Eckstein. Scaling Agile Processes: \nAgile Software Development in Large Projects. In XP/Agile Universe 2002, Springer, 2002. [23] S. Freeman \nand N. Pryce. Growing Object-Oriented Software, Guided by Tests. Addison Wesley, 2009. [24] S. Georgieva \nand G. Allan. Best Practices in Project Management Through a Grounded Theory Lens. Electronic Journal \nof Business Research Methods, 6(1), 43 52, 2008. [25] B. Glaser. Basics of Grounded Theory Analysis: \nEmergence vs. Forcing. Sociology Press, Mill Valley, CA, 1992. [26] B. Glaser. Theoretical Sensitivity. \nSociology Press, Mill Valley, CA, 1978. [27] B. Glaser. Doing Grounded Theory: Issues and Discussions. \nSociology Press, Mill Valley, CA, 1998. [28] B. Glaser. The Grounded Theory Perspective III: Theoretical \nCoding. Sociology Press, Mill Valley, CA, 2005. [29] B. Glaser and A. L. Strauss. The Discovery of Grounded \nTheory. Aldine, Chicago, 1967. [30] J. A. Highsmith, III. Adaptive software development: a collaborative \napproach to managing complex systems. Dorset House Publishing, New York, 2000. [31] J. Highsmith and \nM. Fowler. The Agile Manifesto. Software Development Magazine, 9(8), 29 30, 2001. [32] R. Hoda, J. Noble, \nS. Marshall. Negotiating Contracts for Agile Projects: A Practical Perspective. In Proceedings of XP2009, \nSpringer, 2009. [33] R. Hoda, J. Noble, S. Marshall. Agile Undercover: When Customers Don t Collaborate. \nIn Proceedings of XP2010, Springer, 2010. [34] R. Hoda, J. Noble, S. Marshall. Organizing Self-Organizing \nTeams. In Proceedings of the 32nd International Conference on Software Engineering, 285 294, ACM, 2010. \n[35] R. Hoda, J. Noble, S. Marshall. Balancing Acts: Walking the Agile Tightrope. In Cooperative and \nHuman Aspects of Software Engineering at the 32nd International Conference on Software Engineering, ACM, \n2010. [36] R. Hoda, J. Noble, S. Marshall. How Much is Just Enough: Documentation Patterns on Agile Projects. \nIn Proceedings of EuroPLoP, 2010. [37] R. Hoda, J. Noble, S. Marshall. Balancing Self-Organizing Agile \nTeams: A Grounded Theory. Under review for Journal of Empirical Software Engineering, 2010.  [38] M. \nIsham. Agile Architecture IS Possible You First Have to Believe!. Proceedings of Agile 2008, IEEE, 2008. \n[39] Sami Jantunen Exploring Software Engineering Practices in Small and Medium-Sized Organizations Co-operative \nand Human Aspects of Software Engineering workshop at the 32nd International Conference on Software Engineering, \nACM, 2010. [40] P. Kruchten. Scaling Down Large Projects to Meet the Agile Sweet Spot. IBM developerWorks, \n13 Aug 2004 http: //www.ibm.com/developerworks/rational/library/ content/RationalEdge/aug04/5558.html, \naccessed 25 March 2010. [41] C. Larman and V.R. Basili. Iterative and Incremental Development: A brief \nhistory. IEEE Computer. 36, 6, 47 56, 2003. [42] D. Lef.ngwell. Scaling Software Agility: Best Practices \nfor Large Enterprises. Addison-Wesley Professional, 2007. [43] A. Martin, R. Biddle, and J. Noble. The \nXP customer role: A grounded theory. In Proceedings of Agile 2009, IEEE Computer Society, 2009. [44] \nS. McConnell. Technical Debt. Software Best Practices, Construx Forum. http://forums.construx.com/blogs/ \nstevemcc/archive/2007/11/01/technical-debt-2. aspx, accessed 25th March 2010. [45] S. Nerur, R. Mahapatra, \nG. Mangalaraj. Challenges of Migrating to Agile Methodologies. Comm. ACM, 48(5), 72 78, 2005. [46] S. \nR. Palmer and M. Felsing. A Practical Guide to Feature-Driven Development. Pearson Education, 2001. [47] \nM. Pikkarainen, J. Haikara, O. Salo, P. Abrahamsson, and J. Still. The Impact of Agile Practices on Communication \nin Software Development. Empirical Softw. Eng, 13(3), 303 337, 2008. [48] M. Poppendieck, and T. Poppendieck. \nLean Software De\u00advelopment: An Agile Toolkit. Addison-Wesley Professional, 2003. [49] R. Rasmussen, T. \nHughes, J.R.Jenks, J.Skach. Adopting Agile in an FDA Regulated Environment. Proceedings of Agile 2009 \nIEEE, 2009. [50] D. Reifer, F. Maurer, M. H. Erdogmus. Scaling Agile Methods. IEEE Software, July/August \n2003 IEEE, 2003. [51] RTCA. RTCA/DO-178B Software Considerations in Air\u00adborne Systems and Equipment Certi.cation. \nRadio Technical Commission for Aeronautics, 1992. [52] K. Schwaber. The Enterprise and Scrum. Microsoft \nPress, 2009. [53] K. Schwaber, and M. Beedle. Agile Software Development with SCRUM. Prentice-Hall, 2002. \n[54] J. Stapleton. Dynamic Systems Development Method. Addison Wesley, 1997. [55] M. Stephens, D. Rosenberg. \nExtreme Programming Refac\u00adtored: The Case Against XP. Apress L.P, 2003. [56] A. Strauss and J. Corbin. \nBasics of Qualitative Research. Sage, Newbury Park, CA, 1990. [57] J. Sutherland. Nokia Test jeffsutherland.com/ \nnokiatest.pdf, accessed 25th March 2010. [58] J. Sutherland. Retrospective on SCRUM and Its Implementa\u00adtion \nin Five Companies. PatientKeeper, Inc., 2001. [59] J. Sutherland, S. Downey and B. Granvik. Shock Therapy: \nA Bootstrap for Hyper-Productive Scrum. Proceedings of Agile 2009, IEEE, 2009. [60] US Government. US \nPublic Law 107 -204 -Sarbanes-Oxley Act of 2002. US Governement Printing Of.ce, 2002. [61] D. Wells. \nExtreme Programming: A Gentle Introduction. http://www.extremeprogramming.org/rules/fixit. html, accessed \n25th March 2010. [62] E. Whitworth and R. Biddle. The Social Nature of Agile Teams. In Proceedings of \nAgile 2007, IEEE Computer Society, 2007.    \n\t\t\t", "proc_id": "1869459", "abstract": "<p>Evangelists for Agile methods strongly encourage all projects to follow every practice of their chosen method. Based on a Grounded Theory study involving 40 participants at 16 organizations, and corroborated by 4 independent case studies, we argue that development methods and practices must be adapted to fit their contexts. Understanding Agility in context will help development teams, their managers, and Agile coaches to adapt development processes to fit their projects' contexts.</p>", "authors": [{"name": "Rashina Hoda", "author_profile_id": "81416593073", "affiliation": "Victoria University of Wellington, Wellington, New Zealand", "person_id": "P2354012", "email_address": "", "orcid_id": ""}, {"name": "Philippe Kruchten", "author_profile_id": "81414594403", "affiliation": "University of British Columbia, Vancouver, Canada", "person_id": "P2354013", "email_address": "", "orcid_id": ""}, {"name": "James Noble", "author_profile_id": "81100588708", "affiliation": "Victoria University of Wellington, Wellington, New Zealand", "person_id": "P2354014", "email_address": "", "orcid_id": ""}, {"name": "Stuart Marshall", "author_profile_id": "81350600259", "affiliation": "Victoria University of Wellington, Wellington, New Zealand", "person_id": "P2354015", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1869459.1869467", "year": "2010", "article_id": "1869467", "conference": "OOPSLA", "title": "Agility in context", "url": "http://dl.acm.org/citation.cfm?id=1869467"}