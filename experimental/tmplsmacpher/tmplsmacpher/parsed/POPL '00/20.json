{"article_publication_date": "01-05-2000", "fulltext": "\n     \n\t\t\t", "proc_id": "325694", "abstract": "<p>Systems that authenticate a user based on a shared secret (such as a password or PIN) normally allow anyone to query whether the secret is a given value. For example, an ATM machine allows one to ask whether a string is the secret PIN of a (lost or stolen) ATM card. Yet such queries are prohibited in any model whose programs satisfy an information-flow property like Noninterference. But there is complexity-based justification for allowing these queries. A type system is given that provides the access control needed to prove that no well-typed program can leak secrets in polynomial time, or even leak them with nonnegligible probability if secrets are of sufficient length and randomly chosen. However, there are well-typed deterministic programs in a synchronous concurrent model capable of leaking secrets in linear time.</p>", "authors": [{"name": "Dennis Volpano", "author_profile_id": "81100451667", "affiliation": "Computer Science Department, Naval Postgraduate School, Monterey, California", "person_id": "PP14158702", "email_address": "", "orcid_id": ""}, {"name": "Geoffrey Smith", "author_profile_id": "81100075743", "affiliation": "School of Computer Science, Florida International University, Miami, Florida", "person_id": "PP39068149", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/325694.325729", "year": "2000", "article_id": "325729", "conference": "POPL", "title": "Verifying secrets and relative secrecy", "url": "http://dl.acm.org/citation.cfm?id=325729"}