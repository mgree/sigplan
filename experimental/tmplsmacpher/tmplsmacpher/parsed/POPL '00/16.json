{"article_publication_date": "01-05-2000", "fulltext": "\n\t\t\t", "proc_id": "325694", "abstract": "<p>Work on the TILT compiler for Standard ML led us to study a language with <italic>singleton kinds</italic>: <italic>S</italic>(<italic>A</italic>) is the kind of all types provably equivalent to the type <italic>A</italic>. Singletons are interesting because they provide a very general form of definitions for type variables, allow fine-grained control of type computations, and allow many equational constraints to be expressed within the type system.</p><p>Internally, TILT represents programs using a predicative variant of Girard's <italic>F&#969;</italic> enriched with singleton kinds, dependent product and function kinds (&Sgr; and &Pgr;), and a sub-kinding relation. An important benefit of using a typed language as the representation of programs is that typechecking can detect many common compiler implementation errors. However, the decidability of typechecking for our particular representation is not obvious. In order to typecheck a term, we must be able to determine whether two type constructors are provably equivalent. But in the presence of singleton kinds, the equivalence of type constructors depends both on the typing context in which they are compared and on the kind at which they are compared.</p> <p>In this paper we concentrate on the key issue for decidability of typechecking: determining the equivalence of well-formed type constructors. We define the &#955;<supscrpt>&Pgr;&Sgr;<italic>S</italic></supscrpt><subscrpt>&lt;</subscrpt> calculus, a model of the constructors and kinds of TILT's intermediate language. Inspired by Coquand's result for type theory, we prove decidability of constructor equivalence for &#955;<supscrpt>&Pgr;&Sgr;<italic>S</italic></supscrpt><subscrpt>&#8804;</subscrpt> by exhibiting a novel &#8212; though slightly inefficient &#8212; type-directed comparison algorithm. The correctness of this algorithm is proved using an interesting variant of Kripke-style logical relations: unary relations are indexed by a single possible world (in our case, a typing context), but binary relations are indexed by two worlds. Using this result we can then show the correctness of a natural, practical algorithm used by the TILT compiler.</p>", "authors": [{"name": "Christopher A. Stone", "author_profile_id": "81409592706", "affiliation": "School of Computer Science, Carnegie Mellon University, Pittsburgh, PA", "person_id": "PP39084037", "email_address": "", "orcid_id": ""}, {"name": "Robert Harper", "author_profile_id": "81100140064", "affiliation": "School of Computer Science, Carnegie Mellon University, Pittsburgh, PA", "person_id": "PP39029370", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/325694.325724", "year": "2000", "article_id": "325724", "conference": "POPL", "title": "Deciding type equivalence in a language with singleton kinds", "url": "http://dl.acm.org/citation.cfm?id=325724"}