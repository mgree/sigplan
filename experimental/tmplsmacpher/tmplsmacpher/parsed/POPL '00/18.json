{"article_publication_date": "01-05-2000", "fulltext": "\n\t\t\t", "proc_id": "325694", "abstract": "<p>Proof-carrying code is a framework for proving the safety of machine-language programs with a machine-checkable proof. Previous PCC frameworks have defined type-checking rules as part of the logic. We show a universal type framework for proof-carrying code that will allow a code producer to choose a programming language, prove the type rules for that language as lemmas in higher-order logic, then use those lemmas to prove the safety of a particular program. We show how to handle traversal, allocation, and initialization of values in a wide variety of types, including functions, records, unions, existentials, and covariant recursive types.</p>", "authors": [{"name": "Andrew W. Appel", "author_profile_id": "81100498630", "affiliation": "Bell Laboratories and Princeton University", "person_id": "PP14174176", "email_address": "", "orcid_id": ""}, {"name": "Amy P. Felty", "author_profile_id": "81100285732", "affiliation": "University of Ottawa and Bell Laboratories", "person_id": "P16301", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/325694.325727", "year": "2000", "article_id": "325727", "conference": "POPL", "title": "A semantic model of types and machine instructions for proof-carrying code", "url": "http://dl.acm.org/citation.cfm?id=325727"}