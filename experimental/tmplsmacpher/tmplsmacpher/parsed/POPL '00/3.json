{"article_publication_date": "01-05-2000", "fulltext": "\n\t\t\t", "proc_id": "325694", "abstract": "<p>One aspect of security in mobile code is privacy: private (or secret) data should not be leaked to unauthorised agents. Most of the work on secure information flow has until recently only been concerned with detecting direct and indirect flows. Secret information can however be leaked to the attacker also through covert channels. It is very reasonable to assume that the attacker, even as an external observer, can monitor the timing (including termination) behaviour of the program. Thus to claim a program secure, the security analysis must take also these into account.</p><p>In this work we present a surprisingly simple solution to the problem of detecting timing leakages to external observers. Our system consists of a type system in which well-typed programs do not leak secret information directly, indirectly or through timing, and a transformation for removing timing leakages. For any program that is well typed according to Volpano and Smith [VS97a], our transformation generates a program that is also free of timing leaks.</p>", "authors": [{"name": "Johan Agat", "author_profile_id": "81100439766", "affiliation": "Department of Computing Science, Chalmers University of Technology and G&#246;teborg University", "person_id": "P142400", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/325694.325702", "year": "2000", "article_id": "325702", "conference": "POPL", "title": "Transforming out timing leaks", "url": "http://dl.acm.org/citation.cfm?id=325702"}