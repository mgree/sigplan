{"article_publication_date": "01-05-2000", "fulltext": "\n\t\t\t", "proc_id": "325694", "abstract": "<p><italic>Certified code</italic> is a general mechanism for enforcing security properties. In this paradigm, untrusted mobile code carries annotations that allow a host to verify its trustworthiness. Before running the agent, the host checks the annotations and proves that they imply the host's security policy. Despite the flexibility of this scheme, so far, compilers that generate certified code have focused on simple type safety properties rather than more general security properties.</p><p><italic>Security automata</italic> can specify an expressive collection of security policies including access control and resource bounds. In this paper, we describe how to instrument well-typed programs with security checks and typing annotations. The resulting programs obey the policies specified by security automata and can be mechanically checked for safety. This work provides a foundation for the process of automatically generating certified code for expressive security policies.</p>", "authors": [{"name": "David Walker", "author_profile_id": "81100426485", "affiliation": "Cornell University", "person_id": "PP18001632", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/325694.325728", "year": "2000", "article_id": "325728", "conference": "POPL", "title": "A type system for expressive security policies", "url": "http://dl.acm.org/citation.cfm?id=325728"}