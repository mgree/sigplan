{"article_publication_date": "01-05-2000", "fulltext": "\n\t\t\t", "proc_id": "325694", "abstract": "<p>In this article, we add a third dimension to partial redundancy elimination by considering <italic>code size</italic> as a further optimization goal in addition to the more classical consideration of computation costs and register pressure. This results in a family of <italic>sparse</italic> code motion algorithms coming as modular extensions of the algorithms for <italic>busy</italic> and <italic>lazy code motion</italic>. Each of them optimally captures a predefined choice of priority between these three optimization goals, e.g. code size can be minimized while (1) guaranteeing at least the performance of the argument program, or (2) even computational optimality. Each of them can further be refined to simultaneously reduce the lifetimes of temporaries to a minimum. These algorithms are well-suited for size-critical application areas like smart cards and embedded systems, as they provide a handle to control the code replication problem of classical code motion techniques. In fact, we believe that our systematic, priority-based treatment of trade-offs between optimization goals may substantially decrease development costs of size-critical applications: users may &#8220;play&#8221; with the priorities until the algorithm automatically delivers a satisfactory solution.</p>", "authors": [{"name": "Oliver R&#252;thing", "author_profile_id": "81100258003", "affiliation": "University of Dortmund, Department of Computer Science, LS 5, D-44221 Dortmund, Germany", "person_id": "PP31092541", "email_address": "", "orcid_id": ""}, {"name": "Jens Knoop", "author_profile_id": "81100197024", "affiliation": "University of Dortmund, Department of Computer Science, LS 5, D-44221 Dortmund, Germany", "person_id": "PP40024734", "email_address": "", "orcid_id": ""}, {"name": "Bernhard Steffen", "author_profile_id": "81100210663", "affiliation": "University of Dortmund, Department of Computer Science, LS 5, D-44221 Dortmund, Germany", "person_id": "PP40024876", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/325694.325715", "year": "2000", "article_id": "325715", "conference": "POPL", "title": "Sparse code motion", "url": "http://dl.acm.org/citation.cfm?id=325715"}