{"article_publication_date": "01-05-2000", "fulltext": "\n\t\t\t", "proc_id": "325694", "abstract": "<p>Java source code is strongly typed, but the translation from Java source to bytecode omits much of the type information originally contained within methods. Type elaboration is a technique for reconstructing strongly typed programs from incompletely typed bytecode by inferring types for local variables.</p><p>There are situations where, technically, there are not enough types in the original type hierarchy to type a bytecode program. Subtype completion is a technique for adding necessary types to an arbitrary type hierarchy to make type elaboration possible for all verifiable Java bytecode.</p><p>Type elaboration with subtype completion has been implemented as part of the Marmot Java compiler.</p>", "authors": [{"name": "Todd B. Knoblock", "author_profile_id": "81100628296", "affiliation": "Microsoft Research, Redmond, WA", "person_id": "P283183", "email_address": "", "orcid_id": ""}, {"name": "Jakob Rehof", "author_profile_id": "81100614854", "affiliation": "Microsoft Research, Redmond, WA", "person_id": "P131488", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/325694.325725", "year": "2000", "article_id": "325725", "conference": "POPL", "title": "Type elaboration and subtype completion for Java bytecode", "url": "http://dl.acm.org/citation.cfm?id=325725"}