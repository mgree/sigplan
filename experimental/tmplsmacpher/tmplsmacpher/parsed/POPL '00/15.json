{"article_publication_date": "01-05-2000", "fulltext": "\n\t\t\t", "proc_id": "325694", "abstract": "<p>Distributed-memory programs are often written using a global address space: any process can name any memory location on any processor. Some languages completely hide the distinction between local and remote memory, simplifying the programming model at some performance cost. Other languages give the programmer more explicit control, offering better potential performance but sacrificing both soundness and ease of use.</p><p>Through a series of progressively richer type systems, we formalize the complex issues surrounding sound computation with explicitly distributed data structures. We then illustrate how type inference can subsume much of this complexity, letting programmers work at whatever level of detail is needed. Experiments conducted with the Titanium programming language show that this can result in easier development and significant performance improvements over manual optimization of local and global memory.</p>", "authors": [{"name": "Ben Liblit", "author_profile_id": "81100555854", "affiliation": "Department of Electrical Engineering and Computer Science, University of California, Berkeley, Berkeley, CA", "person_id": "PP38025922", "email_address": "", "orcid_id": ""}, {"name": "Alexander Aiken", "author_profile_id": "81100399954", "affiliation": "Department of Electrical Engineering and Computer Science, University of California, Berkeley, Berkeley, CA", "person_id": "P13911", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/325694.325717", "year": "2000", "article_id": "325717", "conference": "POPL", "title": "Type systems for distributed data structures", "url": "http://dl.acm.org/citation.cfm?id=325717"}