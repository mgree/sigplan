{"article_publication_date": "01-21-2009", "fulltext": "\n Classical BI (A Logicfor Reasoning about Dualising Resources) James Brotherston * Cristiano Calcagno \nDept. of Computing, Imperial College London, UK {jbrother,ccris}@doc.ic.ac.uk Abstract We show how to \nextend O Hearn and Pym s logic of bunched implications, BI, to classical BI (CBI), in which both the \nadditive and the multiplicative connectives behave classically. Speci.cally, CBI is a non-conservative \nextension of (propositional) Boolean BI that includes multiplicative versions of falsity, negation and \ndisjunction. We give an algebraic semantics for CBI that leads us naturally to consider resource models \nof CBI in which every resource hasa unique dual.We thengivea cut-eliminating proof system for CBI, based \non Belnap s display logic, and demonstrate soundness and completeness of this proof system with respect \nto our semantics. Categories and Subject Descriptors F.4.1[Mathematical Logic and Formal Languages]: \nMathematical Logic model theory, proof theory, computational logic General Terms Theory, veri.cation, \nlanguages Keywords Classical BI, display logic, semantics, resource mod\u00adels, completeness, cut-elimination,bunchedimplications \n1. Introduction The logic of bunched implications (BI), due to O Hearn and Pym [24], is a substructural \nlogic suitable for reasoning about do\u00admains that incorporate a notion of resource [27]. Its best-known \napplication in computer science is separation logic, which is a Hoare logic for reasoning about imperative, \npointer-manipulating programs [29]. Semantically, BI arises by considering cartesian doubly closed categories \n(i.e. categories with one cartesian closed structure and one symmetric monoidal closed structure) [26]. \nThis view gives rise to the following propositionalconnectives1 for BI: Additive: T . \u00ac . . . Multiplicative: \nT* * * * Research supported by EPSRC grant EP/E002536/1. Research supported by an EPSRC Advanced Fellowship. \n1Notethat,for purposesof notational consistencywith multiplicativefalsity .*, we write T* rather than \nthe usual I for the multiplicative unit of *. Permission to make digital or hard copies of all or part \nof this work for personal or classroom use is granted without fee provided that copies are not made or \ndistributed for pro.t or commercial advantage and that copies bear this notice and the full citation \non the .rst page.To copyotherwise, to republish, to post on servers or to redistribute to lists, requires \nprior speci.c permission and/or a fee. POPL 09, January 18 24, 2009, Savannah, Georgia, USA. Copyright \n&#38;#169; 2009ACM 978-1-60558-379-2/09/01... $5.00 c The interpretation of BI in models based upon \nthe aforemen\u00adtioned categories is necessarily intuitionistic. By instead using the algebraic semantics \nof BI, in which the multiplicatives are mod\u00adelled using (partially ordered) commutative monoids, the \nadditive connectives can be interpreted either classically or intuitionistically according to preference \n[27, 26]. When the additives are interpreted classically the resulting logic is known as Boolean BI [26], \nalso written BBI. The pure part of separation logic is essentially ob\u00adtainedbyconsideringaparticular \nmodelof BBI,based onamonoid of heaps [22]. In this paper, we show how to extend BBI to classi\u00adcal BI, \nalso written CBI, in which both the additives and the mul\u00adtiplicatives are treated classically. Speci.cally, \nCBI includes the multiplicative analogues of additivefalsity, negation and disjunc\u00adtion, which are absent \nin BBI. We consider CBI both from the model-theoretic and the proof-theoretic perspective. Model-theoretic \nperspective: From the point of viewof computer science, perhaps the most natural semantics for BBI is \nits algebraic semantics based on relational commutative monoids [17], which can be understood as an abstract \nrepresentation of resource [16]. In such models, of which the separation logic heap model is one instance, \nBBI-formulas have a natural declarative reading as state\u00adments about resources (i.e. monoid elements). \nThus the multiplica\u00adtive unit T* denotes the empty resource (i.e. the monoid iden\u00adtity element) and a \nmultiplicative conjunction F * G of two for\u00admulas denotes a division of resource, via the monoid operation, \ninto two components satisfying respectively F and G. The multi\u00adplicative implication * functions as a \nright-adjoint of *, so that (F * G) . H and F . (G * H) are semantically equivalent. It has hitherto \nbeen somewhat unclear how to give similarly declarative readings to multiplicativefalsity . * and multiplicative \n* negation ~ (with multiplicative disjunction . then being obtained as the de Morgan dual of * with \nrespect to ~). In Section 2 we providea solutionto this problembygiving an algebraic semantics for CBI \nwhich provides suf.cient structure to admit a declarative interpretationofthefullsetofmultiplicativeconnectives.Our \nCBI\u00admodels are obtainedbyimposingextra conditions on the usual rela\u00adtional commutative monoid models \nof BBI, the main requirement being the presence of an involution operation on monoid elements. The natural \nreading of this requirement in terms of resources is that every resourcein our models musthaveaunique \ndual.Infact,all Abelian groups are special instances of our models, in which the dual of an element is \nits group inverse. The resulting interpretations of multiplicativefalsity, negation and disjunction in \nour models are similar to those employed in rel\u00adevant logic (see e.g. [28, 15]).For example, the interpretation \nof multiplicativenegationis obtainedby combiningthe modelinvolu\u00adtion and the additive negation. These \ninterpretations, which at .rst sightmay seem unusual, are justi.edbythe desired semanticequiv\u00adalences \nbetween formulas. For example, under our interpretation * F * G is semantically equivalent to ~F . G. \nProof-theoretic perspective: In BI,the presence of the twoimpli\u00adcations . and * gives rise to two context-forming \noperations ; and , which correspond to the conjunctions . and * at the meta\u00adlevel. This situation is \nexempli.ed by the following (intuitionistic) sequent calculus right-introduction rules for the implications: \nG; F1 f F2 G,F1 f F2 (.R) ( *R) G f F1 . F2 G f F1 * F2 Accordingly, the contexts G on the left-hand \nside of the sequents in the rules aboveare not sets or sequences, as in standard sequent cal\u00adculi,but \nrather bunches:trees whose leaves are formulas and whose internal nodes are either ; or , denoting respectively \nadditive and multiplicative combinations of assumptions. The crucial difference between the two operations \nis that weakening and contraction are possible for ; but not for , . Since BI is an intuitionistic logic, \nbunches arise only on the left-hand side of sequents, with a single formula on the right.For CBI,a natural \napproach fromaproof\u00adtheoretic perspective would be to consider a full two-sided sequent calculusinwhich \n; and , inbunchesontherightof sequentscor\u00adrespond to the two disjunctions at the meta-level. One would \nthen expect the additive and multiplicative negations to have the effect of swapping sides with respect \nto ; and , respectively: G f F ;. G,F f . (\u00acL) (~R) G; \u00acF f .G f~F, . with(\u00acR) and(~L) being symmetric, \nand with rules for multi\u00ad * plicative disjunction . dual to those for *. Unfortunately, it is not obvious \nhow to formulate such a sequent calculus that admits cut\u00adelimination (see [6, 26] for some discussion \nof the dif.culties), or a similar natural deduction system satisfying normalisation2. In Section 4, we \naddress this rather unsatisfactory situation by formulating a display calculus proof system for CBI that \nsatis.es cut-elimination, with an attendant subformula property for cut-free proofs. Our system, DLCBI, \nis based on Belnap s display logic, which is a generalised Gentzen-style system that can be instanti\u00adatedtoa \nwide classof logics simplyby choosingfamiliesof con\u00adnectives and the structural rules governing thosefamilies \n[1]. The power of display logic comes from its generic structural principles, which are suf.cient to \nguarantee certain desirable proof-theoretic properties, more or less independently of the particular \nchoice of connectivefamilies and structural rules. As well as satisfyingcut\u00adelimination, our system DLCBI \nis sound and complete with respect to our algebraic semantics for CBI. The proofs of soundness and completeness \nconstitute one of the main technical contributions of this paper,and are presentedin Section5. First,we \nde.neanexten\u00adsion of the usual sequent calculus for BBI by axioms that capture the behaviour of the involution \nin our models. Using techniques from modal logic, we show that this extended sequent calculus, LBI+, \nis sound and complete with respect to validity in our mod\u00adels.(However, LBI+ does not contain primitive \nintroduction rules for every connective of CBI, nor does it satisfy cut elimination.) Soundness and completeness \nfor DLCBI then follows by proving admissibility of DLCBI in LBI+ under a suitable embedding, and vice \nversa. Applications: (B)BI,and in particular its resource semantics, has found application in several \nareas of computer science, including polymorphic abstraction [12], type systems for reference update \nand disposal [2], context logic for tree update [8] and, most ubiq\u00aduitously, separation logic [29] which \nforms the basis of many con\u00adtemporary approaches to reasoning about pointer programs (recent examples \ninclude [25, 11, 10]). 2To our knowledge, there are noexisting such calculieven forBBI, though Pym and \nO Hearn have given systems of both types for BI [26, 24] We demonstrate that CBI is a non-conservative \nextension of BBI. Unfortunately, this appears to rule out the naive use of CBI for reasoning directly \nabout some BBI-models such as the sepa\u00adration logic heap model, which is not a CBI-model. On the other \nhand, non-conservativity indicates that CBI is genuinely different in character to BBI thus of intrinsic \ntechnical interest and can reasonably be expected to have different applications. In Sec\u00adtion 3 we consider \na range of example CBI-models drawn from quite disparate areas of mathematics and computer science, includ\u00ading \nbit arithmetic, regular languages, moneyandageneralised heap model.In Section6 we suggest some directions \nfor future applica\u00adtions of CBI, as well as discussing related work. Due to space limitations, we have \nabbreviated or omitted some proofs of the results in this paper. Full proofs can be found in an associated \ntechnical report [5]. 2. Syntax and algebraic semantics of CBI In this section we de.ne CBI, the fully \nclassical version of BBI featuring additiveand multiplicativeversionsofallthe usual propo\u00adsitional connectives \n(cf. [26]).Wegivea classof algebraic models for CBI, and show how to interpret CBI-formulas in these \nmodels. Our CBI-models are based on the relational commutative monoids used to model BBI [17, 8]. In \nfact, they are special cases of these monoids, containing extra structure: an involution operation - \non elements and a distinguished element3 8 that characterises the result of combining an element with \nits dual un\u00adder involution. In particular, our models include as instances all Abelian groups. Note that \nwe write P(X) for the powerset of a set X. De.nition 2.1 (CBI-model). A CBI-model is given by a tuple \n(R, ., e, -, 8), where . : R \u00d7 R .P(R), e . R, - : R . P(R), and 8. R such that: 1. . is commutative \nand associative, with x . e = {x} 2. -x = {y . R | x . y n8 = \u00d8} 3. --x = {x}  We extend - and . \nto P(R) and P(R) \u00d7P(R) respectively  by: -X =def -x and X . Y =def x . y. x.Xx.X,y.Y Associativity \nof . is understood with respect to this extension. Weremark that if(R, ., e, -, 8) isa CBI-model then \n(R, .,e) is a BBI-model, i.e. a relational commutative monoid. Proposition 2.2. If (R, ., e, -, 8) is \na CBI-model then: 1. .x . R. -x is a singleton set; 2. -e = 8; 3. .x . R. x .-x .8; 4. .X . R. R \\ \n(-X)= -(R \\ X).   Proof. 1. Bycontradiction. If -x = \u00d8 then --x = y.-x -y = \u00d8, which contradicts --x \n= {x}. If x1,x2 .-x with x1 x2, then -x1 .-x2 . --x. Also, -x1 -x2, == otherwise we would have {x1} = \n--x1 = --x2 = {x2}and thus x1 = x2. Since -x1 and -x2 have cardinality > 0 (see above), --x must have \ncardinality > 1, which contradicts --x = {x}. 2. We have: -e = {y . R | e . y n8= \u00d8}= {y . R |{y}n8= \n\u00d8}= {y . R | y . 8} = 8 3For technical convenience, we actually de.ne8 to be a set of elements, but \nthe conditions de.ning our models force8 to be a singleton set. See Convention 2.3. 3. Using part 1, \n.rst write -x = {x'}. Then {x'} = {y . R | x . y n8 = \u00d8}, so x . x' n8 = x .-x n8 is nonempty.By parts1and2, \n8 = -e is a singleton set, so we must have x .-x .8 as required. 4.(.) Suppose x . R \\-X, i.e. x .-X \n= y.X -y, so x .-y for any y . X. Also, using part 1, we have x . --x = -{z} = -z for some z.We must \nhave z . X, so x .-z = -z = -(R \\ X) as required. z .Xz.R\\X (.)Supposex .-(R\\X),i.e.x .-y for some y \n. X. Note that we cannot have x .-z for any z . X, otherwise by part 1we have -y = -z = {x} and thus \n{y} = --y = --z = {z}, soy = z,whichisa contradiction. Thus x .-z = z.X -X, i.e. x . R \\-X as required. \n by induction on the structure of F as follows: r |= P . r . .(P ) r |= T. always r |= .. never r |= \n\u00acF . r |= F r |= F1 . F2 . r |= F1 and r |= F2 r |= F1 . F2 . r |= F1 or r |= F2 r |= F1 . F2 . r |= \nF1 implies r |= F2 r |= T * . r = e r |= . * . r = 8 r |= ~F .-r |= F r |= F1 * F2 ..r1,r2.r . r1 . \nr2 and r1 |= F1 and r2 |= F2 * r |= F1 . F2 . .r1,r2. -r . r1 . r2 implies -r1 |= F1 or -r2 |= F2 ''''' \n. r . r .r,r.r' and r' |= F1r |= F1 * F2 . Parts1and2ofProposition2.2 justifythe following convention. \nimplies r'' |= F2 Convention 2.3. Givena CBI-model (R, ., e, -, 8), for any x . Note that R the notation \n-x is henceforth to be understood as the unique r |= F should be read informally as: F is true in resource \nstate r (in the model M and under environment .) . element z . R such that -x = {z}. Similarly, 8 is \nto be understood as the unique z . R such that 8 = {z}. We remark that the satisfaction relation for \nCBI is just an extension of the standard satisfaction relation for BBI with the If (R, ., e, -, 8) is \na CBI-model and the cardinality of x . y is = 1 for all x, y . R, then we understand . as a partial function \nclauses for . * , ~ and * .. R \u00d7 R-R in the obvious way. Proposition 2.4. Let (R, ., e, -, 8) be a CBI-model \nwith . a partial function. If 8 = e then . is in fact a total function and (R, ., e, -) is an Abelian \ngroup. Proof. First note that by part 3 of Proposition 2.2 and thefact that . is a partial function, \nwe have -x . x = 8 = e for all x . R. Now, to see that x . y is de.ned for any x, y . R, observe that \n-x . (x . y)=(-x . x) . y = e . y = y. Thus -x . (x . y) is de.ned, which can only be the case if x . \ny is de.ned. Tosee that(R, ., e, -) is an Abelian group, we .rst observethat * Perhaps surprisingly, \nmultiplicative falsity . * and multiplica\u00adtive negation ~F are not interpreted in (R, ., e, -, 8) as \nthe model element 8 and the set -F = {r |-r |= F } respec\u00adtively,but rather as R \\ {8} and R \\-F . These \ninterpretations, which essentially embed an additive negation inside the multiplica\u00adtive connectives, \nensure that the expected semantic equivalences hold between formulas.Forexample, ~F and F *. * are seman\u00adtically \nequivalent under our interpretation,but they are not if ~F and . * are interpreted as -F and 8 respectively. \nAs expected, . is interpreted as the de Morgan dual of multiplicative disjunction * with respect to \n~. We say that a CBI-formula F is true in a CBI-model M = (R, ., e, -, 8) iff r |= F for any environment \nfor M and for all r . R.Truth of a BBI-formula in a BBI-model is similar. (R, .,e) is alreadyapartial \ncommutativemonoidbythe conditions imposed on . bythe de.nition ofCBI-models (Defn. 2.1). Further\u00admore, \n. is a total function by the above, and -x is the unique in-Lemma 2.7 (CBI equivalences). For anyCBI-model \nM, the fol\u00adverse of x for any x . R, since -x . x = e and y . x = e implies lowing semantic equivalences \nF = G hold in the sense that F is -x =(y . x) .-x = y . (x .-x)= y. true in M iff G is true in M: * ~T \n= . F . G = ~(~F *~G) We now de.ne the syntax ofCBI,andgive the interpretationof ~T * = . * F * G = \n~F * . G its connectives in terms of our CBI-models.We assumea .xed set ~~F = FF * G = ~G *~F V of propositional \nvariables. \u00ac~F = ~\u00acFF *. * = ~F * * * F *~F = . F .. = F De.nition 2.5 (CBI-formula). Formulasof CBI \nare given by the following grammar: In the following, we call a formula F a theorem of CBI if it is \ntrue in every CBI-model, and similarly for BBI. Our next result F ::= * P |T|.|\u00acF | F . F | F . F | \nF . F |T * |. * |~F | F * F | F . F | F * F establishes that CBI is a stronger logic than BBI in the \nsense that it has more theorems. where P ranges over V. Proposition 2.8 (Non-conservative extensionality). \nCBI is a non\u00adCBI-formulas extend (B)BI-formulas with a multiplicative conservative extension of BBI. \nThat is, all theorems of BBI are theorems of CBI, but the converse does not hold (even when re\u00ad * .. \nNow in order to de\u00ad.ne the interpretation of CBI-formulas in a CBI-model M = (R, ., e, -, 8), we need \nas usual an environment for M, which is a function . : V. R interpreting propositional variables as true \nfalsity . *, negation ~ and disjunction stricted to BBI-formulas). Proof. (Sketch)To see that CBI is \nan extension of BBI, we just orfalseinagiven resource state r . R.We can then de.ne a observe that any \nCBI-model is in particular a BBI-model, since satisfaction or forcing relation interpreting formulas \nrelative to the latter are just relational commutative monoids. Now let P be a propositional variable \nand let I and J be abbreviations for BBI-formulas de.ned as follows: I =def \u00acT * *. model elements. J \n=def T* (T * .\u00ac(P *\u00acI)) Using the de.nition of satisfaction above, the formula I can It is not immediately \nobvious how to read this formula informally. * . W is semantically equivalent to be satis.edonlyby nonextensible \nelementsofa model,i.e. those However, observing that C elements r such that r.r ' = \u00d8 for all r ' = \ne. Similarly,the formula ~C * W and to ~W * C, the meaning becomes perfectly J expresses the existence \nof some element r such that r |= P and r is nonextensible. In CBI-models, only 8 can possibly be nonextensible \nsince r .-r = \u00d8 for all r by Proposition 2.2, and 8 is the unique element r satisfying -r = e. Thus, \nin CBI-models, if r |= I and r |= J then r = 8 and 8|= P , so I . J . P is a theorem of CBI. However, \nit is not a theorem of BBI, since one can easily constructa partial or relational commutativemonoid with \ntwo distinct nonextensible elements. 3. Examples of CBI-models We now turn to some concrete examples \nofCBI-models. In all of our examples, the monoid operation . is a partial function rather than a relation. \nExample 3.1 (Personal .nance). This example builds on the vending machine model for BI given by Pym, \nO Hearn and Yang [27], which itselfwasinspiredbyGirard swell-known Marl\u00adboro and Camel illustrationof \nlinear logic[18]. Let (Z, +, 0, -) be the Abelian group of integers under addition with identity 0, where \n- is the usual unary minus. This group is a CBI-model by Proposition 2.4. The elements of this model \ncan be understood as .nancial resources, i.e money (which we shall measure in pounds sterling, \u00a3), with \npositive and negative integers representing respectively credit and debt. We read the CBI-satisfaction \nrelation \u00a3m |= F informally as \u00a3m is enough to make F true , and show how to read some example CBI\u00adformulas \naccording to this interpretation. Let C and W be atomic formulas denoting respectively the abilitytobuycigarettes \ncosting \u00a35and whiskycosting\u00a3204, so that we have \u00a3m |= C . m = 5 and \u00a3m |= W . m = 20. Then, as is also \nthe case in BBI, the formula C . W denotes the ability tobuycigarettesandthe abilitytobuy whisky(butnot \nnecessarily tobuy both together): \u00a3m |= C . W . \u00a3m |= C and \u00a3m |= W . m = 20 In contrast, the formula \nC * W denotes the ability to buy both cigarettes and whiskytogether: \u00a3m |= C * W ..m1,m2 . Z. \u00a3m = \u00a3m1 \n+ \u00a3m2 and \u00a3m1 |= C and \u00a3m2 |= W . m = 25 Again, as in BBI, the multiplicative implication C * W denotes \nthefact that if one acquires enough money tobuy cigarettes then the resulting balanceof fundsissuf.cienttobuy \nwhisky: \u00a3m |= C * W ..m ' . Z. \u00a3m ' |= C implies \u00a3m + \u00a3m ' |= W . m = 15 What about the new multiplicative \nconnectives of CBI?We have \u00a3m |= . * . m =0, so that . * simply denotes thefact that one has either some \ncredit or some debt.Now consider the formula ~C.We have: \u00a3m |= ~C .-\u00a3m |= C .-m< 5 . m> -5 So ~C denotes \nthe fact that one s debt, if any, is strictly less than the price of a pack of cigarettes. As for the \nmultiplicative clear: if one spends less than the price of a pack of cigarettes, then onewillstillhaveenough \nmoneytobuywhisky,andviceversa. In our remaining examples, we just show how to construct a CBI-model, \nand leave the interpretation of CBI-formulas inside these models as an exercise for interested readers. \nExample 3.2 (Regular languages). Let S be an alphabet and let L(S) denote the set of regular languages \nover S. Let . be the empty language and let + denote disjoint union of languages (so that L1 + L2 is \nunde.ned if L1 n L2 = \u00d8). It is readily seen that (L(S), +,.) isa partial commutative monoid.We observe \nthatfor any regular language L, its complement L =S \\ L is the unique regular language such that L + \nL =S. Thus (L(S), +, ., \u00b7 , S) is a CBI-model. Note that the same model construction works if one takes \nas the domain the set of all languages over S, rather than just the regular languages. Example 3.3 (Bit \narithmetic). Let n . N and observe that an n-bit binary number can be represented as an element of the \nset {0, 1}n. Let XOR and NOT be the usual logical operations on binary numbers. Then the following is \na CBI-model: ({0, 1}n , XOR, {0}n , NOT, {1}n) In this model, the resources e and 8 are the n-bit representations \nof 0 and 2n - 1 respectively. Example 3.4 (Action communication). Let A be anyset of objects (to be understood \nas CCS-style actions ) and de.ne the set A = {a | a . A} to be disjoint from A. Then the following tuple \nis a CBI-model: (A . A .{0,t}, \u00b7|\u00b7 , 0, \u00b7 ,t )where 0,t . A.A,the operation \u00b7 isextended to A.A.{0,t \n} by 0=def t and a =def a and \u00b7|\u00b7 is a commutative binary operation de.ned as follows: a | 0 a =def a \n| at =def a | b unde.ned for b .{0,a} =def Note that (A . A .{0,t }, \u00b7|\u00b7 , 0) isa partial commutative \nmonoid. The operation \u00b7|\u00b7 modelsavery simplisticversionof communica\u00adtion between actions: communication \nwith the empty action 0 has no effect, communication between a pair of dual actions a and a (which may \nbe read, e.g., as send a and receive a ) results in the successful communication action t, and all other \ncommuni\u00adcations are disallowed. The followingexample shows that, when the monoidal structure of a CBI-model \nis .xed, the choice of 8 is not unique in general. Example 3.5 (Integer modulo arithmetic). Consider \nthe monoid (Zn, +n, 0), where Zn is the set of integers modulo n, and +n is addition modulo n.We can \nform a CBI-model from this monoid by choosing, for any m . Zn, 8 =def m and -k =def m -n k (where -n \nis subtraction modulo n). Example 3.6 (Syntactic models). Given an arbitrary monoid (R, .,e),wegiveasyntactic \nconstructionto generateaCBI-model (R ' , . ' ,e ' , - ' , 8 ' ). Consider the set T of termsgivenbythe \ngram\u00ad mar: disjunction, C * . W , we have: \u00a3m |= C . W ..m1,m2. -\u00a3m = \u00a3m1 + \u00a3m2 t . T ::= r . R |8| \nt \u00b7 t |-t * implies -\u00a3m1 |= C or -\u00a3m2 |= W and let be the least congruence such that: r1 \u00b7 r2 r1 . \nr2 = r; t1 \u00b7 t2 t2 \u00b7 t1; m = 24 r when \u00b7 (t2 \u00b7 t3) (t1 \u00b7 t2) \u00b7 t3; t1 . the equivalence class of t. \nThe required CBI-model is obtained by de.ning R ' =def T/ , . ' ([t1], [t2]) =def [t1 . t2], e ' =def \n[e], - ' (t)=def [-t], and 8 ' =def [8]. Example 3.7 (Generalised heaps). Anatural question is whether \nBBI models used in separation logic are also CBI-models. Con\u00adsider the partial commutative monoid (H, \n.,e), where H =def Z>0 -Z is the set of partial functions from positive integers to integers, . is disjoint \nunion of the graph of functions, and e is the function with empty domain. Unfortunately, no choice of \n8 gives rise to a CBI-model. However, it is possible to em\u00adbed the heap monoid into a more general structure \n(H ' , . ' ,e ' ), where H ' =def P(Z>0 \u00d7 Z) is the set of relations instead of partial functions, . \nis disjoint union, and e is the empty relation. ACBI-model is then obtained by setting 8 =def Z>0 \u00d7 Z, \nand -r =def (Z>0 \u00d7 Z) \\ r. Example 3.8 (Heaps with fractional permissions). As a .nal ex\u00adample, we consider \na heap monoid with fractional permissions [4] (Hp, .p,ep), where Hp =def Z>0 -Z\u00d7 (0, 1] consists of func\u00adtions \nwhich in addition return a permission in the real interval (0,1], and . is de.ned on functions with overlapping \ndomains us\u00adingapartialcomposition function . :(Z\u00d7(0,1])\u00d7(Z\u00d7(0, 1]) \u00ad(Z\u00d7 (0, 1]) such that .((v1,p1),(v2,p2)) \nis de.ned if and only if v1 = v2 and p1 + p2 = 1, and returns (v1,p1 + p2). The unit ep is again the \nfunction with empty domain. In analogy with our ap\u00adproachto ordinaryheapsinthepreviousexample,we de.neamore \ngeneral structure (Hp' , . ' p,e ' p), where Hp ' =def Z>0 \u00d7 Z . [0, 1] is the set of total functions, \nand .p ' is de.ned point-wise using + : [0, 1] \u00d7 [0, 1] -[0, 1], which is ordinary addition restricted \nto be de.ned only when the result is = 1. The function e ' p mapsevery\u00adthing to 0.A CBI-modelis then \nobtainedby setting 8 as mapping everything to 1, and -r =def {(l, v, 1 - p) | (l,v,p) . r}. Ob\u00adserve \nthat, in this case, the general model is in a way simpler, and that the - operation returns the complement \nof the permissions. 4. DLCBI:a display calculusproof systemforCBI In this section, we present DLCBI, \na display calculus proof system for CBI based on Belnap s display logic [1]. DLCBI can be seen as a particular \ninstantiation of display logic to CBI, in much the same style as Gor\u00b4e s display systems for other substructural \nlogics [20]. Our display calculus satis.es cut-elimination, and is sound and complete with respect to \nour CBI-models. The proof judgements of DLCBI, called consecutions, arebuilt from structureswhich generalisethebunchesusedinexistingproof \nsystems for (B)BI (cf. [26]). De.nition 4.1 (Structure/consecution). ADLCBI-structure X is constructed \naccording to the following grammar: X ::= F |\u00d8| rX | X; X | \u00d8 | bX | X, X where F rangesover CBI-formulas. \nIf X and Y are structures then X f Y is saidtobea consecution. Thefollowing de.nitiongivesthe semanticinterpretationofour \nconsecutions, and extends the notion of validity for CBI formulas given in Section 2. De.nition 4.2 (Validity \nin DLCBI). For anystructureX we mutu\u00adally de.ne two formulas .X and .X by induction on the structure \nStructural connectives Additive family: \u00d8 r ; Multiplicative family: \u00d8 b, Arity: 0 12 Formula connectives \nAdditive family: T . \u00ac... T ** * Multiplicative family: . ~*. * Arity: 0 0 122 Figure 1. The connectivefamiliesof \nDLCBI. of X as follows: .F = F .F = F .\u00d8 = T .\u00d8 = . ..X = \u00ac.X ..X = \u00ac.X .X1;X2 =.X1 . .X2 .X1;X2 =.X1 \n. .X2 T ** .\u00d8 =.\u00d8 = . .bX = ~.X .bX = ~.X * .X1,X2 =.X1 * .X2 .X1,X2 =.X1 . .X2 A consecution X f Y \nis said to be true in a CBI-model M = (R,., e, -, 8) if for any environment . for M and for all r . R, \nwehave r |=.X implies r |=.Y . X f Y is said to be valid if it is true in all CBI-models. We can divide \nthe structural and logical connectives ofDLCBI into an additivefamily anda multiplicativefamily, as illustratedin \nFigure1.In Belnap s display logic, an arbitrary numberoffamilies of connectives may be involved; the \nstructural connectives are .xed for eachfamily while the logical connectives may be chosen from a given \nset. Then, for each family, display logic posits certain bidirectional proof rules called display postulates, \ninvolving only the structural connectivesof thefamily. The purposeofthe display postulates is to allow \nconsecutions to be shuf.ed so as to display anystructure occurrence therein as the entire left-or right-hand \nside of a consecution (according to the original position of the structure in the consecution). The logical \nintroduction rules for formulas are similarly prescribed for each connectivefamily, with only the structural \nrulesgoverning thefamily chosen freely. Wegivethe displaypostulatesforDLCBI in Figure 2. These are Belnap \ns original postulates instantiatedto our connectivefamilies, though other formulations are possible (see \ne.g. [19]). Note that we write a rule with a double line to indicate that it is invertible, i.e., that \nthe rolesof premise and conclusion maybe reversed.A.gure withthree consecutions separatedbytwodoublelinesisusedtoab\u00adbreviatetwoinvertible \nrulesintheobviousway.Two consecutions are said to be display-equivalent if thereisa derivationof one \nfrom the other using only the display postulates. De.nition 4.3 (Antecedent part/consequent part). AstructureW \nis saidtobea part of another structure Z if W is a substructure of Z (in the obvious sense). W is saidtobea \npositive part of Z if W occurs inside an even number of occurrences of r and b in Z, and a negative part \nof Z otherwise. AstructureW is said to be an antecedent part of a consecution X f Y if it is a positive \npart of X or a negative part of Y . W is said tobea consequent part of X f Y if it is a negative part \nof X or a positive part of Y . The following theorem describes the fundamental property of display logic: \nthe ability to display structures occurring in a consecutionby rearrangingit using the display postulates. \nAdditive family: X f Y ; Z X f Y X; Y f Z ======== (AD1) X f rY ; Z ======== (AD2a) X; rY f Z ======== \n(AD2b) ====== (AD3a) rY f rX ====== (AD3b) X f Z; Y rrX f Y Multiplicative family: X f Y, Z X f Y X, \nY f Z = ===== (MD1) X f bY, Z ======== (MD2a) X, bY f Z ======== (MD2b) X f Z, Y ====== (MD3a) bY f bX \n====== (MD3b) bbX f Y Figure 2. The display postulates for DLCBI. Theorem 4.4 (Display theorem (Belnap \n[1])). For any antecedent part W of a consecution X f Y there exists a structure Z such that W f Z is \ndisplay-equivalent to X f Y . Similarly, for any consequent part W of X f Y there exists a structure \nZ suchthat Z f W is display-equivalent to X f Y . We note that the display theorem holds even when connectives \nfrom differentfamilies occurin the same consecution. Example 4.5. The antecedent part Y of the consecution \nb(X, rY ) f Z; bW can be displayed as follows: b(X, rY ) f Z; bW (MD3a) b(Z; bW ) f bb(X, rY ) (MD3a,b) \nbbb(Z; bW ) f bb(X, rY ) (MD3a) b(X, rY ) f bb(Z; bW ) (MD3a) b(Z; bW ) f X, rY (MD2b) b(Z; bW ), bX \nf rY (AD3a) rrY f r(b(Z; bW ), bX) (AD3a,b) Y f r(b(Z; bW ), bX) The logical rules for DLCBI, given in \nFigure 3, follow the familiar division between left and right introduction rules (plus the identity axiom \nand a cut rule). Again, these are the instantiations of the standard display logic rules to the connective \nfamilies we consider for CBI. The structural rules of DLCBI are given in Figure 4. These implement associativity,commutativity \nand unitary laws for ; and , on both sides of consecutions, plus weakening and contraction for the additive \ncombination ; . The identity axiom of DLCBI is postulated only for proposi\u00adtionalvariables5,but canbe \nrecovered for arbitrary formulas. Proposition 4.6. F f F is DLCBI-provable for all formulas F . Identity \nrules: (Id) P f P Additive family: \u00d8f X (TL) Tf X (.L) .f\u00d8 rF f X (\u00acL) \u00acF f X F ; G f X (.L) F . G f \nX F f XG f Y (.L) F . G f X; Y X f FG f Y (.L) F . G f rX; Y Multiplicative family: \u00d8 f X (T *L) T \n* f X (. *L) . * f \u00d8 bF f X (~L) ~F f X F, G f X (*L) F * G f X F f XG f Y  * ( * X f FF f Y (Cut) \nX f Y (TR) \u00d8fT X f\u00d8 (.R) X f. X f rF (\u00acR) X f\u00acF X f FY f G (.R) X; Y f F . G X f F ; G (.R) X f F . G \nX; F f G (.R) X f F . G (T *R)\u00d8 fT * X f \u00d8 * (. *R) X f. X f bF (~R) X f~F X f FY f G (*R) X, Y f F * \nG X f F, G .R) * ( * .L) F . G f X,Y X f F . G Proof. By structural induction on F . Theorem 4.7 (Cut-elimination). \nIf a consecution X f Y is prov\u00adable in DLCBI then it is also provable without the use of (Cut). Proof. \nByinspection, our proof rules satisfy the8conditions shown by Belnap in [1] to be suf.cient for cut-elimination \nto hold. See [5] for details of the conditions and their veri.cation. The following corollary of Theorem \n4.7 uses the notion of a subformula of a CBI-formula, de.ned in the usual way. X f FG f Y X,F f G ( *L) \n( *R) F * G f bX,Y X f F * G Figure 3. Logical rules for DLCBI. Note that X, Y range over structures, \nF, G range over CBI-formulas and P ranges over V. Additive family: W ;(X; Y ) f ZW f (X; Y ); Z =========== \n(AAL) =========== (AAR) (W ; X); Y f ZW f X;(Y ; Z) X; Y f ZX f Y ; Z (ACL) (ACR) Y ; X f ZX f Z; Y \u00d8; \nX f YX f Y ; \u00d8 ======= (AIL) ======= (AIR) X f YX f Y X f ZX f Z (WkL) (WkR) X; Y f ZX f Y ; Z X; X f \nZX f Z; Z (CtrL) (CtrR) X f ZX f Z Multiplicative family: W, (X, Y ) f ZW f (X, Y ),Z =========== (MAL) \n=========== (MAR) (W, X),Y f ZW f X, (Y, Z) X, Y f ZX f Y,Z (MCL) (MCR) Y,X f ZX f Z, Y \u00d8,X f YX f Y, \n\u00d8 ======= (MIL) ======= (MIR) X f YX f Y Figure 4. Structural rules for DLCBI. Corollary 4.8 (Subformula \nproperty). If X f Y is DLCBI \u00adprovable then there is a DLCBI proof of X f Y in which every formula occurrence \nis a subformula of a formula occurring in X f Y . Proof. If X f Y is provable then it has a cut-free \nproof by Theorem 4.7. By inspection of the DLCBI rules, no rule instance in this proof can have in its \npremises any formula that is not a subformula of a formula occurring in its conclusion. Thus a cut\u00adfree \nproof of X f Y cannot contain any formulas which are not subformulas of formulas in X f Y . Corollary \n4.9 (Consistency). The consecution \u00d8f\u00d8 is not prov\u00adable in DLCBI. Proof. If \u00d8f\u00d8 were DLCBI-provable then, \nby the subformula property (Corollary 4.8) there is a proof of \u00d8f\u00d8 containing no formula occurrences \nanywhere. But every axiom of DLCBI contains a formula occurrence. Our main technical results concerning \nDLCBI are the following. Theorem 4.10 (Soundness of DLCBI). If there is a DLCBI proof of X f Y then X \nf Y is valid. Theorem 4.11 (Completeness of DLCBI). If X f Y is valid then there is a DLCBI proof of \nX f Y . We give the proofs of Theorems 4.10 and 4.11 in Section 5. We remark that, although cut-free \nproofs in DLCBI enjoy the subformula property, cut-free proof search in our system is still (Proposition \n4.6) \u00b7 \u00b7 \u00b7 F f F (D=) rF f rF (\u00acR) rF f\u00acF (D=) b\u00acF f brF (~L) ~\u00acF f brF (WkL) ~\u00acF ; ~F f brF (D=) bF \nf brb(~\u00acF ; ~F ) (~L) ~F f brb(~\u00acF ; ~F ) (WkL) ~\u00acF ; ~F f brb(~\u00acF ; ~F ) (D=) rb(~\u00acF ; ~F ) f b(~\u00acF \n; ~F ) (WkL) b\u00d8; rb(~\u00acF ; ~F ) f b(~\u00acF ; ~F ) (D=) b\u00d8f b(~\u00acF ; ~F ); b(~\u00acF ; ~F ) (CtrR) b\u00d8f b(~\u00acF ; \n~F ) (D=) ~\u00acF f r~F ; \u00d8 (AIR) ~\u00acF f r~F (\u00acR) ~\u00acF f \u00ac~F Figure 5. A cut-free DLCBI proof of ~\u00acF f \u00ac~F \n. The rule symbol (D=)denotes the use of a display-equivalence. rather non-deterministic due to the presence \nof the display postu\u00adlates and structural rules. In Figure 5 we give a sample cut-free proof of the consecution \n~\u00acF f \u00ac~F , which illustrates this phe\u00adnomenon. The applications of the display-equivalences are required \nin order to apply the logical rules, as one would expect, but the proof also makes seemingly essential \nuse of contraction, weaken\u00ading and a unitary law. It is not obvious to us whether the use of such structural \nrules can be eliminated by suitable reformulations ofthelogical rules.(Wenotethattheneedto manipulatethe \nstruc\u00adtureofbunches posesa similar problemforproof searchin sequent calculus systems for BI [14].) 5. \nSoundness and completenessproofsfor DLCBI Inthis sectionwegivetheproofsof soundnessandcompletenessof \nour display calculus DLCBI withrespect tovalidity in CBI-models. First, we de.ne in Section 5.1 an extension \nLBI+ of a sequent calculus proof system for BBI. In this extension, the element 8 and the involution \n- in CBI-models are represented directly.We demonstrate soundness and completeness of LBI+ with respect \nto CBI-models. Our proof of completeness uses techniques from modal logic, similar to those employed \nin [8], and is presented in Section 5.2. Then, in Section 5.3, we prove admissibility of the DLCBI rules \nin LBI+ under a suitable translation, and vice versa. Soundness and completeness of DLCBI then follows \nfrom the soundness and completeness of LBI+ . 5.1 LBI+:a sequent calculusforCBI In this section we de.ne \na simple extension BI+ of BBI, and a corresponding sequent calculus system, LBI+, which is sound and \ncomplete with respect to CBI-models. Formulasof BI+ aregivenby the following grammar: F ::= P |T|.| F \n. F | F . F | F . F |T * | F * F | F * F | N where P ranges over the propositional variables V. These \nare ex\u00adactly the formulas of BI plus the new atomic formula N .We also use the following abbreviations6: \n\u00acFF .. =def -F =def \u00ac(F *\u00acN ) Given a CBI-model M = (R, ., e, -, 8) and an environment . for M, satisfaction \nof a BI+-formula F by a resource state r . R is then given by the relation r |= F for CBI-formulas (cf. \nDe.nition 2.6) plus the following clause for the formula N : r |= N . r = 8 Lemma 5.1.1. Let M = (R, \n., e, -, 8) be a CBI-model and let . be an environment for M.For any r . R and formula F we have r |= \n-F iff -r |= F . Proof. We have by the de.nitions of-F and of satisfaction: r |= -F . r |= \u00ac(F *\u00acN ) \n. r |= F *\u00acN ''' '' '' '' ..r,r .r . r . r and r |= F butr |= \u00acN ''' '' '' '' ..r,r .r . r . r and r \n|= F and r = 8 ' '' . .r. 8. r . r and r |= F . -r |= F  Notethatthe .nalequivalenceaboveis justi.edbythefactthat \n-r is the unique element of R satisfying 8. r .-r, which follows from Proposition 2.2. As is standard \nin BI, we write sequents of the form G f F , where F isa BI+-formula and G isa bunch,givenby the following \ngrammar: G ::= F | G; G | G, G where F ranges over BI+-formulas. Thusbunches are trees whose leaves are \nformulas and whose internal nodes are either ; or , . We writeG(.) forabunchof which . is a distinguished \nsub\u00adbunch (i.e. subtree), and in such cases write G(. ' ) for thebunch obtained by replacing . by thebunch \n. ' in G(.). In analogy to the use of sets in ordinary sequent calculus, and as is again standard for \nBI,we considerbunchesupto coherent equivalence: De.nition 5.1.2 (Coherent equivalence). = is the least \nrelation on bunches satisfying commutative monoid equations for ; and T, and for , and T *, plus the \nrule of congruence: if . = . ' then G(.) = G(. ' ). We remark that a BI+ sequent is a special case of \na DLCBI consecution, modulo possible occurrences of the formula N ,so that the notion of validity for \nDLCBI consecutions (cf. De.nition 4.2) transfers straightforwardly to BI+ sequents. That is, a sequent \nG f F is valid iff for any CBI-model M = (R, ., e, -, 8), any environment . for M and all r . R, we have \nr |=.G implies r |= F , where .- is the function given in De.nition 4.2 that replaces occurrences of \n; and , in a bunch by . and * respectively. This de.nition of validity coincides with the standard one \nfor BBI, when restricted to BBI-formulas. We give the rules of a sequent calculus proof systemLBI+ for \nBI+ in Figure 6. Its rules extend the rules of the usual sequent calculus for BI (cf. [26, 16]) with \nthe double negation axiom needed for BBI, and two further axioms that directly re.ect the fact that- \nbehaves as an involution in our models. 6Since we will treat . and the other additives classically in \nBI+, we could also take \u00ac as primitive,but choose not to for technical convenience. Structural rules: \nG(.) f F G(.; .) f F (Id) (Weak) (Contr) F f F G(.; . ' ) f F G(.) f F G ' f F . f G G(G) f F G = G ' \n(Equiv) (Cut) G f F G(.) f F Propositional rules: (.L) (TR)G(.) f F G fT G(F1; F2) f F G f F1 G f F2 \n(.L) (.R) G(F1 . F2) f F G f F1 . F2 G(F1) f F G(F2) f F G f Fi (.L) i .{1, 2} (.Ri) G(F1 . F2) f F G \nf F1 . F2 . f F1 G(.; F2) f F G; F1 f F2 (.L) (.R) G(.; F1 . F2) f F G f F1 . F2 G(F1,F2) f F G f F1 \n. f F2 (*L) (*R) G(F1 * F2) f F G, . f F1 * F2 . f F1 G(F2) f F G,F1 f F2 ( *L) ( *R) G(.,F1 * F2) f \nF G f F1 * F2 BI+ axioms: (DNE) (DIE) (DII) \u00ac\u00acF f F --F f FF f --F Figure 6. The proof rules of LBI+ \n. Proposition 5.1.3. LBI+ is sound with respect to CBI-models. Proof. As usual, soundness follows from \nthe fact that the proof rules of LBI+ preserve truth in CBI-models and every axiom (i.e. 0-premise rule)isvalid.We \nnote .rst that the rulesof LBI+ preservetruth in BBI-models and thus in CBI-models in particular. Thus \nit only remains to show that the BI+ axioms are true in any CBI-model. Soundnessoftheaxiom(DNE)followsfromthefact \nthat additive implication is interpreted classically in BI+.For the axioms (DIE) and (DII), note that \nr |= --F iff --r |= F by Lemma 5.1.1. Soundness of these axioms then follows from the fact that--r = \nr in CBI-models. 5.2 Completeness of LBI+ We now show completeness ofLBI+ with respect to CBI-models \nby appealing to a general theorem of modal logic due to Sahlqvist. The result is an adaptation of the \nanalogous completeness result for BBI in [8]. We .rst de.ne MBI+ pre-models, which interpret the LBI+ \nconnectives as modalities. De.nition 5.2.1. An MBI+ pre-model isatuple (R, ., - , e, -, 8), where . : \nR \u00d7 R .P(R), - : R \u00d7 R .P(R), e . R, - : R .P(R),and8. R.Weextend . and - to P(R)\u00d7P(R) and P(R) respectively \nin the same manner as in De.nition 2.1. The satisfaction relation for BI+-formulas in MBI+ pre-models \nis de.ned exactly as the satisfaction relation given above for BI+\u00adformulas in CBI-models, except that \nthe clause for formulas of the form F * G is replaced by the following one: ''' ''' r |= F1 * F2 ..r \n,r .r . r - r and M, r ' |= F1 implies M, r '' |= F2 Then,given anyset AX of axioms, we de.ne AX-models \nto be the MBI+ pre-models in which every axiom in AX holds. De.nition 5.2.2 (Modal LogicFormulas). Modal \nlogic formulas F are de.ned by the grammar: F ::= .| P | F . F |\u00acF |L(F1,...,Fn) where L ranges over \nthe modalities {e, -, ., - , 8} (with the obvious arities) and P ranges over V.We identify BI+-formulas \nand modal logic formulas by implicitly applying the usual trans\u00adlation for additives, plus the abbreviations \nN = 8, T * = e, F1 * F2 = F1 . F2 and F1 * F2 = \u00ac(F1 - \u00acF2). De.nition 5.2.3 (Very Simple SahlqvistFormulas). \nAvery simple Sahlqvist antecedent A isa formulagivenby the grammar: A ::= T|.| P | A . A |L(A1,...,An) \nwhere L rangesover the modalities {e, -, ., - , 8} and P ranges over V.A very simple Sahlqvist formula \nis a formula of the form A . F +, where A is a very simple Sahlqvist antecedent and F + is a modal logic \nformula which is positive in that no propositional variable P in F + may occur inside the scope of an \nodd number of occurrences of \u00ac. Theorem 5.2.4 (Sahlqvist [3]). Forevery axiom setAX consisting of very \nsimple Sahlqvist formulas, the modal logic proof theory generated by AX is complete with respect to the \nclass of AX\u00admodels. De.nition 5.2.5 (BI+-Axioms). The axiom set AXBI+ consists of the following very \nsimple Sahlqvist formulas: 1. e . F . F 2. F . e . F 3. F . G . G . F 4. (F . G) . H . F . (G . H) \n 5. F . (G . H) . (F . G) . H 6. G . (H . F ) . (H . (F - G)) .T 7. H . (F - G) . T- (G . (H . F )) \n 8. -- F . F 9. F .-- F  10. -F . F - 8 11. F - 8 . -F  We writeLAXBI+ for the modal logic proof \ntheory generated by the AXBI+ axioms. Corollary 5.2.6. LAXBI+ is complete with respect to the class of \nAXBI+ models. Lemma 5.2.7. Let (R, ., e, -, 8) be a tuple with the same types asin De.nition2.1,andextend \n- and . to P(R) and P(R)\u00d7P(R) respectively as in that de.nition. Then (R, ., e, -, 8) is a CBI\u00admodel \niffthe following hold for all X, Y, Z .P(R): 1. X.Y = Y .X and X.(Y .Z)=(X.Y ).Z and {e}.X = X 2. -X \n= X - 8 3. --X = X  where X - Y =def {z . R |.x . X, y . Y.y . x . z}. Proof. (.)The required properties \nfollow straightforwardly from the corresponding conditions on CBI-models and the extension of - and . \nto sets of elements. (.) The conditions required for (R, ., e, -, 8) to bea CBI\u00admodel follow from taking \nX, Y, Z to be singleton sets in the given conditions and noting that -{x} = -x and {x}.{y} = x . y for \nany x, y . R. The following two propositions extend analogous results in [8]. Note that .G denotes the \nBI+-formula constructed fromabunch G by De.nition 4.2. Proposition 5.2.8. G f F is derivable in LBI+ \niff .G . F is derivable in LAXBI+ . Proposition 5.2.9. G f F is valid with respect to classical BI\u00admodels \niff .G . F is valid with respect to AXBI+ -models. The speci.c properties of - and 8 givenbytheAXBI+ \naxioms are consequences of Lemma 5.2.7. Theorem 5.2.10 (Completeness of LBI+). LBI+ is complete with \nrespect to validity in CBI-models. Proof. If G f F is valid with respect to CBI-models then, by Proposition \n5.2.9 .G . F is valid with respect to AXBI+ \u00admodels and thus provable in LAXBI+ by Corollary 5.2.6. By \nProposition 5.2.8, G f F is then provable in LBI+ as required. 5.3 Admissibility embeddings between DLCBI \nand LBI+ De.nition 5.3.1 (Embedding of DLCBI in LBI+). We de.ne a function '-' from DLCBI-formulas to \nBI+-formulasby recursion on the structure of DLCBI-formulas, as follows: 'F ' = F where F .{P, T, ., \nT * }'F1 ? F2' = 'F1' ? 'F2' where ? . {., ., ., *, *}'\u00acF ' = \u00ac'F ' '. = \u00acN *' '~F ' = \u00ac-'F ' * 'F1 \n. F2' = \u00ac-(\u00ac-'F1' * \u00ac-'F2') where P in the .rst clause ranges over V. We extend '-' to a function from \nDLCBI consecutions to BI+ sequents by: 'X f Y ' = '.X ' f '.Y ' where .- and .- are the functionsgivenin \nDe.nition 4.2.We call the function '-' the embedding of DLCBI in LBI+ . Lemma 5.3.2. AconsecutionX f \nY is valid iff 'X f Y ' is valid. Proof. (Sketch) We .rst show by structural induction on CBI\u00adformulas \nF that r |= F iff r |= 'F '. The main interesting case * is F = F1 . F2, in which case we need to use \nLemma 5.1.1 in order to establish the required equivalence. This result can then be straightforwardly \nlifted to consecutions X f Y . We write F -f G to mean that both F f G and G f F are derivable (in DLCBI \nor LBI+), and call F -f G a derivable equivalence (of DLCBI and LBI+ respectively). Lemma 5.3.3. The \nfollowing are derivable equivalences of LBI+: 1. \u00ac-\u00ac-F -f F 2. \u00ac-(F * \u00ac-G) -f F * G 3. F * G -f \u00ac-G \n* \u00ac-F 4. F -f \u00ac-(\u00ac-F * \u00ac-\u00acN )  The following lemma says that we can rewrite formulas in BI+ sequents \naccordingto derivable equivalences without affecting LBI+-derivability. Lemma 5.3.4. Write F (G) for \na formula F of which G is a dis\u00adtinguished subformula occurrence, and when F (G) is understood write \nF (G ' ) for the formula obtained by replacing G by G ' in F . (Thisis analogoustothe notationforbunches.) \nNow suppose that A -f B is a derivable equivalence of LBI+ (where A, B are BI+-formulas).Thenthe followingtwoproof \nrules are derivable in LBI+: G(F (A)) f C (-fL) G f F (A) (-fR) G(F (B)) f C G f F (B) Proof. By considering \nthe following two instances of (Cut): F (B) f F (A) G(F (A)) f C (Cut) G(F (B)) f C G f F (A) F (A) f \nF (B) (Cut) G f F (B) Proof of Theorem 4.10. If X f Y is provable in DLCBI then 'X f Y ' is provable \nin LBI+ by Proposition 5.3.5, and thus is valid by the soundness of LBI+ (Proposition 5.1.3), whence \nX f Y is valid by Lemma 5.3.2. De.nition 5.3.6 (Embedding of LBI+ in DLCBI). We de.ne a function A- from \nBI+ sequents to DLCBI consecutions by: AG f F  is the consecution obtained by replacing every occurrence \nof the formula N in G f F by the formula \u00ac. * . We remark thatA- can be de.ned recursively over BI+ formu\u00adlas \nand extended to LBI+ sequents in a manner similar to that in De.nition 5.3.1. Lemma 5.3.7. The following \nare all derivable equivalences of DLCBI: 1. \u00ac\u00acF -f F 2. \u00acF -f F .. 3. ~F -f F *. * 4. \u00ac~F -f ~\u00acF \n it suf.ces to prove that F (A) f F (B) is derivable in LBI+ , 5. F1 whence it follows by symmetry that \nF (B) f F (A) is also deriv\u00ad * .-f~ ~*~ F ( FF )212 Proposition 5.3.8. The proof rules of LBI+ are admissible \nin able. If F (A)= A then this is immediate by assumption. Other\u00ad wise A is a (distinguished) strict \nsubformula occurrence in F and we proceed by an easy structural induction on F . DLCBI under the embedding \nA- . That is, for any instance of an LBI+ rule, say: Proposition 5.3.5. The proof rules of DLCBI are \nadmissible in LBI+ under the embedding '-'. That is, for any instance of a DLCBI rule, say: {Xi f Yi \n| 1 = i = j} j .{0, 1, 2}X f Y if 'Xi f Yi ' is derivable for all 1 = i = j then so is 'X f Y '. Proof. \n(Sketch) We distinguish a case for each proof rule of DLCBI. Most of the cases are straightforward. The \nmain inter\u00ad esting cases are the logical rules( {Gi f Fi | 1 = i = j} j .{0, 1, 2}G f F if AGi f Fi \nis derivable for all 1 = i = j then so is AG f F . Proof. (Sketch)We distinguisha caseforeachproofruleof \nLBI+ . The main interesting cases are the rules that operate insidebunches. We observe thatAG isa structure \nforanybunch G and that, in par\u00ad (A ticular, A. is always an antecedent part of AG. ). By the display \ntheorem (Theorem 4.4) we can display the sub-bunch on which the rule operates as the entire antecedent \nof a display-equivalent con\u00adsecution.We can then apply the corresponding rule of DLCBI to this antecedent \nand then simply invert the display postulate steps used to display the antecedent to restore the original \ncontext.For example, in the case of(.L) we proceed as follows, writing (D=) to denote the use of a display \nequivalence: G. ; A ) f A A (AF2F (D=) . f X A ; AF2 (ACL) F2. f X A ; A (D=) .. A f AF1 AF2 f rA ; X \n(.L) F1 . AF2 f rA. ; rA. ; X A (D=) .. f r(AF1F2 ); X A ; A . A (CtrL) A. f r(AF1 . AF2 ); X (D=) . \n; AF1 . AF2 f X A (D=) G. ; AF1F2 ) f A A (A . AF where X is a placeholder for the structure that results \nas the conse\u00ad quent from displaying Y in the consecution AG (Y ) f A F . *L)and( . *L), the structural \nrule (MIR) and the display postulates for the multiplicativefamily. These can be derived in LBI+ under \nthe embedding '-' with the aid of the rewrite rules given by Lemma 5.3.4 in conjunction with the derivable \nequivalences of Lemma 5.3.3. E.g., in the case of ( *L) we proceed as follows, using the rule symbol(=)to \ndenote rewriting a sequent according to the de.nitions of .-, .- and/or '-' (cf. De.nitions 4.2 and 5.3.1).: \n. . . . . . 'X f F ' '.X ' f '.F ' (=) 'G f Y ' '.G ' f '.Y ' (=) '.X ' f 'F ' (=) 'G' f '.Y ' (=)  \n* ( *L) 'F ' * 'G', '.X ' f '.Y ' ( *R) 'F ' * 'G' f '.X ' * '.Y ' (-fR) 'F ' * 'G' f \u00ac-('.X ' * \u00ac-'.Y \n') (-fR) 'F ' * 'G' f \u00ac-(\u00ac-\u00ac-'.X ' * \u00ac-'.Y ') (=) . .Y ' 'F ' * 'G' f '~.X (=) '.F *G ' f '.bX,Y ' (=) \n'F * G f bX, Y ' We can now prove the soundness ofDLCBI as follows. Lemma 5.3.9. If A'X f Y ' is DLCBI-provable \nthenso is X f Y . Proof. (Sketch) The proof proceeds in three stages. First, we show by induction on \nCBI-formulas F that F -f 'F ' is DLCBI - A provable, making use of the derivable equivalences given \nby Lemma 5.3.7 in the non-trivial cases. Second, we show by in\u00adduction on DLCBI-structures X that X f \n.X and .X f X are DLCBI-provable.Finally,wecan constructaproofof X f Y using the given proof of A'X f \nY ' = '.X ' f A'.Y ' using the .rst A two stages together with (Cut): (Stage1) (Stage2) \u00b7\u00b7 \u00b7\u00b7 (assumption) \n\u00b7\u00b7 \u00b7 '.Y ' f .Y .Y f Y A \u00b7 \u00b7 (Cut) A'.X ' f A'.Y ' A'.Y ' f Y (Cut) '.X ' f Y A \u00b7 \u00b7 \u00b7 (contd. below) \n(Stage2) (Stage1) \u00b7\u00b7 \u00b7\u00b7 \u00b7\u00b7 (contd. above) X f .X .X f A'.X ' \u00b7 \u00b7 (Cut) \u00b7 X f A'.X ' A'.X ' f Y (Cut) \nX f Y which completes the proof. We can now prove completeness forDLCBI as follows. Proof of Theorem \n4.11. If X f Y is valid then so is 'X f Y ' by Lemma 5.3.2, which is then LBI+-provablebyTheorem 5.2.10.By \nProposition 5.3.8, A'X f Y ' is then provable in DLCBI, whence X f Y is also DLCBI-provableby Lemma 5.3.9. \n6. Related and future work We consider related work, and directions for future work, from several perspectives. \nClassical versions of BI: CBI as presented here is essentially a new logic, obtained as a nonconservative \nextension of BBI. However, a version of classical BI was previously proposed by Pym,whogavetwo-sided \nsequent calculusproof rulesforthelogic and discussed some of the obstacles to its further development \n principally,the formulationofa suitable forcingsemanticsand cut\u00adeliminating proof systems [26]. Pym \nalso made the observation that a relevantist approach to multiplicative negation, which essentially is \nalso our approach, is compatible with the other multiplicative connectives.However,the multiplicativefalsity \n. * is absent in this treatment. Our models, with their crucial inclusion of the element 8 and its relationship \nto the involution - , provide precisely the structure necessaryto interpretallthe connectives(asevidencedby \nour soundness and completeness results). Display calculi: Our display calculus DLCBI is an instance of \nBelnap s general display logic [1] and is in the same vein as dis\u00adplay calculi by Gor\u00b4e for other substructural \nlogics and relational algebras [19, 20]. In particular,cut-elimination for DLCBI isa con\u00adsequence of \nBelnap s general cut-elimination theorem for display logic. Our main technical contribution is the soundness \nand com\u00adpleteness of DLCBI with respect to validity in our CBI-models. Moreover, the proofs of these \ntheorems, which rely upon admissi\u00adbility embeddings, make an explicit connection between proof in DLCBI \nand the intuitionistic style of proof in LBI+, which is just the usual BI sequent calculus extended by \nthree axioms. It should be noted, however, that even though cut-elimination in DLCBI en\u00adtails a subformula \nproperty, proof search in this setting is neverthe\u00adless made daunting by the presence of the display \npostulates and structural rules, which can obviously lead to divergence if applied blindly. It thus remains \nof clear interest to formulate well-behaved sequent calculus or natural deduction proof systems for CBI, \nor to re.ne our display calculus further so as to eliminate structural inferences. Classical linear \nlogic: Readers may wonder about the relation\u00adship between CBI and classical linear logic(CLL),which also \nfea\u00adtures a full set of propositional multiplicative connectives, and is a nonconservativeextensionof \nintuitionistic linear logic(ILL)[30]. The differences between the twoare quite striking when comparing \nour moneymodel of CBI (Example 3.1) with Girard s correspond\u00ading Marlboro/Camelexample [18].Inparticular, \nformulasin our model, including those involving multiplicative negation, are read as declarative statements \nabout resources(i.e. money), whereas lin\u00adear logic formulas in Girard s model are typically read as procedu\u00adral \nstatements about actions. Compared to CLL, CBI has the ad\u00advantage of a simple, declarative notion of \ntruth relative to resource, but this advantage appears to come at the expense ofCLL s con\u00adstructive interpretation \nof proofs. Of course, the typical reading of BI departs from that of ILL ina similar way, and indeed \nit seems that the main differences between CBI and CLL are inherited from the differences between BI \nand ILL (see [24]for discussions of the latter). These differences are not merely conceptual, but are \nalso manifested at the technical level of logical consequence. For example, P -. Q f P . Q is a theorem \nof linear logic for any propositions P and Q, via the encoding of additive implication P . Q as !P -. \nQ, but P * Q f P . Q is not a theorem of (any version of) BI. Similarly, distributivity of additive conjunction \nover additive disjunction holds in all versions of BI, but fails in linear logics. Finally,of course, \nthere is only one negation in CLL,whereas there are two in CBI. Interestingly, however, there is an intersection \nbetween our CBI-models and the CLL-models obtained from the phase seman\u00adtics of classical linear logic \n[18].A CBI-model (R, ., e, -, 8) in which the monoid operation . isa total function, rather thana rela\u00adtion, \nis a special instance of a phase space, used to provide a phase model of CLL. This can be seen by taking \nthe linear logic perp . to be the set R \\ {8}, whence the linear negation X. on sets X . R becomes -X.In \nthe linear logic terminology,every subset X of R is then a fact in the sense that (X.). = --X = X. It \nseems somewhat curious that there is a subclass of models where CBI and CLL agree, since known interesting \nphase models of linear logic are relatively few whereas there appear to be manyin\u00adteresting CBI-models \n(cf. Section 3). However, one can argue that this subclass is faithful to the spirit of neither logic. \nOn the one hand, the restriction to a total monoid operation in CBI-models rules out many natural examples \nwhere resource combination is partial. On the other hand, it seems certain that the induced sub\u00adclass \nof CLL phase models will be at odds with the coherence semantics of CLL proofs. Application to program \nanalysis: The main application of BBI so far has been the use of separation logic in program analysis. \nThere are now several program analysis tools [9, 10, 13, 21, 23] which use logical and semantic properties \nof the heap model of BBI at their core. These tools often de.ne a suitable fragment of separation logic \nwith convenient algebraic properties, and use it in custom lightweight theorem provers and abstract domains.We \nsuggest that our work on CBI could be taken up in two main direc\u00adtions. The .rst direction is theorem \nproving. Our display calculus DLCBI might form a basis for the design of new theorem provers, which could \neasily employthe powerful (andhistorically dif.cult to use) implication * since, in CBI, it can be reexpressed \nusing more primitive connectives. Moreover, the notion of negative re\u00adsource might be employed in extended \ntheorem proving questions, such as the frame inference problem F f G*X where the frame X is computed \nessentially by subtracting G from F .Asimilar prob\u00adlem is the bi-abduction question, which forms the \nbasis of the com\u00adpositional shape analysis in [7] and has the form F * X f G * Y , interpreted as an \nobligation to .nd formulae to instantiate X and Y such that the implication holds. This question arises \nat program procedure call sites, where F is the procedure sprecondition, G is the current precondition \nat the call point, X is the resource missing, and Y is the leftover resource. We speculate that such \ninferences could be explained in terms of an ordinary proof theory, providing that multiplicative negation \nis supported, as in CBI. The second direction is the investigation of richer fragments and properties. \nThe richer algebraic properties of CBI models might suggestnew separationlogic fragments,ornewwaysof \nmanipulat\u00adingtheexisting fragments.Forexample,in ordertoexpressinvari\u00adants of traversal algorithms one \nneeds to generalize a data structure predicate, such as list(x) fora 0-terminated linked list, to lseg(x, \ny) for list segments from x to y. The latter can be obtained from list(x) bysubtractinglist(y). It is \nconceivable that the notion of subtraction could be employed to convert automatically predicates describing \nwhole data structures into predicates which describe partial data structures. Finally, new fragments \ncould be obtained by studying appropriate generalizations of conjunctive and disjunctive normal forms \nto include both additive and multiplicative connectives. CBI is presently very new, and our suggestions \nregarding its applications are necessarily somewhat speculative. However, the dualising resource semantics \nof CBI developed in this paper has already given rise to several example models which, though rela\u00adtively \nsimple in their present form, are suggestive of the applica\u00adbility of CBI to more complex domains.Forexample, \nthe money model presented in Section 3 extends easily to a CBI-model of portfolios of assets, which might \npotentially form the basis of a Hoarelogicfor .nancial transactionsinthe samewaythattheheap model of \nBBI underpins separation logic. Furthermore, our proof\u00adtheoretic results provide some hope that proof \nsearch in the logic canbetamed,thusopeningthewayfor theoremprovingtoolsbased upon CBI.We hope that this \npaper represents a .rst step in these directions. Acknowledgements We extend special thanks to Peter \nO Hearn and David Pym for manyinteresting and enlightening discussions which informed the present paper.We \nalso thank Byron Cook, Ross Duncan, Philippa Gardner, Alex Simpson, and the members of the East London \nMassive for useful discussions and feedback. References [1] Nuel D. Belnap, Jr. Display logic. Journal \nof Philosophical Logic, 11:375 417, 1982. [2] Josh Berdine and Peter O Hearn. Strong update, disposal \nand encapsulation inbunched typing. In Proceedings of MFPS, ENTCS. Elsevier, 2006. [3]Patrick Blackburn, \nMaartendeRijke,andYdeVenema. Modal Logic. Cambridge University Press, 2001. [4] R. Bornat, C. Calcagno,P. \nO Hearn, and M.Parkinson. Permission accounting in separation logic. In 32nd POPL, pp59 70, 2005. [5] \nJames Brotherston and Cristiano Calcagno. Algebraic models and complete proof calculi for classical BI. \nTechnical Report 2008/7, Imperial College London, 2008. Available from http: //www.doc.ic.ac.uk/~jbrother. \n[6]James Brotherstonand Cristiano Calcagno. Classicallogicofbunched implications. In the informal proceedings \nof CL&#38;C 2008, an ICALP satellite workshop; available from http://www.doc.ic.ac.uk/ ~jbrother, 2008. \n[7] Cristiano Calcagno, Dino Distefano, Peter O Hearn and Hongseok Yang. Compositional Shape Analysis \nby means of BI-Abduction. In Proceedings of POPL-36, 2009. [8] C. Calcagno,P. Gardner, and U. Zarfaty. \nContext logic as modal logic: Completeness and parametric inexpressivity. In Proceedings of POPL-34, \n2007. [9] Cristiano Calcagno, Matthew Parkinson, and Viktor Vafeiadis. Modular safety checking for .ne-grained \nconcurrency. In SAS, 2007. [10] Bor-Yuh Evan Chang and Xavier Rival. Relational inductive shape analysis. \nIn Proceedings of POPL-35, 2008. [11] Wei-Ngan Chin, Cristina David, Huu Hai Nguyen, and Shengchao Qin. \nEnhancing modularOOveri.cation with separation logic. In Proceedings of POPL-35, 2008. [12] Matthew Collinson, \nDavid Pym, and Edmund Robinson. Bunched polymorphism. Mathematical Structures in Computer Science, 2009. \nTo appear. [13] D. Distefano andM.Parkinson. jStar:Towards PracticalVeri.cation for Java. In OOPSLA, \n2008. [14]Kevin Donnelly,Tyler Gibson, Neel Krishnaswami, Stephen Magill, and SungwooPark. The inverse \nmethod for the logic ofbunched implications. In Proceedings of LPAR 2004, volume 3452 of LNAI, pages \n466 480. Springer-Verlag, 2005. [15] Michael Dunn. Star and perp: Two treatments of negation. PhilosophicalPerspectives, \n7:331 357, 1993. [16] D. Galmiche, D. Mery,and D. Pym. The semantics of BI and resource tableaux. Mathematical \nStructures in Computer Science, 15:1033 1088, 2005. [17] Didier Galmiche and Dominique Larchey-Wendling. \nExpressivity properties of Boolean BI through relational models. In Proceedings of FSTTCS, 2006. [18] \nJean-Yves Girard. Linear logic: Its syntax and semantics. In J.-Y. Girard,Y. Lafont,andL.Regnier, editors, \nAdvances in Linear Logic, pages 1 42. Cambridge University Press, 1995. [19] Rajeev Gore.\u00b4Cut-free display \ncalculi for relation algebras. In Proceedings of CSL 96, volume 1258 of LNCS, pages 198 210, 1997. [20] \nRajeev Gor\u00b4e. Substructural logics on display. LogicJournal of the IGPL, 6(3):451 504, 1998. [21] H.Yang, \nO.Lee, J.Berdine, C.Calcagno, B.Cook, D.Distefano, and P.O Hearn. Scalable shape analysis for systems \ncode. InCAV, 2008. [22] Samin Ishtiaq and PeterW. O Hearn. BI as an assertion language for mutable data \nstructures. In Proceedings of POPL 01, January 2001. [23] H.H. Nguyen andW.-N. Chin. Enhancing programveri.cation \nwith lemmas. In Proceedings of CAV, 2008. [24]P.W. O Hearn andD.J. Pym. The logicofbunched implications. \nBulletin of Symbolic Logic, 5(2):215 244, June 1999. [25] MatthewParkinsonandGavin Bierman. Separation \nlogic, abstraction and inheritance. In Proceedings of POPL-35, 2008. [26] David Pym. The Semantics and \nProof Theory of the Logic of Bunched Implications. Applied Logic Series. Kluwer, 2002. Errata and remarks \n(Pym 2004) maintained at http://www.cs.bath.ac.uk/ ~pym/reductive-logic-errata.html. [27] David Pym, \nPeter O Hearn, and HongseokYang. Possibleworlds and resources: The semantics of BI. Theoretical Computer \nScience, 315(1):257 305, 2004. [28] S. Read. Relevant Logic: A Philosophical Examination. Basil Blackwell, \n1987. [29] JohnC.Reynolds. Separationlogic:Alogicfor shared mutabledata structures. In Proceedings of \n17th LICS, 2002. [30] Harold Schellinx. Some syntactical observations on linear logic. Journal of Logic \nand Computation, 1(4):537 559, 1991. \n\t\t\t", "proc_id": "1480881", "abstract": "<p>We show how to extend O'Hearn and Pym's logic of bunched implications, BI, to classical BI (CBI), in which both the additive and the multiplicative connectives behave classically. Specifically, CBI is a non-conservative extension of (propositional) Boolean BI that includes multiplicative versions of falsity, negation and disjunction. We give an algebraic semantics for CBI that leads us naturally to consider resource models of CBI in which every resource has a unique dual. We then give a cut-eliminating proof system for CBI, based on Belnap's display logic, and demonstrate soundness and completeness of this proof system with respect to our semantics.</p>", "authors": [{"name": "James Brotherston", "author_profile_id": "81100189429", "affiliation": "Imperial College London, London, United Kingdom", "person_id": "P1301008", "email_address": "", "orcid_id": ""}, {"name": "Cristiano Calcagno", "author_profile_id": "81100047402", "affiliation": "Imperial College London, London, United Kingdom", "person_id": "P1301009", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1480881.1480923", "year": "2009", "article_id": "1480923", "conference": "POPL", "title": "Classical BI: a logic for reasoning about dualising resources", "url": "http://dl.acm.org/citation.cfm?id=1480923"}