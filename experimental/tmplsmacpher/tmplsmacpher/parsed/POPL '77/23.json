{"article_publication_date": "01-01-1977", "fulltext": "\n Permission to make digital or hard copies of part or all of this work or personal or classroom use is \ngranted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, \nto post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.&#38;#169; \n1977 ACM 0-12345-678-9 $5.00 The Equivalence Problem for Program Schemata with Nonintersecting Loops \nHarry R. Lewist Center for Research in Computing Technology Harvard University Abstract. In his thesis \nPaterson proved that brackets, commas, etc. Each function sign f takes equivalence is decidable for program \nschemats such a fixed, positive number 6(f) of arguments; the that every instruction falls on at most \none loop absence of constants (6(f)=O) is not serious. In\u00ad and only monadic function signs appear. Here \nwe structions are of two kinds: computation instruc\u00ad remove the restriction on function signs. The tions \na. L+f(Lk ,.,., L ) and test instruc\u00ad problem reduces to that of showing that the numer\u00ad j 1 &#38;(f) \nical exponents which satisfy certain word equa\u00ad tions a. T(Lj) b,c; here a is the address of the tions \n over a semigroup of acyclic directed graphs IMY be characterized by sentences of Presburger instruction. \nA program schema is a finite sequence arithmetic; these exponents correspond to loop of instructions \nsuch that the prefix of each is its coefficients of the program schemata. The central position in the \nsequence, together with two numbers construction is a finite automaton whose memory is which are not \nprefixes, called the success address a window of bounded graph corresponding equation . size to a on \nen solution acyclic to directed such a word o and reader as well the can aa failure address el. supply \nthe remaining the definitions of We trust that the syntactic details fnterpretation,execu\u00ad \u00ad 1. Introduction \n- sequence, value (which is O if e. is reached, In his thesis [2, ch.6] Paterson proved that 1 if el \nis reached). Then two schemata P, Q are equivalence is decidable for program schemata equivalent (s) \niff under each interpretation P and (flowchart schemata) such that every instruction Q either both diverge \nor both compute the same lies on at most one loop and such that only mon\u00ad value. adic function signs \nappear. We here extend that Am through a schema is a finite or infinite result by removing the restriction \non function sequence of integers nl, . . . . each of which is signs. Our technique, like Paterson s, \nis to re\u00ad either a prefix, eo, or el, such that for each i, duce the reduction problem is more to Presburger \ncomplex than arithmetic, his. For but Paterson our if ni ia not the last number in the path then the \ncrucial step is to present the value of each (1) if the instruction with prefix ni is a location ber \nof as times a linear each loop word is function executed, of i.e. the as num\u00ada computation instruction \nthen n ~+l=mi+l; string-valued function with numerical arguments, (2) if the instruction with prefix \nni is a and is to show expressible that equality of as a Presburger two such formula functions on their \nteat instruction ni: T(L)a,b, then TTi+l is arguments. Our generalization replaces word a or b; and functions \nby functions whose values are acyclic (3) fli is not e. or el. directed again, graphs equality representing \nof two such computations. functions is Once repre- Ati is a finite path rtl,.. .,flk, such that all sentable \nin Presburger arithmetic, but the need to the n i are distinct,n l  nk l is alao a path, accommodate \nutational different steps makes orderings the proof of of the this same fact comp\u00ad and n ~, the base \npoint of the loop, is the smallest quite indirect; we use, among other things, the number among n ,.. \n1 .,n . k Our restriction may now fact that the words accepted in Presburger set of letter-frequencies \nby a finite automaton arithmetic. is of the definable be that one put formally: the prefix loop. S of \nis the every class instruction of schemata is in such at most 2. Program Schemata. Paterson schemata \nis notes concerned that it insofar suffices as equivalence to consider of So as to be able to build directly \non Patersonk schemata with just one test symbol T, since any work we stay very close to his definitions. \nOur other test symbol T? can be avoided in favor of a formal language contains numerals a,b,c, function \nnew location L: and a new monadic function sign sisnu f,g,h, etc. , test symbols T, etc., location f \n by replacing symbols L1,L2,. . . , the assignment symbol +, and T (L) b, C, by T Research supported \nby NSF grant McS76-09375. 253 L + f (1) T(L ) b> C (note that this transformation does not remove a \nschema from the class under consideration). We too find this reduction convenient, and assume here\u00adafter \nthat it haa been carried out. A purely syntactic characterization of equiva\u00adlence is obtained aa follows: \nA free interpreta\u00adtion is one whose universe is the set of terms con\u00adstructible from the function signs \nand location symbols, with functional application interpreted symbolically. Two schemata are equivalent \niff they are equivalent with respect to all free interpreta\u00adtions. Now given a path for a schema -l nZ \n (~(~)) P such that ml-l, let LP(?I) be the set of terms t teated by P during execution of n for which \nT(t) succeeds (faila), i.e. such that the next instruction executed after T(t) a,b has prefix a (b). \nLet TI,U be two such paths for schemata P,Q, respectively, and call n end u consistent iff Lp(n) U L \n(u) is disjoint from ~(fl) URQ(U) , i.e. ~Q and u are the results of interpretations which do not disagree \non any term which is tested. Paterson a Theorem 2.1. For any two schemata P,Q, PsQ iff, for all paths \nTI for P , a for Q such that n =a =1, if n and a are consistent 11 then the values of n and a are either \nboth un\u00addefined or are equal. 3. Dags and Blocks This section deals with the repreaentation of computations \nby labelled acyclic directed graphs. Let ~ be a set consisting of the function signs of our program schemata \nplus the special sign 0 , and let 6:0 + N map each function sign to its degreca, with 6(0)=0 (recall \nthat 6(f)Z0 if f+u ) . A &#38; is a triple D= <VD,ED,kDz, where VD is a nonempty finite set of vertices, \n~ is a D mapping VD + ~, and for each vfV and each i ,D 1 5.E 6(~u(v)), ED(v,i) ~ V; mor~over <VD,EDZ, \nviewed as a directed graph with (possibly multiple) edges directed from ED(v,i) to v, is required to \nbe acyclic. We borrow certain standard terms from graph theory. A dag is trivial if it has only one vertex. \nA source is a vertex into which no edge enters, a sink is a vertex from which no edge departs (thus the \nsources of a dag are ex\u00adactly the vertices labelled 0 ). A~ from vertex v to vertex w ia a sequence of \nedges (possibly trivial, i.e. of length O) leading from ,v to w . If there is apath from v to w then \nw ia reachable from v. A semipath is like a path except that the direction of edges need not be observed, \nand a dag is weakly connected if there is a semipath between any pair of vertices; any dag can be decomposed \nuniquely into weakly connected components. We assume some natural measure of the size of a dag -the number \nof vertices plus the number of edges, for example. Alao, let the length of a dag be the length of the \nlongest path, and let the width be the the maximum number of pairwise incomparable vertices or edges,so \nthat the size ia bounded by the product of length and width. Let Abe adag and let TcVA be aset of vertices \nsuch that for each V(T, if EA(v,i)fT for some i, =~%~A(v)) , then EA(v,i)CT for each i , EE6(XA(V)). \nThen the subdag of A induced by T is the dag B such that VB=T kB(v)=kA(v) if EA(v,i)6T for some i = n \notherwise EB(v,i)=EA(v,i) for EE6(AB(v)). A subdag of A is a subdag induced by some set of vertices. \nNow fix once and for all an integer -O and let Nn={l, . . ..n}. An n-block, or just block for short, \nis a triple AYA*,IA,OA~, where A*%VA,EA, AA> is a dag, and 1A and OA are maps from N to n vA, with I \nA being 1-1 and such that the range of is exactly the set of sources of A* (i.e. 1A 1 the vertices labelled \nn). The members of IAINnj are called the inputs of A , the members of OAINn] the outputs; thus paths \nare directed from the inputs to the outputs. (Our model would be unduly restricted if we required every \noutput to be a sink, but there would be no harm in requiring every sink to be an output.) The set of \nall n-blocks forms a semigroup under a concatenation operation defined by identi\u00adfying each output of \none block with the correspon\u00adding input of the next. That is, AB =C where VC=VAUVB -IBIN ] n EC(v,i)=EA(v,i) \nif VEVA =EB(v,i) if V6VB and EB(v,i) ~ IBINn] =OA(j) if vfVB and EB(v,i)= I ~(j ) Ac (v) = LA(v) if V6VA \n= k(v) if VEVB-IBINn] B IC=I A OC(i)=OB(i) if OB(i){IBINn] =OA(j) if OB(i) = 13(j) 1. If f is a function \nand S is a set then {f[s]= f(x) lx{s}o If VA and V were not disjoint the defini\u00ad number of occurrences \nof symbol a in word w n and given a fixed finite alphabet Z={a ,...,a } tions shove could result in a \nstructure whit% is let ~(w)<#(w,al), . . ..#(w.an)> . The~ a setnis not acyclic. We therefore asaume \nthat at least one of the blocks is copied in some canonical way semilinear iff it is *[L] for some context-free \nbefore the definitions are applied. Thus for any language L. blocks Al,..., ~ , there are uniquely determined \nIf A is a block and mZO let Am be the m-fold product of A with itself; this is defined blocks A; ,..., \n~ such that Al... ~ = A; ,..$ and even for m=O since the semigroup has an identity. the vertex sets of \nthe A i are pairwiee disjoint. Paralleling group of Paterson s strings over definitions a finite for \nalphabet, the semi\u00adwe say Also, note that the fact that lB is 1-1 makea the that a block function is \na mapping from tuples of definitions of c and O c unambiguous. With these natural numbers to blocks, \nsay that a block function observations it should be clear that the n-blocks H is linear if it has the \nform H(~]=A~J . ..A~ do indeed form a semigroup with identity; it is a for some fixed blocks A1,.. .,A \n, and say that natural generalization of the string-concatenation semigroup. it ia Presbur er (Paterson \ns P-representable) if Now for any dag D and any set of vertices H(~)&#38;~i for i=l,.. .,n, for some \nlinear SCVD , let Df S be the dag that results from D block function o and some Presburger function \nf. by retaining just those vertices and edges that lie Now let P be a program schema in S with n on paths \nwhich term natei at members of S . A locations. There are only finitely many loop-free semiblock is a \npair A=d*JA> , where A*<VA, paths ~l,...,~t starting with instruction 1 , EA,AA> is a dag with just one \nsink and 1A is a and there are only finitely many loops !.l,. ..,L ; P 1-1 mapping whose domain is a \nsubset of N\u00adu and each ~ ~ is a sequence of distinct numbers and the whose range includes every source \nof A*. We are numbers in all the ti are distinct. Then any finite chiefly expressed interes as ed IB \nx in , the where semiblocks B is a which block may be and xcNn, path specified n which by a begins number \nwith u, instruction &#38;J~t , and 1 a can p-tuple be by which we mean <B*~{OB(X)}, IB> . <h 1  h ~ \np of loop-coefficients; n is the path Let A and B . be semiblocks with sinks a,b obtained from the loop-free \npath fiu by inserting, respectively. We define an equivalence relation ~ as follows: AaB iff for each \nloop g. i whose basepoint bi is in mu, (1) AA(a)=XB(b); exactly i copies of ti at the (unique) occurr\u00ad \n(2) 1~1 (a)=I-~(b) if lA(a)=kB(b)=o; ence of b ~ in nu. Moreover this method may be and (recursively) \nused to specify an infinite path n as well, since for schemata in S any such path must ultimately (3) \nfor i=l,... , 6(AA(a))=6(AB(b)), remain in a single loop t . If u, ~ represent cA* T EA(a,i), 1A s~B*tEB(b,i),IBz. \nthe finite path up to the point at which w enters L ,then the pair t+u,~ will serve as a represen- Any \ntwo semiblocks which are equivalent in this way tation of ~ ; thus every path, finite or infin\u00ad represent \nthe same term. ite, is represented by at least one pair u,~ , 4. The Reduction to Presburger Arithmetic \nwhere lfi~~t and &#38;fNp. Moreover every such pair represents exactly one path, although some paths \nof Presburger the natural arithmetic numbers, a ia the decidable additive theory. theory A ISSY have \ncoefficient several is representations given for a loop (in whose case a nonzero basepoint is Presburger \nformula is a formula of this theory, and not on the indicated loopfree path). a presburger numbers, for \n% some iS a fixed set of m , m-tuples which iS of natural {~lq(~) is Now ding to let the Tp(n) contents \nbe the n-tuple of the n of terms locations correspon\u00adof schema true}for some Presburger formula V. Clearly \nthe P after execution of the finite path n under a Presburger sets are closed under union, intersec\u00ad \nfree interpretation. Then -rP(n) may be represen\u00ad tion, and direct product. A Presburger function ia \na function f from Nm to @ for some n,m ted by an n-block ~p(TT); one way is simply to start such that \n{c~,~zlf(~)=~} is Alternatively, Presburger a Presburger sets may be set. defined with a representation \nof ~(n~ as an n-tuple of to be the semilinear acts of Parikh [1]: A subset labelled trees , and to pull \ntogether into a single vertex I(i) all the vertices labelled Li, for of mN is linear if it is {a+bl+. \n ..+bl,l,~CB}~CB} i=l ,...,n. Of course this would be true for any for some fixed afl and some fixed \nfinite set BcNm; program schema, but for schemata in S we can do and a subset of Nm is scmilinear if \nit 1s a finite more. For 15u52t, ~~p let @ion of linear sets. We shall also find useful P*(u,&#38;) =pp(ll) \n, if u,~ represents pathn Parikh s semilinear language-theoretic or Presburger characterization sets. \nLet #(w,a) of the be the = the an identity, infinite if path. u,~ represents 1. Throughout this paper \nwe use A* to denote Lemma 4.1 For any schema P , P* is a Presburger the dag underlying some more complex \nstructure block function. A. continued; Proof. If each function P: (lJ=P*(u,tJ for l=uszt is Presburger \nthen so is P* , since if P~(~)= p+ P~(fu(~)) , where each ~ is linear and each f u is Preaburger, then \nP*(u,~) is P+(f(u,~)), where p+ (lJl , . . ..~2t)=P~(~) . . . ..P~t(~2t) and and f(u,lJ=<~l,. ..,~tz \niff (~~ and ~0 for v#u) NOW if t+15u52t then P is a constant func\u00adu tion which is obviously Presburger. \nIf lSu5t then ~u may be decomposed into segments O1 Os where for l~i<a i is a loopfree path ending \nat the basepoint of some loop k. 1~ . Then P:(h)= P~(fu(@), where p~(q1,r1,q2,r2J . ..$rs_lsqs)= Pp(ul) \n1 !3P(ij .. )=1 (3P(az) %.. and fu(~)=<ql,rl, . . ..rs_l.qs iff (ql=q2=o. .q5 =1 and for i=l >.. .>s-1). \ni=hj i Now the combinatorial heart of the proof is a correlate to Patherson s Theorem 6.1. Main Lemma. \nFor any linear block functions H,K and any X,yCNn , there is a Presburger formula +=* such that @(h$k) \nis true iff H(~)tx = H,K,x,y K (~) fy . Most of this paper is taken up with the proof of this fact. \nThe rest of this section shows how it and Paterson s Theorem 2.1 can be used to obtain a decision procedure \nfor equivalence. This is essentially identical to Paterson s construction, but we repeat it here for \ncompleteness. We first require Presburger formulas for var\u00adious conditions on paths through schema P \n. Here ~,~ are (q+l)-tuples, the first component to be thought of as a number u , k5@2t , rep\u00adresenting \na loopfree path, and the last q compon\u00adents being loop coefficients. (i) fin~(lJ is the condition that \n~ repre\u00adsents a nath in P from the initial ~ddress to address eo; (ii) fin~(iJ is the corresponding \ncondition for e.;~.  (iii) i.nfp(~) is the condition that ~ rep\u00ad resents an infinite path from the initial \nadd 6ess; (iv) sub (k,h) ia the condition that the path repre~e~ted by ~ is an initial segment of that \nrepresen~ed by ~; (v) T~(lc,~,i) is the condition that aubp(lc,~)  and that path ~ is finite and ends \nat a test instruction at which location Li is tested, and that the result of the test must be O in order \nfor path ~ to be (vi) T~(Ic,h,i) is the corresponding condition wzth 1 for the value of the test. Conditions \nfin~, fin;, and infp may be e= pressed as finite disjunctions for the value of hl (=U). Condition subp(k,h) \ninvolves finitely .\u00ad many possibilities for the values of end h 1 1 together with some equalities and \n(possibly) one PP inequality on loop coefficients. and are o 1 P conjunctions of eub with a finite disjunction \nof conditions on k, and h.. J. L Now let P and Q be two schemata; we assume they both have n locations \n(otherwise imagine unused locations added to one schema to equalize the numbers) and that the formulas \n(i)-(vi) are available for both, as well as Presburger block functione P*(tJ=P+(fp(IJ), Q*(~)=Q+(fQ(l@) \nas guaranteed by Lemma 4.1, where P+ , Q+ are linear and f p, fQ are Presburger. We first construct a \nPresburger formula cliff p Q(~,i,lc,j) whihh is true iff the value in s location after P executes path \n~ is diff\u00ad i erent from that in L after Q executes path ~. j We have: (h,i,lc,j) iff~~ iffP,Q P+. Q+.i.l(fp(h) \nfQ(k)) We also need analogoua formiia; d~ffp p and cliff , Q,Q Next we need a formula expressing the \nfact that the path fi corresponding to ~ for P is consis\u00adtent with the path o corresponding to ~ for \nQ. Recall the definitions of the sets Lp(fl) and ~(~) andofconsistent paths. Then conaisp,Q(~,~) iff \n(V~,~l,lcO,lcl,i,j) [(T{(~>&#38;l,S)&#38;T@l,~,j)=diffp,p(~,i,~l>. )) (i.e. Lp(n)(l~(~)=~) &#38;(T~(~,lc,i) \n&#38; T$(lcl~,j)=diff Q,Q(~,i,kl j)) (i.e. Ln(u)fiRa(0)=$) &#38;(T;(~,~:i) &#38;v T~(lcl,~,j)= cliff \np Q(~,i,K1,j)) > (i.e. Lp(n)nRQ(cr)=$) &#38;(T~(~l,~,i) &#38; T~(~,~,j)= cliff p Q(kl,i,~,j))l Y (i.e. \n~(fl)mQ(cf)=!). Finally, using Paterson s Theorem 2.1, we construct the formula expressing the equivalence \nof P and Q: Equiv iff (V~,~) [Co:%p Q (~,~)=((fin~(~)-fin~ (~)) 9 &#38; (fin~(~)=fin~(~)) &#38; (infp(~)=infQ(~)))l \nThe decidability of Presburger arithmetic then yields the decidability of equivalence for schemata inS. \n 5. Discussion and E reversed ; In order to motivate what follows, consider first the simpler case in \nwhich only ~onadic func\u00adtion signs appear, and suppoaa we wish to show that there is a Presburgar formula \n4 such that ~(~,~) is true iff I1(~)txsK(~)ty , where H(@=A1hl. . . kl k Aphp and K(~)=B . ..B q . To \nobtain @ it 1 ~ would suffice by Parikh s theorem to show that S = {<h,b\\@(h,k) ia true} is $[L] for \nsome con\u00adtext lang~a~e L , and for this it would suffice to show that S=~[L] where L is the language \n accepted by some finite automaton M . This we might do as follows. We equip M with a central store s \njust twice as long as the longest path in one of the Ai or Bi . In operation this store acts as a ring \nbuffer holding a segment of the chain which represents a monadic term. The input alphabet for M is {al,. \n..,ap,blbq}.bq} : one symbol for each of the blocks in the defini\u00adtions of H and K. For bookkeeping M \nalao has two pointers pA,PB to designate positions within a; two registers 15rA,rB5n, to enable A rB \nM to remember which output from the next block of H or K should furnish the input to be added to the \ncurrent string; and two counters , with CA, CB lscAsp, 15cB5q, to enable M to recognize an invalid \nordering of the input symbols. procedure M: initialization: cA+p; CB+q; comment the blocks are to be \nprocessed in reverse order ; rA+x; rB+y; comment we want ulti\u00ad mately to compare output x of A against \noutput y of B; ~ + e~ty; pA + pB + pointer to s; until no more input: read a symbol u ; if a=ai for some \ni then else C+i; if i>cA then reject A comment there is a single path n in Ai from some unique input \n1A (j) to i OA(r) ; LA try to extendfoverlay the path m onto s, putting the head end of u at position \npA; ~ this cannot be done because for some 9. , the label on the L th symbol from the head of n is different \nfrom that on the $ th symbol before posi\u00adtion pA in s , then relect; reposition pA to point to the beginning \n(tail end)of nin s ; delete from s any part now lying beyond both pA and PB ; rA+j , the number of the \ninput to N ; .else if u=bi then same business with A if s is longer than the longest path in any A or \nthen reject; i i end of repeat; ~ s is empty and rA=rB ~ accept else re\u00ad ject; end of procedure M . \nNow it should be clear that M accepts w only if *(w)=%_,~> for some ~,~ such that H(~)@(~)ty. Moreover, \nif H(~)txsK(l@ty then there is a permutation w of the word 1 hpbkl bkq which is accepted by M . We al \n ap 1  q may picture the construction of w as follows: (1) Construct the aemiblock C=H(~)txsK(l@ty \n(really just a path); (2) place the symbols of 1 p the word al .,.a alongside C in such a way P that \nthe ith symbol is placed next to that vertex of C which results from a source of the ith hh block in \nthe product H(@=A1l. ..APp ; (3) do the 1 k same for the symbols in bl . ..baq. and (4) con\u00ad catenate \nthe symbols of both kinds in the order in which they have been placed alonzside C . Now b~ck to the g~neral \ncase; in which func\u00adtion signs need not be monadic. The product of many blocks is unbounded in length \nbut bounded in width, so it would be natural to treat it like the path C in the simpler case above; we \ncould build a finite automaton with an internal store capable of holding a segment of bounded length. \nA more delicate kind of pattern-matching (essentially unification of dags) would have to take the place \nof mere overlaying. However, a serious problem with this approach ariaes because of the possibil\u00adity \nof having long independent chains within a dag. To illustrate, let Al be the 2-block cor\u00ad responding \nto (L1,L2)+(f(L~>2) .A2 that corresponding to (Ll,L2)+(L1,g(L2)) and Al that corresponding to (L1,L2)+(L1,h(L1,L2)) \n. Let H(~)=A~l A~2A3 1 2 and let K(~)=A2 Al A3 . Then {~,~SlH(Q)t2 z K(~)t2} is just {<i,j,j,~li,jEN} \n. However any attempt to procees H(i,j) and K(j,i) in parallel in the way that M above operates would \nrequire unbounded storage, since the con\u00adstruction of w as above cannot be applied to both long paths \nsimultaneously. Instead we must break such blocks aa into weakly connacted 1 components and keep track \nseparately of the dags resulting from these separate components. This iS the idea that is carried out \nformally below. 6. A reduction of the problem The firet step in the proof of the Main Lemma is to consider \nmultiples of the blocks large enough to have some regularity in the structure of their inputs and outputs. \nLet A be a block, For each iCN let UA(i)={jl there is a path in A from IA(j) to oA(i)} . (UA(i) is the \nset of inpute ~sed in the computation of output i .) For a set XcN n let UA(X)=UU (i) . Note that U \n(X)=U~(X) for icx? A any i?O. Now call a set XCNn A-fixed iff UA(X)=X . Lemma 6.1. For any block A there \nare numbers pzo, 1 1>o , effectively calculable from A , such that UAP(X) is An-fixed for every XCN n \n .. Proof. Since can take on at most 2n differ\u00ad A ent values, by the pigeonhole principle there are \nfor each XcNn numbers @x , 05$x52n.1, and x 15nv52n, such that AP Px+~x UAX(X)=UA (x) Let ~=max {~xlXcNn} \nand n=ficm{~XIXcNn} . Then the lemma is satiafied. For if ~N then n n=f,n., for some integer i?l and \n A An(u (X))=U +P(X) AP P-px 8N P =U A (UA (uAx(x) ) ) P-P P =UA x (uAx (x) ) =U:(x)=u ~(x) A We use \nLemma 6.1 to prove: Reduction Leunna. The Main Lemma holds if there is a Presburger formula f such that \nY(L m) ia true -* \u00adiff !?,L L (*) C1C21C3C4 2+.*C 21 C2r+lTx D1D~D3D~ . . . m D2~D2s+1 ty, whenever \nthe Ci and Di are blocks such that for every XCN U n c217.x)isis -fixed for i=l,. ..,r , and UD C2 \ni 2 i+l -fixed-for i-l,.., s. 2i 1 Proof. As in the Main Lemma, let H(~)=A1 . . . h 1 k . ..Bq. A ,K(k)=B1 \nLet ~ be the maximum of P q Tl!a, the ~ s , and n the .c.m. of the as the block A in the statement of \nLemma 6.1 ranges over ; then ~ and n have l  Ap BI  Bq the properties asserted in Lemma 6.1 for each \nof these blocks. We split the problem of finding the formula ~ of the Main Lelmla into (@+n)p+q cases \nOSh k~<@t~ for i=l, . . ..p.j=l,q; .,q; +h,,k,where f, j ~ w~ll be the disjunction of all these @ ~ ,~ \n Here @~, ~,(~,~) is to be true iff @(~,L@ is ,_ true and (a) hi=h~ , if h~<~ , and (b) hi>~ and hi~h~ \n(modll), if ~Sh~<~n ;  and similarly for the k and k;. i For each i of type-(a) , ~.e. such that h! \ni O~h~<@ , we treat Ai =Aix as a single block, and for each i of type (b) ,i.e. such that ~=h~~~ and \nhi=h~+kn for some k , we treat h.hi hi as (Aim)kAi , thus treating and A Ail A:i as single blocks. We \ndo the same for the Bi and We thus arrive at a problem of the form (*), i where the C correspond to \nthe as follows. i i be a list of those i such et l<i2< <ir that @5h~e~+n . Then C =A~ for j=l, ,..,r, \n2j j ++ + d c2j+l=Ai i +l Ai -1 or j=o  r dj j+l h where we have written ~ for ~ and have set by \nconvention to be the identity and itil= Ain p+l . The Di are defined similarly from the Moreover, the \nconditions on the and i Ci D are satisfied: for 15jSr and any XcNn, i for .sOme yCNn , which(X) is \nUA+ (y) c 2j+l i, J  ia U ~ (Y) for some f.?~; this set is Al -fixed Ai j j by Lemma 6.1 and hence \n-fixed. The same argu\u00ad c2j ment works for the i Now suppose we can find a Y as stated in the reduction; \nthen the corresponding @h, -*k is (h,k) iff +hlk! __ 73t,m)[Y( i,m) j=l j J . A hi=h ! &#38; 1id{il, \n. ..$ir} &#38; corresponding conditions on ~] . (Of course n E: is written out as a sum JJ 8 7. Unification \non Dags Let A and B be dags, An embedding of A in B is a mapping p : VA+VB such that (1) if V6VA and \nkA(v)#o , then xA(v)=~(ldv)) ;  and (2) for -each vOJA and for i=l,. ..,8(AA(v)), V(EA(V,i))=EB-(V(V),i) \n. In case such an embedding of A in B exists, B is called an instance of A . Now let and let C be another \ndag. A common z CVAXVB embedding w.r.t. Z of A and B in C is an embedding of both A and B in C such \nthat W(a)=V(b) for each -+,bz6Z; in this case A and B are said to be unifiable w.r.t. Z and C is called \na common instance w.r.t. Z of A and B. C is a most general common instance w.r. t. Z of A and B if every \ncommon instance w.r. t. Z of A and B is aninstance of C . Unification Theorem for Dags. If A and B are \n .. unifiable w.r.t. Z then there ia a most general common instance of A and B w.r.t. Z, There is an \neffective procedure unify (A,B,Z) which given A,B, and Z, determines whether or not A and B are unifiable \nw .r.t. Z, and if they are, returns a most general common instance c of size at most size (A)+size (B), \nand a common embedding u . We omit the proof of this theorem; it is a natural generalization of the corresponding \ntheorem for terms in a first-order language. For some rel\u00adevant details, see [3]. We adopt the following \nconvention: the value returned by unify (A,B,Z) either is a pair <D,p~ , in case A and B are unifiable \nw.r.t. Z, D is a most general common instance, and w is a common embedding; or is the word failure , \nin case A and B are not unifiable w.r.t. Z. In addition to the Unification Theorem we need two technical \nlemmas whose proofs we also omit; these lemmas should be intuitively clear to readers familiar with ordinary \nunification. Equivalence Lemma. Let A and B be semiblocks with sinks a,b respectively. Then A~B iff there \nis a most general common instance c of * A* and B w.r.t. {<a,bz} , and a common em\u00adbedding w such that \n(a) v restricted to either A r B s onto V (b) {ilIA(i)~V~ ={i/IB(i)~VB}, and  w(IA(i))=V(IB(i)) for \neach i in this set. 0 An embedding P of A in C such that V[VA]=VC is called an embedding of A onto C. \nThe next lemma states, in essence, that when two unifications are to be performed the order in which \nthey are performed is irrelevant to the final result. Commutativit~emma. Let A,B, C be dags; let - .. \n. .. ZBCVBXVC , Suppose unify (A,C,ZA)= ACVAXVC DA,PA> and unify (B,DA,Z~)=<D,VABz , where Z~={<b,WA(c)>{<b,c~fZB} \n. Then for some DB,WB, P unify (B,C,ZB)=I<DB,VB~ and unify (A,DB,Z~)=BA CD,w > , where Z~={<a,WB(c)~l<a,c7fZA} \n. BA Moreover, extend F to be the identity on V and A B P to be the identity on then PBA.PB= B A; \nWABe PA 8 8. The construction of the finite automaton _ We now begin the main construction. We first \nstate the properties we must eventually prove the machine has. Automaton Lemma. There is an effective \nprocedure . that yields, for any blocks Cl, . . ..C2r+l.Dl,. ... and any x,ycNn as specified in the \nReduc\u00ad 2s+1 tion Lemma, a finite automaton M with the following properties. For some numbers Yi(lSi~ \n2fil) and 5i(15i52s+l) , M operates on the in\u00ad put alphabet L=ZCUZD, where Xc={c 115i52~l , l~j~yi} and \nxD={d ll~i~zs+l, ij ij l~j~~i} Moreover, the ~elation (*) of the Reduction Lemma is satisfied by numbers \n~1, . . ..kr.ml,ms. ,ms if and only if there is a word w accepted by M such that (a)#(w,cij)=l (l~i~2r+l, \ni odd, l~j~yi) 15j 56 ~) (b)#(w,dij)=l (15i52s+l, i odd, (c)#(w,cij)=1i,2 (15i52r+l, i even , l~jSYi) \n(d)#(w,djj)=miJ2 (15=2s+1, i even, l~j~~i). This lemma suffices for the construction of a Y as described \nin the Reduction Lemma, since a Presburger formula for {Y(w)Iw is accepted by M} can be transformed into \nY by imposing the restrictions (a)-(d) , which are also definable by a Presburger formula. This construction \nis much like the construction of @ from y in the proof of the Reduction Lemma. Each symbol c corresponds \nto a different ij independent chain through the block Ci, and similarly for the d., and the Di . Our \nfirst ~J task is to make this precise. For any block A and any p,q~Nn , call p and q A-cousins if uA(P)mJA(q)#O \n, i.e. if OA(P) and OA(q) have a co~on ancestor-in A . We define t?(J, ~,...,c and Do,~l,. ..,~2s+2 , \neach of 2 r+2 which is a set of disjoint subsets of Nn, as follows: ? 2*2={{ X}} For i=r,r-l,. ..,O, \n?2i is the finest Partitionl of (Uc 2i+2) such that c 2i+l (a) each part is -fixed, and c2i (b) any \ntwo -cousins are in the same  c2i part. For i=r, r-1,. ..,o, t Zi+l is the finest parti\u00ad tion of u; \nsuch that any two 2i+2 C2 i+l\u00ad cousins are in the same part. The acts A are defined similarly from y \nand Di  the Di Note first that these~are proper definitions. For each i=r,r-l,.. .,O, is obtained from \n Czi c starting with every member of 2i+2 by Z=u (u; ~i+2) in a separate part, and then c2i+l repeatedly \ncoalescing parts x,Y such that either (a ) flUc (Y)#O , or 2i 1. If S is a set of sets, then US={XIX{T \nfor some T6S} (b ) U (x) n u (Y) # # (1) procedure M; c2i c2i (2) initialization: G + a daz consisting \nof a This process ultimately stops with a partition satis-single vertex ;o, labdled 0 ; fying (a) and \n(b). For if (a ) no longer holds for (3) fc + the mapping such that any X,Y, i.e., if x n uc2i(Y) = 0 \nfor all domain (fc) = {<x, 2r+2>} distinct parts X,Y, then UC2i(X) = X for each and fc(x, 2r+2) = VO; \npart X since (Z) = Z by the Reduction Lemma. (4) fD - the mapping such that C2i domain (fD) = {<Y, 2.s+2>} \nSimilarly, for (b ) and (b). and fD(y, 2s+2) = Vo; ,. NOW let ~i have Yi members ~il,. ..,Ciyi  (5) \nrepeat until no more input: ,. and let Di have bi members fiil, . . ..i3.j~i. Yi (6) read a symbol 0; \nand 6 are parameters in the statement of the i (7) if and i is odd then begin  o = CijAutomaton Lemma. \n For each j, 15j SYi, let  (8) ~ ~ij X {i+l} is not a subset of c ..= c! ~ Ci[eijl> and define dags \nDij similar-domain (fc) then reject;  1; It follows from the definitions that for a (9) Z * {<fc(k,i+l), \nOci(k)>l k { ~ij}; fixed i, the dsgs are the weakly connected (lo) R ~ unify (G, Cij, z); c ij components \nof the dag cl ~ ci[ueil, and similarly (11) if R = failure then reject else let R =<H,v>;for the Dij; \nthis fact was foreshadowed at the (12) f; ~ a mapping with domain (f:) = domainend of Section 5 and is \nexploited at a crucial junc\u00ad (fC) -(tij X {i+l}) U (C.ij X {i-l}) ture near the end of our proof. as \nfollows: Let us further define, for 1 5 i 5 2r+l, (13) f~(k,i ) = V(fc(k,i )) if <k,i > { domain (fC) \n-~ij x {i+l}; l~j~yi, tij = Uci(tij), and similarly for fiij. . (14) f~(k,i-1) = U(Ici(k)) if k ( ?ij; \nNote that (1) for each i=l ,.. .,2r, the union of (15) fc + f;;the ~ij is equal to the union of the ~i+l,j; \nand (16) for each <k,i > 6 domain (fD) do for odd i = 1,. ..,21,1, the union of the ~ij is f=(k,i ) \n~ p(fD(k,i ))~ equal to the union of the d~+2,j . (Our graphics (17) G -H ~ (range (fC) u range (fD)); \nmay be understood thus: if dags are oriented verti\u00ad  (18) end else if and i is even then o = Cijcally, \nwith sources at the bottom, sinks at the top, w and edges directed upwards, (19) if ~.. x {i} is not \na subset of domain then oci[~ijl are the v (~~) then reject;vertices along the top of Cij, and Ici[Cij] \nare (20) z ~ {<fc(k,i), Oci(k)>l k ~ ~ij}; (21) R+unify (G, C..lJY z); (22) if R = failure , then reject \nelse let  the vertices along the bottom of Cij.) A cut of a dag G is a set of vertices of G R = <H,w>; \nincludes exactly one. The automaton M keeps in such that every path from a source to a sink (23) for \neach <k,i > 6 domain (fc)-(~ij x {i}) its finite memor y a dag G and two mappings do fc(k,i ) +W(fc(k,i \n)); : Sc+l.lG. and fD: SD+V where Sc C N (24) for k C each ~ij do fc(k,i) ~ ~(ICi(k)); c G comment \n~ij = ~j; x {0,2,. ..,2r+2} and SD C N X {0,2,. ..,2s+~}, (25) for each <k,i > E domain (fD) do and range \n(fc) and range (~D) are cuts of G. fD(k,i ) = L(fD(k,i )); The vertex fc(k,i) corresponds, roughly, \nto (26) G 6 H t (range (fC) U range (fD)) Oci(k) or Oci_l(k)-of course, it is critical (27) end else \nif u = d.. then same business with that the size of G not exceed some constant K on C and D reve~~ed; \n any input to M, otherwise M would not be a (28) If the size of G is larger than K then reject; finite \nautomaton; the last steps of the proof fix (29) ~; K. (Actually, in our implementation it is conveni \n (30) if f = fD = a 1-1 function with domain ent to check the si~e of G after it is constructed (U80) \nx {0} = (U60) x {0} ~accept~ (line 28), rather than before, but this is a minor rej ect; detail.) (31) \nend of procedure M. Before proving that this procedure is as assert\u00aded in the Automaton Lemma, let us \nmake one notational convention. We imagine M to read its input from so we shall merely sketch the proof. \nright to ~; in this way we are able to establish Let .? = 81 +...+ ~r+r+l, and for i = ~,...,~+l a natural \ncorrespondence between the input read, the let dag constructed, and a solution to the relation (*) Pi \n=2r+2, if i = 8+1 in the Reduction Lemma. = 2j -1 , if i =.81+...+8 j -l+j 9. Proof of the Automaton \nLemma, ~ Direction = 2j , If 81+ +8 j -I+j c i c 8 +... +8j+j+l1 Let M be the procedure which results \nwhen lines (17) and (26) (G + H T (range (fC) U range 1 ... Cgr Define 2r c2r+l = CP1 fD))) are replaced \nby G + H, and line (28), the 0 hat C1C2 CP8 m and q, similarly from the m. and D.. Now check on the size \nof G, is omitted. Any input 1 J for i=l,.. .,~+l let ri=cpi  cp~ $ x and accepted by M is also accepted \nby M ; for all for i=l ,.. .,Iu+1 let Ai=Dqi ... qm f unification are done by matching ainks of a dag \nFinally, let ~ be the largest even number Yi. c or n with vertices in range (fC) or ij ij To prove (If \n2) we show range (fD), so that the presence or absence of vertices from which no member of range (fC) \n(If 2a) If v =~i .~m, where 1 5 i Sm+l, then U range (fD) can be reached does not affect the sub\u00ad(i) \ndomain (f;) = (Ufiqi) x {ii}, and there s sequent operation of the procedure. (Of course, M an embedding \np of Al onto Gv such is not a finite automaton.) that @Ai(k)) = f~(k,~i) for each For any input word \nw for M let Gw, f:, k C U$qi ; f; be the values of G, fc, fD at line (5) (the (ii) domain (f;) = {<x, \n.2r+2>} and beginning of the main repeat loop) just after M f~(x, 2r-1-2) is the sole sink of Gv; has \nread w (provided that M has nOt rejected w). whereNow suppose that w is a word accepted by M and 1f2b) \nlf =~i %&#38; %m 1 ~ i ~ 8+1, thenalso fulfilling the conditions (a)-(d) of the Auto\u00ad maton Lemma. \nThen there is a permutation of w of (i) domain (f;) = (Ubo) x {0}, and there is the form v Such an embedding \np Of onto G A: that L(IA1(k)) = f~(k,O) for each k C Ufio. where are nonnegative inte\u00ad l - &#38;r \nI  ms (ii) domain (f:) = (U~i) x {~i}, and there iS v gers and we have written %$ ~ for the words \nan embedding P of such that r: nG . ..ciy , dil. ..di6 . It suffices for the if Cil ~(Iri(k)) = f~(k,~i) \nfor each k ~ u~~i. half of tie Automaton ~emma to show Note that (If 2) follows from (If 2b) for i = \n1 (If 1) u is accepted by M , and G = Gw, (line 30) because of the acceptance condition for M f:=f:, \nf;=f; ; and the Equivalence Lemma. 1 NOW (If 2a) for i = til is an i~ediate conse\u00ad (If 2) <GU,IG> = \nc1c2 . c2r+1 ~ x and quence of the initialization steps (lines 2-4), since <GU, IG> = DID:l D2S+1 ~ \nY , ~+1= 2s+2 and lJ62s+2 = {Y}. SupposeiJI~e;) Ifholds for i+l ~ 1, and the word ~i . where domain \n(IG) = @O = ufio is odd, then qi+l is either qi+l or qi+2; qi and for each k 6 domain (IG), in either \ncase ~i+l = :i+2. Then domain (fD) h I-(k) = f!(k,O) = fH(k,O). . G..  L IJ transformed from (@i+l) \nx {~i+l} into (UD~i) (If 2)For (*) of the Reduction Lemma follows from x {ii} by removing, for j = 1,.. \n.,6qi, sets and the transitivity of Z. 6 . {Fi+l} and replacing them by sets  qij qi~ We prove (If \n2) first, assuming (If 1), and Moreovez, this in ~ {Cli}; results (U+i) x {Fil. then prove (If 1). The \nmain work in proving (If 2) G and the as this is being done, both the Previous is to set up the induction \ncarefully; after doing dags are embedded in G and and f are qij c D updated appropriately. For qi even, \nthe situation is simpler, ,since then qi+l is either qi Or q i+l ; in either case = ii and (U~~i) x \n{~i} i+l = (u~i+l ) x {;i+l}. Next, (If 2b) for i = .!+1 is exactly (If 2a) for and the induction i=l; \n step for (If 2b) is precisely analogous to that for (If 2a). This completes the proof of (If 2). Now \nfor the proof of (If 1). Call a binary relation R acyclic if there are no al,. ..,an such that R(a1,a2) \nand R(a2,a3) and .. R(an_l,an) and R(an,al) (n= 1). We define an acyclic rela tion p on the symbols in. \nZ and show that as long as p does not hold of two symbols which are adja\u00adcent in w, the symbols may be \nreversed without affecting the acceptability of the word. This will make it possible to show that w can \nbe transformed stepwise into u by transformations which preserve acceptance and the final values of G, \nand f c D (Any partial order is acyclic, and any acyclic rela\u00adtion may be closed transitively to form \na partial order. Unfortunately, the relation p defined below is not a partial order, and its transitive \nclosure cannot be used in the proofs below.) We define a relation p* recursively in four steps. The relation \nP* is the reflexive closure of P; thus p(~1,Cf2) if and only if P*(cr1>a2) and # 02. Before proceeding, \nwe note that 1 P(a1,~2) holds only if al and 02 are both in Zc or both in 2 We present the definition \njustD for the case of two symbols in the other case c; is similar. Then P ((ciljl, ci2J2 -) if and only \nif (Pi) =i and jl =j2; or 1 2 (p2) <i,i and are both odd, and 121 2 there is a j such that ~-fl i~+z,j \n# 0 ~lj 1 and P ~(ci~+2,j, ); or ci2j 2 (P3) <i, is even and is odd, and 1 2 1 2 there is a j such that \n~ i~j~ n ~i~+l,j # ~ and p*(Cil+l,j> Cizjz); r (P4) < iy, i~ is even and there is a j such 1 . that ~i2-l,j \nn ci2j2 + @ and p t(ciljl, ci~ l,j) Clearly, p is acyclic. Next define relations Pc on Nn x {0,2,. ..,2r+2} \nand pD on Nn x {0,2, . . . . 2s+2} as follows: pC(<kl,il>, <k2,i2>) if and only if and there are j1,j2 \nsuch that 1 < 2 kl E ~il+l,jl and k2 6 ?i2_l,j2 and . ). The relation is defined p*(cil+l,jl ~ ci2-1,~2 \nD similarly. Note that and are also acyclic. Pc D For any relation R, elements a,b are R\u00ad related if \nand only if R(a,b) or R(b,a). Lemma 9.1. Let i be odd. Then the only elements of N x {0,2,. ..,2r+2} \nwhich are pC-related tO n members of ~. . x {i-1} are either members of, or 13 are pc-related to members \nof, ~., x {i+l}. A lJ similar fact holds for D Proof. First suppose pc(<k ,i l>> <k,i-1>), where k 6 \n~ij, i z i, and i is odd. By the definition of p. there are j ,j such that k <~.,,, and k { ~ and p*(ci,j, \n,ci_2 j,,). i-2 ,j > Since lkJf ? it follows by the defini i-2,j n iij tion of p that p(ci_2,j,is Cij) \nand hence P(ci,j, ,c..). Thus if ki is any member of ?.. 13 ~J then by the definition of PC again, pC(<k \n,i -l>, <k , i+l>) . Next , suppose pc(<k,i-l>, <k ,i -l>), where kc~:,, ici , and i is odd. Then there \nis ~J a j such that k 6 &#38;i,_2 j, and p*(cij,ci,_2,j,). If i = i -2 then k C ~.. and <k ,i -l>= <k \n,i+l>{ 8 x {i+l]. IiJ i< i -z, then by the ii definition of-P there is a j such that i+2 j,,#@ and p*(ci+2 \nj,,, ci,_2 j,). Let k be any member of ~ ij n ti+; j,,. The: . as required. _  t ijnt pc(<k ,i+l>, \n<k ~i -l>) and k { Cij Let p:, p: be the reflexive closures of Now call a set S C Nn x {Cl,2,. ..,2r+2} \nPc-_ flat if and only if the elements of S are pairwise unrelated by Pc . If S1,S2 are pc-flat then write \nPC(S1YS2) if and only if PC9PD. (a) for every e S1 there is an 2CS2 ~$ such that Pc(fi1,~2); and (b) \nfor every is a ( S1 2 6 2 here 1 such that P&#38;,Tr2); and (c) for some ( S2, Pc(111,m2). 1 c 1 2 This \ntoo is acyclic; we write P; for its reflex\u00adive closure. where each Oi C 2, ow let w = l Qt?+m, and \nfor e= l,..., k+m+l let we = Oe..;olti and let Se = domain (f~e). Lemma 9,2. Each Se is pc flat, and \nP;(se,se+l) for e = 1 ,...,~~. The same holds for D Proof. For e = .htm+l, S is flat since Case 3. \nie is even. Then ~ ieje x {ie} c S Pc\u00ad e e+l it contains only one element, namely, <x, 2r+2>. and there \nis a j such that Cie-l,jf n Fieje + o Now assume the lemma for e+l. If Oe C Z and p*(cif~f, cie-l,j ). \nLet k2 be any member of D or if o =c for some even i, then S =Se+l e e ie-l,j n Cieje and let kl be \nselected as in ij and there is nothing to prove. If Oe=C.. and Case 1 if if is odd and as in Case 2 \nif i is f i is odd, then 6.. x {i+l} c S and ~J = even. Then as before there is a pair TTI (=<kl, if-l> \ne+l e s -e.. x {i+l]lj E.. x {i l]. Both ~.. x {i+l] if is odd, <kl,if> if if is even) such that e+l \nf ~J~J ~J and i x {i-1} are Moreover, no member and PC(TT1, <k2,ie>). m ij Pc-flat. 1 ( f of ?.. x {i \n1} is pc-related to any member of Lemma 9.4. Suppose that CSe and Oe+l (lSezl+m) s :3 c x {i+l}, since \nby Lenuna 9.1 the only e+l are not p*-related. Then the word Oe+1uewe+2 is ij elements which are pC-related \nto members of also read by M , and the internal state after read- L? x {i-1} are either members of, or \nare Pc\u00ading is identical to the internal stateij . e+l ewe+2 related to members of, C. . x {i+l}; clearly \nthere lJ after reading we. are no members of ~ x {i+l} in Se+l ~.. ij lJ Proof. If one of Oe,oe+l is \nin Z,c and the x {i+l}, and by the assumption of flatness for other is in Z then the result follows from \nthe s there can be no element of S which is D e+l e+l Commutativity Lemma and the fact that the symbols \nin Pc\u00ad related to a member of ~. . x {i+l} c S Thus e+l the two sets are processed independently, i.e., \nif a Se is pC-flat. Clearly p~?Se,Se+l) since PC member of Z is read then f is transformed byholds between \neach member of E x {i 1} and each c D ij the same mapping w that embeds G (lines (16),(25)).member of \n~.. x {i+l}. _ ~J SO let ISe = Ciljl, ~e+l = Ci2j2, and let Lemma 9.3. The symbols in w are in an order \ncon\u00adi~,i~ be the least even numbers greater than or sistent with p; that is, i fl~e<f~%n, equal to i1%i2, \nrespectively. Then . x {ii} Cllj I/. then not P(ofyoe). Cs and x {i;} c S Wewant to show i+l ci2j 2 i+2 \n Proof. Suppose to the contrary that e c f that also . x {ii} c S and that c~lj I i+2 . but p(af,~e). \nWe assume that both o and o e. x {i~} = 0, so that the set e f Iljl x ii} n ci2j2 Gwe+2 are in Z say \no = Cieje, fff = cifjf; the case f~2[ti1j1 x {i;}] is simply embedded from c e in which both are in is \nsimilar. We show that is read, so that the into Gwe+l after CT D e+l there are pairs such that Commutativity \nLemma applies. Now if il = i2, then rI ~,~2 Pc(~17 ~ ~ )> A By Lemma 9.2 this is impos jl # j2 and Ciljl \nn Cizjz = 0. Next suppose that 1 E f 2 f e+l sible, since it would imply either that Se+l = Sf # i2 \nand some member of ~iljl x {ii} enters 1 is not pC-flat or that pc is not acyclic. domain (fc) during \nthe reading of ci2j2. This can happen only at line (12), in which case i: Case 1. ie and if are both \nodd. Then by lines v = i~ 2 n~ iljl # o. But then (8) and (12) of M , ~ifjf x {if-l}c Sf and and ci2j2 \nP(ci~j~, ci2j2)3 a contradiction. _t ieie x {ie+l} C S Let kl be any member of e+l and let k z be any \nmember of ~ieie. Then This completes the proof of (If 1), since byz.lfjf~ since p(Cifjf, Cieje) we have \nfrom the definition Lemma 9.3 the input w can be transformed into the of pc that pc(<kl,if-l>, <k2,ie+l>); \nbut input u by repeated interchanges of the kind <kl, if-l> 6 Sf and <k2, ie+l> E Se+l. allowed by Lemma \n9.4. Case 2. ie is odd, if is even. Then by lines 10. Proof of the Automaton Lemma, ,Only If Direction \n(8) and (24) of M , ~i,eje x {ie-l-l] c Se+l and v x {if} c Sf, and by the definition of p Let (Q) be \nsome particular solution of (*) Cifj f A there is a j such that Cof the Reduction Lemmq, so that C=r), \nwhere we ifjf n ~if+l,j # @ and Let kl be any member of have defined C = CIC~l .. C~~ C2r+1 ~ X, 6L \n*(cif+l,J -! cie3e . ). ml... % D2, D2~+1 ~ y. As before let Cifjf n if+l,j> and let k2 be any member \nof D = lD2 +. ..+ m +5+1, ~eje ,. v 1 s since and <k2,ie+l> ~ e+l i=l,. ..,8 let t. Then pc(<kl,if > \n, <k2, ie+l>), <kl, if>c Sf != 41+. ..+ 8r+r+l, m=m and for Cifjf = Cifjf Pi = 2j 1, if i=81+ . +4?. \n j -1+2 =2j, if 81+. ..+8. J -1 c i c 81+ . +lj+j+l ,  0 hat c = cPl cP/3 ~ x; and define qi for i=l \n7...3m similarly. Now recall from Section 3 that there are dis\u00ad - copies l,...,rl, A1,...,Am Of c PI \n  CP8 q~  Dqm % Dqm = such that l Am CP1. ..CP8 1 Thus , = rl...rl and V(rl. ..rl) s ~(~l)u. ..uv(rj(Ir2r2 \n[Nn]U. ..Ulrg[Nn]) , and similarly for the Ai. For l~i~.!, l~jsypi, let r = ri ~ ori[~pijl, so that \nij r is a copy of C and similarly for A. . . ij Pij lJ Let ~ = {rijl l~i~~, l=j=ypi}, ! = {Aijl l=i=m, \n15j55qi}. By the Equivalence Lemma there is a dag J and a mapping p such that unify (C*, D*, {<a,b>}) \n= <J,v>, where a is the sink of C*, b is the sink of D*, and p is an embedding of both C* and D* onto \nJ. Extend p to a mapping v with domain {vI v is avertex of some A 6; Ui} as follows: For v E domain (v), \nlet Y(V) = ~(vj; for i= l,..., g-l and v C domain (v) (l Ori[Nn] let V(Iri+l(k)) = V(V) for each k t \nNn such that Ori(k) = v; and similarly for the A.. That is,1 v is like p except in being defined in addition \non the sources of r. and A.. for i z 1, lj lJ which are not vertices of C or D since they are replaced \nby members of ?Ui. Note that v embeds each member of ~ U ~ in J. A semicut of a dag is a set S of vertices \nsuch that S UT is a cut for some set T of sources of the dag. If S and T are semicuts of the same dag, \nthen S precedes T if every path from a member of S to a sink of the dag contains a member of T, but SflT=@. \nThe distance between S and T is in this case the maximum path length between a member of S and a member \nof T. Any two semicuts S,T of the same dag have a tub and a gtb, which are also semicuts, defined as \nfollows: 8ub(S,T) = {vI v C S U T and there is no non\u00adtrivial path from v to any member of SUT}. 1 In \nthis section we frequently write V(A) for VA so as to avoid multiple subscripts. glb(S,T) = {Vl v { s \nT and there ia no non\u00adtrivial path from any member of SUT toV} . A section A of a dag A is a subdag \nof A such that the set of all sources of A , and the set of all sinks of A , are semicuts of A; A is \nsaid to be bounded by these semicuts. Now let S be a semicut of J. Then S is an -r-semicut if and only \nif for some set fs c ?, A S = {W(v)l v is a sink of some r.. c I S}, and S 13 is a lower 17-semicut if \nand only if for some set :s c P, S = {v(v)I v is a source of some r.. 6 is}. ~J Upper and lower A semicuts \nare defined similarly. Since v embeds C* onto J, the only upper r semicut which need not also be a lower \nr-semicut is that consisting of the unique sink of J, and every lower 17-semicut may be obtained from \nan upper r\u00adsemicut by adding some sources of J. If J is asubdag of J and ~c~U~, A then let J +A be the \nsubdag of J induced by V(J ) U {v(v)/ v is a vertex of some A f ~}. The following technical lenma is \nused later. Lemma 10.1. Let J be a section of J and let ? be an upper r-semicut of J . Let ~ be the set \nof all r. . f f such that v(v) C V(J ~~) for lJ every sink v of r... Let ! be the set of all 13 v E V(J \n+~) such that V=v(w) for some source w . of some ~.. 6 A, but V + W(W) for any vertex w ~~ . of any r.. \n6A. Let ~ = ?U{w(w)l w is a source 13 of some r.. E ~ with i = 1}. (Thus each member lJ of ~ ! is a source \nof J.) Then $ is an upper r-semicut, T is a lower r-semicut, and ? pre\u00ad cedes ?. Proof. Since $ is an \nupper I -semicut, there is aset 10 Cf such that ~= {u(v)] v is asink of some A C ~o}. Clearly Lo c ~ \nand the set i. = {V(v)l v is a source of some A Clo} is a lower r-semicut, Let $0 = ~. {v(w)l w is a \nsource of some r. . 6~ with i = 1}. Then ? is Kl ~o an upper, and a lower, r-semicut, and o o precedes \n.$. If i$ = ~ we are done; T =Yo, o ?=? and f precedes ,?. Othkrwise, there is a g set Al C 1-1. such \nthat ?O = {L(v)l v is a sink of some A E~l}. Let fl =To -f. U {v(v)I v is a source of some A 6 ~1}, and \nlet ?1 = 71-{@l w A is a source of some r.. f A with i = 1}. This ~J construction may be repeated, yielding \na sequence il (), ~,... of lower r-semicuts and a sequence . . . U ~h= 8. Now let 6 = ~e-{Al A is a trivial \n!.,?l,. . . of upper r-semicuts; but since ~ is ultimately terminates with some  h+l =@. Let us finite, \n. . k=T the sequence A k=T m must terminate with some assume Then that fil Ufi3 h is U... even; the \nU~h_l=fi other and case is fi2Ufi4U similar. e Now, define for e = 0,1,. ... a subdag Je dag with vertex \nv and v(v) 6 ~e}. The definitions of J; for e = -1,0,1,. ... sets ~ and ? of of ; and J are not affected \nif fi~+l is e+l e+l vertices of J; for e=l,2,. ... a subset 5 of i substituted for 5 moreover, it now \nfollows e+l; ~ or ~; as follows: ~, ~,... that ~ ~ are pairwise disjoint as well as A is the trivial \ndag consisting of the single sink ~! ;1 together exhausting ~, and similarly for ~: 4,... of J. The special \ncase for which the definition of B: =Eo=?-l=?o is the set containing just this provides is that in which \nsome vertex v ( ~ is e one vertex. not a source of J but is the image under v of e even e = 0,2,4,. \n... a trivial dag A. In this case, A is a member of ii = {A i fil v(v) C V(Je~~e-l) for each both ~e \nand ~e+2, since v is a vertex of both e+l sink v of A}; J and J but A is a member of ~~+2 and e e+2; \nfi! not Note that no special provision need be e $ = UV[VA] -u~[vA] , e+l made here for nontrivial dags. \nFor if A C ~e n $e+2 the unions over all A < ~e+l ; then every vertex in V[VA] must be in the section \nof J bounded by se _ ~ and ~e on the one hand i -Su {v(v)] v is a source of some e+l -e+l and by ;e \nand 3 on the other, and since A e+2 r 6 ~e+l, with i=l] ij is weakly connected, this can happen only \nif A is trivial. J = (Je+fie+l ) t lhb(ge,~e+l) . e+l Next, for e = 1,...,h let Le be a listing For \nodd e, the same with A instead of r . of the members of ~~ such that if r.precedes Lemma 10.2. For even \ne z O, ~e_l is an upper Ilj 1 il~ iz, r. in the list, then and similarlyr-semicut of Je and ~e is an \nupper A-semicut ~2j 2 for the A... Let u be the word in Z* that ofJ; for odd e the situation is reversed. \n~J e e results from replacing each r.. in Le by the For each e > 1, se precedes : For each e-2 symbol \n(if e is odd) ~~d each Aij by e~O,J is a section of J bounded by cPij n (if e is even). Finally, let \nw= \\Uh-l qij  2 l Proof. The basis cases of all these asser- Now let Ge, f:, f; be the values of G, \nfC, tions are straightforward. Now let e ? O be even; in M at the beginning of the repeat loop D the \ncase for odd e is similar. Since Je is a (line (5)) just after Ueue-l . U1 has been read. section of \nJ and ~e_l is an upper r-semicut of Then it follows from comparison of the definitions the hypotheses \nof Lemma 10.1 are satisfied J -$ with the specification of M that Ue ul is not rejected, provided only \nthat the constant K i = Se+l; all the assertions but the last follow (line (28)) is large enough. Moreover, \nthere is an immediately. Clearly the set of sinks of Je+l is embedding ee of Ge onto Je such that hb($e,~e+l). \nAnd if v is a source of Je+l, 5e = ~e[range (f:)] if e is odd, and then v is either a source of J or \na member of :e = ~e[range (f~)l if e is even. Furthermore, ; a but in the former case v : g4b(~e_1,~e) \nby e+l because for i = 1, w containe exactly one occur\u00adinduction, and since : e+l precedes $e-l and \n~i rence of each c.. and d the acceptance condi\u00adand ii differ only with respect to sources of J, lJ \nij fh fh tione (line (30)) are met by ~ and D V 6 g~b(~e,~ e+l) in either case. _ It remains to find \na K large enough so that each dag Ge constructed ae M reads w passeeNote that it need not be the case \nthat : e+l the test on line (28). Of course, K must also precedes ~e; they may, in fact, cross each \nother . bound the eize of G ae the individual eymbols of It follows from the fact that $ precedes P \n the words Ue are read; but to show that euch a 3e_2 for each e that the sequence fi1,fi2,. . . bound \ncan be set on the size of all values of G : tovc: which is impossible. e-1 e+l e it suffices to set \na bound on the size of the G . If v is not a vertex of J then by the e For if we let H be the subdag \nof J induced by observation above, some subpath of H starting from the vertices in V(Je_l) U V(Je), then \nnot only can v of length at most n contains a member of e-1 c be embedded onto Je_l and Ge onto J se-l \nU :e. Let H be the shortest subpath of H e but every value assumed by G as u is read can starting from \nv and ending with a member u of e be embedded into He. Thus, G never grows larger ? If U 6 ~e, then U=w, \nand we are e-1 u p than twice the size of the largest Ge. done since the length of IT is at most m. Other- \nYoreover, in order to bound the size of the wise, u<; and the part of ~ from u to e-1 . Ge it suffices \nto bound the length of the J . Wcs e has length at most n2 + n by the induction e For Ge can be compressed \nby at most a fixed ratio hypothesis, giving a total length of at most when embedded in J and the width \nof J is 112 + 2rl for II. e e bounded by the maximum width of the C and D.. i 1 (b) Let H be a path in \nJe+l from a vertex Now let TI be the length of the longest semi-Vc? to a vertex w E ~ and suppose that \nthe e e+l path in any dag in f U ~, i.e., the length of the length of H exceeds n(~+l); we derive a \ncontra\u00ad longest semipath in any Cij or D... The proof 13 diction. Since $ e precedes $e_2, which precedes \nis completed by the following lemma. s and so on, and ; e+l precedes ; which e-4 e-1 precedes ? and so \non, v is not a vertex of Lemma 10.3. The longest path in any Je has length e-3 2 J J J for any k21. Then \nat most n + 21T. e 1 e 3 r e-2k+l by the observation above, H must contain members Proof. First note \nthat each path in Je+l of ? 3 2 at intervals of at most e-2 e-4 . .. e-2n-2 departing from a vertex \nin ~e+l contains a vertex TT since H cannot contain any member of ~e_l, , inJ. For if v E? then v = v(w) \nfor some e e+l i etc. e-3 source of a dag AC; and A C 6 only if e+l e+l Assume e is even; the case for \nodd e is v (u) is a vertex of J e for every sink u of A; similar. Let r. be such that v(w ) = w for 13 \n and no path from a source of A to a sink of A some sink w of IT.., but H ij $? fie+l, and i ~Jcan have \nlength exceeding T(. It follows by Lemma is the largest number such that there is a r. . ~J10.2 that \nif v { ~e+l and v is not a vertex of with this property. Thus there must be some other Je, then every \npath departing from v of length sink u of r.. such that u = V(u ) is not a ~J at least n contains a member \nof 3 se Je t ~e_l; e-1 r vertex of otherwise, r. . would be a ~J(since no nontrivial path could contain \na source member of 6 Then u 6 ~ and there is a e+l e+l of J). path from u to some member of :e. By the \nweak Now to prove Lemma 10.3 it suffices to prove connectivity of r there is a semipath H from ijthat \nthe longest path in Je+l from a member of w to u of length at most TT. But also there are ggb(~e,~e+l) \nto a member of iub(?e,~e+l) has paths from u to a member of se and from a member length at most TT2 + \nZn. We break the proof into of ; to w. But this is impossible, since e-2V 2 two cases. then H must contain \nat least one member of each (a) Any path in Je+l from a member of ~e+l to a of the TT+2 distinct upper \nr-semicuts ~e,~e_2, member of ie has length at most n2 + 2n. .... t _ e-2n-2. (b) Any path in Je+l from \na member of ~ to a e member of ; e+l has length at most n2 + 2T1. References For e = -1 both parts are \ntrivial. Now let 1. R.J. Parikh, On context free languages, J.ACM 16 (1969), pp. 244-255. e20. 2. M.S. \nPaterson, Equivalence Problems in a Model(a) Let H be a path in J from a vertex * e+l of Computation, \nPh.D. thesis, Cambridge Univer-Vc: to a vertex w ( s Then v cannot be sity, 1967; reissued as MIT Artificial \nIntelli\u00ad e+l e. gence Lab Memo #1, 1970, a vertex of J unless H is trivial, since other\u00ad e 3. M.S. Paterson \nand M.N. Wegman, Linear unification, wise there would then be a path from a vertex in Proc. 8th ACM \nSymp. on Theory of Comp., pp. 181-186. \n\t\t\t", "proc_id": "512950", "abstract": "In his thesis Paterson proved that equivalence is decidable for program schemata such that every instruction falls on at most one loop and only monadic function signs appear. Here we remove the restriction on function signs. The problem reduces to that of showing that the numerical exponents which satisfy certain \"word equations\" over a semigroup of acyclic directed graphs may be characterized by sentences of Presburger arithmetic; these exponents correspond to loop coefficients of the program schemata. The central construction is a finite automaton whose memory is a window of bounded size on an acyclic directed graph corresponding to a solution to such a \"word equation\".", "authors": [{"name": "Harry R. Lewis", "author_profile_id": "81100349371", "affiliation": "Harvard University", "person_id": "PP31038347", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512950.512974", "year": "1977", "article_id": "512974", "conference": "POPL", "title": "The equivalence problem for program schemata with nonintersecting loops", "url": "http://dl.acm.org/citation.cfm?id=512974"}