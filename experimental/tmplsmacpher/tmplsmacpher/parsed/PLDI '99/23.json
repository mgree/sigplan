{"article_publication_date": "05-01-1999", "fulltext": "\n\t\t\t", "proc_id": "301618", "abstract": "This paper describes GBURG, which generates tiny, fast code generators based on finite-state machine pattern matching. The code generators translate postfix intermediate code into machine instructions in one pass (except, of course, for backpatching addresses). A stack-based virtual machine---known as the <i>Lean Virtual Machine</i> (LVM)---tuned for fast code generation is also described. GBURG translates the two-page LVM-to-x86 specification into a code generator that fits entirely in an 8 KB I-cache and that emits x86 code at 3.6 MB/set on a 266-MHz P6. Our just-in-time code generator translates and executes small benchmarks at speeds within a factor of two of executables derived from the conventional compile-time code generator on which it is based.", "authors": [{"name": "Christopher W. Fraser", "author_profile_id": "81100364566", "affiliation": "Microsoft Research, One Microsoft Way, Redmond, WA", "person_id": "P47620", "email_address": "", "orcid_id": ""}, {"name": "Todd A. Proebsting", "author_profile_id": "81100592757", "affiliation": "Microsoft Research, One Microsoft Way, Redmond, WA", "person_id": "P283229", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/301618.301680", "year": "1999", "article_id": "301680", "conference": "PLDI", "title": "Finite-state code generation", "url": "http://dl.acm.org/citation.cfm?id=301680"}