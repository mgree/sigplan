{"article_publication_date": "05-01-1999", "fulltext": "\n\t\t\t", "proc_id": "301618", "abstract": "The FFTW library for computing the discrete Fourier transform (DFT) has gained a wide acceptance in both academia and industry, because it provides excellent performance on a variety of machines (even competitive with or faster than equivalent libraries supplied by vendors). In FFTW, most of the performance-critical code was generated automatically by a special-purpose compiler, called genfft, that outputs C code. Written in Objective Caml, genfft can produce DFT programs for any input length, and it can specialize the DFT program for the common case where the input data are real instead of complex. Unexpectedly, genfft \"discovered\" algorithms that were previously unknown, and it was able to reduce the arithmetic complexity of some other existing algorithms. This paper describes the internals of this special-purpose compiler in some detail, and it argues that a specialized compiler is a valuable tool.", "authors": [{"name": "Matteo Frigo", "author_profile_id": "81100040135", "affiliation": "MIT Laboratory for Computer Science, 545 Technology Square NE43-203, Cambridge, MA", "person_id": "P194388", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/301618.301661", "year": "1999", "article_id": "301661", "conference": "PLDI", "title": "A fast Fourier transform compiler", "url": "http://dl.acm.org/citation.cfm?id=301661"}