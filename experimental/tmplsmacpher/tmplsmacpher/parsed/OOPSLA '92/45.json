{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - 10 October 1992 Proceedings Poster Submission- \n A Programming Language Based on the Concepts of Objects and Fields Report by: Fumihiko Nishio Toyohide \nWatanabe Noboru Sugie Nagoya University  Abstract The object-oriented model is very successful to represent \nvarious phenomena in our real world from an entity-category point of view. However, it is not sufficient \nto model the dynamic actions of autonomous entities under this paradigm. This model is in short of representing \nthe relationships between entities and the environments. In this paper, we propose an experimental object-oriented \nprogramming language to manage the relationships together. 1 Introduction The object-oriented paradigm \nis effective to represent the characteristic properties of distinct entities to be observed in our real \nworld. The framework of the object-oriented paradigm is based on the ISA relationship defined in the \nclass hierarchy. Such a framework is too simple in comparison with various phenomena of our environments. \nUnder the circumstances that many different objects exist, it is important to manage the mutual relationships \namong these objects effectively. So the concept of groups, which are composed of interrelated objects, \nis more important to manipulate various objects dynamically because mutually interrelated objects must \nshare their common objective. Namely, we need appropriate constructors with a view to modeling our phenomena \nfrom an object-interaction point of view, besides the ISA relationship.  2 Object-Field Modeling The \nobject-oriented paradigm provides a powerful and effective method for modeling the activities and properties \nof entities in the real world. However, the framework in the object-oriented paradigm is not always adaptable \nto specify various phenomena to be observed in our real world. Namely, the following restraints are imposed: \n1. The message passing mechanism is basically limited to l-to-l though our usual communication method \nis classified into 4 types of categories: l-to- 1, l-to-many, many-to- 1 and many-to-many; 2. The relationship \namong objects is derived from ISA, though different kinds/types of entities in our real world establish \nvarious relationships, corresponding to their activities in the social structures; 3. The concept of \nenvironments is not available, though individual entities in our real world do not only interact directly \nwith one another but  5-10October 1992 -2ol-Addendum to the Proceedings also are controlled indirectly \nunder their common environments. These constraints are dependent on the fact that only objects are uniquely \ndistinguished as operational entities and the other existing components are not permitted at all. Therefore, \nwe need the other elements to be able to resolve such constraints, in addition to objects. We introduce \nthe concept of fields. The field is an environment to define the operational range among objects. At \nleast, individual objects can interact effectually with each other in sharing their common goal. Introducing \nthe concept of field, our modeling method is based on two distinct entities: a static and passivejIeld; \nand a dynamic and active object. However, the distinction between objects and fields is very ambiguous. \nWe may not distinguish objects and fields uniquely because the distinction is too dependent on our modeling \nviews. Therefore, it is important to provide a specification mechanism of modeling various views of the \nphenomena flexibly. Such a specification mechanism must always construct the nested structure among fields \nin manipulating objects and fields. We illustrate such a framework based on objects and fields in Fig.1. \nThis mechanism is very important because the traditional class hierarchy can not support it at all. Thus, \nour framework supplies the concept grouping in addition to the abstractions generalization/specialization \nas ISA relationship and aggregation as PARTOF relationship. Figure 1: Structure between objects and fields \n 3 Object and Field 3.1 Object The objects in our model are autonomous entities, and can execute their \nown tasks concurrently. The objects consist of following components: State variables that represent the \ncurrent state of object; Actions that objects perform independently by themselves. The actions are the \nsame as the methods in the object-oriented paradigm; A message buffer that holds messages, sent from \nother objects. Each object possesses his own message buffer. Messages which were not accepted instantly \nby the object are temporarily kept in this buffer; A message selector that takes out the first executable \nmessage from the message buffer according to the object state. Users must specify state variables and \nactions in the definition of objects (Fig.2 (a)). The definition syntax is based on the programming language \nC. (a) object <Object-Type> { state: <State Variables> func: <Internal Functions> action: <Actions> \n 1;  (b) field <Field-Type> ( state: <State Variables> func: <Internal Functions> proc: <Procedures> \n 1;  (c) object <Object-Type> over  <Field-Type> { state: <State Variables> func: <Internal Functions> \naction: <Actions>  Figure 2: Definition syntax of objects and fields 3.2 Field The field is an environment \nto make objects active. It has following constructs. State variables that represent the state for the \nenvironment in which objects are exactly available. Procedures that are called by objects in order to \naccess to state variables in the field. 9 A message bufer that holds messages, sent from objects. This \nmessage is sent to every object in the field through the broadcasting function. A broudcustingfmction \nthat enables to send messages to many unspecified objects within the field. This function makes it easy \nto control a group communication such as the meeting, the team, etc. OOPSLAW -202-Vancouver, British \nColumbia . An object list that records objects which are available in the field. Referring to this list \nthe field can broadcast messages successively. Whenever objects enter into and leave from fields dynamicaIly, \nthis list is updated appropriately. Users must describe state variables and procedures in the definition \nof fields (Fig. 2 (b)). Each field has particular procedures such as enter and exit in advance: enter \nis used for participating the specified object to the field, and exit removes the object from the field. \n 3.3 Field as Object As discussed previously, we must look upon a field as a kind of object when we \nobserve the field from the external view. Therefore, the mechanism for handling a field as an active \nentity, but not a passive one, is needed. This characteristic is supported applicably by overlaying an \nobject definition onto the existing field definition newly (Fig.2 (c)). This mechanism integrates two \nmodeling views: an internal view and an external one. An internal view is defined as a field and an external \none is as an object. In the implementation phase, it is able to define these distinct modeling views \nseparately. This separation supports a natural mapping method from our modeling viewpoints to program \nconstructs. 4 Conclusion In this paper, we proposed our experimental programming language based on the \nconcepts of objects and fields. The modeling method based on the concepts of objects and fields is adaptable \nto represent various problems in the real world, because the group of cooperative objects has two distinct \nproperties. Our framework provides a successful way to use these properties as object and field appropriately, \ncorresponding to the modeling views, by overlaying the object onto the field.   Contact information: \nFumihiko Nishio Toyohide Watanabe Noboru Sugie Department of Information Engineering, Faculty of Engineering, \nNagoya University Furo-cho, Chikusa-ku, Nagoya 464-01, Japan e-mail: {nishio,watanabe)@yoshida.nuie.nagoya-u.ac.jp, \nsugie@sugie.nuee.nagoya-u.ac.jp S-10 October 1992 -203-Addendum to the Proceedings  \n\t\t\t", "proc_id": "157709", "abstract": "<p>The object-oriented model is very successful to represent various phenomena in our real world from an entity-category point of view. However, it is not sufficient to model the dynamic actions of autonomous entities under this paradigm. This model is in short of representing the relationships between entities and the environments. In this paper, we propose an experimental object-oriented programming language to manage the relationships together.</p>", "authors": [{"name": "Fumihiko Nishio", "author_profile_id": "81543281856", "affiliation": "", "person_id": "PP311183300", "email_address": "", "orcid_id": ""}, {"name": "Toyohide Watanabe", "author_profile_id": "81332534397", "affiliation": "", "person_id": "PP39085151", "email_address": "", "orcid_id": ""}, {"name": "Noboru Sugie", "author_profile_id": "81540836956", "affiliation": "", "person_id": "PP31096435", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157754", "year": "1992", "article_id": "157754", "conference": "OOPSLA", "title": "A programming language based on the concepts of objects and fields", "url": "http://dl.acm.org/citation.cfm?id=157754"}