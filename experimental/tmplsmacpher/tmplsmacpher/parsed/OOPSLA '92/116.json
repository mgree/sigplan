{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 fo the Vancouver, British Columbia, Canada 5-IO October 1992 Proceedings Educators Symposium- \nThe Role of Object-Oriented Technology in the Undergraduate Computer Science Curriculum Report by: Martin \nOsborne WPC~ITTI Wrrchintrtnn 1. ~\".~~l. .I ..\"\"\"'&#38;.CV\" TTniv~rcitvV\"'..,'\".., Abstract Currently \nobject-oriented technology (OOT) plays only a minor role in the computer science curriculum at most universities. \nThis is because the curriculum is already crowded and OOT is just one of many new topics competing for \na place. This paper describes reasons for including OOT in the curriculum and strategies for doing so. \nThe experiences of two universities which teach OOT are described. The first university emphasizes OOT, \nwhile the second offers only a single course on the subject. Introduction Educators who want to introduce \nobject-oriented concepts into the computer science curriculum confront many problems: choosing appropriate \nlanguages and hardware; developing materials and techniques for teaching the concepts; and designing \ncourses. They also face a more general problem: explaining the role of object-oriented technology (OOT) \nto colleagues who have their own concerns and curricular agenda. Presently OOT has only a minor place \nin the curricula of most schools. Many schools teach no courses on OOT and many others only a single \ncourse on object-oriented programming. Enthusiasts of OOT may find this distressing. OOT is exciting \nand powerful, it has many areas of application, and it deserves a greater place in the curriculum. This \nneeds to be explained to others, and strategies need to be developed for incorporating OOT into the curriculum. \nThis paper will begin by discussing why OOT currentiy has oniy a minor role in the computer science curriculum. \nNext the paper will present reasons and strategies for including OOT in the curriculum. Finally, the \npaper will look at the curricula of two universities that include OOT. The first is Carleton University, \nwhere the author spent a sabbatical and OOT is important. The second is Western Washington University, \nwhere the author teaches and OOT is not yet important.  Why OOT Has Only a Minor Role in the Computer \nScience Curriculum Two reasons why OOT has only a minor role in the computer science curriculum stand \nout. First, computer science programs are already crowded, and second, OOT is only one of many issues \ncompeting for the attention of computer science faculty. The first point is supported by an examination \nof Computing Curricula 1991, the report of the ACM/IEEE-CS Joint Curriculum Task Force [l]. The report \ndivides computer science into no less than nine subject areas: algorithms and data structures, architecture, \nartificial intelligence and robotics, database and information retrieval, human-computer communications, \nnumerical and symbolic computation, operating systems, programming languages, and software methodology \nand engineering. Furthermore, the report stresses that an undergraduate curriculum in computing should \nprovide each graduate with a reasonable level of instruction in all of the subject areas identified above \n-[and]-should also provide reasonable depth of study in the nine areas. The report is thus distinguishing \nbetween a breadth requirement, which all students should satisfy, and a depth requirement, which varies \ndepending on the electives chosen by a student. The report describes the material in the breadth requirement \nin detail. For the nine areas, the report specifies subtopics and the number of lectures to spend on \neach. Shown below are the areas and lecture hours recommended for OOT. Area Lecture Hours Database and \nInformation Retrieval 1 Operating Systems Programming Languages Software Methodology Engineering and \n All these lecture hours together amount to about three weeks of classes. This is not enough time to \ndo justice to OOT, and it is difficult to discuss OOT with students who have not even written a single \nprogram in an object-oriented language. It is important to realize that many educators will use the report \nas a guideline when they upgrade and modernize the computer science curricula at their schools. However, \nthe report is not singling OOT out for neglect. Many other important topics are covered at lightning \nspeed. On a brighter note, the report mentions OOT once as a possible upper division elective, along \nwith twenty-eight other topics. The report acknowledges that the actual choice of upper division electives \nwill vary with the particular interests and expertise of the faculty in individual programs, so the other \nelectives on OOT can be added. The second point, that OOT is only one of many issues competing for the \nattention of faculty, is supported by a review of the activities at the Twenty-Third SIGCSE Technical \nSymposium on Computer Science Education [21. The papers, panels, tutorials, and posters presented at \nthis conference covered a wide range of topics and reflect the current concerns of educators. OOT received \nonly minor attention, about as much as parallel computing. The table below gives some numbers. l ; --_ \nParallel 5 0 1 1 Computing Two of the papers on parallel computing [ 10,l l] discussed means -_-inteumtino \ny-----rnmnntino __-_ --I fnr _--__ o- --- p nnrallel - -- y ..b throughout the computer science curriculum, \nstarting at the introductory level. It is disappointing that there were no similar papers on OOT. Reasons \nfor Including OOT in the Curriculum There are good reasons for including OOT in the curriculum. Here \nare six. First, OOT should be included in the curriculum because it provides a means for achieving goals \nalready considered important. For instance, a primary mission of most computer science programs is to \nteach programming in modem and relevant software development environments. It can be argued that for \nmany applications OOT provides the best approach. People predict that OOT will have the same importance \nin the 90s as structured techniques had in the 70s and 80s. Second, OOT is becoming increasingly important \nin most of the nine subject areas defined by the report of the ACM/IEEE-CS Joint Curriculum Task Force. \nAn obvious example is in the area of database systems. It is reasonable to expect that database text \nbooks will eventually give object-oriented database systems at least as much attention as hierarchical \nand network database systems. Third, object-oriented programming can be used as a context for discussing \nissues, such as binding time and memory management, that are important in computer science. Fourth, to \nthe extent to which OOT is a research interest of computer scientists, it deserves to be in the curriculum. \nAt Carleton University six of nineteen faculty list OOT as a research interest. Other faculty use object-oriented \nlanguages to implement software associated with their research. Not surprisingly, OOT is a major component \nof the curriculum [4]. The message to those who would like more attention to OOT at their schools is \nclear. Do research in OOT and help colleagues see how it can be useful to them. Fifth, the importance \nof OOT to the computer industry is enormous. There are many areas of application, and books and articles \non the subject abound. However, it must be remembered that the importance or unimportance of a subject \nto industry does not necessarily decide its place in the typical computer science program. While computer \nscience departments do not ignore the needs of industry completely, they do have their own agenda. Consider \nthe concerns expressed in the abstract of the panel on Software Engineering and Undergraduate Computing \nCurricula at the SIGCSE Symposium [5]. Most graduates of baccalaureate computing programs (at least in \nthe United States) take jobs in the computing profession immediately upon graduation. These jobs generally \ninvolve software deveiopment or mainienance activities, and therefore demand certain software engineering \nskills and knowledge. It appears, however, that typical undergraduate computing programs are at present \ninadequately preparing their students in the area of software engineering. Sixth, and not least, object-oriented \nprogramming is a major programming paradigms. It is fun and gives students a completely new perspective \non programming. As McCracken [3] points out, It is important that students understand several programming \nparadigms: imperative (procedural), functional, logic, concurrent, object-oriented, fetch/execute machine \nlevel. If students learn imperative only, with the others skimmed in an All Others elective, they are \nstunted.  How to Incorporate OOT into the Curriculum There are several strategies for incorporating \nOOT into the curriculum. Some are more ambitious than others, but none require the dispiacement of other \nmaterial. A change in approach to teaching some courses already in the curriculum and/or the addition \nof one or two electives is sufficient to implement these strategies. The most radical approach is to \nuse an object-oriented l.-____.-_- :_ -L- I_r__l~__r-__ _ .__.,-...~._~__ .._ kmgudge in mt: inuwucrory \nprogrdmmmg course, to emphasize OOT in courses on software development, and to incorporate OOT into yet \nother courses when possible. (This approach is similar to that suggested by Meredith and John [lo, 111 \nfor integrating parallel computing into the curriculum.) The imperative paradigm, while not forgotten, \ngets secondary attention. There are drawbacks to this exciting approach. It requires a large commitment \nto OOT and a faculty sufficiently versed in the subject to carry it off. There are few if any textbooks \nthat approach introductory computer science from this angle. Despite these obstacles Carleton University \nuses this approach with great success. (At Carleton the courses involving OOT are taught from notes that \nare still being perfected by a few skilled experts.) It needs to be pointed out that an introductory \nprogramming course based on an object-oriented language is likely to be very different from a course \nbased on an approach recommended by McCracken [3] and other distinguished educators in computer science. \nMcCracken recommends a course which is an intensive introduction to problem solving and programming using \nprinciples developed by Dijkstra, Gries, Hoare, and Reynolds. Such a course stresses invariants, pre- \nand post- conditions, and nroofs of correctness. Students write programs to find the maximum and minimum \nelements of an array, to find the longest-up sequence, to implement a heapsort. Algorithms are foremost, \nand formal methods are important. MiniPascal, a subset of Pascal, is the suggested programming language. \n(Dijkstra, Gries, ~nrl hArf7~rl~n QVPr,~;n;pnto nf thn Cl/lf TC A,.wwrl U.&#38;L&#38; Luu I-IyIL4ILJ \nI L11V I.ItibIUC-RUII L,I)LI IIIYU,L4 for Outstanding Contributions to Computer Science Education.) \nIn contrast, the experience at Carleton University shows that an introductory programming course based \non an object-oriented language, such as Smalltalk, will spend considerable time discussing the programming \nenvironment and mechanisms such as class, polymorphism, and inheritance. Methods of problem decomposition \nwill be stressed. A typical programming assignment might involve using built in collection classes and \nseveral user defined classes to implement a small airline reservation system. Although these two courses \nare very different, later courses can bridge the gap between them. At this time an object-oriented language \nis seldom 119p.11in intmdmwwv nmvrxnmino rnnrwr Thir ic II__ ------l--_l-.v-~ =_ve-- -- -- o _V- I . \n_.._U _I confirmed by a survey 161 of 236 schools taken by Reid in November of 1991 of languages used \nin introductory programming courses. Here are the numbers. Smalltalk was not one of the languages mentioned \nin the group other. Schools using C++ are not necessarily using the object-oriented features in the first \ncourse. A variation on the above approach is to teach the introductory course in a traditional manner, \nstressing the imperative paradigm, but using a hybrid language such as Turbo Pascal or C++. Object- oriented \nextensions would be taught in a required second course, such as a course on data structures, where the \nclass mechanism can be used to implement abstract data types and encapsulation. Also, OOT would be incorporated \ninto other appropriate courses as suitable materials became available and as faculty became familiar \nwith OOT. At schools where OOT is not yet seen as generally important, courses on OOT must be taught \nas electives. Should these electives be at the lower or upper division level? As the importance of the \nobject-oriented approach is unlikely to be reinforced :, ^+L^- ^^.__ ^_ ._---_ A:..:-:-- -1--.: _.__ \nl^^_ 111 UK1 L lll>G&#38; upye UIVI~IUIIt;lt;c;UVt;SSWZIII preferable. More can be accomplished in upper \ndivision courses. Balanced against this is the possibility that students who learn the object- oriented \nparadigm early will continue to use it whenever there is an opportunity to do so. In this setting, one \nhas to ask if there is any point in teaching just a single course on object-oriented programming. The \nanswer is yes, especially if the course can cover more than just programming. Consider a course using \nSmalltalk for students who already know how to program. If one avoids the pitfalls of exploring too much \nof the class hierarchy and of getting too entangled in the user interface, there is time to solve problems \nthat require several new cooperating classes, to demonstrate techniques of object-oriented analysis and \ndesign, and to hint at the overall importance of OOT [7]. A last approach is to teach OOT when and where \nneeded. It is hard to see how a few lectures here and few there, given to students who do not even know \nhow to program in an object-oriented language, can be of much benefit. Yet this seems to be the approach \nsuggested by Computing Curricula 199 1. OOT at Carleton University Enticed by the paper Smalltalk as \nthe First Programming Language: the Carleton Experience [8], the author spent a sabbatical leave at Carleton \nin the fall of 1991. While there he interviewed all the faculty in the School of Computer Science and \nread the class notes and assignments in all classes that focused on OOT. It was his intention to determine \nthe impact of OOT on Carleton s curriculum, the reaction of the faculty, and the implications for the \ncurriculum at Western Washington University. In brief, OOT has made a large and successful impact at \nCarleton, and the faculty like it. Circumstances at Western are so different that a similar incorporation \nof OOT is very unlikely. At Carleton five of the core courses emphasize OOT. These courses are: 105 Introduction \nto Programming -Programming using Smalltalk. 106 Computer Applications -A continuation of 105 in which \nstudents tackle larger problems. 202 Data Structures and Data Types -Stacks, queues, lists, trees, etc., \nwith laboratory assignments in Smalltalk. 204 Programming in the Large -Software development using a \nvariety of languages, including C++. 304 Software Systems Design -Non programming aspects of software \ndevelopment with stress on object- oriented analysis and design. The other core courses are fairly typical. \nIn the courses, 102, Introduction to Computers, and 203, Computer Organization, students become familiar \n. . . ..I_ &#38;L. .-.-__r.l.._ -___>I__. 1. I.--.--1~ wun me imperduve pdrduigm oy learning to program \nin C. Carleton has made a large commitment to OOT while maintaining a balance with topics traditionally \nfound in a computer science curriculum. The exposure to C ensures that students can work comfortably \nwith the procedural programming paradigm in upper division courses when required, however, for the most \npart students are free to do laboratory assignments in the language of their choice, usually Smalltalk. \nA striking feature of Carleton s curriculum is the amount of time devoted in the first and second year \nto teaching software development skills. This is independent of the emphasis on OOT and addresses the \nconcerns, quoted earlier, of the SIGCSE panel on software engineering. There was much enthusiasm for \nand very few criticisms of the role of OOT in the curriculum. The author was concerned that because of \nthe emphasis on OOT, students might enter the third year with inadequate skills in procedural programming. \nThe faculty did not identify this as a problem and felt that any weaknesses which might exist in procedural \nprogramming skills would be corrected quickly. One faculty member felt that the emphasis on Smalltalk \nwas unfortunate. He would have preferred the students to be more expert in C++. Overall the faculty are \nvery satisfied. Several factors account for the large and successful role of OOT in Carleton s curriculum. \nFor many years Carleton has been home to well known experts in OOT (Wilf LaLonde, John Pugh, and Dave \nThomas, no longer on the faculty), and they have experimented with OOT in various courses. When the present \ncurriculum was implemented, OOT was proposed as a means for achieving a goal the rest of the faculty \ncould relate to, teaching students software development skills. Obviously present at Carleton is the \ntalent needed to teach the classes, to train other faculty in OOT, and to develop course notes when textbooks \nare not available.  OOT at Western Washington University OOT plays only a small role in Western s undergraduate \ncomputer science curriculum. One faculty member is interested in OOT, and several others see that it \nhas some relevance to their areas of interest. Presently, a sophomore level elective on object-oriented \nprogramming is taught. The curriculum is now under revision, and because there are factions within the \ndepartment with different views on what is needed, the eventual effects of the revisions are unclear. \nOne very likely outcome is that the introductory programming course in the new curriculum will be similar \nto the one described by McCracken and that this course will be followed by a year long sequence taught \nfrom Foundations of Computer Science by Aho and Ullman [9]. This excellent book artfully weaves together \nfinite mathematics and many major threads of computer science. Pascal is recommended as the language \nbest suited for doing the laboratory assignments. Although the faculty desire to graduate students who \nhave mastered software development skills, they do not agree on how to accomplish this. A major faction \nbelieves that special courses should not be devoted to teaching these skills. Instead the skills should \nbe taught when and where needed in other courses. This faction has the same attitude about programming \nparadigms and can be expected to suggest dropping the elective on object-oriented programming. The author \nhopes to show that this would be a mistake and that the role of OOT should be expanded.  Conclusions \nAlthough object-oriented enthusiasts can give good reasons for incorporating OOT into the curriculum, \nit may be some time before computer science educators as a group are convinced. There are more schools \nsuch as Western where OOT is struggling for a foothold than schools such as Carleton where it is successfully \nestablished. The academic discipline of computer science has barely begun to acknowledge OOT, so the \nenthusiasts need to be persistent, patient, and realistic.  References Contact information: 1. ACM/IEEE-CS \nJoint Curriculum Task Force, Computing Curricula 1991, ACM Press, 1991. The Papers of the Twenty-Third \nSIGCSE Technical Symposium on Computer Science Education, SIGCSE Bulletin, March 1992, vol24,nol. 3. \nDaniel McCracken, Programming Languages in the Computer Science Curriculum, SIGCSE Bulletin, March 1992, \n~0124, no 1, pp. 14. 4. Carleton University, School of Computer Science Handbook 199X-92.  5. Stuart \nZweben, Software Engineering and Undergraduate Computing Curricula, SIGCSE Bulletin, March 1992, ~0124, \nno 1, pp. 315. 6. Richard Reid, First Language for CS Majors, News Net, article 4379 of compedu, November \n199 1. 7. h4artin Osborne, An Introductory Course in Object-Oriented Technology, class taught at Western \nWashington University, 1992. 8. Wilf LaLonde and John Pugh, Smalltalk as the First Programming Language: \nthe Carleton Experience, Journal of Object- Oriented Programming, Nov/Dec 1990, vol 3, no 4, pp. 60-65 \n 9. A. V. Aho and J. D. Ullman, Foundations of Computer Science, Computer Science Press, 1992  10. Marsha \nMeredith, Introducing Parallel Computing into the Undergraduate Computer Science Curriculum: a Progress \nReport, SIGCSE Bulletin, March 1992, vol 24, no 1, pp. 187-191. 11. David John, Integration of Parallel \nComputation into Introductory Computer Science, SIGCSE Bulletin, March 1992, vol 24, no 1, pp. 281-285. \n Martin Osborne Department of Computer Science Western Washington University Bellingham, WA 98225 martin@cs.wwu.edu \n  \n\t\t\t", "proc_id": "157709", "abstract": "<p>Currently object-oriented technology (OOT) plays only a minor role in the computer science curriculum at most universities. This is because the curriculum is already crowded and OOT is just one of many new topics competing for a place. This paper describes reasons for including OOT in the curriculum and strategies for doing so. The experiences of two universities which teach OOT are described. The first university emphasizes OOT, while the second offers only a single course on the subject.</p>", "authors": [{"name": "Martin Osborne", "author_profile_id": "81100398745", "affiliation": "", "person_id": "PP31091553", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157839", "year": "1992", "article_id": "157839", "conference": "OOPSLA", "title": "The role of object-oriented technology in the undergraduate computer science curriculum", "url": "http://dl.acm.org/citation.cfm?id=157839"}