{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - 10 October 1992 Proceedings Educa tars \nSymposium- Teaching Object-Oriented Programming or Using the Object Model to Teach Software Engineering. \nReport by: Jean Bezivin Olivier Roux Jean-Claude Royer Universite de Nantes Summary Within the last \nthree years, we have experimented a Master Program centered on object-oriented technology. This paper \nreports on the feasibility of the approach and gives our first conclusions on this experiment. It suggests \nmany ways to improve such a curriculum. We are now completely convinced that the pedagogical scheme we \nhave chosen may be successfully applied in different contexts and we give some hints that may help to \ngeneralize this experiment. One of our main conclusions is that a complete program targeted towards object-oriented \nprogramming is probably not a good idea. On the contrary, a course on advanced software technology, completely \nbased on various forms of the object model, is an efficient and promising way to produce highly skilled \nsoftware professionals that will be immediately operational in various domains and that will easily adapt \nto the forthcoming rapid software technology changes. The object model has been recognized as a natural \nguide to structure the various topics that constitutes a complete software engineering curriculum. / \n1. Introduction The French educational system is structured approximately as follows at the University \nlevel. After their secondary studies, the students that succeed the final exam (Baccalaureate) may enter \nUniversity. According to the course options they have taken before, they may be allowed to undertake \nscientific studies. During the first two years, they are supposed to acquire a general scientific culture. \nThey take courses in mathematics, physics, chemistry and also computer science to a limited amount. This \nis called the first cycle. Then they must specialize in one of several two-years tracks, the second cycle. \nIn our case we only consider those who specialize in computer science. The cursus follows national recommendations \nand covers the fundamental issues of our discipline: aspects of theoretical computer science, algorithmics \nand programming, operating systems and networking, data bases, compiler construction, advanced programming, \ngraphics, etc. After the second cycle, some students leave the university to start their professional \ncareer. Others pursue their studies by a third cycle. There are two main forms of third cycle. The first \none starts with a DEA (Dipliime d Etudes Approfondies) and the normal outcome is a PhD and a research \nor teaching career. The second one is a DESS (Diplbme d Etudes Suptrieures Sp&#38;ialids) normally leading \nimmediately to an industrial career. There is no significant difference in the level of students choosing \none way or the other. It s rather a matter of their personal decision to go towards an academic or industrial \ncareer. Of course this is the theoretical scheme, but in practice a limited number of students with a \nDESS change their mind and may finish up doing research and teaching while some others students, with \na DEA, may finally go towards industry. The DEA year is more theoretically oriented whilst the DESS is \nmore practically oriented. Both these third cycle programs are called Bac+S because they deliver a diploma \nlevel corresponding to five years after the Baccalaureate. They roughly correspond to a Master program \nlevel. There is much more freedom in deciding a third cycle program than a second cycle and each University \noffers one or more specialized Bac+S cursus [Jacquot90]. In the autumn 1988, we had the opportunity to \nstart a DESS program at the University of Names. There was, at that time, no other third cycle cursus \nin computer science in this University. With the help of the University of Names president and of the \ngovernment experts, we decided to launch a program on software engineering. After consulting many industry \npeople, we came to the conclusion that time had come to build a program entirely based on object- oriented \nprogramming. It was not a surprise to us that precursor experts like Adele Goldberg or Bertrand Meyer \nwere enthusiastic about this idea. We were much more impressed by the positive response we got from a \nlot of more classical European software industry leaders that were already at that time starting to be \nworried about the possible lack in the future of object-oriented programming language specialists. We \nare now preparing our fourth year of this DESS de Genie Informatique @GIN). The demand of students to \nenter the program is increasing and allows us each year to perform a better selection of personal profiles \n(more than 300 demands for 24 available slots). More important, this is a good time to take a look back \nto the first three years of functioning and to stress the positive achievements as well as the yet to \nbe improved aspects of the curriculum. 2. Teaching context and program The course is taken by 24 students \nper year. Approximately half of them come from our local secondary cycle. Among the students coming from \nother places, some are students from other French or European universities and some are people with a \nprevious professional experience. Tools put at the entire disposal of students are globally adequate. \nThey have one workstation for two students, full-time. These workstations are either Sun or IBM RS/6000 \ncomputers. All of these are integrated in a single network. The same tools are available on all machines. \nTo produce documentation, students choose between Latex and FrameMaker. For each part of the teaching, \na set of tools is first introduced. After having presented the basic principles of the area, an assignment \nis given to them that they should work out in a limited time. The teaching period starts at mid-September \nand lasts till the end of march. This is followed by a practical project in a company or in a research \ncenter till the end of august. During this last period, the students apply their know-how on object-oriented \ntechnology. As a consequence, we have only six months to give them the basic knowledge and the practical \nexperience that will make them fully operational. This challenge is very difficult and we are obliged \nto manage very carefully the time they are going to spent on the various aspects of the cursus. The cursus \nis composed of several modules briefly described hereafter, together with the number of associated teaching \nhours: Ml : Prerequisites (54 h.) The idea here is to guarantee that students have a good understanding \nand mastering of the basic classical software tools, before engaging in more specialized teaching. This \npart of the program comes quickly at the beginning of the year and lasts less than two weeks. It covers \nmatters such as: advanced Unix, Lisp, Ada, Postscript and Latex, etc. This module is not really part \nof the program hard core in the sense that if all students had a sufficient previous knowledge and practice \nin these matters, we could remove it. However, as an introduction, we use this part to illustrate some \nof the limitations of traditional software engineering technology. M2 : Object model: general presentation \n(132 h.) This module is essential to the cursus. We first introduce all basic concepts of object-oriented \nprogramming [MasiniXgl and then the four basic programming tools that will be used throughout the year: \nSmalltalk- [Goldberg831, Eiffel [Meyer88], CLOS [Steele901 and C++ IEllis901. Practical training with \nthese tools is done by the realization of an assignment. A comparative bibliographical work helps the \nstudents to evaluate other alternatives by a paper study of other languages such as Beta, Self, etc. \nThis module ends by a study of implementation techniques for object-oriented languages. For each language \ntrack, the students are presented with a set of small exercises, followed by a more significant assignment. \nThey recognize by themselves that they are able to solve, in a limited amount of time, problems of larger \nscale than they were able to solve before with traditional technology. This personal discovery is a strong \nincentive to dig further in the specificities of object modeling. M3 : Specification, design and object \nmodel (66 h.) By obligation this part of the teaching is very evolutive and changes every year. This \nis because the industrial state of the art (and even the research state of the art) is not yet stabilized. \nAfter the classical notions of software lifecycle, traditional methods are presented (SADT, JSD [Jackson83], \netc.). A development scheme based on three object models is then described (analysis, design an implementation \nmodels). This helps to compare traditional and object-oriented lifecycles and to introduce more recent \nproposals such as Hood [Laigl], Booth [Booch83], CSP [Hoare85], CRC &#38;Vi&#38;-Brcckgl], Objectory \n[Jacobson86], OOA [CoadBl], Object-Z [Dukegl], etc. The present trend consists in using an OMT-like [RumbaughS)l] \nmultiform analysis and design model and enriching it with other mechanisms and ideas. In this scheme, \nthree orthogonal planes allow to express the statical architecture of the system (objects, attributes \nand relations), the communication interactions between objects (type of communication, nature of exchanged \nitems) and the dynamic behavior of individual objects (e.g. state transition diagrams, petri nets, etc.). \nMost known formalisms may be situated in one of the three planes. DFD diagrams for example pertains to \nthe communication plane whereas entity-relation diagrams fall in the structure plane. Some (e.g. CSP, \nCCS, etc.) may be viewed as linking two planes together. Using such a three planes framework has many \nadvantages. It is general. It allows to integrate old ideas that have proven to be useful with innovative \nproposals. It is evolutive and this is probably what we need most presently. One of the difficulty we \nhave in this module is finding adapted and available teaching tools. We are presently evaluating the \nCONCERTO CASE tool [Andre921 for this purpose. Another complementary aspect of that module concerns algebraic \nspecification of abstract data types. As a matter of fact, it seems difficult to deal with object modelling \ntechniques without introducing foundations of abstract data types. Tools like Reve [Jouhannaud86] and \nAsspegique [Choppy881 are used to illustrate this aspect. In order to specify part of the Eiffel class \nlibrary, students have used Reve to prove some good properties of these classes. M4 : Concurrency and \nobject model (66 h.) The objective here is to place the concurrency expression problem within the federative \nframework of object modelling. At the beginning of the year, students have a basic knowledge of classical \nconcurrency and synchronization mechanisms. After the DESS they view all these mechanisms as variants \nof object-oriented concurrency schemes, from classical to more advanced proposals such as actors [Agha86]. \nThis part of the cursus is illustrated by practical assignments with the languages Pool [America901 and \nConcurrent Eiffel [Caromel90]. The actor model is then illustrated with the help of the Actalk platform \n[Briot89]. In a subsequent assignment, students are invited to choose an original concurrent formalism \nand to build an operational environment for it on top of Actalk. In the past year, the suggestion was \nto use event-based formalisms. The pedagogical effectiveness of the Actalk framework, compared with more \nclassical environments (e.g. [BustardgO]), has been particularly appreciated. The links with dataflow \nprogramming or with reactive languages for real- time programming (e.g. moux901) may be for example easily \ninvestigated. Another part of this module concerns object-oriented operating systems. The way we deal \nwith this is to give access to the research prototype Guide [Krakowiak90], and to present the differences \nbetween this system and other state of the art proposals. Bibliographical assignments suggest students \nto compare different research projects (SOS, Choices, Gothic, etc.) and general frameworks like OMG proposals. \nTo end this module, a study of concurrent simulation techniques is presented (pessimistic like Chandy-Misra \nand optimistic like Time Warp methods [Jefferson85]). Here again this is introduced as a natural extension \nof concurrent object-oriented schemes. M5 : Data bases and the object model (66 h.) A first assignment \ndeals with persistence in object environments. Students are asked to transform one of their work into \na persistent application by using the BOSS Smalltalk subsystem (Binary Object Software Support). This \nfirst experiment generalizes itself to the presentation and practice of a genuine object-oriented database \nsystem. For the time being our choice has been to use the 02 environment [Bancilhon89] and a test application \nis being built with it. Other notions of multimedia, deductive and distributed database systems are also \npresented. M6 : Graphics, user interfaces and the object model (66 h.) The objective, in this module, \nis to investigate the benefits of using an object architecture when building graphics and/or interactive \nsystems. We show how these ideas are increasingly accepted (from GKS to PHIGS, OSF/Motif, etc.). Several \nmodels of interactive architecture are studied @ AC, MVC, etc.). The MST scheme serves as a general framework \nto build most of the interactive applications. An opening on interface generator systems is given by \nthe practice of Interface Builder [Hullot86]. Also some notions of visual languages (e.g. Fabrik) as \nwell as of formal specification techniques for interactive systems are presented. M7 : Industrial project \n(72 h.) A more consequent assignment is given to groups of four to six students by people not belonging \nto the teaching staff. They go through all the steps of the software life cycle, starting with a negotiation \nwith the ordering customer. They must deliver on time an operational prototype, i.e. by the end of march. \nThey have no constraint on the kind of tools they may use to carry on the project, but obviously they \nare supposed to apply object-oriented technology through all phases of the project. The industrial project \nis very important in the cursus because it is the place where students put object technology to real \nwork. There is for example a difference between a general presentation of reusability and a practical \nexperience of building on the work of others. M8 : Industrial and research seminars (60 h.) This is the \noccasion of offering students the possibility to have a contact with leading research and industry experts \nof the field through seminars. In the last years we have welcomed such recognized authorities as D. Bobrow, \nB. Meyer, A. Boming, H. Lieberman, P. Cointe, R. Campbell, P. America, M. Habib, M.C. Gaudel, and many \nothers. 3. Global analysis of the cursus The idea of centering a whole year on object-oriented systems \nhas been reproached to us as giving too much emphasis to what still looks to some people as only a temporary \nmood. As a matter of fact, the idea was not to define a DESS on object-oriented programming, but rather \na DESS in software engineering entirely based on the object model. If we observe many such software engineering \nadvanced cursus that have been launched some years ago, they are often based on the ADA language [Olivier90]. \nWith three years of experience behind us, we have got the strong conviction that the direction we have \ntaken is the good one and that it brings up a lot of pedagogical advantages. The essential constraint \nwe have is pedagogical efficiency. Effective teaching last only six months excluding the industrial period. \nThe total amount of knowledge to assimilate during this period is important. It is thus necessary to \nexclude from our teaching all useless or non essential aspects. The simple idea of factorizing in Module \nM2 all basic notions of objects, classes, instantiation, inheritance, etc. in all their forms and with \nthe associated programming practices, allow us later to present the concurrency, analysis and design \nmethods, DBMS and user interface architecture in a much more efficient manner. These conceptual savings \ncome from the object concept itself, genuine synergy vector between different application fields. I interfaces \nJ The concept of object appears thus for what it is really: not a new original idea, but a federative \nformalism allowing to integrate most innovative ideas that have emerged within the last fifteen years \nin computer science. Building a cursus along these lines permits to present, in a uniform framework, \ntechnological advances as soon as they are recognized. This helps us to constantly update our teaching \nbetween research state of the art and advanced industrial practices. Moreover, object-oriented programming \nfacilitates reusability and allows to improve the practical assignments from one year to the other. It \nis frequent to see one group of students using a set of components that have been developed by their \nprevious year colleagues. 4. Conclusions Software engineering teaching is progressing towards maturity. \nA basic knowledge framework is being established [McDermid91]. A DESS program is supposed to transfer \na high level know-how more than a theoretical knowledge. What we have observed is that, after a first \nperiod of practical training with the basic tools, student ask for more conceptual and theoretical knowledge. \nThis parallels with a noticeable evolution in present industrial needs. We do believe that an object \nframework facilitates a smooth evolution from pragmatic to more conceptual professional practices. In \nother words, we think that object technology has the intrinsic property of evolutivity and that it may \nhelp people to continuously move towards more abstraction and thus towards more quality in the software \nproduction process. We had a concern when starting the program. Was it reasonable to ask students to \nsimultaneously become skilled experts in four different object-oriented languages (Smalltalk, Eiffel, \nCLOS, C++) in such a short amount of time? How would they learn reasonably well these languages in less \nthan three months without mixing syntax and semantics of these tools? How would they differentiate the \noperational knowledge of four different libraries of classes? At this point we can say that this has \nnot been a problem and that they rapidly recognize the positive aspects of each language and environment. \nOf course the essential effort is to master the complexity of the various libraries but the approach \nof tackling several ones in parallel seems more an advantage than a drawback. The objective of our program \nis many fold. Firstly the students should be, at the end of the year, practical experts in the various \nfields of object technology. Secondly we must prepare our graduates for a life of learning in a highly \ndynamic field, i.e. we must help them to learn to forget what they learnt. These goals are somewhat contradictory. \nTo be immediately efficient in today s technology, you must trust without question the few design principles \nthat are presently deemed true. To be prepared to evolve, you must constantly take a critical view of \nthe current state of the art in object technology. For example, nobody knows for sure whether class/inheritance \nlanguages will still be tomorrow s dominant tools. At the same time we cannot honestly take the bet that \nprototype-based languages will emerge as an industry standard in the next decade. Using Self as the basic \nmodeling and programming tool would for example be intellectually pleasant but practically highly dangerous. \nFortunately we have at our disposal a good intellectual help to ensure the balance between these short-term \nand long-term objectives. It consists in providing the students with the material contained in OOPSLA, \nECOOP, TOOLS and other conference proceedings. Guided and critical reading of this literature has been \nfound to be an excellent pedagogical exercise. A six months course does not allow however to investigate \nthe complete field of object technology. We have been obliged to focus on software engineering and to \ncut off most aspects related to artificial intelligence and knowledge representation. A limited presentation \nof object-oriented logic programming gives only some necessary opening. In the future, it could be a \ngood idea to offer some course option on these topics, in the same spirit than the software engineering \nmodules. Our basic claim is that we are not offering a program in object-oriented programming, but rather \na program in advanced software engineering that uses object-oriented technology. This distinction is \nimportant to us. It means for example that such a program would survive when object technology will be \nintegrated from the start in the computer science curriculum. Hopefully it will not only survive but \nevolve towards new topics and new techniques. Object technology has proven to be a major step forward \nin software industry. Three years of practice with this DESS program have convinced us that object modeling \nconstitutes a corresponding breakthrough in educational technology, by its potential capacity to integrate, \nin a uniform framework, all advanced aspects of computer science, from theory to applications. 5. Acknowledgements \nTo take a classical expression in the University environment, we thank all that had the possibility to \nobstruct this project and that did not use this possibility more than they did. More constructively and \npositively we are grateful to the the direction of the University of Names, to the government experts \nand to the numerous industry leaders that gave detailed advice and support, to the colleagues both from \ninside our University and from outside that helped us by presenting courses and seminars, to Her&#38; \nPinvidic system manager and Christine Brunet the DESS secretary. Special thanks go also to Bjom Freeman-Benson \nwho assisted us in the launching of this project by his suggestions and support. More than all, we thank \nall the students for their hard work and enthusiasm in this cursus. 6. Bibliography. [Agha86] Agha, \nG.A. Actors : A Model of Concurrent Computation in Distributed Systems. The MIT Press, (1986), 144 p. \n[America901 America, P. A Parallel Object- Oriented Language with Inheritance and Subtyping. Proc. ECOOPJOOPSLA \n90, Ottawa, Canada, (October 1990), pp.161-168 [Andre921 Andre, E. &#38; al. Concerto: un Atelier Logiciel \npour les Applications Techniques, Sema Group, 16, rue Barb&#38;s, 92126 Montrouge France (1992) [Bancilhon89] \nBancilhon, F. Object-Oriented Database Systems, TOOLS 89 Tutorial, (November 1989) [Booch83] Booth, G., \nObject Oriented Design with Applications, The Benjamin/Cummings Publishing Co., (1991), 580 p. [Bustard90] \nBustard, D. An Experience of Teaching Concurrency: Looking Back, Looking Forward, SEI Conference 1990, \nPittsburgh, Springer Verlag Lecture Notes in Computer Science N. 423, (April 1990) pp.123-133 [Briot89] \nBriot, J.P. Actalk : A Testbed for Classifying and Designing Actor Languages in the Smalltalk- Environment. \nProc. ECOOP 89, (June 1989) [Caromel90] Caromel, D. Concurrency : An Object-Oriented Approach, Proc. \nTOOLS 90, Paris, (1990), pp.183-198 [Choppy881 Choppy, C. ASSPEGIQ E User s Manual. LRI, Universite de \nParis Sud, Technical Report Greco de Programmation, 8-88. [Coad91] Coad, P., &#38; Yourdon, E., Object \nOriented Analysis, Englewood Cliffs, N.J., Prentice-Hall, 1991. [Duke911 Duke, R. The Object-Z Specification \nLanguage, TOOLS 5, Santa Barbara, (1991), pp. 465483 [Ellis901 Ellis, M. &#38; Stroustrup, B. The Annotated \nC+ + Reference Manual. Addison-Wesley, (1990) [Gibbs901 Gibbs, N.E. &#38; Ardis, M.A. &#38; Habermann, \nA.N. &#38; Tomayko, J.E. The Carnegie Mellon University Master of Software Engineering Degree Program, \nSE1 Conference 1990, Pittsburgh, Springer Verlag Lecture Notes in Computer Science N. 423, (April 1990). \npp.152-154 [Goldberg831 Goldberg, A. &#38; Robson, D. Smalltalk-80: The Language and Its Implementation. \nAddison-Wesley, (1983), 714 p. moare85] Hoare, C.A.R. Communicating Sequential Processes. Prentice-Hall \nInternational series in Computer science, (1985), 256 p. [Hullot86] Hullot, J.M. SOS Interface : un g&#38;rnCrateur \nd interfaces homme-machine, JournCes AFCET sur les LOO, Bulletin Bigre, N 48, (1986), pp.69-78. [Jacobson861 \nJacobson, I. Language Support for Changeable Large Real-Time Systems. OOPSLA 86, ACM Sigplan Notices, \nV. 21, N. 11, (November 1986) [Jackson831 Jackson, M.A. System Development, Prentice Hall International, \n(1983) [JacquoBO] Jacquot, J.P. &#38; Guyard, J. &#38; Boidot, L. Modeling Teamwork in an Academic Environment. \nSEI Conference 1990, Pittsburgh, Springer Verlag Lecture Notes in Computer Science N. 423, (April 1990), \npp.llO-122 [Jefferson851 Jefferson, D.R. &#38; Sowizral, H. Fast Concurrent Simulation Using the Time \nWarp Mechanism. Proc. Co&#38; on Distributed Simulation 1985, (January 1985), San Diego, pp. 63-69. [Jouhannaud86] \nJouhannaud, J.P. &#38; Lescanne, P. La reecriture, TSI, V.5, N.6, (1986), ~~3.433-452 [Knkowiak90] Krakow&#38; \nS. &#38; al. Design and implementation of an object-oriented, strongly typed language for distributed \napplications. JOOP, (Sept./Ott. 1990), pp. 1 l-22 LKnudsen881 Knudsen, J.L. &#38; Madsen, O.L. Teaching \nOOP is more than Teaching GGP Languages. ECOOP 88, pp.21-40 [Lai91] Lai, M. Conception Orientte objet \n: Pratique de la me thode Hood, Dunod Informatique, (1991) [Lalonde85] Lalonde, W.R. &#38; Pugh, J.R. \nSpecialization, Generalization and Inheritance: Teaching Objectives Beyond Data Structures and Data Types. \nSigplan Notices, V.20, N.8, (August 1985) pieberher891 Lieberher, K. C. &#38; Riel, A. J. Contributions \nto Teaching Object- Oriented Design and Programming. OOPSLA 89, (l-6 October 1989), pp.ll-22 [McDermid91] \nMcDermid, J. A. (ed) Software Engineer s Reference Book. Computer Weekly, (1991) [Masini89] Masini, G. \n&#38; Napoli, A. &#38; Colnet, D. &#38; Leonard, D. &#38; Tombre, K. Les lungages 6 objets, InterEditions, \n(1989) IMeyer Meyer, B. Object-Oriented Software Construction, Prentice-Hall, (1988) [Olivier90] Olivier, \nD. P. &#38; Hayward, R. R. Master of Science in Software Engineering Program at National University. \nSEI Conference 1990, Pittsburgh, Springer Verlag Lecture Notes in Computer Science N.423, (April 1990), \npp.155-156 [Yonezawa87] Yonezawa, A. &#38; Tokoro, M. (eds) Object Oriented Concurrent Programming, MIT \nPress, Cambridge, MA, USA, (May 1987) ~0~x903 Roux, 0. &#38; Cassez, F. &#38; Creusot, D. &#38; Elloy, \nJ.P. Le langage re actif a.synchron,e Electre TSI, (1992) moyer9 11 Royer, J. C. La programmation par \nobjets, Course notes, DGIN, Names, (1992) lRumbaugh911 Rumbaugh, J. &#38; Blaha, M. &#38; Premerlani, \nW. &#38; Eddy, F. &#38; Lorensen, W. Object-Oriented Modeling and Design, Prentice-Hall International \nEditions, (1991), 500 p. [Steele901 Steele, G.L. Jr. Common Lisp, The Language, Digital Press, second \nprinting, (1990) [Wirf-Brock901 WirfBrock, R. &#38; Wilkerson, B. &#38; Wiener, L. Designing Object-Oriented \nSoftware, Prentice-Hall, (1990), 341 p.  Contact information: Jean BQivin Olivier Roux Jean-Claude \nRoyer Universite de Names Faculte des Sciences 2 rue de la Houssiniere 44072 Nantes cedex 03 France tel. \n(33) 40 37 30 59 fax. (33) 40 37 30 56 bezivin@unantes.univ-nantes.fr royer@unantes.univ-nantes.fr roux@fanOl \n.ensm-nantes.fr   \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Jean B&#233;zivin", "author_profile_id": "81100043027", "affiliation": "", "person_id": "PP14026878", "email_address": "", "orcid_id": ""}, {"name": "Olivier Roux", "author_profile_id": "81366590618", "affiliation": "", "person_id": "PP77045248", "email_address": "", "orcid_id": ""}, {"name": "Jean-Claude Royer", "author_profile_id": "81100582316", "affiliation": "", "person_id": "PP31092570", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157829", "year": "1992", "article_id": "157829", "conference": "OOPSLA", "title": "Teaching object-oriented programming or using the object model to teach software engineering", "url": "http://dl.acm.org/citation.cfm?id=157829"}