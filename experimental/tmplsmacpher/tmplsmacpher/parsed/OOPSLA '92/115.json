{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - 10 October 1992 Proceedings Educators \nSymposium- Object-Orientation and Ada: the Expected Impact of Ada9X on a Computer Science / Software \nEngineering Degree Report by: Douglas D. Grant Swinburne University of Technology Abstract This presentation \ndiscusses the evolution of the curriculum in object-oriented methods in the main undergraduate degree \nin the Department of Computer Science at Swinburne University of Technology in Melbourne, Australia. \nThe degree has a strong Software Engineering emphasis, and object- oriented analysis and design methods \nare complemented by a programming curriculum which uses Ada. The forthcoming Ada9X will have a substantial \nimpact on the curriculum. 1. Introduction My department is committed to the precept that our graduates \nshould leave us with a vision of the future. We want them to be in a position to influence future trends. \nObject-oriented methods are not just a passing fad. There is widespread agreement, with which we concur, \nthat object-orientation will make it to the mainstream. Therefore it is essential that our graduates \nleave us with a good appreciation of object-oriented methods. On the other hand, many of our graduates \nwill find employment where they have to use the structured approaches of the past. It follows that we \ncannot abandon those methods and techniques which have to this date formed a central part of our curriculum. \nAccordingly the approach to object-orientation in all the programs offered by my department has been \nevolutionary. This presentation describes the way in which object- orientation plays a role in our undergraduate \nComputer Science and Software Engineering degree, and summarizes what we see as the way forward. We pay \nparticular attention to the impact of object- orientation on the programming curriculum. 2. Goals of \nthe CSSE Degree The Computer Science and Software Engineering degree at Swinbume is one of the few degrees \nin Australia with a Software Engineering emphasis. It is described in some detail in [3], although recent \ncurriculum evolution is not mentioned there. The impetus for our commitment to the large-scale Software \nEngineering thrust of the degree comes from our acceptance of a comment of Colin Tully at ICSE 13 in \n1991 [lo] which carried the sentiment we need to graduate 9 times as many software engineers as computer \nscientists, and from our guess that most Australian software development groups operate at best at Level \n1 on the SE1 Maturity Model (see [5]). We figure that the warnings boldly stated in Yourdon s Decline \nand Fall of the American Programmer [ 131 apply equally to our local situation. When our degree was designed \nin 1989, there seemed to be no sensible alternative to the choice of Ada as the first and main programming \nlanguage of the degree. Although we might find more cause to debate the choice of Ada in 1992, we have \nbeen particularly satisfied with the way in which Ada has supported the philosophy of the degree, and \noffered our students excellent team project opportunities (as outlined in [3]). Our department has developed \nstrong links with the local Ada community, and our graduates have a clear advantage for employment opportunities \nin this community at a time when graduate employment rates in computing are lower than ever. Accordingly, \nwe have an on-going commitment to the use of Ada in our degree. 3. Current Programming Curriculum Australian \nundergraduate degrees span three years. In our degree, the full power of Ada, including an extensive \nuse of tasking mechanisms and real-time facilities, is presented to our students over a four course sequence. \nWe believe that our students should also gain C expertise, to maximize their employment opportunities. \nWe assist our students to undertake self-directed study of C starting from their Ada knowledge between \ntheir first and second years, and run an extensive workshop on C in the first week of second year. Several \nprogramming assignments in second year, whose primary goal is not language related, are expected to be \ncompleted in C. In final year, our students study Eiffel [7] as an example of a pure object-oriented \nlanguage. Students also have the option to study functional and logic programming, and even to undertake \na COBOL class! 4. Place of Object-Orientation in the Curriculum Object-orientation already has a major \nrole in the curriculum. Right from the beginning, the approach to Ada involves an emphasis on data abstraction, \nwith an implicit object-based inclination being presented. In a second year analysis/design course, the \nemphasis has evolved over the last two years from a purely structured approach to one that introduces \nobject- oriented methods and contrasts them with structured methods. We use the OOSD notation of Wasserman \net al [ 111 to depict object-oriented designs, and our students learn to use the Software Through Pictures \nCase tool. In third year, our students study mechanisms for mapping object-oriented designs into Ada \nprograms, using ideas delineated in recent articles in Ada Letters [4,8]. They then put their OOA/OOD \nand Ada programming knowledge to good use on a large scale team project, as described in [3], based on \nthe development of a distributed real-time system. Finally, after battling with the annoyances of mapping \nan 00 Design into an object-based programming language (and often regressing to bad old structured habits!), \nour students, as mentioned above, taste the heaven of object-oriented purity by taking a class on object-oriented \nsoftware development using Eiffel. 5. Projected Impact of Object-Orientation on Introductory Programming \nObject-orientation already influences our introductory programming approach. As indicated in Section \n4, ideas of data abstraction lie at the heart of our Ada programming curriculum. Our commitment to Ada \nis strong. For reasons listed in Section 2 we are committed to continuing with Ada as the main programming \nlanguage in the degree. However our commitment to object-orientation as one of the Software Engineering \nsolutions is also strong [133. There is no doubt from our experience that the Ada route to object-orientation \nis less than ideal. Should we seek to begin with Eiffel, or some other 00 language, and then transition \nto Ada, or is there another way open to us? In fact, the object-oriented compromise that will be Ada9X \n[ 1,2] offers another way. Effectively Ada9X will support object-oriented programming with single inheritance, \nalthough with minimal language support compared with Eiffel and C++, and using common 00 terms in a non-standard \nway. 9X will offer an extension to Ada derived types using a type extension mechanism inspired in part \nby that of Oberon [12]. Effects of multiple inheritance can be obtained using a variety of well- delineated \nmethods [91, so that the mapping of 00 designs into Ada9X will be considerably more straightforward than \nthe corresponding mappings into Ada83. In 1993 we propose to introduce our final year students to the \n00 facilities of Ada9X, but it will be at least 1994 before a compiler is available to enable us to engage \nthe students in actual realisation of 00 designs in executable Ada9X programs. It is our expectation \nto progressively introduce 9X features (both 00 and non-00) into the programming curriculum. In our four \ncourse Ada programming sequence, 00 9X features will certainly infiltrate the last two courses. The contentious \nissue is whether they should be presented in the first two such courses, which are offered in the first \nyear of the degree. We believe that programming continues to be a problem-solving activity. Whilst recent \ndevelopments such as object-orientation have brought additional dimensions to programming, it would be \nwrong to deny the importance of structured, top-down methods completely; concurrent object-oriented systems \noften still have a lot of sequential, functionally oriented algorithmic code! Our students still need \nto acquire algorithmic problem solving skills. Our experiences suggest that there is considerable value \nin retaining an algorithmic emphasis early in the programming experience, although we concede that others \n(see [6] for example) have found initial introduction of object-orientation to be successful. We are \ninclined, therefore, to introduce the 00 concepts of Ada9X cautiously, perhaps not until the second programming \ncourse. How we might alter the thrust of the first programming course to prepare for the 00 concepts \nis still unclear, but we do not anticipate great change. 6. Obstacles to Change We are committed to \nthe introduction of Ada9X. The obvious obstacles are the Ada9X language is not yet completely finalized \n(although this will occur soon) there are no Ada9X compilers available yet (although a public domain \ncompiler from New York University should be available in 1994, with commercial compilers following soon \nafter) there is a fair learning curve for staff, who in many cases have not yet gained a decent appreciation \nof 00 concepts. Countering these is the strong commitment from the department head (the present author!) \nto ensuring that the change occurs. 7. Action Plan In summary, at Swinburne: We will maintain our commitment \nto object- orientation. We will introduce Ada9X- in 1993, at final year level, from 1994, probably at \nsecond year, and possibly at first year level. We will probably be glad when object-orientation is so \nmainstream that it loses its distinctiveness. In short, we look forward to the day when OOPSLA no longer \nexists! @I Seidewitz, E., Object-Oriented 8. References Programming with Mixins in Ada, Ada ill PI 131 \n[41 El El VI Ada9X Project, Ada9X Mapping Document (Vol. I} : Mapping Rationale, Ada9X Project Report, \nInter-metrics, Inc., August 1991. Ada9X Project, Ada9X Mapping Document (Vol. II) : Mapping Specification \n(Version 4.0), Ada9X Project Report, Intermetrics, Inc., December 1991. Grant, D.D. and Smith, R., Undergraduate \nSoftware Engineering-An Innovative Degree at Swinburne, Australian Computer Journal, Vol. 34, No. 3, \n(1992), 106-l 13. Hirasuna, M., Using Inheritance and Polymorphism with Ada in Government Sponsored Contracts, \nAda Letters, Vol. XII, No. 2 (1992), 43-56. Humphrey, W., Managing the Software Process, Addison-Wesley, \nReading, 1989. Lalonde, W. and Pugh, J., Smalltalk as the First Programming Language : The Carleton Experience, \nJournal of Object Oriented Programming, Vol. 3, No. 4, (1990), 60-65. Meyer, B., Object Oriented Software \nConstruction, Prentice-Hall, New York, 1988. Letters, Vol. XII, No. 2 (1991), 76-90. r91 Taft, T., Multiple \nInheritance in AdagX, Ada9X LSN -1033 (1992). [lOI Tully, C., A Failure of Management Nerve and Vision, \n13th International Conference on Software Engineering, IEEE Computer Society Press, May 1991,154-155. \n(Note : Tully s point was emphasised more in his panel presentation than in his position paper.) El11 \nWasserman, A.J., Pircher, P.A. and Muller, R.J., The Object-Oriented Structured Design Notation for Software \nDesign Representation, IEEE Computer, Vol. 23, No. 3, March 1990. WI Wirth, N., Type Extensions, ACM \nTransactions on Programming Languages and Systems, April 1988. [I31 Yourdon, E., The Decline and Fall \nof the American Programmer, Yourdon Press, 1992.  Contact information: Douglas D. Grant Department \nof Computer Science Swinburne University of Technology Hawthorn, Victoria, Australia 3122  \n\t\t\t", "proc_id": "157709", "abstract": "<p>This presentation discusses the evolution of the curriculum in object-oriented methods in the main undergraduate degree in the Department of Computer Science at Swinburne University of Technology in Melbourne, Australia. The degree has a strong Software Engineering emphasis, and object-oriented analysis and design methods are complemented by a programming curriculum which uses Ada. The forthcoming Ada9X will have a substantial impact on the curriculum.</p>", "authors": [{"name": "Douglas D. Grant", "author_profile_id": "81100081511", "affiliation": "", "person_id": "PP31079877", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157837", "year": "1992", "article_id": "157837", "conference": "OOPSLA", "title": "Object-orientation and Ada: the expected impact of Ada9X on a computer science/software engineering degree", "url": "http://dl.acm.org/citation.cfm?id=157837"}