{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - 10 October 1992 Proceedings Poster Submission- \n Object-Oriented Software Development in a Commercial Environment: The Evolution of ET++ Report by: Andreas \nBirrer Walter Bischofherger Erich Gamma Bruno Schtifer Andre Weinand Union Bank of Switzerland building \nof highly interactive applications with Abstract consistent user interfaces following the direct The \nobjective of this poster is to show the evolution manipulation principle. The ET++ class library is of \nthe application framework ET++ from a implemented in C++ and can be used on nearly a university research \nproject to a seamless platform dozen UNIX platforms under different window for commercial application \ndevelopment in a banking systems. environment. The presentation of our recent projects should stimulate \nthe interaction between the ET++ Highlights of ET++ 3.0 developers and current and future ET++ users, \n ET++ is now five years old and since its initial application framework users and developers in conception \nthe class library has been continuously general. redesigned and improved. The current version (3.0) has \nthe following new features: Introduction . The Look-and-Feel of an ET++ application can be UBILAB s software \nengineering group is currently switched at run time. Currently supported are involved in adopting object \ntechnology. During the OSF Motif and ET++ s own Look-and-Feel. last two years this group s core activity \nwas the development and refinement of ET++, a compre- The completely redesigned text building block hensive \nclass library. The work on ET++ started in now supports character and paragraph styles and 1987 at the \nUniversity of Zurich. In 1990 the its input/output format is based on the Rich developers of ET++ joined \nUBILAB. Text Format (RTF ). ET++ is a portable and homogeneous object-oriented A general filter architecture \nis embodied in a class library integrating user interface building small framework that allows easy integration \nof arbitrary input and output format converters. blocks, basic data structures, and high level Existing \nand new applications automatically application framework components. ET++ eases the S-10 October 1992 \n- 159 -Addendum to the Proceedings profit from filters by being able to exchange and import data formats \npreviously unknown to them. Example filters are RTF, Macintosh PICT, TIFF, Encapsulated PostScript (EPSF), \nand Portable Bitmap Format (PBM). The automatic printing functionality of ET++ now supports pagination \nand includes a page previewer. A centralized communication manager provides message passing among ET++ \napplications as well as between ET++ applications and ordinary Unix tools and shell scripts. A new abstraction \nwas introduced which defines an abstract protocol for working with different data sources. All ET++ applications \ncan now transparently operate on files, data bases, and embedded objects. ET++ 3.0, its tools, and documentation \nis available by anonymous FTP at iam.unibe.ch (130.92.64.10).  Sniff: A Pragmatic C++ Programming Environment \nSniff is a pragmatic C++ programming environment providing browsing, cross-referencing, design visualization, \ndocumentation, and editing support. The main goal in developing Sniff was to create an efficient and \nportable C++ programming environment which makes it possible to edit and browse large software systems \ntextually and graphically with a high degree of comfort, and without using large amounts of system resources. \nHighlights Sniff is a complete software development environment providing developers with all sensible \ninformation which can be extracted from the source code. Sniff provides all its operations in an efficient \nway. It needs about 5 MB RAM to work on a project consisting of 100,000 lines of source code and it performs \nall operations on projects of this size without degradation of responsiveness. All information provided \nby Sniff is always up- to-date. If a developer changes a source file all open tools are updated immediately. \n 9 The user interface is based on direct manipulation and provides a high degree of comfort not only \nin browsing but also in manipulating a software system. Sniff introduces an abstraction layer above \nthe file system. Once a developer has defined the structure of a project he works with classes and methods \ninstead of files and directories. Sniff helps a developer to document an object- oriented software system \nin a structured way. The resulting documentation can be accessed at any time from any tool. Sniff supports \nnot only C++ and ANSI-C but also Kernighan-Ritchie-C which is a major advantage in projects where old \nC code has to be maintained, enhanced, or integrated. Sniff does not provide a C++ compiler on its own \nfor reasons of portability, adaptability, and lack of personnel power. It delegates compilation to the \ncompiler of choice.  A Generic Desktop-Framework A desktop is a simple means to visualize and manipulate \nobjects. Up to now, the desktop- metaphor has been mainly used for visualization and manipulation of \nlow level computer objects (files, folders, applications), though it is very well suited for presenting \nand manipulating any hierarchically structured information. In a banking application typical desktop \nobjects would be banking accounts, swaps, interest rates, etc. The desktop-framework consists of about \n20 classes easing the construction of a specific desktop considerably. Some parts of the framework can \nbe reused by a lego-brick approach whereas other parts must be adapted by sub-classing. Highlights Multiple \nvisual representations for the same object in different views (e.g. small and large icons) Multiple views \non the same model (e.g. icon view and list view) Double-clicking, drag-and-drop, labels with direct editing \nChange propagation for labels and models Persistency for models and views Easy adaptable layout (e.g. \nvisual items never overlap, grid views, list views with icons, cleanup, etc.) All manipulations are undoable. \nSeveral views can be grouped together in a workspace and manipulated as a whole. OOPSLAW -160-Vancouver, \nBritish Columbia  ET++ SwapsManager The value of ET++ for the construction of applications with an advanced \nuser interface was demonstrated in various projects inside and outside UBILAB. However, an application \nthat illustrated the value of objects in the context of a banking application was still missing. To overcome \nthis deficiency, we chose the problem domain of financial engineering applications. The ET++ SwapsManager \nsupports a trader in pricing swaps and portfolios, and helps him accomplish risk-management by what-if \nanalyses. Overview A desktop component of the ET++SwapsManager integrates the different objects of swaps \nmanagement. The graphical representations of the domain objects are independent from the underlying real \ndata and can be created and deleted at will. There are four main abstractions, namely: Swap a financial \ntransaction Portfolio a collection of swaps Yield curve a set of yields for different terms to maturity \n(a major information for swaps pricing) Scenario describes possible deviations from the given yield curve \n(allows for what-if analyses by adding a scenario to a given yield curve and manipulate it directly in \na graphic editor) We tried to permit interaction with the domain objects as natural as possible. This \nmeans, that there are uniform patterns of interaction, e.g., direct manipulations such as drag-and-drop. \nThe effect of drag-and-drop operations depends on the involved objects. Semantic feedback gives the user \ncertainty, whether an operation is applicable or not. E.g., dragging a scenario object over a yield curve \nobject adds this object to the current yield curve, thus linking them. In a graphical editor it is possible \nto manipulate the linked scenario directly by shifting the curve or applying any other tool defined in \nthat environment. The resulting changes in cash flow values and therefore swap and portfolio prices are \ncalculated and displayed immediately.  Contact information: Andreas Birrer Walter Bischofberger Erich \nGamma Bruno Schtifer And&#38; Weinand Union Bank of Switzerland UBILAB (UBS Informatics Lab) Bahnhofstr. \n45, CH-8021 Ziirich, Switzerland weinand@ifi.unizh.ch S-10 October 1992 - 161- Addendum to the Proceedings \n \n\t\t\t", "proc_id": "157709", "abstract": "<p>The objective of this poster is to show the evolution of the application framework ET++ from a university research project to a seamless platform for commercial application development in a banking environment. The presentation of our recent projects should stimulate the interaction between the ET++ developers and current and future ET++ users, application framework users and developers in general.</p>", "authors": [{"name": "Andreas Birrer", "author_profile_id": "81100638114", "affiliation": "", "person_id": "P17261", "email_address": "", "orcid_id": ""}, {"name": "Walter Bischofberger", "author_profile_id": "81100495223", "affiliation": "", "person_id": "PP31044776", "email_address": "", "orcid_id": ""}, {"name": "Erich Gamma", "author_profile_id": "81100094240", "affiliation": "", "person_id": "P78640", "email_address": "", "orcid_id": ""}, {"name": "Bruno Sch&#228;ffer", "author_profile_id": "81100446542", "affiliation": "", "person_id": "P33954", "email_address": "", "orcid_id": ""}, {"name": "Andr&#233; Weinand", "author_profile_id": "81100573736", "affiliation": "", "person_id": "P16945", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157741", "year": "1992", "article_id": "157741", "conference": "OOPSLA", "title": "Object-oriented software development in a commercial environment: the evolution of ET++", "url": "http://dl.acm.org/citation.cfm?id=157741"}