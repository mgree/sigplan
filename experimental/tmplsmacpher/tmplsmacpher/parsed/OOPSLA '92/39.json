{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - 10 October 1992 Proceedings Poster Submission- \n Integration of Different System Engineering Methods Using an Object-Oriented Model Report by: Horst \nD. Clausen Anton Hofmann University of Salzburg Gabriele H. Pawlitzek German Aerospace Research Establishment \n Abstract The development of large, complex systems consisting of both hardware and software normally \ninvolves several companies and/or development teams for the development of the different subsystems forming \nthe entire system. Depending on the kind of subsystem to be developed, these different development teams \nnormally use different system engineering methodologies and/or tool sets to produce their subsystems. \nHowever, the usage of different methodologies and tools makes technical management and quality assurance \nfor the entire development effort a difficult task. Therefore the development as well as the maintenance \nof future systems with their increasing size and complexity requires a common frame for the entire system \ndevelopment and maintenance effort covering different kinds of subsystems, like graphical user interfaces, \ndatabase systems, expert systems, real- time systems, and so on. This common frame should support the \nseparate and independent development of the different subsystems by different subcontractors using different \nsystem engineering methods, the integration of these subsystems to the entire system as well as the maintenance \nof the entire system. A hierarchical object-oriented model for the encapsulation and integration of different \nsystem engineering methods can serve as this common frame, providing traceability from the system requirements \nmodel to the implemented system while giving each subsystem development team full scope in choosing the \nsystem engineering method most suitable for a specific subsystem. The approach underlying this object-oriented \nmodel is the encapsulation of the different subsystems in high-level objects, which can be either further \ndecomposed into high-level object or described in more detail using any appropriate system engineering \nmethod. The integration of these high-level objects to the entire system is supported by a definition \nobject on each layer of each system engineering model. The definition objects provide traceability between \nthe different system engineering models and the different high-level objects. Discussion The hierarchical \nobject-oriented model presented here evolved from experiences gained during quality assurance activities \nfor the development of large ground support systems for space applications at the German Aerospace Research \nEstablishment. These experiences merged with results of research activities at the University of Salzburg \nled to the S-10October 1992 - 179 Addendum to the Proceedings definition of three object-oriented models, \neach consisting of several layers of high-level objects and a corresponding definition object on each \nlayer. The requirements model, which is the starting point of our approach is generated by combining \nfunctions and data derived from the user requirements into high-level objects. The interrelationship \nof the high-level objects is handled by so-called abstraction objects using interaction tables, petri- \nnets and/or state transition diagrams. The model is organised hierarchically by decomposing high-level \nobjects into lower level high-level objects and again an abstraction object. Terminal high-level objects, \nwhich are not further decomposed can be described in more detail using a system engineering method adequate \nfor the subsystem to be developed. The integration of these terminal high-level objects is supported \nby high-level interface requirement specification templates specifying the interface description required \nto integrate a high- level object encapsulating a model generated by a certain system engineering methodology. \nEach high-level object may be either active, i.e. having its own internal behaviour, or passive, i.e. \nperforming only sequential execution of its encapsulated operations. The dynamic behaviour of an active \nhigh-level object is described using petri-nets or state transition diagrams. The architectural design \nmodel, which is the next model of our approach results from mapping the requirements model, including \nthe decision which technology and resources are used for the implementation of the different subsystems. \nThe mapping process results again in a hierarchical object-oriented model consisting of several layers \nof high-level objects* and a so-called integration object on each layer. On the one side the integration \nobjects provide high-level interface design specification templates supporting the integration of terminal \nhigh-level objects encapsulating subsystem design models generated by different system design methodologies, \non the other side the integration objects support traceability from the requirements model to the architectural \ndesign model and vice versa, by cooperating with the abstraction objects of the requirements model via \ntraceability matrices. In the detailed design model and the corresponding implementation the high-level \nobjects defined in the architectural design model are being designed in more detail and finally implemented \nin the chosen technology. The communication and synchronization between the different subsystems is done \nby encapsulating not object-oriented parts of the system in so-called pseudo objects, each providing \nan interface with attributes and services depending on the underlying implementation technology. The \npseudo objects together with the objects of the subsystems implemented in an object-oriented manner am \nmanaged and controlled by so-called configuration objects, which support distributed and concurrent processing \nand if necessary handle access control to objects. Furthermore the configuration objects support tracing \nbetween the architectural design model and the detailed design model by providing traceability matrices \ninterfacing with the integration objects of the architectural design model.  Conclusion System and \nsoftware development project are increasing in size and complexity. In addition large complex systems \noften consist of quite different kinds of subsystems, which are developed using different system engineering \nmethodologies and tool sets. Therefore a common frame for the entire system development effort integrating \ndifferent system engineering methodologies is required. A hierarchical object-oriented model, encapsulating \nthe different subsystems and the underlying system engineering methodologies in high-level objects is \na promising way for the integration of different system engineering methodologies in a generic system \ndevelopment approach. The proposed definition objects, which are, depending on the model the abstraction \nobjects, the integration objects, or the configuration objects, support the traceability between the \ndifferent models and enable the integration of high-level objects encapsulating different system engineering \nmethodologies via corresponding interface templates. Thus, the introduction of definition objects is \nan appealing method for simplifying the development and maintenance of distributed, concurrent and heterogeneous \nsystems. OOPSLA 92 -lao-Vancouver, British Columbia References Contact information: Ul [21 [41 PI El \n P. Coad, E. Yourdon. Object-Oriented Analysis. Englewood Cliffs, N.J.: Prentice Hall, 1991. T. De Marco. \nStructured Analysis and System Specification. Englewood Cliffs, N.J.: Prentice Hall, 1978. M. Flavin. \nFundamental Concepts of Information Modeling. Englewood Cliffs, N.J.: Prentice Hall, 1981. D. J. Hatley, \nI. A. Pirbhai. Strategies for Real-Time System Specification. New York, N.Y.: Dorset House, 1987. S. \nShlaer, S.J. Mellor. Object-Oriented Systems Analysis: Modeling the World in Data. Englewood Cliffs, \nNJ.: Prentice Hall, 1988. P T. Ward, S. J. Mellor. Structured Development for Real-Time Systems. Englewood \nCliffs, N.J.: Prentice Hall, 1985 Horst D. Clausen Anton Hofmann University of Salzburg Department of \nComputer Science and System Analysis Jakob-Haringer-Strasse 5 A-5020 Salzburg, Austria e-mail: clausen@cosy.sbg.ac.at \nGabriele H. Pawlitzek German Aerospace Research Establishment Software Engineering Laboratory Munnchnerstrasse \n20 D-803 1 Oberpfaffenhofen, Germany e-mail: pawlitzek@gsoc0007.rm.op.dlr,de S-10 October 1992 -181-Addendum \nto the Proceedings  \n\t\t\t", "proc_id": "157709", "abstract": "<p>The development of large, complex systems consisting of both hardware and software normally involves several companies and/or development teams for the development of the different subsystems forming the entire system. Depending on the kind of subsystem to be developed, these different development teams normally use different system engineering methodologies and/or tool sets to produce their subsystems. However, the usage of different methodologies and tools makes technical management and quality assurance for the entire development effort a difficult task. Therefore the development as well as the maintenance of future systems with their increasing size and complexity requires a common frame for the entire system development and maintenance effort covering different kinds of  subsystems, like graphical user interfaces, database systems, expert systems, real-time systems, and so on. This common frame should support the separate and independent development of the different subsystems by different subcontractors using different system engineering methods, the integration of these subsystems to the entire system as well as the maintenance of the entire system. A hierarchical object-oriented model for the encapsulation and integration of different system engineering methods can serve as this common frame, providing traceability from the system requirements model to the implemented system while giving each subsystem development team full scope in choosing the system engineering method most suitable for a specific subsystem. The approach underlying this object-oriented  model is the encapsulation of the different subsystems in &#8220;high-level objects,&#8221; which can be either further decomposed into &#8220;high-level object&#8221; or described in more detail using any appropriate system engineering method. The integration of these &#8220;high-level objects&#8221; to the entire system is supported by a &#8220;definition object&#8221; on each layer of each system engineering models and the different &#8220;high-level objects.&#8221;</p>", "authors": [{"name": "Horst D. Clausen", "author_profile_id": "81544138756", "affiliation": "", "person_id": "PP311159700", "email_address": "", "orcid_id": ""}, {"name": "Anton Hofmann", "author_profile_id": "81100043574", "affiliation": "", "person_id": "P20669", "email_address": "", "orcid_id": ""}, {"name": "Gabriele H. Pawlitzek", "author_profile_id": "81100414480", "affiliation": "", "person_id": "P93397", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157748", "year": "1992", "article_id": "157748", "conference": "OOPSLA", "title": "Integration of different system engineering methods using an object-oriented model", "url": "http://dl.acm.org/citation.cfm?id=157748"}