{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 fo the Vancouver, British Columbia, Canada 5-10 October 1992 Proceedings Educators Symposium- \nTeaching Object-Oriented Concepts to Graduate and Professional Software Developers Report by: David M. \nWest University of St. Thomas This article summarizes a discussion and presented paper Four Yards and \na Cloud of Dust: Teaching Objects to Graduate Software Developers from the 1992 OOPSLA Conference. The \nrelative immaturity of 00 approaches makes teaching them somewhat difficult. This is particularly true \nwhen your students are accomplished software professionals and graduate students. One way to tackle this \nproblem is to provide a synthetic philosophical and methodological foundation upon which discussions \nof difficult or confusing issues can be constructed. This approach is currently used in our two semester \n00 development course sequence. At the University of St. Thomas we operate the largest graduate program \nin applied software engineering in the United States. All of our students have extensive software experience \nand are concurrently employed as professional developers or managers. This makes them decidedly pragmatic, \nskeptical, vocal and articulate, openly willing to challenge the professor, immune to hype, exceptionally \nperceptive, and capable of backing up any objections to course content with technical and political experience. \nAn ideal student body. Since 1989 we have been teaching a one semester course (expanded this year to \na two semester sequence) in object-oriented software development. Multi-day technical seminars and three-hour \noverview seminars are also offered on a regular basis. 5-10October 1992  Course Background The first \nsemester provides a survey of 00 development issues and a focus on 00 programming. In addition to readings \nand classroom exercises, students are expected to complete a programming project in Smalltalk (Digitalk \ns Smalltalk/V Windows). That project is documented with a set of analysis and design models including \nCRC cards, class hierarchy graph, collaboration graph, and a sample set of diagrams as advocated by Booth, \nSchlaer, Embly or Rumbaugh. In the second semester the focus is analysis and design, multi-developer \nprojects, and databases. Students work in teams to complete a real world application using ENVY/Developer \nfor configuration management. A number of texts have been used in the course. Coad and Yourdon-Object \nOriented Analysis was very poorly received and was quickly abandoned. Wirfs- Brock, et. al.-Designing \nObject Oriented Software has been used since. Its general tone suits the perspective of the course and \nalthough students find several points ambiguously treated it seems to provide an accessible introduction \nto concepts and to the analysis process. Ivar Jacobson s Object Oriented Software Engineering will replace \nWirfs-Brock in future sessions of the first semester course. Students are also urged to acquire one or \nmore of the following: Booth s Object Oriented Design with Applications, Schlaer s and Mellor s Object \nOriented Systems Analysis and Object Lifecycles, Rumbaugh s (et. al.) Object-Oriented Systems Analysis, \nand Embley s (et. al.) Object-Oriented Modeling and Design. Three automated tools are or will be used \nin the course. Rational s ROSE, OTI s ENVY and ObjectQuest, an OOCASE tool being developed by a team \nof our graduate students. Course Content Conveying to students the essence of 00 thinking, how and why \nthe 00 approach is different from standard approaches, the impact of adopting 00 methods on the development \nprocess and environment, and pragmatic application of theory are our primary goals in this course. Accomplishment \nof these objectives begins with the establishment of a core philosophical and methodological foundation. \nThe foundation is synthetic-blending aspects of a number of competing methodologies. The initial perspective \nof the course is radical and purist. 00 methods represent a true paradigm shift, adoption of the paradigm \nrequires a radical reorientation, and Smalltalk is the only true 00 language, are assertions that typify \nthis perspective. Students are told at the outset that this extreme position will be taken and that it \nis their responsibility to keep it in check by raising issues based on their own experience. This approach \nhas consistently assured lively and substantive class discussions and careful evaluation of the various \nmethodologies discussed in the course. Metaphors are widely employed to establish a kind of common vocabulary \nfor discussing the essence of 00 development before becoming mired in technical and contentious issues. \nExamples include talking about objects as intelligent virtual computers (Alan Kay), software ICs (Brad \nCox), and musicians-in-a-band (Phillipe Kahn). The musician-in-a-band metaphor has proven to be the most \npowerful. It introduces anthropomorphic treatment of objects. It also supports three critical distinctions \nthat are employed as pedagogical devices for conveying the essence of 00 approaches. Canonical Form: \nGrady Booth provides the first of those distinctions with his widely known depiction of the canonical \nform of complex systems. His distinction of an is-a-kind-of (class) hierarchy from the is-a-part-of (application \nspecific aggregation of objects) is crucial. Emphasis is given to the fact that a class hierarchy is \nindependent of any given application. The class hierarchy exists as a kind of talent pool from which \nappropriate and necessary objects (musicians) can be selected to accomplish a specific task. Assembling \na talent pool and assembling a band are two different problems-problems that are reflected in 00 development. \nBooth s canonical form leads to the assertion that there are two closely related but independent aspects \nof 00 development-analysis, construction and rationalization of the class hierarchy and analysis, design, \nand construction of applications. The former activity is a do once and maintain while the latter is ongoing. \nAlthough the two activities can proceed in parallel, the ideal situation is to have a complete and robust \ndomain (enterprise) class hierarchy from which you identify a subset to produce objects for your specific \napplication. Domain and Implementation Hierarchies: A slight variation on the musician metaphor introduces \nthe second major distinction. Instead of musicians we talk of actors. The class hierarchy is now a kind \nof central casting-a source of actors. Every given application defines a set of roles that must be filled. \nThere are also two categories of role, domain and supporting, those that exist to represent things in \na domain and those that exist to build computer simulations of that domain. A domain hierarchy (frequently \ncalled an enterprise hierarchy) might include tellers, loans, checks, ledgers, ATM machines, planes, \npassengers, tickets, baggage, agents, manifests, etc. A hierarchy of classes that are necessary to simulate \nthe behavior or fill the responsibilities of domain objects on a computer might require the use of Bags, \nWindows, Icons, Magnitudes, Booleans, Strings, Integers, etc. The mapping of domain objects to simulation \nobjects is an important step (too often overlooked) in 00 development. Classes and Objects: The third \ndistinction is an exaggeration of the common awareness that classes and objects are different. It is \nnecessary because all too often the two terms are used interchangeably or in such a manner that the relationship \nbetween them is blurred. Our musician-actor metaphor suggests how to think of objects when developing \napplications but not of classes when engaged in building a class hierarchy. The latter activity requires \ngreater access to and knowledge of classes than is appropriate to users of objects. Metaphorically, the \nlatter requires a personnel manager while the former requires an object surgeon. Identification of two \nmetaphorical roles for the developer to assume provides a mechanism for discussing the intimately related \nactivities of class creation and object utilization that allows the student to grasp how they are different \nand how they are related. Synthetic Development: When the preceding fundamentals are firmly established \nattention shifts to the step by step processes of 00 development. Students are encouraged to think of \ndevelopment as two related (often, though not ideally, concurrent): 1) domain (enterprise) hierarchy \ngeneration and 2) application construction. Steps to completing a domain hierarchy are: 1-A) Completing \na CRC card, responsibility driven, analysis that follows the method of Wirfs-Brock, et. al. 1-B) Organization \nof a domain class hierarchy graph where the organization is based on delegation and distribution of responsibilities-most \nemphatically not attributes (class or instance variables) nor behaviors (functional methods). 1-C) Modeling \nthe generic behavior of objects in the domain by treating each identified class as if it was a prototypical \nobject executing the identified responsibilities. This model is a collaboration graph and any of the \nERD derived class models advocated by Booth, Rumbaugh, et. al. Application construction can follow \ntwo paths, formal development (2-A) or evolutionary prototyping (2-B). Steps in the formal development \nprocess include: 2-Al) A CRC card analysis step which will involve both the borrowing of classes already \nidentified in the domain hierarchy and the positing of new classes suggested by the application problem. \n2-A2) Identification of objects that will actually perform the work required by the application. You \nwill be using the same CRC cards but will the cards will be colored rather than white to remind you that \nyou are now talking about objects not classes. This step will potentially identify new sub-classes. 2-A3) \nMap the application objects to classes that will simulate their analyzed behaviors. Define new simulation \nclasses as necessary. 2-A4) Construct models-any appropriate set from the method of your choice. 2-A5) \nUsing the models developed in the preceding step, program, test, and deliver the application. If the \ndomain hierarchy is sufficiently developed applications of almost arbitrary complexity can be evolved \nby: 2-Bl) Juxtaposing a prototyper with deep knowledge of the domain hierarchy and an end user who will \njointly prototype a production application. The domain hierarchy is treated as a read only resource and \nany specialized classes or specific instances that are created for the application exist only for that \napplication. 2-B2) Reviewing each application and its component objects (which require classes)for possible \ninclusion in the domain hierarchy. Implications: The course concludes with another lively discussion \ncentered on the implications that adoption of 00 techniques and paradigms will have for professional \nsoftware developers and for information system management. Redefinition of job skills, project management \nin an evolutionary prototyping environment, and how to enforce and reward reuse are favorite topics. \nThe most interesting aspect of these discussions is the way that students are able to see and articulate \nactual differences between 00 and standard development approaches. The sophistication of the discussion \nis an indirect but critical measure of the success of the course. In general, at the end of the course \nour students are comfortable with 00 concepts and have gained a basic competency in the Smalltalk language. \nThey are excited about the possibilities offered by 00 methods and return to their organizations as cautious \nadvocates of 00 change.  Conclusion and Lessons Learned. We have developed a course that we find satisfactory \nbut is not yet optimal. It does address the somewhat unique problems encountered when introducing object \nmethods to sophisticated procedural developers. Student reaction has been very positive with most students \nreporting that they will be able to make practical use of the material presented. A number of changes \nto the course are being implemented including an increase in the amount of class time devoted to instruction \nin Smalltalk programming. We hope to reduce the amount of time it takes students to think object-ively \ninstead of 5-10 October 1992 -259- procedurally, to refocus on object communication scripting instead \nof chasing their procedural tails through the Smalltalk environment, and to stop writing procedural Smalltalk \ncode. The course is still evolving and, just as we hope others might profit from our experience and approach, \nwe seek to benefit from the experience of others in keeping our course current, relevant and useful to \nour students.  Cited References Booth, Grady. Object Oriented Design with Applications. Redwood City, \nCA: The Benjamin/Cummings Publishing Company, Inc. 1991. Coad, Peter and Edward Yourdon. Object Oriented \nAnalysis. Englewood Cliffs, NJ: Prentice Hall. 1990. Object Oriented Design. Englewood Cliffs, NJ: Prentice \nHall. 1991. Digitalk, Inc. SmalltalklV Windows. LOS Angeles: Digitalk, Inc. Embley, David W., Barry D. \nKurtz, and Scott N. Woodfield. Object-Oriented Systems Analysis: A Model Driven Approach. Englewood Cliffs, \nNJ: Prentice Hall. 1992. Jacobson, Ivar. Object Oriented Software Engineering. New York: Addison-Wesley. \n1992. OTI. Em. Ottawa, Canada: Object Technology International Incorporated. Rational. ROSE. Santa Clara, \nCA: Rational Object- oriented Software Engineering. Rumbaugh, James, Michael Blaha, William Premerlani, \nFrederic Eddy and William Lorensen. Object-Oriented Modeling and Design. Englewood Cliffs, NJ: Prentice-Hall, \n1991. Schlaer, Sally and Stephen J. Mellor. Object-oriented Systems Analysis: Modeling the World in Data. \nEnglewood Cliffs, NJ: Prentice-Hall, 1988. Object Lifecycles: Modeling the World in States. Englewood \nCliffs, NJ: Prentice-Hall, 1992. Shafer, Dan and Dean A. Ritz. Practical Smalltalk. New York Springer-Verlag. \n1991. Wirfs-Brock, Rebecca, Brian Wilkerson and Lauren Wiener. Designing Object-Oriented Software. Englewood \nCliffs, NJ: Prentice Hall. 1990. Contact information: David M. West University of St. Thomas dmwest@stthom.as.edu \n  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "David M. West", "author_profile_id": "81414594637", "affiliation": "", "person_id": "PP15034678", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157826", "year": "1992", "article_id": "157826", "conference": "OOPSLA", "title": "Teaching object-oriented concepts to graduate and professional software developers", "url": "http://dl.acm.org/citation.cfm?id=157826"}