{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - 10 October f 992 Proceedings Workshop \nReport- Team Approaches to 00 Design Report by: Steven D. Fraser Lynn Marshall Bell-Northern Research \nLtd. Tony Bailetti Carleton University Large complex real-time systems are developed by design teams \nusing object-oriented analysis and design methodologies. This workshop focused on the processes and the \nrepresentations used to create and manipulate 00 designs. The context of the participants (AT&#38;T, \nBNR, CAI, Digitalk, Espirito Santo Data Informatica, IBM, NRC, OTI, University of Newcastle-upon-Tyne, \nand Xerox) included both pure 00 systems and systems with a large legacy of non-00 designs and code. \nEach participant contributed a paper to detail their experience with 00 design techniques and to provide \nsome background on their current system size; design tools; and design process. Presentations by the \nparticipants were limited to a brief five minute statement of position. This permitted the rest of the \nday (over seven hours!) to be spent brainstorming and organizing ideas related to team approaches to \n00 design. Workshop activities included: brainstorming: participants generated three to five ideas related \nto their thoughts and experiences on team approaches to 00 design presentation: all ideas were presented \nin sequence to the participants 9 categorisation and category naming: the brainstormed ideas were grouped \ntogether into categories of similarity category prioritization: the workshop evaluated the categories \nand proceeded to rank them in the order required to achieve the biggest advance in a six month research \nwindow (Figure 1) . success measures: metrics to evaluate success were brainstormed. The output of the \nworkshop consisted of ten categories of ideas related to team approaches to object-oriented design and \na priority ranking (Figure 1). Each category is listed alphabetically (Category x: . . . ) with its constituent \nset of ideas (in italics). Comments, both serious and off-the-wall, annotate each idea. The category \nwith the greatest assumed impact is at the top of the figure. Prioritization was determined by inferences \ndrawn from group responses to the question: In the context of 00 Team Design (in the short term): is \n{category IJ more likely to have impact than {category 2J? A brief description of the process used to \nfacilitate the workshop, based on the Interpretive Structural Modeling methodology developed by Warfield \nwarfield761, follows in the Appendix. Overall this summary represents work-in-progress rather than a \nfinal report. Workshop participants agreed to remain in touch by E-mail to follow-up on the initial interest \ngenerated in Vancouver. T**m Dynamks C I Awarm*sdPromotbn Training (Technical) Prows9 Mwugement t c \nTmlnl jo ) Figure 1. First-cut prioritization of concept categories. Concept Categories Category 1: \nAwareness/Promotion: Clearly identify the real objective (it s NOT just to be object-oriented ). Can \nyou use existing evaluation criteria to judge? Use business criteria (business driven and not technology \ndriven). Is solution a real objective? This is very true, we get hung up on the object- oriented words. \n Get rid of the sliver bullet mentality Yes very much so, but we will need many bullets of some type. \nBuy-in of technical members of the team for trying 00 techniques Learn from their experience? Expand \nmanagement awareness and participation How do we get them to attend? Awareness of what? OOPSLA 92 They \nneed to get back in touch with what goes on in the trenches. Rearrange the process-make management team \nplayers. Technical brief idea: One page with picture, key concept written for high level managers. Produce \na relevant working example Example of What? Do agree we need examples. Show significant improvement \n(versus standard process) on 00 projects. How? Find a metric, standard process, may win sometimes. Demonstrate \na real project versus standard paper. Takes time to get results. Motherhood. Get a selection of successeslfailures \nusing 00 techniques outside your own organization. Provide specialized Awareness training in current \n00 design methodologies for senior executives (decision makers). Maybe they could spend some time just \nobserving how 00 development works on a day-to-day basis. Need specialized training to rock ideas. Bored \nwith day-to-day activities. This is definitely needed and can be effective. Change the organization-make \nsenior executives team players. Senior executives aren t interested in details of technology. Bridge \nthe existing process with an 00 Flavor process. Only if there is a demonstrable benefit. If people are \nprepared to bridge-show them the benefits, Can t be perceived as dollars = sideways step by management. \nCategory 2: Communications: Use standard design notation to facilitate understanding and enable design \nreuse. What is standard? What do you do with outdated standards? A standard isn t a standard until it \ngets used at least twice! It is too early to standardize. NO, need concept understanding over standardization \nof notation! Need common representation of concept but this is easier than a common methodology. Vancouver, \nBritish Columbia Select a language approach that can do as a communication means. Is English included, \nor do you mean a formal language? I don t understand is this a LAN, WAN or some other technology? What \nabout visual languages? How do we represent team dynamics, team emotions? Language is insufficient! Need \na syntax, plus a text!  Category 3: Methodology: Simplified methods which support planning phases! Select \nprinciples for good 00 design. Exactly what do you mean? Knowledge of design methodologies. Multiple \nmethodologies? Same methodologies? Evaluation criteria? How detailed is the knowledge required? I m not \nsure a team really needs to know that much about others, but should know/understand fully about their \nchosen method Team knowledge, or experts on the team? Pick an 00 development methodology and train people. \nRight, let the team customize it themselves, creates better buy-in! Why? We need to understand our problems \nbefore picking a methodology or tool! No one existing methodology satisfies every requirement! Wing it! \n Adopt a methodology, either an existing one or just formalize one for use locally. Good idea! Who says \nyou have to follow a formal one as a religious experience! Achieves teamwork! Why? Something is better \nthan nothing?  Broader experience in various design methodologies. Might be confusing. Okay if selected \nsubset of available methods used? What will this information be used for? Need accurate development \nfocus! Is the language that important? Category 4: Process Management: Start collecting and analyzing \nmetrics instead of talking about them Random metrics get forgotten when the heat is on. What are metrics \nanyway? How do they fit into the process? Pick metrics that are meaningful to the organization. Establish \nincentive programs for design and reuse ( Credit of contributions to team and Debit of acquisition from \nthe team) What kind . . . cash? Is competition within a team desirable? An unjust reward system can cause \npoor morale? Don t know how to measure reuse yet!  Reuse incentive program. Should be orthogonal to \nproject management. Good: reuse is also a means to Software Engineering Training. Reuse makes sense \nin the business world. Category 5: Reuse: Adapt for the future from experience gained. How specifically \ndo we adapt? Example: Creating a database of experiences, somehow categorized for easy access. Great! \nHow should we approach this? What is your rneasure of experience? How to start? Creating, storing, retrieving, \nadapting, modifying, applying team; generated artifacts; Use of reasoning techniques. How do we share \nthe good stuff without sharing unwanted artifacts? Sometimes you don t have time to sift through all \nthat bulk. Category 6: Team Composition: Overall system architecture group, one object model, champion \ndesign reuse, 00 expertise. Not sure what it means to Champion Design Reuse. Need to spread expertise \nfrom kernel group. As long as this group isn t a bunch of bureaucrats (it must be technical). May lead \nto religious wars and end up with multiple competing groups of this kind. Seed development teams with \nsystem architects, facilitators and 00 Zealots. This is key, especially on early projects. Don t forget \nto seed middle management too.  Overall staffing and organizing is key. Why not homogenize the staff-no \ndifferent skills. Problem: development team may keep the architects, better to create an informal team. \nJoin a cross-functional team, participants from many areas of product development. Question of integration-how \ndo you get them speak the same language. Well, here we are! This sounds long-term. Not a three to six \nmonth project! Establish cross-functional teams in all development actions. Does this mean right through \nfrom functional specification to product testing/verification? What is the goal of this? What are cross-functional \nteams? Category 7: Team Dynamics Treat geographiclpolitical separation as a central problem, not a side \nissue (e-mail; shared books; video links; video conferences; anthropologist . . . ). Is it a control \nproblem or something that requires processes we are not use to. Very important for reusability. Amen; \nNeat! Regimen for technical integration. What is technical integration? Team recognition program for \nincentives to participation. What kind of software reuse? Oh Great!-reward people for not being able \nto shut up. Well, we need something to get people out of their burrows. Stress small/informal meetings \nover large formal meetings. Good on efficiency as long as shared vision. Both are effective if the meeting \nhas focus. Good idea to exchange real experience informally. Yes, cross-functional teams have only representatives, \nnot entire departments. SWAT Teams. How do you pick the right reps? Build team skills: select team members: \ntrain team members; and reward teams. Essential; Train in team building. Sometimes you don t have control \nover team selection, you need to figure out ways to deal with what you have. Bonus programs for designs, \nreuse etc. How is quality determined? An unjust reward system can cause more problems than it solves \n Team (people-human) Interaction approaches (project orientation, management, social structures). Tell \nme more! How do you get everyone to cooperate? This is the most interesting aspect to me-how? Yes!-we \nneed to involve behaviouml studies  Category 8: Tools Need tools to refine hierarchies based on usage \n(feedback from team). Is there a process for this or a methodology? Why refine if they are correct? . \n Better tools for combining the efforts of individuals. Make them or find existing ones? What kinds of \nefforts? . Design, prototype, implementation, etc.? Composite or hierarchical? Select tools to adequately \nsupport method and processes? That s the problem, isn t it?  Teach users to distinguish between classes \nand chunks of reusable code, which may be smaller or larger than a class. Good idea, methods that go \nbeyond classes in terms of encapsulation and reuse units. Why not formalize this, e.g. fragment packages? \n Technology to browse repositories of reusable code. Specially distributed repositories. No!-need generic \narchitecture (has anyone actually had success with repository browsers???). This is good (and doable \ntoday)! Apply team facilitation tools to 00 design, e.g. JAD, CSCW, etc. Before a general purpose tool \ncan exist, you need the experience of having done it manually. This may not be a short-term idea. Tools \nto span design and implementation. Auto-generation of prototype. No, tools to span (not auto-generate). \nNo, auto generation is actually slower, however, reverse-generate (code 3 design) is useful. Need to \nat least keep the two in synch. Use available tools effectively. What do you mean by effectively? Great \nwhen possible. What do you do when the tools don t go far enough . . . suffer? Adapt new tools? Get \na tool that supports teamwork. Does this mean facilitate teamwork? A team management tool? Yes, also \nthe metaphors sometimes don t really tell us how a team really uses the tool. Yes, at the point we understand \nwhat support means. A single tool is probably not good enough. Maybe there is too much emphasis on tools \n(they are an aid, but not the answer). Is this teamwork in design or implementation? Find/develop tool(s) \nfor rapid evaluation of designs. Necessary for gaining confidence that the idea works. Prototyping? Is \nthere a way we can do this without giving the impression that there is a product to sell? Whenever we \ndo this in our company, our marketing group goes out and sells prototypes! (Right On)! Evaluation of \ndesigns, how by quality? Are prototypes throw-away by definition? Or can they evolve to products? What \nare the criteria (acceptable for evaluation) for evaluating designs? We need to develop rule-of-thumb \n measurements. Agree, need tools and conventions. The tools are easy, getting the rules is the hard part! \n Tools for evolutiorr-taking the changes for one environment forward to related, but different environments. \nHow do we abstract out the parts that can be brought forward? These things are often orthogonal to project \ndomains. Great, now how do we do it? Answer is through a toolkit (some companies are doing this now)! \n Category 9: Training (Team) Train and evaluate teams and individuals in teams. As team members? With \nrespect to 00 experience? For what purpose? Team building skills? Who does this?  Training for effective \nteam behaviors for all members of the team. This assumes someone somewhere knows what is effective behavior. \nEach member has its own limitations. Category 10: Training (Technical) Training of cross-functional \nteam in simplified 00 methodology Which one? Big job! Sounds good, elaborate.  Educateltrain in ideas \nof object-orientation. Train whom? Design? Implementation? Teamwork? 00 is a different way of thinking \n(paradigm shift). Key concepts are more important than any method. Use reuse toolkit to train (very \neffective from experience). Bring in noted expert to keep momentum going. The expert must be immersed \nfor a long time for this to work. May fit your prelim to his/her solution. Needs team acceptance. Be \nclear on WHY the outside expert is being brought in-if it is to keep the momentum going-their solutions \nwon t be coming out. This is not always possible. Proposed Metrics: Measures for Success The associated \ncategory name from the previous section is given in italics. Awareness: Measured successful if not one \nmanager discusses the silver bullets (ever). % of new project using technique or % of $ going to 00 teams. \nNumber of adoptions. Increased management support for new design process. Shift in emphasis/vocabulary. \n# of people that like doing 00.  Change Maximal change represented by minimal information. Ease or speed \nof change measured reduction in development time. Communication Basic for teamwork measurable success \nif.. . single view evokes consistent interpretation. Methodology Project a success. Completeness of the \nfinal project as it meets original requirements. If it facilitates understanding of the design without \nan interpreter (from management to programmers) % of new work done in adopted methodology or in 00 technology \nin general Reuse % of a system s code taken verbatim from the reuse repository Team Composition Productivity \nTeam Dynamics Amount of re-work required People satisfaction Degree of team participation in meetings \nConflict resolution via collaboration Team identity (visible) Personality conflicts Frustration at meetings \nAmount of common ground established Easy transition of members across teams Time spent in meetings Technical \nTraining # of programmers completing curriculum Tools Ease of maintenance Improvement in productivity \n(hard to quantify) Number of users as a % of total Appendix: Workshop Facilitation Process McGoff et \nal. [McGoffPO] has documented IBM s experiences with Group Decision Support Systems (GDSS) as a tool \nto facilitate general meeting activities. It was observed that the parallel, anonymous and collaborative \ngroup communication facilitated by GDSSs effectively and efficiently addresses complex problems. The \napplication of group decision support tools to software development has been previously reported by IBM \nand Boeing lJ&#38;GoffPO, Boeing9 1, Post921 as being very successful. For example, Boeing has reported \nsavings of 9 1% in days of flowtime (development interval) and a reduction of 71% in labor hours. Groupware \nis defined cEllis l] as: computer-based systems that support groups of people engaged in a common task \n(or goal) and that provide an interface to a shared environment The workshop was facilitated by the Interpretive \nStructural Modeling (ISM) technique developed by Warfield lJVarfield761. In dealing with complex tasks, \nISM uses mathematical models to provide the type of high-level support that is currently lacking in GDSS \ntools. An important aspect of task complexity concerns the amount and degree of interaction between different \nfactors. The key limiting factor when dealing with complexity is the limitation of human short-term memory. \nGenerally, the span of immediate recall is just seven to nine chunks of information [Miller56]. Thus, \nwhen dealing with a problem that has many interaction factors, the ability to keep everything in play \nand develop the most effective solution is quickly exceeded. Structural modeling breaks complexity down \ninto manageable pieces of information and helps the human mind deal with them. This is accomplished by \nfocusing the team on the relationship between only two concepts at a time. Not only is this pair of items \ncomprehensible to the mind, it also has the powerful effect of revealing the paradigms that each individual \nholds about a particular situation. Kelly [Kelly551 discovered that a subject, limited to the consideration \nof only two or three notions at a time, would discover what Kelly called personal constructs about the \nworld. Current terminology labels these personal constructs as paradigms or mental models. The technique \nhas the unique power to reveal and coalesce assumptions which team members hold implicitly about the \nfield of endeavor they are exploring. Senge tSenge901 comments that mental models are often not recognized \nfor their importance: The problems with mental models lie not in whether they are right or wrong by definition, \nall models are simplifications. The problems with mental models arise when the models are tacit when \nthey exist below the level of awareness. Personality and private agendas can interfere with the process \nof sharing. Therefore, it is important to decouple personality from the process warfield since people \nand organizations have goals and objectives that they are unwilling to express. Or if they were expressed, \nthere would be a substantial amount of bitterness engendered, leading to confrontations, which would \nin turn lead to unreconcilable conflicts. Because individuals and organizations have invisible intent, \nany visible portrayal of intent is said to be at best incomplete and probably hypocritical. ISM (Interpretive \nStructural Methodology) has five basic phases: preparation, brainstorming, voting, model construction, \nand model interpretation. The first two phases capture the collective knowledge of a group and the last \nthree organize that knowledge in a meaningful way. In a typical ISM intervention, the preparation phase \ninvolves the formulation of a trigger question and a relational term. The trigger question focuses the \ngeneration of issues and the relational term enables the comparison of interactions. For managing the \nbrainstorming phase, the Nominal Group Technique (NGT) is used to generate as many ideas as possible. \nOnce a set of issues has been generated in the preparation and brainstorming phases, interactions between \nissues are determined in the voting phase. Computer support, based on mathematical algorithms, is used \nto record Group Activity Brief Description t I the relationships interpreted between elements, extract \na structure from the complex set and graphically model the specific relations and overall structure. \nComputer support reduces the cognitive effort of the participants. Table 1 (based on the work of Cole \nand Nast-Cole [Cole921) outlines the phases of group progression from conception to completion. The ISM \nmethodology was implemented in BNR Prolog at Bell Northern Research s Software Engineering Centre [pollard931. \nThis BNR GDSS is a flexible, fluid methodology that supports group members in selecting the most appropriate \nstrategy to deal with complexity. After a finite set of issues has been generated in the preparation \nand brainstorming phases of the meeting, the BNR GDSS poses a series of queries like: Does Concept A \n(and here a relational term is used) aggravate (for example) Issue B. Other examples of intrinsically \ntransitive contextual relations similar to aggravate [Warfield are: is included in, is less than, supports, \nimplies, and causes. , Forming Determine group s membership, focus and orientation Storming Group grapples \nwith issues of power, control, and authority the primary focus is leadership Norming Once leadership \nhas been determined, the group develops team coordination and integration (leadership and facilitation \nshifts from an individual to the group) Performing The team becomes productive, energetic and effective \nAa@urning Groups adjourn when their work is completed, they are reorganized, or their mission changes \na postmortem is useful to evaluate the successes/failures of Table 1: Group Lifecycle from conception \nto completion All team members have the opportunity to vote yes or no. The answer to each query is used \nto determine the next query. A yes vote will usually result in a connection between the two issues. As \nthe query process continues, a structural model is automatically constructed by the software. Structural \nmodeling makes no assumptions about the structure of a problem except to assume that one exists. It also \nmakes no assumptions about the importance of ideas. Structural modeling lets the problem reveal itself \nto the group and indicates the subsequent use of a more focused problem solving method. ISM facilitates \nthe thorough testing of new ideas and the structured evaluation of seemingly plausible, yet perhaps off-the-mark \nassumptions that would otherwise lead the team astray. As with any other group structuring technique, \nISM does have its limitations. One practical difficulty that has emerged from the preliminary analysis \nof post-meeting assessments is that an inverse relationship exists between the precision of group thinking \nand their sense of satisfaction with the process. Group members view modeling as hard work. This is contrasted \nwith the fun of brainstorming. As sessions become more intense, that is, more modeling oriented, the \npost-session evaluations noted a decrease in participant satisfaction. Bibliography [Allen871 Gill Allen, \nTeam techniques in system development in Datamation, Vol. 33&#38;o. 22,1987, pp. 88-92. [Boeing911 Boeing \nComputer Services- Professional Services Organization TeamFocus Group, TeamFocusTechnology Evaluation \nReport, The Boeing Company, October 1991. [Cole921 P. Cole and J. Nast-Cole, Group behavior and evolution: \nA primer on group dynamics for groupware developers in Groupware: Software for Computer- Supported Cooperative \nWork, IEEE Computer Society Press, Washington, 1992, pp. 44-57. [Ellis911 C.A. Ellis, S.J. Gibbs, and \nG.L. Rein. Groupware: Some issues and experiences in Communications of the ACM, Vol. 34, No. 1, January \n1991,pp. 38-58. [Kelly551 G.A. Kelly, The Psychology of Personal Constructs, W.W. Norton, New York, 1955 \n(2 vols.). [McGoffPO] Chris McGoff, Ann Hunt, Doug Vogel, and Jay Nunamaker, IBM s experiences with group \nsystems in Interfaces, Vol. 20, No. 6, November- December 1990, pp. 39-52. [Miller561 G.A. Miller, The \nmagical number seven, plus or minus two: Some limits on our capacity for processing information in The \nPsychological Review, Vol. 63, No. 2, 1956, pp. 81-97. [pollard93] Carol Pollard and Clifford Saunders, \nThe case for interpretive structural modeling as a technique for enhancing electronic meeting system \nsupport to appear in The Proceedings of the Twenty- Sixth Hawaii International Conference on System Sciences, \nIEEE, January 1993. IPost Brad Quinn Post, Building the business case for group support technology in \nthe Proceedings of the Twenty-Fifth Hawaii International Conference on System Sciences, IEEE Computer \nSociety, Vol. IV, 1992, pp. 3445. [SengegO] Peter M. Senge, The Fifth Discipline: The Art and Practice \nof the Learning Organization, Doubleday, New York, 1990. warfield73] John N. Warfield, Intent Structures \nin IEEE Trans. on Systems, Man, and Cybernetics, Vol. SMC-3, No. 2, March 1973, pp. 133-140. [Warfield \nJohn N. Warfield, Developing Subsystem Matrices in Structural Modeling, in IEEE Trans. on Systems Man \nand Cybernetics, Vol. SMC-4, No 1, January 1974, pp. 74-80. [Warfield J.N. Warfield, Societal Systems: \nPlanning, Policy, and Complexity, Interactive Management, New York, 1976. Contact information: Steven \nD. Fraser Lynn Marshall Bell-Northern Research Ltd. Box 35 11, Station C Ottawa, Ontario, Canada.KlY \n4H7 Voice: (613) 763-3073 Fax: (613) 763-4222 Email: sdfraser@bnr.ca Tony Bailetti Carleton University \nOttawa, Ontario, Canada.  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Steven D. Fraser", "author_profile_id": "81339499863", "affiliation": "", "person_id": "PP39071912", "email_address": "", "orcid_id": ""}, {"name": "Lynn Marshall", "author_profile_id": "81100280568", "affiliation": "", "person_id": "P174851", "email_address": "", "orcid_id": ""}, {"name": "Tony Bailetti", "author_profile_id": "81339489190", "affiliation": "", "person_id": "PP39049049", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157726", "year": "1992", "article_id": "157726", "conference": "OOPSLA", "title": "Team approaches to OO design", "url": "http://dl.acm.org/citation.cfm?id=157726"}