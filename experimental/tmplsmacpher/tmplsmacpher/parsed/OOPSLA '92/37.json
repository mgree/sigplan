{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5-10 October 1992 Proceedings Poster Submission- \n Measurement-Driven Restructuring of Report by: Nadir Yousfi Universite de Names Abstract In a class \nhierarchy, a method should have access to only as many attributes as it needs to do its job. In general \ncase, object programmers do not have regard to such an optimizing criterion. Consequent defaults are \ndisplayed and measured. In analyzing the way class attributes are used by methods, can we define alternative \nclasses, not containing more attributes than are needed? Is it possible to translate an application into \none achieving the same purpose but with attributes more efficiently spread in class hierarchy? We propose \na reversible technique for restructuring that may answers these questions. Indirectly, it provides by \nmeasurement a way for localizing attributes and restricting their use in an object system [Lieb 883, \n[Pam 863. 1. Introduction For the past year, we have been working on metrication of object systems. For \nthis, we have been studying some of their specific complexities. In this paper, we put forward one of \nthem, three metrics featuring it and a technique to reduce this complexity. 2. Measures Measures have \nbeen performed with a large sample of object applications. It outcomes some defaults and   Object Oriented \nApplications optimization lacks. That is, the whole of methods using any or a small number of attributes, \nare defined by classes having important interfaces. Applications with such components are forced to deal \nwith a larger set of features than may be required to perform the desired task. It results in applications \nthat are unnecessarily complex and inefficient. In fact, this complexity results in general cases from \nan incomplete approach of the object design which often lies on a systematic application of inheritance \nand abstraction without having regard to complexity ideas. 3. Restructuring Let s consider G, a graph \nwhose nodes are methods defined by a class C sub-hierarchy . In such a graph, two nodes are linked if \nthey use in common a same instance variable. C is a class with compact structure if G, is strongly connected. \nFurthermore, we say that class C is simple if it is compact and has a maximal cohesive level between \nits methods and instance variables. An object application with complex classes is translated into one \nwith classes having compact and simple structures. 1 Including itself. S-10 October 1992 -175-Addendum \nto the Proceedings 4. Implementation The instances of a restructured application tailor themselves dynamically \nto individual methods they are invoked with In other word, every time an object is sent a message, if \nthe instance variables the corresponding method uses are included in its subparts, this method is run \nby the receiver itself, If this is not the case, the receiver object grows and becomes a new larger object. \nThis object is initialized with the same elements as the original. It is an object mutation. The initial \nobject may then be released. From the user s point of view, the object simply grows bigger. 5. Conclusion \nThis technique may be applied to a class no matter of its hierarchical level. It takes the credit to \nbe reversible and to help programmers restructuring an architecture. While increasing modularity and \nabstraction, it promotes the idea that both instance variables and methods should be used in a restricted \nand efficient way. The law of Demeter Lieb 883 promotes that too. We have been studying possible gateways \nbetween our work and this law which encourages stable links between classes through the use of global \nvariables. Our technique lets redesign classes (even their interfaces) with the help of measurements \nwhile leaving the existing methods intact. Penalties are in terms of: the number of method abstract forms, \nthe number of classes which may increases. We claim that inside an inheritance graph, these penalties \nare the price to pay for: getting efficient inheritance links between classes, gaining in memory resources. \n9 providing more abstraction and modularity in an object system.  6. Bibliography [Fent 911 Fenton, \nN.E. Sofhvare Metrics A Rigorous approach. Chapman and Hall 1991. [Hals 771 Halstead, M.A. Elements of \nsofiware science. New York: Elsevier North-Holland 1977. [Kaeh 861 Kaehler, T. &#38; Patterson, D. A \nTaste of Smalltalk. Norton, 1986. [Lieb 881 Lieberherr, K &#38; Holland, I.M. Object Oriented Programming: \nAn Objective Sense of Style. Sigplun notices. OOPSLA 88 Proceedings, vol. 23, no. 11, pp. 323- 334, ACM, \nNovember 1988. [Lieb 891 Lieberherr, K &#38; Holland, I.M. Assuring Good Style For Object- Oriented Programs. \nIEEE Software. 1989. pp. 3848. [Leib 9 11 Leibs, D.J. &#38; Rubin, K.S. Reimplementing Model-View-Controller. \nParcPlace Systems, 1991. [Pam 861 Pamas, D. L. Clements, P. C. &#38; Weiss, D. M. Enhancing reusability \nwith information hiding. In P. Freeman, editor, Tutorial: Software Reusability, pages 83-90, IEEE Press \n1986. Contact information: Nadir Yousfi Equipe de recherche sur les sysBmes a objets. IRIN Universid \nde Names OOPSLA 92 -176-Vancouver, British Columbia  \n\t\t\t", "proc_id": "157709", "abstract": "<p>In a class hierarchy, a method should have access to only as many attributes as it needs to do its job. In general case, object programmers do not have regard to such an optimizing criterion. Consequent defaults are displayed and measured. In analyzing the way class attributes are used by methods, can we define alternative classes, not containing more attributes than are needed? Is it possible to translate an application into one achieving the same purpose but with attributes more efficiently spread in class hierarchy? We propose a reversible technique for restructuring that may answer these questions. Indirectly, it provides by measurement a way for localizing attributes and restricting their use in an object system. [Lieb 88], [Parn 86].</p>", "authors": [{"name": "Nadir Yousfi", "author_profile_id": "81332537578", "affiliation": "", "person_id": "P206570", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157746", "year": "1992", "article_id": "157746", "conference": "OOPSLA", "title": "Measurement-driven restructuring of object oriented applications", "url": "http://dl.acm.org/citation.cfm?id=157746"}