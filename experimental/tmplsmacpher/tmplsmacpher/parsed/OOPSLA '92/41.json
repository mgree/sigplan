{"article_publication_date": "12-01-1992", "fulltext": "\n 4 J Addendum A 92 to tt7e Vancouver, British Columbia, Canada 5 - IO October 1992 Proceedings Poster \nSubmission- Using Natural Language as a Metaphoric Base for 00 Report by: Ahstair Cockburn IBM Our \ngoal is to capture the simple cognitive Classification and Adjectives structures people use to build \nand manipulate their Classifying a concept into narrower concepts is done models of the world, and allow \nprogrammers to use through a membership relation, a test for them to create and manipulate program models. \nmembership in the class. In specialization, onlyNatural language is an existing, strong and intuitive \ncomponents of the base concept are tested in the metaphor to extend object oriented s metaphor of relation. \nThe amount of information needed to interacting objects. Nouns and verbs are an essential characterize \nan instance of a specialized subclass is part of any language, and in the object model, but it is less \nthan for its superclass, because the relation a poor language that contains only nouns and verbs. itself \nprovides some of the required information. We use nouns and verbs, adjectives and adverbs, Facet subclassification \nuses a test between the base grammatical rules and cases, combined in relatively concept and an introduced \nconcept, or facet. In few ways to handle an almost unlimited number of aquatic vehicle, the facet is \neither water ( does situations. Adjectives collect subsets of classes it traverse water? ) or medium \n( what medium functions, tell how to test whether an object is a does it traverse? ), in which case thefacet \nhas value, member of a class, and why one class is a subclass of water. A concept can have any number \nof facets, another, providing simple and safe multiple and because it may be tested against any number \nof dynamic inheritance and the ability to reassign concepts. A facet is introduced as soon as the objects \nto classes on the fly. Adverbs are functions relationship in the new concept becomes relevant. on properties \nof sets of functions, generalizing type-Facet subclassification increases the amount of based polymorphism \nto value-based polymorphism. information needed to characterize the object, The genitive case traverses \nnetworks of relations. because of the reference to the new concept. Participles indicate events and subclasses. \nAdjectives are a manifestation of our classifications of the An adjective (, A word used to describe \na noun or world, so we must also look at classification. limit its meaning ) produces a subset of a class \nof nouns, identifying either a pure specialization of the The closest concept to adjectives in 00 so \nfar is the class ( symmetric ellipse ) or a facet of the mixin operator of Bracha and Cook. The mixin \nclass (an aquatic vehicle). In either case the operator combines subsets of interfaces in much the adjective \nlimits the meaning of the noun and same way as do adjectives. If the defining properties describes it. \nThe description gives us the test for of classes were stored with the classes, the mixin membership, \nthe why of the subclass. 00 modelersoperator would combine them appropriately. and programmers need a \nway to identify and use the why information of a class hierarchy. At the S-10 October 1992 -187. Addendum \nto the Proceedings moment, all they have is a binary relation, (z)IS-A(y). Specialization requires a \n3-way relation, (z)is SubsetOf(y)because(x), and facet subclassification uses a 4-way relation, (z)isSubsetOf(y)because(x)withRespectTo(w). \nOnce identified, the why information must be connected with a test for membership. Class- membership \ntesting is essential in providing for safe and rich mixing of class properties. In ordinary language \nwe combine adjectives to create desired subclasses on the fly, e.g. enclosed. human powered, land and \nair vehicle (the Gossamer Condor, perhaps?). We regard it as a goal of 00 programming to be able to do \nthe same with program objects.  Roles A character assigned or assumed . . . a socially expected behavior \npattern . . . an identifier attached to an index term to show functional relationships between terms. \nWe distinguish (1) assignment of sets of properties, (2) a single, defined set of behavior, and (3) one \nend of a relationship. Part (1) corresponds to impersonation, in which one object functions as another \nfor a period of time (when a fork takes the role of a hammer). This requires the ability to ask a class \nfor its essential properties, and assign the necessary portion of the class s protocol to another object. \nPart (2) identifies a role as a portion of protocol (interactions) that applies whenever the role is \nattached to an object. Part (3) moves us to relationships and relational nouns. The role name at the \nend of a relation is an abbreviation for all interactions attached to that end of the relation. Relational \nNouns A relational noun is an adjective become noun ( employee, secretary, father ). It represents \none end of a relationship, and so begs for a connecting preposition ( employee of, secretary to, father \nof ), which may be satisfied by a genitive-case noun acting as an adjective ( her father, the President \ns secretary ). For a relational noun, the existence of the object depends upon the existence of the objects \nit relates (a pet exists only if both the animal and owner exist), and objects may share multiple such \nrelationships (a company and person may be vendor/customer as well as employer/employee). The noun comes \ninto being when objects fulfill a defmed relationship with each other (cf. facet subclassification). \nThe newly related objects pick up additional properties as defined by the adjective naming the relationship, \ni.e., they are new subclasses. Unlike the static subclasses discussed earlier, these relationships may \nbe made and broken many times within the lifetimes of the related objects. To model relationships successfully, \nour programming environment must able to detect and assign sets of properties to objects during program \nexecution, based upon characteristics of the objects state variables. Once the essential properties of \na subclass are captured in executable form, properties of an object can be tested, augmented or reduced \nin reasonable and controlled ways during execution, mirroring the way we use adjectives in everyday speech. \nIf an object has, even momentarily, the essential properties of a class, it can be used as an instance \nof that class (the complex number happens to be an integer, the fork is heavy enough to act as a hammer). \nShould the property cease to hold, the object also loses the operations of the class. New classes are \ncreated impromptu, without a system programmer having to enter them in a master class library. The issue \nis: properties are sets of functions, attached to objects via adjectives. Adjectives illustrate multiple \ninheritance, a simpler and more powerful multiple inheritance than is available today. Adverbs and Polymorphism \nPolymorphism divides a function into small, single- minded functions, relatively less error-prone, easier \nto understand and use. The system selects one of the functions as appropriate, based, today, only on \nthe class of the parameters. Natural language uses both ( answer the phone, answer the question ) or \nthe adverbs ( answer quickly ). Adverbs are computable functions operating on the characteristics of \ntheir verbs ( answer, space- efficiently, answer, time-efficiently ). To realize the capability of adverbs, \npolymorphic selection must be generalized to select based on values (computable functions), not just \nclass names.  Other Constructs The genitive is used to traverse networks of relationships, not just \npart- of : the bus driver s wife s coat s collar (all one word in German). Programming languages are \ngood at traversing networks of relationships in one direction (e.g., f(g(x))). Once the modeler defines \na relationship, however, the programmer should be able to traverse that relationship in both directions \nwithout having to write extra code. The past participle ( shipped product, aborted transaction ) is \nan indicator of changed state, and can be used to define a trigger process dependent on that change or \na new subclass with that property. The collective noun ( jury, senate ) identifies enumerated classes \nand OOPSLAW -US-Vancouver, British Columbia subclasses, extending the notion of class and subclass to \nall kinds of collections. Our use of adjectives and adverbs is still more sophisticated than described \nhere. The future involves capturing more sophisticated classification schemes and other cognitive mechanisms \n(e.g., metonymy : generalization from an example to an entire class) to form a true computational rhetoric. \nFull text available in IBM Technical Report TR.36-0002: Cockburn, A., Using natural language as a metaphoric \nbase for object-oriented modeling and programming.  Contact information: Alistair Cockburn IBM 150 \nKettletown Rd. Southbury CT 06488. E-mail: alistair@vnet.ibm.com. S-10 October 1992 -189-Addendum to \nthe Proceedings  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Alistair Cockburn", "author_profile_id": "81100607756", "affiliation": "", "person_id": "PP31072783", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157750", "year": "1992", "article_id": "157750", "conference": "OOPSLA", "title": "Using natural language as a metaphoric base for OO", "url": "http://dl.acm.org/citation.cfm?id=157750"}