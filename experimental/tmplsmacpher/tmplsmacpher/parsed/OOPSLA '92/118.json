{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5-10 October 1992 Proceedings Educators Symposium \nPanel- How might the object-oriented paradigm change the way we teach introductory programming? Report \nby: Mary Beth Rosson, Moderator  Panelists: Douglas Grant, Swinburne University of Technology Stuart \nHirshfield, Hamilton College Martine Osborne, Western Washington University The panel was designed to \nelicit discussion directed at ongoing or projected changes to Computer Science curricula brought on by \nthe emergence of object- oriented paradigm. Each panelist was asked to describe how introductory programming \nis currently being taught in their departments, what changes they would like to see if any, what obstacles \nthey see, and what action plan their departments have in place for evolving their curricula. Doug Grant \ndescribed a curriculum that is heavily committed to the ADA language. This language was chosen as a good \nvehicle for meeting their educational goal of producing quality computer science practitioners rather \nthan researchers, with the implication that the curriculum needed to focus on large-scale programming \nprojects, and on software engineering issues. He argues that despite the apparent industry demand for \nstudents familiar with C and C++, these need not be the languages of choice for early computer science \ncourses. Rather, the early courses should be used to set up the rest of the curriculum, and specific \nlanguages like C++ can be taught as separate language topics. In addition to the curriculum-wide use \nof ADA, their department also teaches object-oriented programming using Eiffel with great success. Grant \nfeels that the current curriculum is successful, enabling students in their final year to work on large \nprojects (teams of 15-20) in ADA backed by object- oriented analysis and design. The major change planned \nis a transition to the new more object- oriented version of ADA when it becomes available. In general, \nhe feels that object- oriented technology is just one of many paradigms relevant to software engineering, \nand sees no need to highlight it in an initial course. Stuart Hirshfield recounted a transition the Hamilton \nCollege computer science curriculum has recently gone through. In the past, they have taught a fairly \ntraditional CS 1 and CS2 program, using Pascal, but with a strong emphasis on laboratory sessions, on \nhands-on experience with programming environments, debuggers, and so on. However, the educators felt \nthat there was an inherent tension between the good design practices that they were preaching, and the \nlow-level programming tasks that they were asking students to carry out. They felt that they should somehow \nturn their curriculum upside-down, help students consider higher-level design S-10 October 1992 3l3-Addendum \nto the Proceedings issues (e.g., reuse) early on, and then introduce algorithm design later on, when \nalgorithm analysis is taught. Recently, the department has been teaching a CSO course. This course was \noriginally intended for non- CS majors, and used HyperCard to teach a fairly high- level of application \ndesign. The faculty discovered that the students enjoyed the course immensely, and that they actually \nwere learning to be good designers, able to organize programs, put pieces together, specialize components. \nAs a result, this course has now become a prerequisite for the standard CS courses, regardless of the \nstudent s prior programming background. The picture at Western Washington University described by Martin \nOsborne is much more pessimistic. Over the last 10-15 years, their CS department has shifted considerably \nfrom a focus on teaching software development to one of teaching theoretical computer science. As a result, \nthere is very little emphasis on Software Engineering, or on object-oriented technology as a subarea \nwithin that. Martin cited the ACM curriculum as a major causal factor-the department has focussed on \nbecoming accredited, and has used ACM curriculum requirements as the major input into the department \ns program. These requirements have not focussed enough on software development to warrant an increased \nfocus on object-oriented technology. Later in discussion, Alan Tucker (author of ACM Curriculum 91) defended \nthe curriculum, pointing out that Software Engineering was one of the nine key areas identified, and \nthat any given department can develop their own version of the curriculum which focuses more on this \nas a subarea. During the discussion, a number of issues came up. One concerned what sort of introductory \ncourse should be offered to non-majors, and in particular the role of object-oriented programming in \nthis. A variety of positions were expressed, from making sure that the majors and non-majors were in \nseparate classes, to delegating non-majors programming courses to other departments, to offering courses \nlike that described by Hirshfield that focus on the use of high-level programming tools or frameworks \n(and that typically rely on object-oriented tee hnology). Another issue was how to plan a curriculum \nfor 2- year colleges. Here, the point was made that different curricula may be appropriate for students \nwho intend to transfer and complete a 4-year program vs. those who plan to go to work after the two years. \nFor the latter, it seems even more appropriate to focus on software development skills, and on object-oriented \nprogramming as a component of that. An interesting question directed to panelists concerned the long-term \nfuture of object-oriented programming and design as a course topic. All three panelists agreed that courses \non object-oriented programming or analysis per se are probably a stopgap measure, and will last only \nuntil the techniques become well-integrated within the computer science mainstream, much as has happened \nwith structured programming. One of the panelists (Grant) even offered an estimate: 5-10 years from now, \ncourses on OQ-and OOPSLA!-will be a thing of the past. OOPSLA 92 -314 -Vancouver, Britkh Columbfa  \n \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Mary Beth Rosson", "author_profile_id": "81335496622", "affiliation": "", "person_id": "PP73023007", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157842", "year": "1992", "article_id": "157842", "conference": "OOPSLA", "title": "How might the object-oriented paradigm change the way we teach introductory programming?", "url": "http://dl.acm.org/citation.cfm?id=157842"}