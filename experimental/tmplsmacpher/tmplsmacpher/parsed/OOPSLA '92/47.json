{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - IO October 1992 Proceedings Poster Submission- \n The Mjarlner BETA CASE Tool Report by: Elmer Sandvad Aarhus University Object-oriented system development \ncan integrate problems with traditional CASE tools like those analysis, design and implementation because \nthe same supporting SA/SD are caused by the fact that concepts can be used in all three activities. This \nconceptually different languages are used in the integration is very suitable for automated support. \ndifferent models. In object-oriented analysis, design Current object-oriented CASE tools however and \nimplementation the languages are not primarily support editing of diagrams, not the conceptually different, \nbut the very fact that they are transitions between the models. One reason is that different languages \nmakes it difficult to move from different languages are used in the different models. one model to another. \nIn the Mjolner BETA CASE If instead the same object-oriented language is used tool the common abstract \nlanguage is BETA, which throughout the process the iterative is an object-oriented programming language \nwith a design/implementation cycle can get a high degree of usual textual syntax. A graphical syntax \nhas been automated support: automatic program generation introduced for part of BETA to be able to express \nfrom design diagrams, reverse engineering from the analysis and design models graphically. By using programs \nto design diagrams and even simultaneous the same abstract language in design as well as editing of the \ndesign descriptions and the program. implementation it is possible to give tool support to The analysis/design \ncycle can not get the same high the integration between the models. The different degree of automated \nsupport; but hypertext models are simply different presentations (with facilities can help in keeping \ntrack of connections different concrete syntaxes) of descriptions in the between the more or less informal \ndescriptions of same underlying abstract language. The design model the application domain and the more \nformal is a graphical presentation at a high abstraction level descriptions of the system being developed. \nThe without all the confusing programming details. The Mjolner BETA CASE Tool [San92] is an object- implementation \nmodel (the program) is a textual oriented CASE tool with such support. The common detailed presentation \nthat includes the design model language is BETA [BETA92]. but now in textual form. A large number of \ngraphical notations for object- Using the same language in all models puts strong oriented analysis and \ndesign exist. The Mjalner requirements on the language. It must be powerful BETA CASE tool does NOT introduce \nyet another enough the model the problem domain and it must be notation. Instead the message is that \nthe same executable. abstract language should be used for analysis, design Concerning analysis descriptions \nwhich are used in and implementation. The same concepts are used in investigating the application domain, \nand NOT in the different models, therefore these models should describing the system that might be developed, \ntherebe expressed in the same abstract language. The is a clear need to be able to express a model of \nthe 5-10 October 1992 -207-Addendum to the Proceedings application domain informally. These descriptions \nshould not be limited by the expressive power of a programming language. However an object-oriented programming \nlanguage, like BETA, with powerful constructs for expressing concepts and concept hierarchies, can be \nused as the basis in the analysis model. The higher abstraction levels of the design descriptions should \nlike the analysis descriptions be a model expressed solely in application domain concepts, but now it \nis a model of the system being developed. Therefore the informal elements must be removed and the semantics \nof the model must be clear. The many notations that have been introduced for object-oriented analysis \nand design can of course be used to model the problem domain but they are not executable. Most of the \nnotations are programming language independent. This has some advantages but in order to get a tight \nintegration of design and implementation the design language should not be programming language independent. \nThere are two reasons for this. Firstly, a separate design language introduces consistency problems between \ndesign descriptions and the program. Secondly, programming languages have a clear semantics which many \nof the design notations do not have. If they had, they were programming languages at another level. The \nMjoner BETA CASE tool is part of the Mjolner BETA System lKLM+921, which is a grammar-based system with \nmetaprogramming tools like a structure editor. The representation of programs and other kind of documents \nis abstract syntax trees (ASTs), which is a very suitable representation for a language with different \nalternative presentations. The design models are abstract graphical prettyprints of the underlying BETA-AST. \nThe implementation model is a textual detailed prettyprint of the same underlying BETA-AST. So the object-oriented \nCASE tool is basically a structure editor with a graphical and a textual user interface. The grammar \nbasis of the Mj0lner BETA system implies that the object-oriented CASE tool can be tailored to support \nother design notations as well as other object-oriented programming languages. But again, the best integration \ncan be obtained by adding a graphical syntax to the high-level structures of a suitable object-oriented \nprogramming language. The current implementation consists of two applications: Freju, which is the diagram \neditor and Sif, which is the textual structure editor. The two applications are implemented on UNIX workstations \nand Macintosh, but the integration of the two applications is currently only implemented on UNIX platforms. \nThe two applications communicate through UNIX sockets and a protocol for commands and notifications has \nbeen developed. The graphical presentation (the diagrams) are constructed automatically from the BETA \nprogram.The text file may be parsed into a BETA abstract syntax tree, if not already created in Sif. \nThis BETA-AST is traversed and presented graphically. Freja is a Design/OA [JCH+9 11 application written \nin BETA. Access to the Design/OA C-library is provided through a BETA library called DesignEnv [Jen92]. \nSome of the outstanding features of Design/OA are support for pages, page hierarchies, regions and connectors. \nThese features are used heavily in Freju. The graphical syntax expresses different kind of hierarchies: \ncomposition (aggregation) hierarchies and classification (specialization) hierarchies. Composition hierarchies \ncan depending on the users choice be viewed in corresponding page hierarchies or in trees with the nodes \non the same page. Classification hierarchies are implemented in corresponding trees of symbols. Each \nlevel in these trees is a region which means that manipulation of the layout e.g. moving a node in the \ntree causes the whole subtree to move along with that node. The connecting edges are updated accordingly. \nThe graphical editor Freja has been implemented by Kim Jensen M0ller. The textual structure editor Sif \nhas been implemented by the author. OOPSLA 92 Vancouver, British Columbia  References [BETA921 B.B. \nKristensen, O.L. Madsen, B. Moller-Pedersen, K. Nygaard: Object Oriented Programming in the BETA Programming \nLanguage, Addison-Wesley, in preparation. mM+92] J.L. Knudsen, M. Lofgren, O.L. Madsen, B. Magnusson \n(eds.): Object- Oriented Software Development Environments, Prentice Hall, in preparation. [BKM+92] \nL. Bak, J.L. Knudsen, OL. Madsen, C. Norgaard, E. Sandvad: The Mjolner BETA System. Chapter 3 in [KLM+92]. \n[JCH+91] K. Jensen, S. Christensen, P. Huber, M. Holla: DesignlOA. A Reference Manual. Meta Software \nCorporation, 125 Cambridge Park Drive, Cambridge MA 02140, USA, 1991. [Jen92] K. Jensen Moller: DesignEnv. \nChapter 16 in mM+92]. [San921 E. Sandvad: An Object-Oriented CASE Tool. Chapter 20 in [KLM+92].  Contact \ninformation: Elmer S andvad Computer Science Department, Aarhus University Ny Munkegade 116 DK-8000 Aarhus \nC, Denmark +45 86 20 20 11 ext. 2752 essandvad@daimi.aau.dk 5-10 October 1992 -2W-Addendum to the Proceedings \n  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Elmer Sandvad", "author_profile_id": "81100199079", "affiliation": "", "person_id": "PP31092997", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157756", "year": "1992", "article_id": "157756", "conference": "OOPSLA", "title": "The Mj&#248;ner BETA CASE tool", "url": "http://dl.acm.org/citation.cfm?id=157756"}