{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - IO October 1992 Proceedings Educators \nSymposium- Introducing Object-orientedness into a Breadth-first Introductory Curriculum Report by: Richard \nG. Epstein West Chester University of Pennsylvania Allen B. Tucker Bowdoin College 1. Introduction This \npaper gives an account of the manner in which the object-oriented paradigm is being introduced into a \nfour course breadth-first introductory curriculum which is being tested in a variety of institutional \ncontexts, including Allegheny College, Bowdoin College, the University of Connecticut and West Chester \nUniversity of Pennsylvania. Developing this curriculum are faculty members from Allegheny College, Bowdoin \nCollege, Calvin College, SUNY Geneseo, Swarthmore College and West Chester University of Pennsylvania. \nThis new breadth-first introductory curriculum incorporates ambitious coverage of the object-oriented \nparadigm in its second course. This paper gives a description of that coverage, the philosophy behind \nit, and some information about an early experience class-testing it. This early experience was so successful \nthat it has encouraged the curriculum developers to reconsider the role of object-orientedness in the \nsecond course and in the entire curriculum. Our initial concept was to introduce object-orientedness \nnear the end of the second course, after a thorough discussion of abstract data types and the specification \nand implementation of important ADTs (e.g., lists, stacks, queues and trees). This conservative approach \nwas taken because we (like many others) were not really sure whether object-orientedness could or should \nbe introduced this early in the curriculum. However, the students showed such enthusiasm for this approach \nto problem-solving that a decision has been made to recast the entire second course in object-oriented \nterms. As of this writing, this more ambitious approach has not been class-tested. Thus, the emphasis \nin this paper is on our initial and more modest strategy, since that is the strategy for which we have \nsome feedback from students. At the end of the paper we will briefly describe how we intend to redesign \nthe course so as to introduce object- orientedness right from the start. 2. Computing Curricula 91 and \nBreadth-first Curricula Computing Curricula 1991 [ 1,2,3] presented a framework for the development of \ninnovative and evolving curricula in Computer Science. In part, this was accomplished by presenting a \nspecification for the design of curricula rather than one standard curriculum. The common requirements \nsection of that report made clear that it was important for undergraduates to understand the major language \nand design paradigms, including the object-oriented paradigm. Computing Curricula 1991 presented several \nexample curricula that use a breadth-first approach. That is, they begin with a broad introduction to \nthe discipline rather than a narrow introduction to programming and problem-solving. An introductory \nsequence of four courses that uses the breadth-first approach has been described by Tucker and Gamick \n[4,51. Tucker and Gamick s specification provides the basis for the detailed curriculum development effort \nthat is now underway. Object-orientedness is introduced in the second course of this four course sequence.l \nThe National Science Foundation is supporting the class testing and dissemination of part of this breadth-first \ncurriculum effort. Major aspects of this project that are of special interest to the Foundation are the \nimplementation of the breadth- first approach and the commitment to regularly scheduled laboratories. \nFor example, the first course introduces elementary discrete mathematics, which is then applied to develop \nformal specifications for procedures and functions (in terms of pre-conditions and post-conditions). \nFormal program verification using an axiomatic approach is also introduced in the first course as an \napplication of logic. The second course includes a formal treatment of complexity and graph theory. Algorithms \nare presented with an analysis of their complexity as well as a proof of correctness (using a less formal, \nargument-style of proof). An intrinsic part of the project is the development of suitable laboratory \nmaterials for each course. In particular, each volume of Fundamentals of Computing has an accompanying \nlab manual and software suite. Considerable effort has gone into removing programming language concerns \nas such (in particular, syntactic and semantic issues) from the main text. These have been relegated \nto the laboratory manual. A major concern in the design of the second course has been the proper role \nof object-orientedness. Our strategy* was to introduce abstract data types at the beginning of the second \ncourse and then to introduce object-orientedness toward the end of the course. We decided to cover object-orientedness \nin great depth and at a much more sophisticated level than many Pascal-based second courses of which \nwe were aware. This vision for a new introductory course sequence will eventually be published as a four \nvolume series, Fundamentals ofComputing, by McGraw-Hill Book Company [6,7]. This project represents a \nsignificant effort under McGraw-Hill s PRIMIS or publish-on-demand system. This means that McGraw-Hill \nwill be able to produce customized subsets of the breadth-first curriculum to meet individual institutional \nneeds. * Again, we are referring to our initial design, that was class tested during the Spring of 1992. \nAs mentioned in the introduction, we have decided to recast all of the software for our second course \nin object-oriented terms. In particular, we decided to devote considerable attention to the issue of \ndeferred binding and virtual methods, because these concepts are crucial for implementing polymorphism \nand powerful strategies for software reuse. We also stressed the issue of genericity (what some people \nare calling heterogeneous data structures ) and the ease with which one can develop generic data structures \nif one uses virtual methods in an object-oriented language. We wish to emphasize that we considered this \nstrategy to be quite bold in its introduction to object-orientedness early in the curriculum. For example, \nat a panel discussion on object-orientation at SIGCSE 92 many participants expressed scepticism that \nobject-oriented programming could be taught in CS 1 or CS2. However, our experience has been that students \nfound object-oriented design intellectually challenging and stimulating and that this exposure increased \ntheir enjoyment of the course. Section 6 will discuss student reactions to the course in more detail. \n 3. Basic objectives relative to object- orientedness Our initial strategy (again, this was the more \nconservative strategy that was class tested during the spring of 1992) was to introduce object- orientedness \ntowards the end of the course, after the students have had a thorough introduction to the concept of \nabstract data type. The object-oriented module introduces the following topics: 1. Basic object-oriented \nconcepts and terminology. 2 Binding times, especially deferred binding, virtual methods and polymorphism. \n 3. The concept of software contracting as presented by Meyer [8].  4. Dynamic objects. 5. The relationship \nbetween ADTs and classes.  6. Genericity and the implementation of a generic stack.  7. Object-oriented \nprogramming as a powerful reuse technology.  8. The concept of a generic object.  The presentation \nof object-oriented concepts and terminology is thorough and in large measure influenced by the Smalltalk \nterminology one finds in texts such as LaLonde and Pugh [9] and Goldberg and Robson [lo]. This terminology \nincludes classes, objects, messages, receiver objects, instance variables, methods, class protocols, \nprivate and public methods, inheritance, encapsulation, polymorphism and method categories. This is extended \nlater on to include the concept of polymorphic object (which arises in object-oriented Pascal), virtual \nmethods, true polymorphism and genericity. At the very end of the material on object-orientedness, students \nare introduced to the concept of a generic object (inspired by the Object class of Smalltalk). Initially, \nstudents are presented with a simple object-oriented design (for the classes Persons, Professors and \nStudents) which uses only static methods. They are then shown some of the short- comings of static methods. \nThis motivates the introduction of deferred binding, virtual methods and true polymorphism. The idea \nof software contracting also plays a fundamental role, as students begin to see classes as services provided \nto client programs. This presentation emphasizes (as does Meyer [8]) the importance of pre- and post- \nconditions in the implementor-client relationship. This continues the emphasis on formal specifications \nthat started from the very beginning of the first course in this breadth-first curriculum. The concept \nof dynamic object is introduced in order to allow for the implementation of a generic stack class. The \nstack ADT was introduced earlier in the course and was used to solve the familiar Polish expression evaluation \nproblem. This teaching strategy allows the student to see the way in which classes extend the power of \nADTs by providing genericity. A PersonStack class is implemented in a manner that is generic relative \nto the Person class and any of its subclasses. Finally, the student is led to the idea of a generic object \nand the way such a class definition could provide true genericity. In some sense, the concept of genericity \nis really the goal of this module. Since students had already implemented ADTs using Pascal units, the \nconcept of genericity was easy to introduce and motivate as an extension of the ADT concept. By the end \nof the module the students are shown how to implement a generic stack. Reuse is listed as a recurring \nconcept in the report, Computing Curricula 1991. This means that reuse is considered a fundamental concept \nin computing that is likely to recur in many courses. Object-oriented programming was presented as a \npowerful technology for software reuse in our course. This relates both to the idea of software contracting, \nto the ability to extend and modify class definitions, and to the notion of genericity itself.  4. Overview \nof lecture and laboratory materials The object-oriented module was presented in the form of lectures \nand laboratories dedicated to the course. The lectures emphasize the concepts presented in the text. \nThe laboratories emphasize programming, but not exclusively. The laboratory manual also introduces new \nideas for doing object- oriented designs. Therefore, the text plus the laboratory materials were intended \nto constitute a thorough introduction to object-oriented programming. The previous section described \nthe basic goals of the object-oriented module. Below is a brief outline of the topics covered in lecture \nand in the text: 1. Programming language paradigms: a brief introduction to four major language paradigms. \n 2. Paradigms and design methodologies: the relationship between object-oriented design and function-oriented \ndesign (these concepts were introduced at the beginning of the course). 3. The object-oriented paradigm: \nintroduces the basic terminology, as described above. Develops a simple class hierarchy.  4. Object-oriented \nPascal: implementing an object- oriented design in object-oriented Pascal using static methods. 5. Binding \ntimes, virtual methods and true polymorphism: redoing the design using virtual methods. 6. Dynamic memory \nallocation, polymorphism and genericity: implementing the class PersonStack which is generic relative \nto the class Person and its subclasses. Introducing the concept of generic object.  The laboratory manual \npresents the programming language details and also expands the text s presentation of object-oriented \ndesign. The student is provided with a laboratory diskette containing three units. These provide (respectively): \n1. The Person class and its subclasses implemented with static methods. 2. The Person class and its \nsubclasses implemented with virtual methods. 3. The PersonStack class which illustrates a generic stack. \n  The laboratory manual introduces each new programming construct in a formal manner (i.e., by giving \nthe syntax and semantics for each construct). The student is shown the syntactic details for declaring \nclasses, objects, static methods, virtual methods, dynamic objects, constructors and destructors. The \nmanual also presents a textual format for specifying an object-oriented design (based upon the manner \nin which many Smalltalk texts present class definitions, with methods organized by method categories, \nexcept that we have added pre- and post-conditions for all methods). during the previous semester. Of \nthe twelve, 5 were The laboratory manual includes many exercises computer science majors, 3 were math \nor science which either reinforce lessons learned in the text majors, 3 were social science majors, and \n1 had not material or develop new programming ideas. For yet declared a major. example, students are \nshown how they might turn off the inheritance mechanism by polymorphically At the end of the semester, \nthe students filled out a redefining a method so that it generates an error questionnaire which helped \nus assess the message in a subclass. Students are shown how to effectiveness of various aspects of the \ncourse from define a class which represents a file of objects, so their point of view. Two important \nareas that the that textual representations of objects can be stored questionnaire tried to address were \nthe effectiveness in and retrieved from a file. of the scheduled laboratory experiences and the level \nof interest that students had in the various topics The above exercises emphasize the implementation \nthat the course had introduced. of classes. Students are also shown how to use classes as clients. They \nare shown how a program can The first question we asked had four parts. We asked add new methods to a \nclass it uses by creating a the students, How effective do you think the subclass and how new class definitions \ncan be scheduled laboratory is in constructed as units. a Enhancing your understanding of the discipline, \n5. Class testing experiences b. Improving your technical skills in computing, The object-oriented module \nfor the second course in c Improving your understanding of the lecture computing was class tested for \nthe first time during material, and the Spring 1992 semester at Bowdoin College. In d Influencing your \nlevel of interest in computer addition, this material was used to introduce seniors science as a field \nof study? to object-oriented programming in a software engineering course at West Chester University \nof The results of this question are summarized below. Pennsylvania. Each response was reported on a 7-point \nscale, and the twelve responses were averaged for each of the four At Bowdoin, 12 students took this \nsecond course; 10 parts. freshmen and sophomores and 2 seniors. All but 2 had taken the breadth-first \nintroductory course Very Very Negatively None Positively Question 1 2 3 4 5 6 7 Average a 1 6 5 6.33 \nb. 3 5 4 6.08 C 2 7 3 6.08 d 4 4 4 6.00 your level of interest in it. In this question, weWe conclude \nthat the scheduled labs were successful, listed the topics in the same chronological order that from \nthe students point of view in all four respects, they had been introduced in the course (this original \nand were most successful in enhancing students ordering is given in the left hand column below). The \nunderstanding of the discipline. table shows a rearrangement of that list according to The second question \nasked students to Rate each of average student inter&#38;t level. the following topics in the course \nwith respect to Totally Un- interesting Interesting Topic 1 2 3 4 5 9. Object-oriented design 10. Operating \nSystems (Unix) 1 1 1. Software Development 2 1 3. Abstract Data Types (ADT s) 3 7 2 5.92 5 5.42 1 5.25 \n 4 5.17 2 1 5.08 3 1 4.92 4 1 4.92  3.67 These results reflect fairly dramatically that object- \nThe results of this class-testing and workshop oriented design was the most interesting topic for evaluations \nwill be disseminated in future articles the students in this second course, with other and presentations. \nbreadth topics also being rated quite highly. This particular result convinces us that students in the \n6. Future development second course are not only ready but also quite Our success introducing object-orientedness \ninto the willing to begin studying object-oriented principles. second course in computing has encouraged \nus to We conjecture that the Bowdoin students recast the entire second course using object-oriented enthusiasm \nstems in part from the fact that object- principles and methods. In particular, this means that nrientedneaa \ninchlrkc _ -- -D rnmnnnent- ~ v ~. that ic_ _--_ __I _---II _--_____l R d&#38;on . ..-. instead of viewing \nciasses as a generalization of the intrinsically interesting. (Part of their enthusiasm ADT concept, \nwe intend to view ADTs as a also reflects the instructor s own enthusiasm for the specialized or restricted \nkind of class. Thus, in our subject.) Designing classes is a problem-solving revised course outline, \nclasses, objects and methods activity that students seem to enjoy, perhaps because will be introduced \nat the very beginning of the it represents problem-solving at a higher level of course, and the traditional \nADTs (e.g., lists, stacks, abstraction than is the case when design involves queues, and trees) will \nbe designed in an object- crearmg a structure chart or coding an algorithm. oriented fashion. This will \nenable us to introduce polymorphism and genericity earlier in the course, The National Science Foundation \nis sponsoring a along with the notion of software reuse that these series of three Faculty Workshops \non Adding features enable so naturally. Breadth and Laboratories to the Introductory Curriculum in Computing. \nThe first workshop was held at Bowdoin in June 1992, and focused on the first two courses. Together, \nthe workshops will eventually examine and evaluate the entire breadth- first curriculum project, focusing \non both the teaching materials and the class-testing experience with each of the four courses in the \nsequence, including the object-oriented module described in this paper. S-10 October 1992 -xv-Addendum \nto the Proceedings 7. A. Tucker, J. Bradley, R. Cupper and R.  7. References Epstein, Fundamentals of \nComputing II, 1. A. Tucker, B. Barnes, R. Aiken, K. Barker, K. Bruce, T. Cain, S. Conry, G. Engel, R. \nEpstein, D. Lidtke, M. Mulder, J. Rogers, E. Spafford, A. Turner, Report of the ACM/IEEE CS Joint Curriculum \nTask Force, Computing Curricula 1991, ACM Press and IEEE-CS Press, New York, 1991. 2. A. Tucker and \nA. Turner, Computing Curricula 199 1, Communications of the ACM, March 1991. 3. A. Tucker and B. Barnes, \nFlexible Design: A Summary of Computing Curricula 199 1, IEEE Computer, November 199 1. 4. A. Tucker \nand D. Gamick, Recent evolution of the introductory curriculum in computing, Education and Computing, \nVolume 7, 199 1. 5. A. Tucker and D. Gamick, A Breadth-first Introductory Curriculum in Computing, Computer \nScience Education, Volume 2 No 3 (Fall 1991). 6. A. Tucker, J. Bradley, R. Cupper and D. Gamick, Fundamentals \nof Computing I, McGraw-Hill, New York, 1992.  McGraw-Hill, New York (in preparation for 1992). 8. B. \nMeyer, Object-oriented Software Construction, Prentice-Hall, New York, 1988. 9. W. LaLonde and J. Pugh, \nInside Smalltalk, Volumes I and II, Prentice-Hall, New York, 1990. 10. A. Goldberg and D. Robson, Smulltalk-80: \nThe Language, Addison-Wesley, 1989. 11. SmalltalWVfor Windows User Guide, Digitalk Corporation, Los \nAngeles, 1990.    Contact information: Richard G. Epstein Department of Mathematics and Computer Science \nWest Chester University of Pennsylvania West Chester, PA 19383 Allen B. Tucker Department of Computer \nScience Bowdoin College Brunswick, ME 04011  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Richard G. Epstein", "author_profile_id": "81100241880", "affiliation": "", "person_id": "PP14093332", "email_address": "", "orcid_id": ""}, {"name": "Allen B. Tucker", "author_profile_id": "81100631947", "affiliation": "", "person_id": "PP14217097", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157835", "year": "1992", "article_id": "157835", "conference": "OOPSLA", "title": "Introducing object-orientedness into a breadth-first introductory curriculum", "url": "http://dl.acm.org/citation.cfm?id=157835"}