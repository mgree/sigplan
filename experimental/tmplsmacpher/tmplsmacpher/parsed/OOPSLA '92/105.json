{"article_publication_date": "12-01-1992", "fulltext": "\n Vancouver, British Columbia, Canada 5 - 10 October 1992 Summary Report by: James Heliotis, Panel chair \nRochester Institute of Technology Panel Members: Hermann Hilni Jucker Informatik Rajiv Tewari Temple \nUniversity Doug Grant Swinbume Institute of Technology Timothy Budd Oregon State University On Monday, \nOctober 19th, OOPSLA held its first ever symposium directed specifically towards the needs of educators. \nAt this symposium, eleven speakers were chosen to present their views on how best to integrate the object-oriented \nparadigm into post-secondary, and graduate, education. Two speakers, Wilf LaLonde, of Carleton University, \nand Linda Northrop, formerly a visiting professor at the United States Air Force Academy and currently \nat the Software Engineering Institute at Camegie- Mellon University, were invited. The other nine were \nchosen based on the extended abstracts they had submitted. The reader will find papers based on many \nof these talks elsewhere in this same publication. There was also a panel discussion that day that was \nentitled How Might the Object-Oriented Paradigm Change the Way We Teach Introductory Programming? where \nfour more submitters were invited to participate. Addendum  A 92 to the Proceedings Panel Report- \nof Educators Symposium At the Thursday panel, four participants from Monday s symposium were chosen by \nthe co-chairs to present their views on what had transpired on Monday. Therefore, this report is, in \nessence, a summary of the discussion at a panel that consisted of summaries of a symposium! The panelists \nwere Hermann Htini and Rajiv Tewari, who presented papers on Monday, Doug Grant, a member of Monday s \npanel, and Timothy Budd, who was chosen from amongst the participants in the audience to give an attendee \ns perspective. First, the co-chairs, Mary Beth Rosson and Jim Heliotis, did pass out a survey form to \nthe symposium attendees. A majority of the attendees did return the form, and they rated the symposium \n3.95 overall on a scale of 1 to 5. The other interesting fact gleaned from the survey was that, contrary \nto expectations, the vast majority of the attendees had indeed had some experience teaching object-oriented \nprinciples, albeit often in an advanced seminar setting. This means that, at least at OOPSLA 92, we had \nnot yet succeeded in reaching those who were skeptical about making changes in their computing curricula \nto include object-oriented technology. How that could best be done will have to be left to a future discussion. \nThere seemed to be a majority of people who spoke who felt strongly that the typical computing curriculum \ntopics were being taught in the wrong order. There is too much initial emphasis on learning the syntax \nof a language and writing trivial S-10 October 1992 -241. Addendum to the Proceedings programs, rather \nthan design of real-life systems and re-use of existing software. The latter activities are, of course, \nwhat goes on in the commercial world. This leads to another important point. Object- oriented technology \nis not a goal, nor is it often a field of study in itself, at least in the long run. It is, rather, a \ncomponent of the skills one acquires when one learns good software engineering, and software engineering \nis, perhaps, that which we truly should be working on integrating better into computing curricula. Several \npresenters hypothesized that object-oriented courses, and indeed, even object- oriented technology conferences \nsuch as OOPSLA, may eventually go away once the paradigm is well understood and successfully integrated \ninto our curricula. On a more specific point, it was also recognized that adopting object-oriented programming \nand design methodology necessitates the students becoming familiar with large object libraries early \nin their college careers. Care must be taken to prevent this from becoming an undue burden on their progress. \nOne pleasing observation made by the panel chair was that each presenter and attendee who made some comments \nat the symposium had his/her own favorite object-oriented programming language, but there was almost \nno time spent arguing about why language X was better than language Y; the participants seemed to agree \nthat schools should just pick a language and get on with teaching the object- oriented paradigm. Many \nof the comments had to deal with the fact that the attendees lamented the difficulty in obtaining a consensus \namong their own colleagues to go ahead and build a new curriculum that incorporated object- oriented \nideas. Here, now, are the main comments put forth by individual panel members. Hermann Hijni Their symposium \npaper, on teaching an object- oriented design and programming course using an example known as the games \nfactory, was summarized. The emphasis was on framework design, and choosing the best framework for the \ncurrent, and potential future related applications. Rajiv Tewari The lack of thoughtful, formal planning \nfor programming courses was lamented. Every course taught appears to start the student from scratch (no \nexisting code to reuse). Individual effort seems to be way too prevalent. A focused, coherent strategy \nand curriculum is needed. Some suggestions were given as to how to integrate object-oriented technology \nand software engineering better into a computer science curriculum. (1) Focus on programming in the large, \nat the latest by the third course. (2) Assignments should build upon work done in earlier ones. (3) \nAssign team projects. (4) Employ program metrics, testing strategies, and risk assessment.  It was \nnoted that some of the attendees at the symposium felt that the ACM/IEEE 1991 C.S. Curriculum was too \nrestrictive and would not easily accommodate object-oriented analysis, design, and programming. Dr. Tewari \ndisagreed. He felt that experimentation in the curriculum was one of the things encouraged in Curriculum \n9 1. Specifically, Dr. Tewari strongly recommended an object-oriented data structures class, followed \nlater by a graphical user interface design course. The reason for the latter is that there are many existing \nindustrial-strength object-oriented GUI libraries from which the students could learn a lot about reusing \ncode. Douglas Grant It is very possible that the object-oriented paradigm is not always the right one \nto use; we should teach students about many paradigms and enable them to choose between them for each \nproject. Timothy Budd Tim Budd was pleased to find out from the symposium speakers that, I am right, \nor at least all my opinions seem to be widely held. Object-oriented education has moved from an advanced \ntopic to the mainstream. It is possible to teach object-oriented program-ming-and even C++-at the freshman \nlevel. The trick is to teach the paradigm before the syntax. This allows the student to understand the \nneed for each syntactic feature, and he/she will remember them better. Furthermore, for a student to \ntruly comprehend the value of the object-oriented paradigm, they need to understand the programming and \ndesign problems that it appears to solve. Students entering college, especially those with programming \nexperience, believe that the challenge of the computer programmer is to find the right algorithm for \nthe job; they should discover that it is really to design the right system ( in the large ). Interestingly \nenough, freshmen are capable of OOPSLA 92 -242-Vancouver, British Columbia designing much larger systems \nthan they are capable, initially, of programming. Course material is still a problem. Many faculties \nseem to be willing to embrace object-oriented technology, as soon as they feel it has been covered by \na sufficient number of text books. These books are just beginning to appear. In closing, two comments \nare in order that came from the question period after the panel gave its reports. One is that there are \nemployers out there who are anxiously awaiting departments who can graduate students who have skills \nin object-oriented techniques. The other is a recommendation that future Educators Symposia specifically \naddress the issue of educating the faculty who do not normally come to gatherings like OOPSLA but need \nto make an informed decision on if and how to integrate object-oriented technology (and software engineering) \nbetter into their curricula.  Contact information: James Heliotis Rochester Institute of Technology \nRochester, New York, USA Hermann Htini Jucker Informatik Htinibach, Switzerland Rajiv Tewari Temple University \nPhiladelphia, Pennsylvania, USA Doug Grant Swinbume Institute of Technology Hawthorn, Victoria, Australia \nTimothy Budd Oregon State University Corvallis, Oregon, USA S-10 October 1992 -243-Addendum to the Proceedings \n \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "James Heliotis", "author_profile_id": "81100053201", "affiliation": "", "person_id": "PP39077730", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157821", "year": "1992", "article_id": "157821", "conference": "OOPSLA", "title": "Summary of educators' symposium", "url": "http://dl.acm.org/citation.cfm?id=157821"}