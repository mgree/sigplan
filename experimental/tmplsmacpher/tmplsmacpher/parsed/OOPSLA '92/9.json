{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5-10 October 1992 Proceedings Panel Report- \n The Role of Methods and Case in 00 Development Report by: Rick DeNatale, Moderator IBM Programming Systems \n Panelists: Grady Booth, Rational Peter Coad, Object International Dave Thomas, Object Technology International \nJohn Tibbetts, Kinexis Moderator s note: This report is not a literal transcription of the panel session. \nInstead I have paraphrased liberally, except where I have used double quotes. As with all summaries, \nsome of the original intent has likely been lost. I take full blame if this has occurred. Introduction \nToday s panel is a follow-on to the interesting, and amusing, panel last year entitled Can Structured \nMethods be Objectified? . Today we will look at the question of how well methods and CASE tools mix with \nobject-oriented approaches. In keeping with the tenor of last years panel, and the recent U.S. presidential \ndebates, we have structured this panel as a formal debate on the question: Resolved: Methods and CASE \ntools hamper 00 Development Taking the affirmative are Dave Thomas and John Tibbetts. On the negative \nside we have Grady Booth and Peter Coad. We will follow two of the presidential debate formats, starting \nwith the single moderator format 5-10 October 1992 and ending with the Oprah format (questions from the \naudience).  The Single Moderator Debate Dave Thomas Is it possible to design in the abstract using \nCASE tools? One issue is believable or comprehensible specifications, another is what do you do when \nyour case tool doesn t number the pages and you drop the output? On the issue of believable specifications. \nMost case tools can produce specifications the size of the Encyclopaedia Britannica; how do users comprehend \nthis volume of information and verify that it is what they want. I believe that priesthoods are being \nbuilt around bubble diagrams. Design independent of the technology is a myth. In reality the implementation \nlanguage makes a big difference in the design. The process rather than the tools is the issue. A method \ndocumented in a book with a few examples might be good for showing students ( look it s a loop ) but \nwhen you take real software it s incredibly difficult to work with. In reality anyone who has built object-oriented \nsystems will tell you that they ve had to throw the class hierarchy away three or four times, yet the \nmethodologists don t talk about refactoring. This makes me wonder if the -39-Addendum to the Proceedings \nanalysis folks have ever done an implementation. Once you take your analysis dancing shoes off you need \nto make it work. Being a born-again 00 person isn t enough. Another issue is a lack of semantics. The \nsemantics of C++ and Smalltalk are hard enough to understand even though they are relatively well defined. \nThe CASE tools are constantly evolving. They cannot be usefully validated, and they are subjective. Methodologies \nclaim things which are myths. Technology independence of components is a myth. That s like going to someone \nand saying we re going to build a house and it s going to have a beam. You don t have to worry about \nwhether the beam is made of wood or steel. I don t believe architects build buildings that way. Another \nmyth is that you can mix and match components with zero cost. Consider the cost of mixing CMOS and TTL \nin hardware. CASE doesn t help with the hard things: Versioning. What do I want to build? What is the \narchitecture. How do I organize the development? How do I test it against the specifications? Peter Coad \nModerators note: Peter s energetic and sometimes breathless style made punctuation a real challenge. \nDo methods and CASE tools hamper object oriented development? The answer- No! The critical issue is whether \nwe believe that we have to put up with method/tool phobias. This presentation is about overcoming method/tool \nphobias. There are several sources of these phobias springing from the negative experiences in the past: \nexcessive red tape, stifling creativity; mountains of documentation--object-oriented methods should reduce \nthe complexity; so-called rigor which piles models on models until creativity and innovation are stifled; \njust shut-up and follow the directions, the method will generate the right answer; omniscient design, \na fallacy of the past the waterfall model never worked; methods and tools are a real pain, we have to \ndo something different and there is work showing this. There are species of fear mongers who spread these \nphobias: cave dwellers (methods tools, why bother); zealots (just do it the right way); the master (do \nit my way); the ivory tower guru (some of you will get object-oriented some won t-you poor fool!); the \ntechno-elite (oh, it s so difficult.-you re going to spend years figuring this out). Again 00 should \nbreed simplicity, brevity, and clarity. This generates several problems: victims get the blame; there \nare feelings of object inadequacy; technology transfer is hit-or-miss, methods address this; object style \nvs. object substance; limited perspective, experiences without validation: there is a difference between \nseven years of experience and seven repetitions of the same experience; people am too busy to think about \nthinking, intuition is the ultimate peak but introspection is necessary and methods address this need; \npostponement procrastination and paralysis of the individual, the team, and of the discipline. We can \nt afford to have these phobias and achieve. In other fields of human endeavor everyone uses methods and \ntools to the end of the intuitive. Gymnasts, musicians, and librarians all mix method and intuition. \nWhat are the goals for methods and tools to be effective? Methods in the past were used to control people, \nplug anyone in and they can do the work, they should develop more effective intuition and transfer expertise; \ntools need to support the method to the end of nurturing creativity and intuition. There are positive \nexperiences with methods today. By the use of one underlying model, we ve seen orders of magnitude reductions \nin specification size. Objects should make things simpler. There are strategies which communicate the \nintuitive: extensive examples learning from the literature; multi-sensory engagement using multi-media \nto bring people in. Concurrent OOA/OOD/OOP is practical. There s no reason to take on the risk of waterfall \ndevelopment, but there is good reason to have separation of concerns in order to have reuse of problem \ndomain results and reuse of human interaction and data management components. Reuse in the large is definitely \nhappening. In summary there is no way that case tools and methods hamper 00 development. We need to communicate \nexpertise. Methods communicate expertise to get the job done. John Tibbetts If there is any major flaw \nin Peters argument it is in the form of extremism of lack of method and lack of tool support that he \nis accusing us of. My argument is not based on an extreme position. I can only address myself to a slightly \ndifferent question: When do CASE tools and methodologies hamper object-oriented development? Thomas Aquinas \nsaid, All ideas have rights to be expressed; however correct ideas have more such rights than do incorrect \nideas. Here is a thought experiment. Consider the following list of projects: 1) A Payroll system for \na fortune 500 company; handling volumes of tax code with differences for different states, or different \ncompanies they deal with 2) An email system with an Object Oriented User Interface 3) A benefits Kiosk: \nfor employees to explore and select benefits from a cafeteria-style benefits program 4) A salary planning \nspreadsheet suite 5) A CASE tool How many of these would require tool support and increased methodology \nsupport. I realize that it is improper to smoosh the issues of tools and methods together but I ll do \nit anyway. If you said that zero or five of these required case tools and methods you are hopelessly \nbigoted; I would guess that most of the audience would choose one to four. The question is how do you \nchoose. There are three factors: development team personality; the nature of the client/buyer relative \nto the system producer; and finally system complexity. Development teams can be small or large and operate \nin a wide range of fashions from very intuitive to very methodical. Seymour Papert found both kinds of \ndevelopment approaches in the young school children working with Logo to draw a picture of the space \nshuttle. Some groups of students would just start programming, others would sit down and plan first. \nAlthough both achieved results of comparable quality, the teachers tended to think that only the students \nwho planned really learned the lesson. If there is a long spread of communication between users and programmers \nyou need mapping tools. If there is a short spread as in an accountant using a spreadsheet you don t. \n At this point John s allotted time ran out. Grady Booth There s a myth sometimes expressed that Real \nprogrammers don t use tools, but the issue is one of threshold. The goal is to build systems that work \nin a manner which efficiently uses the resources of people and time. Should we throw out tools altogether? \nFor example, should we not use compilers? Perhaps my opponents have been scared by some tools in the \npast. In the existing software industry with hundreds of thousands of programmers world-wide existing \nCASE tools have only a 20% market penetration. Does this mean that 20% of the programmers are insane? \nOr are the only people using case tools building case tools? The reality is that the case industry has \npoisoned a number of wells. Case tools allow poor designers to produce bad designs much more quickly \nthan they did in the past. So the extremist view is inappropriate. But if we follow the opponents arguments \nto absurdity, they would have us believe we wish to keep these things so secret that we are building \na priesthood such that the rules that we have learned cannot be passed out to others. But there are many \nmore software systems that we wish to build than we have the capacity for. We need to disseminate these \napproaches. Some degree of tool is absolutely necessary. So where is the threshold. There is a threshold \nbelow which tools indeed do get in the way. But, it seems to me that for certain classes of problems \na certain kind of notation is not only necessary but highly desirable to raise us to higher levels of \nabstraction. As Bertrand Russell pointed out that in the mathematical domain, proper notation can free \nthe mind to deal with the creative aspects of the problem at hand, the same is true of software systems, \nwe need to deal with abstractions that go beyond what our textual languages can provide. While my colleagues \nhere might be content to sit with a laptop in an airplane at 30,000 feet banging away, mere mortals trying \nto build software systems require a higher level of abstraction. For example, we often need to do abstractions \nwhich are larger than a single class. We have to ask ourselves if our languages are sufficient to allow \nthis level of abstractions. If we are building programs for ourselves there is no need to communicate \nthese abstractions. For longer-lived software we need to communicate and preserve not just the software \nbut the design. In the absence of CASE tools we will need software archeologists in the future to extract \ndesigns. Therefore we need notations because they lead us beyond the threshold of what we can express \ntextually. This leads us to the need for tools for manipulating these notations. As for methodologies, \nas Peter has pointed out creative people all use processes. Although very talented designer/programmers \ncan work at multiple levels of abstraction at the same time, the rest of us need to have this knowledge \ncodified. The most common methodology used today is chaos, where people do what feels good. But from \na business sense this doesn t yield a repeatable process we can optimize. We can t afford to build software \n by the seat of our pants.  Rebuttals Peter Coad This debate is about the negative consequences arising \nfrom the other sides pretense that you can avoid methods and tools and get the work done. We sorely need \nto communicate expertise and empower people, not constrain or confine them. We need multi-faceted strategies \nto empower people to do mre effective object-oriented development. John separated the intuitive from \nthe methodical on a small project. On a large project it s more sorely needed. We need creativity in \nany human endeavor, since intuition is the height of any human endeavor. Dave raised the issue of believable \nspecs. You somehow assumed that waterfall was how you would do iterative design. That s not how you or \nI would do it. Process is the issue. Program, design, and analysis proceed concurrently within a team. \nThe real hang-up seems to be on pictures. Some people have a need for linguistic thinking, but the role \nof spatial thinking is a vital part of an engineering discipline. Many problems cannot be expressed in \na verbal form, Look at Leonardo da Vinci s drawings. We all do use methods and tools to get the job done. \nWhether they are written in a book or not, we all do use them. Do they impede? Heck, no. John Tibbetts \nIn the spirit of the recent U.S. Presidential debates, John said he wanted to raise some character issues. \nIt s easy for either side to use reductio ad absurdum to make the other side look ridiculous. Would you \nuse a CASE tool to build a bottom-up parser for a compiler? On the other hand going back to my examples, \nyou need methodological support and CASE tools to build the large payroll system. Visual tools like Digitalk \ns Parfsm enable building applications like the E-mail system with no explicit methodology, because the \nlanguage of the user and the implementation language are so close. Then I ve been involved in large scale \nmulti man-year spreadsheet-based applications which required methodologies. I did an article a year or \ntwo ago, where I interviewed a number of large CASE tool vendors, none of whom used their CASE tool to \nbuild itself. Since then I ve found CASE tool vendors with richer paradigms that do use them. The basic \nproblem with today s methodologies and tools is that they aren t development systems. There is usually \na gap between tools and implementation. So use the tools where they are useful and forget about them \nwhere they aren t. Grady Booth I just realized that I learned something from Peter. I never knew that \nda Vinci was a great programmer! John seems to agree with me that there is an issue of threshold: there \nare circumstances where CASE tools and methods are absolutely essential; I will concur that there are \ncircumstances where they are absolutely foolish. We pay our managers huge sums of money to sort out the \ndifference. Dave raised the word architecture. We are moving from the domain of writing lines of code \nto that of building stable architectures. In an object-oriented system the architecture consists of the \nsocieties of classes which I have crafted as well as the ways that the instances of classes collaborate. \nNote that this transcends single classes. Some programmers can make the leap of creativity without use \nof notation, but programmers like this are very rare indeed. Others should be empowered to express these \narchitectures and get beyond the limitations of languages. My experience is in many dimensions for non-trivial \nsystems you have to use notations beyond the language. CASE tools and methods can tremendously help in \nthe creativity of these larger systems. Dave Thomas If you want to motivate someone to buy a video or \ncontribute to the good of mankind you could do it with this kind of approach. But if you re in the trenches \ntrying to build real software in 18 months you need more than a religious experience with the priest. \nIt s not enough to buy the book. It s not enough to buy the videos. You need to ingrain it into the organization. \nThat s hard and requires understanding of process. Our opponent s tactic is to say that we don t use \na software process. That s not true. What we re saying is that we wouldn t use the software process, \nmethods and tools these guys come up with. The tools aren t even up to date with the latest book they \nve published. Peter says that these experiences are in the past. He s referred to very interesting work \ngoing on like pattern languages and the work that Rebecca Wirfs- Brock and Sam Adams are doing to extend \nresponsibility-driven design where you really build the actual knowledge into the environment. I guess \nthis must be OOA/OOD 94 because this isn t in any of the methodologies and tools now available. We build \nlarge systems with teams of peoples out of components. We build them with different companies working \ntogether at different sites. The key to doing this is collaborative work tools not bubble drawing. We \nuse pictures too. It just happens we don t have to type them in we have tools that print them out, they \nre called formatters. They do drawings as well as text. The most important drawings are often an oscilloscope \nwave-form because that s what the customer expects to get, not some set of class pictures or diagrams. \nVisualization is important used in the right way. An 00 diagram of an accounting system is unlikely to \nbe very exciting to a CPA, he wants to see a chart of accounts. It seems very unlikely that doing circuit \nschematics is going to work for very large systems. For those of you who think we re going to make software \ndesign like hardware design, as an electrical engineer I have to confess to you that we are using languages \nlike HDL and VHDL because we found those pictures didn t work. I agree that architecture is important \nand hard. One of the problems is that by saying that the people who build component libraries are high \npriests what we do is diminish the challenge of teaching people these things. Carleton teaches incoming \ncomputer science students Smalltalk to put them in a reuse culture. We need to teach people the important \nthings first so they become second nature. Hiding them and saying only high priests can do these things \ndisenfranchises people by saying Look, you re just ordinary people. You can use these crummy tools and \ncrummy techniques when you can really do much more yourself. If you teach people what they can do and \nreally empower them, they can use programming languages directly and produce the diagrams automagically, \nand I don t believe that any of those things will be using these kinds of tools.  Questions: Rick DeNatale \nIt seems to me that what we are witnessing is the collapse of the of the traditional distinctions between \nanalysis. design methodologies, implementation, maintenance and so on. If reuse is the issue, and reuse \nis a maintenance issue, as Adele Goldberg pointed out in an earlier panel, then it seems to me that the \nmethodologies and tools we should be using should be addressing the iterative life-cycle of the overall \ninformation system. The things that John brought out relative to Parts seem to collapse things as well \nbecause it has end-users working visually to build applications. So how does all this fit into the general \nidea of the balance between methods and informal development? Grady Booth The challenge of the iterative \nlife-cycle, which is most commonly like Barry Boehm s spiral model, is that undisciplined use can lead \nto the death spiral of software development in which you never reach closure. So undisciplined use of \nthe iterative life- cycle can be worse than no use at all because you will never know or be able to predict \nwhere you are or how far you have to go. So we need a balance of the iterative life-cycle with more traditional \nmanagement practices which impose a discipline upon it. Dave Thomas One of the biggest enemies is feature \ncreep; or we can t give you a schedule this is OOPS you know. Some old rules still work like the eighty-hour \nrule and programmers only work three months a year so spread it around to get those bursts! Rick DeNatale \nJust a follow-up to Grady s response. It seems to me that there are two kinds of closure. One where you \naccomplish what you set out to accomplish, but when you look at things in the large, there is no natural \nclosure. The requirements tend to change over time. One of the crises we face and that some people look \nto OOT to solve is the other kind of closure we find ourselves forced into where we ve got systems that \nwe can t change anymore. Grady Booth Right, In that light I very much like what Dave Pamas has said in \nhis paper A Rational Design Method: Why and How to Fake It, because to some degree, I won t speak for \nPete, what I m trying to do in the process of my methodologies is to give you the illusion that you know \nwhat you re doing. Because in reality, often you don t know what you re doing but you need that closure \nto measure so that you can predict and optimize for the next go around. John Tibbetts More and more commercial \ninformations systems are becoming distributed systems, such as the benefits kiosk that I didn t have \ntime to examine here. The back-end processor has to be based on a very stable business model. We tend \nto view software tools as a vehicle for the developer communicating with the computer. More and more \nwe want languages so that developers can communicate with other developers and now with users. As you \nmove back toward the center of distributed systems you need to take much mom care about the kind of modelling \nyou do with the idea to make sure that it s a trusted environment understood by management, But as you \nmove towards the end-user iterative development becomes much more applicable. Peter Coad The real issue \nisn t a technical one. It has to do with risk reduction. Rather than doing phased development, or sort \nof phased development overlapping a bit, and doing all the analysis, then all the design then all the \ncode; there s just too much risk. In this way 00 development represents a reduction of risk. There are \nnew technologies to handle but the basic ideas go back to the Greeks. Things like classes and objects \nand personification are old ideas. Grady Booth I have a sound-bite for Dave, I am so efficient using \nthese object-oriented methods that I can write my software faster than I can write my books. Peter Coad \nI ve worked with some very strong Smalltalk developers and as we ve used OOA/OOD notation it s changed \nhow they think about building systems. They can think about the architectural issues graphically and \nthen immediately be back in Smalltalk. Dave Thomas I m pleased to hear this because one of my favorite \nexperiences with Peter s early method comes from down under. This was a rail system. During the design \nreview while leafing through the bubbles, they were trying to work out how to find the location of the \ntrain . . . Peter Coad Oh! I need to interject here. They were using %/SD and objectifying bubbles. My \nconsultant found the problem. Dave Thomas There was no Train! Peter Coad That s absolutely right, but \nour methods found it.  Audience Questions: Rick DeNatale We now need to introduce some new objects and \nmove from the single moderator format of the debate to the Oprah format, and take questions from the \naudience. Audience Questioner #l I m going to take the Ross Perot approach and disagree with both sides. \nI m on a project using CASE tools. I find that the process of drawing diagrams forces us to answer question \nthat we desperately need to answer. But I have one very strong overriding fear, and that s that we are \ndrawing things that have no shape. The panelists have introduced the notion that you can t just draw \nclasses, but even so if I had something that I claimed was a house plan that was drawn the way CASE diagrams \nwere, I couldn t tell how far it was from the bedroom to the bathroom. Is there something we can do to \ngive the things we do when we diagram our object-oriented systems more of a shape. Rick DeNatale I m \nnot sure how to paraphrase the question. Do you mean how do we give the systems shape? Audience questioner \n#l Or on the negative side, is it true that these things have no shape and that drawing pictures of them \nis useless. Grady Booth I ll ask a comeback question. How do you measure shape? Audience questioner #l \nBy the fact that in some sense that things that should be close to each other are close to each other \nand things that are far away should be far away. Grady Booth So you re speaking of the semantic closeness \nor distance among certain abstractions? Audience questioner #l That would be very helpful. Dave Thomas \nOne of the interesting things I ve seen in that regard comes from the UK where fractals were used to \nmeasure the energy in terms of how far the distance is. It makes wonderful pictures, but I m not sure \nthat its the shape you might want. One of the other issues is that when you re looking at a house you \nuse modelling tools for a house. Why leave the domain to use some notations. Those notations are useful \nfor certain parts. For instance Grady s object instance diagram, or use cases, give you a notion of where \nthe main interaction of the critical thread is. Electrical engineers can look at a timing diagram and \nsay okay, I know how to build it now. These instance specific snapshots can be very useful. Peter Coad \nThere a couple of things on structure. One of them is looking at collaboration nets. Looking at the message \ntraffic going on. In play-acting interactions by passing around a ball, over time the people interacting \nget closer together so they don t miss. This shows the dynamic interactions and groupings. Audience Questioner \n#2 We ve found that design notations are very good for helping the developers understand what we need \nto do. The biggest problem we have is what do we present to customers who don t understand or care about \nobjects. When we go to buy a car they tell us it has a cruise control system and they don t show us the \nintegrated circuit. And we re happy. Would the panelists like to address that? Grady Booth We ve found \nthat presenting pieces of our notation focusing on two elements. First, what the architecture was in \nterms of groupings and clusters of classes. Second, showing the key mechanisms was valuable because they \ntend to represent scenarios which represent outward behavior. It s kind of like selling a data flow diagram \nbut objectifying it significantly. Audience Questioner #2 It s a pity that more of the methodologies \ndon t include this. Grady Booth It s a pity that more end-users don t get involved in the software development \nprocess. John Tibbetts But they will. Grady Booth They should. John Tibbetts They will because in the \nlong run there will be no more programmers, I think that there s a talk tomorrow . . . Grady Booth Well \nyeah, I ll have something to say about that tomorrow. John Tibbetts In the middle-ages there was a job \ndescription for lectors, because so few people could read. Programmers will disappear for the same reasons \nthat lectors did. Not because nobody will program but because everyone will. The reason we need methodological \nsupport in some applications is because there is such a huge span from the language and culture of the \nusers to the language and culture of the programmers. Ultimately we will see a convergence with languages \nwhich the users will understand to describe their own systems. Peter Coad Domain experts have to be on \nthe team. If you tried to do object oriented work without domain experts, I d refuse to come play with \nyou. You need to stay close to domain vocabulary. Play-acting is very effective. Doing a few core classes \nand building something so they can see it for real. Dave Thomas The whole point is to have refinable \nmodels so that the customer can see and feel the system. Another concern I have is that some people feel \nthat if you make a movie, you don t have to do anything else. This is a danger. Audience Questioner #3 \n(Adele Goldberg) I stood up here to complain. My question for all of you is why should I vote for any \nof you. The debate that was stated was the question of whether methods and tools hamper the development \nprocess. What we got instead was a tirade and commentary on each other s individual work. This isn t \na question of whether Grady s methodology is any good or not, or Peter s methodology is any good or not; \nor whether they have any methodology at all which is a question we could ask; or whether having a change \ncontrol set of tools like what Dave ships out is in fact a methodology and whether it s any good or not. \nWhat I expected was hard evidence. Show me a case where the use of methods and tools in support of those \nmethodologies caused analysis paralysis where nothing got developed. I know you can do that. The audience \nneeds to understand whether it was the methods and tools or the poor management of the methods and tools \nthat caused the hampering problem. On the other side remember that this is about the full development \nprocess not just creating things in the first place. The purpose of a methodology is to help us understand \nwhy something is there so we can make changes safely. Show me a case where not having the ability to \nanswer why hampers the full development process. So tell me why should I vote for either side. Rick \nDeNatale To summarize I think it s, Let s get off the character issue, and address the issues. Grady \nBooth Let me answer by citing two failures in object oriented projects. In one circumstance we were asked \nto help with the architecture of a very large system which was already developed in a certain language \nand they wished to move to an object-oriented language. The lead programmer took to the notation reasonably \nwell and drew pictures left and right. But when asked to produce a . h file to capture his design decisions \nhe was unwilling to do so, and we later realized that he was incapable of doing so and he was masking \nthis inability. This was a real failure because even though they had drawn very pretty pictures they \nhad an illusion that they were doing something real. Until such time as they could capture this concretely \nin software they hadn t done anything meaningful. Adele Goldberg So I m going to vote for John and David \nbecause you just gave me the one example I want, where using methodology hampered development. Grady \nBooth But the point is: Was it an issue of using the pictures or not. They were able to use the diagrams \nand move on into creating a good architecture. What we found was certain individuals that had been placed \nin senior positions were unable to translate from those abstractions into the implementation itself. \nIt had nothing to do with any notation. At the other end of the spectrum: The canonical size of a C++ \nproject among PC applications is around 3- 7 (programmers). But what s astounding is the number of projects \nthat never reach completion because they start coding immediately without an architecture, even on a \nteam size that small they had never built any artifacts besides the code. Dave Thomas There are two key \nthemes here: One is that architecture is still hard, and I don t believe any of the methods help because \narchitectures are a signature of the product you are building and come from the domain knowledge you \nhave. The other is discipline. If you are building a house with cement, you and your spouse need to really \nagree on where the walls will be because you ll need a jack-hammer to move them. On the projects we ve \nseen that have failed it s been because of lack of architecture and discipline. The methods and tools \nare really means of describing the architecture and mapping those through the process and helping with \nthe discipline. Grady Booth I really hate the term CASE tools because the wells have been poisoned in \nso many cases. I see the notations I deal with as a way of visualizing architectures, in a way I can \nt do with the textual languages. That s where the real power is. John Tibbetts As you can tell from the \ntone of my remarks I m not against CASE and methodology except when they have been misapplied. The only \nexample of a project that I ve been involved with in which a methodology actually hampered 00 implementation \nhad to do with the development of an OOUI. Because of organizational standards they weren t using these \nkinds of methodologies, they were using M/SD. They were forced into spending months doing data flow diagrams \nfor drag and drop desk-tops. It was a nightmare that only stopped when we found our first article by \nGrady by which we proved to ourselves that this was an inappropriate methodology for building an object \noriented user interfaces. Tools and methodologies are strong medicine, and like any strong medicine it \ns important to apply them in the right place. Peter Coad Adele, perhaps there are situations where methods \nand tools impede 00 development, but our colleagues haven t given a single concrete example, but the \nburden of proof is on them. First and foremost the failures have been sociological. We tend to believe \nthat if we only have the right tools everything will be okay. We need to focus on people issues: creativity \nand innovation of the team; support from the organization; autonomy and empowerment; quality working \nenvironment. These are very simple things that go back to peopleware as a concept. Rick DeNatale Our \ntime is up. I want to apologize to the people in the audience that didn t get a chance to ask their questions. \nI hope you found the session enjoyable and enlightening. I would like to thank Scott o!eDeugd of the \nGary Lab for help in proofreading this report.  Contact information: Rick DeNatale IBM Programming Systems \nCary NC   \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Rick DeNatale", "author_profile_id": "81100541816", "affiliation": "", "person_id": "PP31076370", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157718", "year": "1992", "article_id": "157718", "conference": "OOPSLA", "title": "The role of methods and case in OO development", "url": "http://dl.acm.org/citation.cfm?id=157718"}