{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5-10 October 1992 Proceedings Experience Report- \nObjects in the Life-Cycle Report by: Paul Townsend MRR Teltech Ltd. Gail C. Murphy University of Washington \ncustomers, TRICS maintains a model of the network Introduction topology. This model is built from managed \nobjects Investigations into object-oriented technology at like equipment, location and circuits that \nare MPR Teltech Ltd. began in 1988. After building combined using three types of relations between several \nprototypes and investigating high-risk issues managed objects: composition, assembly and involved with \nthe application of the technology, we association. felt ready in 1991 to develop a production system \nThe TRICS system runs within a distributed Unix with objects. The result of this effort was the environment. \nThe initial installation involves up to distributed TRICS (Trouble Reporting Integrator 75 different \nworkstations along with 2 servers, with for Customer Surveillance) system that is now installed and in \nuse. This report summarizes our an aggregate total number of user interface sessions of 255. Alarms indicating \nproblems with the experiences developing TRICS and lets you in on network arrive from up to 9 different \nexternal how practice differed from theory and reality monitoring systems. differed from p1an.l The TRICS \nsoftware is divided into knowledge and What is TRICS? presentation (Unix) processes. The five knowledge \nprocesses that encapsulate the managed objects and The objective of the TRICS software system is to the \nnetwork topology are implemented in Eiffel. The improve the quality of service a telecommunications nine \npresentation processes that provide the company provides to large business customers by integrated graphical \nand textual displays tomonitoring customer networks, identifying network visualize the effects of alarms \non the network areproblems prior to service degradation, and written in C++ using the Interviews graphicalresponding \nto discovered problems on a pro-active library [LVC89]. Connections between the basis. To correlate discovered \nproblems to affected presentation processes and the knowledge processes are supported by a set of message \nrouting processes also implemented in Eiffel. 1 The information in this experience report is an extract \nfrom a chapter entitled Engineering Software with Objects prepared for a forthcoming book on object-oriented \napplications edited by Jean-Marc Nerson and Bertrand Meyer S-10 October 1992 -25-Addendum to the Proceedings \nHow was TRIGS Developed? Berard s recursive/parallel model [Ber90]. Figure 2 illustrates the changes \nwe have made to the iterative Figure 1 illustrates the iterative life-cycle used to life-cycle as a result \nof our experiences building develop TRICS and maps the activities of the life- TRIGS . cycle to the methodology/tools \napplied at each stage of development. This iterative approach is similar to (-_ _ _ _ _ _ _ _ _ _ _ I \nI I I I I I I I I I I I I I I I I I I I I I I I I I I I 1 System Test --a--------, I I Requirements \nAnalysis Documented as functional requirements. Systems Analysis Tailored Coad and Yourdon Object-Oriented \nAnalysis method [M&#38;l]. Process Design Ad-hoc based on previous experience with surveillance applications. \nClass Design Responsibility-driven design [WWW90] with Booth diagrams [Boo91]. Implementation Eiffel, \nC++, C. Cluster Test Specification-based cluster testing. System Test Conventional specification-based \nsystem testing approach. Figure 1: TRIGS Software Development Life-Cycle OOPSLA 92 -26. Vancouver, British \nColumbia System Design Q  Requirements Analysis Documented as functional requirements. Domain &#38; \nSystems Tailored Coad and Yourdon Object-Oriented Analysis method [Mm9 11. Analysis System Design Physical \nand logical ([Boo91], [RBPEL91]). Cluster Analysis Tailored Coad and Yourdon Object-Oriented Analysis \nmethod [Mu19 11. Class Design Responsibility-driven design [WBW90] with Booth diagrams [Boo91]. Implementation \nEiffel, C++, C. Class Test SDecification-based usinp: ACE tools lMW921. Cluster Test Specification-based \ncluster testing. Svstem Test Conventional specification-based svstem testing approach. Figure 2: Revised \nSoftware Development Life-Cycle objects from analysis through the logical and What did we do Right : \nphysical design stages even though this meant melding various object-oriented methods. We educated the \ndevelopment team in object- * The iterative approach used supported a planned oriented technology and \nprovided them with the approach to parallel development activities opportunity to prototype. through \nthe separate Class Design, Implement We changed our methodological approach and and Test streams. This \npermitted additional did not apply structured analysis and design development tracks to be added as new \nrequired techniques. We treated the system in terms of S-10 October 1992 -27-Addendum to the Proceedings \nfunctionality was identified without adversely affecting existing activities. We chose implementation \nlanguages based on the concept of the right tool for the job. Eiffel provided us with a clean powerful \nlanguage with strong object structuring capabilities to model the complexity of the network topology, \nwhile C++ combined with Interviews permitted the implementation of user interfaces in a productive manner. \nBecause Eiffel is the more productive language for us, we choose to implement our message routing layer \nwith Eiffel resulting in the co-existence of Eiffel and C++ in the same Unix process. Integration between \nEiffel and C++ in these processes is through C. This permits the garbage collection capabilities of Eiffel \nto be utilized in the messaging layer of the C++ user interface processes. We developed on multiple platforms \nas we wanted the ability to deploy in a heterogeneous Unix environment. This was crucial as object- oriented \ntechnology does not magically solve the problems associated with deployment of a system on multiple heterogeneous \nplatforms.  What will we do Different the Next Time: We recognize that Requirements Analysis consists \nof two separate, but related activities: the analysis of the domain; and the documentation of the client \ns requirements. The results of these activities feed into an overall System Analysis that should be (mostly) \ncompleted prior to undertaking a System Design (see Figure 2). We will integrate analysis activities \ninto each parallel stream of development to improve traceability. This means applying object- oriented \nanalysis methods to clusters in addition to the system itself. When applying object- oriented analysis, \nwe will do a fullanalysis. In the initial development of TRICS, we did not include sufficient behavioural \naspects of class interactions in the object-oriented analysis model. The lack of behaviour made the model \ndifficult to review. It also deferred behavioural decisions until design, and sometimes even implementation, \nresulting in weaker abstractions and components that were less likely to be reusable. We will ensure \nthat iteration is more controlled by considering how modifications required due to analysis, design and/or \nimplementation affect each aspect of the system starting from the domain analysis. Iterations and multiple \nparallel development streams present many new challenges to project management in the areas of project \ndocument versioning, the planning of iterations and the presentation of incremental changes in system \nartifacts. Prototyping will not be limited to operational prototyping prior to system development. Rather, \ncontinual prototyping will be encouraged that is parallel to the system development. References [Ber90] \nEdward Berard. Understanding the Recursive/Parallel Life Cycle. Hotline on Object- Oriented Technology, \nl(7), May 1990. [Boo9 l] Grady Booth. Object-Oriented Design with Applications. Benjamin/Cummings, 1991. \n[LVC89] Mark Linton, John Vlissides, and Paul Calder. Composing User Interfaces with Interviews. IEEE \nComputer, 22(2), February 1989. [Mm9 l] Gail Murphy. Experiences in Applying Object-Oriented Analysis. \nIn Proceedings of the Technology of Object-Oriented Languages and Systems (TOOLS 5) Conference, Prentice-Hall, \n1992. [MW92] Gail Murphy and Pok Wong. Towards a Testing Methodology for Object-Oriented Systems. In \nAddendum to the Proceedings of the Object- Oriented Programming Systems, Languages and Applications Conference, \n1992. [RBPEL91] James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy and William Lorensen. \nObject-Oriented Modeling and Design, Prentice Hall, 1991. l3VWW90] Rebecca Wirfs-Brock, Brian Wilkerson \nand Lauren Weiner. Designing Object-Oriented Software. Prentice Hall, 1990. Contact information: Paul \nTownsend MPR Teltech Ltd. 8999 Nelson Way Burnaby, B.C. Canada V5A 4B5 townsend@mprgate.mpr.ca. Gail \nC. Murphy Department of Computer Science and Engineering, University of Washington, Seattle, WA, 98195, \n gmurphy@cs.washington.edu. OOPSLA 92 -28-Vancouver, British Columbia   \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Paul Townsend", "author_profile_id": "81100257117", "affiliation": "", "person_id": "PP31099470", "email_address": "", "orcid_id": ""}, {"name": "Gail C. Murphy", "author_profile_id": "81336491450", "affiliation": "", "person_id": "PP42052542", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157714", "year": "1992", "article_id": "157714", "conference": "OOPSLA", "title": "Objects in the life-cycle", "url": "http://dl.acm.org/citation.cfm?id=157714"}