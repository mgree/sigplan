{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5-10 October 1992 Proceedings Foster Submission- \n A Distributed, Visual Object Environment using Stages: Aggregation Objects with Local Namespaces Report \nby: David M. Morton Andrew M. Drinnan National Research Council of Canada Introduction This project \narises from the need to improve the performance of visual, interactive simulations currently running \non a single workstation. Connecting additional workstations in a LAN results in a loosely coupled distributed \nsystem. An efficient language for exploiting this limited parallelism is required. Distributed Audition, \nan extension to Audition, is a specification for such a language.  Distributed Audition Audition is \na class-based object-oriented language that extends the theatrical paradigm introduced in Rehearsal World \n[Finzer &#38; Gould 19841, with a specialized group of classes, called Performers, that provide the following: \n1. Instance based behaviour 2. Visual accessibility 3. Aggregation and local naming  The third feature \nis implemented by a further specialized subclass of Performer called Stage. Stages group objects with \ncommon behaviours and allow these objects to refer to each other by a local name. These features are \nfurther described in pegg &#38; Worsley 19891, [Drinnan &#38; Morton 19921. A stage manages a group of \ninteracting objects and has extensible structure and behaviour. It maintains a queue of messages to be \nprocessed, and may have multiple processes. Each stage uses a monitor to control concurrency and maintain \nsuspended processes. Thus, stages are active; they provide an asynchronous locus of activity [Ellis&#38;Gibbs \n19891. Stages also participate in a hierarchy of local namespaces. The scope for resolution of object \nnames is down the stage hierarchy. This form of encapsulation reduces the accessibility and visibility \nof these objects to objects that are on lower stages. Since objects inherit from other objects within \ntheir scope, stages also factor the inheritance hierarchy. In Distributed Audition, each workstation \nwould maintain a visual and logical representation of the shared stage hierarchy. Although stages may \nbe moved across workstation boundaries, a particular stage may be resident on only one workstation at \nany time. It is represented by a proxy on all other workstations. The stage that the proxy represents \nis referred to as its parent stage. Proxy stages retain enough of the structure of their parent stage \nto participate in name and method resolution on their 5-10 October l!M2 157 - Addendum to the Proceedings \nhost workstation. This reduces network transmissions, and retains the inheritance and naming scheme. \nThus a global, partitioned name space is maintained in a distributed memory environment. Workstations \nhosting more than one stage allocate processor resources among stages. Distributed Audition is intended \nfor a small number of stages, in comparison to the total number of objects. The ratio of the number of \nstages to the number of workstations is in the order of one. For a more complete specification of Distributed \nAudition see [Morton 19921.  Applications of Distributed Audition- Knowledge-Based Simulation of Complicated \nSystems Knowledge-based simulations employ multiple decision making agents, complex entities performing \ntasks such as planning, scheduling and hypothesis formulation in an environment that may be full of uncertainty \nand contain incomplete and distorted information [Kerkoffs et al 19851. Subprocesses that are heuristic \nand symbolic are modelled by intelligent agents, while the remaining entities are modelled conventionally. \nSuch a system may be distributed, with agents occupying different nodes in a network. Distributed Audition \nis an example of such a system. Stages model part-whole relationships and form aggregate objects of arbitrary \ncomplexity. It has an event driven simulation clock with mechanisms for synchronization across workstations. \nIt also contains an expert system class for intelligent agents. A potential intelligent simulation application \nis that of an Air Traffic Control system. Suppose that each zone of such a simulation is implemented \nas a stage, and each region occupies one workstation. The workstations are connected in a local area \nnetwork, with some extra workstation capacity. Airplanes communicate with the air traffic control centre \nin each zone, and negotiate courses, altitudes etc. When an aircraft is ready to pass from one zone to \nthe next, it moves to the appropriate workstation. Suppose that an aircraft is planning a course across \nseveral regions. Availability of paths will be the function of time of arrival in a sector, and will \ndepend upon weather, other aircraft, staffing levels in each zone, etc. It may be possible to plan several \nalternate routes and evaluate the efficacy of each route. If each aircraft was a stage, and if extra \nworkstation capacity is available, the aircraft could clone itself, utilise the extra workstation capacity \nto work out alternate routes, and then destroy the clones and pick the best route. Route evaluation could \nutilize a rule-based expert system approach. Concluding Remarks By utilizing the grouping and naming \ncapabilities already inherent in Audition s stages, Distributed Audition provides an effective and efficient \nfacility for managing the sharing of objects in a distributed system. References [Begg &#38; Worsley \n19891 I. Begg, R. P. Worsley, Audition-An Intelligent Simulation Environment. Proceedings of the Summer \nSimulation Conference, Society for Computer Simulation, San Diego, California, 1989. [Drinnan &#38; Morton \n19921 A. Drinnan, D. Morton, Using a Component-Based Approach to Model Complicated Objects, Publication \nPending. [Ellis&#38;Gibbs 19891 C. A. Ellis, J. Gibbs, Active Objects: Realities and Possibilities, in \nObject Oriented Concepts, Databases and Applications, Won Kim &#38; Fredrick Lochovsky, eds., ACM Press, \n1989. [Finzer &#38; Gould 19841 W. Finzer, L. Gould, Programming by Rehearsal, Report SCL- 84-1, 1984, \nXerox Corp., Palo Alto Research Centre. Kerkoffs et al 19851 E. J. H. Kerckhoffs, G. C. Vansteenkiste, \nB. P. Ziegler, General Considerations of AI Applied To Simulation, Proceedings of the European Conference \nof Al Applied to Simulation, February 25-26,1985, Society for Computer Simulation, San Diego, Ca. [Morton \n1992 ] D. Morton, A Distributed Visual Object System Using Aggregation Objects with a Local Namespace, \nReport IME-MET-TR-007, National Research Council, Ottawa, Canada Contact information: David M. Morton \nAndrew M. Drinnan National Research Council of Canada morton@iitvan.nrc.ca drinnan@iitvan.nrc.ca OOPSLAW \n-158-Vancouver, British Columbia  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "David M. Morton", "author_profile_id": "81332517080", "affiliation": "", "person_id": "PP31089915", "email_address": "", "orcid_id": ""}, {"name": "Andrew M. Drinnan", "author_profile_id": "81100323662", "affiliation": "", "person_id": "P17865", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157740", "year": "1992", "article_id": "157740", "conference": "OOPSLA", "title": "A distributed, visual object environment using stages: aggregation objects with local namespaces", "url": "http://dl.acm.org/citation.cfm?id=157740"}