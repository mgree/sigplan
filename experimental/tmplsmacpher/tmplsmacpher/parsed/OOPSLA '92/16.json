{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - 10 October 1992 Proceedings Workshop \nReport- Object-Oriented Programming Languages: The Next Generation Report by: Fred A. Cummins EDS Artificial \nIntelligence Services Introduction The goal of this workshop was to bring together a variety of experiences \nand insights to explore alternative languages and identify important features for consideration in future \nlanguage development efforts. The workshop was organized by Mamdouh Ibrahim of EDS AI Services, Fred \nCummins of EDS AI Services, Andreas Paepcke of Hewlett-Packard Research Labs, and Craig Chambers of University \nof Washington. 34 papers were submitted and all contributors were invited to participate in the workshop. \nThe workshop was held on Sunday, October 19,1992. Fred Cummins introduced the workshop with a perspective \non language objectives, environment, and key enablers along with a taxonomy of language features. The \nworkshop was divided into four major subject- matter categories each chaired by one of the workshop organizers: \n9 Bringing Languages Closer to Users- Andreas Paepcke Multiple Programming Paradigms and Novel Mechanisms-Mamdouh \nIbrahim  Encapsulation and Abstraction Mechanisms- Craig Chambers Modeling Conslructs-Fred Cummins Each \nof these sessions is discussed briefly, below, followed by highlights of the issues raised and conclusions \nregarding the workshop experience.  Bringing Languages Closer to Users This session focused on graphical \nand multimedia interfaces. Margaret Burnett discussed her work on VPL Forms/3 a visual programming language \nwith declarative specification of cell values. She described the key problems subject to future research: \n(1) how to generalize, (2) scaling up to large applications, (3) abstraction, and (4) specification of \ncomplex algorithms, Jay Fenton described work on Kalida, a multimedia development environment. He identified \nproblems with (1) syndication, (2) linking symbolic statements with multimedia objects, and (3) connecting \nhypermedia spaces. Multiple Programming Paradigms and Novel Mechanisms The second session focused on \nthe integration of multiple paradigms such as constraint and set-based programming. Glenn Silverstein \ndescribed the incorporation of sets in LAURE. It supports the efficient processing of queries, rules \nand constraints. Jiarong Li described a constraint-based extension of Smalltalk. He described the approach \nas applicable to S-10 October 1992 -Xl-Addendum to the Proceedings other object-oriented languages. Antero \nTaivalsaari described self-sufficient objects as an alternative to inheritance. He asserts that this \nprovides advantages in maintenance and reuse over the dependencies created by inheritance.  Encapsulation \nand Abstraction Mechanisms Clemens Szyperski raised the issue of type checking to assure correctness \nof extensions to a system. He asserted that independently compiled units could be type-checked within \nthemselves and assure consistency for integration. Richard LeBlanc, Jr., proposed a variation on the \nsemantics of the assignment statement where the assigned value is cloned. He asserts that this enforces \nencapsulation and thus assures the internal integrity of objects. Lodewijk Bergmans described the concept \nof composition filters where messages to an object may be redefined, intercepted or redirected. He asserted \nthat this addresses a number of limitations of current languages and provides more robust modeling and \nintegration capabilities Richard Gabriel discussed desired features of object-oriented languages and \nthe process of program development to be supported. He focused attention on the need for abstraction \nfrom common patterns or examples and the systematic incorporation of variations. Modeling Constructs \nFred Cummins described an alternative object meta- model for modeling applications where an object is \na collection of tuples; each tuple determines an object behavior (e.g., a state variable or method). \nHe asserts that such a model provides advantages for automated reasoning, representation of alternative \nbeliefs, constraint processing, and memory of prior states. Chris Laffra described his work with a language \nthat incorporates a declarative definition of object interface protocols. The language then provides \nfacilities for validating object compliance with the protocol. Phillip Yelland described a dynamic classification \nmechanism implemented in Smalltalk. Instances are reclassified based on their compliance with constraining \naxioms; this enables distinct behavior to be defined based on the state of an object or the completeness \nof knowledge about it. Highlights of Issues A number of issues were raised by the presenters and by \nother participants in the questions and discussions. A number of these are outlined below. Alternatives \nto inheritance Inheritance is a powerful facility for rapid development by specialization, but in the \nlong term, the propagation of change effected by inheritance can be counter-productive, especially when \nthe classes being changed and their progeny are supported by different organizations. Is inheritance \nonly a rapid development mechanism; should completed classes be self-sufficient? Visual programming vs. \nabstraction Visual programming tends to bring a concrete representation where verbal representation facilitates \nabstract expression. Can visual programming languages adequately support abstraction? Can object-oriented \nanalysis diagramming techniques be viewed as visual programming languages? Is there a distinct requirement \nfor a language to represent examples from which concepts, rules and processes can be abstracted? Integration \nof independently developed components The prospect of an object marketplace raises issues about how independently \ndeveloped components can be integrated with assurance of compatibility. The declarative expression of \nprotocols is a possibility, but it adds considerable development overhead. Some form of filters may be \nappropriate for adapting object interfaces. Dynamic classification There seems to be value in supporting \ndynamic changes to the identification of an object s class. It opens the door to interesting capabilities \nsuch as changes to the behavior of an object based on its state or selection of the class of an object \nbased on information about its real-world counterpart. Specialized language features vs. reflection A \nnumber of extensions to language capabilities can be implemented as applications if the language is reflective. \nShould languages be designed to support multiple paradigms, or should they simply be developed with sufficient \nreflective capability to allow these paradigms to be implemented. OOPSLAW -82-Vancouver, British Columbia \nDesign and programming by example Experience with visual languages, prototyping and common design techniques \nsuggest that stronger support might be provided to capture concrete examples and then abstract them to \nmore general solutions. What are the language feature implications of this? Language vs. environment \nConventional technology makes a strong distinction between language and environment. Smalltalk and CLOS \nenvironments blur this distinction and potentially conceal the operating system. Should the distinction \nbe sustained. What are the language implications of object-oriented operating systems? Declarative programming \nDeclarative programming appears to offer opportunities for development of more generalized code, code \nvalidation, and optimization. How can/should declarative programming be integrated with object-oriented \nprogramming? Is a hybrid language beneficial? Protocol definition How can the object interface be clearly \ndefined independent of the implementation? What language facilities are needed? Pure vs. hybrid object-oriented \nprogramming languages Pure object-oriented languages restrict the programming paradigm and consequently \nfacilitate the development of performance optimization, reflective capabilities, extensions and tools \nthat are consistent with the object-oriented paradigm. Is the development of more robust capabilities \nencumbered by the prevalence of hybrid languages? Type mechanisms Typing restricts the flexibility of \nthe resulting software. Coupling of types to classes ties interface to implementation. More expressive \nforms of typing might provide greater flexibility. Typing should provide the mechanism for validating \nthe integration of independently developed units. What form of typing can allow flexibility yet support \nvalidation?  Conclusions The general attitude of participants seemed to be in support of the workshop \nsubject and interest in continued discussion. There were various suggestions for format alternatives \nwith an emphasis on more discussion and less presentation. The features taxonomy was considered useful \nfor discussion by some, but not a basis for definition of language requirements or an outline for discussion. \nThere was some expression of interest in participation in a forum that would provide more time for in-depth \ndiscussions on key topics once the key topics could be sorted out. 5-10 October 1992 -83-Addendum to \nthe Proceedings  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Fred A. Cummins", "author_profile_id": "81100067090", "affiliation": "", "person_id": "PP31073614", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157725", "year": "1992", "article_id": "157725", "conference": "OOPSLA", "title": "Object-oriented programming languages: the next generation", "url": "http://dl.acm.org/citation.cfm?id=157725"}