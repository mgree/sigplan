{"article_publication_date": "12-01-1992", "fulltext": "\n Phoenix, Arizona 6 -If October 3991 OOPSLA 91 Workshop- Reflection and Metalevel Architectures in Object-Oriented \nProgramming Organizer: Mamdouh H. Ibrahim Electronic Data Systems/Artificial Intelligence Services This \nsummary was prepared from a transcript of a recorded tape andfrom notes taken by Bob Hinkle of University \nof Illinois, Urbana- Champaign.  Introduction: During OOPSLA/ECOOP 90, the first workshop on Reflection \nand Metalevel Architectures in Object- Oriented Programming was organized to provide researchers in this \nfield with a forum through which they can discuss related issues, present their work, and explore new \nideas. Based on the success of the the first workshop, a second workshop on the same subject was held \nin conjunction with OOPSLA 9 1, in Phoenix, Arizona, October 7, 1991. The workshop was divided into live \nsessions. These were: Semantics and Theory, Concurrency, Implementation, Languages, and Reflective Systems. \nEach session started with several presentations selected from the accepted papers, followed by moderated \ndiscussions. The following is a summary of the workshop activities: Session 1: Semantics and Theory (Moderated \nby Takuo Watanabe) Takuo Watanabe introduced Robert Muller and Hiroyasu Sugano as the two presenters \nfor this session. Muller presented his paper On Self- Interpretation and Reflection in Lambda Calculus. \nHis objective was to establish an equational logic for a language with simple kind of reflection. Mullar \nstarted with the language M-Lisp. Using structured operational semantics, he developed an equational \nlogic and proved it was consistent, and that it corresponded to operational equality in the language. \nHe then extended M-Lisp by introducing eval and reify operators. After adding two reductions to the original \nequational theory, Muller showed the derived theory is still consistent and corresponds to operational \nequality. At this point, Brian Smith expressed a concern that the representation relation isn t brought \nout as a first-class citizen. Muller responded that this representation is a total function from the \nset of all terms to their representation, and that he established the representation a priori and then \nconsidered the reduction properties. Next Sugano presented his paper on Modelling Group Reflection in \na Simple Concurrent Constraint Language. He first described CCO, a concurrent constraint logic language \nbased on fine-grained parallelism, asynchronous communication, and synchronization via constraint entailment. \nHe then defined CCR as an extension of CC0 that uses metalevel architecture to deal with syntactic and \nsemantic constructs as objects. This will allow building a meta-configuration for a group of active agents \nwhen reflective atomic formulae of the agents are encountered. Meta-configuration can then carry out \nthe reflective computation desired. Addendum to the Proceedings OOPSLA 91 In response to a question about \nhis ideas regarding reflection based on whole computations, Sugano stated that his current framework \nis based on static grouping, but when he incorporates dynamic grouping, he would be able to specify the \nentire computation as the largest group, which should allow such a model. The general discussion of this \nsession focused on questions such as why is it so hard to define formal semantics for reflection and \nwhat are the problems? Why is reflection different from any other language feature? Brian Smith responded \nto these questions by stating that neither the subject matter of operational or denotational semantics \ncan get at the reflective relationship, and that without dealing with questions that address the relationship \nbetween the types at the meta-level and the types ate the base level, we will not have a theoretically \nsatisfying description of reflection. Another interesting question raised the issue of whether formal \nsemantics have to be reflective themselves, which could reduce complications as you go up. But the consensus \nwas that it would be a mistake to use reflection to describe the semantics. Session # 2: Concurrency \n(Moderated by Satoshi Matsuoka) In this session, Matsuoka introduced 4 speakers before opening the floor \nfor general discussion. The speaker were Luis Rodriguez, Alain Senteni, Yuuji Ichisugi, and Peter Balms. \nToward the goal of separating a computation description from the description of its parallelization, \nRodriguez used metaobjects, associated with each of the nodes in the program graph, to allow users to \ncreate new marks which provide the capability of augmenting or overriding the language implementation. \nThis approach is simple enough to avoid burdening the user with unwanted responsibility. Currently, his \napproach works for static process configurations and it does not address dynamic scheduling and load \nbalancing. Alain Senteni presented Reactalk a reflective extension of Actalk, which is a combination \nof Smalltalk and the actors ideas of Hewitt and Agha. Reflection was implemented by reifying every step \nof messaging. Some messages cause shifts to the meta-level, which are handled by lazy creation of me&#38;actors. \nIn response to Bobrow s question about the principles used to choose the granualarity for dividing the \nfunction of message arrival, Senteni indicated that the only principle was to achieve as much decomposition \nas possible, and that there are 6-11 October more questions than principles. He also indicated that there \nare meta-meta-objects, created lazily but there is no answer to how he is going to address the infinite-tower \nproblem. Yuuji Ichisugi introduced the language RbCl (Reflection-based Concurrent language). RbCl provides \nefficient reflective object-oriented concurrent programming that adapts easily to distributed environments. \nAnother interesting feature of RbCl is its symbiosis with C++, in which RbCl and C++ objects can exchange \nmessages using their own protocols. In RbCl, each base-level object may be represented by many meta-level \nobjects. Behavior can then be modified by altering meta- relationships. RbCl s me&#38;level has been \nimplemented in C++ which allow existing C++ libraries to be incorporated in the language. In response \nto a question about the possibility of having me&#38;objects for C++ objects, Ichisugi mentioned that \ncurrently C++ objects do not have me&#38;objects, though conceptually they could. Finally, Bahrs presented \nGOII as an extension to GO, an object-oriented graphics environment. Bahrs goal was to use reflection \nto monitor a system and to alter the computational strategy based on what was observed. To achieve that \ngoal, GOII uses functional units to divide communication, execution, and other tasks, in order to provide \nsufficient granualarity for extension and specialization of the system. A major feature of GOII is its \nability to spread these functional units among heterogeneous machines in the computing environment. Satoshi \nMatsuoka started the general discussion by giving two reasons for reflection to be more beneficial for \nobject-oriented concurrency: the complexity of these systems and the need for dynamic decision making \nneeded by these systems. Then he asked if reflection can make concurrent systems more robust, extensible, \nor useful? and what application will benefit? An interesting discussion started when Brian Smith suggested \na separation of what he called horizontal concurrency (in which two base-level objects compute simultaneously) \nand vertical concurrency (in which an object and its meta-object compute simultaneously). Bobrow found \nthe distinction confusing and questioned the meaning of vertical and what knowledge to be known in order \nto distinguish the two dimensions. In response, Smith indicated that by vertical he meant meta-level, \nbut he stressed that concurrency and knowledge are certainly independent notions. In a discussion about \nreification, several comments suggested that reification is needed to make local 1991 Phoenix, Arizona \nwhat was not, which is very beneficial for concurrency since it has so many no-local facts. David Ungar \nasked why the base level is different, and why we cannot shift down any further. One answer suggested \nthat shifting below the base level will not affect the real world. Another comment pointed out that there \nis no practical way to shift below the base into gates, electronics, etc. With the discussion shifting \nfrom concurrency to implementation, the subject of the next session, Matsuoka decided it is a good time \nto end the session, specially after it exceeded its original allocated time. Session # 3: Implementation \n(Moderated by Gregor Kiczales) As part of this session, Gregor Kiczales asked both Craig Chambers and \nJohn Rose to present their papers. To improve performance of a MetaSelf, a reflective language based \non SELF, Chambers proposed an approach in which the burden is placed on the compiler writer. The proposed \napproach uses partial evaluation technique to allow compiler writer achieve sufficient efficiency without \nimposing severe restrictions on the meta- programmer. Rose used meta-objects to represent tags (wrappers \nfor the dispatch table addresses) and keys (wrapper for indices into the table) when implementing dynamic \ndispatch. The meta-object protocol allowed him to satisfy design goals of efficiency, simplicity, and \nflexibility. Gregor kicked off the general discussion by asking how should performance be measured? benchmarks \nor measuring large program execution time? (the lesson of C and Lisp). Another question was how do the \ntechniques affect what is actually in the language? e.g., what can the user control, how easy to program, \nhow easy to debug, etc. David Ungar pointed out that any good implementation should do well on benchmarks \nwhile it is possible to find bad implementation (such as early Smalltalk implementations) that score \nhigh on the micro-benchmarks. He also indicated that there is no proof that it is possible to screw up \non a core micro-benchmark and then do OK by some larger level magic. Rose suggested that metaobject protocol \ncan be used to solve problems such as the explosion of dispatch table sizes. The discussion then focused \non the relationship between the infinite tower and efficiency. Brian Foote suggested that we should evaluate \nthe performance hit per level, and asked if we can make that independent of the level. Finally, in response \nto a question by Satoshi Matsuoka on whether a reflective language can be more efficient than the original \nlanguage, Kiczales claimed that this is possible and mentioned an example of large CLOS system where \na performance close to C++ was achieved by removing unneeded features using the metaobject protocol. \nSession # 4: Languages (Moderated by Pierre Cointe) Pierre Cointe asked Konstantin Laufer, Jacques Malenfant, \nand Yutaka Ishikawa to present their papers. Laufer s goal was to develop reflective systems that use \nstatic typing to avoid run time errors. By using the SK + Y combinator calculus with subclassing provided \nby F-bound polymorphism, he implemented metacircular interpreter that uses the type system of the implementation \nlanguage. Malenfant studied reflection in SELF. Potential sources of reflection in SELF are Maps (system \ngenerated entities at the language level) and Mirrors (SELF objects that can examine representation of \nthe mirrored objects). Malenfant pointed out that map objects cannot be reified and mirrors allow read \nonly access, to which Ungar pointed out that mirrors should have write access-that was a bug. Ungar also \nquestioned the value of reifying maps. Bobrow pointed out that Mirrors are fine for debugging, and asked \nwhat about language extensions? and what dimensions will mirrors support-persistent, constraints between \nslots? Ungar suggested trying an approach to do slot constraints based on assignment slots with methods \nusing a mirror before exposing the implementation. Finally, Ishikawa described AL-l, an adaptive programming \nlanguage system designed to build adaptive programs for distributed environments. AL-l employs a multi-model \nreflection framework-use the right model for the right purpose. Objects in AL-l are defined from basic \nmodels, state transitions, and grouping. In response to a question regarding the capability to add more \nmodels than the basic five, Ishikawa mentioned that future work will focus on developing a me&#38;language \nto be used for implementing models. Watanabe asked if this meta- language will be AL-l itself, to which \nIshikawa suggested that the first phase will focus on providing models in an ad hoc way, then they will \ntry to define a general meta-language. Addendum to the Proceedings OOPSLA 91 [3171 [Addendum to the \nAddendum to the Proceedings--OOPSLA 92-Vancouver, British Columbia] Session # 5: Reflective Systems (Moderated \nby Brian Foote) In this session, Brian Foote introduced only one speaker, Yasuhiko Yokote, who presented \nMuse, an operating system designed for large open systems and designed to be scalable, distributed, and \nself advancing. In Muse, an object is the single abstraction of computing resources in the system. Muse \nemploys me&#38;objects to define an execution environment for the object. A group of me&#38;objects comprise \na meta-space, and meta-spaces are organized into a meta-hierarchy. By changing an object meta- space \nto a remote one, the object can migrate physically to a different location thus supporting optimization \nof load balancing and network performance for distributed systems. In a discussion about the performance \nof the Muse operating system and how it compares to traditional architectures, Yokote predicted that \nit might take twice as much time as a non-reflective system based on the overhead. Brian Foote pointed \nout that some of the features might not be possible to implement in a non-reflective operating system \nand asked if a new implementation can improve the performance. Mario Tokoro suggested that using dynamic \ncompilation techniques may reduce the overhead for the second and subsequent invocation of a method. \nHe then added that the current implementation is the first attempt to implement a large reflective system \non top of silicon, and perhaps future versions can be more efficient. Finally, Tokoro pointed out that \nwith the reflective architecture of Muse, the notion of being able to use a multi-language system very \neasily gives you opportunities for using specialized techniques which are suitable for particular languages. \nObservations and Workshop Conclusions The workshop activities continued from where the previous workshop \nended. There were fewer discussions addressing general definitions; instead, the focus was on concrete \napproaches that deal with solutions for implementation of reflective languages and applications, and \nthe development of formal semantics for reflection. Although we have established a definition for reflection \nin last year s workshop, many people feel that it is not crisp enough. No formal semantics for reflection \nhave been completely developed. This is attributed to the fact that reflective behavior is more difficult \nto describe than other, non-reflective behavior. Concurrent object-oriented systems stand to gain the \nmost from reflection since they are more complex than sequential systems. For example, communication, \nscheduling, load balancing, the need for dynamic decision that affect the computation, etc. add extra \ncomplexity to concurrent systems. For reflective systems to be useful, several implementation problems \nmust be addressed. The most important is inefficiency. A partial evaluation solution was proposed. Another \napproach is to allow several levels of reflective facilities to be used based on the need for such facilities. \nFor example, reflective facilities needed during development could be turned off when the development \nis complete to gain run time speed. The development of the Muse operating system provides an example \nthat demonstrates the benefits of reflective applications without incurring a prohibitive performance \npenalty. Given that this is the first implementation of such a large reflective system, we can anticipate \nmore real and practical reflective applications in the near future.  Acknowledgements: I would like \nto thank the workshop organizers for their efforts in making this workshop as successful as last year \ns workshop. I also would like to thank the participants for discussions and for their excellent papers. \nFinally, I would like to thank Bob Hinkle from the University of Illinois, for his excellent notes that \ncomprise the majority of this summary. 6-11 October 1991 Phoenix, Arizona The Workshop Committee: Submitted \nPapers Pierre Cointe (European Coordinator) 1) Peter C. Bahrs, On Reflection In Objcct- Equipe mixte \nRank-Xerox France-LITP Oriented Heterogeneous Environments for Universite Pierre et Marie Curie Paris \n6 Concurrent Processing GOII, IBM, Boca 4 place Jussieu, 75252 PARIS CEDEX 05, France System Design, \n1000 NW 51st Street, pc@rxf.ibp.fr Internal Zip 1422, Boca Raton, Florida 33431, USA. Brian Foote (USA \nCoordinator) Department of Computer Science 2) Craig Chambers, Towards Efficient University of Illinois, \nUrbana-Champaign Implementation of Computational 1304 W. Springfield Ave. Reflection, Department of Computer \nUrbana, IL 61801, USA Science and Engineering, FR-35 University foote@cs.uiuc.edu of Washington, Seattle, \nWA 98195, USA. Gregor Kiczales (USA Coordinator) 3) Ruey-Juin Chang and Gordon S. Novak, Jr., Xerox PARC, \nComputational Reflection in Executions of 3333 Coyote Hill Rd., Knowledge Level Models, AI Laboratory, \nPalo Alto, CA 94304, USA The University of Texas at Austin, USA. gregor.pa@xerox.com 4) Bruce Cohen, \nTransformation and Mamdouh H. Ibrahim (Chair) Reflection: MetaProgramming as a EDS/Artificial Intelligence \nServices Software Process Tool, Computer Research 5555 New King Street Lab, P. 0. Box 500, M/S 50662, \nTektronix, Troy, MI 48007, USA Inc., Beaverton, OR 97077, USA. mhi@gmr.com 5) Roman Cunis and Manfred \nHein, Multi- Satoshi Matsuoka (Far East Coordinator) dimensional Modularity and the Pragmatics Department \nof Information Science of Reflection, University of Hamburg, The University of Tokyo, Laboratory for \nArtificial Intelligence, 7-3-1, Hongo, Bunkyo-ku Bodenstedtstr. 16,200O Hamburg 50, and Tokyo, Japan \nTechnical university of Berlin, Dept. of matsu@is.s.u-tokyo.ac.jp Computer Science, Sekr. 6-7, Franklinstr. \n28/29, 1000 Berlin 10, Germany. Takuo Watanabe (Far East Coordinator) Department of Information Science \n6) Brian Foote, Flexible Foundations and The University of Tokyo, Movable Walls, Department of Computer \n7-3-1, Hongo, Bunkyo-ku Science, University of Illinois, Urbana- Tokyo, Japan Champaign, 1304 W. Springfield, \nUrbana, takuo@is.s.u-tokyo.ac.jp IL 61801, USA. 7) Sylvain Giroux and Alain Senteni, REACTALK-a reflective \nversion of ACTALK Data Age Corp, 2035 Cote-de- Liesse, #201, Ville St-Laurent, Quebec, Canada, H4N 2M5, \nand Labomtoire Incognito and Dept de Didactique, Universite de Montreal, C.P. 6128, Succ A, Montreal, \nQuebec, Canada H3C 3J7. 8) Mamdouh H. Ibrahim, The Role of Reflection in Integrating Multiple AI Programming \nParadigms, Electronic Data Systems, Artificial Intelligence Services, 5555 New King Street, Troy, MI \n48007, USA. 9) Yutaka Ishikawa and Hideaki Okamura, RA New Reflective Architecture: AL-l Approach, Electrotechnical \nLaboratory, l-l- Addendum to the Proceedings OOPSLA 91 13191 10) 11) 12) 13) 14) 15) 16) 17) 18) 4 Umezono, \nTsukuba, Ibaraki, 305 Japan, and Department of Computer Science, Keio Universite, 3-14-1 Hiyoshi, Kohoku-ku, \nKanagawa, 223 Japan. Gregor Kiczales, Jim des Rivieres, and Daniel G. Bobrow, Metaobject Protocols, System \nSciences Laboratory, Xerox Palo Alto Research Center, 3333 Coyote Hill Road, Palo Alto, CA 94304, USA. \nKonstantin Laufer and Martin Odersky, Reflection in Type Systems, Courant Institute of Mathematical Sciences, \nNew York University, 251 Mercer Street, New York, NY 10012, and IBM T.J. Watson Research Center, P.O. \nBox 704, Yorktown Heights, NY 10598, USA. Dir-k Lutzebaeck, Modeling Reflection in Distributed Systems \nby Reflective Actors, German National Institute of Computer Science for Open Communication Systems (GMD-FOKUS), \nHardenbergplatz 2, 1000 Berlin 12, Germany. J. Malenfant, P. Cointe, and C. Dony, Reflection in Prototype-Based \nObject-Oriented Programming Languages, Equipe mixte Rank-Xerox France-LIT?, Universite Pierre et Marie \nCurie, Tour 45- 55, Bureau 203,4 Place Jussieu, 75252 Paris CEDEX 05, France. Satoshi Matsuoka, Takuo \nWatanabe, Yuuji Ichisugi, and Akinori Yonezawa, Object- Oriented Concurrent Reflective Architectures, \nDepartment of Information Science, The University of Tokyo, 7-3-l Hongo, Bunkyo-ku, Tokyo 113, Japan. \nJeff McAffer, Variably Asynchronous, Reflective Tasks in Smalltalk, Object Technology International, \n1785 Woodward Drive, Ottawa, Ontario, Canada, K2C OP9. Ralf Moller, REvent Models or Meta- Level Architectures \nbeyond slot-value-using-class, Dept. of Computer Science, University of Hamburg, Bodenstedtstr. 16, 2000Hamburg \n50, Germany. Robert Muller, On Self-Interpretation and Reflection in l-calculus, Aiken Computation Laboratory, \nHarvard University, Cambridge, MA, 02138, USA. Chisato Numaoka, Reflection in Multi- Agent Systems,S \nSony Computer Science 19) 20) 21) 22) 23) 24) 25) 26) 27) Laboratory Inc., Takanawa Muse building, 3-14-13 \nHigashi-gotanda, Shinagawa-ku, Tokyo, 141 Japan. Hideaki Okamura, Yutaka Ishikawa, and Mario Tokoro, \nToward building the flexible systems on the distributed environment, Department of Computer Science, \nKeio Universite, 3-14- 1 Hiyoshi, Kohoku-ku, Kanagawa, 223, Japan, and Electrotechincal Laboratory, l-14 \nUmezono, Tsukuba, Ibaraki, 305 Japan. Ramana Rao, From the Broad Notion of Reflection to the Engineering \nPractice of Object-Oriented Metalevel Architectures, Xerox Palo Alto Research Center, 3333 Coyote Hill \nRoad, Palo Alto, CA 94304, USA. Luis H. Rodriguez Jr., Using Metaobject Protocols for Coarse-Grained \nParallelism, Xerox Palo Alto Research Center, 3333 Coyote Hill Road, Palo Alto, CA 94304, USA. John R. \nRose, A Minimal Metaobject Protocol for Dynamic Dispatch, SunPro (Sun Microsystems), USA. William Sears, \nReflection In Distributed Management, Motorola/Codex Corporation, 20 Cabot Blvd., Mansfield, MAO2048, \nUSA. Patrick Steyaert, RA Framework for Reflection in Programming Languages, Free university of Brussels, \nPROG - WE, Pleinlaan 2, B 1050 Brussels - Belguim. Hiroyasu Sugano, Modeling Group Reflection in a Simple \nConcurrent Constraint Language, Fujitsu Laboratories, IIAS, l-17-25 Shin-Kamata, Ota-ku, Tokyo 144, Japan. \nDavid Ungar and Randall B. Smith, Reflection without Regress, Sun Microsystems Laboratories, Inc., 2550 \nGarcia Ave., MS 29-l 16, Mountain View, CA 94043, USA. Yasuhiko Yokote, Atsushi Mitsuzawa, Nobuhisa Fujinami, \nand Mario Tokoro, Reflecting Computing Facilities of the Muse Reflective Object Management, Sony Computer \nScience Laboratory Inc., Takanawa Muse building, 3- 14- 13 Higashi- gotanda, Shinagawa-ku, Tokyo, 14 \n1 Japan. [3201 6-l 1 October 1991 Phoenix, Arizona  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Mamdouh H. Ibrahim", "author_profile_id": "81332505897", "affiliation": "", "person_id": "PP39078145", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157844", "year": "1992", "article_id": "157844", "conference": "OOPSLA", "title": "Reflection and metalevel architectures in object-oriented programming", "url": "http://dl.acm.org/citation.cfm?id=157844"}