{"article_publication_date": "12-01-1992", "fulltext": "\n Vancouver, British Columbia, Canada 5-70 October 1992 Towards Report by: Bruce Anderson University of \nEssex What is Software Architecture? Architectures are the structuring paradigms of software systems. \nEnvisioning a product family involves creating an appropriate architecture. This is one of the weakest \nareas in current software development processes. Designing these architectures involves an interplay \nbetween technical understanding and artistry. Handbooks and Our Philosophy A handbook is an expression \nof the knowledge, understanding and agreement of a professional community. We are experimenting with \ncommunity- building, and with technical ideas, by attempting to write a handbook before it is time. Current \nWork The community for the current handbook is a group of colleagues and students, and a looser network \nof participants in workshops and interviews and discussions (some by email), and authors (of books and \npapers we read). It is very much a work-in- progress. Another direction is to collaborate with designers \nand architects in closer working teams, especially in large companies, to shift the culture in order \nto value and work more at the architectural level. This organizational development work is still in the \nconceptual stage, but we long to do more of it. Addendum  A 92 to the Proceedings Poster Submission- \n an Architecture Handbook Current Framework for the Handbook The main body of the Handbook contains \nthree sections on components and structures, three sections on properties and principles, and a collection \nof system descriptions. Introduction-Structure-Attributes-Configurations-Blocks-Mechanisms-Principles-Dimensions-Exemplary \nSystems-Architecture in Process and Practice-Essays on Architecture- References-Jargon list-Indexes. \nAttributes: Resources / Safety / reuse / extensibility Configurations: Actors / Big Switch / Blackboard \n/ Client/Server Blocks: Buffer / Command Objects / Containers / Controller Mechanisms: / Abstract Class \n/ Black Box / Broadcast / Call-back Principles: Separation of concerns / Information hiding / Coupling \nand cohesion / Clarity and limits Dimensions: / Declarative-Imperative / memory-out Of-memory / Serial-Parallel \n/ Synch-asynch 5-10 October 1992 -167-Addendum to the Proceedings Categorization of Architectural Information \nThree categories refer to components and structures-configurations (patterns of things eg. Blackboard), \nblocks (providing functionality eg. Stream), and mechanisms (pervasive methods eg. Delegation). The other \nthree are attributes (eg. memory use), principles (eg. separation of concerns) and dimensions (eg. declarative/imperative). \nA System Description The Handbook contains descriptions of whole systems, discussing architectural issues \nand relating them to entries in the rest of the Handbook. Research and Practice in Software Engineering \nMany practitioners do not learn effectively from their experience, see research and development as separate \nfrom practice, and do not value their subjective knowledge. We propose a move from technology transfer \nto research integration in the development of software practice. An Interview in California Interviews \nare a useful tool. We use them to cut through local jargon, to raise the level of generality, and to \nflesh out descriptions with rationale. As part of community building, they show architects that they \nare taken seriously. For example, on groundedness- Architecture goes on in a small group whose abstractions \nare thoroughly grounded ; on using the architecture- Sometimes we bypass the architecture, e.g. for performance. \n Working with Organizations One way we work on our ideas about community- building and organizational \ndevelopment is by imagining programs to carry them out. The poster includes a description of products \nand services of an in-house initiative for a large and diverse company seeking to improve its architectural \ncore competency. Environment of Ideas Many sources outside software technology support and inform our \nefforts, such as work in organizational learning, in professional development, and in situated cognition. \nTaking Part Readers are welcome to take part in this enterprise, by sending comments or ideas by mail, \nphone, email or fax. Acknowledgements and History This work is the product of a series of participative \nworkshops, and of interaction with many members of the software community. Especial thanks to participants \nin the workshop at OOPSLA 9 1, to Ralph Johnson and Doug Lea, and to Kim Harris at Hewlett-Packard for \norganizing a long visit during 1992. Contact information: Bruce Anderson Electronic Systems University \nof Essex Colchester, Essex CO4 3SQ, England voice: +44.206.872805 fax: +44.206.872900; email: bruce@essex.ac.uk \nOOPSLA 92 -168-Vancouver, British Columbia \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Bruce Anderson", "author_profile_id": "81100101845", "affiliation": "", "person_id": "PP31069560", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157743", "year": "1992", "article_id": "157743", "conference": "OOPSLA", "title": "Towards an architecture handbook", "url": "http://dl.acm.org/citation.cfm?id=157743"}