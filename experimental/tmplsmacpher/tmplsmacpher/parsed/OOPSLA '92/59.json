{"article_publication_date": "12-01-1992", "fulltext": "", "proc_id": "157709", "abstract": "<p>Advanced CLOS and Meta-Object Protocols<br>Jon L. White, Lucid</p><p>One of the important characteristics of CLOS is its dynamicflexibility to change descriptions, programs, and even data objectson the fly. A typical CLOS system is implemented by a set ofmeta-objects, which can be changed by the programmer, essentiallyletting you create a new language. Thus, CLOS is a reflectiveprogramming language.</p><p>The main purpose of this tutorial is to teach you how to put ameta-object protocol to a practical use. In addition to describingthe implementation of a typical CLOS system and discussing thevarious issues raised by the book Art of the Meta-Object Protocol,it gives practical examples of meta-object extensions includingtechniques for making user-defined metaclasses, for makingalternations to SLOT-VALUE so that certain slots can be persistent,and for making metaclasses whose classes automatically keep a tableof all their instances.</p><p>The tutorial is aimed at the CLOS programmer or the programminglanguage expert who would like to learn more about reflectiveprogramming using a meta-object protocol. The emphasis is onpractical uses of a meta-object protocol, not on the philosophy ofreflection.</p>", "authors": [{"name": "Jon L. White", "author_profile_id": "81332535191", "affiliation": "", "person_id": "PP39081036", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157769", "year": "1992", "article_id": "157769", "conference": "OOPSLA", "title": "Advanced CLOS and meta-object protocols (abstract)", "url": "http://dl.acm.org/citation.cfm?id=157769"}