{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 fo the Vancouver, British Columbia, Canada 5-10 October 1992 Proceedings Poster Submission- \n CoSlDE and Parallel Object-Oriented Languages Report by: R.Winder G.Roberts M.Wei University College, \nLondon 1. Introduction This poster outlines the work on parallel object- oriented programming languages \nwithin the CoSIDE group at the Dept. of Computer Science, University College London. CoSIDE (The COOTS \nC++ &#38; Solve Integrated Development Environment) is an object- oriented programming environment designed \nto support research in a wide range of areas. These areas include the design and implementation of parallel \nobject-oriented programming languages (Solve and UC++), the design and implementation of user interfaces \nfor programming environments (CogBrow) and the uses of graph models of object systems (Graphic Knowledge \nInterfaces). This poster concentrates on the programming languages UC++ and Solve, along with aspects \nof the CoSIDE environment. The work described here is being carried out as part of the COOTS project \n(Concurrent Object-Oriented Languages Targetting Parallel Systems), IED3/1/1059, in collaboration with \nthe DRA Electronics Division (Malvern) and Harlequin Ltd. 2. The CoSlDE Environment CoSIDE has been \ndeveloped as a common environment linking together various strands of work centering on parallel object-oriented \nprogramming. The CoSIDE implementation is designed to support: Multiple 00 languages, coexisting within \nthe same programming environment. Currently the languages UC++ and Solve are supported. Parallel programming, \nby providing infrastructure within which a parallel object- oriented program can run. Incremental compilation, \nby providing data structures to store information between compilations. Interpreted execution. Debugging, \neither of interpreted or external parallel programs Re-targetable code generation for multiple target \nsystems. Advanced user interface design.  3. UC++: Parallel C++ UC++ is a parallel version of C++, implemented \nas an extension of the semantics of C++, adding the concept of Active Object, Bach Active Object is associated \nwith a virtual processor and may (potentially) execute member functions in parallel with other active \nobjects. Active objects may be created either statically or dynamically. S-10 October 1992 -211-Addendum \nto the Proceedings Two syntactic mechanisms are being evaluated as a means of describing Active Objects: \n9 The active keyword, allowing any class object to be made active when declared: active class-name id \n[obj-constructor] [on processor-address] The optional on keyword allows active objects to be associated \nwith a specified processor, so that the programmer has the ability to control the allocation of active \nobjects to available processing resources. This allows the programmer to express the parallelism of an \napplication in terms of active object distribution. Active Class declarations describing active objects \nand enforcing strict control of the public interface: activeclass class-name ( public: // Public member \nfunctions only private: // Rest of members 1 : A class declared with the activeclass keyword can only \nhave member functions in its public interface, enforcing stricter encapsulation of active objects. Concurrency \nmay be controlled by either the caller of an active object member function (sender-side parallelism), \nor by the member function itself (receiver side-parallelism). A new keyword split has been added to UC++ \nto investigate both approaches. Sender-side concurrency control Concurrency may be initiated explicitly \nusing a split statement: split statement; A split statement is intended to be executed in parallel with \nthe following statements. If the split statement is an active object member function call, then the call \nwill be made asynchronously (i.e. the thread of control is split) providing medium-grain parallelism. \nCurrently, sender-side parallelism with split is restricted to member function calls but future work \nwill extend split to deal with other expressions, providing fine-grain parallelism. . Receiver-side \nconcurrency control Active object member functions may use a split return statement for receiver side \nconcurrency control: split return expression ; This returns a value from an active object member function \nwithout terminating its execution, Both the member function and its caller may then continue execution. \n As pointers are a fundamental feature of the C++ language they are directly supported by having a global \naddress space, in which all pointer values exist. Pointer operations between active objects are directly \nsupported leaving the programmer to decide if the overheads of remote pointer operations are cost effective. \n 4. Solve-A parallel object-oriented programming language Solve is a parallel object-oriented language \ndeveloped as a research platform for the following areaS: Parallel object-oriented programming, using \na pure object-oriented model using message passing. Strong type systems for object-oriented languages. \n Reasoning based on pre/post conditions and assertions, for error detection and management, particularly \nof parallel programs. Advanced debugging, with a special interest in debugging parallel programs. Self \nverifying systems based on assertions and behavioural specifications [4]. Integrated assertion, exception, \nspecification and debugging systems. Implementation models for parallel object memories and object representations. \nPerformance evaluation of parallel object systems, including the behaviour of highly dynamic applications. \n To support these research activities Solve has been designed to be easily modified both at the language \nand implementation levels. In particular, object structure and code generation strategies may be easily \nchanged. Solve objects are simply collections of names bound to values (either other objects or primitive \nvalues). The binding operation of names to values is accessible as a normal method and may be modified \narbitrarily. OOPSLA 92 -212 Vancouver, British Columbia 5. Other papers: [l] Harnessing Parallelism \nwith UC++, R.Winder, M.Wei, G.Roberts, Winter Conference Proceedings of European C++ User Group, Imperial \nCollege, London, 1991 [21 UC++: Concurrent Object Oriented C++, G.Roberts, R.Winder, M.Wei, BCS OOPS \nSG &#38; BCS Parallel Processing SG, Proceedings of the 2nd Workshop on Parallel Object Oriented Programming, \n1990 [3] Solve Implementation Report, G.Roberts, M.Wei, R.Winder, SPAN-WPlO-26, University College London, \n1989 [4] COOTS Subtask 1.1 Deliverable, UC++ and CoSIDE Design and Implementation, G.Roberts, M.Wei, \nR.Winder, Research Note (RN/91/35), Dept. of Computer Science, University College London, April 1991. \n Contact information: R.Winder G.Roberts M.Wei Department of Computer Science University College, London \nGower Street, London WClE 6BT, UK Telephone: +44 (0)71 380 7293 E-mail: R.Winder@cs.ucl.ac.uk uucp: uunet!ucl-cs!R. \nWinder  5-10 October 1992 -2l3-Addendum to the Proceedings  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "R. Winder", "author_profile_id": "81409595252", "affiliation": "", "person_id": "PP14155712", "email_address": "", "orcid_id": ""}, {"name": "G. Roberts", "author_profile_id": "81100585873", "affiliation": "", "person_id": "PP14202355", "email_address": "", "orcid_id": ""}, {"name": "M. Wei", "author_profile_id": "81332534987", "affiliation": "", "person_id": "PP14165422", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157757", "year": "1992", "article_id": "157757", "conference": "OOPSLA", "title": "CoSIDE and parallel object-oriented languages", "url": "http://dl.acm.org/citation.cfm?id=157757"}