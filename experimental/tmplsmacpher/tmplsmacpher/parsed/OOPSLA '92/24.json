{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - IO October 7992 Proceedings Poster Submission- \n Retraining Procedural Programmers: A Case Against Unlearning Report by: Mary Lynn Manns University of \nNorth Carolina at Asheville David A. Carlson University of Colorado at Boulder The retraining of procedural \nprogrammers in object- oriented concepts is a widely acknowledged concern. Research shows that previously \nacquired skills cannot be unlearned ; therefore, the trainer must consider these existing knowledge schemas \nwhen attempting to retrain experienced programmers. Furthermore, there is potential for both positive \nand negative transfer of skills from this procedural knowledge to the desired object-oriented knowledge. \nIt is the responsibility of the trainer to manage this transfer process by designing a retraining program \nthat attempts to discover a programmer s existing schemas and to sequence the concepts in such a way \nthat maximizes the positive transfer while minimizing the interference from negative transfer. During \nthe retraining of procedural programmers in object-oriented programming concepts, it is often assumed \nthat these programmers can learn the new material independent of what they already know. The term unlearn \nis often used to refer to this assumption. The image of unlearning suggests that procedural programmers \ncan intentionally forget the procedural-oriented knowledge which they cannot map directly into the object-oriented \nconcepts. However, evidence from the literature on knowledge storage and retrieval furnishes evidence \nthat just the opposite is likely to occur. According to Detienne (1990), expert programmers establish \nmany abstract knowledge structures called schemas through the practice of programming. Then, when searching \nfor a solution to a new programming task, these programmers retrieve and utilize the schemas which they \nbelieve are appropriate for a new problem s design and implementation. (Refer to Soloway and Ehrlich \n(1984), Scholtz and Wiedenbeck (1990), and Campbell et al. (in press) for other examples of the influence \nof programming schemas.) These findings suggest that trainers should not expect procedural programmers \nto strive to remove, or unlearn, existing schemas. Rather, the programmers are likely to retrieve their \nprocedural- based knowledge when they are introduced to object- oriented concepts. Evidence from studies \nof cognitive skill transfer further indicates that there is potential for both a positive and a negative \ntransfer of knowledge between procedural and object-oriented knowledge. A positive transfer of knowledge \nis likely to occur when knowledge from a source domain can map directly into a target domain. While this \nis preferable, the potential for negative transfer, labeled by Singley and Anderson (1989) as a well- \nestablished phenomenon, results when a person attempts to map existing knowledge into a new domain even \nthough it is nonoptimal or misleading S-10 October 1992 -131. Addendum to the Proceedings to do so. \nThis makes it more difficult for the person to learn the target domain because the existing knowledge \nis said to interfere with the assimilation of the new knowledge. Negative transfer has also been shown \nto exist in the learning of computer programming (Kessler and Anderson (1986)). Because the fundamental \nconcepts, the design strategies, and the programming techniques in the procedural and object-oriented \nmodels have significant differences, the interference from previous knowledge may very well be the basis \nof the procedural programmer s difficulties with object- oriented concepts. Left to their own mapping \nassumptions, procedural programmers may be open PROCEDURAL CONCEPT user defined data type . data abstraction \n. subroutine/function .------ hierarchical structures (structure chart, flowchart) . graphical representation \n. procedural decomposition . top-down dependency This table exhibits how the existing schema of a user \ndefined data type can create positive transfer to the object-oriented concept of a class definition while \nnegative transfer will surface when a class hierarchy chart is shown to the procedural programmer. To \navoid the detrimental consequences of negative transfer and ground the new knowledge in what the procedural \nprogrammer already knows, a trainer should begin with those concepts which will allow the greatest amount \nof positive transfer to occur. For example, because the concept of a class definition allows positive \ntransfer from existing procedural knowledge, this concept can be introduced early in the retraining. \nIn contrast, the graphical representation of a class hierarchy structure creates the potential for negative \ntransfer and should therefore be postponed until the procedural programmer has a stronger understanding \nof object- oriented philosophy. Transfer positive positive no positive negative negative to a transfer \nprocess that is more negative than positive. Two examples of knowledge transfer processes from procedural \nto object-oriented concepts are shown in the following table. This represents an attempt to begin to \ndefine how procedural programmers will map their existing schemas into two object-oriented concepts, \na class definition and a class hierarchy. These attempted transfers were observed and documented during \ntraining sessions in which twenty experienced procedural programmers were introduced to concepts in the \nobject model. O-O CONCEPT class definition . encapsulation of data . encapsulation of methods . encapsulation \nof both data and methods hierarchical structure (class hierarchy) . graphical representation . data \ndecomposition . bottom-up dependency The strong likelihood that experienced programmers will attempt \nto ground new object-oriented knowledge in their existing procedural knowledge has further implications \nfor retraining. The introduction of each object-oriented concept should begin with an analysis of whether \nthe programmers have the appropriate procedural schema(s) to allow a positive transfer into a new object-oriented \nschema. For example, when introducing the concept of a class, the trainer would first determine if the \nstudents had pre-existing knowledge (a schema) of an abstract data type. While a C programmer would most \nlikely have this schema and could then be encouraged to activate it, a COBOL programmer would probably \nneed to be guided to form a high- level concept of an abstract data type from his/her familiarity with \nthe lower level concept of a file definition section. The trainer will then strive to maximize positive \ntransfer from this abstract data OOPSLA 92 - 132 Vancouver, British Columbia type schema by guiding \nthe procedural programmer s mapping from the existing procedural knowledge to the new object-oriented \nknowledge. The outcome of this is a new object-oriented schema which is an extension of the knowledge \nthe programmer has previously acquired. In summary, it has been shown that experienced programmers will \nretrieve existing knowledge and base the new concepts they are trying to learn on this knowledge. This \nresearch offers some initial considerations for the design of retraining programs which will make use \nof the organization and activation of procedural programming schemas. Future research will be directed \ntowards a further identification of the specific knowledge procedural programmers attempt to transfer \ninto object- oriented concepts.  References Campbell, R.L., Brown, N.R., &#38; DiBello, L.A. (in press). \nThe Programmer s Burden: Developing Expertise in Programming. In: R.R. Hoffman (Ed.), The Psychology \nof Expertise: Cognitive Research and Empirical, A.I. New York: Springer-Verlag. Detienne, F. (1990). \nDifficulties in designing with object-oriented language: an empirical study. Human-Computer Interaction, \n5,971-976. Kessler, C. &#38; Anderson, J.R. (1986). Learning flow of control: recursive and iterative \nprocedures. Human-Computer Interaction, 2, 135-166. Scholtz, J., &#38; Wiedenbeck, S. (1990). Learning \nsecond and subsequent programming languages: A problem of transfer. International Journal of Human- Computer \nInteraction, 2,51-72. Singley, M.K., &#38; Anderson, J.R. (1989). The Transfer of Cognitive Skill. Cambridge, \nMA: Harvard University Press. Soloway, E. and Ehrlich, K. (1984). Empirical studies of programming knowledge, \nIEEE Transactions on Software Engineering, 10,595-609.  Contact information: Mary Lynn Manns Computer \nScience Department University of North Carolina at Asheville Asheville, NC 28804 (704) 25 l-6446 manns@cs.unca.edu \nDavid A. Carlson College of Business and Administration University of Colorado at Boulder Campus Box \n4 19 Boulder, CO 80309 carlson-da@cubldr.colorado,edu S-10 October 1992 -133. Addendum to the Proceedings \n  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Mary Lynn Manns", "author_profile_id": "81100096374", "affiliation": "", "person_id": "P193226", "email_address": "", "orcid_id": ""}, {"name": "David A. Carlson", "author_profile_id": "81539810856", "affiliation": "", "person_id": "PP14134309", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157733", "year": "1992", "article_id": "157733", "conference": "OOPSLA", "title": "Retraining procedural programmers: a case against &#8220;unlearning&#8221;", "url": "http://dl.acm.org/citation.cfm?id=157733"}