{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 fo fhe Vancouver, British Columbia, Canada 5-10 October 1992 Proceedings Experience Report- \n Constructing a Class Library for Microsoft Windows Report by: Lon Fisher representing The Microsoft \nFoundation Class Library Team  Introduction With the popularity of the Windows operating system and \nthe C++ programming language, it is not surprising that there have been attempts to merge the two into \nclass libraries. Programmers gain access to a powerful graphical user interface (GUI) while gaining the \nbenefits of code reuse and object orientation. Since Windows provides an object oriented environment \nusing a handle based paradigm, it would seem easy to create a Windows/C++ class library. However, there \nare many issues that need to be resolved. This paper explains several of the challenges involved in creating \na Windows class library while discussing the experiences and makeup of the Microsoft Application Framework \nteam in creating the MFC (Microsoft Foundation Class Library) product. The MFC product had several design \ncriteria including: library performance in both speed and size, easy transition from Windows to MFC, \nand extensibility. It allows Windows APIs (Application Programming Interfaces) to be called directly. \nMFC is also a second attempt at a Windows class library. The first attempt provided invaluable experience \nthat formed the basis of the current product. The Microsoft Application Framework Team The Microsoft \nApplication Framework Team consists of 25 software design engineers whose mission is to make application \ndevelopment easier. Members experience ranges from less than one to over ten years at Microsoft. About \nhalf the members came to the group with Windowsm development experience and the other half with C++ experience. \nThe team cross trained by attending internal Microsoft courses and by using the forming product. The \nteam usually tries to get feedback from new hires on the product s usability. This feedback helped in \nthe development of MFC.  The Issues There are two sets of issues that must be addressed when creating \na Windows class library. The first issue is the fundamental design of the library. Libraries can be designed \neither from the top-down or bottom- up. A top-down design usually starts at a high level of abstraction \nand then fills in the details with Windows. A bottom-up design starts with Windows and then builds upwards \nto a higher level of abstraction. This might not seem to be a big difference, however it affects the \nclass library designer in the amount of code required, the degree of Windows API coverage, and the usability \nof the product. It affects the developer who tries to access Windows directly from the class library. \nA bottom- Addendum to the Proceedings S-10 October 1992 -37 - up design will usually provide easier \naccess to Windows than a top-down design. The second issue is that Windows has its own object orientation. \nIt presents a challenge to the class library designer because C++ and Windows objects do not work in \nexactly the same fashion. The problems are important to the class library designer because they determine \nlibrary code size and complexity; and they are important to the developer as they determine how a program \nis structured. While there are many areas where Windows and C++ work differently, two large areas include \nmessage processing and object creation and destruction. Windows provides an object oriented event mechanism, \ncalled messages. Messages are processed by a single callback function. In C++, however, it is much more \nreasonable to provide a function for each message. The problem is how to link the Windows message with \nthe C++ function. Another technical challenge is object creation and destruction. In Windows, object \nidentity is determined by an integer identifier called a handle. C++, on the other hand, uses pointers, \ninstances, and references. Additionally, Windows creates and destroys objects on its own. The challenge \nis to link the Windows and C++ objects together, correctly, to provide proper object management.  The \nMFC Experience and Solutions The MFC team acquired much experience meeting these challenges while creating \ntwo Windows class libraries. The first design started at a highly abstract level and ended up re-inventing \nWindows while providing a class library. The team coined a word for this: oopaholic. It was the team \ns experience that the top-down design provided too much complexity for the developer. The design didn \nt allow the developer to use existing Windows knowledge or provide an easy migration path for existing \nWindows programs. Additionally, code size and speed became unmanageable. This design was dropped in of \na new product design. The new product design goal was to provide a thin and practical class library. \nBy definition, this meant starting at a relatively low level of abstraction. The new design placed the \nWindows object within a C++ container providing member functions for all associated Windows functions. \nThe C++ container doesn t cache state allowing the Windows API to be called directly. This design contrasted \nwith the original design where containers did cache state and did not map directly to the Windows API. \nExperience showed that changing the Windows programming interface would cause usability problems. By \nkeeping close to Windows, programmers would be able to leverage existing code and knowledge when moving \nto MFC. This low level approach also improved the library. It increased flexibility because it allowed \nWindows to be used directly, and reduced the amount of library code from 50 KLOC (thousand lines of code), \nin the original design, to only 14.5 KLOC. The extra flexibility and code space allowed the designers \nto implement practical solutions to message processing and object creation/destruction. Conclusions \nThere are many issues to be resolved in creating a Windows class library including the initial level \nof abstraction and technical problems. The team found that starting with a highly abstract design was \ninefficient and forced the programmer to abandon existing knowledge of Windows. After switching to a \nlower level design, MFC was able to use this Windows experience while increasing library flexibility \nand decreasing the library code required. MFC also resolved several technical issues in a practical manner. \nWindows TM refers to Microsoft Window-registered trademark of Microsoft Corporation. Contact information: \nLon E. Fisher V0 Microsoft Corp. One Microsoft Way 17W/2066 Redmond, Washington 98052 email: LonF@Microsoft.com \nOOPSLA 92 Vancouver, British Columbia  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Lon Fisher", "author_profile_id": "81100549970", "affiliation": "", "person_id": "PP14191027", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157717", "year": "1992", "article_id": "157717", "conference": "OOPSLA", "title": "Constructing a class library for Microsoft Windows", "url": "http://dl.acm.org/citation.cfm?id=157717"}