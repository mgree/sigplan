{"article_publication_date": "12-01-1992", "fulltext": "\n Vancouver, British Columbia, Canada 5-10 October 1992 Towards Report by: Gail C. Murphy Pok Wong MPR \nTeltech Ltd. Introduction To date, interest in object-oriented technology has largely focused on the \nuse of the technology at analysis, design, and implementation. An important part of the software life-cycle, \nhowever, is the testing required to ensure the software meets its specification. Most early proponents \nof object- oriented technology subscribed to the intuitive notion of the testing of object-oriented systems. \nThat is, most believed that inherited features did not require retesting in the descendant class [CM90]. \nIn [PK90], however, Perry and Kaiser showed that reuse of an inherited method in a subclass required \ntesting in the new environment of the subclass even though the inherited tested method had not changed \nfrom its specification in the superclass. This poster summarizes the issues involved in validating object-oriented \nsoftware and proposes a methodology that will help organizations integrate appropriate testing into an \niterative software process model. Tools have been developed that support the testing of Eiffel and C++ \nclasses. These tools automatically apply test cases specified for superclass methods to subclasses. \nAddendum  A 92 to the Proceedings Poster Submission- a Testing Methodology for Object-Oriented Systems \nThe Challenges A review of the literature on the testing of object- oriented systems identified only \na handful of papers on the topic. Based on the reports in the literature and our own experience developing \nobject-oriented systems, the following seven major challenges have been identified. A methodology has \nbeen proposed to meet these challenges. Issue-l How are testing activities integrated into an iterative \nsoftware process model? Issue-2 Given that many conventional strategies for guiding testing, like control-flow \nanalysis, do not map to the decentralized nature of object-oriented software, what strategies are available \nto guide class and cluster1 testing? Issue-3 What constitutes sufficient testing for classes and clusters? \nIssue-4 How can regression tests be formulated and conducted to ensure the integrity of classes modified \nunder the open-closed principle [MeySl? 1 The term, cluster, is used to refer to a collection of classes \nthat relate to a common aim. Addendum to the Proceedings S-10 October 1992 -l39- Issue-S What guidelines \nare available to the test designer who must account for state in the object? Issue-6 How are abstract \nparent classes and generic classes tested? Issue-7 Under what conditions must the features inherited \nfrom a paper be retested in the child class?  Testing and the Software Development Process The object-oriented \nsoftware testing methodology under development provides guidelines for testing the clusters and classes \nof software built using a statically typed object-oriented language. Cluster testing is specification-based, \nwhile class testing involves both specification and program-based testing of the methods of the class. \nCluster and class level testing each involve two activities: 1) test case definition (including test \ndata selection), and 2) test execution. For each cluster under development, the methodology proposes \nthe following activities: 1. Cluster Analysis 2. Cluster Test Case and Test Data Definition 3. Class \nDesign 4. Class Test Case and Test Data Definition 5. Implementation 6. Class Test Execution 7. Cluster \nTest Execution   Automated Testing Tools An iterative software development process results in modifications \nto classes of already tested clusters. The types of modifications performed include changes to the inheritance \nhierarchy, changes to tested methods, additions of new methods, etc. To help support the regression testing \nof Eiffel and C++ classes developed within this iterative software development process, two tools, one \nfor each object- oriented language, have been developed. These tools are extensions of the test program \ngenerator PGMGEN described in [Hof89]. The test tools verify an object-oriented class developed in Eiffel \nor C++ using test cases specified in a test script for the class. The tool generates a program in the \nappropriate language that automatically applies the test cases. For each test case, the trace (a set \nof messages to objects) for the test case is invoked and discrepancies between the expected and actual \nbehavior are reported. The class under test is treated as a flattened class. That is, if the class has \nancestors, the tool compiles and links the test scripts of the ancestors with the class under test and \nruns the resulting test drivers.  Conclusion and Future Work Adoption of object-oriented technology \nfor use in the development of highly reliable systems requires a testing methodology to complement existing \nobject-oriented analysis techniques, object-oriented design techniques, and object-oriented programming \nenvironments. A methodology for testing object- oriented clusters and classes within an iterative software \ndevelopment process has been proposed. Tools have been developed to support the regression testing of \nclasses developed in Eiffel and C++. The methodology and tools have been applied on a small- scale to \ntwo sample object-oriented clusters. In the future, we intend to apply the methodology and tools within \na system development. The results of applying the approach will be used to drive further refinement of \nwhat constitutes adequate testing of classes, particularly when inheritance is involved. References \n[CM903 Thomas J. Cheatham and Lee Mellinger. Testing Object-Oriented Software Systems. In Proceedings \nofthe 1990 ACM Eighteenth Annual Computer Science Conference Proceedings, pages 161-165. ACM, February \n1990. lIIof89] Daniel Hoffman. A Case Study in Module Testing. In Proceedings of the Conference on Software \nMaintenance, 1989. IMeySS] Bertrand Meyer. Object-Oriented Software Construction. Prentice-Hall 1988. \n[pK90] Dewayne E. Perry and Gail E. Kaiser. Adequate Testing and Object-oriented Programming. Journal \nof Object-Oriented Programming, pages 13-19, January/February 1990.  Contact information: Gail C. Murphy \nPok Wong MPR Teltech Ltd. 8999 Nelson Way Bumaby B.C., Canada, V5A 4B5 E-mail: murphy@mprgate.mprca wong@mprgate.mpr.ca \nOOPSLA 92 -Ml-Vancouver, British Columbia \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Gail C. Murphy", "author_profile_id": "81336491450", "affiliation": "", "person_id": "PP42052542", "email_address": "", "orcid_id": ""}, {"name": "Pok Wong", "author_profile_id": "81544217756", "affiliation": "", "person_id": "P227895", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157735", "year": "1992", "article_id": "157735", "conference": "OOPSLA", "title": "Towards a testing methodology for object-oriented systems", "url": "http://dl.acm.org/citation.cfm?id=157735"}