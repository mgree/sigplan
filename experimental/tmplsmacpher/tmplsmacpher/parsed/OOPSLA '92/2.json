{"article_publication_date": "12-01-1992", "fulltext": "\n AUTOSPEC: Automatic Report by: Charles A. Suscheck Gregory J. Komar Abstract The AUTOSPEC system is \nan automatic motor specification software system that primarily serves to non-interactively produce bill \nof materials from sales orders. At the core, the system applies Expert System and coordinated Relational \nDatabase technology to effect an object-oriented implementation. Computer Aided Software Engineering \n(CASE) tools supporting object- oriented analysis (OOA) and an object-oriented design (OOD) approach \nwere used to provide a smooth transition of the software design effort into production at motor manufacturing \nplants. The powerful mechanisms of class inheritance, and forward chaining, as well as graphical program \nconstruction provided by the ProKappa Knowledge Base System are employed. Motif* Graphical User Interface \n(GUI) development was carried out using UIM/X, a WYSIWYG screen development tool. The ORACLE3 Database \nManagement System was used to provide data independence necessary for engineering system interfacing. \n1 ProKappa and ProTalk are trademarks of IntelliCorp, Inc. * Motif is a trademark of Open Software Foundation \n3 ORACLE is a registered trademark of Oracle Corporation.  S-10 October 1992 Addendum to the Proceedings \nExperience Report-  Motor Specification System System Description The purpose of the Autospec project \nwas to reduce specification time of a motor from 2 weeks to under 2 minutes. Given a sales order for \na motor along with special features and add on features, the goal was to specify motors based on current \nmodels, modules, and designs. The project was divided into three phases: a rudimentary phase that was \ninstalled in August of 1992, an enhanced version that was installed in October of 1992, and the final \nsystem that was installed in November of 1992. The final statistics of the system are as follows: 414 \nClass objects, 2864 persistent instances (objects), 193 method files, 650 rule files, 2081 rules, 52 \nsubjects, 9 meg of memory during execution, average specification time for 1 motor: 30 seconds. Hardware \nPlatform Sun IPX workstations were chosen to run in a client- server based configuration. The main server \nchosen was a Sun Spark 2 with a total of 5gb mass storage.  Software Tools An object-oriented method \nof design and construction was chosen because of the component- driven representation of the motor specification \nprocess. The current manual specification consists of searching for components based on a hierarchical \n -9 -Addendum to the Proceedings representation. Objects provide a concise structural representation \nof knowledge and its useful relations, and support specialization techniques inherent to motor configuration \nthat is easy for the domain experts to use. Due to the fact that the specification process is a series \nof decisions based on given parameters, expert system technology was also targeted for the Autospec project. \nAfter reviewing several expert systems, ProKappa was chosen. The reason this tool was picked is that \nit is based on object modeling, and it allows for rules to be inherited and segregated through objects. \nProKappa also provides fourth generation non-procedural languages, easy interface to C, and a graphical \nprogramming environment. Motif was chosen as the GUI representation symbology because of its wide acceptance \nin the Unix world, its extensibility to other Unix environments, and its promise of becoming even stronger. \nAfter reviewing over 20 GUI WYSIWYG packages, UIMX was chosen. It not only has the easiest interface \nwith the ProKappa package but is the most flexible and will run on several hardware platforms.  Sales \nof 00 and Expert Technologies Convincing the client to employ unfamiliar technology proved to be a challenging \nassignment. Our branch had developed no other systems that closely matched the proposed one and this \npoint was complicated because the technologies were seen as young and unproven. There was a perception \nthat 00 and expert systems were relegated to academics who could not communicate in business terms and \nthat business people could not communicate in AI/O0 terms. CASE and documentation support tools for both \n00 and AI were difficult to find and in most cases inadequate for the task at hand. The high cost of \nexperienced people, tools and required CPU power were also hurdles to be overcome. In order to address \nthe cost and risk concerns of the client, the project was sold as a fixed-bid cooperative venture, with \nboth Cap Gemini America (CGA) employees and Reliance Electric employees acting as developers. The Reliance \nElectric development team consisted of three domain experts (one electrical engineer and two mechanical \nengineers), one systems manager, and one hardware specialist. Other Reliance employees were brought in \nas needed. The CGA development team consisted of a core of three people: a team manager and AI expert, \na human interface and 00 expert, and a knowledge base analyst. Approximately 15 other CGA employees were \nbrought in based on their expertise during various phases of the project. Middle management from both \ncompanies convened in the form of a steering committee on a weekly basis to monitor progress and alleviate \nproblems. The concern over the technologies used was reduced by decmphasizing their role in the system. \nThe client awareness of the technologies was carefully cultivated through CGA-presented seminars, object \ntechnology and expert system publications, and conferences such as OOPSLA. The client s perceived risk \nof using a rapid development package was reduced even further by CGA s including a one year maintenance \ncontract with the project. Internally, the risk of incorrect design and new technologies was reduced \nby using a spiral development cycle approach. An initial prototype, developed within four months of project \ninception, was used to verify hardware and software feasibility as well as demonstrate that rudimentary \nmotors could be configured in under two minutes. Phase one of the project was developed 4 months later \nand was used to verify the system s design as well as to allow users shake down of an initial, albeit \nrudimentary, system, The second phase, completed 2 months later, included full production capabilities \nand was used to provide the users with a fully functioning specification system equivalent to the manual \nmethod. The third phase included enhancements based upon the features of the tools, and enhanced business \nprocedures. To reduce complexity and alleviate contention during development, blackboard architecture \nwas employed. The ProKappa tool allowed for the system to be segregated into applications (known as subject \nlayers). This allowed each domain expert to work independently. Cross-application inheritance is easily \nhandled within the ProKappa tool. The high degree of encapsulation within an application reduced the \ntime required for system integration and encouraged intra-application subject layer reuse. Point of \nContention During the Project Due to the novel nature of the tools, methods, and management techniques, \nthere was intense interest by management throughout the client site as well as the consulting branch. \nSeveral managers attempted to learn more about the technology through project reviews, which reduced \nproductivity. This problem began to snowball. The less productive the team became, the more management \nconducted project reviews. Through frank discussion with upper management, a concerted effort was made \nto avoid disruptive interference. OOPSLA 92 -lO-Vancouver, British Columbia Corporate policy did not \nallow for 00, RAD, or Spiral techniques. It became difficult to follow guidelines supported by the corporate \ninfrastructure. This led to tighter management scrutiny and more meetings. Once the client began to feel \nmore comfortable with the product and CGA upper management was trained, this problem became less apparent. \nScope management using the spiral development cycle in the face of a fixed-price engagement proved to \nbe achievable only with experienced, seasoned technologist working in a cooperative team environment. \nFortunately, the core CGA staff was highly educated and all had seven or more year of field experience. \nInitial conveyance of the problem solution in object- oriented terms proved to be more difficult than \nexpected. Since upper level management at CGA and the clients were unfamiliar with 00 technology, a correlation \nbetween object representation and top- down structured methodology was continuously sought. This led \nto two representations of the system, one in object-oriented symbology and the other using process-driven \ndata flow diagrams. Although the dfd s were not used in the actual system construction or the detailed \ndesign, they did enhance the understanding by management and clients. The construction phase of the project \nbrought to light technical difficulties. During compilation, Unix limitations as well as ProKappa runtime \ninternal deficiencies became apparent as the number of rules per object grew. These problems delayed \nthe runtime completion by approximately one calendar month Another difficulty was the integration of \nthe ProKappa tool with Oracle and UIMX. The research involved took one man month The compiler used during \ninteractive development proved to be different from the compiler used when building a run time. The one \nused to build the runtime was less forgiving and, in several instances, rejected syntax or caused unresolved \nreferences that did not occur during interactive unit testing. Inexperience with object-oriented tools \nled to unexpected results during integration testing. Since black-board architecture was used, there \nwere several instances of unexpected inheritance between application layers. These areas were only detected \nthrough extensive integration testing. Another problem arose with recursive calls to polymorphic methods. \nFor example, once the application layers were integrated, a call to a destructor would destroy all children \nbetween application layers.  Successes of the Project By using object-oriented techniques and a highly \nproductive development environment, the client was fully satisfied with the result. The system was delivered \non time, within budget, and functioned in a manner consistent with the original specifications. Non computer \npersonnel were used in development. This point lead to a transfer of tool technology to motor experts \nrather than motor engineering knowledge to computer experts. Using domain experts as developers also \neliminated the misunderstanding normally seen when experts communicate a need to computer experts who \nthen translate this need into computer programs. The resultant system was of higher quality and considerably \neasier to maintain. The subject layer encapsulation relegated the locality of effect to a smaller abstraction \nof the system when enhancing and debugging.  Conclusions We have discovered that, while object-oriented \ntechniques can be an appropriate and productive choice in the business world, all of the problems encountered \nmay not be technical. Internal sales of the techniques must be carefully pursued and careful cultivation \nof a positive perception of these techniques must be maintained. If the corporate culture does not accommodate \nthe formalism involved with object technology, compromises and education will be the key to success. \nAbove all, we have learned that a methodology must be a malleable device tuned to the job at hand and \nused with wisdom rather than blind support. With careful application, object technologies can be a long-term \ninvestment that will pay with greater productivity and higher quality systems. 5-10 October 1992 -ll-Addendum \nto the Proceedings \n\t\t\t", "proc_id": "157709", "abstract": "<p>The AUTOSPEC system is an automatic motor specification software system that primarily serves to non-interactively produce bill of materials from sales orders. At the core, the system applies Expert System and coordinated Relational Database technology to effect an object-oriented implementation. Computer Aided Software Engineering (CASE) tools supporting object-oriented analysis (OOA) and an object-oriented design (OOD) approach were used to provide a smooth transition of the software design effort into production at motor manufacturing plants. The powerful mechanisms of class inheritance, and forward chaining, as well as graphical program construction provided by the ProKappa Knowledge Base System are employed. Motif Graphical User Interface (GUI) development was carried out using UIM/X, a WYSIWYG screen development tool. The ORACLE Database Management System was used to provide data independence necessary for engineering system interfacing.</p>", "authors": [{"name": "Charles A. Suscheck", "author_profile_id": "81100283073", "affiliation": "", "person_id": "P44032", "email_address": "", "orcid_id": ""}, {"name": "Gregory J. Komar", "author_profile_id": "81332509687", "affiliation": "", "person_id": "P99818", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157711", "year": "1992", "article_id": "157711", "conference": "OOPSLA", "title": "AUTOSPEC: Automatic Motor Specification System", "url": "http://dl.acm.org/citation.cfm?id=157711"}