{"article_publication_date": "12-01-1992", "fulltext": "\n Addendum A 92 to the Vancouver, British Columbia, Canada 5 - 10 October 1992 Proceedings Experience \nReport- The WyCash Portfolio Management System Report by: Ward Cunningham Cunningham &#38; Cunningham, \nInc. U.S. pension funds, corporations, and banks invest billions of dollars in the cash markets. Cash \nsecurities are generally considered those with a remaining term to maturity of less than one year, but \ncan include those with maturities as long as five years. Incredibly diverse in nature, cash securities \nare actually negotiated between issuer and buyer, and new security types are frequently introduced into \nthe market. WyCASH+ is a portfolio management system which provides basic accounting, record- keeping \nand reporting, as well as analytical computations to assist the manager of cash portfolios. For the development \nof WyCASH+, Wyatt Software chose to employ object technology in order to quickly and effectively address \nthe diversity present in the market. Objects help in two ways. First, many security types fit nicely \ninto an inheritance hierarchy which is directly supported by our language (Smalltalk) saving us considerable \neffort in coding. Second, changing market demands often require massive revisions which we have been \nable to accommodate because of the modularity intrinsic in a totally object-oriented implementation. \nOur customers value our responsiveness as much as, if not more than, our product s fit to their current \nneeds. We developed the product by incremental growth from a working prototype. Each member of our small \nengineering team maintains at least general 5-10 October 1992 knowledge of all aspects of the roughly \nfour megabytes of source code. This includes some libraries provided by the vendor and others written \nto our specification by third-party contractors. Mature sections of the program have been revised or \nrewritten many times providing the consolidation that is key to understanding and continued incremental \ndevelopment. We found that some key implementation ideas were slow to emerge in the course of WyCash \ns development. Although many of our objects are derived directly from things or concepts that appear \nin documentation, and others were easily drawn from the collective experience of our programmers, a third, \nand more tantalizing, category of objects only surfaced through a process we could call Incremental Design \nRepair. We found these highly leveraged abstractions only because we were willing to reconsider architectural \ndecisions in the light of recent experience. The same flexibility that allowed us to tackle diversity \nin our problem domain, specifically the flexibility afforded by the universal use of polymorphic messages \nsends (i.e. pure object- oriented programming), allowed us to include architectural revisions in the \nproduction program that would be judged too dangerous for inclusion under any other circumstance. For \nexample, it was not uncommon for a new feature to fit poorly into an existing object architecture. Polymorphism \ngave us the option of revising the architecture for only some of the program features. Our newly designed \nobjects  -29-Addendum to the Proceedings could coexist with objects of an earlier design allowing us \nto defer conversion work until later releases. This had the added advantage of allowing our programmers \nto familiarize themselves with the new architecture as time became available. The ultimate removal of \nthe immature architecture would leave us with a program that had been simplified in the course of adding \nfeatures-a truly enviable situation. We believe this process leads to the most appropriate product in \nthe shortest possible time, Although immature code may work fine and be completely acceptable to the \ncustomer, excess quantities will make a program unmasterable, leading to extreme specialization of programmers \nand finally an inflexible product. Shipping first time code is like going into debt. A little debt speeds \ndevelopment so long as it is paid back promptly with a rewrite. Objects make the cost of this transaction \ntolerable. The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code \ncounts as interest on that debt. Entire engineering organizations can be brought to a stand-still under \nthe debt load of an unconsolidated implementation, object-oriented or otherwise. The traditional waterfall \ndevelopment cycle has endeavored to avoid programming catastrophe by working out a program in detail \nbefore programming begins. We watch with some interest as the community attempts to apply these techniques \nto objects. However, using our debt analogy, we recognize this amounts to preserving the concept of payment \nup-front and in-full. The modularity offered by objects and the practice of consolidation make the alternative, \nincremental growth, both feasible and desirable in the competitive financial software market.  Contact \ninformation: Ward Cunningham Cunningham 8z Cunningham, Inc. 7830 S.W. 40th Ave. Portland, Oregon 97219 \n (503) 245-5633 OOPSLA 92 Vancouver, British Columbia  \n\t\t\t", "proc_id": "157709", "abstract": "", "authors": [{"name": "Ward Cunningham", "author_profile_id": "81100562629", "affiliation": "", "person_id": "PP14195259", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/157709.157715", "year": "1992", "article_id": "157715", "conference": "OOPSLA", "title": "The WyCash portfolio management system", "url": "http://dl.acm.org/citation.cfm?id=157715"}