{"article_publication_date": "01-28-1980", "fulltext": "\n Permission to make digital or hard copies of part or all of this work or personal or classroom use is \ngranted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, \nto post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. &#38;#169; \n1980 ACM 0-89791-011-7 $5.00 with atomic sentences q~,ql>q2, . . . the Gw is defined to be the formula \n~F~W. classical connective ~,A>V,2 and the tense connective F,X,U. We let M = (M,<,Q0,Q1,Q2,. . . ) be \na model, where (M,<) is a linearly ordered set and Qig. FOP each atom q. of the language, Qi is con\u00ad \n1 sidered the truth-set of q. . We define 1 the notion II W[(:, fol? mEM by induction on the formula \nw. (\\(w[l~ is the truth val\u00adueof wat minthemodel M). Mis usually omitted and we write Ilwllm (1) For \nW = q. atomic, Ilwl[m = true iff 1 mCQi.  (2) [/ W/lm= =iff Ilwllm= false. = true iff = false  Ilwl=wzllm \n_ Ilwlllm _ or IIW21] = * (3) {lXw\\[m =mtrue in case m has an imme diate successor m EM and Itwllm, = \ntrue (4) IIFwII,, . ~ iff ~ml.m s.t. IIwlj .  1 true (5) llw~ wJ/m Lxxs if ~m2>m such that = true and \nfor all ml, [lw211m2 m m~ m~ * llw~ll = g. 1 M is called an u-model when its time structu~el! (M,<) consists \nof (set u of) the natural numbers with their usual order\u00ading. A formula w is said to be u-valid when \nIlwlln = true for all w-models M and all nEu. We denote by L(U) the sublanguage obtained from L(X,F,U) \nby omitting X,F. This involves no loss of expressive power since Fw a (true Uw) Xw ~ (false U w). 164 \nThe application of temporal Logic to Program Reasoning is based on the view of prOgrams as generators \nof execution sequen\u00adces . If we allow nondeterministic prog\u00adrams , then each input to a program gener\u00adates \na set of possible execution sequences. Each execution sequence is a sequence o = O sl  of program states, \nsuch that o is the initial state containing the input and each i+l is derived from s . 1 by executing \nthe appropriate program inst\u00ad ruction. By including the program location as part of the state, the appropriate \ninst\u00adruction (or set of possible instructions in the nondeterministic case) is uniquely id\u00adentifiable. \nObviously, by stating proper\u00adties which hold for all the execution sequ\u00adences of a program, we are stating \nproper\u00adties of the generating program. To illustrate this point let the pro\u00adgram be labeled by labels \ngo,... fie, !0 being the entry point and %e the exit point. Let us select a set of propositions at% ,... \nati such that atl. is true oe 1 in a program state s iff when in state s the program is about to execute \nthe in\u00adstruction at location &#38;i, The following temporal formula expresses then the prop\u00ad erty of \npartial correctness with respect to an input-output specification (W,~): (atLoA~=~AqI(~) )-G(atie=~(~ \n,j)) Interpreting this formula in state so of an execution sequence so, s ,... it reads: 1 If at we \nare at with the o o program variables ~ equal to an input ~ satisfying ~(~), then it is invariably simplest \nclasses: true that whenever we reach the termina- Invariance -Properties expressible tion point J.e, \n~ will hold between the in\u00ad by a formula of the form: p=Gq. The class put values ~ and the current value \nof the of invariance contains the properties of program variables, Note that this guaran- Safety, Partial \nCorrectness, Mutual Exclu\u00ad tees correctness provided the program term\u00ad sion, Clean Performance, Deadlock \nFreedom. inates, but does not guarantee termination Eventualities -Properties expressible itself. by \na formula of the form pZFq. It includes Similarly, to express total correct\u00ad among others the properties \nof: Liveness, ness we write: Total Correctness, Accessibility, Livelock (at~oAj=~AQ(~) )=]?(at8eA+(~ \n,j)). Freedom, etc. The language was also shown to be ade- This guarantees that if we satisfy the quate \nfor the detailed description of the proper initial conditions then we will ev\u00ad execution of a concurrent \nprogram model. entually get to a sta-te at which both at~e This enables the definition of the semantics \nand ~ are true, hence to correct termina\u00ad of a concurrent system and a derivation of tion. proof principles \nfor proving its properties. This general idea of expressing and ([P21)$ proving properties of programs, \nby temporal However, investigating more complica\u00ad reasoning on the set of their execution ted properties, \nin particular these involv\u00ad sequences was pursued in greater detail in several works, ([PI], [P21, CMpl, \n[K~l). ing fairness, led us to the realization that the L(X,F) language is not expressive- It has been \nshown there that the language ly complete. By this we mean that there ex- L(X,F), consisting of the operators \nX and ist some important properties which cannot F (and hence also G) is a powerful tool be expressed \nin such a limited system. The for formalizing many important properties simplest one is that of the \nuntil condi\u00ad of programs. Its main strength and advan\u00ad tion itself, p U q, which states that q tage \nlie in the treatment of properties is bound to happen, and until it happens, which cannot be expressed \nwhen viewing pro\u00ad p will hold. As a result, the language grams as functions or relations. The se that \nwe present here is an augmented lan\u00ad properties are of cou?se essential in dis\u00ad guage L(U) = L(X,F,U) \n, which is based on cussing operating systems, concurrent pro the operators: F,X,U (and G). The question \ngrams and nonterminating (cYClic) programs naturally arises, whether we will not even\u00ad in general. Classifying \nproperties accord\u00ad tually encounter some further properties ing to the form of the temporal formula which \ncould not be expressed even in this (and hence the applicable proof method) expressing the% we arrive \nat the following extended system. We provide a negative ans\u00ad wer to this question by showing that the \ntion (say, x>O) which presumably some L(U) language is expressively complete. We other process is expected \nto generate. also provide an axiomatic system, DUX which m: ifx = Othen ~ tom . is shown to be deductively \ncomplete for We use the proposition atm which is true L(U). at each time instant in which the execution \nWe will emphasize the importance of of our process is at m, namely about to ex\u00ad tul the operator by \nlisting first some ecute m. Then, the only statement we can properties, involving responsiveness which \nmake about this situation and its resolu\u00adcan be expressed without the U! , and then tion is: some properties \nwhich must use the until m G(atmAX>o) operator for their expression. We will list i.e. it is impossible \nfor the process to be first different shades of responsiveness stuck at m while x is continuously posi\u00adaccording \nto the strength of their commit\u00ad tive . It implies that the scheduler will ment : eventually schedule \nthis process which will find x positive and proceed beyond m. a) Response to Insistence This is also \nthe weakest definition of The weakest form of responsiveness a semaphore s behavior, as well as the mini\u00ad \nstates that a permanent holding of a condi\u00admal fairness requirement from any scheduler. tion or a request \np will eventually force a It requires that any process will eventual\u00ad response q. ly be scheduled for \nexecution. Note that This can be written as: Gp z Fq, or for semaphores this allows infinite over\u00ad if \nstated ove~ all future behaviors taking. G(Gp -Fq). Sometimes, the response q frees the b) Response \nto Persistence requester from being frozen at the request- A stronger requirement and the one ing state. \nIn this case once q becomes which most suits a semaphore s behavior true> P ceases to hold, apparently \nfalsi\u00ad is that the infinitely repeating occurrence fying the hypothesis Gp. This difficulty of the condition \np will eventually cause q. is only interpretational and we can write We do not require p to hold continuously, \ninstead the logically equivalent condition but only to be true infinitely often. The * G(p A% q), namely, \nit is impossible for statement of this eventuality is: P to be frozen indefinitely and q never GFp aFq \nto realize. or if required continuously: G(GFp z Fq). To illustrate the utilization of such Similarly \nto the case above the a statement, consider a component of a first form is logically equivalent to process \nwhich is busy waiting for a condi\u00ad~G(FpA~q) which we will sometimes prefer. Consider a semaphore instruction: \nm: P(x) The proper statement of its behavior is: ~ G(F(x>O)Aatm) This st ates that no process can be \nwaiting indefinitely at m for a semaphore entry while the semaphore s variable turns true (positive) \ninfinitely often. Note that to ensure this it is not sufficient to guarantee that this process will be \nsched\u00aduled infinitely often. Because by some high\u00adly improbable run of bad luck all these scheduling \ninstances could exactly coin\u00adcide with the instances in which XZO, and the process will never proceed. \nThe same criterion should alscj apply to the fairness of conditional critic!al section instruc\u00adtions \n: m: with Pwhen Bdo S. . Here we should also require: w G(F(r>OAB)Aatm) i.e. it is impossible to remain \nstuck for\u00adever at m while states in which both B hold and the resource (r) is free, repeat infinitely \noften. This can be implemented by means of semaphores and a queue, or us\u00ading an unbounded counter ([LII). \nIt cannot be done with semaphores alone (see [GRI and [KRI for a discussion). A weaker interpretation \nof the condi\u00adtional critical section is also possible: -G(F(r~O)AatmAB) This one guarantees admission \nonly if B is permanently held true from a certain point on, while r becomes free (positive) infinitely \noften, The implementation of this weaker construct by semaphores is easy. c) Response to an Impulse \n The strongest type of responsiveness is the one in which a single occurrence of p guarantees q. This \nis written as: p 1 Fq (more generally G(P ~ Fq)). It is a natural and useful expression for the discussion \nof total correctness, sometimes reasonings, and other temporal causalities of internal events, It is \ntoo strong, on the other hand, for the expression of responses to extern\u00adal signals and conditions. This \nis so be\u00adcause it is seldom the case that a system is so attentive that it could always detect a single \noccurrence of an incoming signal which does not repeat. Having formulated the different types of responsiveness, \nwe can augment them with requirements for fairness. While managing quite well in cases a) -C) with just \nthe F,G operators, we must introduce now the until operator U. Consider the following situations: d) \nAbsence of Unsolicited Responses We may wish to complement the state\u00ad ment that p will eventually cause \nq (p a Fq), by saying that on the other hand, q will never happen unless preceded by a p, We may wish \nto state for example that a resource allocation system will not grant a resource +0 somebody who did \nnot request it. Ignoring boundary effects (i.e. p and q happening simultaneously), this can be the program. \nAn example of statements and reasoning about strict fairness exists in expressed as: Fqo(mqup) [Ll]. \ni.e. that if q is going to happen at all, d) and e) ape really only a first it cannot happen until p \nhappened first (or approximation to the properties we had in concurrently) . mind. For example Pr(p,q) \nstrictly ensures only that the first occurrence of q is Suppose there are two requests PI preceded by \nan occurrence of p. What exact\u00adand p2 and two corresponding responses ql ly we would like to have is: \nEvery q is and q2. We may wish to impose strong FIFO preceded by a p which happened after the discipline \non the responding agent and e) Strict Fairness last q, if any . Thus we cannot be satis\u00adstate that if \npl preceded p2 then ql will fied with a single p succeeded by many precede q2. q s, even though this \nsituation formally For this it is convenient to express satisfies the requirement: every q is pre the \nfact that starting from the present, ceded by a p . The property described above, i.e. interleaving of \nat least one the first occurrence of must be pre\u00adp between consecutive q s can be described P2 ceded \nbY an occurrence of P1. In fact this is exactly the expression used in d) above as : Pr(p,q)AG(q~pr(p,q)) \nand we define generally: It states that picking as a reference point Pe(P1,P2) = FP2 ~ (~ P2 UPI) either \nthe initial state, or any instant The strict responsiveness discipline (FIFO) in which q holds, ensures \nthat the first can now be written as: instance of q after the reference point is preceded by an instance \nof p occurring Pr(p1,p2) =1 pr(q1>q2) between the reference point and the in- Consider for example two \ncompeting sema\u00ad stance of q. phore instructions : In view of the demonstrated importance m: P(x) n : \nP(x) of the operator U we will now address m : ~l. ourselves to the more theoretical questions of its \ncontribution to the expressive power A FIFO implementation of semaphores would of the language, and \nthe appropriate deduc\u00ad require: 2) Is L(U)=L(F,X,U) expressively Pr(atm, atn) 0 Pr(atm , atn ). tive \nsystem for reasoning about L(U). Sepcifically, we pose the following One could use this as a basic axiom \nfor the questions: behavior of semaphores under a given (FIFO) 1) Is L(F,X,U) expressively stronger implementation \nand then deduce from it than L(F,X), or could we perhaps express a global FIFO behavior of larger parts \nof u in terms of F,X? complete, or are there some other reason\u00ad able properties which cannot be expressed \neven in L(U)? 3) What is an appropriate de\u00ad ductive system for L(F,X)? 4) What is an appropriate deductive \nsystem for L(F,X,U)? Question no. 1 was answered by Kamp ([KP1], Ch. IV Theorem 3) who showed that U \ncannot be expressed. in terms of an even richer language than L,(F,X). Kamp was ac\u00adtually the first to \ndeal with these ques\u00adtions, realizing that L(F,X) is expressive\u00adly incomplete, and to introduce the until! \noperator as well as its past counter\u00adpart, the since operator. He also showed that the Language with \nboth the lsincel and * until f operators is expressively complete for expressing situations extend\u00ading \nover the past, present and future. The main new point in our work, as compared to his is, in addition \nto a simpler proof, the isolation of the future fragment and showing its independent completeness. Since \na dual proof applies to the past fragment, this provides an alternate derivation of Kemp s original result, \nand a separation property of the mixed Language L(U,S), in\u00adto L(U) and L(S). Also our methods have led \nto a solution of a problem left open by Kamp, that of obtaining a natural temporal language which is \nexpressively complete for arbitrary linearly ordered time structures (see end of section 2,). The affirmative \nsolution to question 2) is presented in sec\u00ad tion 2. Deductive systems for both L(X,F) and L(X,F,U) \nhave been suggested in [P2] and [MY] respectively. These system, DX for L(X,F) and DUX for L(X,F,U), \nhave been claimed complete in these works but proofs were not presented. In section 3 we pro\u00ad vide an \noutline of a proof which applies to both systems and establishes their complete\u00ad ness . 2. L(U) is expressively \ncomplete We begin by defining our notion of expressive completeness. The standard of comparison will \nbe the first-order lang~age L1 of linear order. L1 is a first-order language with equality, containing \nthe bin\u00adary predicate < and unary predicates qo>ql>q2>. ..Y which we identify with the atomic sentences \nof the propositional tem\u00adporal language L(U) described before. Note that L1 and L(U) are interpreted \nin the same kind of models, namely in structures M z <M,<,Q0,Q1,Q2, ...> where ~ is a lin\u00ad ear ordering \nof M and Qi ~ M for i~u. The model M is said to be complete when every non-empty bounded subset of M \nhas a least upper bound and a greatest lower bound (in the ordering <); discrete when every ele\u00adment \nmEM which is not maximal in <M,<> has an immediate successor, and every non-mini\u00admal element has an immediate \npredecessor; an w-model when <M,<> is the set of natur\u00adal numbers with its usual ordering. Every u-model, \nas well as a model ordered like the integers, is both discrete and complete. The ordered set of real \nnumbers is complete but not discrete, and the ordered set of rational numbers is incomplete. There is \na natural translation of L(~)-formulas 9 into L1-formulas e~i(x) such that for every model M = <M,<,.. \n.> and e>? mEM, is satisfied in M by the ele\u00adment miff eistrue in Mat(the instant) m. We express this \nby saying that 9-> t = e in M at m for all models M and all mEM. Expressive completeness means the ex \nistence of a translation in the other dir\u00ad ection, and is given for u-models in the following theorem. \nTheorem 2.1. For every formula ~(x) of Ll there is an L(U) -formula 8 such that w = 6 in every u-model \nat the point O. [The restriction to point O is necessary because the truth value of any 6EL(U) in M \nat m depends only on what happens in M at and after m, not before m, whereas Ll form\u00ad ulas may refer \nalso to the past.] This theorem is a special case of the following one, in which the ~estriction to X \n= O is removed but we assume that Q(X) has a special form, By a fu+ure formula of L1 we mean a formula \n~(x)~<ch all quantlif~ers ape restricted to [x,~), i.e. are of the form (Vy>x] or (3y>.x). Such form\u00adulas \nrefer only to the present and future @f the moment x. Theorem 2.2. For every future formula Q(X) of L1 \nwe can find an L(U)-formula El such that v = 8 in every discrete complete model at every point. This \nis closely related to the main result of [KII, which asserts that the lan\u00adguage L(S,U) with Since and \nUntil is ex\u00adpressively complete, with respect to the full language Ll, over complete models. Our approach \nto Theorem 2.2 can easily be adapted to give a simpler proof of Kamp s theorem, which in fact follows \nfrom Theorem 2.2 and its dual for the case of discrete complete ordering. Conversely, Theorem 2.2 follows \nfrom Kamp s theorem together with the following: Theorem 2.3. Every L(S,U) formula is equivalent, over \ndiscrete complete models, to a Boolean combination of L(S) and L(U) formulas. In a sense 2,2 is equivalent \nto the conjunction of 2.3 and Kamp! s result. In [G2], Theorem 2.3 is proved by a direct syntactical \nargument and shown to imply Kamp s theorem (and hence Theorem 2.2). The proof of 2.2 presented here \nfollows [ss1. Proof of 2.2 (outline). First we need a normal form for L1-formulas with any num\u00adber of \nfree variables, in order to restrict later inductions to formulas @(x,y) which refer only to what happens \nbetween x and y (allowing y=-or x=-~, this includes also formulas about the future of x or the past of \ny). For every variable z let At(z) be the set of all formulas of the form +q:(z) (i.e. qi(z) or m qi(z)), \niCu. If x and~y are distinct variables define the set Betn(x,y) of formulas by induction on n as follows: \nBetD(x,y) = 0; Betn+l(x,y) = {~3Z(X<Z<YATJ1A. . . Aq2m) ImCu and for each i, @i E Betn(x,z) UAt(z)UBetn(z,y) \n}. Let Bet(x,y) = U Betn(x,y); nEu Aft(x) = Bet(x,~); Bef(x) = Bet(-~,x). Call a formula *(xl, . . ..xk) \nspecial on Xl,, ..,xk when it has the form ITAI+lA. . . A*m, where n determines the rela\u00adtive order of \nxl,... ,xk (say xl<. ..<xk), m~u and each vi is in the set Bef(xl) UAt(xl)UBet(xl,x2 )U. .. lJAt(xk)UAft(xk) \nLemma 1. E~:FI L1--farmula @(xl,. ..,xk) is equivalent to a finite disjunction of special formulas on \nxl, . . . ,x k This is proved by induction on v and is essentially [Kl, Ch. II, Theorem I]. The next \ntask is to analyze the expressive pow er of a formula in Bet(x,y) , where x or y may also be -~ or +~. \nIt is at this point that our proof begins to diverge from Kamp s . We define the notion of a Decompo\u00adsition \nFormula. This is a formula 6(x,y) of the form: X<YA ~ ZO,. .,>Z ~[x zo<zl< . ..<zn=yl n-1 n A ~ 8i(Zi)A \n~ btl(z i_l<u<zi3Qi(u) 1  i.1 i=l where each 6. q. is a translation into L 1 1 1 of an L(U) formula. \nIf y = ~ we allow addi\u00ad tional conjuncts of the form Vu(wu)yj(v) whe~e each is a:n L -translation too. \n+j 1 Main Lemma. Every formula in Bet(x,y) is equivalent to a disjunction of decomposi\u00adtion formulas. \nApplying this lemma to a Bet(x,~) form\u00adula yields theorem 2.1 since a decomposition of (x, =) is easily \ntranslatable into an L(U) formula about x. The Lemma itself is proved by induction on n for formulas \nin Betn(x,y). The diffi\u00adcult part involves negation and is over\u00adcome by: Prop. 2.4. A negation of a decomposition \nformula is equivalent to a finite disjunc\u00adtion of decomposition formulas. In order to prove this proposition \nwe introduce the concept of event express\u00adions. These are terms of an auxiliary lan\u00adguage which describe \nfirst or last occur\u00adrences of events given by a temporal form\u00adula. A typical event expression may be: \n!!The last q occurrence before the first p occurrence in the interval (x,y) . A main lemma is the proof \nstates that for each decomposition formula we can find a finite set of event expressions, such that their \nrelative order determines the truth value of the decomposition formula. Conversely, every statement of \nthe rela\u00adtive order of some event expressions is equivalent to a disjunction of decomposi\u00adtion formulas. \nSince a finite set of event\u00adexpressions has a finite number of possible order arrangements, and any interval \nin a given model realizes exactly one of these arrangements, the negation of some of them is equivalent \nto the disjunction of the rest. This leads to proposition 2.4. This proof can be modified to apply to \nan arbitrary complete linear order (not isomorphic to natural numbers). We can then obtain an alternate \np:roof of Kamp s result about expressive completeness of U and S. Moreover, we can add to U, S two more \nconn\u00adective U and S handling gaps and ab~ain the following theorem: Theorem 2.5 Every formula Q(x)EL, \ncan be translated into a formula e of L(S,U,S ,U ) such that 9 Z O in every linearly ordered model at \nany point. 3. DX and DUX are Deductively Complete In this section we present twO axiom\u00adatic systems, \nDX for L(F,G,X) and DUX for L(F,G,X,U) and prove their deductive com\u00adpleteness, i.e., every temporal \nformula of the language which is valid in all u-models is provable in the appropriate system. Validity \nin this section should be taken as validity in all u models . The axiomatic system can be taken as follows: \nAxioms : Take G,X,U as primitive and de\u00adfine Fw = ~G(~w). Al. +G(pnq)a(Gp-Gq) A2 . !-X(mp) = Wxp A3 , \ni-x(p=Jq)=(xp=xq) A4 ; l-GpaXpAXGp A5 . FG(p=Xp)a(XpnGp) U1 . FpUq~Fq U2 . +pUq ~ xqV(xpAx(@q))  Rules \nof Inference. R1 . If w is a tautology then kw. R2 . then FW2 lf wl=w2 and W1 (Modus Ponens) R3 . If \nl-w then EGW (Generalization) The system consisting of A1-A5, R1-R3 is the system DX (1) , while the \nfull system (adding Ul, U2) is the system DUX(II). The semantical interpretation is the one given in \nthe introduction. Theorem 3.1 (Soundness) (1) If [ ~w then w is valid. (2) If +llW then w is valid (For \nw in the two appropriate lan\u00adguages : L(F,G,X) and L(F,G,X,U)).  Theorem 3.2 (Completeness) (1) If \nw6L(F,G,X) is valid then [-~w (2) If wEL(F,G,X,U) is valid then k IIW. Proof: Let WO be a 1-consistent \nwff. We will construct a finitely representable u-model satisfying WO. The proof proceeds through several \nmajor steps: We construct first a model S foF w whose elements, A are each a maximal consistent theory \n(a maximal set of formulas which are consistent relative to I OP II). S is not necessarily an u mod\u00adel, \nbut it satisfies WO. Next we take a finite set of formulas r, which contains WO and all of its sub\u00adformulas \nand is closed under some appro\u00adpriate requirements (e.g. if FwEr, then al\u00ad so xwcr, xFw6r). We construct \na finite model $ obtained by identifying states (points) of S which agree over r: Up to this point the \npro\u00adcess is very similar to the proof of com\u00adpleteness for Propositional Dynamic Logic ([GII, see also \n[FL]). The problem with $ is that a state may have more then one successor. We thread through ~ an infinite \npath which has the property that it traverses infinitely often every node of one of the strongly connected \ncomponents of 3. In other words, if a node nE3 appears infinitely often in the path then so does each \nof its ~ successors. This ultimately periodic path serves as our final model. A more detailed description \nfollows: Let S be the set of all maximal consistent theories of the system. A stan\u00addard argument shows \nthat for some AO in s, WOEAO. Define the following relations <and +on S. + A = {wIXWEA} A<@ iff for all \nw, GwEA+wCO. It can be shown, using the axioms and theo\u00adrems that: A +ES for every AES and Vx,y,zES (X<YAX<ZAY+Z+Y<ZVZ<Y) \nIf FwEA then for some 0, A<EJ and wE@. Thus <, restricted to the set of all A, is a linear order consistent \nwith F. JAO The next step is to extend {wo} to a set r of formulas having the following closure properties: \n(a) FwEr + Xw, XFwCI , xwcr + xmwEr x(w1uw2)er luw2Er + W2 XW1 XW2 (b) r is closed under subformulas \nand boolean operations. Moreover, r can be chosen so as to con\u00adtain only finitely many distinct formulas, \nup to logical equivalence. Let ~ = {AilrlAES}. Clearly S is a finite set. Definition. Define P+>P< on \n~ by: to+s iff for some AES, t=Anr and s = A+nr. tp<s iff for some A,OES, A<O and t = Anr, s = onr. \nLemma p< is the transitive closure of p+. The proof uses the induction axiom scheme A5. We are ready \nnow to define the model (w,<,{di}). Let SO = Aonr, which is an element of ~ containing Wo. Let {Sn} be \na sequence of states from ~ such that for any tE3, if t = Si for infinitely many i then every t such \nthat tp+t is also equal to infinitely many Si. We use {sn} to form our final model, The truth assignment \nfor the atoms in this model is given by Qi = {nlqiCSn}. Lemma For any wEr, Ilwlln = ~iffwESn. The proof \nproceeds by induction on w. For each connective we use the axioms involving that connective. We thus \nget that = true. llwJ We have shown that for any con sistent there exist {Qi} such that o = true in the \nmodel (u,<,{Qi}).  Ilwollo This proves the completeness theorem, Corollary Both DX and DUX are decid\u00adable. \nSince the final model constructed was finitely representable we can deduce from the proof a bound, depending \non Wo, for the size of its finite representation. Hence if a formula is satisfiable it is satisfiable \nby a model whose complexity does not exceed this bound and a decision procedure exists. Comment. In the \nearlier work ([P1],[P2], [MY]) the temporal operators were defined in a somewhat different way than in \nthis work, The definitions here conform more closely to the conventions used by temporal log\u00adicians. \nDenoting the temporal operators under the interpretation given in [PI] etc. by FO,GO,UO respectively \nthey can be re\u00adlated to the operators used here as fol\u00adlows : FOw : WVFW GOw ; WAGW Wluow ; GW1VW2V(WIA(W1UW2)) \n2 Note that the difference is whether we include -the present as a part of the future or exclude it. \nAlso, U has an exis\u00adtential character while UO has a univer\u00adsal character. In discussing program prop\u00aderties \nthe FO,GO,UO operators seem more natural, as the attentive reader of section 1. might have realized. \nThe axiom systems DX and DUX described above can easily be transformed to complete axiomatix systems \nDOX and DOUX for L(GO,X) and L(GO,X,UO) respectively. AOl. kGO(paq)=(GOp=GOq) AU2. i-x(mp) = Wxp A03. \nI-x(p=q)=(xp=xq) A04. t-GOp-pAXGOp A05. !-GO (poXp)a(paGOp) U l. EGOp-pUOq u02. ~puOq=qV(pAx(puOq) \no in The inference rules are the same, using G the generalization. AOl-A05 , R1-R03 constitute DOX, while \nthe full system is DOUX. A system equivalent to DOUX appears in [MYI. References [FL] -Fischer, M.J. \nand R.L. Ladner: llproPositional Modal Logic of pro\u00ad grams , Proc. of the 9th ACM Symp. on the Theory \nof Computing, Boulder, Col . May (1977). [Gil -Gabbay, D.: Axiomatization of Lc gic of Programs , Manuscript, \nNov. (1977). [G21 \u00ad [GRI \u00ad [Kl] \u00ad [K21 \u00ad [KRI \u00ad [Ll] \u00ad [L21 \u00ad [MP] \u00ad [MY] \u00ad [Pll \u00ad [P21 \u00ad [ss1 - Gabbay, \nD.: The Separation Property of tense Logics , Manuscript, Sept. (1979). Gries, D.: 11A proof of Correctness \nof Reim s Semaphore Implementation of the with-when statement , Tech\u00ad nical Report TR 77-314, Cornell \nUniversity, Ithaca, N.Y. Kamp, H.W.: Tense Logic and the Theory of Linear Order , Ph.D. Thesis University \nof California, Los Angeles 1968. Kamp H.W.: Completeness Results in Temporal Logic , Preprint (1978). \nKrablin, L.: A Temporal Analysis of Fairness, M.SC. Thesis, University of Pennsylvania (1979) Lamport, \nL: Proving the Correctness of Multiprocess Programs , IEEE Trans. Software Engineering, SE\u00ad3, 7 (March \nL977) pp. 125-132. uproving the Cor~ect- Lamport, L.: ness of Multiprocess Programs , ACM TOPLAS, Vol. \n1, No. 1 (JUIY (1979) pp. 84-97. Manna, Z. , Pnueli, A. : The Modal Logic of Programs , Int. Conference \nin Automata, Languages and Program\u00adming, Graz (July 1979). Myers, T.J. and A. Pnueli: The Tem\u00ad poral \nSituation Until Now , Techni\u00adcal Note, University of Pennsylvan\u00adia (1979). Pnueli, A.: The Temporal \nLogic of Programs , 19th Annual Symp. on Foundations of Computer Science, Providence, R.I. Pnueli, \nA.: The Temporal Semantics of Concurrent Programs , Int. Symp. Semantics of Concurrent Computation, \nEvian, July 1979. Shelah, S., J. Stavi: Expressive Completeness for Temporal Logic , Forthcoming.  \n \n\t\t\t", "proc_id": "567446", "abstract": "The use of the temporal logic formalism for program reasoning is reviewed. Several aspects of responsiveness and fairness are analyzed, leading to the need for an additional temporal operator: the 'until' operator -U. Some general questions involving the 'until' operator are then discussed. It is shown that with the addition of this operator the temporal language becomes expressively complete. Then, two deductive systems DX and DUX are proved to be complete for the languages without and with the new operator respectively.", "authors": [{"name": "Dov Gabbay", "author_profile_id": "81100507087", "affiliation": "Bar Ilan University, Ramat-Gan, Israel", "person_id": "PP39046141", "email_address": "", "orcid_id": ""}, {"name": "Amir Pnueli", "author_profile_id": "81100648459", "affiliation": "Tel Aviv University, Israel", "person_id": "PP15038449", "email_address": "", "orcid_id": ""}, {"name": "Saharon Shelah", "author_profile_id": "81100305582", "affiliation": "The Hebrew University, Jerusalem, Israel", "person_id": "P258572", "email_address": "", "orcid_id": ""}, {"name": "Jonathan Stavi", "author_profile_id": "81100307811", "affiliation": "Bar Ilan University, Ramat-Gan, Israel", "person_id": "PP31036529", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/567446.567462", "year": "1980", "article_id": "567462", "conference": "POPL", "title": "On the temporal analysis of fairness", "url": "http://dl.acm.org/citation.cfm?id=567462"}