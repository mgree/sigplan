{"article_publication_date": "01-28-1980", "fulltext": "\n Permission to make digital or hard copies of part or all of this work or personal or classroom use is \ngranted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, \nto post on servers, or to redistribute to lists, requires prior specific permission and/or a fee. &#38;#169; \n1980 ACM 0-89791-011-7 $5.00 Nole; In &#38;2 below, the condition (v) above is restricted to ~rogram-fret \nformulae A. Moreover, the formulae that occur in the statements of theorems 1-3 are themselves also program \nfree. I.e. they are formulae of the propositional calculus (PC from now on). I=pc stands for consequence \nin the PC. Definition C: A model M for PDL consists of (1) a nonempty universe W ( /!) for each atomic \npropositional symbol Pj a subset P(Pj) of W, and (3) for each ai in ~ a subset Ri of W%W. Definition \nD: Given a model ~, a state s, a formula A and a program a, we define ~ and M,s ~ A by simultaneous recursion, \nas follows (i) M,s k Pj iff s 6 ~(pj). (ii) M,s 1= AVB iff M,s ~A or M,s ~B. (similarly and I)  (iii) \nM,sl=EalA iffforallt, (s,t)c~+M,tl=A M,s F<u>A iff for some t, (sjt) e ~ and M,t bA. (iv) If u =ai then \nR&#38;=Ri. ~;p = (RJ (R~). ~u~ RauR@ %x = reflexive transitive closure of %.. (v) If a = (A?) then \n~ = {(s,s)IM,s I=A}.  Finally, we let, Ml=gA iff for all s t W, M,s EA. (g stands for global .) If r \nis a set of formulae, then M,s I=r if for all A in I , M,s 1= A. Similarly MI=gI , Now we get twff notions \nof consequence. rFA iff for all M ,s, M ,S 1=1 implies M,s 1=A. rkgA iff for all ~, Mt=gr implies MFA. \nLocal consequence and global consequence coincide if r is empty. Otherwise local consequence is stricter, \nE.g. we have P kg [a]P but we do not have P ~[a 1P since running the program a may destroy the fact that \nP holds. This objection does not apply to global consequence, since there assuming P amounts to assuming \nthat P holds throughout the model, and then of course P does imply [a]P. In 12 we are concerted with \nglobal consequence which is the natural one for partial correctness. However, theorem 4 of ~3 applies \nto both kinds of consequence. Acknordedgemenrs: Part of the work on this paper was done while the author \nwas a visitor at the ETH, Zurich. We are indebted to Albert Meyer for several lively discussion sessions. \nWe had contemplated calling this paper PLOP at POPL but abandoned the idea with some regret. $2. Result, \non PCAS: The PCA A{a}B, expressed in PDL as A+[a]B means: if the precondition A holds when a begins, \nthen the post-condition B holds if and when U terminates. In other words, M l=A{ct}B iff M PgA+[UIB. \nClearly questions about (propositional) PCAS are questions in PDL, but since they are questions of a \nspecial type, one may hope for extra information or comparative ease of decision procedures. We shall \nbe interested in the questions (1) When do a finite number of PCAS imply another? and (2) What is the \ncomputational complexity of deciding such an implication? We give information about such questions for \nthe case of (i) a single program, (ii) several loop-free programs, and (iii) arbitrary regular programs \nwith program-free tests.  Note that the notion of consequence 1= used below is the global one. Recall \nalso the note after definition B above. Moreover formulae Ai etc. in this section are program free and \nso are all tests in programs. *PC stands for ordinary consequence (or validity, as the case may be) in \nthe propositional calculus. Definition 1: AI{al}Bl,,,.,Ak{ak}Bk 1= A{ct)B iff for all models M, if MEgAi{ai}Bi \nfor Vi Sk, then Ml=g A{a]B. Thorem 1: The set of expressions (Al {al }Bl,...,Ak{iXk}Bk, A{a}B) such that \nAl{al}Bl,...,Ak{ak}Bk #A{a}B is a context sensitive language (CSL). Proof: The proof closely mimics the \nproof of Proposition 4.11 (due to Albert Meyer) in [12] pp. 86-88, However, for our purposes, we generalise \nthe Jtion of a regular expression to that of a t-express,ion which is a regular expression with Propositional \ntests, Thus, for example, ((P?; a)u(-P? ;b)) is t-regular and represents our familiar if P do a else \ndo b . In the following we assume familiarity with CM] pp. 86-88 and indicate only the necessary modifications. \nSo suppose Al {al? Bl,...,An{an}Bn kA{a}B (r t=A{a}B from now on), fails, then there is a countermodel \nwhich satisfies the hypotheses but not the conclusion A{a}B, By routine arguments there is a tree countermodel \nMl in which each Ra is a 1-1 function from W to W and if a and b are distinct atomic programs, then the \nranges of Ra and Rb are disjoint. Such a tree countermodel is obtained by making extra copies of states. \nso that no state is the recipient of two distinct program arrows, In this model there is a computation \nof the program (represented by the program expression a) which sotisfits the pre-condition A and 187 \nfails the post-condition B. The hypotheses Ai{ai}Bi hold throughout our countermodel, Let the path taken \nby the above mentioned computation be p where p is ~--ty-->sbl->s2 -,sm_l,bm_l--bm_ l-->sm, where the \nsi are the states along the path and each bi is an element of {al,..., an} Then let M be .M1 retricted \nto the set {s@...,sm}. Then M is a !inear countermodel for r kA{cr}B. This happens because all our tests \nwere program free so that the computation proceeds the same way even if all states except the si are \nremoved. The partial correctness assertions Ai{ai)Bi which held in Ml also hold in the linear countermodel \n~ and the latter is completely described by the string x= ~botl ....bmtm. where ti is the truth assignment \nat the state SF I.e. if Pi holds at si, then the truth value of Pi in ti is T, otherwise F, The string \nx completely describes the computation p as far as we are concerned and hence r lf A{a}B holds iff there \nis a string x as above. The rest of the argument consists of showing that we can construct an LBA A such \nthat given the input r, A{a}B, the automaton nondeterministically looks for a string x as above ,and \naccepts f/Ie input if f it finds such an x. Now we modify the argument of [12] pp. 86-88. For r S k let \nE r be a t-regular expression which describes the set of those strings x which contain sotne substring \nY = tibi+l...tj such that tit=Ar (Ar is true under ti)j t$-Br, and Y represents a possible computation \nof the program &#38;r with start state si and last state s.~. Let El be (qu(...u(q)..). Let E2 be the \nt-regular expression which accepts those x which represent a possible computation of d from ~ to Sm and \nsuch that t&#38;A, tml=lB. In fact E2 is just the expression (A?; (a; (-B?)). If tests were absent, \nwe could just use the machine in [12]. However, tests are the point and so a slight modification is needed. \nLet update(test) be the following program for our LBA A: for every marked bracket ( which immediately \nprecedes a test A?, i.e. which brackets the test, if the current truth assignment t (to be described \nlater) makes A true, then replace the mark on the ( preceding A? by one on the ) just after. If t makes \nA false, then just eliminate the mark. Let UPDATE(test) be the procedure: do n times(update test; (do \nn times(update(A))) where n is the length of the input and update(l) is as in [121. Now the procedure \nfor A is as follows: (1) Write El and E2 on a worktape. Mark leftmost brackets. Check that the Ei are \nin the appropriate context-free language. (Note that tests are a CF set) (2) Generate nondeterministically \na truth assignment ~. ~ is current. (3) Do UPDATE(test). (4) If the rightmost parenthesis of E2 is \nmarked and that of El is not, then accept.  (S) Nondeterministically guess an element bi of ~ = {al,...,an}. \nCall update.  (6) Call update(h) n times.  ( l) Nondeterministically guess a new truth assignment ti, \nti is current. (8) Go to three. Then the abovementioned LBA A can accept the input iff r V A{a]B. It \ncan be shown, by slightly generalizing the argument of theorem 1 above that if ~ is any truth functional \ncombination of Al{al}Bl,...,An{an}Bn the the question is I#Jsatisfiable? iS still in CSL. Moreover, if \na is star-free, then the number of possible cycles through the loop 3-8 is bounded by n , since marks \ncan only move in the same direction-from left to right. Since each step takes only a polynomial amount \nof time, then the problem is in (nP)n(linear space). T/worern 2: In theorem 1, if a is *-free (loop-free) \nthen the problem is nP-complete. It is known ([12] p. 90, remark 4.14) that the inequivalen~e of regular \nexpressions is Iog-lin complete in. CSL. Let a = ~ mean that a and # are equivelant regular expressions, \ni.e. the languages La and L@ are equal. Then a = d iff P{a}Q 1= P{19}Q and P{fi}Q F P{a)Q, hence the \npCA problem is also log-lin complete in CSL. ThUS the bound of theorem 1 is best possible. We now consider \nthe case where the ai s all equal a. This simple case has some nice characterisations. If Ai,Bi)AjB are \nformulae of PC, we write (Al, Bl),...,(Ak,Bk) ~ (A,B) for (V&#38;)( Al{a)Bl,...,Ak{a} BkHA(a}B) . 188 \nWe state the following lemmas without proof. One of the lemmas is well known, The other also probably \noccurs in the literature, Lernrna E: Let T, F respectively, stand for the truth values We and )a/se. \nIf + is any formula with propositional variables Pl,...,Pn then ~ is equivalent to (4(pI,...,pl,T)APn)V( \n(4(Pl,l,n_l,F)A, Pn)-Pn) Definition 2: The propositional function #(pi,...,pk) 1S ~~~oto~~ iff #J can \nnever gO frOSU ~ to F when some Pi goes from F to T, the other Pj being fixed, L.mnrmz F: ~ is monotone \niff # is identically T or identically F or can be expressed using A and V only. Definition 3: The Floyd-Hoare \nrules for a single program are: Al{a}Bl, A2{a}B2 (1) where ? isv orA. (Al? A2){a}(B~?B2) ~pcB, B{a}C, \nCkpcD (2) A{a)D Theaxiorru are F{a}B and A{a)T, Dejlrririon4: Let A1..,Bk,A,B be constructed from Pl,...Pm. \n~etc. are obtained from Ai etc. when each Pi is replaced everywhere by a new Qi. rheorem 3: (a) The \nFloyd-Hoare rules aboVe are complete, for proving assertions of the form (Al, Bl),...,(Ak,Bk) k (A,J3). \n (b) (i) (Al, Bl),...,(Ak,Bk)F (A, B)iff  (ii) there is a monotone ~ such that A kpc #( Al,...,Ak) \nand tb(Bl,...,Bk)kpq B iff (iii) I=pc (( A1+B1 )A...A(Ak+Bk )) + (A+B$), (c) The set of all true assertions \nof the form (A1 ,B1 ),..., (Ak,Bk) lf (A,B) is nP-complete. ProoJ (a) and (b) amount to the claim that \n(i) <=> (ii) <=> (iii) <=> (iv] where (iv) is: (A,B) can be proved from the hypotheses using the rules \ngiven. So suppose (iv). Call the rules (1) the structwa[ rules arqi the rule (2) the umzkenirrg rule, \nGiven a deduction of A{a}B from r= Al {al) Bl,...,Ak{ak}Bk, rearrange the deduction (written in tree \nform) so that the weakening rUle IS eliminated. This process is unambiguous since the structural rules \ncan always be a)fl[ied, and the weakening rule is unary, Now we get a deduction of some PCA A {a }B which \nhas only structural rules in it. But it is immediate that since only weakening rules were eliminated \nthat t=pc(A+A )A (B + B). Thus a single application of rule 2 will yield A{a}B, i.e. (A, B), Now think \nof this process as having been applied to a set Pi {a }Qi where Pi and Qi are propositional atoms. Then \nsince A and V are both monotonic truth-functional connective, what we would have would be a proof of \nsome PCA of the form #(pi,...pk){a}4 (Ql,Qk)Qk). Thus A is 4(Al,...,Ak) and B is +( Bl,...,Bk). Since \nA{a }B is obtainable from A {a }B by a weakening rule, (ii) follows. The fact that (ii) implies (iv) \ncan also be easily seen if we use lemma F. For if # is monotonic, then there is a formula C(pl,...,pk) \nwhich realises the truth-function + and is either T or F or is made up using A and V only. The case where \nC is T or F is trivial. Oth-erwise a deduction of C(Al,..,,Ak){a} C(Bl,..., Bk) can be obtained from \nr Using the Structural rules. From that A{a}B can be obtained by the weakening rule, To continue the \nproof, we point out that (Iv) ) (i) trivially since the axioms above are valid and the rules are sound. \nTo prove the converse we need to generalise the notion of consistency, We say that a set of PCA S closed \nunder the rules above and containing the axioms is condstent if it does not contain the PCA T {a )F. \nClearly, by the weakening rule, an inconsistent set contains all PCAS. If l is consistent and r wA\\a}B, \ni.e. A{a}B cannot be proved from r with the rules and axioms, then it can be shown that r together with \n=A{u}F and T{a}.B is still consistent. Nmv extend this to a maximal consistent set T. Then T cannot contain \nA{a}B. Moreover there are unique truth assignments tl, t2 such that C{a}F does not belong to T iff C \nis true under tl, and T{a)D belongs to T iff D is true under t2. Take the model M of PDL given by W = \nall truth assignments, and Ra E {(tl,t2)}. Then r holds in M and A{a}B fails. Now consider (i) <=> (iii). \nSuppose r ~A{a}B. Then there is a model M in which r holds and in which A{a)B fails, I.e. there is a \npair (sjt) of states in ~ such that A holds at s and =B holds at t. Let tl be the truth assignment at \ns and t2 that at t. Then the M in which W = all truth assignments and I&#38; = {(tl ,t2)} will also satisfy \nr and fail A{u}B, However (iii) is precisely the condition that 189 a model like M cannot exist. Since \ntl and t2 are not necessarily related, we can achieve the effect of their independence in a single truth \nassignment by using Pi for the values under tl and Qi for the values under t2. To see that (c) holds, \nClearly (iii) shows that the problem is nP. On the other hand it is nP complete, for a formula B is a \ntautology iff P{u}B is a valid PCA where P is a propositional variable not occurring in B, This finishes \nthe proof. To provide specific background we point out that for the whole of PDL, Fischer-Ladner have \nproved a non-deterministic exponential upper time bound and a deterministic exponential lower time bound. \nVaughan Pratt [9] has announced a deterministic exponential upper time bound for PDL, ~3. DPDL and PDL: \nDPDL has the language and semantics of PDL but the class of models will be restricted by the requirement \nthat all atomic programs are deterministic. I.e. each Ra is a partial function. The filtration technique, \nused in F-L for PDL, fails for DPDL which is therefore less well understood. The reason is that even \nif one starts with a model for DPDL and factorises out a congruence relation of a suitable kind, as in \n[2,6], one ends Up identifying distinct states in W and the result is that a deterministic atomic program \nmay become non-deterministic. However, it can be shown (this is a joint result with Richard Ladner) that \nany complete axiomatisation for PDL becomes a complete axiumatisation for DPDL if the axiom scheme [~*l[<OA+[alA) \nis added. Also, Albert Meyer has shown that DPDL has the finite model property. In this section we point \nout a connection between PDL and DPDL which yields a lower bound for the complexity of the latter. Notation: \nFor this section only, if A is a formula of PDL then A is obtained when every program atom ai is replaced \nby (ai; b*) where b is new, Note that the map A -->A is computable in linear time and leads to a linear \ngrowth in length. Theorem 4: rk A in PDL iff r b A in DPDL, Proof: Suppose rk A in PDL, then by substituting \nthe programs (ai; b*) for the atomic programs ai, we have r bA in PDL, However, every model of DpDL is \naISo a model of PDL and hence whatever happens in all PDL models of l must al,so happen in all DPDL \nmodels of r . I.e. r I=A in DpDL. Conversely, suppose that rLfA in PDL, Then there is a (countable) model \nM of PDL in which r holds and A does not, say at some state s. Now for each state t of W and each atomic \nprogram a, we make an extra copy (t)a) of t which satisfies exactly those Pj that t does, Let W be W \nPlus all these (t,a). Now we define ~ to be the set {(t,(t,a))! t ~ W} and we define ~ in such a way \nthat R bn = {((t, a),t )1 (t,t ) is the nth element of Ra in ~}. Thus the program ~;b* takes us to precisely \nthe places where Ra ;b% does, but is made up of deterministic atoms ~, ~. This defines a new model M \nsuch that ~ is a model of DPDL and such that if the state t satisfies a formula A in M then t satisfies \nA in M , Thus s satisfies r in M and does not satisfy A in M , Hence l F A in DPDL, We could also define \na strict version of DPDL where not only the atomic programs but also other programs are deterministic, \ni.e. where * and u are eliminated in favour of if then else and while do . We do not have any information \nabout strict DPDL. Theorem 4 above is not dependent on the class of programs being reGular. It applies \nequally well to context free (recursive) pro~rams or even larger Classes of programs. C)f course this \nis not much help with context free PDL or IIPDL since they are easily seen to be undecidable. However, \nsome special classes of formulae may be decidable. Since theorem 4 reduces PDL to DPDL, the F-L lower \nbound for PDL ([2] theorem S,2) automatically becomes a lower bound for DPDL. Th?orern 5: There is a \nconstant c > 1 such that the satisfiability (validity) problem for DPDL is not a member of DTIME (cnllOgn) \nwhere n is the length of the formula. Proof: This is an immediate corollary of theorem 4 above and [2] \ntheorem S,2, which is exactly like theorem S except that it is about PDL, ~~. O?r Model, for PDL: PDL \nlacks the compactness property, It is possible for an infinite set I to (semantically) imply a formula \nA even though no finite subset of r does. An example is r = {P,[alP, [a; alP ,...,[an]P}...}. Then rp \n[a*]P. But no finite subset of r implies [a*]P. (A slightly more complicated argument shows that kg is \nalso incompact.) Fischer and Lachner have used a filtration technique in their decision procedure which \ngives us some information about finite models but none about infinite ones and incompactness makes the \nlatter harder. The reason is that as is shown in [2,61 every consistent formula, (and hence every consistent \nfinite set of formulae) has a finite model, A consistent infinite set of formulae (i.e. one from which \na contradiction cannot be proved) roill have the property that every finite subset has a model. However, \nthe set itself may not have a model, 190 A second complication is as follows: Suppose Ml, M2 are two \nmodels with the same set W of states and such that for all s t W, for all formulae A of PDL, Ml,s 1= \nA iff M2,s ~A, Are Ml, M2 isomorphic? The answer turns out to be no. E.g. let W= {012, Let Fpj , ,...,Q). \nMl,i iff M2,i Ppj iff j < i, Ml,u ~Pj and M2,Q ~Pj for all j. Now let Ra in Ml be the set {(o,j)k} and \nin M2 the set {(O,j)lj%}. Then Ml, M2 are not isomorphic but have the same formulae holding at the same \nstates of W. In Definition 5 below we define two notions of equivalence between models, (in addition \nto isomorphism) and provide canonical elements in the equivalence classes for each kind of equivalence. \nRoughly, in a canonical model there is no duplication of states and each Ra is as large as possible without \ndestroying the semantics. A canonical closed model is a canonical model with the additional property \nthat it has all the states that it might have. Le. if a possible state is arbitrarily closely approximated \nby states already in the model, then that possible state is also there, Thus a canonical closed model \ncorresponds to a closed set of real numbers which contains all its limit points. Dexter Kozen, [4,5] \nhas also pointed out that such notions are essentially topological in nature. If we consider the topology \n(see also C8]) on Winduced bythe family of all sets VA= {S6 W I M,s I=A}, then if M is canonical then \nthis topology is Hausdorff and if it is canonical closed then M is a closed subspace of Mu below. However, \nMu is not compact since, as we noted before, the logic is not compact. .VeJnition5: Given models Ml, \nM2 of PDL, (i) Ml sM2 iff VPcWI, VBIq GW2 Ml,p f=B iff M2,q ~B, (ii) Ml M2 iff Ml sM2 and M2 sMl (iv) \nMl s M2 iff Ml S5M2 and M2 SS Ml.  (iii) Ml S5 Ml iff Vp c Wl, 3q t w2, VB, M1,P kB iff M2,q t=B. (S \nstands for strong . The difference between (i) and (iii) iS that in (iii) the state q depends only on \np.) Theorem 6: (Ml * M2, Ml is isomorphic to M2) => (Ml =s M2) => (M1 = M2), Proof: Trivial. None of \nthe reverse implications hold. Thus the equivalence classes for ~s, =, are not singletons (upto isomorphism). \nHowever, we can find canonical elements of them. I.e. in each equivalence class under ~ or 25, there \nis a nicest element. Deylnition 6: M is canonical iff (la) Vp, q e W, P + q > (~B)(M,P ~B + M,q ~B). \n(lb) Vp, q e W, (p,q) e Ra iff VB, M,P Hal B => M,q i= B. M is canontcai closed iff (2a) it is canonical \nand (2b) Given an M , q if for all B 1P such that M )q ~B+ M,p i=B, then 3p. such that VB, M ,q I=B+M,PO \nPB, Note that half of condition lb above holds in all models of PDL simply because of the semantics \nof [a]. However, in canonical models, the ~ are packed full so that the other direction holds as well. \nThe process of filling out the ~ (filling out the Ra will be sufficient) will always produce a filled \nout model without changing the semantics, Now if the states that satisfy the same formulae are identified, \nthen we get a canonical model, in which each state still satisfies the same formulae, This proves part \n1 of theorem 7, next. Theorem 7: (1) VM 3! M , M is canonical and M =5 M . (2) VM I! M , M is canonical \nclosed and M z M . (3) ~! universal Mu canonical closed such that for all M, 319 : w --> Wu s.t, VB \n,M,p I=B iff  Mu, O(P) b B. (Here 3! means: there is a unique...). ProoJ We already have shown (l). \nTo see (3) take all semantically consistent, complete sets of formulae. I.e. for any s in any model M, \nlet X5 be the set of formulae that hold in M at s. Let Wu be the set of all these X5 coming from these \nmillions of models. And now define Ra,u, the relation Ra in Mu, to be the set {( X5,Xt) I CSIA e X5 + \nA c Xt]. It is quite straightforward to show that MU,X5 i=A iff A @ Xu. Thus Mu is the required universal \nmodel. For any M the map 8(s) = Xs is the required map. Finally, to see (2), the M there is just the \n$ubset of Wu consisting of those Xs such that every element of X5 is true at some state of M. 191 In \nthe theorem below, S ranges over finite F-L-closed sets of formulas of PDL. M/s is the factor model. \nTheorem 8: (i) MI =M2 iff (ii) Vs , Ml/s = IV12/s iff (iii) VS , Ml/s ~s M2/s iff (iV) VS , M1/S -M2/s. \n Proof: This is clear enough for the cases (iv) => (iii), and (iii) => (ii). Also (i) <=> (ii). For if \nMl ~ M2, then all factor models, inheriting their semantics from Ml and M2 will aH be ~. Thus (i) => \n(ii). Also if Ml ? Mz, then there is an s in WI (say) and a formula B such that MI,S ~B and nowhere in \nW2 will B hold. Then let S be some F-L set containing B. B will hold at the equivalence class of s in \nM~/s but nowhere in M2/s. Hence ~1/S # M2/s. To finish the proof we only have to check  (ii) => (iv). \nSuppose (ii). NOW, in the F-L construction, if s # ti in WI, then there is a Bs,i which holds in  Ml \nat s and not at ti. Since W1/S is finite, the conjunction Bs of the Es,i for s # ti will characterise \ns i.e. s will be the unique state satisfying Bs. Let ~(s) be in W2 such that Mz,+(t) I=B. It is not hard \nto see that ~ must be an isomorphism into, and by reversing Ml and M2, we can see that it must be onto. \nt%, References. Cl] F. Berman, A Completeness Technique for D-axiomatisable Semantics, Proc. Ilth ACM \nSymp. on the Theory of Computing, (1979) pp. 160-166. C21M. Fischer and R. Ladner, Propositional Modal \nLogic of Programs, Proc. 9th ACM Symp. on the Theory of ComputirrC, (1977) PP. 286-294. ~3] D. Harel, \nFirst Order Dynamic Logic, Lecture Notes in Computer Science no. 68, Springer, 1979. C4] D. Kozen, A \nRepresentation Theorem for models of *-f ree PDL, IBM research report no, RC 7864, September 1979+ [51 \nD. Kozen, On the Duality between Dynamic Algebras and Kripke Models, IBM reseach report no, RC 7893, \nOctober 1979. [61 R, Parikh, A Completeness Result for PDL, Lectt[re Notes in Computpr Sci,we no, 64, \nSpringer 1978, pp. 403-415. [71 R. Parikh, A Decidability Result for a Second Order Process Logic, Proc. \n17th IEEE $ymp. on FOCS, Ann Arbor 1978, pp. 177-183. [81 R, Parikh, Some Applications of Topology to \nProgram Semantics, to appear in Math. Systems Theory [9] V. Pratt, Semantical Considerations in Floyd-Hoare \nLogic, Proc. 17th IEEE Symp. on FOCS, 1976, pp. 109-121. [101 V. Pratt, A Practical Decision Method \nfor PDL, Proc. 10th ACM Symp. on TOC, San Diego 1978. [111 K. Segerberg, A Completeness Theorem in the \nModal Logic of Programs (abstract), Notices of the American Math. Sot. vol. 24, no. 6, ASS2 Oct. 1977. \n C121 L. Stockmeyer, The Complexity of Decision Procedures in Automata Theory and Logic (Ph.D. thesis), \n MIT Project MAC TR 133 (1974). 192\n\t\t\t", "proc_id": "567446", "abstract": "We indicate below the various results in this paper and the sections where these results are fully described. &#916;1 is introductory).(&#916;2). The partial correctness assertion (PCA) A{&alpha;}B is expressed in PDL in the form A &#8594; [&alpha;]B. We shall consider the question of when a given finite set of PCAs implies another and give optimal complexity bounds. We also give other results of an algebraic nature.(&#916;3). DPDL is less well understood than PDL since the filtration technique of F-L that applies to the latter falls for the former. We point out a translation from PDL to DPDL which leads to a lower bound for the latter.(&#916;4). What do models of PDL look like? We show the existence of canonical and universal models and show how an infinite model can be related to its F-L factors.", "authors": [{"name": "Rohit Parikh", "author_profile_id": "81100299005", "affiliation": "Boston Univ. and Laboratory for Computer Science, MIT", "person_id": "PP14110262", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/567446.567464", "year": "1980", "article_id": "567464", "conference": "POPL", "title": "Propositional logics of programs: systems, models, and complexity", "url": "http://dl.acm.org/citation.cfm?id=567464"}