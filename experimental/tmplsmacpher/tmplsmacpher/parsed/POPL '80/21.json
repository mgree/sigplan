{"article_publication_date": "01-28-1980", "fulltext": "\n\t\t\t", "proc_id": "567446", "abstract": "<p>In testing for program correctness, the standard approaches[11,13,21,22,23,24,34] have centered on finding data D, a finitesubset of all possible inputs to program P, such that</p><p>1) if for all x in D, P(x) = f(x), then P* = f</p><p>where f is a partial recursive function that specifies theintended behavior of the program and P* is the function actuallycomputed by program P. A major stumbling block in suchformalizations has been that the conclusion of (1) is so strongthat, except for trivial classes of programs, (1) is bound to beformally undecidable [23].</p><p>There is an undeniable tendency among practitioners to considerprogram testing an ad hoc human technique: one creates test datathat intuitively seems to capture some aspect of the program,observes the program in execution on it, and then draws conclusionson the program's correctness based on the observations. To augmentthis undisciplined strategy, techniques have been proposed thatyield quantitative information on the degree to which a program hasbeen tested. (See Goodenough [14] for a recent survey.) Thus thetester is given an inductive basis for confidence that (1) holdsfor the particular application. Paralleling the undecidability ofdeductive testing methods, the inductive methods all have hadtrivial examples of failure [14,18,22,23].</p><p>These deductive and inductive approaches have had a commontheme: all have aimed at the strong conclusion of (1). Programmutation [1,7,9,27], on the other hand, is a testing technique thataims at drawing a weaker, yet quite realistic, conclusion of thefollowing nature:</p><p>(2) if for all x in D, P(x) = f(x), then P* = f OR P is\"pathological.\"</p><p>To paraphrase,</p><p>3) if P is not pathological and P(x) = f(x) for all x in D thenP* = f.</p><p>Below we will make precise what is meant by \"P is pathological\";for now it suffices to say that P not pathological means that P waswritten by a competent programmer who had a good understanding ofthe task to be performed. Therefore if P does not realize f it is\"close\" to doing so. This underlying hypothesis of program mutationhas become known as the <i>competent programmer hypothesis</i>:either P* = f or some program Q \"close\" to P has the property Q* =f.</p><p>To be more specific, program mutation is a testing method thatproposes the following version of correctness testing:</p><p>Given that P was written by a competent programmer, find testdata D for which P(D) = f(D) implies P* = f.</p><p>Our method of developing D, assuming either P or some programclose to P is correct, is by eliminating the alternatives. Let&amp;phis; be the set of programs close to P. We restate the methodas follows:</p><p>Find test data D such that:</p><p>i) for all x in D P(x) = f(x) and</p><p>ii) for all Q in &amp;phis; either Q* = P* or for some x in D,Q(x) &#8800; P(x).</p><p>If test data D can be developed having properties (i) and (ii),then we say that D <i>differentiates</i> P from &amp;phis;,alternatively P passes the &amp;phis; mutant test.</p><p>The goal of this paper is to study, from both theoretical andexperimental viewpoints, two basic questions:</p><p><i>Question 1:</i> If P is written by a competent programmer andif P passes the &amp;phis; mutant test with test data D, does P* =f?</p><p>Note that, after formally defining &amp;phis; for P in a fixedprogramming language L, an affirmative answer to question 1 reducesto showing that the competent programmer hypothesis holds for thisL and &amp;phis;.</p><p>We have observed that under many natural definitions of&amp;phis; there is often a strong coupling between members of&amp;phis; and a small subset &#181;. That is, often one canreduce the problem of finding test data that differentiates P from&amp;phis; to that of finding test data that differentiates P from&#181;. We will call this subset &#181; the <i>mutants</i> of Pand the second question we will study involves the so-called<i>coupling effect</i> [9]:</p><p><i>Question 2</i> (Coupling Effect): If P passes the &#181;mutant test with data D, does P pass the &amp;phis; mutant testwith data D?</p><p>Intuitively, one can think of &#181; as representing theprograms that are \"very close\" to P.</p><p>In the next section we will present two types of theoreticalresults concerning the two questions above: general resultsexpressed in terms of properties of the language class L, andspecific results for a class of decision table programs and for asubset of LISP. Portions of the work on decision tables and LISPhave appeared elsewhere [5,6], but the presentations given here areboth simpler and more unified. In the final section we present asystem for applying program mutation to FORTRAN and we introduce anew type of software experiment, called a \"beat the system\"experiment, for evaluating how well our system approximates anaffirmative response to the program mutation questions.</p>", "authors": [{"name": "Timothy A. Budd", "author_profile_id": "81451598597", "affiliation": "Yale", "person_id": "PP95042236", "email_address": "", "orcid_id": ""}, {"name": "Richard A. DeMillo", "author_profile_id": "81100059944", "affiliation": "Georgia Tech", "person_id": "PP43115675", "email_address": "", "orcid_id": ""}, {"name": "Richard J. Lipton", "author_profile_id": "81100546583", "affiliation": "Berkeley", "person_id": "PP15035881", "email_address": "", "orcid_id": ""}, {"name": "Frederick G. Sayward", "author_profile_id": "81100586744", "affiliation": "Yale", "person_id": "PP309802400", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/567446.567468", "year": "1980", "article_id": "567468", "conference": "POPL", "title": "Theoretical and empirical studies on using program mutation to test the functional correctness of programs", "url": "http://dl.acm.org/citation.cfm?id=567468"}