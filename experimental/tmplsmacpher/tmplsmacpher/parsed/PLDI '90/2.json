{"article_publication_date": "06-01-1990", "fulltext": "\n\t\t\t", "proc_id": "93542", "abstract": "<p>This paper describes a method for compiling programs using interprocedural register allocation. A strategy for handling programs built from multiple modules is presented, as well as algorithms for <italic>global variable promotion</italic> and register <italic>spill code motion</italic>. These algorithms attempt to address some of the shortcomings of previous interprocedural register allocation strategies. Results are given for an implementation on a single register file RISC-based architecture.</p>", "authors": [{"name": "Vatsa Santhanam", "author_profile_id": "81100171505", "affiliation": "Hewlett-Packard Company, California Language Laboratory, 19447 Pruneridge Avenue, Cupertino, California", "person_id": "P290291", "email_address": "", "orcid_id": ""}, {"name": "Daryl Odnert", "author_profile_id": "81100524787", "affiliation": "Hewlett-Packard Company, California Language Laboratory, 19447 Pruneridge Avenue, Cupertino, California", "person_id": "P60102", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/93542.93551", "year": "1990", "article_id": "93551", "conference": "PLDI", "title": "Register allocation across procedure and module boundaries", "url": "http://dl.acm.org/citation.cfm?id=93551"}