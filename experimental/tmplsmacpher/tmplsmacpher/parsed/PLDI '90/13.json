{"article_publication_date": "06-01-1990", "fulltext": "\n\t\t\t", "proc_id": "93542", "abstract": "<p>Object-oriented languages have suffered from poor performance caused by frequent and slow dynamically-bound procedure calls. The best way to speed up a procedure call is to compile it out, but dynamic binding of object-oriented procedure calls without static receiver type information precludes inlining. <italic>Iterative type analysis</italic> and <italic>extended message splitting</italic> are new compilation techniques that extract much of the necessary type information and make it possible to hoist run-time type tests out of loops.</p><p>Our system compiles code on-the-fly that is customized to the actual data types used by a running program. The compiler constructs a control flow graph annotated with type information by simultaneously performing type analysis and inlining. Extended message splitting preserves type information that would otherwise be lost by a control-flow merge by duplicating all the code between the merge and the place that uses the information. Iterative type analysis computes the types of variables used in a loop by repeatedly recompiling the loop until the computed types reach a fix-point. Together these two techniques enable our SELF compiler to split off a copy of an entire loop, optimized for the common-case types.</p><p>By the time our SELF compiler generates code for the graph, it has eliminated many dynamically-dispatched procedure calls and type tests. The resulting machine code is twice as fast as that generated by the previous SELF compiler, four times faster than ParcPlace Systems Smalltalk-80,<supscrpt>*</supscrpt> the fastest commercially available dynamically-typed object-oriented language implementation, and nearly half the speed of optimized C. Iterative type analysis and extended message splitting have cut the performance penalty for dynamically-typed object-oriented languages in half.</p>", "authors": [{"name": "Craig Chambers", "author_profile_id": "81100528252", "affiliation": "Computer Systems Laboratory, Stanford University", "person_id": "PP39047060", "email_address": "", "orcid_id": ""}, {"name": "David Ungar", "author_profile_id": "81100365263", "affiliation": "Computer Systems Laboratory, Stanford University", "person_id": "P64183", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/93542.93562", "year": "1990", "article_id": "93562", "conference": "PLDI", "title": "Interactive type analysis and extended message splitting; optimizing dynamically-typed object-oriented programs", "url": "http://dl.acm.org/citation.cfm?id=93562"}