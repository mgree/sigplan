{"article_publication_date": "06-01-1990", "fulltext": "\n\t\t\t", "proc_id": "93542", "abstract": "<p>Languages such as Scheme and Smalltalk that provide continuations as first-class data objects present a challenge to efficient implementation. Allocating activation records in a heap has proven unsatisfactory because of increased frame linkage costs, increased garbage collection overhead, and decreased locality of reference. However, simply allocating activation records on a stack and copying them when a continuation is created results in unbounded copying overhead. This paper describes a new approach based on stack allocation that does not require the stack to be copied when a continuation is created and that allows us to place a small upper bound on the amount copied when a continuation is reinstated. This new approach is faster than the naive stack allocation approach, and it does not suffer from the problems associated with unbounded copying. For continuation-intensive programs, our approach is at worst a constant factor slower than the heap allocation approach, and for typical programs, it is significantly faster. An important additional benefit is that recovery from stack overflow is handled gracefully and efficiently.</p>", "authors": [{"name": "R. Hieb", "author_profile_id": "81100612273", "affiliation": "Indiana University, Computer Science Department, Lindley Hall 101, Bloomington IN", "person_id": "PP31079455", "email_address": "", "orcid_id": ""}, {"name": "R. Kent Dybvig", "author_profile_id": "81100181541", "affiliation": "Indiana University, Computer Science Department, Lindley Hall 101, Bloomington IN", "person_id": "PP14073331", "email_address": "", "orcid_id": ""}, {"name": "Carl Bruggeman", "author_profile_id": "81100269459", "affiliation": "Indiana University, Computer Science Department, Lindley Hall 101, Bloomington IN", "person_id": "P40685", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/93542.93554", "year": "1990", "article_id": "93554", "conference": "PLDI", "title": "Representing control in the presence of first-class continuations", "url": "http://dl.acm.org/citation.cfm?id=93554"}