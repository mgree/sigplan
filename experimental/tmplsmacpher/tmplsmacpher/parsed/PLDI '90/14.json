{"article_publication_date": "06-01-1990", "fulltext": "\n\t\t\t", "proc_id": "93542", "abstract": "<p>This paper presents a type system for logic programs that supports parametric polymorphism and subtypes. This system follows most knowledge representation and object-oriented schemes in that subtyping is <italic>name-based</italic>, i.e., <italic>&#964;</italic><subscrpt>1</subscrpt> is considered to be a subtype of <italic>&#964;</italic><subscrpt>2</subscrpt> iff it is declared as such. We take this as a fundamental principle in the sense that type declarations have the form of subtype constraints. Types are assigned meaning by viewing such constraints as Horn clauses that, together with a few basic axioms, define a subtype predicate. This technique provides a (least) model for types and, at the same time, a sound and complete proof system for deriving subtypes. Using this proof system, we define well-typedness conditions which ensure that a logic program/query respects a set of predicate types. We prove that these conditions are consistent in the sense that every atom of every resolvent produced during the execution of a well-typed program is consistent with its type.</p>", "authors": [{"name": "Dean Jacobs", "author_profile_id": "81100069341", "affiliation": "University of Southern California, Los Angeles, CA", "person_id": "PP39025744", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/93542.93563", "year": "1990", "article_id": "93563", "conference": "PLDI", "title": "Type declarations as subtype constraints in logic programming", "url": "http://dl.acm.org/citation.cfm?id=93563"}