{"article_publication_date": "01-01-1975", "fulltext": "\n\t\t\t", "proc_id": "512976", "abstract": "It has long been known that most questions of interest about the behavior of programs are recursively undecidable. These questions include whether a program will halt, whether two programs are equivalent, whether one is an optimized form of another, and so on. On the other hand, it is possible to make some or all of these questions decidable by suitably restricting the computational ability of the programming language under consideration. The Loop language of Meyer and Ritchie [MR], for example, has a decidable halting problem, but undecidable equivalence. Restricting the computational ability still further, virtually all of these questions are decidable for finite automata and generalized sequential machines (except that Griffiths [Gri] has shown equivalence undecidable for nondeterministic gsms).A natural question to ask is how hard it is to solve these problems for programming languages for which they are decidable, and it is with this area that we are concerned in this paper. In particular we describe a programming language modeled on current higher-level languages which has exactly the computational power of deterministic finite state transducers with final states, and analyze the space and time required to decide various questions of programming interest about the language. We find that questions about halting, equivalence, and optimization are already intractable for this very simple language. We also study extensions to the language such as simple arithmetic capabilities, arrays, and recursive subroutines with both call-by-value and call-by-name parameter passing mechanisms, some of which extend the capabilities of the language and/or increase the complexity of its decidable problems. In one case, that of recursion with call-by-name, the previously decidable questions are seen to become undecidable.", "authors": [{"name": "Neil D. Jones", "author_profile_id": "81452616043", "affiliation": "The University of Kansas, Lawrence, Kansas", "person_id": "PP95034660", "email_address": "", "orcid_id": ""}, {"name": "Steven S. Muchnick", "author_profile_id": "81332517217", "affiliation": "The University of Kansas, Lawrence, Kansas", "person_id": "PP31023637", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512976.512988", "year": "1975", "article_id": "512988", "conference": "POPL", "title": "Even simple programs are hard to analyze", "url": "http://dl.acm.org/citation.cfm?id=512988"}