{"article_publication_date": "01-01-1975", "fulltext": "\n PROGRAMMING LANGUAGES, NATURAL LANGUAGES, AND MATHEMATICS+ Permission to make digital or hard copies \nof part or all of this work or personal or classroom use is granted without fee provided that copies \nare not made or distributed for profit or commercial advantage and that copies bear this notice and the \nfull citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute \nto lists, requires prior specific permission and/or a fee.&#38;#169; 1975 ACM 0-12345-678-9 $5.00 by \nPeter Naur Datalogisk Institut Copenhagen University ABSTRACT Some social aspects of programming are \nilluminated through analogies with similar aspects of mathematics and natural lan\u00adguages. The split between \npure and applied mathematics is found similarly in programming. The development of natural languages \ntoward fle;cionless, word-order based language types speaks for programming language design based on \ngeneral, abstract constructs. By analogy with incidents of the history of artificial, auxiliary languages \nit is suggested that l?ortran and Cobol will remain dominant for a long time to come. The most promising \navenues for further work of wide influence is seen to be high quality program literature (i.e. programs) \nof general utility and studies of questions related to program style. 1. INTRODUCTION intellectual Disciplines, \nbut as a major point of difference, they are old. They Programming has many points in com\u00adhave lived \nin this world for so long that mon with both mathematics and natural they provide a long series of cases \nof con\u00ad languages. In these notes I shall not frontation with people, with society, cases try to cover \nall of these, but I shall that we might learn something from. This be particularly concerned with these \nobviously is a vast undertaking, if it is fields as they exist and are used by to be done thoroughly, \nfar beyond what I am groups of people. Perhaps a reasonably capable of carrying through. What I can do \naccurate description of my main topic at present is no more than discuss a series is:What can we learn \nabout programming of points that I have noted over the last languages from the social aspects of many \nyears and that I have found illumina\u00ad mathematics and natural languages? ting. I pretend to no more than \nthat. In Now why is this a relevant topic particular, I use a number of sources as I to consider? Well, \nI definitely feel have found them. I will give you the refe\u00ad that there is something rotten in the rences \nto them, but whether they have been realm of programming. There is a lot superseded or found wrong by \nlater resear\u00ad of discussion, but somehow I think chers I do not always know for sure. So I that most \nof it misses the point.. There hope to stir your thoughts, but I will not are too many fads, too many \nquick solu\u00adpretend that I have found the answers. tions, a too wide gap between theory and practice. \nI feel that we badly need to 2. PURE ANC APPLIED MATHEMATICS. take stock. But before doing so we need \nto widen our horizon. This is where ma-Now, to start with mathematics, I thematics and natural languages \ncome in. think it is proper to say at once that I They are our closest relatives among the have never \nbeen a mathematician, or even r Inv~ted Address hoped to become one. Early in my life I was caught by \nastronomy, which became my chosen field for many years. I quickly realized that to go ahead in this field \nI had to know some mathematics, which I then proceeded to study. But mathematics remained to me at all \ntimes a tool, not something of primary, intrinsic interest. With this point of departure it will not \nbe too surprising that I look upon much of the mathematical activity with consi\u00adderable skepticism as \nto its importance. I certainly cannot view mathematics as an ideal that programing should strive a\u00adgainst. \nOn the other hand, I do see a great similarity between mathematics and programming, first and foremost \nbecause they both are tools for a wide variety of other disciplines. So this is the point I want to consider, \nthe relation to the disciplines that use mathematics as a tool. For many years there has been an ac\u00adknowledged \ndistinction between pure and applied mathematics. This seems to settle the relation to applications in \na clear and simple manner. The point I want to make is that this is by no means as sim\u00adple as it looks \nform outside. If we try to pursue this matter we may seek the opinion of the mathematicians themselves. \nThis may reveal some real divergencies of view. At one end of the spectrum we may find G. H. Hardy (1871 \n-1947), one of the leading British mathematicians of his day. In his book A Mathematician s Apo\u00adlogy \n(1940) he presents the view of a pure mathematician who will defend his chosen field to the point of \nprovocation: I have never done anything useful . No discovery of mine has made, or is likely to make, \ndirectly or indirectly, for good or ill, the least difference to the amenity of the world. A mathe\u00admatician, \nlike a painter or a poet, is a maker of patterns. . . . The mathema\u00adtician s patterns, like the painter \ns or the poet~s, must be beautiful; the ideas, like the colours or the words, must fit together in a \nharmonious way. Beauty is the first test: there is no place in the world for ugly mathema- tics. ... \nvery little of mathematics is useful practically, and that little is comparatively dull. How widespread \nHardy s view is among mathematicians I don t know for sure. There are, however, other views. John Von \nNeumann, in an article titled l he Mathe\u00admatician (1947), expresses a rather dif\u00ad ferent view: The most \nvitally characteristic fact about mathematics is, in my opinion, its quite peculiar relationship to the \nnatural sciences, or, more generally, to any science which interprets expe\u00adrience on a higher than purely \ndescrip\u00adtive level. Most people, mathematicians and others, will agree that mathematics is not an empirical \nscience, or at least that it is practised in a manner which differs in several decisive respects from \nthe techniques of the empirical sciences. And, yet, its development is very closely linked with the natural \nsciences. One of its main branches, geometry, actually started as a natural, empirical science. Some \nof the best in spirations of modern mathematics (I believe, the best ones) clearly origi\u00adnated in the \nnatural sciences. . . . There is a quite peculiar duplicity in the nature of mathematics. One has to \nrealize this duplicity, to accept it, and to assimilate it into one s thin\u00adking on the subject. This \ndouble face is the face of mathematics,. . .. So much for John Von Neumann. The question is more,subtle \nthan these tw~ quotations indicate, however. In 1961 Marshall Stone in an article titled The Revolution \nin Mathematics stated on the one hand: While several important changes have taken place since 1900 \nin our concep tion of mathematics or in our points of view concerning it, the one which truly involves \na revolution in ideas is the discovery that mathematics is en\u00adtirely independent of the physical world. \n. . . When we stop to compare the mathematics of today with mathematics as it was at the close of the \nnine\u00adteenth century we may well be amazed to note how rapidly our mathematical knowledge has grown in \nquantity and in complexity, but we should also not fail to observe how closely this deve\u00adlopment has \nbeen involved with an em\u00adphasis upon abstraction and an increa\u00adsing concern with the perception and analysis \nof broad mathematical patterns. Indeed, upon closer examination we see that this new orientation, made \npossi\u00adble only by the divorce of mathematics from its applications, has been the true source of its tremendous \nvitality and growth during the present century. On the other hand, later in the same ar\u00adticle, when discussing \napplications of mathematics, we find: For it is only to the extent that ma\u00adthematics is freed from the \nbonds which have attached it in the past to particular aspects of reality that it can become the extremely \nflexible and powerful instrument we need to break paths into areas now beyond our ken. Thus we have here \na claim that precisely in being pure, mathematics will best serve the applications! Stonets statements \nsoon met stern reprobation. In a panel discussion in November 1961 Richard Courant makes Stone s article \nhis point of departure, saying: . . . as a sweeping claim, as an at-\u00ad tempt to lay dolr., a line for \nresearch and before all for education, the ar\u00adticle seems a danger signal, and cer\u00adtainly in need of \nsupplementation. The danger of enthusiastic abstractionism is compounded by the fact that this fashion \ndoes not at all advocate non\u00ad sense, but merely promotes a half truth. One-sided half truths must not \nbe allo\u00adwed to sweep aside the vital aspects of the balanced whole truth. Certainly ma\u00ad thematical thought \noperates by abstrac\u00adtion; . . . Yet, the life blood of our science rises through its roots; these roots \nreach down in endless ramifica\u00adtion deep into what might be called rea\u00adlity . . . Abstraction and generalization \nis not more vital for mathematics than individuality of pl~enomena and, before all, not more than inductive \nintuition. . . . We must not accept the old blasphe\u00admous nonsmse that the ultimate justifi\u00adcation of \nmathematical science is the glory of the human mind?. Mathematics must not be allowed to split and to \ndi\u00adverge toward a pureV and an ~applied~ variety. It must remain, and be streng\u00adthened as, a unified \nvital strand in the broad stream of science and must be pre\u00advented from becoming a little side brook \nthat might disappear in the sand. The divergent tendencies are immanent in mathematics and yet prove \nan ever-pre\u00adsent danger. TO this it may be added that histori\u00adcally the split between mathematicians \npur\u00adsuing the pure and applied branc?~es is fairly new. Up to and including the time of Gauss, who lived \nfrom 1777 to 1855, the mathematicians were active in both direc\u00adtions. !! he split may have something \nto do with the specialization that became a neces\u00adsity when the field became too vast for any individual \nto master it all. Another likely contributing circumstance is the modern type of university. Indeed, \npure mathema\u00adtics, with its limitless scope for the cre\u00adation of conceptual structures of incontes\u00adtable \ncoherence, but practical irrelevance, is a perfect field of study for a self-go\u00adverning academic institution. \nHowever, again this split becomes a problem only when the idea starts to spread that one kind of mathematics \nis inferior to the other. Sad to say, that is where we are today. Now, do these problems and dangers \ncarry over imto the field of programing? As far as I can see, to a considerable extent. Von Neumann s \ndouble face of ma\u00ad t~ematics!~ has a direct analogy in Pro\u00ad gramming, where we have the duplicity of, \non the one hand, programming as an in\u00adtellectual challenge (E. W. Dijkstra, 1!272), or as a field for \nnever ending re\u00ad finement of programming language facili\u00adties, and on the other hand, programming applied \nto a wide range of practical prob\u00adlems by thousands of programmers. And the split described by Courant \nis clearly t,here with us. The second NATO Software Engineering Conference (Buxton, Randell, 1969), found \nthis to be the core question. Accepting then that the analogy be\u00adtween mathematics and programming is \nvalid on this issue, what may we learn from ma\u00adthematics? The obvious lesson is that the deep gap between \ntheory and practice in programming may persist for long periods without anything much being done about \nit. The danger envisioned by Courant, of ma\u00adthematics becoming a little side brook that might disappear \nin the sand has not so far turned out to be real. It was brought up by Courant as a threat that might \nmake people work more seriously on removing the split of mathematics. But, as far as I know, it has had \nlittle or no effect. I see no reason why programming should fare differently. Already today we have an \nestablished pattern, on the one side the universities immersed in computer science projects of a highly \nesoteric na\u00adture, in only very slight contact with the activity of the other side, the com\u00adputer industry, \nproducing vast amounts of programming that to the university people are very unattractive. I see no reason \nwhy this pattern will not persist, whether we like it or not. . 3. PROGRAMMING LANGUAGES AND NATURAL \nLANGUAGES Let me now turn to my second field of inspiration, natural language. At this point of transition \nI cannot help expres\u00adsing a feeling of awkwardness at the use of the word language in the context pro\u00adgramming \nlanguage . I definitely feel that if taken literally this habit of expression is misleading. As a first \nstep to subdue our feeling of guilt at this misuse of the term, perhaps we can remind ourselves that \nlogicians and mathematicians used the word for specialized notations long before we did, already in the \n1930ies, and perhaps even before. However, I feel urged to clarify the relation further. Thus, although \nI find several analogies that are illuminating, do not wish to overlook the differences of characteristics \nand use between natural and programming languages. Among such differen\u00adces I would like to mention: 1. \nNatural languages are used mostly in spoken form, in conversations. Humans possess extraordinary capabilities \nin hand\u00adling spoken language. They perceive rapid\u00adly what they need from a highly complex stream of verbal \nsounds. They are accusto\u00admed to making use of the interactive possi\u00adbilities of conversations, in clearing \nup what they have not understood. By contrast, programming is done mostly in writing and in terms of \na slow and clumsy interaction with a computer. This difference in prin\u00adcipal mode of use certainly must \nbe taken into account if we try to transfer experi\u00adence from the field of natural language into programming. \n 2. Most of what is said in natural languages is intended and understood only in a fuz,zy way, conveyingroughly \nthe speakerts subjective reaction to some not very precisely defined circumstance of the world. This \nnormal use of language is far away from its exceptional use, for example in science, to state clearly \ndefined facts and relations. By contrast, anything ex\u00ad  pressed in a programming language is in\u00adtended \nto be understood and interpreted by a computer in a perfectly well defined way. This difference between \nnatural lan\u00adguage and programming cannot lightly be brushed aside by claiming that the lack of precision \nof natural language is a defect that can and should be removed. On the contrary, it seems quite possible \nthat this lack of precision is vital to the ability of natural language to develop and make it possible \nto speak of a never ending series of ever new ideas. From this point of view every programming language \nis just another example of the ability of natural language to extend itself to cover new ground. Thus \nthere is no deep analogy be\u00adtween a natural language and a programming language. Rather, there is a relation \nof subordination. Everything that can be ex\u00adpressed in a programming language can be expressed equivalently, \nalthough perhaps c lumsily, in a host natural language, while the converse is utterly false. A natural \nlanguage pzmovides an extensible universe of discourse that allows new notations, such as programming \nlanguages, to be added at will. With this warning against rash con\u00adclusions behind me I shall now get \ndown to the analogies that I still find illumi\u00adnating. Drawing analogies between natural language~ and. \nprogramming languages is al\u00adready an old sport. Just think of Chomsky s three types of language. However, \nthe ana\u00adlogies that I shall pursue have not recei\u00adved much attention before, as far as I know. Many of \nthem will be derived from the work of Otto Jespersen (1860 -1943), the great Danish scholar whose works \non the English language and its grammar con\u00adtinue to be used wherever English is stu\u00addied seriously. \nFor many years I have found Jespersen s writings a rich source of enjoyable enlightenment. He took a \nvery broad view of his chosen field and combined this with a bent for polemics. During his early days \nhe became a leader of a reaction against an earlier school of linguists who fed on an endless delight \nin the classical languages, Latin above all. From his earli\u00adest work, around 1890, Jespersen maintained \nthe superiority of modern languages, with English and Chinese at the top of his scale. At this time he \nwas also very active in furthering the young field of phonetics. As one outcome of his interest he contribu\u00adted \nvery actively to the writing of elemen\u00adtary textbooks of English for use in Danish schools. In his later \nyears his major con\u00adtribution was a monumental Modern English Grammar in 7 volumes. This did not prevent \nhim from also taking active part in the work on establishing an artificial internat\u00adional language. Several \nof these fields of activity offer interesting analogies in the present context. 4. LANGUAGE QUALITY The \nqusstion of the quality of a na\u00adtural language is treated at length by Jes\u00adpersen. More specifically \nhe is concerned with linguistic development, and.whether the development that natural languages have \nundergone should be regarded as progress or decay (Jespersen 1922, pp. 319-366). Jesper\u00adsen wrote first \nabout this question in 1894 at a time when linguistics was dominated by an interest in and veneration \nfor classical Latin and Greek. The attitude of this period is described thus by Jespersen: TO men fresh \nfrom the ordinary grammar\u00adschool training, no language would seem really respectable that had not four \nor five distinct cases and three genders, or had less than five tenses and as many moods in its verbs. \nAccordingly, such poor languages as had either lost much of their original richness in grammatical forms \n(e.g. French, English, or Danish), or had never had any, so far as one knew (e.g. Chinese), were naturally \nlooked upon with something of the pity bestowed on relatives in reduced circumstances, or the contempt \nfelt for foreign paupers: Jespersen criticized this attitude, first, as being vague and lacking in sup\u00adport \nfrom instances collected systematical\u00adly. Second, as being unclear as to the method by which linguistic \nvalue is to be measured, by what standard and what tests the comparative merits of languages or of forms \nare to be as\u00adcertained . He then goes on to describe his own yard\u00ad stick: What is to be taken into account \nis of course the interests of the speaking community, and if we consistently con\u00adsider language as a \nset of human actions with a definite end in view, namely, the communications of thoughts and feelings, \nthen it becomes easy to find tests by which to measure linguistic values, for from that point of view \nit is evident that THAT LANGUAGE RANKS HIGHEST WHICH GOES FARTHEST IN THE ART! OF ACCOMPLI-SHING MUCH \nWITH LITTLE MEANS, OR, IN OTHER WORDS, WHICH IS ABLE TO EXPRESS THE GREATEST AMOUNT OF MEANING WITH THE \nSIMPLEST MECHANISM. At this point Jespersen discusses an objection to this attitude, based on a claim \nthat natives handle their language without the least exertion or effort. On the basis of several kinds \nof observations he concludes: To my mind there is not the slightest doubt that different languages differ \nvery much in easiness even to native speakers. Jespersen now sets out to consider the development of \nnatural languages, and in particular, to find out whether this development may be regarded as one of \nprogress or decay if measured along his chosen scale of linguistic values. His conclusion is as follows: \nThe sum total of linguistic changes, when we compare a remote period with the present time, shows a surplus \nof progressive over retrogressive or in\u00ad different changes. This conclusion follows upon a lengthy dis\u00adcussion \nthat Jespersen summarizes in ( points. These points where modern langua\u00adges manifest their superiority \nover eair\u00adlier language forms, with a few examples added for illustration, are: (1) The forms are generally \nshorter, thus involving less muscular exertion and requiring less time for their enunciation. Examples: \nOld English lufu -English I-L; Latin augustum -French a; Gothic habai\u00ad . dedeima -English had. A global \nindication: the Gospel of St. Matthew contains in Greek about 39,000 syllables, in German 33,000, in \nEnglish 29,000. (2) There are not so many forms to burden the memory. Example: Gothic habaida, . habaides, \nhabaidedu, and 12 further forms are all rendered in English by had. (3) The formation of word forms is \nmuch more regular. (4) Their syntactic use presents few\u00ader irregularities. (5) Tlneir more analytic \nand abstract character facilitates expression by rende\u00adring possible a great many combi.:--atioc.s and \ncoiazt~ 1.~.c ~ions which were formerly impossi\u00ad  ble or unidiomatic. Example: in Danish there is no \ndifficulty in saying: enten du eller jeg har uret ; this causes trou\u00ad ble in languages with inflected \nverbs, even in English: either you or I are wrong , either you or I am wrong are both incorrect; either \nyou are wrong, or I is stiff and awkward. (6) The clumsy repetitions known un\u00adder the name of concord \nhave become super\u00adfluous. Example: In Latin opera virorum omnium bonorum veterum~ plural number is expressed \nfour times, genitive case also four times, and masculine gender twice; in the corresponding English all \ngood old men!s w orksq each idea is expressed once only. (7) A clear and unambiguous under\u00adstanding \nis secured through a regular word order. Example: John beats Henryv and  Henry beats Johnt have two \ndifferent, clear meanings. In Danish two further ar\u00adrangements of the same three words have new, clear \nmeanings: ~Sl&#38;r Henry John?t , Sl&#38;r John Henry?? . The relevance of these results to programming \nappears to me to be the man\u00adner in which they reveal what is, in a deep sense, a natural form of expression \nfor human beings. After all, these trends reflect tendencies of millions of indivi\u00adduals over centuries! \nThey may well be taken in as guidance in designing pro\u00adgramming languages. They support the idea that \nprogramming languages should prefe\u00adrably be built from a few, very general, very abstract concepts, that \ncan be appli\u00aded in many combinations, thereby yielding the desired flexibility of expression. They provide \nan argument against program\u00adr.{ing languages that include many special features with limited fields of \napplica\u00adtion, and that include many exceptional cases in their definition. Point 5, concerning freedom \nof com\u00adbinations of the language elements, would seem to support a freedom from, for example, type restrictions. \nIt might per\u00adhaps support the attitude taken in PL/1 where, as far as possible, every combi\u00adnation of \noperands and operators has a meaning, in opposition to the attitude,of, for example, Algol 60 and Simula, \nwhere type re~trictions make many combinations illegal. However, in judging this point the difference \nbetween a language for easy interactive use and one predominantly for one-way communication should perhaps \nbe considered. The point may be made that the risk of misunderstanding due to a mistake that is introduced \nwhen free combinations are allowed, can be tolerated only in a system that includes rapid and effective \ninteractive check of the correctness of more unusual combinations. The replacement, in natural langua\u00adges, \nof concord by word order has an ana\u00adlogy in a replacement of program construc\u00ad tions tased on labels \nand go-to statements by constructions based on ordering of pro\u00adgram structures. Thus the current interest \nin program structuring finds some support in the development of natural languages. 5. ARTIFICIAL LIIKLIARY \nLANGUAGES Let me now turn to another aspect of natural languages, and again one which has been taken \nvery seriously by Otto Jesper\u00adsen, namely artificial languages designed for international communication. \nIn this field one finds striking analogies to the activity of programming language develop\u00adment. Perhaps \nthe most outstanding simila\u00adrity is the way in which people get emo\u00adtionally involved in the issues. \nHaving myself taken part in some of the committee work on programming languages, I was struck by the \nsimilarity of the problems that aro\u00adse around 1910 concerning the choice of an international language, \nas described by Jespersen in his atitobiography (1938). This is not the place to cover the complete history \nof artificial languages. Such a history may be found, e.g., in Bod\u00ad mer (1944). I will concentrate on \ntWO lS\u00adsues. The first is the conflict between language quality and language support. To bring this out, \nconsider first the situa\u00adtion as it was around 1910. At this time the practicality of an artificial language \nwas fully recognized. Since 1880, when Volap~k started its hectic and brief ca\u00adreer, a whole series of \nlanguages had been developed. One of them, Esperanto, already had ardent supporters, organized interna\u00adtionally. \nAnother one, Interlingua or La\u00adtino Sine Flexione, developed by the mathe\u00admatician Peano, was supported \nby the Aca\u00addemia pro Interlingua. At the turn of the century a sufficient number of scholars had become \ninterested in the whole question to make it possible to organize an internatio\u00adnal committee with the \ntask of deciding on the best language. This committee met in Paris in 1907, including Jespersen as one \nof the two experts in linguistics. The com\u00admittee decided that, although Esperanto was a strong contender \nthere were so many details of it that were known to be in need of improvement that it could only be recom \nmended on the condition that it was changed in a number of ways. The desirable direc\u00adtions of these changes \nwere already brought forth in the language Ido that was first announced during the conference. The deeply \nsignificant experience that may be derived from this incident is the reactions that ensued from the committee \nrecommendation. To put it briefly, there came a fight. The Esperantist organizations refused to consider \nchanges to their lan\u00adguage. Meanwhile many individual adherents changed their support and worked on Ido \nand its further improvement. Emotions rose, declarations and insinuations flew in all directions. And \nthus it happened that even a language like Esperanto, that was recog\u00adnized already in 1907 when it was \nbut 20 years old to be poorly suited for its de\u00adclared purpose, has retained its support to this day, \n67 years later. This is a striking example of how people tend to shift their support from a higher level \nof generality, in this case an internatio\u00adnal language as such, to a lower, in this case the particular \nlanguage that they have for some reason become attached to. As a contrast to this misguided loyal-\u00adty \nwe may again turn to Otto Jespersen. He first contributed to the discussion of Ido, the modified form \nof Esperanto. Then came the first World War that stopped the work. However, years later, in 1928, Jespersen \npublished a wholly new attack on the pro\u00adblem, in the form of a description of a language called Novial \n(Jespersen 1928). He followed this, two years later, with a complete dictionary of the language (Jespersen \n1930). And again, in 1934 when he was 73 years old, he published a criti-\u00adcal reexamination of his own \ncreation, proposing a number of modifications. The analogy of these incidents with , the development \nof programming languages in recent years seems to me close enough to be of interest. The basic lesson \nseems to be that where the public appeal is con\u00adcerned the tschnical quality of an artifi\u00adcial language \nis decisive only at the very early stage of development. Volapuk did fall flat because of technical defects. \nAs soon as the most glaring defects have been removed, the public following of a language depends on \nthe support around the language, not on the language itself. On this analo\u00adgy, Esperanto corresponds \nto Fortran and Cobol. If this analogy is valid we should expect Fortran and Cobol to be with us for many \nyears to come. As another conclusion, the discussions concerning the best fea\u00ad tures to include in a \nprogramming language will remain academic exercises, perhaps interesting, but without deep influence \non the main course of events. This sounds like a cry of despair. Is there nothing we can do to influence \npro\u00adgramming at large? Looking again to the hero of this story, Otto Jespersen, we may ask, what part \nof his activity has had the widest influence? This of course cannot be answered easily-or precisely. \nUndoubtedly his monumental, 7-volume grammar of English and other great studies have had influence on \nlinguistics. But, one may wonder, is this influence greater than that of his work on the elementary teaching \nof English in Danish schools? He was co-author of a set of textbooks that were first published around \n1895, jmt before the revolutionary shift from Latin to correctly pronounced English occurred in Danish \nschools. Count\u00adless Danish children have been introduced first to English through the display of powerful \nEnglish monosyllables in the first sentence of these books: ai ken hLp, ai ken rim, si m~. hAp, si mi \nrAn, it iz f~n, fAn, f,m! . (For the clue to the phonetic script, see the end of the arti\u00adcle) . Personally \nI am deeply indebted to the tradition starting from this work of Jespersen. By analogy this stresses \nthe importan\u00ad ce of producing good textbooks for the elementary teaching. However, this should not be \noverstressed since other circum\u00adstances than the existence of good text\u00adbooks undoubtedly have been at \nwork in the revolution of English teaching in Den\u00admark. 6. FORTRAN AND COBOL AS GIVEN FACTS OF LIFE Suppose \nthat the analogy of Esperan\u00adto and Fortran plus Cobol is valid, in other words that Fortran and Cobol \nare here to stay. Then it would follow that the attempts to replace them by something better will fail. \nThis prospect was recently considered by Ralston (1973), who suggested that those who criticize Fortran \nwould make a better contribution if they would work on improving this language and its use. I feel that \nthis point is too strong to be ignored. However, unlike Ralston I don t believe that those people who \nnow oppose Fortran and work on other languages have much chance of influencing it. The trouble is that \neach of the languages, Fortran, Cobol, Algol 60, Algol 68, Simu\u00adla 67, PL/1, APL, etc. have their separa\u00adte \nmaintenance committee. Such an arran\u00adgement is by its very structure bound to keep refueling the adverse \nemotions. Each separate group by definition has as its task to guard that holy grail that is men\u00adtioned \nin the name of the group. As a group the people working with the thing will naturally have the ambition \nto achie\u00adve something. This achievement consists of revisions of the language. But to enhance the sense \nof achievement it is important that revisions have a competitive value, that they contribute to the unique \nquality of the language. For this reason, when the members of the maintenance committee for language \nQ bring out a revision of their language they will never, never tell that this revision has been taken \nover from good features known for a long time in languages R and T. On the contrary, they will try to \nconceal this fact. Thus they will call them by new names and may well try to modify the features so as \nto make the influence less obvious. This process often will result in an improvement to the worse of \nthe features in question. However, even if the influence on the languages as such are bound to rigid \npat\u00adterns, there is another point of influence, that of literature. This will be conside\u00adred next. 7. \nLANGUAGE AND LITERATURE The point where the analogy of natu\u00adral language and any programming language \nfails most miserably is that of literature. The field of programming just does not have anything that \nis comparable with the works of Shakespeare. While this fact is histo\u00adrically easy to understand, it \nsuggests also that there might be a need for a shift of attention a way from programming languages toward \nthe corresponding litera\u00adture, i.e. toward the programs written in the languages. With such a shift the \nfocus of interest becomes algorithmic methods of general interest. Work in this direction must first \nof all aim at the writing of programs. In order to avoid a one-sided\u00adness that might turn the attention \naway from the proper focus, this type of work is at present best done if the algorithms are expressed \nin at least two different languages at the same time. Examples of work along this direction are the books \nby D. E. Knuth (1968-73) where the algo\u00adrithms are expressed both in an informal programming language \nbased on natural lan\u00adguage and in the language MIX, and the re cent book by the present writer (Naur \nl~74a) where Fortran and Algol 60 are used side by side. When a suitable body of literature has become \navailable, other forms of lin\u00adguistic study will become pertinent. One such form is concerned with the \nstyle of programs. Work in this direction has al\u00adready appeared (Weinberg 1970; Kernighan and Plauger \n1974). The interest in programming style is directly analogous with a corresponding interest in natural \nlanguage style. This latter interest reflects the fact that good style is the result of both insight, \npractice, and effort, ingredients that are too often not present in adequate measure. By analogy we can \nexpect that good program\u00adming style will remain a combination of sound principles, talent, and work, \nand that the fight against poor style is never ending. 8. DESCRIPTIVE AND PRESCRIPTIVE ATTITUDE TO LANGUAGE \nThe dominant attitude of both laymen and scholars to language as such has until fairly recently been \nprescriptive, i.e. the interest has focused on what is regar\u00added as correct, good language, and on the \ncorrect spelling. Enormous amounts of time and trouble have been spent on trying to stop people from \nusing a preposition to end the sentence with , from splitting their infinitives, etc. In scholarly linguistics \nthe prescrip\u00adtive attitude has now largely been repla\u00adced by a descriptive attitude. Thus Jesper sen \nbased his great English grammar and other studies on observations of language as it is spoken and written. \nHe estimates that throughout his life he has made 3 \u00ad 400,000 separate notes of his observations. The \nprescriptive attitude is of course well justified in.the case of beginners who are introduced to a new \nlanguage, or are picking up the native language as young children. However, the prescriptive atti\u00adtude \nmakes itself Strongly felt far out side the classroom and the nursery, and the motivation for this attitude \ngoes far beyond the interest in unambiguous, effec\u00adtive conversation. One such extraneous prescriptive \nprinciple is that earlier forms or meanings of words should a priori be considered more correct than \nthe current ones. Another extraneous motive of this kind is derived from the use of language for distinguishing \nclasses of people. Ber\u00ad nard Shaw, in Pygmalion , gives a vivid picture of this verbal class distinction \nat work in England at the turn of the cen\u00ad tury. There is little doubt that many of the prescriptive \nefforts that derive from an insistence on keeping older forms, or from the use of language for class \ndistinction, have worked against the change of language in the direction of higher effectiveness. For \nexample, in Danish written language a distinction between verbs used with singu\u00adlar and plural subjects \nwas maintained un\u00adtil the end of the nineteenth century (e.g. jeg rejser = I travel, vi rejse = we tra\u00advel) \n. When this superfluous distinction was finally removed in the written langua ge it had been dead in \nthe spoken language for some three hundred years. One shudders to think of the countless hours that little \ngirls and boys in Danish schools must have wasted in learning this rule. It served no useful purpose \nwhatsoever. On the contrary, getting rid of the distinction is in some cases a direct help to unhindred \nexpres\u00adsion. In programing we find close analogies to these states of affairs. Thus the teach\u00ading of \nprograming and programming langua\u00adges is wholly prescriptive. We also find a prescriptive attitude that \nopposes innova\u00adtions as such, and one that deprecates par\u00adticular modes of expression, for example go-to \nstatements. On the point of language change, pro graming has a greater inertia than natural languo.ge \nbecause a change, to be really ef\u00ad fective, has to be implemented in a compi\u00adler, For this reason the \nplay with language, by way of expressions that perhaps start purely as jokes, is less active as a source \nof change. Instead programming language change goes by way of a series of new lan\u00adguages, deliberately \ndesigned as more or less convincing wholes. In presenting a new language to the world the designers must \nassume a predominantly descriptive attitu\u00adde to their creation. A descriptive atti\u00adtude has also been \ntaken in a number of comparative studies of programing langua\u00adges (e.g. Higman 1967; Caracciolo di Fori\u00adno \n1968). In relation to program literature the descriptive attitude has so far been almost completely absent, \nfor the good reason that so little literature worthy of systematic study exists. The little that has \nbeen pu\u00adblished in this direction has dealt with the behaviour of programmers during the program development \nactivity (e.g. Gold 1969: Naur 197.$b). This area of empirical studies of programming might well turn \nout to gain in significance in the future. 9. CONCLUSION Several of the social aspects of ma\u00adthematics \nand natural languages show a meaningful analogy with similar aspects of programming languages. It therefore \nmakes sense to extrapolate the analogy to further such aspects. On this basis the following conclusions \nmay be drawn: the split between the more academic, pure com puter science oriented study of program\u00adming \nlanguages and the world of practical programming will persist indefinitely; the era of influential programming \nlanguage construction is past, Fortran and Cobol will retain their dominance; the existing programming \nlanguages will develop S1OW1Y, with only weak interaction among them; the areas of widest influence from \nscholarly studies on programing at large will be program literature and style, the most im\u00adportant medium \nof influence being text books at the fairly elementary level; greater interest in empirical studies of \nprogramming may be expected to develop in the future. Clue to the phonetic sentence in section 5: I can \nhop, I can run, see me hop, see me run, it is fun, fun, fun! . REFERENCES Bodmer, F. (1944): with Hogben, \nL. (cd.) The loom of language. George Allen and Unwin, London, 7th impr. 1961. Buxton, J. N.: and Randell, \nB. (1969) Software Engineering Techniques. NATO Science Committee, Brussels, 1970. Caracciolo di Forino, \nA. (1968) String processing languages and generalized Markov algorithms. In Bobrow, D. G. (cd.) Symbol \nmanipulation languages and tech\u00adniques. North-Holland I ubl. Co., Amster\u00addam, The Netherlands. Courant, \nR. (1961) in Applied mathematics: what is needed in research and education -A symposium. SIAM Review \n4, 4 (Oct. 1962), 297 -320. Dijkstra, E. W. (1972) The humb~.e program mer. Comm. ACM 15, 10 (Oct. 1972), \n859 -866. Gold, M. M. (1969) Time-sharing and batch\u00ad processing: an experimental comparison of their \nvalues in a problem-solvin si\u00adtuation. Comm. ACM 12, 5 (May 1969 7 , 249 -~59. Hardy, G. H. (1940) \nA mathematician s apo logy. Cambridge TJniversity press, re\u00adprinted 1967. Higman~ B. (1967) A comparative \nstudY of programming languages. American Else\u00advier, New York. Jespersen, O. (192~) Language, its nature, \ndevelopment and origin. George Allen and Unwin, London, 10th impr. 1954. Jespersen, O. (1928) An international \nlanguage. Jespersen, 0. (1930) Novial lexike. Jespersen, 0. (1938) En sprogmands lev\u00adned. Gyldendal, \nCopenhagen. Kernighan, B. W.; and Plauger, P. J. The elements of prograrmning style. McGraw -Hill, New \nYork, etc. 1974. Knuth, D. E. (1968 1973) The art of computer programming. Addison-Wesley, Reading, \nMassachusetts. Naur, P. (1974a) Concise survey of compu\u00adter methods. Studentlitteratur, Lund, Sweden, \nand Mason and Lipscomb, New York. Naur, P. (1974b) What happens during pro\u00adgram development -an experimental \nstu\u00addy . In Systemering 75 , Studentlitte\u00adratur, Lund, Sweden, in press. Neumann, J. Von (1947) The \nmathematician. In Heywoocl and Nef (cd.) The work:+ of the mind. Univ. of Chi.caLy Press. Also  in J. \nVon Neumann s Collected Works, vol. 1, 1 9, Princeton University Press.  Ralston, A. (1973) The future \nof higher level languages (in teaching). In In\u00adternational computing symposium 1973 A. Gunther, B. Levrat, \nand H. Lipps. (eds.), American Elsevier, New York, 1974, 1 10. Stone, M. (1961) The revolution in mathe\u00admatics. \nAmerican Mathematical Monthly (Oct. 1961), 715 -734. Weinberg, G. M. (1970) PL/I programming: a manual \nof style. McGraw-Hill, New York.  \n\t\t\t", "proc_id": "512976", "abstract": "Some social aspects of programming are illuminated through analogies with similar aspects of mathematics and natural languages. The split between pure and applied mathematics is found similarly in programming. The development of natural languages toward flexionless, word-order based language types speaks for programming language design based on general, abstract constructs. By analogy with incidents of the history of artificial, auxiliary languages it is suggested that Fortran and Cobol will remain dominant for a long time to come. The most promising avenues for further work of wide influence is seen to be high quality program literature (i.e. programs) of general utility and studies of questions related to program style.", "authors": [{"name": "Peter Naur", "author_profile_id": "81100158784", "affiliation": "Datalogisk Institut, Copenhagen University", "person_id": "PP31029917", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512976.512991", "year": "1975", "article_id": "512991", "conference": "POPL", "title": "Programming languages, natural languages, and mathematics", "url": "http://dl.acm.org/citation.cfm?id=512991"}