{"article_publication_date": "12-01-1989", "fulltext": "\n\t\t\t", "proc_id": "96709", "abstract": "<p>Language designers and implementors have avoided specifying and preserving the meaning of programs that produce errors. This is apparently because being forced to preserve error behavior severely limits the scope of program optimization, even for correct programs. However, preserving error behavior is desirable for debugging, and error behavior must be preserved in any language that permits user-generated exceptions.</p><p>This paper presents a technique for preserving the power of general program transformations in the presence of a rich collection of distinguishable error values. This is accomplished by introducing an annotation, &#8220;Safe&#8221;, to mark occurrences of functions that cannot produce errors. Succinct and general algebraic laws can be expressed using Safe, giving program transformations in a language with many error values the same power and generality as program transformations in a language with only a single error value.</p>", "authors": [{"name": "Alexander Aiken", "author_profile_id": "81100399954", "affiliation": "IBM Almaden Research Center, 650 Harry Rd., San Jose, CA", "person_id": "P13911", "email_address": "", "orcid_id": ""}, {"name": "Edward L. Wimmers", "author_profile_id": "81341498495", "affiliation": "IBM Almaden Research Center, 650 Harry Rd., San Jose, CA", "person_id": "PP42049420", "email_address": "", "orcid_id": ""}, {"name": "John H. Williams", "author_profile_id": "81339536861", "affiliation": "IBM Almaden Research Center, 650 Harry Rd., San Jose, CA", "person_id": "PP43136481", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/96709.96730", "year": "1990", "article_id": "96730", "conference": "POPL", "title": "Program transformation in the presence of errors", "url": "http://dl.acm.org/citation.cfm?id=96730"}