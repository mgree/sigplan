{"article_publication_date": "12-01-1989", "fulltext": "\n\t\t\t", "proc_id": "96709", "abstract": "<p>We present a new approach to dynamic typing in a static framework. Our main innovation is the use of structural subtyping for dynamic types based on the idea that possible dynamic typing as a property should be <italic>inherited</italic> by objects of all types. Two properties of our system set it apart from existing systems which combine static and dynamic typing: all tagging and checking takes place via implicit coercions, and the semantics of dynamic typing is representation independent. The latter property leads to a significant increase in expressive power&#8212;for instance it allows us to define a <italic>general</italic> call-by-value fixpoint operator.</p><p>The resulting system&#8212;which we call quasi-static typing&#8212;is a seamless merger of static and dynamic typing. The system divides programs into three categories: well-typed, ill-typed and ambivalent programs. Ill-typed programs contain expressions that are <italic>guaranteed</italic> to go wrong. Run-time checking is limited to doubtful function applications in ambivalent programs. Conceptually, quasi-static typing takes place in an unusual two-phase process&#8212;a first phase infers types and coercions and a second <italic>plausibility checking</italic> phase identifies ill-typed programs. The typing rules allow minimal typing judgements and plausibility checking can be characterized as simplification via a canonical set of rewrite rules. The two phase process can therefore be implemented with a one pass algorithm.</p>", "authors": [{"name": "Satish Thatte", "author_profile_id": "81100465788", "affiliation": "Department of Mathematics and Computer Science, Clarkson University, Potsdam, NY", "person_id": "PP31097131", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/96709.96747", "year": "1990", "article_id": "96747", "conference": "POPL", "title": "Quasi-static typing", "url": "http://dl.acm.org/citation.cfm?id=96747"}