{"article_publication_date": "12-01-1989", "fulltext": "\n\t\t\t", "proc_id": "96709", "abstract": "<p>The programming language Scheme contains the control construct call/cc that allows access to the current continuation (the current control context). This, in effect, provides Scheme with first-class labels and jumps. We show that the well-known formulae-as-types correspondence, which relates a constructive proof of a formula &#945; to a program of type &#945;, can be extended to a typed Idealized Scheme. What is surprising about this correspondence is that it relates <italic>classical</italic> proofs to typed programs. The existence of computationally interesting &#8220;classical programs&#8221; &#8212;programs of type &#945;, where &#945; holds classically, but not constructively &#8212; is illustrated by the definition of conjunctively, disjunctive, and existential types using standard classical definitions. We also prove that all evaluations of typed terms in Idealized Scheme are finite.</p>", "authors": [{"name": "Timothy G. Griffin", "author_profile_id": "81100040423", "affiliation": "Departamento de Ci&#234;ncia da Computa&#231;&#227;o, IMECC - UNICAMP, Caixa Postal, 6065, 13801 Campinas SP, Brazil and Department of Computer Science, Rice University, Houston, TX", "person_id": "PP38030522", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/96709.96714", "year": "1990", "article_id": "96714", "conference": "POPL", "title": "A formulae-as-type notion of control", "url": "http://dl.acm.org/citation.cfm?id=96714"}