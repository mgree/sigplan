{"article_publication_date": "08-31-2009", "fulltext": "\n Organizing Functional Code for Parallel Execution or, foldl and foldr Considered Slightly Harmful Guy \nL. Steele Jr. Sun Microsystems Laboratories Burlington, Massachusetts guy.steele@sun.com Abstract Alan \nPerlis, inverting Oscar Wilde s famous quip about cynics, once suggested, decades ago, that a Lisp pro\u00adgrammer \nis one who knows the value of everything and the cost of nothing. Now that the conference on Lisp and \nFunctional Programming has become ICFP, some may think that OCaml and Haskell programmers have inherited \nthis (now undeserved) epigram. I do believe that as multicore processors are be\u00adcoming prominent, and \nsoon ubiquitous, it behooves all programmers to rethink their programming style, strategies, and tactics, \nso that their code may have ex\u00adcellent performance. For the last six years I have been part of a team \nworking on a programming language, Fortress, that has borrowed ideas not only from Fortran, not only \nfrom Java, not only from Algol and Alphard and CLU, not only from MADCAP and MODCAP and MIRFAC and the \nKlerer-May system but also from Haskell, and I would like to repay the favor. In this talk I will discuss \nthree ideas (none original with me) that I have found to be especially powerful in organizing Fortress \nprograms so that they may be executed equally effectively either sequentially or in parallel: user-de.ned \nassociative operators (and, more generally, user-de.ned monoids); conjugate transforms of data; and monoid-caching \ntrees (as described, for example, by Hinze and Paterson). I will exhibit pleasant little code examples \n(some original with me) that make use of these ideas. Categories and Subject Descriptors D.3.3 [Language \nConstructs and Features]: Concurrent programming structures General Terms Algorithms, Languages, Performance \nKeywords reduction, associative operator, monoid, tree, conjugate transform Copyright is held by Sun \nMicrosystems, Inc. ICFP 09, August 31 September 2, 2009, Edinburgh, Scotland, UK. ACM 978-1-60558-332-7/09/08. \n  \n\t\t\t", "proc_id": "1596550", "abstract": "<p>Alan Perlis, inverting OscarWilde's famous quip about cynics, once suggested, decades ago, that a Lisp programmer is one who knows the value of everything and the cost of nothing. Now that the conference on Lisp and Functional Programming has become ICFP, some may think that OCaml and Haskell programmers have inherited this (now undeserved) epigram.</p> <p>I do believe that as multicore processors are becoming prominent, and soon ubiquitous, it behooves all programmers to rethink their programming style, strategies, and tactics, so that their code may have excellent performance. For the last six years I have been part of a team working on a programming language, Fortress, that has borrowed ideas not only from Fortran, not only from Java, not only from Algol and Alphard and CLU, not only from MADCAP and MODCAP and MIRFAC and the Klerer-May system-but also from Haskell, and I would like to repay the favor.</p> <p>In this talk I will discuss three ideas (none original with me) that I have found to be especially powerful in organizing Fortress programs so that they may be executed equally effectively either sequentially or in parallel: user-defined associative operators (and, more generally, user-defined monoids); conjugate transforms of data; and monoid-caching trees (as described, for example, by Hinze and Paterson). I will exhibit pleasant little code examples (some original with me) that make use of these ideas.</p>", "authors": [{"name": "Guy L. Steele", "author_profile_id": "81332529686", "affiliation": "Sun Microsystems Laboratories, Burlington, MA, USA", "person_id": "P1613971", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1596550.1596551", "year": "2009", "article_id": "1596551", "conference": "ICFP", "title": "Organizing functional code for parallel execution or, foldl and foldr considered slightly harmful", "url": "http://dl.acm.org/citation.cfm?id=1596551"}