{"article_publication_date": "08-31-2009", "fulltext": "\n Commutative Monads, Diagrams and Knots Dan Piponi Industrial Light &#38; Magic, San Francisco dpiponi@gmail.com \nAbstract There is certain diverse class of diagram that is found in a variety of branches of mathematics \nand which all share this property: there is a common scheme for translating all of these diagrams into \nuseful functional code. These diagrams include Bayesian networks, quan\u00adtum computer circuits [1], trace \ndiagrams for multilinear algebra [3], Feynman diagrams and even knot diagrams [2]. I will show how a \ncommon thread lying behind these diagrams is the presence of a commutative monad and I will show how \nwe can use this fact to translate these diagrams directly into Haskell code making use of do-notation \nfor monads. I will also show a number of examples of such translated code at work and use it to solve \nproblems ranging from Bayesian inference to the topological problem of untangling tangled strings. Along \nthe way I hope to give a little insight into the subjects mentioned above and illustrate how a functional \nprogram\u00adming language can be a valuable tool in mathematical research and experimentation. Categories \nand Subject Descriptors F.3.3 [Theory of Computa\u00adtion]: Studies of Program Constructs General Terms Theory \nKeywords diagrams, functional, monads, linear algebra,knot the\u00adory, Haskell  References [1] Coecke, \nBob. Kindergarten Quantum Mechanics. http://arxiv.org/abs/quant\u00adph/0510032 [2] Kauffman, L.H.: Knots \nand Physics, 3rd edn. World Scienti.c (2001). [3] Steven Morse and Elisha Peterson,Trace Diagrams, Matrix \nMinors, and Determinant Identities, http://arxiv.org/abs/0903.1373 Copyright is held by the author/owner(s). \nICFP 09 August 31 September 2, 2009, Edinburgh, Scotland, UK. ACM 978-1-60558-332-7/09/08.   \n\t\t\t", "proc_id": "1596550", "abstract": "<p>There is certain diverse class of diagram that is found in a variety of branches of mathematics and which all share this property: there is a common scheme for translating all of these diagrams into useful functional code. These diagrams include Bayesian networks, quantum computer circuits [1], trace diagrams for multilinear algebra [2], Feynman diagrams and even knot diagrams [3]. I will show how a common thread lying behind these diagrams is the presence of a commutative monad and I will show how we can use this fact to translate these diagrams directly into Haskell code making use of do-notation for monads. I will also show a number of examples of such translated code at work and use it to solve problems ranging from Bayesian inference to the topological problem of untangling tangled strings. Along the way I hope to give a little insight into the subjects mentioned above and illustrate how a functional programming language can be a valuable tool in mathematical research and experimentation.</p>", "authors": [{"name": "Dan P. Piponi", "author_profile_id": "81100284377", "affiliation": "Industrial Light & Magic, San Francisco, CA, USA", "person_id": "P1613973", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1596550.1596553", "year": "2009", "article_id": "1596553", "conference": "ICFP", "title": "Commutative monads, diagrams and knots", "url": "http://dl.acm.org/citation.cfm?id=1596553"}