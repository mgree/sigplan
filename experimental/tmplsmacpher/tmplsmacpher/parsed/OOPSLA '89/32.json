{"article_publication_date": "09-01-1989", "fulltext": "\n\t\t\t", "proc_id": "74877", "abstract": "<p>Computational reflection makes it easy to solve problems that are otherwise difficult to address in Smalltalk-80, such as the construction of monitors, distributed objects, and futures, and can allow experimentation with new inheritance, delegation, and protection schemes. Full reflection is expensive to implement. However, the ability to override method lookup can bring much of the power of reflection to languages like Smalltalk-80 at no cost in efficiency.</p>", "authors": [{"name": "B. Foote", "author_profile_id": "81100258465", "affiliation": "Dept. of Computer Science, University of Illinois at Urbana-Champaign, 1304 W. Springfield, Urbana, IL", "person_id": "P24856", "email_address": "", "orcid_id": ""}, {"name": "R. E. Johnson", "author_profile_id": "81100453209", "affiliation": "Dept. of Computer Science, University of Illinois at Urbana-Champaign, 1304 W. Springfield, Urbana, IL", "person_id": "PP14159338", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/74877.74911", "year": "1989", "article_id": "74911", "conference": "OOPSLA", "title": "Reflective facilities in Smalltalk-80", "url": "http://dl.acm.org/citation.cfm?id=74911"}