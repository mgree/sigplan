{"article_publication_date": "01-01-2001", "fulltext": "\n Computational flux Robin Milner University of Cambridge, Computer Laboratory Lecture summary The lecture \nwill be about a simple graphical model for mobile com- puting. Graphical or geometric models of computing \nare probably as old as the stored-program computer, possibly older. I do not know when the first flowchart \nwas drawn. Though undeniably useful, flowcharts were denigrated because vital notions like parametric \ncomputing -the procedure, in Algol terms- found no place in them. But a graphical reduction model was \ndevised by Wadsworth [15] for the lambda calculus, the essence of parametric (functional) computing. \nMeanwhile, Patti nets [13] made a breakthrough in un- derstanding synchronization and concurrent control \nflow. Later, the chemical abstract machine (Chain) [2] -employing chemical anal- ogy but clearly a spatial \nconcept- clarified and generalised many features of process calculi. Before designing CCS, I definedflowgraphs \n[9] as a graphical pre- sentation offlow algebra, an early form of what is now called struc- tural congruence; \nit represented the static geometry of interactive processes. The pi calculus and related calculi are \nall concerned with a form of mobility; they all use some form of structural con- gruence, but are also \ninformed by a kind of dynamic geometrical intuition, even if not expressed formally in those terms. There \nare now many such calculi and associated languages. Exam- pies are the pi calculus [11], the fusion calculus \n[12], the join cal- culus [5], the spi calculus [1], the ambient calculus [3], Pict [14], nomadic Pitt \n[16], explicit fusions [6]. While these calculi were evolving, in the action calculus project [10] we \ntried to distill their shared mobile geometry into the notion of action graph. This cen- tred around \na notion of molecule, a node in which further graphs may nest. All action calculi share this kind of \ngeometry, and are distinguished only by a signature (a set of molecule types) and a set of reaction rules. \nThe latter determine what configurations of molecules can react, and the contexts in which these reactions \ncan take place. Such a framework does not necessarily help in designing and analysing a calculus for \na particular purpose. It becomes useful when it supplies non-trivial theory relevant to all, or a specific \nclass Permission to make digital or hard copies of all or part of this work for personal or classroom \nuse is granted without fee provided that copies are not made or distributed for profit or commercial \nadvan- tage and that copies bear this notice and the full citation on the first page. To copy otherwise, \nto republish, to post on servers or to redistribute to lists, requires prior specific permission and/or \na fee. POPL'01 1/01 London, UK &#38;#169; 2001 ACM ISBN 1-58113-336-7/01/0001 ... 65.00 of, calculi. \nMost process calculi are equipped with a behavioural theory -often a labelled transition system (LTS), \nor a reaction (= reduction) relation, together with a trace-based or (bi)simulation- based behavioural \npreorder or equivalence. Developing this theory is often hard work, especially proving that the behavioural \nrelation is preserved by (some or all) contexts. Recently [8] we have defined a simple categorical notion \nof reactive system, and shown that un- der certain conditions an LTS may be uniformly derived for it, \nin such a way that various behavioural relations -including the fail- ures preorder and bisimilarity- \nwill automatically be congruential (i.e. preserved by contexts). We have also shown [4] that a substan- \ntial class of action calculi satisfy the required conditions. Thus we approach a non-trivial general \ntheory for those calculi which fit the framework, as many do. This work has encouraged us to base the \ntheory on a simpler notion: a linear action graph, one in which edges may not fork or merge; an example \nis shown in Fig. 1. These graphs are a generalisation of Lafont's interaction nets [7]. They consist \njust of nodes (with many ports) and edges, but with a locality -i.e. a forest structure- imposed upon \nnodes quite independently of the edge wiring. This notion has grown out of action calculi but is also \ninspired by the Chain of Berry and Boudol [2], the ambient calculus of Cardelli and Gordon [3], the language \nNomadic Pitt of Sewell and Woj- ciechowski [16], and the fusion concept of Parrow and Victor [12] further \ndeveloped by Gardner and Wischik [6]. The intuition is that nodes have locality, wires (per se) don't. \nA node and its (nodal) contents can be an ambient, a physical location, a A-abstraction, a program script, \nan administrative region ..... A node without contents can be a date constructor, a cryptographic key, \na merge or copy node, a message envelope ..... In the lecture I shall outline the basic behavioural theory \nof shallow linear graphs -those without nesting. I hope to indicate how this behavioural theory extends \nsmoothly to nested graphs, and how the reaction rules in these can conveniently represent action-at-a- \ndistance - a fiction which is essential in a higher level model of (say) the worldwide web. I shall also \ndiscuss how the non-linear theory may be recovered, by a form of quotient. This is work in progress. \nAcknowledgement I would like to thank my colleagues Luca Cattani, Philippa Gardner, Jamey Leifer and \nPeter Sewell for their co-operation, inspiration and patience. 220 / Fig. 1: A linear action graph \nReferences [1] Abadi, M. and Gordon, A.D. (1997), A calculus for cryp- tographic protocols: the spi calculus. \nProc. 4th ACM Con- ference on Computer and Communications Security, ACM Press, 36-47. [2] Berry, G. and \nBoudol, G. (1992), The chemical abstract machine. Journal of Theoretical Computer Science, Vol 96, pp217-248. \n[3] Cardelli, L. and Gordon, A.D. (2000), Mobile ambients. Foundations of System Specification and Computational \nStructures, LNCS 1378, 140--155. [4] Cattarti, G.L., Leifer, J.J. and Milner, R. (2000),. Con-texts and \nEmbeddings for dosed shallow action graphs. University of Cambridge Computer Laboratory, Techni-cal Report \n496. [Submitted for publication. Available at http://www.cam.cl, ac.uk/usors/jj121 .] [5] Fournet, C. \nand Oonthier, G. (1996), The reflexive Chain and the join calculus. Proc. 23rd Annual ACM Symposium \non Principles of Programming Languages, Florida, pp372-385. [6] Gardner, P.A. and Wischik, L.G. (2000), \nExplicit fusions. Proc. MFCS 2000. LNCS 1893. [7] Lafont, Y. (1990), Interaction nets. Proc. 17th ACM \nSympo- sium on Principles of Programming Languages (POPL 90), pp95-108. [8] Leifer, J.J. and Milner, \nR. (2000), Deriving bisimulation con- gruences for reactive systems. Proc. CONCUR2000. [Avail- able at \nhttp : //www. cam. el. ac. uk/users /j j121 .] [9] Milner, R. (1979), Flowgraphs and Flow Algebras. Journal \nof ACM, 26,4,1979, pp794-818. [10] Milner, R. (1996), Calculi for interaction. Acta Informatica 33, 707-737. \n[11] Milner, R., Parrow, J. and Walker D. (1992), A calculus of mobile processes, Parts I and II. Journal \nof Information and Computation, Vol 100, ppl--40 and pp41-77. [12] Parrow, J. and Victor, B. (1998), \nThe fusion calculus: expres- siveness and symmetry in mobile processes. Proc. LICS'98, IEEE Computer \nSociety Press. [13] Petri, C.A. (1962), Fundamentals of a theory of asynchronous information flow. Proc. \nIFIP Congress '62, Noah Holland, pp386--390. [14] Pierce, B.C. and Turner, D.N. (2000), Pict: A program- \nruing language based on the pi-calculus. In Proof Language and Interaction: Essays in Honour of Robin \nMilner, ed. G.D.Plotkin, C.P.Stirling and M.Tofte, MIT Press, pp455- 494. [15] Wadsworth, C.E (1971), \nSemantics and pragmatics of the lambda-calculus. Dissertation, Oxford University. [16] Wojciechowski, \nET. and Sewell, P. (1999), Nomadic Pict: Language and infrastructure design for mobile agents. Proc. \nASA/MA '99, Palm Springs, California. 221 \n\t\t\t", "proc_id": "360204", "abstract": "", "authors": [{"name": "Robin Milner", "author_profile_id": "81332515695", "affiliation": "University of Cambridge, Computer Laboratory", "person_id": "PP37038572", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/360204.360222", "year": "2001", "article_id": "360222", "conference": "POPL", "title": "Computational flux", "url": "http://dl.acm.org/citation.cfm?id=360222"}