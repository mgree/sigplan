{"article_publication_date": "09-29-1998", "fulltext": "\n Type Errors Confuse The Programmer (Poster Abstract) Bruce J. McAdam The Laboratory for Foundations \nof Computer Science, The University of Edinburgh e-mail: bjm@dcs.ed.ac.uk WWW: http://www.dcs.ed.ac.uk/home/bjm/ \n Confused? Users of HOT (higher-order, typed) programming languages often complain about both the quality \n(too low) and quant- ity (too high!) of type error messages they get from com-pilers. This is an obstacle \nto the widespread adoption of these programming languages: when beginners see so many obscure error messages, \nthey become confused and discour- aged and may revert to whichever language they used pre- viously (ironically, \nwhile they may think that they make less mistakes in other languages, the opposite is likely to be the \ncase since weakly typed languages let many problems go undetected). While experienced programmers realise \nthat seeing many error messages is actually a good thing, they still find the messages confusing and \nthe debugging process can be frustrating. You will be. . . Let us look at a very simple program in Standard \nML. structure SomeNumbers :> sig val a : int (* Declaration of typo of a *) val b : int (* Declaration \nof type of b *I end = struct val a = 1.0 (* Definition of value of a *) val 1ocalVar = a (* Definition \nof local value *) val b = 1ocalVar + 1 (* Definition of value of b *I end The program declares a structure \ncalled SomeNumbers. The signature for the structure (between sig and end) declares the types for all \nthe values to be exported from the structure, it says there should be two integers, a and b. The structure \nbody (between struct and end) defines the values for these two values and also uses a local variable. \nCan you see the mistake? What line is it on? You might be surprised to see that the error message produced \nwhen compiling the structure reads Typo error on line 9 Cannot add 1ocalVar : real to 1 : int Structure \ndoas not match signature signature val a : int structure val a : real The second part of the error message \nmakes sense, but the alleged error on line4 is clearly an eflect of the other prob-lem, so why announce \nit as well? Though it is easy to see how to repair this example, much larger programs containing similar \nproblems can be difficult to debug. In a real program, both the signature and struc-ture could be hundreds \nof lines long and since there is noth- ing in the error messages themselves to relate them (the first \nmessage makes no mention of a) the programmer could spend a long time trying to remove the first message \nbefore looking at the second. This error message is the result of sensitivity on the order of type inference. \nThe compiler finds the type of the defin-ition of a, the type of the definition of localvar and then \nfinds that the definition of b does not make sense. Had the compiler taken the alternative route of checking \nthe defln-ition of a against its declaration first, then we would only have seen the second error message. \nThere are many other forms of mistake which lead to similar problematic error messages. A poster to relieve \nthis confusion The poster is intended for a general audience. It shows a programmer who is confused by \nan error message similar to the one above. The poster shows the programmer finding out some very important \nfacts l What type errors are. l Why seeing lots of type errors is actually a good thing. l Which aspects \nof type systems can make error mes-sages confusing. At the end of the poster, the programmer goes on \nto think about how error messages can be made more helpful and whether it might be possible for compilers \nto help pro-grammers repair these mistakes -this is an element of the author s Ph.D. project on Interactive \nType-Debugging (in progress). 338 \n\t\t\t", "proc_id": "289423", "abstract": "", "authors": [{"name": "Bruce J. McAdam", "author_profile_id": "81100195979", "affiliation": "The Laboratory for Foundations of Computer Science, The University of Edinburgh", "person_id": "P33610", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/289423.289465", "year": "1998", "article_id": "289465", "conference": "ICFP", "title": "Type errors confuse the programmer (poster abstract)", "url": "http://dl.acm.org/citation.cfm?id=289465"}