{"article_publication_date": "09-29-1998", "fulltext": "\n A delegation language to request weather products and a scheme of its interpretation Ole Kiselyov oleg@pobox.com, \noleg 62acm.org, oleg@computer.org http://pobox.com/-oleg/ftp/ This paper describes a work in progress \nthat is a part of a Metcast effort [ 11, a request-reply (channel) system for distributing information. \nand subscription meteorological Metcast Request Language Metcast Request Language is designed to express \nrequests for meteorological information for a specific area of interest, which may be the entire globe. \nThis area of interest provides request s top-most context, which can be expanded or restricted in descendant \ncontexts. Besides geographical localization, meteorological products are also characterized by timestamps, \nlayers, type (2D or 3D grids, point data, satellite imagery, etc). Each separate type of products is \ndescribed by its own set of parameters, and therefore, requires its own set of request specifications. \nAlthough a complete request includes quite a few parameters, users should be spared from specifying them \nall. The values of missing parameters are inferred from profiles and defaults. There are a number of \nprofiles that apply to particular product categories, to specific users, to all products requested in \na current transaction, etc; these profiles can be further modified by a request or by the results of \nevaluating the request. Given below are two sample requests: (Area51 (bounding-box 30.ON -5.00 -5 ZOE) \n(model NOGAPS) (resolution 2.5) (products (GlobalWarnings trop-cyc) (geopotential-heights (layer isobar \n500) (tau 6) (resolution 1.0)) (temperature (layer isobar 5OO)(model NORAPS)) (METAR) (SIGMET) 1) (Area51 \n(use special-area-51) (user 007) (products (TAP))) Multi-level fallbacks as a delegation language The \nnetwork of profiles, defaults and contexts can be represented by a sequence of dictionaries searched \nin a specific, dynamically changeable order. A value that fails to be found in the current dictionary \nis sought in the next dictionary, whose name or reference is contained in a dictionary path. It is the \ndynamic nature of the dictionary path that sets this system apart from a familiar scoping. Dictionaries \ncan be added or removed from the path at any time; the path may even change in the process of a lookup \nitself. The closest model of these dynamic hierarchies is a set of dictionaries in Forth/PostScript; \none can easily implement a similar facility in C, C++ [2], Scheme [3] or any other language of choice. \nImplementation of the Request Language The dictionary system with a dynamic search path proved to be \nvery useful in implementing a Metcast server [ 11. This section gives a few details. The server starts \nup with an initial dictionary that contains global defaults and the names of available products, associated \nwith their own private sub-dictionaries . Having received a request, the server reads it, processes the \nconstituent S-expressions and deposits the results into the current dictionary. For each S-expression, \nthe server examines its head, which defines an object . The server consults the dictionaries for a loader \nof this particular object -- object constructor. The loader, if found, is applied to the rest of the \nS-expression. Otherwise, the server merely adds S-expression s association to the current dictionary. \nFor example, a bounding-box object has a loader, which normalizes a given list of latitudes and longitudes; \nin contrast, a products object does not have a special constructor. After the request and all defaults \nand profiles are loaded, the server looks through the resulting dictionary for a symbol products, and \nprocesses each associated product request in turn. A product request is an S-expression itself. The server \nlooks up its head symbol in the dictionary, pushes the found association, looks up a symbol executor \nand applies the corresponding procedure to the rest of the product request body. The resulting dictionary \n-an ordered sequence of bindings -constitutes the environment all product database query parameters are \nto be located in. This environment is truly dynamic as some bindings may be procedures, which may push \nadditional associations into the environment and thus affect further lookups. [i] Metcast Home page http://zowie.metnet.navy.mil/-spawar/JMV-TNG/ \n[2]http://pobox. corn/-oleg/f tp/ packages.html#cpp.advio [3]http://pobox.com/-oleg/ftp/Scheme/ util.html#env \n 343 \n\t\t\t", "proc_id": "289423", "abstract": "", "authors": [{"name": "Oleg Kiselyov", "author_profile_id": "81100177557", "affiliation": "", "person_id": "PP37038016", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/289423.289472", "year": "1998", "article_id": "289472", "conference": "ICFP", "title": "A delegation language to request weather products and a scheme of its interpretation", "url": "http://dl.acm.org/citation.cfm?id=289472"}