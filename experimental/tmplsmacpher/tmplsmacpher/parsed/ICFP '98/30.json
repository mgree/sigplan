{"article_publication_date": "09-29-1998", "fulltext": "\n LAND*: an AND with local bindings, a guarded LET* special form Oleg Kiselyov oleg@pobox.com, oleg@acm.org, \noleg@computer.org http://pobox.com/-oleg/ftp/Scheme/ Like an ordinary AND, a LAND * special form evaluates \nits arguments -expressions-one after another in order, till the first one that yields # f . Unlike AND, \nhowever, a non-#f result of one expression can be bound to a fresh variable and used in the subsequent \nexpressions. ln case of an ordinary AND formed ofproper boolean expressions: (AND ~1 ~2 . ..I expression \nE2, if it gets to be evaluated, knows that El has returned non-#f. Moreover, E2 knows exactly what the \nresult of El was-#t -which E2 can use to its advantage. If El however is an extended boolean expression, \nE2 can no longer tell which particular non-#f value El has returned. Chances are it took a lot of work \nto evaluate~1, and the produced result (a number, a vector, a string, etc) may be of value to E2. Alas, \nthe AND form merely checks that the result is not an #f, and throws it away. If E2 needs it, it has to \ncompute that value anew. This proposed LAND * special form lets constituent expressions get hold of the \nresults of already evaluated expressions, without re-doing their work. LAND* can be thought of as a combination \nof LET * andAND, or a generalization of COND'Ssend operator =>. A LAND* form can also be considered a \nsequence of guarded expressions. In a regular program, forms may produce results, bind them to variables \nand let other forms use these results. LAND* differs in that it checks to make sure that every produced \nresult makes sense (that is, not an #f). The first failure triggers the guard and aborts the rest of \nthe sequence (which presumably would not make any sense to execute anyway). Examples: (LAND* ( (my-list \n(compute-list)) ((not (null? my-list)))) (do-something my-list)) (define (look-up key alist) (land* ((x \n(assq key alist))) (cdr x))) (or (land* ((c (read-char) 1 ((not (eof-object? c)))) (string-set! some-str \ni c) (++! i)) (begin (do-process-eof))) LAND * is also similar to an anaphoric AND\" LISP macro [I]; LAND* \nallows however more than one intermediate result, each of which continues to be bound through the rest \nof the form. More details can be found in a short paper referenced in http://pobox.com/-oleg/ftp/Scheme/index \n.html which also presents an annotated formal syntax and a denotational semantics of the LAND * form. \nThe paper points out to one implementation of LAND* as a R4RS macro that re-writes LAND* as a tree of \nAND and LET forms. A validation code is also presented, which verifies not only that everything works \nas expected, but also that LAND * finds syntax errors where expected. The latter -trapping of syntax \nerrors, recovering and continuing a test case-is a rather challenging task, requiring special forms of \na higher order . [I] Rob Warnock, comp.lang.scheme, 26 Feb 1998 09:06:43 GMT, Message-ID: <6d3bb3$3804h@fido.asd.sgi.com> \n 336 \n\t\t\t", "proc_id": "289423", "abstract": "", "authors": [{"name": "Oleg Kiselyov", "author_profile_id": "81100177557", "affiliation": "", "person_id": "PP37038155", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/289423.289463", "year": "1998", "article_id": "289463", "conference": "ICFP", "title": "LAND*: an AND with local bindings, a <italic>guarded</italic> LET* special form", "url": "http://dl.acm.org/citation.cfm?id=289463"}