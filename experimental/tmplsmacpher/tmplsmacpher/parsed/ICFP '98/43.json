{"article_publication_date": "09-29-1998", "fulltext": "\n A lazy CGI namespace in Scheme Oleg Kiselyov oleg@pobox.com, oleg@acm.org, oleg@computer.org http://pobox.com/-oleg/ftp/Scheme/ \nThis article demonstrates one particular framework for writing CGI scripts in Scheme. It features a lazy \nlookup of CGI parameters, support for stateful web forms with pseudo-frames, form composition integrated \nwith form processing, and macros whose expansion is a definition of another macro. The framework has \nbeen used extensively for several months in a production environment, providing front ends to a Metcast \ndatabase of meteorological informa- tion and a Metcast Channel dissemination service [ 11. Introduction \nCGI programming specifically involves generation of HTML code (in particular, HTML forms) and handling \nof form submissions. The latter requires a mechanism to map form s parameters into a Scheme lexical environ- \nment. The most trivial technique [2] is parsing of a QUERY-STRING or a POST action message and converting \nthem into an associative list. This list serves as a dictionary that associates the names of form slots \nwith their content. Another approach is regarding a form submission as an application of a FORM- LAMBDA \nto the list of form fields [3]. Yet another approach is to let a CGI script access environment variables \nand form parameters as if they were regular Scheme variables, only immersed in a different namespace. \nOne can refer to them simply as (cgi #se1 f -url) , (cgi#keywords) , etc. Furthermore, this notation \nlets one ask for a particular facet of a form slot value: ( cgi #keywords 1 gives the first word that \nwas entered in a slot named keywords', or #f if the slot is empty; (cgi#keywords :as-list) returns the \nlist of all the words, or all chosen OPTIONSin a multiple selection list; (cgi#keywords :as-full-string) \ngives all the keywords separated with a single space (cgi#keywords :as-name-value-io) returns a promise \n(a procedure), which, when applied, writes out NAME=llkeywordsllVALUE=\"valuel' (cgi#keywords :set! new-value) \nletsonemutate a CGI variable thus making it possible to generate an updated HTML form. Example (CGI:define \nname #f) (define (mode-show-form arg-res) (tout \"Content-type: text/html\\n\\n\" . . . \"<FORM METHOD=POST \nACTION=\" (cgi#self-url) Q<H3>Specify search parameters</H3>8t \"Station's full name I1 \"<INPUT TYPE=TEXT \nSIZE=19 II (cgi#name :as-name-value-io) I'>\" fiM<INPUT TYPE=SUEMIT NAME=do-search VALUE=Find>c/FORIUD\" \n. ..)) (define (mode-search esc-to-show) . . . (when (cgi#name) (++! search-criteria-count) (sql-buffer \naccum-sql! 'I AND MS.name LIKE II1 (string-upcase (cgi#name :as-full-string)) \"'\"))...) (with-catching-of-signals \n(lambda 0 (CGI:define do-search 'absent) (mode-show-form (call-with-current-continuation (lambda (show-cant) \n(cond ((not (eq? (cgi#do-search) 'absent)) (mode-search show-cant)) (else \"<P>\") )))))) Reference [2] \nprovides the complete code of this script. More examples can be found in [4,1]. These are self- contained, \nworking scripts -parts of an actual production system [ 11. Implementation The name of a CGI variable \n-e.g., cgi#name -is a syntactic keyword: a macro, which is defined in the expansion of another macro, \na CGI : define form that declares the variable. This declaration also defines a promise to locate and \nunquote the corresponding CGI parameter, Thus all references in the CGI namespace are lazy and cached. \nSince the actual lookup of CGI names is performed by a single hidden (library) procedure, switching to \na FastCGI or other protocol requires little if any modification w user CGI code. [I] http://zowie.metnet.navy.mil/-spawar/JMV-TNG/ \nMetcast-Channels.html [2] http:Npobox.corn/-oleg&#38;p/Scheme/index.html [3] http://www.eval-apply.com/Scheme/cgi.htm \n[4] http://zowie.metnet.navy.mill-spawarl JMV-TNG/Code/subscribe.scm http://zowie.metnet.navy.mil/cgi-bin/oleg/subscrihe \n 349 \n\t\t\t", "proc_id": "289423", "abstract": "", "authors": [{"name": "Oleg Kiselyov", "author_profile_id": "81100177557", "affiliation": "", "person_id": "PP37038140", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/289423.289479", "year": "1998", "article_id": "289479", "conference": "ICFP", "title": "A lazy CGI namespace in Scheme", "url": "http://dl.acm.org/citation.cfm?id=289479"}