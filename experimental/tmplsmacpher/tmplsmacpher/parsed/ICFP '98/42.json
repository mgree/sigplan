{"article_publication_date": "09-29-1998", "fulltext": "\n Implementing Design Patterns as Language Constructs Yan-David Erlich Supervisors: Shriram Krishnamurthi, \nMatthias Felleisen Department of Computer Science Rice University Houston, Texas 77005-1892 Over the \npast few years, design patterns [2] have rapidly gained popularity among industrial software profession-als. \nThe use of these standardized patterns clarifies the structure and purpose of the code. As a result, \nmany mainstream programmers now program with patterns in mind. To make this knowledge explicit, there \nare now nascent efforts to treat patterns as entities in their own right. These efforts, unfortunately, \nfail to provide some key features that both implementors and users of patterns require of such a notation. \nBefore we can remedy these shortcomings, we must provide a characterization of the desirable features \nof language extension tools that implement patterns. l Pattern instances must be treated as expressions \nin the ambient programming language, and should coexist with its other constructs. Otherwise, we are \nforced to implement a complete programming language at the pattern level, which duplicates ef-fort and \nforces the programmer to express similar tasks in two different languages. l A pattern instance is usually \na simple expression, which maps into a complex combination of con-structs in the underlying language. \nA pattern im-plementor therefore needs a mechanism powerful enough to specify these transformations, \nyet clear enough to make it easy to add new patterns. The pattern specification language must also free \nthe implementor from mundane yet error-prone tasks such as the management of variable bindings. Errors \nshould always be reported at the highest level of abstraction. Therefore, errors that arise from the \nuse of patterns should be reported in terms of the patterns themselves. This saves users from having \nto understand the details of the pat-tern s transformation. These properties strongly resemble the characteris-tics \nof modern macro systems. Indeed, pattern-matching in macro systems [4] provides an elegant yet power-ful \nmechanism for describing design patterns. Hygienic macro expansion [3] relieves implementors from man-aging \nthe details of variable binding. Finally, imple-mentations can report errors at the highest level of \nab-straction by using the information provided by source-correlation [I, 51. We have implemented the \npatterns introduced by Gamma, et al [2] using McMicMac, an advanced macro system [5] that runs in MzScheme. \nOur underlying lan-guage is a simplified, parenthesized variant of JAVA. We were able to implement all \nthese patterns easily and in short order by exploiting the pattern-matching and hy-gienic facilities \nof McMicMac. Our system also employs the source-correlation and expansion-tracking facilities built into \nMcMacMac to enhance the syntax-and type-checkers of this JAVA variant. It can thus report errors at the \nlevel of the patterns, rather than in terms of their complex expansions. References [l] R. Kent Dybvig, \nRobert Hieb, and Carl Bruggeman. Syntactic abstraction in Scheme. Lisp and Symbolic Computation, 5(4):295-326, \nDecember 1993. [2] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. Design Patterns: Elements \nof Reusable Object-OrientedSoftware. Addison-Wesley Personal Computing Series. Addison-Wesley, Read-ing, \nMA, 1995. [3] Eugene E. Kohlbecker, Daniel P. Friedman, Matthias Felleisen, and Bruce F. Duba. Hygienic \nmacro expansion. In ACM Symposium on Lisp and Functional Programming, pages 151-161, 1986. [4] Eugene \nE. Kohlbecker and Mitchell Wand. Macros-by-example: Deriving syntactic transformations from their specifications. \nIn Symposaum on Princi-ples of Prog,nmming Languages, pages 77-84, 1987. [5] Shriram Krishnamurthi. PLT \nMcMicMac: Parser Manual. Rice University, 1998. 348  \n\t\t\t", "proc_id": "289423", "abstract": "", "authors": [{"name": "Yan-David Erlich", "author_profile_id": "81100268051", "affiliation": "Department of Computer Science, Rice University, Houston, Texas", "person_id": "P304527", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/289423.289478", "year": "1998", "article_id": "289478", "conference": "ICFP", "title": "Implementing design patterns as language constructs", "url": "http://dl.acm.org/citation.cfm?id=289478"}