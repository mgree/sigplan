{"article_publication_date": "09-29-1998", "fulltext": "\n MAP: A Functional Analysis and Design Method Dan Russell Kingston University djrussell@kingston.ac.uk \nThere appears to be little consensus of opinion within the functional programming community regarding \nthe need for an analysis and design method which directly supports software development using a functional \nlanguage. Most developers of programs in any paradigm use some form of method with various degrees of \nformality or rigour as an aid to software development. However, many would argue that a generic method \nwhich supports the non-technical devel-opment issues regarding managing large software projects is all \nthat is required. We disagree with this viewpoint. The object-oriented (00) community has fully embraced \nmethods which support their favoured paradigm, evidenced by the vast array of available methods including \nthe Booth Method [Boo94], the Object Modeling Technique (OMT) [RBP+Sl], and Jacobson s Use-Case Method \n[Jac92]. Each method is supported by one or more CASE tools which in most cases support the automated \ngeneration of (partial) source code in a variety of object-oriented languages. For example, Rational \ns Rose [Cor95], supports both the Booth Method, and Jacobson s Use-Case Method, and can generate C++, \nSmalltalk and Ada code. Where much time and effort has been sensibly spent developing Haskell and SML, \ntwo standard functional lan-guages, the 00 community has focused both on standard-ised languages such \nas C++ (which differs from its func-tional counterparts in having an IS0 Standard), and also on developing \nUML [Fow97], a unified language to support development of object-oriented software. Since no paradigm \nis beyond support, we believe that a method which naturally enables development of software using all \nthe best practices and features of functional languages is required. MAP is an analysis and design method \nwhich naturally supports software development in a functional language, pure or impure, lazy or strict. \nIt is a collection of techniques accompanied by a development language and its graphical notation. That \nis, MAP is both a language in its own right, and a method for developing software which is supported \nby the language. The building blocks of MAP are types, functions, and signatures, and such ubiquitous \nfunctional language features as higher-order functions, and polymor-phism (both ad-hoc and parametric) \nare supported by the language, and encouraged by the method. We illustrate the graphical notation with \nthe MAP repre-sentation of the following abstract type for stacks as defined in the Haskell Report (Version \n1.4) [Pt97]. module Stack( StkType, push, pop, empty ) where data StkType a = EmptyStk I Stk a (StkType \na) push x s = Stk x s pop (Stk _ s) = s empty = EmptyStk MAP provides the usual range of support facilitated \nby an analysis and design method. That is, it breaks soft-ware development down to a set of manageable \nand linked techniques, which are glued together to make a productive whole. In addition, it can be used \nas a natural communi-cation medium which avoids the idiosyncracies of particular implementation languages, \nand through CASE tool support can act as an effective and efficient consistency checker. We will illustrate \nMAP through application to a case study.  References [Boo941 G. Booth. Object-Oriented Analysis and \nDesign with applications. Benjamin/Cummings, 1994. [Cor95] Rational Software Corporation. Getting Started \nwith Rational Rose. Rational Software Corpora-tion, 1995. [Fow97] Fowler, M. with Scott, K. UML Distilled: \nAp-plying the Standard Object Modeling Language. Addison-Wesley, 1997. [Jac92] I. Jacobson. Object-Oriented \nSoftware Engineer-ing. Addison-Wesley, 1992. [P+97] J. Peterson et al. Report on the Program-ming Language \nHaskell (Version 1.4), April 1997. http:/haskell.org/report/index.html. [RBPS91] J. Rumbaugh, M. Blaha, \nW. Premerlani, F. Eddy, and W. Lorensen. Object-Oriented Mod-eling and Design. Prentice-Hall, 1991. \n342 \n\t\t\t", "proc_id": "289423", "abstract": "", "authors": [{"name": "Dan Russell", "author_profile_id": "81100589270", "affiliation": "Kingston University", "person_id": "PP31094774", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/289423.289471", "year": "1998", "article_id": "289471", "conference": "ICFP", "title": "MAP: a functional analysis and design method", "url": "http://dl.acm.org/citation.cfm?id=289471"}