{"article_publication_date": "09-29-1998", "fulltext": "\n Frob--Functional Robotics Gary Shu Ling ling-gary@cs.yale.edu Yale Computer Science Department Graduate \nStudent 1 Introduction Frob, or Functional Robotics, is a domain-specific language embedded in Haskell \n[I] to control robotic systems. It pro-motes a style of programming largely independent of the underlying \nhardware. Frob is based on ideas originated in Fran [2], a reac-tive system for computer animation. Frob \nis not a simple re-application of Fran; it has unique characteristics: 1) real- time constraints, 2) \ntightly coupled feedback from the robots to the control engine, 3) a wide variety of external stimu-lus \nfrom many types of sensors, 4) possible noise from the sensors, and 5) requirements for robust behavior. \n 2 Continuous vs. discrete modeling Some values in the robotics domain are conceptually contin-uous, \nsuch as robot position or sonar readings. We model these values using behaviors, continuous functions \nof time (the Behavior type in Fran). This continuous view hides details such as the underlying sampling \nbehavior and allows the natural use of the continuous techniques commonly used in control systems. For \nexample, in case of sonar readings, this approach avoids the need to synchronize other sensors with each \nindividual reading. The run-time engine is free to choose its own sampling rate for the various sensors \nwithout complicating the controller. Interpolation is used to define values between sensor readings. \nContinuous behaviors are also used to model some robot controls. Suppose there are two behaviors, each \nrepresent-ing a different control output, one having a higher priority than the other. With a continuous \nrepresentation, the run-time engine can choose a higher sampling rate for the more importantant output \ncontrol. Continuous models allow the user to define robotic controllers at a higher level of abstrac-tion. \nThere are also values that cannot be modeled in a con-tinuous manner. For example, a signal indicating \nthe com-pletion of a task or a debugging message to be printed on the console happen at a discrete point \nin time; interpolating such a value to other times is meaningless. In this hybrid system, we model a \nrobot program using the following type in Haskell/Fran notation: type FrobProgram = (Behavior ContinuousInputs, \nEvent DiscreteInputs) -> (Behavior ContinuousOutputs, Event DiscreteOutputs) 3 Abstractions There are \ntwo levels of abstraction here. The lower one hides the hardware details while higher one adds support \nfor a concise and natural style of robot programming. When writing robot controller, it is intuitive \nto think in terms of single steps of activity. We have defined a monad which sequences primitive robot \naction steps and includes error handling. Users can write programs like the following: wallfollower = \ndo lookAround stepcatch (noRoomToMove, quit) approachWall adjustHeading followWall stepcatch (exteriorcorner, \nquit) Another abstraction defined in Frob (as well as Fran) is the direct support of differential equations. \nAs most con-trol systems are traditionally defined using set of differential equations, this allows users \nto write controllers directly from the equations without expanding the equations into the ac-tual loops \ntraditionally used to implement them. 4 Status Frob is based on the core of Fran with a number of adap-tions. \nThe current implementation is still preliminary but we have programmed a robot to perform simple tasks \nsuch as obstacle avoidance and wall following. Future work includes research into better user-level abstractions \nand improving the real-time performance of the run-time engine. Integrat-ing planning and artificial \nintelligence into Frob is also an open topic.  References [l] John Peterson, editor, Haskell Report \n1.4. [2] Conal Elliott and Paul Hudak, Ftlnctional Reactive An-imation. ICFP 97. 345 \n\t\t\t", "proc_id": "289423", "abstract": "", "authors": [{"name": "Gary Shu Ling", "author_profile_id": "81332512668", "affiliation": "Computer Science Department, Yale", "person_id": "P94169", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/289423.289475", "year": "1998", "article_id": "289475", "conference": "ICFP", "title": "Frob&#8212;functional robotics", "url": "http://dl.acm.org/citation.cfm?id=289475"}