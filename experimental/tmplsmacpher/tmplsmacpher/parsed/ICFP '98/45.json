{"article_publication_date": "09-29-1998", "fulltext": "\n Combining CFG and Recursive Functions to Get a New Language Chen Haiming Laboratory of Computer Science, \nInstitute of Softwxe, CAS, Beijing, China chm@lox.ios.ac.cn We propose a new funct~ional programming \nlanguag;e(FPL) which differs in some aspects from most well known FPI,s[l]. We descrihc the prohlmm domain. \nthe language. explain why we need it,. Motivation This work is origin&#38;d in our research on formal \nspec-ification acquisition and checking. In nur approach we use machine learning techniques to get the \nstructure of a speci- fication (called a concept,). and utilize recursive functions to express the semantics \nof specifications. Cnncepts are rep-resented as CFLs. We need a specification language which should be \nvery suitable for specifying and processing CFLs and recursive functions defined on CFLs. It seems that \nno existing FPL can serve our purposes very well. So WC made a new language which directly uses CFL as \ndata type. The new language The new language named FDL is designed for use in .1 specihcatian acquisition. \nHut it is also a general-purpose FPL. because the specifications it can express are not limit,ed to any \nspecial domain. It has usual basic types as well as unusual CFL types. Basic types and CFL types can \nhe components of CFL types. That is., CFG is used as rol?strnct for compound data types. Functions have \npattern mat,ching definitinns. where pat-terns correspond to product,inns. Data of CFL types are represented \njust as plain character strings. Structure recognit,ion and destruction are automat,-ically done hy the \nlangllage s processor. A general CFG parser[2] should be embedded in any implcmantation of the language. \nFDL is a dynamically typed language. for CFL types can not in general be st,atically checked. But in \npractice tshe possibility for dynamic type checking is very small according to our experience. In FDL \nfunctions map CFLs to CFL. so FDL is closely related to snme attribute grammar(AG)[3] languages. such \nas functional AG[4] languages, and higher order AG[5]. But it differs from any AG language in that the \ndomain of a function could have more than one CFLs. whereas any AG only has one CFL as its dnmain. Why \nnew language? The new language has following advantages: 1. Urcanse nf CFG s expressiveness. FDL is suitable \nfor exlbressing large and complex nhjects. For examples. programming languages can be specified by CFGs \nconcisely and conveuipnt,ly as is well known; Data with phrase struc-tures. such as recursive data structures. \ncan he represented by CFGs naturally. 2. Data of CFL types need not he represented in struc-tured forms. \nlnlt in plain string forms all the time. On the contrary. in nther FPLs user must have parser functions \nto create data s strnct,ures. Programs in FDL is rather small in size and simple in form. 3. CFG can \n1~ learned hy machine from a few samples[6]. This can hrlp nscrs to acquire definitions of complex objects. \nSo it is hoth suitable for the aim of specification acquisition and suitable fnr beginners to use the \nlanguage.  Sol FDL is more suitable than existing FPLs for at least the following tasks: 1. specification \nacquisition. 2. a power- ful language for beginners. FDL is easier to learn and use. and CFG is widely \nknown than concepts in FPLs. 3. lan-guage processing such as compiler construction; language converters. \nWe have developed some applications, including: pro-gramming language processors. formal diKerentiation \nof el-ementary fiinct,inns. music processing.  References [I] A.J.Field. P.G. Harrison. Functional Programming. \nAddisoll~Wcslny, 1988. [2] A. V. Ahn. ,J. D. Ullman. The theory of Parsing, Trans-lation. and Compiling. \nVolilme 1: parsing. Prentice-hall. Inc.. 1972. [3] Pierrr Lleransart et. al.. Attribute Grammars. LNCS323. \n1988. [4] Jukka Paakki. Attribute Grammar Paradigms -A High-Level Met,hodology in Language Implementation. \nACM Computing Surveys. Vol. 27. No. 2, June 1995. [5] H. Vngt. rt. al.. Higher Order Attrihute Grammars. \nPrnc. ACM SIGPLAN.89 cnnf. on PLDI. pp. 131-145. [6] Dnng Yunlnpi. An Interact,ive Learning Algorithm \nfor Acquisition of Cnncepts Represented as CFL. J. Com-put,. Sci. b: Technnl.. Vol. 13. No. 1. 1998. \n 351 \n\t\t\t", "proc_id": "289423", "abstract": "", "authors": [{"name": "Chen Haiming", "author_profile_id": "81444599897", "affiliation": "Laboratory of Computer Science, Institute of Software, CAS, Beijing, China", "person_id": "P44394", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/289423.289482", "year": "1998", "article_id": "289482", "conference": "ICFP", "title": "Combining CFG and recursive functions to get a new language", "url": "http://dl.acm.org/citation.cfm?id=289482"}