{"article_publication_date": "10-01-2007", "fulltext": "\n DeclarativeProgrammingfor Arti.cial IntelligenceApplications JohnW. Lloyd College of Engineering and \nComputer Science The Australian National University jwl@mail.rsise.anu.edu.au Abstract In this talk, \nI will consider some possible extensions to existing functional programming languages that would make \nthem more suitable for the important and growing class of arti.cial intelli\u00adgence applications. First, \nI will motivate the need for these lan\u00adguageextensions. ThenIwillgivesome technical detail about these \nextensions that provide the logic programming idioms, probabilis\u00adtic computation, and modal computation. \nSome examples will be given to illustrate these ideas which have been implemented in the Bach programming \nlanguage that is an extension of Haskell. Categories and Subject Descriptors D.3.3[Programming Lan\u00adguages]: \nLanguage Constructs and Features; I.2.4[Arti.cial In\u00adtelligence]: Knowledge RepresentationFormalisms \nand Methods General Terms Languages, Design Keywords Functional, Logic, Modal, Probabilistic, Programming \n1. Overview The currently dominant unifying paradigm for arti.cial intelligence is that of an agent (Huhns \nand Shehory 2007; Russell and Norvig 2002). Consider an agent situated in some environment that can receive \npercepts from the environment and can apply actions to the environment. Such an agent needs an appropriate \nmechanism to rationally select actions.Amajorinputforsucha mechanismisa (partial) model of the environment \nconsisting of some (local) state and a belief base. Consider now what beliefs might be useful for an \nagent to make an appropriate selection of an action. First, it is usual to have the connectives and quanti.ers \navailable in the form of a suitable logic forexpressing beliefs. HereIuse higher-order logic.Next,to \nselect an action, it is typically necessary for an agent to reason about the beliefs of other agents \nand about temporal properties of the envi\u00adronment. This motivates the need to use a modal logic that \nhas (at least) epistemicand temporal modalitiesto represent beliefs(Fagin et al. 1995; Gabbay et al. \n2003; Gergatsoulis 2001; Nguyen 2006) Furthermore, in any signi.cant application, an agent is likely \nto have to cope with uncertainty; thus some beliefs are likely to be probabilistic. This issue leads \ndirectly to the more general problem of integrating logic and probability,a problemof major importance \nin arti.cial intelligence that is currently attracting substantial in\u00adterest (Kersting and De Raedt 2007; \nLloyd and Ng 2007a; Milch Copyright is held by the author/owner(s). ICFP 07, October 1 3, 2007, Freiburg, \nGermany. ACM 978-1-59593-815-2/07/0010. et al. 2005; Milch and Russell 2007; Muggleton 1996; Richardson \nand Domingos 2006). Relatedworkinthe functional programming community on handling probabilities is contained \nin (Allison 2005; Parketal.2005;RamseyandPfeffer2002).Finally,notevery belief an agent will need during \nits lifetime can be known to the designers before deployment; hence some beliefs will have to be acquired \nby machine learning techniques during deployment (Cole et al. 2005; Lloyd 2003; Lloyd and Ng 2007b; Mitchell \n1997). A convenient syntactic form for beliefs that supports all these features is that of formulas of \nthe form D .x.((fx)= if (p1 x) then v1 else if (p2 x) then v2 . . . else if (pn x) then vn else v0), \nwhere f : s . t is a function, D is a (possibly empty) sequence of modalities, p1,...,pn are predicates \nthat can be modal, and v0,v1,...,vn are suitable values that could be probability den\u00adsities. Such a \nbelief is a de.nition for the function f in the con\u00adtext of the modal sequence D . This form includes \nas a special case Horn clause theories that are commonly used to represent beliefs in agent systems. \nIt is essentially a decision list (Rivest 1987) which is a convenient syntactic form for acquisition \nby machine learning techniques. As well as representing beliefs, it is necessary to reason about them. \nThe reasoning system considered here combines a theorem prover and an equational reasoning system. The \ntheorem prover isafairly conventional tableau theorem prover for modal higher\u00adorder logic similar to \nwhat is proposed in (Fitting 2002). The equa\u00adtional reasoning system is, in effect, a computational system \nthat signi.cantly extends existing declarative programming languages by addingfacilities for computing \nwith modalities. The proof com\u00adponent and the computational component are tightly integrated, in the \nsense that either can call the other. Furthermore, this synergy between the two is shown to make possible \nall kinds of interesting reasoning tasks. It turns out that, for agent applications, the most common \nreasoning task is a computational one, that of evaluating a function call. In this case, the theorem-prover \nplays a subsidiary role, usually that of performing some rather straightforward modal theorem-proving \ntasks. However, in other applications it can just as easily be the other way around with the computational \nsystem performing subsidiary equational reasoning tasks for the theorem prover. A comprehensive and detailed \naccount of the theoretical foundations of the knowledge representation and reasoning issues isgivenin \n(Lloyd 2007). Inow move on to implementation considerations. Starting from Haskell,to supportthefacilities \ndescribedabove,the followingex\u00adtensions to the Haskell computational model are needed: pattern matching \nwith function symbols and .-abstractions, redex selec\u00adtion inside the bodies of .-abstractions, support \nfor modal compu\u00adtation, and some theorem-proving support. Conceptually, the pro\u00adposed extensions are \nconsistent with the view that a program is an equational theory in modal, higher-order logic.A functional \npro\u00adgramming language with these extensions would admit the logic programming idioms, probabilistic computation, \nand modal com\u00adputation, and would provide a suitable platform for the develop\u00adment of arti.cial intelligence \napplications. Theseextensionshavebeen implementedinthe declarativepro\u00adgramming language Bach which is \nparticularly well-suited for arti\u00ad.cial intelligence applications. (Earlier functional logic languages \nthat did not contain probabilistic or modalfacilities include Curry (Hanus ed.) and Escher (Lloyd 1999).) \nBach is more expressive than Haskell,but this comesata cost. Some common optimisation techniques developed \nfor ef.cient compilation of Haskell code (see (Peyton Jones 1987) for a survey) apparently cannot be \nused in the implementation of Bach. Assuming that the functional program\u00adming community .nds suf.cient \nmerit in some of the proposed ex\u00adtensions,the challengethenwouldbeto.ndhighlyef.cientimple\u00admentations \nof them. Acknowledgments The researchunderlying this talk has greatly bene.tted through a collaborationovera \nnumberof years withKee SiongNg. References L. Allison. Models for machine learning and data mining in \nfunctional programming. Journal of Functional Programming, 15(1):15 32, 2005. J.J. Cole, M.J. Gray, J.W. \nLloyd, and K. S. Ng. Personalisation for user agents. InF. Dignum and et al, editors, Fourth International \nConference on Autonomous Agents and Multiagent Systems (AAMAS 05), pages 603 610, 2005. R.Fagin, J.Y. \nHalpern,Y. Moses, and M.Y.Vardi. Reasoning about Knowl\u00adedge. MIT Press, 1995. M. Fitting. Types,Tableaus, \nandG\u00a8  odel s God. Kluwer Academic Publish\u00aders, 2002. D.M. Gabbay, A. Kurucz, F. Wolter, and M. Zakharyaschev. \nMany-Dimensional Modal Logics: Theoryand Applications. Studies in Logic and TheFoundationsof Mathematics,Volume \n148. Elsevier, 2003. M. Gergatsoulis. Temporal and modal logic programming languages. In A. Kent and \nJ.G. Williams, editors, Encyclopedia of Microcomputers, volume 27, supplement 6, pages 393 408. Marcel \nDekker, 2001. M. Hanus (ed.). Curry: An integrated functional logic language. http://www.informatik.uni-kiel.de/~curry. \n M. Huhns and O. Shehory, editors. The Sixth InternationalJoint Confer\u00adence on Autonomous Agents and \nMultiagent Systems (AAMAS 2007), Honolulu,Hawaii, 2007.ACM Press.  K.Kersting and L. De Raedt. Bayesian \nlogic programming: Theory and tool. In L. Getoor and B. Taskar, editors, Introduction to Statistical \nRelational Learning. MIT Press, 2007. J.W. Lloyd. Programming in an integrated functional and logic language. \nJournal of Functional and Logic Programming, 1999(3), March 1999. J.W. Lloyd. Logic for Learning. CognitiveTechnologies. \nSpringer, 2003. J.W. Lloyd. Knowledge representation and reasoning in modal higher-order logic. http://users.rsise.anu.edu.au/~jwl, \n2007. J.W. Lloyd and K. S. Ng. Probabilistic reasoning in a classical logic. http://users.rsise.anu.edu.au/~jwl, \n2007a. J.W. Lloyd and K. S. Ng. Learning modal theories. In S. Muggleton, R. Otero, and A.Tamaddoni-Nezhad, \neditors, Proceedings of the 16th International Conference on Inductive Logic Programming (ILP 2006), \npages 320 334. Springer, LNAI 4455, 2007b. B. Milch and S. Russell. First-order probabilistic languages: \nInto the un\u00adknown. In S. Muggleton, R. Otero, and A.Tamaddoni-Nezhad, editors,  Proceedings of the 16th \nInternational Conference on Inductive Logic Programming, 2007. B. Milch, B. Marthi, S. Russell, D. Sontag, \nD.L. Ong, and A. Kolobov. BLOG: Probabilistic models with unknown objects. In L.P. Kaelbling and A. Saf.otti, \neditors, Proceedings of the 19th International Joint Conference on Arti.cial Intelligence, pages 1352 \n1359, 2005. T.M. Mitchell. Machine Learning. McGraw-Hill, 1997. S. Muggleton. Stochastic logic programs. \nIn L. De Raedt, editor, Advances in Inductive Logic Programming, pages 254 264. IOS Press, 1996.  L.A. \nNguyen. Multimodal logic programming. Theoretical Computer Science, 360:247 288, 2006. S.Park,F. Pfenning, \nand S. Thrun. A probabilistic language based upon sampling functions. In Proceedings of the 32nd ACM \nSymposium on Principles of Programming Languages, pages 171 182, 2005. S.L. Peyton Jones. The Implementation \nof Functional Programming Lan\u00adguages. Prentice-Hall, 1987. N. Ramsey and A. Pfeffer. Stochastic lambda \ncalculus and monads of probability distributions. In Proceedings of the 29thACM Symposium on Principles \nof Programming Languages, pages 154 165, 2002. M. Richardson andP. Domingos. Markov logic networks. \nMachine Learn\u00ading, 62:107 136, 2006. R. Rivest. Learning decision lists. Machine Learning, 2(3):229 \n246, 1987. S. Russell and P. Norvig. Arti.cial Intelligence: A Modern Approach. Prentice-Hall, second \nedition, 2002.  John Lloydgraduated with a PhD in Mathematics from The Aus\u00adtralian National University \nin 1973. He lectured .rst in Mathemat\u00adics and then Computer Science at The University of Melbourne before \nbecoming a Professor of Computer Science at University of Bristol in 1987. He then moved back to The \nAustralian National University in 1998, where he is Head of the Computer Sciences Laboratory. His research \ninterests are in computational logic, including agents, symbolic machine learning, and declarative programming \nlanguages. He is the author of Foundations of Logic Program\u00adming , the main reference on theoretical \nissues in logic program\u00adming, and three other books. His interest in designing declar\u00adative programming \nlanguages began in the early 1990s with G\u00a8 odel,a typed logic programming language with declarative meta\u00adprogrammingfacilities. \nThiswas later followedby Escher which was an extension of Haskell that provided the logic programming \nidioms. He is currently working on applying Bach to several chal\u00adlenging arti.cial intelligence applications. \n \n\t\t\t", "proc_id": "1291151", "abstract": "<p>In this talk, I will consider some possible extensions to existing functional programming languages that would make them more suitable for the important and growing class of artificial intelligence applications. First, I will motivate the need for these language extensions. Then I will give some technical detail about these extensions that provide the logic programming idioms, probabilistic computation, and modal computation. Some examples will be given to illustrate these ideas which have been implemented in the Bach programming language that is an extension of Haskell.</p>", "authors": [{"name": "John W. Lloyd", "author_profile_id": "81406596016", "affiliation": "The Australian National University, Canberra, UNK, Australia", "person_id": "PP39023960", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1291151.1291152", "year": "2007", "article_id": "1291152", "conference": "ICFP", "title": "Declarative programming for artificial intelligence applications", "url": "http://dl.acm.org/citation.cfm?id=1291152"}