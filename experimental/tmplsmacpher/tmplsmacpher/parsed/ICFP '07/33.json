{"article_publication_date": "10-01-2007", "fulltext": "\n Invited Talk Subtyping and Intersection Types Revisited Frank Pfenning Department of Computer Science \nCarnegie Mellon University fp@cs.cmu.edu Abstract Church s system of simple types has proven to be remarkably \nro\u00adbust: call-by-name, call-by-need, and call-by-value languages, with or without effects, and even logical \nframeworks can be based on the same typing rules. When type systems become more expres\u00adsive, this unity \nfractures. An early example is the value restriction for parametric polymorphism which is necessary for \nML but not Haskell;alatermanifestationisthelackof distributivityof function types over intersections \nin call-by-value languages with effects. In this talk we reexamine the logical justi.cation for systems \nof subtyping and intersection types and thenexplore the consequences in two different settings: logical \nframeworks and functional pro\u00adgramming. In logical frameworks functions are pure and their de.nitions \nobservable, but complications could arise from the presence of dependent types. We show that this is \nnot the case, and that we can obtain soundness and completeness theorems for a certain axiomatization \nof subtyping. We also sketch a connection to the type-theoretic notion of proof irrelevance. In functional \nprogramming we investigate how the encapsula\u00adtion of effects in monads interacts with subtyping and intersection \ntypes, providing an updated analysis of the value restriction and related phenomena (Davies and Pfenning \n2000). While at present this studyisfar from complete, we believe that its originin purely logical notions \nwill give rise to a uniform theory that can easily be adapted to speci.c languages and their operational \ninterpretations. Categories and Subject Descriptors D.3.1[Programming Lan-guages]:Formal De.nitions and \nTheory; F.3.3[Logics and Mean\u00adings of Programs]:Studiesof Program Constructs Typestructure; F.4.1[Mathematical \nLogic and Formal Languages]: Mathematical Logic General Terms Languages, Theory,Veri.cation Acknowledgments \nThe material in this invited talk is based on joint work with Rowan Davies (Pfenning and Davies 2001), \nWilliam Lovas (Lovas and Pfenning 2007), and Noam Zeilberger (Zeilberger 2007). Copyright is held by \nthe author/owner(s). ICFP 07, October 1 3, 2007, Freiburg, Germany. ACM 978-1-59593-815-2/07/0010. Bio \nFrank Pfenning received his Ph.D. in Mathematics in 1987 from Carnegie Mellon University and subsequently \njoined the Depart\u00adment of Computer Science at CMU as researchfaculty where he became Professor in 2002 \nand Director of Graduate Programs in 2004. He has spent time as visiting scientist at the Max-Planck-Institute \nfor Computer Science in Saarbr\u00a8ucken, as Alexander-von-Humboldt Fellow at the Technical University Darmstadt, \nand as Visiting Professor at Ecole Polytechnique and INRIA-Futurs. He \u00b4has advised 19 completed Ph.D. \ntheses and won the Herbert A. Si\u00admon Award for Teaching Excellence in the School of Computer Science \nin 2002. He has written extensive lecture notes on a va\u00adriety of topics, including computation and deduction, \nconstructive logic, linear logic, automated theorem proving, and logic program\u00adming.He servedastrustee,vice \npresident,and presidentofCADE, Inc., the governing body of the International Conference on Au\u00adtomated \nDeduction and on advisory boards for INRIA, the Max\u00adPlanck-Institute for Computer Science, and the School \nof Computer Science at Seoul National University. He has chaired the PPDP and CADE conferences and several \nprogram committees, includ\u00ading GPCE,RTA, CADE, and LICS. His research interests include programming languages, \nlogic and type theory, logical frameworks, automated deduction, and, most recently, logical methods in \nsecurity. He has contributed to the development of re.nement types and dependent types, the oper\u00adational \ninterpretation of modal .-calculi for staged and distributed computation, and the theory and practice \nof higher-order logic pro\u00adgramming. He has been a codeveloper of the Twelf meta-logical framework,whichhasbeenusedfora \nnumberof formalizationand veri.cation efforts in programming languages, and participated in the design \nof its linear (LLF) and concurrent (CLF) extensions. References Rowan Davies and Frank Pfenning. Intersection \ntypes and computational effects. In P. Wadler, editor, Proceedings of the Fifth International Conference \non Functional Programming (ICFP 00), pages 198 208, Montreal, Canada, September 2000.ACM Press. William \nLovas and Frank Pfenning. A bidirectional re.nement type sys\u00adtem for LF. In B. Pientka and C. Sch\u00a8 urmann, \neditors, Proceedings of the Second International Workshop on Logical Frameworks and Meta-Languages: Theory \nand Practice, pages 11 25, Bremen, Germany, July 2007. Frank Pfenning and Rowan Davies. Ajudgmental reconstruction \nof modal logic. Mathematical Structures in Computer Science,11:511 540, 2001. Noam Zeilberger. On the \nunity of duality. Annals of Pure and Applied Logic, 2007. To appear in a special issue on Classical Logic \nand Computation. \n\t\t\t", "proc_id": "1291151", "abstract": "<p>Church's system of simple types has proven to be remarkably robust: call-by-name, call-by-need, and call-by-value languages, with or without effects, and even logical frameworks can be based on the same typing rules. When type systems become more expressive, this unity fractures. An early example is the value restriction for parametric polymorphism which is necessary for ML but not Haskell; a later manifestation is the lack of distributivity of function types over intersections in call-by-value languages with effects.</p> <p>In this talk we reexamine the logical justification for systems of subtyping and intersection types and then explore the consequences in two different settings: logical frameworks and functional programming.</p> <p>In logical frameworks functions are pure and their definitions observable, but complications could arise from the presence of dependent types. We show that this is not the case, and that we can obtain soundness and completeness theorems for a certain axiomatization of subtyping. We also sketch a connection to the type-theoretic notion of proof irrelevance.</p> <p>In functional programming we investigate how the encapsulation of effects in monads interacts with subtyping and intersection types, providing an updated analysis of the value restriction and related phenomena. While at present this study is far from complete, we believe that its origin in purely logical notions will give rise to a uniform theory that can easily be adapted to specific languages and their operational interpretations.</p>", "authors": [{"name": "Frank Pfenning", "author_profile_id": "81100157780", "affiliation": "Carnegie Mellon University, Pittsburgh, PA", "person_id": "PP39030152", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1291151.1291153", "year": "2007", "article_id": "1291153", "conference": "ICFP", "title": "Subtyping and intersection types revisited", "url": "http://dl.acm.org/citation.cfm?id=1291153"}