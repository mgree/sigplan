{"article_publication_date": "01-01-1978", "fulltext": "\n Permission to make digital or hard copies of part or all of this work or personal or classroom use is \ngranted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, \nto post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.&#38;#169; \n1978 ACM 0-12345-678-9 $5.00 Conference Record OZ the FIZtn AnnuaL ACM Symposium on Prlnclples or Programming \nLanguage AUTOMATIC DISCOVERY OF LINEAR RESTRAINTS AMONGVARIABLES OF A PROGRAM Patrick Cousot* and Nicolas \nHalbwachs** Laboratoire d Informatique, U.S.M.G., BP. 53 38041 Grenoble c6dex, France 1. INTRODUCTION \nThe model of abstract interpretation of programs developed by Cousot[1976], Cousot [1977] is applied \nto the static determination of linear equality or inequality relations among variables of programs. For \nexample, consider the following sorting procedure [Knuth[1973], p.107) : procedure BUBBLESORT[integer \nva2ue N; integer arra~[l:N] K]; begi~ integer B,J,T; B:=N; {1} while B21 do {2} J:=l; T:=O: {3} white \nJs(B-11 do {4} if KIJ]>KIJ+I] then {5} EXCHANGEIJ,J+I); {no side effects on N,B,J,T} {6} T:=J,{7} ff; \n{B} J:=J+ l; {9} {10} :$T=o then return ~i ; {11} B:=T;{12} {13} ~:$ , Without user provided inductive \nassertions nor human interaction we have automatically determined [in 1.582 seconds of C.P.U. time) that \nthe following restraints must hold among the variables of the above procedure: {1} : B=N ; I<B<N{2} {3} \n: I<BSN, J=l, T=O {4}, {5}, {6} : B<N, T>O, T+I<J, J+ l<B {7} : B<N, J> l, J+I<B, J=T {8] : B<N, J+I<B, \nJ> l, T>o, TsJ {9} : B<N, J<Ej, J>2, T>O, T+I<J [10},[11} , FJ<N, J<FJ, T>o, T+I<J, B<J+I {12} : JsN, \nT20, T+IsJ, T=5 {13} : B<N, B<l * Attach&#38; de Recherche au C.N.R.S. , Laboratoire Associ6 n07 ** Allocataire \nde Recherche O.G.R.S.T. This work was supported by C.N.R.S. under grant ATP-Informatique 03119. A certain \nnumber of classical data flow analysis techniques are included in or generalized by the determination \nof linear equality relations among program variables. For example constant propagation can be understood \nas the discovery of very simple linear equality relations among variables [such as X=1, Y=51. However \nthe resolution of the more general problem of determining linear equality relations among variables allows \nthe discovery of symbolic constants [such as X=N, Y=5*N+I). The same way, common subexpressions can be \nrecognized which are not formally identical but are semanti\u00adcally equivalent because of the relationships \namong variables. Also the loop invariant computations as well as loop induction variables [modified inside \nthe loop by the same loop invariant quantity] can be determined on a basis which is not purely syntactical \n. The problem of discovering linear equality relations is in fact a particular case of the one of discovering \nlinear inequality relations among the program variables. The main use of these inequality relationships \nis to determine at compile time whether the value of an expression is within a specified numeric or symbolic \nsubrange of the integers or reals. This includes compile time overflow, integer subrange and array bound \nchecking In contrast to Suzuki-Ishihata[1977] we do not simply try to verify the legality assertions \n[such as verifying that array subscripts are within the declared range) but inStQad we try to discover \nthe assertions [of linear type] that can be deduced from the semantics of the program. The advantage \nis that we can often discover relations which are never stated explicitly in the program. For example, \nwe can discover that an integer variable lies in a subrange of its declared range or that two references \nAII] and A[J] to two elements of the same array refer to different storage locations [since e.g. 12J+I) \nor that some piece of code is dead. The problem of determining equality relation\u00adships between a linear \ncombination of the variables of the program and a constant was solved by Karr [1976] . His approach was \nbased on Wepjbreit[1975] s algorithm which requires that the properties to be discovered form a lattice \nevery strictly increasing chain of which is of finite length. This assumptiu is not valid when considering \ninequality relation\u00adships [because of chains such as [x=11, [I<xS2), ..., (Isxsn),. ..). 84 The model \nof Cousot [1977] is general enough to cope with this problem and we briefly recall it in section 2 as \nformulated in Cousot [1976]. In sectim 3 we study formal representations for the particular type of assertions \nthat we consider. In section 4 we describe the linear restraints transformer corre~ pending to elementary \ninstructions of the language. The algorithm performing the global analysis of programs is presented in \nsection 5 by means of simple examples. Section 6 gives more convincing examples and Section 7 discusses \nthe experimental implementation that has been realized. 2. APPROXIMATEANALYSIS OF PROGRAMPROPERTIES, \nCaus,ot [1976]. For purposes of exposition, a sequential program will be represented by a connected \nfinite flowchart with one entry node and assignment, test, junction and exit nodes. The evaluations of \nthe right-hand side of an assignment and of the boolean expression in a test node are assumed not to \naffect the values of any variables. Thus all side-effect phenomena must be modeled as assignment statements. \nThe junction nodes contain no computations and represent the merge of program execution paths. The analysis \nof a program consists in attaching an assertion Pi (VI, ..., V ) to each arc i of the program. These \npredicat~s on the variables VI,.. .,Vn are not necessarily of the most general form but instead are designed \nto model a specific aspect of the semantic properties of the program. The assertion on the entry arc \nto the program represents what is known about the variables at the start of execution. For each other \ntype of program node a transformation specifies the assertion associated with the output arc(s) of the \nnode in terms of the assertions on the input arc[s] to the node and where relevant the content of the \nnode. Hence we have established a system of equations between the local assertions which can be solved \nby successive approximations [Cousot [1977] ]. Starting from no information on each arc, this resolution \nconsists in propagating the entry assertion around the program graph by application of the transforma\u00adtion \ndescribed for each type of node until stabili\u00adzation. All possible paths are followed pseudo\u00adparallely \nwith synchronization on junction nodes. It is assumed that each cycle in the program graph contains a \nspecially marked junction node which is called a loop junction node. In order to ensure stabilization \nthe transformation for a loop junctim node will be an approximation of the transformation for ordinary \njunction nodes. More precisely let P. ., . . . . Pimj be the assertions associated with 11 J the input \narcs of a junction node at step j. Let Qi be the assertion associated with the output arc ., of this \nnode. Then Qj = f(P. ., .... P. ). For 11J lmj a loop junction node we have Qj = Q.~-1 Vj f(Pi,j, -.-, \nPimj) where the tiiu e?zing operation V. performed at step j is such that {Q VjP=>Q} and {Q VjP*P} and \nfor any chain {PO=> PI=>.,, =~P. =>,,,} the chain QO=PO, . . . . ~j=Qj_lVjpjJ . . . Ql=QOvlpl> is not \nan infinite strictly increasing chain. In the examples we shall use the algorithm described loosely above \nand in more detail in Cousot[1976]. 3. FORMALREPRESENTATIONSOF LINEAR RESTRAINTS AMONG VARIABLES OF A \nPROGRAM. 3.1. Linear system of a convex polyhedron. Letxl, . . . . Xn be the variables of the program. \nFor simplicity we assume that the values of the variables belong to the set I? of reals. The set of solutions \nto a system of linear equations {~~=l[a!xi)=bj : j=l..m} (where a!, bj~~], if such solutions exist, \nis a linear varie>y of I?n . A linear variety of dimension n-1 is an hyperpzane. The set of solutions \nto a linear inequality x~=l (axl)sb is a ebseci ha2&#38;spaee of Rn. For s~mplicity, strict inequalities \nare not considered, By Linear restraint we mean either a linear Bquality or a linear inequality. In \nthe formal reasoning we often consider that an equation can be viewed as two opposite inequalities. \nA subset C of R is said to be convex if and only if { v xl, X26C, VA6[ 0,1], Axl+(l-A)x2e C}. For example \nlinear varieties and half-spaces are convex. The intersection of two convex sets is convex, but the union \nof two convex sets is not necessarily convex. The set of solutions to a finite system of line= inequalities \ncan be interpreted geometrically as the closed convex polyhedron of IF/ defined by the intersection of \nthe closed halfspaces corresponding to each inequality. 3.2. The frame of a convex polyhedron, weyl [1950], \nKlee[1959], Charnes[1953]. Let Vl, .... Vp be vectors in I?n . A vector of the form ~~.l(V.Vi] where \nfor each i=l ..p we have V, ~ is calle~ a zinea~ ~ombination of the V.. T/ie set of all linear combinations \nof the V. islthe linear vapiety generated by the V.. A basis of a linear variety L is a minimal setlof \nvectors generating L. A vector of the form Z~.l[U.Vi) where for each i=l..p we have u.c~+ = {PcF? : u20} \nis called a positive eombina~ion of the Vi. The set of all positive combinations of the Vi is the eoniea2 \nhuZ of the V.. A vec%or of the form X~=l(AiVi) where for each i=l..p we have ~. <m+ with Z?~=l[x.)=l \nis called a convex eombinati&#38;z of the vi. Thelset of all convex combinations of the V i is the convex \nhull of the V.. A ve~~em of a polyhedron P is a point x of P which is not a convex combination of other \npoints of P: {(x=Z~=qAixi) and [Vi=l. .p, xicP and Ai20) and I~=l[li)=l} implies {Vi=l. .p, [ki=O or \nXi=xl}. A ray of a polyhedron P is a vector r such that there exists an half-line par~llel to r and entirely \nincluded in P : {VXCP, VUelR , x+~rcP}. +Two rays r and r are equal if and only if {]ue~ : r=Ur }. A \nray of a polyhedron P is called an exkreme ray if and only if it is noi. a positive combination of other \nrays rl, .... rfl of p: {Vj= 1. .q, (u.=01 or (r.=r)}. Intuitively, a ray (extreme ray; of a pol~hedron \nis a point (vertex) translated to infinity. 85 A Zin.e of a polyhedron P is a vector d such that both \nd and -d are rays of P: {VX,P, d~,lR, ~+lldcp}. A polyhedron which contains at least one line is called \na e.g2inda~. The linear variety generated by all the lines of a cylinder is the greatest linear variety \nincluded in the cylinder. A polyhedron that contains no line has only a finite number of vertices and \nof extreme rays. A bounded poLyhedrWz has neither lines nor rays. Each point of a bounded polyhedron \nis a convex com\u00adbination of the vertices of the polyhedron so that a bounded polyhedron is the convex-hull \nof its vertices. Each point x of a polyhedron P which is not a cylinder can be expressed as the sum of \na convex combination of the vertices Sl, ,.., so} ofPand of a positive combination of the extreme rays \n{r,, .... rp} ofP: :f=l[Ai)=l  la,, .,., Aflc[o,ll, ;Lll, . . . UPCIR+ Let L be the greatest linear \nvariety included in a cylinder P. Let L be a linear variety orthogonal to L. Then the intersection of \nL with P is a convex polyhedron which contains no line and which is called a section of P. Each point \nof a cylinder can be expressed as the sum of a convex combination of the vertices of a section of P, \na positive combination of the extreme rays of this section and a linear combination of the vectors of \na basis of the greatest linear variety included in P. By misuse of words the vertices and rays of a cylinder \nwill be the vertices and rays of a section of that cylinder. A closed convex polyhedron P can be characterized \nby three sets S = {sl, .... so}, R = {rl, .... ro], D={d], . . . . dd}of vectors of R called the j%mme \n of the polyhedron as follows: {X6P}+>{+A,, . . . . +[o,l], ill,, . . . . pnel?+, 3V1, . . ..va<m : \nZ:=; (ai)=l and x =x ?~=q ;aisi) + Z:=q (lJjrj) + Z~=l(vkdk)}. We have two equivalent representations \nof a closed convex polyhedron either as the set of solu tions of its system of linear restraints or as \nthe convex hull of its frame. Ezamp2e. The polyhedron defined by the following system of restraints: \n{x1~2, xz~ l, X1+2X226, X1 -2x22-6} is spanned by the following frame [see the diagram] vertices:  d:o:pl \n;<(3 r2= extreme rays: o 1 no line, 2 x ..,,..4 2 ~fi 1 1* End of example. o 24 X1 Before looking \nat the problem of conversion bet\u00adween these representations we need some definitions. A j%ee of a polyhedron \nP is a convex polyhedron FsP such that if a point x lies in F then each segment included in P and containing \nx is included in F: {xcF, p,qcP, 1<[0,1] and x=Ap+(l-A)q} => {pEF and qeF}. The a%nensicm of a polyhedron \nP is the dimension of the least linear variety containing P. A face of dimension k is called a k-face. \nAn edge is a l-face. The vertices of a polyhedron containing no line arenits O faces Jthus a cylinder \nhas no O-face]. Let Zi=l [aix ) s b be a linear inequality defining the polyhedron P. Then if the intersection \nof the hyperplane defined by H = .. {x : ~~=q(aixll=bl} with P is not empty, it is a face of P. We say \nthat a point s saturates the inequality Z;=l [aixl) s bi if and only if X~=q [aisil = bi. We say that \nthe ray r satu~ates this inequality if and only if X~=l[airl)=O. Let 6 be the dimension of the greatest \nlinear variety included in the polyhedron P. Two vertices are said to be cz~aeent iff they lie on the \nsame edge (i.e. if 6*O we mean the edge of the section). It follows that the number of inequalities saturated \nat the same time by two adjacent vertices is at least n-&#38;1. Two extreme rays are said to be czu?jaeent \niff they belong to the same 2-face. Therefore they saturate at least n-~-2 inequalities simultaneously. \nFinally, a vertex s and a ray r are adjacent iff s lies on an infinite edge which is parallel to r. Therefore \ns must satur~te all the inequalities satured by r. 3.3. Conversions between the representations of a \npolyhedron by a system of linear restraints and by a frame. Some operations that we have to perform on \nclosed convex polyhedra are easy when these polyhedra are represented by systems of linear restraints \nwhile others are more simple when the frame representation is used. Hence we must be able to make conversions \nfrom one representation to the other. 3.3.1. Conversion from the frame to the linear restraints representation. \nThis conversion consists in finding a system of restraints for the convex hull of the elements [points, \nrays, lines] of a frame. This conversion is followed by a simplification of the system of restraints. \n3.3.1.1. Convex-hull of a finite frame. Let S={s], . . . . so],R={rl, . . ..rP}. O={dl, . . ..d6} be \nthe frame of a non-empty polyhedron (so that S#O). The points x of this polyhedron are characterized \nby the existence ofkl, .... kd, pl, .. ..po. vl, .... V <I? such that: 6 -O<ai<l for i=l, . . ..o -+=4[Xil \n=1 -OS~j for j=l, ... P 6 X=l :=l(A.S. + 1P (U, r.) + Zk=l 11 J=l J J Vkdk) 86 Hence this polyhedron \nis characterized by a system The first approximation P1={sI} is defined by the n+rJ+p+~ of linear restraints \nin 3? upon the variables system of restraints [xl=l, X2=-I, X3=O). The [1=1 ..n), ki(i=l. .o), Vj [j=l. \n.D), vk[k=l. .dl. second approximation P2 is the convex-hull of PI 1 Eliminating the Ai,uj,vk we get \na system of linear and {s2] that is [OSkSl, X1-2X=-I, X2+2X=1, X3=OI. restraints in lRn . This elimination \ncan always be Eliminating A we get (X3=0, X1+X2=0, -ls.lsl, done by the projection operation used in \nKuhn[1956]. -l<x <l]. P3 is obtained by adjoining the ray Let us represent the system of m inequalities \nby [0,0,1) to P2 that is (u>O, X1+X2=0, -IsxIsI, AX<B where A is a mxn real matrix and B a m-vector. \n-Isx <1, X3-U=O). Eliminating p we get [X1+X3=0, In order to eliminate the variable Xc we project -1<.1<1, \n-l<x <l, x3xl). The last approximation Pq according to the column c upon AXSB in order to get is the \nconvex-hull of P3 and the line [1,1,01 that a simplified projected system defined as follows: is [x1+x2-2v=0, \n-lsxl-vsl, -lsX2-vsl, X3ZCI). For each row A1 such A~=O, the restraint AIXSB1 Eliminating v we get the \nfinal solution [X3>0, is part of the projected system. 11 -2<X1-X*S2). For each two rows A and A z \nsuch that End of example.   A~l .A~2<othe restraint [lA~ll.A12+[A~21.A11]x< 3.3.1.2. Simplification \nof a system of linear lA~l\\.B12+ lA~21.B1 is part of the projected inequalities. system. It is often \nthe case that projections lead to The projected system contains only zeros in the projected systems of \nrestraints containing a great column c,hence it is independent of Xc. number of irrelevant restraints \nwhich can be elimi\u00ad nated without changing the polyhedron representedExample: Eliminating X in the system \nby the system of restraints. For the sake of efficiency these irrelevant restraints must be ex\u00adcluded. \nKnowing a frame of the polyhedron, the corresponding system of linear inequalities can be simplified \naccording to the following remarks due to Lanery[1966]: -An inequality which is never saturated by a \nvertex of the frame is irrelevant. End of examp2e -An inequality which is saturated by all vertices \nand all rays of the frame represents an equality. The convex-hull of the frame S, R, O is computed All \nthe equalities are found in that way. by successive approximations Pl, P2, . . . . P-Let Cl : [alxsbl) \nand C2 : [a2xsb21 be two o+p+~ as follows: inequations of the system of restraints which are -Pl is the \npoint sl so that the corresponding not equations. Let G be the quasi-ordering defined by {CIGC2} e>{{Vs~S, \n(als=bl) > system of restraints is (X=51). Then for each [azs=bzl} and {VreR, [alr=O) ~ [a2r=O)}}. Hence \ni=2. .0, Pi is the convex-hull of P. and the point 1 1 C1EC2 means that C2 is saturated by any vertex \nSi. Therefom{xcPi} if and only if {jxlsPi_l, or ray saturating Cl. If C,ECz but not C2EClthen iac[o,l] \n: x=Axl+[l-A)si}. If AXSB is the system of Cl is irrelevant. If CIGC2 and C2ECI then one restraints describing \nP it can be shown that this i ~ and only one of the inequations is irrelevant so is equivalent to {]lcIR \n: OSASI and AX+AIAsi-Bl<Asi} that one of them can be excluded. Then by a projection according to the \ncolumn of 1, Applying these results to a system of restraints we k can be eliminated to get a system \nof restraints oLtain a minimal system of restraints (with no of Pi. irrelevant inequality) corresponding \nto the same polyhedron. -For each j=o+l, . . ..o+p. P: is obtained by , ad-J joining the ray r. to P.~-l \nIfP. correspondsJ U J-l 3.4. Conversion from the linear restraints to the to AX<X, this consists in \neliminating v in [u>O, frame representation of the polyhedron AX-pAr. <B]. J IS -For each k=cr+p+l, \n. . ..o+p+d. Pk is built from Pk_l Based on the pivot method of linear programming, numerous algorithms \nhave been designed to find all by adjonction of the line d k-[a+pl vertices of a convex polyhedron [Balineki[1961], \nIf k-1 s described by AXSB, this consists in eliminating v Lanery[1966], Manas-Nedoma[1968], Mattheis[1973], \nin (AX-vAd <B] . Finally, P is the Oyer-Proll[1977] 1. We shall give a brief descrip\u00ad k-[cr p)-o+p+13 \ntion of Lanery s method which is general enough to convex-hull of S, R and O. find a frame (vertices, \nextreme rays, lines) of a . The frame of a polyhedron in l? is given by convex polyhedron. We first recall \nsome elements of linear programming (Simonnard [1973]]. ::[{)(i)l R = Ic)l =IC)[ 87 3.4.1. Basic concepts \nof linear programming A system of linear inequalities: [3.4.1.1] (Z~=fl [a~xil<bj : j=l..m) can be written \nin the equivalent form: j=l ..ml. ( Zni=l(a~ xi)+YJ bj, yj20 : Hence a system of restraints can be written \nin standard form: 13.4.1.2] AX=B, XE20 where A is a (n+m)xm real matrix, B is an m-vector E={n+l, . . \n. . n+m}, F={ 1, . . ..n}. The variables {xi : icF} are the initial var{ables, the {xi : i<E} are the \n.sLaek variables.  A basis of the system [3.4.1.2] is a non singular mxm submatrix A of A. The system \ncan be written in I canonicat form with respect to the basis Ay: L [3.4.1.3] X1+(A~ AJ)XJ = A~lB, XE20 \nwhere J={l, ... ,n+m}-10 The variables xl such that ~-cl are said to be in basis. The basis A. is feasible \n1\u00adif and only if [A~lB]E>O. Two feasible bases AI and AJ are said to be a~aeent if and only if the cardinal \nof the set InJ is equal to m-l. If two bases are adjacent the classical pivot operation transforms the \nsystem written in canonical form with respect to AT into an equivalent system in canoni\u00ad cal form with \nrespect to A The art{ficia2 basis J\u00admethod which is the initialization step of the s-impzez method transforms \nthe system of restraints [3.4.1.2] into an equivalent system in canonical form [3.4.1.3] with respect \nto a feasible basis of [3.4,1.2] whenever such a basis exists. 3.4.2. Principles of Lanery s method. \nThe graph of the adjacency relation on the set {AI} of feasible bases containing all initial variables \n[i.e. such that FcI] is connected. Hence given such a basis we can by successive pivoting operations \nand an exhaustive traversal technique find all feasible basis of a given system of res\u00adtraints. -If AT \nis a feasible basis such that FcI then the F vectorl(A~lB) corresponds to a vertex of the convex polyhedron \ndefined by the system of restraints. To each vertex of a polyhedron containing no line corresponds at \nleast one feasible basis. If two vertices are adjacent then there are two adjacent feasible bases respectively \ncorresponding to them. -Let [AX=B, XE201 be the canonical form of a syst~m of restraints with respect \nto the feasible basis A I containing all initial variables. Then Lanery shows that if a column i c[E-1] \nsatisfies the condition: o [3.4.2.1] {V.jc[l,m], {Aj>O} ~ {Vk6[EOI], Aj=O}} % K then the vector r~Rn \ndefined by rl=-A~~ where is[l,n] and j is the unique index such that A$ =1 o is an extreme ray of the \npolyhedron. Applying this result to each column i. verifying [3.4.2.1] in each feasible basis corresponding \nto a vertex s, we find all extreme rays adjacent to s. Since each extreme ray of a polyhedron that contains \nno line is adja\u00adcent to a vertex we can find all extreme rays of such a polyhedron. -For polyhedra containing \na line there is no feasible bases containing all initial variables. Hence let [AX=B, XE~O) be the canonical \nform with respect to any feasible basis A Let iOc[F-ll be I\u00ada column satisfying the condition: [3.4.2.2] \n{Vjc[ l,m], VkeI, {A! zO}= {A~=O or keF} 10 Let d[io)be the vector of ~ the i-th component of which is \ndefined by: = ~~ i.io d[ioli then 1 elsif iEI then -Ajo {where j. is the 10 unique index such that A~Q \n=1} else Ofi; o Then Lanery shows that d[io ) corresponds to a line of the polyhedron. Alsn if the basis \nAI is such that each io< (F-l) verifies the property [3.4.2.2], then the set {d(io] : ioc(F l)} is a \nbasis of the greatest linear variety contained in the polyhedron. 3.4.3. Algorithm for finding the frame \nof a convex polyhedron. Let AX<B be a system of m linear restraints among the variables XeRn. 1-Build \nthe standard form AIO]X=BIO], XE20, where xclRm+n . 2-Apply the first step of the eimplex method. If \nthere is no feasible bases, the polyhedron is empty. Otherwise we get the system AII]X=BII], XE20 in \ncanonical form with respect to the feasible basis A with [BII]IE>O. 11 3-While there exists an initial \nvariable staying out of the basis and satisfying [3.4.2.2] per\u00adform a pivoting which puts this variable \nin the basis by removing a slack variable from the basis. 4-We get a system A[21XsB[21, XE20 in canonical \nform with respect to the basis 12. Two subcases must be considered: 4.1.If all initial variables are \nin the basis [Fc121, then the polyhedron contains no line and a vertex has been found. Then traverse \nexhaustively all feasible bases of the sys\u00adtem and note at each step the vertex and the ray that are \nfound. An efficient algo\u00adrithm for this travel is given by Oyer\u00adProll[19771. 4.2.The initial variables \nX1l , . . . . X16 possi\u00adbly remaining out of the basis verify [3.4.2.2]. So {d[iI), . . . . d(id)} is \na basis of the greatest linear variety contained in the polyhedron. The following system of retraints \n88 {AXSB, XJ=I d[ik]JXJ =0, Vk=l. .d} defines a new polyhedron P which is a section of the initial polyhedron. \nApplying the algorithm to this new system of restraints case 4.1 is applicable since P contains no lines \nso that the algorithm terminates. Esmrnpze: Let us compute a frame of the polyhedron P corresponding \nto the following system of restraints: -x~+x~-xj < 0 [s1] -xl < - l x~-x~+x~ < 0 -x~+x~ s 3 [ l-Using \nthe matrix notations for denoting systems of equations the standard form of [S1] is: x X2X3x X5X6X7I \n-1 1 -11000 0 [so]:;_;;:::: -: 0 -110001 3 The system [S2] is in canonical form with respect to the infeasible \nbasis A {4,5,6,7} 2-The artificial basis method supplies the system [S3]in canonical form with respect \nto the basis ~m 3-Then we put into the basis as many initial variables as we can, we get the basis A \n{2,1,6,7}: S ]m 4-The initial variable X3 remains out of the basis and cannot be put into the basis whithout \ngetting X2 out. The third column verifies [3.4.2.2J. Hence the vector d=[O,l,l] is the only line of the \npoly\u00adhedron P. Let us build the system of restraints of a section P of P. X1+X* X3 s o < 1-xl [s51 -X,-X2+X3 \ns o -X2+X 53 3 [ X2+X =0 3 Applying (1) and (2] to [s5] we get the canonical form with respect to the \nfeasible basis A {2,3>1>6,7} which contains all initial variables. Thus we have found a first vertex \nof P and we start the tra\u00adversal of the graph of vertices: X1X2X3X* X5X6X7 01 0 V2- V2 o 0 1/2 001 -1/2 \n1/2 0 0 -1/2 [s6] 1000- 100 1 0001-21 02 Ooofi -lo 1 4 Basis: A {2,,,1 >6,7} Vertex: s1=[1,1/2,-1/21 \nColumn 5 satisfies [3.4.2.1] Ray : r~=[l,l/2,-l/2) Adjacent feasible basis: A {2,3, 1,!+,7} xl X2X3X4X5X6X7I \n0100 1/2 -1/2 o -1/2 001 0 -1/2 1/2 o 1/2 [s71 1o00-1 0 0 1 0001-21 0 2 00001-1 1 2 Basis:A {2>3,, >4,7} \nVertex: s2=(l,-1/2,1/2) No column satisfies [3.4.2.1] Adjacent feasible bases: A already found {2,3, \n1>6,7} and A {2,3,1>+>5} 010000 -1/2 -3/2 o 1 0 0 0- 1/2 3/2    [s81: o000-11 3 0001 0- l 2 6 00001-1 \n1 2 Basis: A {2,3,1,4,5} Vertex: s3=[3,-3/2,3/21 Column 6 satisfies [3.4.2.1] F?ay: rz=[l,O,Ol Adjacent \nfeasible basis: A already found {2,3,,,4,7} All feasible bases that contain initial variables have been \nfound, the algorithm terminates with the following frame for P: [S = {[1,1/2,-l/2),(1,- l/2,l/2),[3, \n-3/2,3/21}, R = {[1,1/2,-1/2)>(1,0,0)}, o = {[0,1,1)}] End of exaqle. 3.4.4. Simplification of a frame \nLanery[1966] proposes a method for eliminating all irrelevant members of a frame when a system of restraints \nof the polyhedron is known. This method is the dual of the one given at paragraph 3.3.1.2. for simplifying \na system of inequalities. Lanery s method is based on the following results: -A vertex or a ray saturating \nno inequality is irrelevant. -A ray saturating all restraints corresponds to a line. -If e~ and e2 are \ntwo vertices or two rays [which are not lines) in the frame the quasi-ordering G is defined by: {el=ez} \n<=> {every inequality satured by el is satured by ez} then: {elEez} and {e2#el}imply that el is irrelevant \n{elzez} and {ezzel} imply that one but only one of the two elements may be eliminated. 89 3.5. On the \nuse of two representations for assertions. The search for the frame of a polyhedron as described above \nmay become very expensive although many important optimization are possible. The number of vertices of \na polyhedron generated in I?n by m inequalities is known to be bounded only by functions increasing very \nquickly with m and n, Saaty[1955], Klee[1964]. So the use of this method should be avoided except when \napplied to polyhedra which are thought to have very few vertices. However the use of two representations \nis necessary for the following reasons: Some operations like the convex-hull of two poly\u00adhedra can only \nbe performed on the frame representation, others like widening require the restraints representation. \nIn order to define the inclusion relation between two polyhedra it is very useful to know both representations. \nIndeed PIGP2 if and only if each element of the frame of PI satifies the restraint of P2. It appears \nthat it is difficult to simDlifv one ,. representation without knowing the other one and neither can \nbe used efficiently without simplica\u00adtions. So we shall build at the same time and in a consistent way \nthe systems of restraints and the frames of the polyhedra. Both representations will be simultaneously \nused to represent the assertions. Experience shows that this redundant representation is much less expensive \nthan the frequent use of conversions. 4. TRANSFORMATIONOF LINEAR ASSERTIONS BY ELEMEN-TARY LANGUAGECONSTRUCTS. \nGiven the flowchart representation of programs we now give for each type of program node a trans\u00adformation \nspecifying the assertion associated with the output arc[sl of the node in terms of the as\u00adsertions associated \nwith the input arc(s) of the node and where relevant the content of this node. The conditions of Cousot[1977] \nguaranteeing the correctness of these transformations apply to the specific case analyzed here. 4,1. \nProgram entry node. In some cases [parameters of procedures] the re\u00adstraints on the input variables may \nbe known. In this case they constitute the assertion associated with the input arc. Otherwise the variables \nare assumed not to be initialized so that they satisfy no restraints. Hence the vector 0+ their values \nmay be any point of 113n where n is the number of variables involved in the program analysis. The corresponding \npolyhedron is given by a system with no restraints and equivalently by the frame con\u00adsisting in: -The \nvertex which is the origin of IRn -No ray -The lines all,... dn such that for every i=l..n, d~=l and \nd~=O,for j=l..n and jzi. 4,2. Assignment. Let {A,B,S,R,O} be the representation of the input assertion \nP corresponding to the polyhedron AXSB the frame of which is S={Si : i=l. .d}, R={r, : j=l. .p}, O={d, \n: k=l ..6}. Then the rep- J ,, resentation of the output assertion P after the 10 assignment X :=EIXI \nis given by lo assign [P, x :=EIx]I = {A ,B ,s ,R ,01}. 4.2.1. Assignment of a non linear expression. \nIf the expression E[X] is not linear it is as\u00ad10 sumed that any value of lRcan be assigned to X . 10.=E(X] \nnothing is Hence after the assignment X . lo known about the value of X . Therefore X is eliminated \nfrom the system of restraints AXSB by a projection along the column 10 ($ 3.3.1.1]. For the frame representation \nthis consists in adding the line d [such that d, =1 and di=O for every j= 1..n o . different from l.] \nto the set of lines O. Then in general the representation {A ,B ,S ,R ,0 } of P is not minimal and must \nbe simplified (53.3.1.2 and $3.4.4]. Example: Let n=2 and P be the input assertion rep\u00adresented by the \nsystem of restraints: ( X1+X2 5 The frame representati~n is S={ (2,31,(4,11}, R={ [I,I),(I,O)}, D=O. \nThe geometrical interpret\u00adation is: \\ OL 5 e xl The output assertion P after the assignment X2:= XI*X2 \nis {XI>O, X122}, the frame of which is S ={ (2,3), [4,1)}, R ={[l,ll, [1,01}, O ={(O,l l}. Simplifying \nwe get {xI>Z}, S ={[2,3)}, R ={ [1,01}, 0 ={(0,11] that is: xl o 90 The approximation is obviously \nvery coarse since the substitution of XI*X2 for X2 in the input system of XIO = (X lO-Z ~=lO(alX lO)-b]/a \n1 constraints would lead to: Also {AXSB} is equivalent to {(MA]~ < (B-AK)} which leads to the output \nsystem of restraints satisfied by X . X2 ~xl X2 s X1+[X112 X2 25X1-[X112 4.2.2.2. Non-invertible assignments \nI However the corresponding domain is not a polyhedron ~f alO=O then we cannot solve X in terms of X \nand this situation is hardly manageable: so that some information is lost by the assignment. X2 1  \n   ~~~ Hence XIO is eliminated from the input , restraints by a projection operation. The case is \nsimilar to the one of the assignment of a non-linear ex\u00ad pression except that the restraint X 10 = a)(+b \nis adjoined to the resulting system. Example: Let P be the input assertion defined by Note however that \nthe exact domain is covered by the approximate domain (Cousot[1977]]. Also, a more precise analysis is \nfeasible. For example {XI>O, and X2ZO} implies {XI*X2>O} or the assign\u00ad i * mmt x := Y**2 implies that \nx is greater than or o25 x equal to zero. 1 End of exmple. The assignment X2 :. xl+ l is not invertible. \nThe elimination of x2 in the input system of restraints leads to {X122} so that the output system of \nre\u00ad 4.2.2. Assignment of a linear expression straints is: X 10:= En The assignment is of the form i=l[aiXi)+b \nX2 where a is a n-row vector of integers or reals and b is an integer or a real. The transformation con- \nX122 / sists in an alteration of the basis of the space 3 X2-X1 = 1 [ TRn. The output assertion P is \ndefined by the frame {S ,R ,0 } computed as follows: ~ 1 -S ={s;, ..., s:} where s; is defined by s! \n0= asi+b x 1 11. and S =sl where l. l..~ with 1=1 i< 0 The assignment X2 : xl+xz/z+ l is invertible \nso that Xl=x l and x2 = 2X 2-2X 1-2. Substituting in the - ={r;,..:,r;} where rj is the vector defined \nW input system of restraints we get the output system: SIo= ~r, r,l 1 j and r. for 1=1..n and l*lO. JJ \n-D ={d;, .?.,d~} where d is the vector defined k 7 ,. 3 2 by d~ . adk and d ~=d~ for 1=1..n and Izlo. \n7 The system of restraints corresponding to P can be -3 obtained as the convex-hull of the frame {S ,R \n,D }. However, following Karr[1976] this system of re\u00adstraints can be computed directly. 4.2.2.1. Invertible \nassignments 4 10 The assignment is of the form X := z!~=q(aiXi)+b 2 a 10*O. The fact that alO#O allows \nus to carry over 10 our knowledge of the previous value of X to tha 10 new value of X . To see this, \ndenote the values End of example. of the variables by X before and by X after the invertible assignment \nstatement. Then for 1=1..n 10 =aX+bC There-4.3. Test Nodes and 1Z1O we have X l=X1 whereas X fore X = \nMX +K as defined by X1=X for l=[[l,n]-{lo}) Let P[A,B,S,R,D) be the assertion associated with the input \narc to a decision node testing somE 4.3.3. Linear inequality tests boolean condition C. Let Pt(At,Bt,St,Rt,Ot) \nand If C is of the form aX<b then Pt=[P a?zi? aX<bl Pf[Af,Bf,Sf,Rf,Dfl be the assertions associated whereas \nP = [P and aX2bl.[Note that the inequality respectively with the true and false exits of the f test. \nObviously Pt=P and C and Pf=P am! not(C1. is not strict since P must be a closed polyhedron f The condition \nC is said to be linear if and only if and that we can write aXzb+l for integers]. i.t is of the form \naXsb or aX=b where a is an As above, the determination of the frames of Pt n-row-vector of integers or \nreals, X is the and Pf makes use of a frame [S ,R ,0 I of the inter\u00ad n-column-vector of program variables \nand b is an integer or a real. section PrIH of P with the hyperplane H={XclRn : aX=b}. The set St of \nvertices of Pt is {s<S : as<b}uS . If St is empty then Pt is the empty polyhedron 4.3.1. Non-linear tests. \nwhereas P equals P. Otherwise St is not empty and If C is not a linear condition we ignore the f THe \nset Rt of extreme rays of Pt is {reR : ar<O} u test by putting Pt = Pf = P. This is certainly {dcO : \nad<O} u {-dcO : ad>O} u R . The set of valid, but it may not be as much information as could be gathered. \nAs for non linear assignments lines Ot of Pt is O . A symmetric reasoning is specific studies can be \nmade of how best to handle used to determine a frame of PThe resulting test conditions which are not \nlinear [for example f {Log[x]aO} implies {xzl}]. frames [St,Rt,Ot) and [Sf,Rf,Of) are not necessarily \n minimal and must be simplified [5 3.4.4). 4.3.2. Linear equality tests. Exarrp L?: Let P be an input \nassertion defined by {(X227, X1+XZ25> XI-X22-11, S=~s]=(4,11, SZ=(2,31}, When C is a linear condition \nlet H be the R ={rl=[l,O), rz=(l,l )}, 0=0}. Let Pt and Pf be hyperplane {X=lRn : aX=b}. If C is of the \nform aX=b then either P is included the output assertions associated respectively with in H in which \ncase P P and P =0 or P is not in-the true and false exits of a test on the condition tf X1+622X2 (that \nis aXsb where a=(-1,2), b=6 and X eluded in H in whicn case Pt=PnH and Pf=p. Note is the 2-column-vector \n[X1,X2) ). Let H be the hype~ that {AXSB and aXzb} is approximated by {AXSB] plane defined by the equation \nXI+6=2X2. The geo\u00ad since the domain {XeJRn : AXSB and aXzb} is not, in general, a closed convex polyhedron. \nmetrical interpretation is the following: The frame of PnH is found thanks to the fol\u00adlowing results: \n//at:; ..... ...... ... . Pf 1 -Each vertex s of PnH lies on an edge of P according to one of the following \nalternatives: 1.1-s is a vertex of P that belongs to H, 1.2-there are two adjacent vertices s] and S2 \nS.~Sl+(l k)SZ whereof P such that A=(b-asZ)/(asl-asz) belongs to [0,1]. 1.3-there are a vertex S1 and \na ray rl of P such that sl is adjacent to r] in P and s=sl+~rl where V=(b-asl)/arl is positive. 1.4-there \nare a vertex sl and a line dl of P such that s=sl+vdl where v=[blasll/adl. 2 Each extreme ray r of PnH \nis either 2.1-an extreme ray of P that belongs to H 2.2-or, a positive combination of two adjacent extreme \nrays rl and r2 of P: r=rl+~rz ~. ~rl/ar2 must be positive. where 2.3-or the sum of an extreme rav r, \nof P and a vector linearly dependant of a line dl of In order to determine a frame of P nH, it is necess-P, \nthat is r=rI-(arl/adl)dl. ary to know the adjacent elements of the frame of P. [s1,sz], (sl,rl), (sz,rz), \n(rl,rzl are adja\u00ad3 Finally a vector d is a line of PnH if and only cent, The vertex s of H corresponds \nto the case if there are two lines dl and dz in P such that 4.3.2.1.3, that is s = s2+((b-as2)/ar2)r2 \n= [4,s), d=dl-(adl/ad2)d2. The extreme ray r of FnH corresponds to case 4.3.2.2.2 that is r = r~-(arl/arz)r2 \n= [2,1]. A frame of Pt is given by St={SI,S2,S }, Rt={rl,r }, ot=O. A frame of Pf is given by Sf={s }, \n92 Rf={r2,r }, Df=O. Incorporating the ray r=[l,Ol of P2 in A XSB by elimination of u in {P20, A x BA \nrSB } that is End of exomph. {p20, x~-x~+~.sl, OSX,-~Sl, X2>IJ} we get the convex\u00ad hull of Pl and Pz \ngiven by {OSXZS2, x120, x2-x1~ 1}. End of exantpZe. 4.4. Simple junction nodes. 4.5. Loop junction nodes. \nSimple junction nodes correspond for example to the merge of the then and else paths in a con\u00additional \nstatement. More generally let Pl, P~,#..C Each cycle in the program graph contains a loop Pp be the \nassertions associated with the input arcs junction node: to the simple junction node and P the output \nas\u00ad PI 2 P sertion: P .* PIP, P ..* P Y P Y P p [p 1 does nOt necess- Then the output assertion ORi=I \ni arilyco -respond to a convex polyhedron so that it must be approximated by the convex-hull P of Pl, \n. . ..PP which is the least polyhedron containing Pl, .. ..P . P Since the convex-hull operation is \nassociative we can assume without lost of generality that there are two input arcs [p=2). Given PI(AI,BI,SI,RI,OII \nand P2[AZ,B2,S2,RZ,02] the frame of P = eonvez-ku22[Pl,P2) is S=S1US2, R=RIuR2 and O=O1(JOZ. The system \nof restraints AXSB describing P is obtalhed by the convex-hull of the frame (S,R,O) which can be computed \nby successive approxi\u00admations [$ 3.3.1.11. As soon as the system of re\u00adstraints {/4XsB} of P is known \nthe frame [S,R,D) of P can be simplified (3.4.41. Nctice that convex-kuZZ[P1,P21 cannot be com\u00adputed \ndirectly from the systems of restraints AIXSBI and A2XSB2. In order to avoid a costlj conversion ($ 3.41 \nthe redundant frame represen\u00adtation has been kept along with the restraints representation. For the output \nassertion P the conversion from frame [S,R,OI to restraints AXSB representation is lese expensive [$ \n3.3). Since the system of restraints of PI (or P2) is known. This conversion is optimized as follows: \neonvez-hu22({SluSZ, RluR2, 01u02}) convex ku2Z[convea-huZZ[{Sl,Rl ,01}), {S2,R2,DJI eonveti-huZZIAIXsBl, \n {SZ,R2,D2}) so that starting from AIX<BL we can successively incorporate in the convex-hull the elements \nof the frame of Pz. Example: P1={(X120,X220,X1+X2<I , s]= [0,01,(1,0),(0,1)}, Rl=O,=O} P2={(XI>I,X2=2), \nS2={[ ,2)}, R2={[I,01}, 0Z=F3} The convex-hull of Pl (given by AIXSB] and the vertex s=(I,Z) of Pz-is-obtained \n(53.3.1.11 by elimination of 1 in {Oskl, AIX+l(AIS-Bl )SAlS}. Eliminating A in {Oskl, x1+121, XZ+2A>2, \nXI+XZ+2k<3} we get the approximation A XSB! given by {x*-X]<l, osx~sl, X220}. The corresponding transformation \nP = PVconoe@zuZZ(P l,P2, . . .,PD) is defined by the widening operation V. Let QI (A1,B, ,S1,R1,O1) \nand CJY(A2,B2,S2,R2,02) be two convex polyhedra. Then QI V Qz is the convex polyhedron consisting in \nthe linear restraints of QI verified by every element of the frame [S2,R2,D2) of Qz. Examp Ze: Ql ={ \n(-X1+2X2<-2,X1+2X2S6,X2201 J S={ [2,01, [6,0),(4,1)}, R=O, D=O} Q2 = (-xI+2x2<-2,xI+2xz<10,x220) , \ns={ [2,0], [10,01, [6,21}, R=O, 0=0} QiVQ2 = [-xl+2xzs-2, x220) End of example. In order to compute \nthe frame of Q1VQ2 it is necessary to convert from the linear restraint rep\u00adresentation . Lanery s method \n[$ 3.4) is known to be expensive. However when applied after a widening operation the cost remains reasonable \nbecause of the following arguments: -In the widening QIVQ2 of Q, by Q2 a certain num\u00ad ber of vertices \nof Q1 have been replaced by extreme rays. Hence the widening operation eliminates vertices, so that QlVQ2 \ncan be assumed to have a small number of vertices. Now it is the discovery of vertices which is the most \ncostly in Lanery s method. -A frame of Q1 is known and Q1 is included in 0~VQ2. Therefore the initialization \nof the simplex method needs not to be used. Moreover since any re\u00adstraint of QIVQ2 is a reetraint of \nQI it is highly probable that the frames of QI and QIVQZ have numerous common elements. The correctness \ncriterion of Cousot[1977] re\u00adcalled at paragraph 2 is satisfied since QIgQlvQ2, Q2sQ1VQ2 and for every \nchain CoqClg. ..g Cn G... The chain SO=CO, S1=SOTIC1, . . ., Sn=S is n-lvcn not an infinite strictly \nincreasing chain since at each step n the number of restraints describing s n is finite and less than \nor equal to the number of restraints describing Sri-l. The definition of the widening operation must \nbe P; = eonvea huZZ(P~,P~) a balance between compelling the convergence of the global analysis of the \nprogram [by throwing away the [2J+2<I, I+2Js6,0<JI, S={ (2,0), [6,01, [4,1)]> restraints that do not \nquickly stabilize in the pro-R=O, D=O gram cycles) and discovering as much information as 2=p: . p2 P3 \n2 possible about the program. Hence it is wise not to perform widening operations at loop junction p: \n . assign(P~,I:=I+4)nodes before gathering the information along the program cycles containing that \nloop junction node. [2J+6sI,I+2Js10,0sJ), s={ (6,D), (10,0), (i3,1]}, Also the definition of the widening \nwhich we have R=O, 0=0 given is a tentative one. The experimentations that 2_ P6 -assign(assign[P;,J \n:=J+l 1>1:=1+2)have been carried out seems to corroborate our choice but further studies are necessary \nto give a [2J+2<I,I+2J<I0,1sJ)> S={ [6,2), (8,1), [4,1)}, definite conclusion. R=O, D=O P72_-convex-hu22[P~,P~) \n(2J+2SI, 6SI+2JSI0,0<J), 5. GLOBAL ANALYSIS OF PROGRAMS, S={ (6,0], (10,0), (6,2), [4, l)}, R=D=@ J \nWe illustrate the global analysis of programs on the following ad-hoc skeletal program which is simple \nenough to allow hand computations: {Po} ...\u00ad 1:=2; J:=O; 1 {PI} $ L: 0i 610 {P,} 1 ~~ ... then When \nthe loop body has been analyzed a widening {P,} operation takes place at the loop junction node L: 1:=1+4; \n{P,} P: = P: v convex hu22[P~,P~) else {P,} We have p; = (2J+2SI, I+2JS6, OSJ) and J:=J+I; 1:=1+2; convex-huZL(P~,P~) \n= (2J+2sI, I+2JsI0, OSJ) with {P,} S={(2,D), (10,0), (6,01}, R=O=O, so that I+2Js6 f<; {P,} which is \nthe only constraint of P; not verified by goto L; every element of the frame of eonvez-huZZ(P~, P~l is \neliminated by the widening operation. The test involving some non-linear condition is not taken into \naccount. Each assertion P;, i=O.,7 is J convex-huZZ(p~ ,p~l t/initially the empty polyhedron 0 and the \ninput assertion is propagated through the program graph: ~1. ~z S={ [0,0]}> R=O, 0={(1,0], (0,1)} ,o \n F ; = czssign(czss@n.(P;, 1:=21, J:=O) = {I=2,J=O}, S={[2,01}, R=O, 0=0 o 2 6 10 I P; = convex-huLZ(P~,P~) \n= convex-Fn4L2(P~,0) = P; P; = {2J+2sI,0sJ}, S={[2,0)j, R={[I,O), [2,1)}, 0=0 p; .p: =pl 2 ~3 _ P53=P3 \n ~ PI = assign (P:,I: 1+41 3\u00ad ~ = {I=6,J=0}, s={[6Jol}, R=O, D=O P~ = czssZgn(P~,I:=I+4) . P; = aSS2@2[ass@(P~,J:=J+l \n),I:=I+z] {2J+6sI,0sJ}, s={(6,01}, R={ [1,0), [2,11}, 0=0 = {I=4,J=I}, s={ [4,1]}, R=O, 0=0 P> = assign[assign[P~,J:=J+l \n),1:=1+21 6 P; = convex-hu2L[p~,P~) {2J+2<I,ISJ}, S={(4,1)), R={(I,O1, (2,1)}, 0=0 = {I+2J=6,4<I<6}, \nS={ [6,0), [4,1)}, R=O, 0=0 P; = convex-hu2Z(P~,P~) {2J+2sI,6<I+2J,0<J}, S={[6,0), (4,1)}, R={ (1,01,( \n2,11}, 0=0 J+ /., J+ J P3 6 ,, ,. ..........  1( P; 1P; P3 l ., i, ,,, ~ *L P;/fl~ 1 1 !,1I I !; \n\\o2 6o26 1! I 94 Then conoez-&#38;LZ(P~,P~) is included in P; so that the program analysis has converged. \nThe final result shows up linear restraints among the variables of the program that never appear ex\u00adplicitly \nin the program text and often escape the notice of anyone studying this simple example: {o} : no information \n{1} : 1=2, J=O {2},{3},{5} ; ZJ+ZSI, J>ll {41 : ZJ+&#38;I, J>O : ZJ+ZSI, J> 1 {6} {7} : 2J+2SI, MI+ZJ, \nJ>O 6. EXAMPLE. On the next example (HEAPSORT, Knuth[ 1973,p.148]] it is not possible to trace the details \nof the analysis so that we directly provide the results produced by our experimental implementation: \nprocedure HEAPSORT(integer vaZue N; real cz~ray[l. .N] T); begin intage~ L,R,I,J; reaz K; {1} L:=(N \n&#38;V2)+l; R:=N;{2} if [L221 then {3} L:=L-I; {K:=T[L];){4} else {5} {K:=TIRI: TIRl:=-r[l];} R:=R-I;{61 \nfi; {7} white [R>2) do {8} I:=L; J:=2*I;{9} 7J72iZe [JSRI do {lo} if [JsR-1) than {11} if {TIJI<TIJ+II} \nthen J:=J+I .fi;,fi: {12} if {K?TIJI} then ez~t {of the inner loop} ~i;{13} {T III:=TIJ];} I:=J; J:=2*J;{14} \n od; {15} {T II]:= K;}{16} if L22 then {17} L:=L-I; {K:=TILI;}{18} e T-se{19} {K:=TIRI; TIRI:=T III;} \nR:=R-I;{20} j i; y] {T II]:=K;) od; {23} end; The procedure is analyzed with the input speci\u00adfication \nN22 (see Knuth [1973], P.146). This analy\u00adsis does not take account of the statements involv\u00ading operations \non arrays, . these statements such as {K:=T[L];}have been bracketed in the text of the procedure. The \nresult of the analysis (taking about 20 seconds of C.P.U. time) is the following: {1} Nz2 {2} N22, Ns2LSN+I \nR=N {3} Nz2, NSZL<N+I, R=N, L22 {5} Nz2, N<2L<N+I, R=N, L<2 {8} R22, 2L<N+ 1, R+3sN, 2L+2R+Is3N, L> l, \nR<N { lo} R22, 2L<N+I, R+3s2N, IsL, R<N, 21=J, L<I, 21+6L+R+18<12N, JsR, 2L+2R+I<3N, 41+2L+I<ZR+3N \n{11} Rz2, 2L<N+ 1, R+3s2N, l<L, RsN, 21=J, L<I, 21+6L+R+18512N, J<R-l, ZL+2R+I<3N, 41+2L+I<2R+3N {12}, \n{13] R+3s2N, La l, RsN, Js21+I, 21sJ, LsI, J<R, ZL+ZR+153N {15} J+2<21+R, 2J+2L<41+N+I, R+3s2N, IsL, \nR<N, 7J+6L+R+18<121+12N, 21<JS21+I, LsI, ZL+ZR+IS3N, 8J+2L+Is121+2R+3N {17} {15}, L22 {19} {15}, Ls2 \n{21} R~ 1, 2L<N+ 1 , R+4<2N, 2L+2R+3<3N, L21, I=KN Once the above invariant assertions have been discovered \nit is very easy using projections (3.3.1.1) to check statically that all array accesses are correct. \nNotice that some relation\u00adships among the variables of the procedure are not obvious and cannot be discovered \nby hand whithout deep understanding of the program. 7. NOTES ON THE EXPERIMENTAL IMPLEMENTATION< We have \nproduced an experimental implementation written in PASCAL on the CII-IRIS 80 computer. The length of \nthe program is about 2500 lines. The systems of equations and inequations have been represented for simplicity \nby real matrices and this sometimes results in a loss of precision. It seems very difficult to write \nthe program so that this loss of precision is acceptable that is so that the relationships which have \nbeen found corre\u00adspond to a domain including any value that each real variable can take during any execution \nof the analyzed program. However the main applications we have in mind (such as array bound checking) \ndeal with integer variables. In this case the coef\u00adficients of the linear restraints are rationals, which \ncan be represented as fractions [p/q where p and q are integers). Then the operations which are performed \non these coefficients (+,-,x,/l are more costly but introduce no loss of precision. We have noticed that \nprograms involving numerical constants are better handled when these numerical constants are replaced \nby the declaration of a sym\u00ad bolic constant. It is often the case that the convergence of the analysis \nis faster althought the systems of restraints are bigger. It seems to be very difficult to evaluate the \ncost of the analysis of a program. The cost of the analysis does not only depend on the length [number \nof lines) of the program but mainly on the com\u00adplexity of the program graph [number of loops, degree \nof loop combination, etc...). It seems that the cost of an analy~sis almost linear in the length of the \nprogram but exponential in the number of variables involved in the analysis. From this point of view \nnested static scopes (such as ALGOL 68 blocks which authorizes very local declarations or better EUCLIO \nwith its import mechanism] is useful since for example th=ables of an outer block can often be analyzed \nindependently of the variables of the inner blocks whereas the vari\u00adableof be inner block can often be \nanalyzed using only few global variables. In general it can be taken advantage of the scope rules of \nthe usual languages. We have deliberately taken the point of view not to take account of the legalitv \nrestraints which must hold on the variables. F~r example if a pro\u00adgram variable is used as an array index \nwhich do not take ~ccount of the fact that we should try to show that the value of this variable must \nbe within the array bounds. Taking account of such facts we could propagate this information backward \nto the loop junction nodes so that we would have a guide\u00adline for the widening operation. This would \nenable us to combine the discovery and verification ap\u00adproaches. Acknowledgements. We thank Radhia COUSOT \nfor helpful discussions on linear programming and Mrs H.DIAZ for typing the manuscript. 8. REFERENCES \nM.L.BALINSKI, An algorithm for finding all ve~tiees of convex po2.yhedra2 sets, J. Sot. Indust. APP1. \nMathem., 9, [March 1961] A.CHARNES, W.W.COOPER and A.HENDERSON, An Introduc\u00adtion to Linear Programing, \nJ.Wiley, New-York, [1953] P.COUSOT and R.COUSOT, Static determination of dynamic properties of@ograms, \n2nd Int. Sym\u00adposium on Programming, B.Robinet(Ed.), Ounod, Paris, [1976] P.COUSOT and R.COUSOT, Abstracts \ninterpretation: a unified lattice model for static analysis of programs by construction or approximation \no-f fixpoints, Conf. Record of the 4th ACM Symposium on Principles of Programming Languages, [Jan.1977] \n N.E.DYER and L.G.PROLL, An azgorithm for determinzkg all extreme points of a convex polytope, Mathematical \nProgramming, 12, [1977] M.KARR, Affine relationships among uariab2es of a program, Acts Informatica, \n6, [197 61 V,KLEE, Some eha~actemkations of convex polyheha, Acts Mathematical, 102, [1959] V.KLEE, \nOn the number of vertices of a convex po2ytope, Canadian J. of Mathematics, 16,[ 1964] O.E.KNUTH, The \nart of computer programming, VOI.3, Sorting and Searching, Addison-Wensley Pub.Co., Reading, Mass, [1973] \n H.W.KUHN, Solvability and consistency for 2inear equations and inequalities, Amer. Math. Monthly, 63, \n[1956] E.LANERY, Recherche d un systdme g&#38;&#38;ateur minima2 d un po2y7?edre conoexe, Thbse de 3bme \ncycle, Caen, France, [1966] M.MANAS and J.NEOOMA, Finding a~~ vertices of a convex po2yhedvon, Numerische \nMathematik, 12, [1968] T.H.MATTHEIS, An algorithm for determining irreZ evant constraints and alZ vertices \nin systems oaf 2inear inequalities, Operations Research, 21, [19731 T.L.SAATY, The number of vertices \nof a polyhedron, Amer. Math. Monthly, 62, [1955] M.SIMONNARO, Progrmation Lin6aire, Ounod, paris. [1973] \nN.SUZUKI and K.ISHIHATA, Implementation of an array bound checker, Conf. Record of the 4th ACM Symposium \non Principles of programming languages, [Jan.1977] B.WEGBREIT, Property extraction in well founded prope~ty \nsets, IEEE Trans. on Soft. Eng., vol. SE-I, n03, [Sept.1975] H.WEYL, The elementary theory of convex \npo2yhed~a, Annals of Math. Study, 24, [1950] 96   \n\t\t\t", "proc_id": "512760", "abstract": "", "authors": [{"name": "Patrick Cousot", "author_profile_id": "81100592699", "affiliation": "Laboratoire d'Informatique, U.S.M.G., BP. 53, 38041 Grenoble c&#233;dex, France and Attach&#233; de Recherche au C.N.R.S., Laboratoire Associ&#233; no 7", "person_id": "PP39049972", "email_address": "", "orcid_id": ""}, {"name": "Nicolas Halbwachs", "author_profile_id": "81100642295", "affiliation": "Laboratoire d'Informatique, U.S.M.G., BP. 53, 38041 Grenoble c&#233;dex, France and Allocataire de Recherche D.G.R.S.T.", "person_id": "P208854", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512760.512770", "year": "1978", "article_id": "512770", "conference": "POPL", "title": "Automatic discovery of linear restraints among variables of a program", "url": "http://dl.acm.org/citation.cfm?id=512770"}