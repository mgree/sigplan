{"article_publication_date": "01-01-1978", "fulltext": "\n Permission to make digital or hard copies of part or all of this work or personal or classroom use is \ngranted without fee provided that copies are not made or distributed for profit or commercial advantage \nand that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, \nto post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.&#38;#169; \n1978 ACM 0-12345-678-9 $5.00 Conference? Record of the Fifth Annual ACM Symposium on Principles of Programming \nLanguagea REASONING ABOUT RECURSIVELY DEFINED DATA STRUCTURES Derek C.Oppen Artificial Intelligence \nLaboratory Computer Science Department Stanford University Stanford, California 94305 Abstract A decision \nalgorithm is given for the quantifier-free theory of recursively defined data structures which, for a \nconjunction of length n, decides its satisfiability in time linear in n. The first-order theory of recursively \ndefined data structures, in particular the first-order theory of LISP list structure (the theory of CONS, \nCAR, CDR), is shown to be decidable but not elementary recursive. I. Introduction We are interested in \nthe problem of reasoning about data structures and the operations associated with them. There are several \nmotivations for such a study. For instance, in reasoning about programs, one is interested in proving \nproperties of data structures after they have been manipulated by a piece of program text. On the other \nhand, Guttag et al ([Guttag, Horowitz, Musser 1976], [Guttag and Horning 1977J see also [Goguen et al \n19751, [Zilles 19751) are interested in proving that a particular implementation of a data structure \nand its associated operations is consistent with an abstract, axiomatic defimtion of these operations. \nThere is a need for fast techniques (if they exist) for reasoning about classes of data structures. More \ngenerally, there is a need for knowledge on the complexity of reasoning about particular classes of data \nstructure$ this gives some intuition as to the inherent complexity of these classes of data structures. \nWe will explore in detail the question of reasoning about a particular class of data structures, the \nclass of recursively defined data structures. These are essentially the recursive data structures proposed \nby [Hoare 1975] as a structured alternative to pointers. Most programming languages support such data \nstructures either explicitly or implicitly (they can be mimicked by arrays), but the best known example \nof them is LISP list structure, with constructor CONS and selectors CAR and CDR. This research was supported \nby the National Science Foundation under contract M(X 76-000327. More precisely, recursively defined \ndata structures are data structures which have associated with them one constructor function c and selector \nfunctions Sl,...$k with the foilowing abstr~t structural properties L (Construction) C(5~(x), 52(X), \n.-, $(x)) -x 11. (Selection) s~(c(x ~,...,xk)) = x ~ S2(C(X1,...,Q) = X2 ... Sk(c(xl?..,xk)) = x~ \nIII. (Acyclicity) 51(X) # x S2(X) * x .,. Sk(x) # x S1(S1(X)) # x S1(S2(X)) # x ... We will consider \nfirst order theories (with equality) axiomatized by schemata of the above form. A decision algorithm \nts given for the quantifier-free theory of recursively defined data structures, which, for a conjunction \nof equalities and diseq ualities, determines its satisfiability in linear time. The algorithm has possible \napplications in any theorem prover which handles such data structures (for instance, Boyer and Moore \ns prover for LISP functions [Boyer and Moore 1977], Guttag and Musser s prover for abstract data types, \nor the simplifier we are developing [Nelson and Oppen 1978]). Our algorithm is extended to handle type \npredicates, For example, in LISP there is a predicate ATOM(x) which asserts that x is an atom. The axioms \nare modified to reflect types for instance, axiom I becomesATOM(X) v c(sI(x)I sz(x)~-I k(x)) = < It follows \nfrom the above that the quantifier-free DNF theory of recursively defined data structures (that is, the \nquantifier-free theory in which every formula is in disjunctive normal form) is decidable in linear time \nand therefore that the (full) quantifier-free theory of recursively defined data structures is in NP \n(and hence NP-complete). We next consider theories in which quantification is allowed, in particular \nthe first-order theory of LISP list structure. Our basic decision algorithm can be modified to form the \nbasis for a quantifier-elimination method for this theory. However, the decidability of this theory and \nits complexity can be derived from existing results in logic. In particular, the constructor c (CONS) \nmay profitably be treated as the structural analogue of what is called in logic a pairing function . \nThere are results in the literature on theories of pairing functions and part of the purpose of this \npaper is to point out their applicability. We will use these results to show that the first order theory \nof list structure (recursively defined data structures) is decidable but not elementary recursive. That \nis, although the theory is decidable, there cannot .2n exist a decision procedure for it which always \nhalts in time 22 for any fixed number of2 s(n isthelength of the formula). The question of the decidability \nof the first order theory of list structure has recently been raised by John McCarthy [McCarthy 1977J \nby the above it is decidable. McCarthy shows that if one includes the predicate SUBEXPR(X,Y), which asserts \nthat x is a subexpression (subtree) of y, then the theory is undecidable. If one drops the acyclicity \naxiom schema 111,different results obtain. [Nelson and Oppen 19771 give a decision procedure for the \nquantifier-free theory of possibly-cyclic list structure which, for a con junction of equalities and \ndisequalities of length n, decides its satisfiability in time 0(n2). A variant of this algorithm has \nbeen implemented. [Johnson and Tarjan 1977] have improved the algorithm to run in time O(n log2n) time. \n2. Decision Algorithm for the Quantifier-Free Theory 2.1 Int roduct ion The language of the theory consists \nof variables, function symbols c, SI ,...,sk and the predicate =. We describe a decision algot ithm which \ndetermines the satisfiability of a conjunction of equalities and disequalities in linear time. Later \nwe will modify the algorithm to handle type predicates. Assume that we are given a conjunction tl = U1 \nA ... A t, -u, Ar #s A!.. Arm #sm. The basic strategy of the algorithm is to 11 construct a graph whose \nvertices represent the terms of the conjunction and an equivalence relation on the vertices of the graph \nrepresenting all the equalities that are entailed by the conjunction. The algorithm then checks if any \nasserted disequality conflicts with any of these equalities. The algorithm represents terms in the conjunction \nby (the equivalence classes of) vertices in a directed! acyclic graph possibly with multiple edges. \nA vertex in the graph may have outdegree zero or outdegree k (corresponding to the k selector functions). \nThe edges leaving a vertex are ordered; if u is a vertex with nonzero outdegree, then u[i] will denote \nits ith successor. Since multiple edges are allowed, possibly u[i] = u[j] for i # j. Every term in the \nconjunction is either an atomic symbol or an expression of one of the forms si(a) or C(al, a2, .... ak) \nwhere U, al, ap, .... ak are terms. An atomic term x will be represented by (the equivalence class of) \na vertex Iabeiled x. A term of the form si(a) will be represented by (the equivalence class of) a vertex \nv such that v = u[i] for some vertex u representing a. (If necessary, dummy successors of u are added \nto represent the Sj(u), j # i, if these do not appear in the formula.) A term of the form c(al, a2, .... \nak) will be represented by (the equivalence class of) a node v with k successors representing respectively \nal, a2, -.., ak. TO represent the fact that two terms are equal, we will merge the equivalence classes \nthat represent them. The first step taken by the decision algorithm is to construct the graph representing \nthe terms in the conjunction. The equivalence classes representing terms asserted equal in the conjunction \nare then merged. The main work of the algorithm is to close the graph under all entailed equivalences \nof vertices, checking as it does so that no cycles are being introduced into the graph (since such cycles \nwould violate the acyclicity condition). First, if two vertices u and v are equivalent and both have \nnon-zero outdegree, then the equivalence classes of their corresponding successors must be merged (since \nx = y = Sl(x) = Sl(y) A .. A Sk(x) = Sk(y)). Secondly, if all the corresponding successors of two vertices \nu and v are equivalent, then the equivalence classes of u and v must be merged (since S1(X) = Sl(y) A \n... A Sk(x) = Sk(y) ~ x = y). A graph closed in this fashion will later be defined to be bidirectionally \nclosed. The following fragment of an algorithm carries out the above step, 1, For all pairs of vertices \nU,Vin V with nonzero outdegree if u and v are equivalent then (if any corresponding successors of u and \nv are not equivalent then merge the corresponding successors also restart step 1) else if all the corresponding \nsuccessors of u and v are equivalent then merge u and v also restart step 1. 2. Return. This algorithm \nis obviously non-linear; it also does not check for cycles, In the next section we will describe a linear \nalgorithm for computing the bidirectional closure of a graph and in the following section show how this \ngraph algorithm yields a linear decision algorithm, .2.2 Bidirectional Closure Let G = (V, E) be a directed \ngraph possibly with multiple edges such that the edges leaving each vertex are ordered. If R is an equivalence \nrelation on the vertices of G, then G is acyctic under R if there is no sequence of vertices v o Vo v1 \nv1 . vp = V. of G, p>O, such that <Vi,Vi > c R and <Vi ,Vi+l> c E for 0S i <p. Let R be an equivalence \nrelation on the vertices of G, Define the corzgrswnce clo$urt Rt of R on G to be the unique minimal extension \nof R such that 1. RT is an equivalence relation and 2. any two vertices u and v with equal, nonzero outdegree \nare equivalent under RT if all their corresponding successors are equivalent under Rt. If G under R ? \nis acyclic, there are linear algorithms for constructing RT ([Downey and Sethi 1977], [Johnson and Tarjan \n19771h these algorithms abort if G under R1 is not acyclic. Let R be an equivalence relation on the vertices \nof G. Define the unification closure RL of R on G to be the unique minimal extension of R such that 1. \nR.J is an equivalence relation and 2. if any two vertices u and v with equal, nonzero outdegree are equivalent \nunder RJ, then all their corresponding successors are equivalent under RL If G under R.J is acyclic, \nthere are linear algorithms for constructing Rt (for instance, the linear unification algorithm of [Paterson \nand Wegman 1977]} this algorithm will abort if G under R$ is not acyclic. We use the notation RT and \nR. to suggest the directional duality of the two notions of closure. Let R be an equivalence relation \non the vertices of G. Define the bidirectional closure R$ of R on G to be the unique minimal extension \nof R such that 1. R$ is an equivalence relation and 2. given two vertices u and v with equal, nonzero \noutdegree, u and v are equivalent under Rt if and only if all their corresponding successors are equivalent \nunder Rt. Consider now the problem of constructing the bidirectional closure. First, it is apparent that \nif a congruence closure algorithm and a unification algorithm are run alternately enough times over G \nthat eventually G will be bidirectionally closed. That is, RU4T... a R$. However, if G is such that the \noutdegree of each vertex is either O or k, for some fixed k, then in fact one pass of each algorithm \nis sufficient, by the following lemma. Lemma: Let G = (V,E) be a directed graph possibly with multiple \nedges such that the edges leaving each vertex are ordered. Assume that the outdegree of each vertex in \nG is either O or k for some fixed k. Let R be an equivalence relation on the vertices of G. Then R$ = \nRL?. Proofi It suffices to prove that RiT is unification closed, We first need a property of unification \nclosed relations. Let RI be a unification closed relation on G. Let u and v be a pair of vertices in \nG with outdegree k such that cu[i],v[i]> ~ R ~ for all 1 s i s k. Then we claim that the minimal equivalence \nrelation R2 containing R ~ and -a,v> is also unification closed. Note first that R2 is R ~ except that \nthe equivalence classes of u and v have been merged. Consider any pair of vertices x and y with outdegree \nk such that <x,y> c R2. If cx,y> c RI then certainly <x[il,y[i]> e R2 for all 1 < i < k. So suppose <x,y> \nis not in RI. Then <x,u> c RI and <y,v> E R ~ (or <x,v> and <y,u> are in R ~). It follows that, for al] \nI s i s k, <x[i],u[i]> c R2 and <y[i],v[i]> c R2 (since RI is unification closed and the outdegree of \nall the vertices x, y, u, v is k), and thus that <x[i],y[i]> t R2, since <u[i],v[i]> c R2 by assumption. \nThus, merging u and v did not affect the unification closure property. Therefore, starting out with R$ \nand making equivalent any two vertices with outdegree k, all of whose corresponding sons are equivalent, \nleaves the resulting minimal equivalence relation unification closed. By induction, it follows that R$t \nis unification closed. Note that it is important for this proof that the vertices have the same outdegree \nif they have nonzero outdegree. Otherwise, in the above proof it is not necessarily the case that if \n<x,u> c R ~ then all their corresponding successors are equivalent. Note further that the order of the \npasses is important RT.I. is not necessarily equal to Rt. If G under R$ is acyclic, there is therefore \na linear algorithm for constructing R$, One first constructs R4 using a hnear unification closure algorithm \nand thencloses R1. under congruences (that is, construct R~?) using a linear congruence closure algorithm. \nIf G under R$ is not acyclic, one of these algorithms will abort.  2.3 The Decision Algorithm We will \nnow state more precisely the decision algorithm described informally in Section 2.1. We start by describing \nthe data structures manipulated by the algorithm. First, corresponding to every term t in a formula, \nthere is a directed, acyclic graph G(t). G(t) will COIIkcltZ a Vertex VG(t)(t) representing t. i. If \nt is an atomic symbol, G(t) has a single vertex with zero outdegree labelled with t. VG(t)(t) will be \nthis vertex. 2. If t is of the form Si(a), then G(t) will be G(a) and VG(J4 will be VG(ti)(a). However, \nif v~(ti)(a) has outdegree O, we will add k successors to VG(t)(a) (each successor will be a new unlabeled \nvertex with outdegree zero). V@) wiii be the ith successor of VG(t@. 3. If t is of the form C(al,...,uk), \nthen G(t) is the disjoint union of G(u I ), .... G(uk) together with a new vertex u with k successors. \nFor all 1 S 1 S k, U[l] IS vG(di)(Ui). G(t)(t) is u. (In  taking the disjoint union, we will always \nassume that the label of any vertex in the union is its old label in the graphs whose union we are taking. \nSimilarly, for any term t , if VG(~i)(t ) exists in G(ai), then VG(tft ) will be the same vertex. In \nwhat follows, we may leave out the subscript if no confusion can result.) I ne only vertices that are \nIabelled in G(t) are those which represent atomic symbols in t. An E-graph G is a quintuple <V, E, k, \nX, -> such that 1. <V, E> is a directed graph possibly with multiple edges, 2. the outdegree of each \nvertex in G is either O or k, 3. ~ is a bidirectionally-closed equivalence relation on V, 4. G is acyclic \nunder *. 5. x is a Iabelling of (some of) the vertices, 6. any two vertices which have the same label \nare equivalent.  We will represent an equivalence relation by its corresponding partition, that is, \nby the set of its equivalence classes. If u is a vertex, then let [u] denote the equivalence class of \nu. If t is a term, G an E-graph, Q an equivalence class of * in G, then Q rejrrt!wtts tiff one of the \nfollowing holds 1, t is an individual variable and 3 v c Qsuch that a(v)= t 2. t is of the form si(a) \nand 3 v cQand u cV such that ~ulJ represents a and u[il = v. 3. t IS of the form c(al, .... cck) and \n3 v c Q with outdegree k such that, for all i between I and k, uv[il] represents ai.  Because any E-graph \nG is bidirectionally closed, it follows that any term represented in G is represented by exactly one \nequivalence class of G. We now show what it means to add terms to an existing E-graph. Given an E-graph \nG and a term t, we define an extension G + t of G, which contains a representative for t, as follows \nThe graph structure of G + t is the disjoint union of the graph structure of G and G(t), and the label \nof any Iabelled vertex in G + t is just its old label in either G or G(t) The equivalence relation of \nG + t is the bidirectional closure of the extension of G s relation which makes all vertices of G or \nG(t) with the same label equivalent. The equivalence class of VG(t)(t) represents t in G + t.  Note \nthat the equivalence relation of G + t, restricted to the vertices of G, is just the equivalence relation \nof G. If t = u is an equality between two terms and G is an E-graph, we say that G entails t=u iff t \nand u are represented in G and their representatives are the same. Let t = u be an equality between two \nterms. If G is an E-graph, define G + (t = u) to be the E-graph obtained from G + t + u by merging the \nequivalence classes of V(t) and V(u).  efine {} 0be he mpty -graph Decision Algorithm Let F=tl=ui A... \nAtl=ulfirl# S} A... Arm #Sm. 1.construct G=E +(t =Ul) + +(t, =u,)+ri +S1+ ,,. + rm + sm. If G is not \nac&#38;ic, r~turn UNSATISFIABLE. 2. for i from I to m, if G entails ri = Si then return UNSATISFIABLE \n3. return SATISFIABLE. 2.4 Correctness of the Decision Algorithm We use the notation P 1-Q for formulas \nP and Q to indicate that P entails Q that is that every interpretation which satisfies P also satisfies \nQ An interpretation satisfies an equality t = u if the interpretations of t and u are the same. It is \nstraightforward to show that if our formula F E t ~ = u ~ A ... A t, = u, A rl # S1 A ... A r # Smis \nsatisfiable, then the decision algorithm will return SA I!lSFIABLE. Assume therefore that F is unsatisfiable. \nBy Herbrand s theorem, there are a finite number of instantiation 11, .... I of axioms I and 11 (of the \nforms C(sl(x), S2(X), .... Sk(x)) = x an c! Si(c(xl,...,xk)) = xi), and instantiation 11 ,..., Iq of \naxiom 111 (such as x # Sl(x)) such that F A 11 A ... A 1P A 11 A ... A Iq is unsatisfiable with c, Sl, \n.... Sk uninterpreted. We now need two lemmas. Lemma 1: Assume that c, S1, .... Sk are umnterpreted \nfunction symbols. Let F be the conjunction tl = u ~ A A t, = UI . Let tO and UObe terms. Let G be the \nE-graph E + t + u + (tl #oo U1) +... +(t,=Ul).Then F1-(t. =Uo)i toandU.are represented in G by the same \nequivalence class. That is, the equalities which are entailed by the conjunction are precisely those \nwhich are entailed by G. Proofi The if part is trivial. To prove the only if part, assume tO and UO are \nrepresented in G by different equivalence classes. We will construct an interpretation # which satisfies \nthe conjunction, but for which #(to) z #(uo). Let S be the partition of the vertices of G corresponding \nto the equivalence relation w of G. # maps individual variables into elements of S (i.e. equivalence \nclasses of vertices) and k-ary function symbols into functions from Sk to S. In what follows, we restrict \nour attention to the terms of to, UO and F. If x is an individual variable, let ~(x) be the equivalence \nclass representing x. Let #(c)(Ql, .... ~) be the equivalence class of any vertex v in V with outdegree \nk such that for all i between 1 and k, v[i] ~ ~. If no node v exists satisfying this condition, then \nI#(c)(Q1, .... ~) is arbitrary. (If vertices u and v both satisfy this condition, then they are in the \nsame equivalence class, since G is bidirectionally closed.) Let #(si)(Q be the equivalence class of any \nvertex v in V for which there is a vertex u in Q such that v = u[i]. If no such vertex exists, then #(si)(Q \nis arbitrarfi if two such vertices exist, they are in the same equivalence class. Now we claim that the \ninterpretation of a term t under #, ~(t), is the unique Q such that Q represents t. This is certainly \ntrue if t is atomic. If t is of the form c(tl, ,.., tk), then we may inductively assume $(tl), .... ~(tk) \nrepresent ti, .... tK By the definition of G + t, there 1s a vertex v in G with outdegree k such that \nfor all i between 1 and k, v[il e ~(ti). Therefore, $(t) is the equivalence class of v and $(t) represents \nt. If t is of the form si(t ), we may inductively assume #(t ) represents t . By the definition of G \n+ t, there are vertices u and v in G such that u c #(t ) and u[i] = v. Therefore #(t) is the equivalence \nclass of v and $(t) represents t. Therefore every equality ti = Ui of the conjunction is satisfied by \n$ , since the representatives of ti and Ui are merged in G. Since we are assuming # does not satisfy \nthe formula to # UO, it must be that #(tO) * #s(uO), i.e. that tO and UO are represented by different \nequivalence classes in G. Lemma 2: Let G be an E-graph. Let F be an instantiation of axiom I or axiom \nII. Then the equivalence relation of the E-graph G + F, restricted to the vertices of G, is just the \nequivalence relation of G Proof: Suppose F is Si(c(x ~,...,xk)) = xi (the case for axiom I is similar). \nIf G contains a representative for SJC(X~,...,xk)), then G already entails Si(c(x ~r..,xk)) = xi since \nG is an E-graph. If G does not contain a representative for Si(c(x ~,...,xk)), then constructing G + \nSi(c(X, ,...,xk)) = xi cannot cause any pair of vertices in G to be merged. Proof of correctness of Decision \nAlgorithm (cent inued): Let G be the E-graph constructed by the algorithm. By Lemma 1,G +I~ +...+I mustentail \nr.=Sifor someibetween 1 and m or -Ii for some Ii etween 1 and q. But -Ii is of the form x = t where t \nis a term like Sl(x). Since G is acyclic under bidirectional closure, -Ii cannot be entailed. So we are \nleft with r. = Si. By Lemma 2, the equivalence relation of G + 11 + ... + I , restricted to the vertices \nof G, is just the equivalence relation of Cl : But each ri and Si is represented in G, so G must entail \nri = Si, in which case step 3 of the algorithm will return UNSATISFIABLE. 2.5 Linearity of the Decision \nAlgorithm G can be constructed in several ways, but some care must be taken if it is to be constructed \nin linear time, that is, in time O(n) where n is the length of the formula F. We will describe one way \nof doing so. do not bother to identify common subexpressions distinct occurrences of similar subterms \nof t will be represented by distinct vertices in G(t). However, we will keep a list of pairs <t,V(t)> \nfor each term ti, Ui, ri and Si in the formula. We will keep a list of pairs <a, V(a)> for each occurrence \nof each atomic symbol a in the formula. We then form GO, the disjoint union of these graphs. The number \nof vertices and edges in GO is O(n) and the time required to construct Go is also O(n). Step 2. We will \nadd to the graph the equalities asserted in the formula by making equivalent the pair of vertices V(ti) \nand V(ui) for each equality ti = Ui in the formula. Since in Step 1 we kept track of each V(ti) and V(ui), \nwe can do Step 2 in time O(n). Step 3. We now make equivalent all vertices with the same label. Each \nsuch vertex represents an atomic symbol in the original formula and so appears in the list of pairs <a, \nV(a)> constructed in Step 1. Under a reasonable model, we can sort this list on the first argument of \neach pair <a,V(a)> in time O(n) using lexicographic sorting. We then scan through this list; for each \npair of adjacent eiernents <a V(al)> and <a2, V(a2)> in this list, if al = a2, then we make eql~ivalent \nV(al ) and V(a2). This step again takes time O(n). (In practice, this elaborate method would not be used. \nInstead, we would use a hash table to store V(a) for each a, and would never create two vertices with \nthe same label. Languages such as LISP support this very efficiently.) Step 4. Finally we construct G, \nthe bidirectional closure of the relation on Go constructed in the previous steps. Again we can do this \nin linear time, as shown in Section 2.2. Notice that in constructing the bidirectional closure, we will \nautomatically identify (make equivalent) all common subexpressions. 2,6 Type Predicates Once the graph \nhas been bidirectionally closed, it is an easy check to see, for instance, that a term asserted to be \nan ATOM (in LISP) is not represented by an equivalence class which also represents a term of the form \nCONS(x,y). Checking that type predicates of this sort are satisfied does not affect the running time \nof the algorithm. 3. The First-order Theory For concreteness, we will consider the first order theory \nof list structure (with function symbols CONS, CAR and CDR and predicate symbols = and ATOM). First, \nthe decision algorithm given in the previous section for quantifier-free conjunctions can be modified \nto be the basis for a quantifier-elimination method for this theory. However, it is more interesting \nto derive the decidability and complexity of this theory from existing results in logic on theories of \npairing functkm, Step 1. For each term t in the formula, we construct G(t). We A pairing function on \na set S is a one-one map J : S x S + S. An example of a pairing function over the natural numbers is \nthe function J(x,y) = 2X3Y. Associated with each pairing function J are its projection functions K and \nL. These are partial functions S + S satisfying K(J(x,y)) = x and L(J(x,y)) = y. Since K and L are partial, \nwe will formally consider all functions as relations but will continue to write. for instance, K(z) = \nx instead of K(z,x). (An alternative would be to make all functions total by introducing 1, the undefined \nelement, into the logic.) Following [Tenney 1972, 1977], K and L satisfy the axioms 1.VXVy3!z[K(z) =XAL(z) \n=y] 2.VZ[3X(K(z) =XVL(z) =X) ~ 3!x 3!y (K(z) = X A L(z) = y)]  The pairing function J is defined in \nterms of K and L by J(x,y) = Z s K(z)= X A L(z)= y. The first order theory of pairing functions (the \nfirst order theory with these axioms) is undecidable (unpublished results by Hanf, Scott, and Morley). \nHowever, with appropriate additional axioms, the theory is decidable. These additional restrictions on \nK and L correspond to the acyciicity condition we put on our recursively defined data structures together \nwith the decidabiiity of the theory of atoms. First, we partition the set S into two disjoint parts, \nthe set A of atoms and the set S -A of non-atoms. ATOM(x) holds if and only if x is an atom, The following \ninfinite axiom schema requires that the pairing function be acyclic on all non-atoms. 3. (Acyclicity) \nVZ[=ATOM(Z) A3X(K(Z) .X)3 K(z) #z] VZ[=ATOM(Z) A3X(L(Z). X) OL(Z) *z] b z[ -ATOM(z) A3X(K(L(z)) =X)oK(L(z)) \n#Z1 ... Next, if z is not an atom, it must have projections. 4.Vz[1ATOM(z) ~3X(K(z) =X)] Vz[ ~ATOM(z) \n23X(L(z) =X)1  Finally, once an element z lies in A, all iterations of projection functions from z (as \nlong as they are defined) must lie in A, 5,vz [ATOM(z) A3X(K(z) =X) o ATOM(K(Z)) A ATOM(L(Z)) 1 A pairing \nfunction satisfying these axioms is defined to be acyclic except for A. empty. [Tenney 1972, 1977] reduced \nthe question of decidability to the decidability of the theory restricted to the atoms if the latter \nis decidable then so is the former. It is the latter result that we will use. Let us return now to the \ntheory of list structure. CONS is the pairing function J, CAR is the left projection K, CDR is the right \nprojection L, S is the set of s-expressions, and A is the set of atoms. By Tenney s theorem, the first \norder theory of list structure is decidable if the theory of atoms under CAR, CDR and = is decidable. \nThere are many possible choices for A and its associated theory. First, A might be infinite (as in LISP) \nor consist of the single atom NIL (as in Boyer and Moore s original prover). Secondly, CAR and CDR may \nor may not be defined on all or some of the atoms. If defined, CAR and CDR may be c~lic or acyclic (for \ninstance, we might choose CAR(NIL) and CDR(NIL) to be NIL as in MA CLASP). Regardless of the choice, \nas long as the theory of atoms is decidable, so is the overlying theory of list structure. For a reasonable \nchoice of the theory of atoms, its decidability is apparent. Unfortunately, although the theory of list \nstructure is decidable, an efficient decision procedure for it cannot exist. [Rackoff 1975] has shown \nthat no theory of pairing functions admits an elementary recursive decision procedure, that .2 is one \nwhich always halts in time 22 for any fixed number of 2 s (n is the length of the formula). It follows \nthat any decision procedure for the theory of list structure must be very inefficient in the worst case. \nA Ithough Tenney proved his result for pairing functions S x S + S, his argument holds as well for k-ary \npairing functions, that is pairing functions Sk + S which satisfy the obvious generalization of the above \naxioms. Similarly, Rackoff proves that his lower bound also applies to any k-ary pairing function. It \nfollows that, given a recursive data structure with constructor c and selectc rs s~, .... Sk satisfying \nthe obvious generalization of the above axioms, the associated first order theory is decidable but not \nelementary recursive. Acknowledgments I acknowledge with thanks the helpful discussions I have had with \nGreg Nelson, Rob Shostak, Bob Tarjan and Richard Tenney. N. Suzuki (private communication) has also proved \na theory of list structure decidable, References [Boyer and Moore 1977] R. Boyer and J Moore, A Lemma \nDriven Automatic Theorem Prover for Recursive Function Theory , Proceedings of the Fifth IJt2AI, 1977. \n[Downey and Sethi 1977] P. Downey and R. Sethi, Finding Consider the first order theory with the above \nas axioms. Common Subexpressions , submitted for publication. [Mal cev 1961, 1962] proved that the theory \nis decidable if A is [Goguen et al 1975] J. Goguen, J. Thatcher, E. Wagner and J. Wright, Abstract Data-types \nas Initial Algebras and Correctness of Data Representations , Conference on Computer Graphics, Pattern \nRecognition and Data Structure, May 1975. [Guttag, Horowitz, Musser 19761 J. Guttag, E. Horowitz and \nD. Musser, Abstract Data Types and Software Validation , Technical Report ISI/RR-76-48, Information Sciences \nInstitute, University of Southern California, August 1976, to appear CACM. [Guttag and Horning 1977] \nJ. Guttag and J. Horning, The A Igebraic Specification of Abstract Data Types , to appear Acts Inform \natica. [Hoare 1975] C. A. R. Hoare, Recursive Data Structures , International Journal of Computer and \nInformation Sciences, June 1975. [Johnson and Tarjan 19771 D. S. Johnson and R. E. Tarjan, Finding Equivalent \nExpressions , manuscript. [Mal cev 196 II A. Mal cev, On the Elementary Theories of Locally Free Universal \nA Igebras , Soviet Mathematics -Doklady, 1961. [Mal cev 1962] A. Mal cev, Axiomatizable Classes of Certain \nTypes of Locally Free Algebras , Sibirskii Matematicheskii Zhurnal, 1962. [McCarthy 1977] J. McCarthy, \nRepresentations of Recursive Programs in First Order Logic , manuscript. [Nelson and Oppen 1977] C. G. \nNelson and D. C. Oppen, Fast Decision Algorithms based on Union and Find , Proceedings of the 18th Annual \nIEEE Symposium on Foundations of Computer Science, October 1977. [Nelson and Oppen 19781 C. G. Nelson \nand D. C. Oppen, A Simplifier based on Efficient Decision Algorithms , Proceedings of the Fifth ACM Symposium \non Principles of Programming Languages, January 1978. [Paterson and Wegman 19771 M. Paterson and M. Wegman, \nLinear Unification , to appear JCSS. [Rackoff 19751 C. Rackoff, The Computational Complexity of some \nLogical Theories , Ph. D. thesis, M. I. T., 1975. [Tenney 19721 R. Tenney, Decidable Pairing Functions \n, Ph. D. thesis, Cornell University, 1972. [Tenney 1977] R. Tenney, Decidable Pairing Functions , submitted \nfor publication. [Zilles 1975] S. Zilles, Abstract Specifications for Data Types , IBM Research Laboratory. \n$an Jose, 19?5. .  \n\t\t\t", "proc_id": "512760", "abstract": "A decision algorithm is given for the quantifier-free theory of recursively defined data structures which, for a conjunction of length n, decides its satisfiability in time linear in n. The first-order theory of recursively defined data structures, in particular the first-order theory of LISP list structure (the theory of CONS, CAR, CDR), is shown to be decidable but not elementary recursive.", "authors": [{"name": "Derek C. Oppen", "author_profile_id": "81332519577", "affiliation": "Stanford University, Stanford, California", "person_id": "PP42050081", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/512760.512776", "year": "1978", "article_id": "512776", "conference": "POPL", "title": "Reasoning about recursively defined data structures", "url": "http://dl.acm.org/citation.cfm?id=512776"}