{"article_publication_date": "10-01-1996", "fulltext": "\n Objects on the Server: Are We Ready? Panel Session Yen-Ping Shan, Tom Morgan, Phil Proudfoot, Jim Thompson, \nJohn Tibbetts, Al Woolfrey Abstract: Object-oriented concepts such as What would be desirable for technology \nreuse and encapsulation offer many benefits to providers (researchers and vendors) to application development, \nparticularly in provide? (Tools, languages, execution managing complexity and change. All the environments \nthat represents vendor benefits of 00 that apply to the client can apply opportunities.) equally well \nto the server. However, until Practical advice to organizations interestedrecently, these concepts have \nproven to benefit . in introducing objects to the server. only the client side. Could there be any intrinsic \nor conceptual reason for this? Or could it be a Tom Morgan result of timing, the availability of the \ntools, and My experience with object servers is formed bythe conservative restraints that result from \nthe the implementation of our object oriented utilitymission-critical nature of server computing? customer \ninformation system( 1). In that system, a clear architectural separation of interface, This panel will \nexplore the roles of objects on function and basic domain behaviors was the server by examining the experiences \nof the realized by means of object oriented techniques. panelists from a technology consumer s These \nlayers correspond to the view-controller- perspective. By doing so, we would like to model structure, \nbut the controllers are various provide insights for corporations that are making events in the business \nenvironment, not just decisions on 00 technology, point out pitfalls computer interface events like mouse \nclicks. Analong the way, and identify potential event in this system is: a meter read arrives . Aopportunities \nfor technology providers. function is: if the read is suitable for producing a bill, do so . The model \nobjects are the meters, All panelists have developed production level meter readings and the events themselves. \nobject servers. The panel will answer the question of whether we are ready for object In the six years \nthat the system has been in servers by discussing the following issues: operation, we have extended the \nevent and . Different server types: transactional server, functional layers with new events and functions \ndata server, application server, web server, and entire new classes of events, while etc. Are they really \nthat much different? preserving a large set of model objects and Which one is the most important kind? \nbehaviors. . Experience in implementing and We arrived at the need for this structure prior to maintaining \nobject systems on the server: any knowledge of object oriented techniques. the configurations of the \nsystems and how The architectural structure is actually a natural they were arrived at; the tools and \nevolution of some of the design techniques programming languages used. commonly used in transaction \nsystems, which . Benefits and drawbacks of server object often find themselves with complicated issues \nsystems. related to the management of state in evolving but not yet complete transactions. . What s hard? \nWhat s easy? . What are the prerequisites for pervasive The principal benefit that accrued from the use \ndeployments of objects on the server? (e.g., of objects in this implementation, in my view, standards, \napplication types, customer has little to do with software engineering and a situations, tools, and languages.) \nlot to do with facilitating communications between individuals in the structured social environment of \nan enterprise. The explicit presence of a model and frameworks is suggestive, as is the work on terminology \nwhich is more or less consistent meta-object protocols at PARC. between technicians who implement and \nbusiness people who consume the &#38;ilities of the system reduces the girt and friction involved in \nimplementing and maintaining a large business system. The system in some sense provides an application \nspecific language, which is used to describe what the system is to do, within the confines of the region \nin design space that it is capable of reaching. The benefit of the presence of objects in this system \nconsists not so much in arguments related to computer science, but in terms in of aids to thought and \nease of explication. The objects are a convenience in achieving a useful separation of concerns for the \nsystem as a whole. For example, I can easily explain to a new programmer on my system about the meters, \nbuildings and customers that are manipulated by it; it is not so easy to explain why abstract data types, \nwith inheritance are useful to this same programmer, never mind the client organization who wants the \nsystem to do something new. I believe this is something to accept and get used to; at the bottom , where \nthey meet the processors and networks, large software systems are best thought of as engineering artifacts. \nThere, software engineering is an apt description; but, at the top of such systems, where they meet the \ncurrent concerns of the enterprise of which the system is a part, there is no escaping the messy necessities \nof comprehension, communication and understanding of all of the elements of the system as a whole, including \nthe human beings who use and look after the system. It s here the objects on servers have proven useful \nto us. The system that I am describing is essentially closed; we built it, we change it, we use it. The \nunderstanding of the objects of the system derives from the shared understanding of the community of \npeople surrounding it. This seems to me the greatest difficulty in the widespread use of server objects. \nThere is a lot of semantics to be conveyed about the objects and what they do. We understand our objects, \nbecause we live with them everyday. It is very hard to see how to convey that understanding as part of \na box of objects that you have just acquired. Here is a rich source of research work, it would seem to \nme. The work on patterns and It s my feeling that no amount of static description will prove adequate \nto convey the full set of semantics of a box of complicated objects . They will need to be self describing, \nand there will need to be ways to take them out for a test drive, before they will be understood by the \npeople who will use them, and by the other objects in the environment they will be added to. I believe \nthat the recent legitimization of dynamic object oriented languages (with object mobility) in the world \nview of the practicing programming community (I m thinking of Java here) will provide a strong impetus \nto server based objects. Application tiering is a popular topic of discussion -where, physically, should \nI position what kind of system behavior. When physical placement is removed as an obvious organizing \nprinciple (however flawed) and a designer is left with a school of objects adrift on a network sea, there \nwill be a strong impetus to deal with the problems of what these drifting objects should do when they \nbump into each other. At first, the obvious choices will be to have the objects imitate interface behaviors \nfor each others benefit (witness various Apple Event and OLE enablement in the browsers), but that will \nprove unsatisfactory. The drifting objects will want to know each other more directly. In terms of technical \nsolutions, tools or things to make, in order make my life easier, the provision of practically motile \nobjects and all that implies is probably the most useful thing that someone could be doing for me at \nthe moment. It s the right balance of too hard to do, with what I have , but not so hard that it still \ncounts as research . In terms of where to look for possible ways of dealing with these interactions, \nthe so called conversation for action (2) model of interaction between individuals seems like an interesting \nway to think about how an object and a potential user of that object might go about getting acquainted. \nEven if that model is flawed, the search for techniques derived from social interaction seems to me a \nbetter area than engineering or computer science models. (1) J. Davis and T. Morgan, Object-Oriented \nDevelopment at Brooklyn Union Gas, IEEE Software, vol. 10, no. 1, Jan, 1990, pp. (2) (2) T. Winograd \nand F. Flores, Understanding Computers and Cognition -A New Foundation for Design. Addison-Wesley, Reading, \nMass., 1990, pp. 64-69.  67-74. Tom Morgan holds the position of Manager of Technology Development \nat the Brooklyn Union Gus Company, in Brooklyn, New York. He has 23 years of experience in information \ntechnology, having heldpositions in data processing operations, systems programming and applications \ndevelopment, He has been the designer of several major information systems and qfa commercially available \ndevelopment tool for 082 bused systems. He has lectured nationally and internationally on applications \narchitectures and the use of object oriented techniques in the development of large scale information \nsystems. Phil Proudfoot Absolutely! We have reached an important crossroads of technology and business \nneed that will not be denied. While objects have assured themselves a place on the lower risk client \nside of the client/server equation, they have yet to make significant inroads into the back office, server \nside of the same equation. This is definitely changing -here s why: The important object languages (Smalltalk, \nC++) either currently support or have planned support for mainframe or host class server environments. \nMVS Smalltalk will have a dramatic effect on the value of objects in this world. Close proximity to enterprise \ndata, and shareable existing process code, coupled with the benefits of the language (productivity, quality, \netc.), will make a compelling case for its expanded use. Large corporations face a growing problem of \nlegacy systems that exacerbate the problems inherent to traditional procedural applications. Low developer \nproductivity, poor quality, and elongated time to market scenarios, are forcing the staunchest nay sayers \nto take a serious look at object languages for relief. The convergence of these two realities should \ncause a significant investment in projects that seek to test the viability of object solutions in server \nenvironments. Now is the time for the server to provide the same level of flexibility that the client \n(workstation) has demonstrated for years. Clients are reaching the boundary of what they can provide \nwithout changing the server application. These workstation applications are becoming overly complex and \nwill soon represent the next legacy problem. By building robust object oriented servers we can begin \nto remove some of the client complexity and more evenly match function and flexibility. Now is the time \nto invest in server development to support changing ways of doing business. Object technology is the \nright technology choice, and host servers are appropriate platforms. Philip F. Proudfoot is Director \nof Advanced Technology within Prudential s Individual Insurance Group (IIG). The IIG supports the administration \nof approximately 18 million inforce policies and the underwriting of about % million new-business policies \nper year for Prudential92s Individual Insurance line of business. IT development for IIG is distributed \nacross four sites in Roseland, NJ, Jacksonville, FL, Minneapolis and Fort Washington, PA, and employs \nmore than I, 000 systems professionals. Phil has I7 years of experience within Information Systems at \nthe Prudential Insurance Company of America, with hands on familiarity with varied computing architectures. \nHe has spent the lastfour years heading up an Advanced Technology team targeting the use of Object Technology \nfor insurance administration server functionality. His vision includes the near term use of MVS Smalltalk \nto support mission critical back office business processes. Jim Thompson Mr. Thompson is System Architect \nfor Texaco Natural Gas Inc. He is currently working on a Natural Gus Trading System in Smalltalk and \nits interfaces to accounting and billing systems. Mr. Thompson has six years of object design and programming \nexperience and I7 years qf application and architecture development experience. Mr. Thompson received \nhis MSc. in Transportation Engineeringfrom Northwestern University and a B.Sc. in Systems Engineering \nfrom Tulsa University. John Tihbetts Contextualizing server objects It s tempting (but inadequate) to \nthink of objects on the server as merely the next place for objects to go. They re really much more than \nthat. Server objects are the end result of a long-growing trend to make servers chunkier and clients \nthinner. Best yet, they free us from the need to think about client design and server design separately. \nWith server objects, the object design paradigm is complete: we can think about the application needs \nholistically -only later do we think about the distribution and packaging issues. What s hard and what \ns not While the application design needs get simpler, the real- world deployment issues can be quite \nanother matter. The actual distributed object plumbing issues are increasingly handled by ORBS. But two \nspecific issues -transactional integrity and security -still lag behind in deployment options. Implementers \nneed to understand what s there and what s not. They also need to understand the implications and the \npenalties of workarounds. New kinds of objects may appear on the server Perhaps the biggest surprise \nis that new kinds of objects may actually start appearing when fully distributed object systems are designed. \nIf you re object habits have trained you to recognize Models, Views, Controllers, and a basketball of \nbase classes you may be surprised to find a new category of workflow-ready objects (we call them Documents) \nthat encapsulate the state of the business process as it evolves. Putting objects on the server changes \nthe very way we think of the problem. John Tibbetts is a well-known developer and theorist, He is president \nof Kinexis, a San Francisco consultingfirm that specializes in computer architectures, distributed computing, \nand applying object technology to commercial transaction processing systems. His Tibbetts and Bernstein \ncolumn appears every three weeks in Information Week. He was OOPSLA S keynote speaker in 1991. He has \nalso spoken at the index Vanguard Technology Forum, Object World, Networks Expo, HRMS Expo, the Business \nWeek Executive Forum, GUIDE and SHARE. He consults with a variety of large corporations, as well as hardware \nand vendors, on distributed systems and objects.  Al Woolfrey CIBC is a large Canadian financial institution: \n1500 branches across Canada, 40,000 employees, 6,000,OOO personal and 300,000 commercial customers, and \n200+ products. We process over 1 million on-line transactions per day, peaking over 150 transactions \nper second. Many of our product systems are aging and need updating. CIBC began investigating Object \nOrientation in 1990, and had established 00 as a strategic direction for application development by mid- \n1992. Because our need was to replace product systems, we began with a server orientation...leaving updating \nthe user interface technology for a later time. We believed the best approach was to train some of our \nbest COBOL mainframe analysts and programmers in 00 design, and to provide them with a run- time infrastructure \nwhich enabled implementation of an 00 design using COBOL methods. The infrastructure was modeled after \nSmalltalk: class/instance, inheritance, polymorphism, encapsulation, and object identity were achieved. \nA class hierarchy definition tool was built using lex and yacc. A key decision was to enable transparent \nobject persistence, which meant that implementers of the business objects did not have to explicitly \nstore and retrieve objects from the underlying DBMS; this was performed transparently by the run-time \ninfrastructure. After some initial experience with this approach in early 1993, a larger scale project \nwas launched. Several important experiences and lessons followed. The project was successfully implemented \nin late 1994, and successive functional releases occur to this day. My position is that, not only are \nwe ready- for objects on the server, the server is where objects provide us with the greatest advantage. \nThe hardest business problems, in my experience, are shared database, multi-user, server-based applications. \nWhat better enviromnent to exploit the prime benefit of object orientation...the increased ability to \nmanage complexity? User interfaces today, unless they have requirements for a high degree of interaction, \ncan be delivered to the masses of users by thin client (Web browser) technology: dynamic HTML supplemented \nby such tools as JavaScript and Java. Tools which allow highly interactive and creative user interfaces \nare overkill for the majority of business problems. What is important for delivering object oriented \napplications on the server? In my view: a language which enables rapid modeling of the business problem; \nthe ability to restructure the evolving solution without undue pain; an effective team programming environment; \nand transparent object persistence. All are important, but transparent object persistence has turned \nout to be very helpful to us. First, the fact that developers need not program around Do I need to load \nthe object? , and Is this the last time I m going to change it? is clearly beneficial. More importantly, \nwe are able to separate the database design from the application design, and implement transparent object \narchiving, for example; no application code needed be changed to implement this performance benefit, \nand other structural changes were made without application impact. By the way, we use IMS (hierarchical) \nFastpath databases for performance reasons, but we could easily change to a relational model if appropriate. \nA true object database with garbage collection would be ideal, of course, but this option was not available \nat the time. CIBC s experience demonstrates that objects belong on the server, where hard business problems \ndeserve the best available technology. Allen Woolfrey has over 28 years of experience in software design \nand development, database design and administration, first and second line management, and technical \narchitecture. He has worked in finance, government, and consulting organizations. Allen led CIBC s initiative \ninto object orientation, was technical architect of the mainframe object oriented infrastructure, and \nled the infrastructure development team from concept through production usage. He also trained and consulted \nwith CIBC designers and developers, and worked to establish standard practices. His current interests \nare electronic commerce over the Internet, and the exploitation of Internet technology for delivery of \ninternal applications, including usage of Web browser technology to deliver application user interfaces. \n Yen-Ping Shan Yen-Ping Shan is with IBM s RTP laboratory. \n\t\t\t", "proc_id": "236337", "abstract": "Object-oriented concepts such as reuse and encapsulation offer many benefits to application development, particularly in managing complexity and change. All the benefits of OO that apply to the client can apply equally well to the server. However, until recently, these concepts have proven to benefit only the client side. Could there be any intrinsic or conceptual reason for this? Or could it be a result of timing, the availability of the tools, and the conservative restraints that result from the mission-critical nature of server computing?This panel will explore the roles of objects on the server by examining the experiences of the panelists from a technology consumer's perspective. By doing so, we would like to provide insights for corporations that are making decisions on OO technology, point out pitfalls along the way, and identify potential opportunities for technology providers.All panelists have developed production level object servers. The panel will answer the question of whether we are ready for object servers by discussing the following issues:&amp;bull; Different server types: transactional server, data server, application server, web server, etc. Are they really that much different? Which one is the most important kind?&amp;bull; Experience in implementing and maintaining object systems on the server: the configurations of the systems and how they were arrived at; the tools and programming languages used.&amp;bull; Benefits and drawbacks of server object systems.&amp;bull; What's hard? What's easy?&amp;bull; What are the prerequisites for pervasive deployments of objects on the server? (e.g., standards, application types, customer situations, tools, and languages.)&amp;bull; What would be desirable for technology providers (researchers and vendors) to provide? (Tools, languages, execution environments that represents vendor opportunities.)&amp;bull; Practical advice to organizations interested in introducing objects to the server.", "authors": [{"name": "Yen-Ping Shan", "author_profile_id": "81100400936", "affiliation": "IBM's RTP laboratory", "person_id": "P305340", "email_address": "", "orcid_id": ""}, {"name": "Tom Morgan", "author_profile_id": "81100581252", "affiliation": "Technology Development, Brooklyn Union Gas Company, Brooklyn, New York", "person_id": "PP14200707", "email_address": "", "orcid_id": ""}, {"name": "Phil Proudfoot", "author_profile_id": "81100210882", "affiliation": "Individual, Insurance Group (IIG)", "person_id": "P226047", "email_address": "", "orcid_id": ""}, {"name": "Jim Thompson", "author_profile_id": "81332531598", "affiliation": "Natural Gas Trading System in Smalltalk and Texaco Natural Gas Inc.", "person_id": "PP37039417", "email_address": "", "orcid_id": ""}, {"name": "John Tibetts", "author_profile_id": "81100287843", "affiliation": "President of Kinexis, San Francisco", "person_id": "P146266", "email_address": "", "orcid_id": ""}, {"name": "Allen Woolfrey", "author_profile_id": "81100295730", "affiliation": "", "person_id": "P15507", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/236337.236377", "year": "1996", "article_id": "236377", "conference": "OOPSLA", "title": "Object on the server: are we ready? (panel)", "url": "http://dl.acm.org/citation.cfm?id=236377"}