{"article_publication_date": "10-01-1996", "fulltext": "\n 00 Anthropology: Crossing the Chasm Panel Session Steven Fraser, Alistair Cockburn, Leo Brajkovich, \nJim Coplien, Larry Constantine, Dave West Abstract: Anthropology is the study of civilization, particularly \nits societies, customs, structure, and evolution. Our premise is that there are cultural chasms to be \ncrossed to ensure the success of the technological beach-head established by innovators and early adopters \nof the 00 paradigm. Our panelists will address the following questions: . What anthropological cultural \nfactors have to be matured (and how?) to foster the success of the 00 paradigm? What mechanisms are required \nto facilitate communication between cultures of differing maturity? . What cultural chasms must be crossed \nto develop a successful organization/culture within the framework supported by the object-oriented paradigm \n(or more perversely, is there anything special about the 00 paradigm)? This panel will interest practitioners \nas a forum to share and debate experiences related to our current-day software culture metamorphosis. \nLeo Braj kovich Similar to the pan-human study of kinship, 00 Anthropology has to decipher the roles \nand relationships that are important to the development and success of 00 projects. Once deciphered, \nthese roles must be staffed, developed, and managed similar to any other position in an organization. \nPast research suggests that some group structures (and management styles) are better suited to certain \ntypes of work. For instance, hierarchical group structures are better suited to stable, somewhat routine \ntasks, while egalitarian (decentralized) structures are better suited to highly variable, complex tasks. \nSince 00 development can involve problems defined all along the continuum of stable/routine to variable/complex, \nits study will require mapping the relationships between work group members and analyzing the roles that \nare key to group success. Recent research on emergent roles in high technology start-up organizations \nsuggests that liaisons, or individuals that possess knowledge and skills spanning various disciplines \nand are linked in the social network to various emerging groups, are a valuable catalyst to team functioning \nand superior performance. Research also suggests that liaisons are typically unacknowledged/unperceived \nand systematically under-appreciated by managers. As more and more work group situations are understood \nin this manner, and our systematic knowledge is increased and capitalized on, we shall cross the chasm. \nLeo Brajkovich is a Consulting Sociologist and Project Director with International Survey Research Corporation \n(ISR). He has directed many employee an management research projects for Fortune SO0 companies. His research \nfocuses on employee and organizational cognition, organization culture(s), work group dynamics and functioning, \nand overall organizational effectiveness. His published work has appeared in academic andpractitioner \njournals. In 1992, he received an Awardfor Excellence from the Pacific Division of AAAS. In addition \nto a Ph.D. in Social Science from the University of California, Irvine, he holds Master s degrees in \nMathematical Behavioral Science and Sociology, and Bachelor s degrees in Physics and Sociology. Prior \nto ISR, he worked at the RAND Corporation, Ultrasystems Incorporated, and the Hughes Aircraft Company. \n Jim Coplien What anthropological cultural factors have to be matured (and how?) to enable the 00 paradigm? \nLittle of software culture relates to paradigm per se. At some level, we have confusion in language and \nterminology and divergence in ceremony (methodology). I see these as issues of healthy individuation, \nand don t raise them to the level of culture as much as others do. And I don t think culture aligns as \nclosely with paradigm or method as anyone would have us believe. What mechanisms are required to facilitate \ncommunication between cultures of differing maturity? Trust is a great communication enabler. For two \ncultures to communicate with each other, each must be convinced the other has something to offer. In \nthe worldview of software paradigms, that means letting go of part of my worldview and making room for \nothers. Gosh, maybe there is room for databases in my 00 Weltanschaung! Next, I must go beyond the acceptance \nto understanding: exactly where can databases help me? Those who can let go of their 00 identity and \nbroaden to other cultural models can help lead individual cultures to broader perspectives. My own work \nin multi-paradigm design might be one example of such an effort. Language can be a powerful tool to bridge \ncultures, and programming language is no exception. C++ evidences carefully considered compromises designed \nto bridge the C culture with an emerging object culture. The compromise is a turn-off to those who wish \nto remain culturally isolated, but its wide acceptance speaks clearly to the success of the technique. \nShould our future languages do this? The issue of disparate maturity is a hallmark of technological trades. \nWe must learn to acknowledge the value of technologies whose heyday is past, displaced by successive \nsources of hopes for panaceas. That s a tough row to hoe, but patterns have made interesting inroads \nin this area. I m encouraged by the progress we ve made. What cultural chasms must be crossed to develop \na successful organization/culture within the framework supported by the object-oriented paradigm (or \nmore perversely, is there anything special about OO)? 1 think that there is neither anything particularly \nspecial about 00, nor that this is the only goal towards which we should strive. We should continue to \nwork on convergence in vocabulary, share understanding of recurring solutions (folklore), but not in \nmethod, process, or other ceremonial attributes of the object culture. These haven t proven themselves \nterribly useful. Furthermore, we should reach out to other disciplines and cultures to integrate with \nthem, including cultures outside of computer science and altogether outside of technology. We can learn \nmuch from crafts-people and artists. I think we ll have fully appropriated the cultural aspects of the \nobject paradigm and other facets of software culture when we cease to think of them as sciences, and \nstart thinking of them as art. In fact, that step may be a necessary precondition to the beginnings of \nmeaningful cross-cultural dialogue. Jim Coplien is well-known as an author and speaker in the areas of \nadvanced C++, object- oriented design, and software patterns. He is a principal investigator at Bell \nLabs, where his research agendas include empirical studies of software development organizations, multi-paradigm \ndesign, and legacy software pattern mining. He is one of the editors of the PLOP book series (two volumes), \nand is author of Advanced C++ Programming Styles and Idioms, of the Software Patterns White Paper, and \nof a forthcoming book on multi-paradigm design. He writes a regular column on patterns, is on the program \ncommittee of ECOOP 96 and COOTS, and the program chair for OOPSLA 96. His extracurricular interests include \ngenealogy and Aikido.  Larry Constantine Cultural anthropology since the 19th century has been systematically \nshedding the vestiges of a worldview that saw some cultures (usually Western European in origins) as \nmore advanced or mature than others. Despite their appealing conceptual elegance, linear models of progressive \nmaturation within the human sciences, whether in child development, moral reasoning, group development, \nlanguage acquisition, or family development, have steadily declined in influence and favor among scientists \nif not practitioners. Under the light cast by more sophisticated research and emerging empirical evidence, \nthe inherent, multi-threaded complexity of human developmental patterns has had to be recognized. The \nfield of computer software engineering, however, remains enthralled by simplified, stagewise notions \nof progress and maturation, most notably the group-oriented Capability Maturity Model, and the individualized \nPersonal Capability Maturity Model developed by the Software Engineering Institute at Carnegie Mellon. \nThis notion of advancement is also implicit in much of the writing on the emergence and evolution of \nthe object-oriented paradigm, which is seen to be a later and more highly developed view of software \nand applications development than the traditional structured or procedural methods and models it purports \nto replace. Having both actively advocated the adoption of object technology and publicly predicted \nits eventual triumph as a conceptual and practical tool within the discipline, I nevertheless remain \na skeptic as to its paradigmatic status. As such, of course, I am regarded by some as an irredentist \nof questionable repute. If it is a paradigm in the strictest Kuhnian sense, then object orientation is \ngrounded in implicit and unexamined assumptions that can only be fully understood from without. These \ntacit foundations not only color the cultural interpretations of its adherents, but can historically \nand dialectically be anticipated to contribute to its own eventual replacement, not by something necessarily \nsuperior or more mature but most certainly by something different that will likely incorporate its most \ntenable tenets as a subset. Only to the extent that the evolution of practice and theory in software \nengineering begins to be more informed by empirical investigation and systematic research can we anticipate \nthat stepwise progress will begin to play a greater role than that now played by the charismatic personality, \nmarket dominance, and conceptual rhetoric that have thus far dominated the debate. If we are to sort \nout questions of cultural maturity we must look both backwards to the historical roots of competing concepts \nand forward to an invigorated program of investigation that supplements if not supplants philosophical \nspeculation with generous doses of observation, measurement, and accurate reflection on the historical \nrecord. Larry L. Constantine is one of the pioneers of software and applications development methodology \nwho has also made recognized contributions in the human sciences, including original ethnographic research \nand contributions in human systems theory. A graduate of the Sloan School of Management at the Massachusetts \nInstitute of Technology, Constantine has published more than a hundred papers and eight books in several \nfields, including, most recently, Constantine on Peopleware (Prentice Hall, 1995), based on his popular \ncolumn in Software Development, and the software engineering classic, Structured Design, written with \nEd Yourdon. His current research and consulting interests include software usability and the role of \nwork culture in high-performance technical teamwork and organizational change. He is a Professor qf Computing \nSciences at the University of Technology, Sydney, and Principal Consultant with the international consulting,firm \nof Constantine &#38; Lockwood Ltd. Alistair Cockburn Value conflicts exist legitimately on software \nprojects. Therefore, before intervening to change a group s values, we should create a map of the value \nsystems. Ethnographic methods are necessary, but insufficient, since experience is needed to interpret \nthe situations. I should like to call on experienced developers to apply ethnographic techniques to capture \nthe value maps of the different parties, and then open discussion on intervention strategies. What does \nthat all mean? In software development, different cultures work side by side. They include the executive \nsponsors, the marketing group, the managers, the users, analysts, Ul designers, programmers, database \ndesigners, testers, etc. There are groups along other dimensions: the novices vs. the experts, the mathematical \nvs. intuitive designers, etc. Each group encourages its own values. Their values are sometimes in conflict. \nThe cultures have forms of repulsion and protection for their own survival. Their values help them contribute \nto the project...usually, but occasionally not. The usual approach on discovering value dissonance is \nto try to change the cultures. This means trying to get the project manager to let the programmers develop \niteratively until they are done . Or trying to write a one-pass schedule containing no time for learning \nand revision. It means asking the users or the manager to become expert on object technology, or asking \ninformalist designers to use formal notations. The groups try to change each other. And yet, nobody has \nyet described the map of the values of the groups. What is the successful part of a group s strategy? \nA classic example is programmers trying to keep the manager away and trying to stay out of meetings. \nThis antisocial behavior is part of gaining think time and reducing distractions. It became part of the \nprogrammers culture, a protection and a success strategy. What is a successful- unsuccessful value? It \nis the strong aversion to learning and using other groups results, the invent here and now mandate. That \nvalue propels careers, but operates at the expense of the industry. What else contributes to each group \ns success? Which of the values and cultural characteristics can safely be changed? Where is there harmony, \nwhere is there conflict between cultures? Where is the map of these different value systems? Rather than \nwalking into a project asserting that group A or B needs to use method i technique I tool / work style \nX, or even, walking into a project asserting that they all should be tolerant of each other, I should \nlike to stake the position that we should spend some time finding out what the groups need, and how they \nalready function. What do software developers really need in the way of support for their work? I have \nnot seen a decent answer to that question, nor even a decent proposal to research it since the brief \nefforts of MCC in the 1980 s. Yet tool vendors, methodologists, and even researchers constantly suggest \nnew solutions to the purported problems of the software practitioner. Here I offer a mea culpa. I developed \nadvanced software environments for several years, thinking I was really paying attention to the way my \ntarget group worked. It slowly became clear that although I was an experienced software designer, my \nknowledge of what the target group really needed was neither accurate nor based on facts. It was based \non my guesses and wishes. I dropped environments for methodology to better learn developers needs. After \nseveral years studying projects and writing methodology, I again discovered I had made a guess on needs \nand values. This is a difficult topic. I have made three attempts of several years each to address the \nquestion. Each time, I discovered that I did not know what the real problem was, that my suggestions \nwere based on guesses and wishes, not facts. On a recent project, I finally began to notice the astonishingly \ncomplex and fluid set of working relationships across the project staff. It was too difficult to document, \nbut it began to show some useful information. It also revealed the need for proper ethnographic studies \nof development groups. However, ethnographers have their own values, one of which seems to be excitement \nabout studying cultures they do not understand at all, as opposed to ones they already understand somewhat. \nThe flaw with this value is that they miss important cues. I am staking the additional position that \nexperienced developers are needed to learn and apply ethnographic techniques. They will be able to spot \nimportant clues that others would miss, and will be able to represent the culture s values. What does \nit take to address the question? First, recognize that there are cultures on a project. They have cultural \nvalues, the values differ, the value systems of each have utility. We can get a sense of the value structures \neven without detailed value maps. Second, find people who can work on both sides of pairs of cultures. \nThey are needed to communicate, protect the essential cultural values and translate across major differences. \nThird, inform each of the groups on the purposes, rationales, and values of the others. The groups devalue \neach other too often. As Jim Coplien said, for two cultures to communicate with each other, each must \nfirst become convinced the other has something to offer. Finally, apply ethnographic techniques to study \neach group, discovering their strengths and weaknesses. Software groups have been producing software \nsuccessfully for decades. Find out what works before naming changes. Use experienced members of each \ngroup to create their value maps In short, lay some facts on the tables, instead of the usual wishes \nand guesses. Alistair Cockburn is methodologist and Consulting Fellow at Humans and Technology. He designed \nthe 00 methodology for the IBM Consulting Group using some of the techniques described in this position \nstatement. These techniques resulted in a methodology, a book on surviving 00 projects, and the start \nof a risk management catalog. Cockburn is a practitioner of double-loop learning, and seems to particularly \nenjoy sitting underwater, traveling, andforgetting the languages he took a lot of trouble to learn. \n Dave West Dr. Constantine pointed out the connection between a paradigm (in the sense advanced by Thomas \nKuhn) and a culture. Both are examples of a group of people with shared technology, ideas, values, and \nworld views. In contrast to Dr. Constantine, I am not at all skeptical about the status of 00 as a paradigm. \nI would suggest, however, that it is not necessarily a new paradigm. Rather it is merely the most current \n(and perhaps most advanced) incarnation of a long-standing philosophical paradigm, I believe that the \nquestions posed for this panel (and their answers) will be better understood if the larger philosophical \nand cultural context is exposed. Western culture (especially since the Age of Enlightenment ) has been \ndominated by a Formalist paradigm or philosophy. Members of this culture (paradigm) have shared values \nand a world view that includes: notions of control, of centralization, and of the ultimate good of mathematics, \nlogic, and deterministic prediction. The shared technology -the instrument that has contributed most \nto the ascendancy of this culture -is the digital computer. The central ideas can be traced from Descarte, \nLeibniz, and Hobbes, through Babbage, Turing, and von Neumann, reaching their pinnacle in the early work \nin Artificial Intelligence by Newell, Simon, and Minsky. A practical side effect of this tradition was \nthe rise of structured methods and software engineering. Contrarian subcultures exist, most notably the \nHermeneutic tradition that asserted complexity, unpredictability, interpretation, and emergence as appropriate \nvalues and world view concepts. Contemporary evidence of this subculture can be seen in the area of Neural \nnetworks (emergence), Complexity Theory (self-organization, non-determinism), postmodern critiques of \ncomputer science, the new biology of Maturana and Varela and its importation into computer science and \nAI by Winograd and Flores. Perhaps the most obvious example of this subculture is object-orientation. \nBefore wrestling with the notion that object people are members of this subculture -something that may \ncome as a surprise to many people in this audience -it should be noted that anthropological theory shows \nthis same philosophical (paradigmatic) split. Many anthropologists spend their time searching for the \nrules of culture or the marxian infrastructural principles that determine culture. These individuals, \nuntil recently, comprised the majority of anthropological theorists. The minority view in anthropology \nis expressed by people like Clifford Geertz and more recent work on cognition in the wild by anthropologists \nlike Lave and Shore. Whether or not objects constitute a separate culture is an interesting question \nbecause the answer (a definitive yes) is obscured in two ways. First, sloppy use of language, almost \nany practice, method, or language can be labeled as object oriented. Second, and most importantly, when \nit comes to software both object oriented and traditional systems must be implemented on the same physical \nhardware. When it comes to a binary string or a set of hardware op codes it is impossible to distinguish \nthe string or the op code that originated in an object culture from one that originated in a traditional \nstructured culture. A Smalltalk method carries not distinguishing characteristics that differentiate \nit from a COBOL subroutine. Objects are different only in the gestalt and in concept. The differences \nin values and world view are most evident at the analysis and decomposition stage of the software development \ncycle. The evidence, within the object community, of a separate and quite different subculture can be \nseen in the language wars and in methodological approaches. Contrast behavioral methods with data (e.g. \nSchlaer-Mellor) and software engineering (e.g. Booch-Rumbaugh-Jacobson) methods. At the risk of inflaming \npassions, I would assert that there is an object culture. It is embodied in the minority (not necessarily \na small minority) of the community of object practitioners that get excited at the Zen philosophy of \nChristopher Alexander, that use CRC cards and Smalltalk as their language of expression and who recognize \nencapsulating data and procedures create COBOL programs not objects. Members of this culture resonate \nto the new theories of complex systems, autonomous entities, and emergence. They see the autonomy of \nbehavioral objects reflected in the theories of artificial life -and recognize the formalist folly implicit \nin traditional artificial intelligence. Today the object culture is obscured within the broader object \ncommunity. To the extent that this is true then the answers to the questions put to this panel -in reverse \norder are: . yes there is something special about objects and yes there is a separate culture -it is \ndeeply and profoundly evident among the members of every class I have ever taught, at least by the end \nof the semester. . if we are to enculturate others we need to spend more time dealing with the philosophical \nissues -getting people to think like objects -and less time dealing with the nuanced differences that \nmight be found at implementation time. . communication between the formalists and the objectists requires \nrecognition and acknowledgment -on both sides -of the very real differences between them. . and finally, \nmembers of the object culture need to articulate in a more robust fashion the shared technology, ideas, \nvalues, and world views that shape their culture. Dave West sJirst OOproject was the construction of \nan Automated Cultural Informant to be used to train budding cultural anthropologists in fieldwork while \na graduate student in Anthropologv He is currently engaged in enculturating graduate students with a \nseries of object courses he developed and teaches at the University of St. Thomas in St. Paul, MN, (Only \nin .January does he wish it was the Virgin Islands.) He is Director of the Object Lab at that same University \nand has been President of the Object Technology User Group (over 500 members strong) for the past two \nyears. As President of the User Group he led efforts to present two successful object conjerences (COPE \n94 and COPE 96) focused on Current Object Practice and Experience. He holds a BA in Oriental Philosophy \nfrom Macalester College, a MA in Cultural Anthropology and a MS in Computer Science (Artificial Intelligence) \nand a Ph.D. in Cognitive Anthropology (dissertation committee consisted of two anthropologists, two computer \nscientists, a psychologist, and a linguist), all from the University of Wisconsin at Madison. Prior to \nreturning to school he worked as a software development professional for 14 years. He has promised Cfor \ntwo years now) a book on teaching and learning objects to be used as an enculturation tool.  Steven \nFraser Steven Fraser is an Advisor with the Design Process Engineering Team at the Nortel Lab in Santa \nClara Caltfornia. He is the General Chair of Nortel s Design Forum, a proprietary bi-annual conference \nheld in more than 25 sites world-wide. In 1994 he was a Visiting Scientist at the Software Engineering \nInstitute (SEJ) collaborating with the Application of Software h4odeI.s project on the deveIopment of \nteam- based domain analysis techniques. Since joining the Nortel organization in 1987, Fraser has contributed \nto the ObjecTime project, an 00-based CASE-Design Tool and to the BCS software development process. Fraser \ncompleted his doctoral studies at McGill University in Electrical Engineering. He holds a Master s degree \nfrom Queen s University at Kingston in applied Physics and a Bachelor s degree from McGill University \nin Physics and Computer Science. He is an avidphotographer and 0pera tunist.  \n\t\t\t", "proc_id": "236337", "abstract": "Anthropology is the study of civilization, particularly its societies, customs, structure, and evolution. Our premise is that there are cultureal \"chasms\" to be crossed to ensure the success of the technological beachhead established by innovators and early adopters of the OO paradigm. Our panelists will address the following questions:&amp;bull;What anthropological cultural factors have to be \"matured\" (and how?) to foster the success of the OO paradigm?&amp;bull;What mechanisms are required to facilitate communications between cultures of differing maturity?&amp;bull;What cultural chasms must be crossed to develop a successful organization/culture within the framework supported by the object-oriented paradigm (or more perrversely, is there anything \"special\" about the OO paradigm)?This panel will interest pracitioners as a forum to share and debate experiences related to our current-day software culture metamorphosis.", "authors": [{"name": "Steven D. Fraser", "author_profile_id": "81339499863", "affiliation": "Nortel Lab, Santa Clara, Caltfornia", "person_id": "PP39064612", "email_address": "", "orcid_id": ""}, {"name": "Alistair Cockburn", "author_profile_id": "81100607756", "affiliation": "", "person_id": "PP31072677", "email_address": "", "orcid_id": ""}, {"name": "Jim Coplien", "author_profile_id": "81100241805", "affiliation": "Bell Lab", "person_id": "PP14093302", "email_address": "", "orcid_id": ""}, {"name": "Larry Constantine", "author_profile_id": "81100375146", "affiliation": "Computer Science, University of Technology, Sydney", "person_id": "PP14132845", "email_address": "", "orcid_id": ""}, {"name": "Dave West", "author_profile_id": "81414594637", "affiliation": "University of St. Thomas, St. Paul, MN", "person_id": "PP31045703", "email_address": "", "orcid_id": ""}, {"name": "Leo Brajkovich", "author_profile_id": "81100613470", "affiliation": "International Survey Research Corporation (ISR)", "person_id": "P170464", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/236337.236366", "year": "1996", "article_id": "236366", "conference": "OOPSLA", "title": "OO anthropology (panel): crossing the chasm", "url": "http://dl.acm.org/citation.cfm?id=236366"}