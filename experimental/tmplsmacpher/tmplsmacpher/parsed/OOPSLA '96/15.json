{"article_publication_date": "10-01-1996", "fulltext": "\n Soft Issues and Hard Problems in Software Development Panel Session Paul S. R. Chisholm, Larry Constantine, \nWard Cunningham, Luke Hohmann, Norman Kerth just acceptable product developed quickly will Abstract: \nThe key to making object technology be preferred to an excellent product produced work isn t technology. \nSo what is it? This panel slowly. Invisible attributes of a product, such as will cover a lot of the \nsoft issues about dealing its software architecture, are often the most with people and teams. It s partly \nabout compromised in the name of acquired market managing software development, and mostly share. However, \nmarket share brings its own set about doing it. of problems. The once satisfactory architecture of a \nsuccessful product will often crumble underFormat: The panel will start with short position the weight \nof continuous revision and statements from each panelist. A number of enhancement. It would seem that \nthe choice isquestions (probably four), announced to the between failing in the race to the market orpanelists \nin advance, will be discussed in turn by failing under the pressure of success once in it. each panelist. \nThis will take roughly half the It is my position that small teams using an time allotted. The remaining \ntime will be spent evolutionary development method in a pure answering audience questions, and allowing \nobject-oriented environment have the best brief comments from the audience. The chance of walking this \ntightrope. Each one of moderator will either take questions from audience members at fixed microphones, \nor will these factors, team, method and environment, can be adjusted and studied in isolation. roam through \nthe audience with a wireless microphone. The panel will conclude with brief However, when we consider \nthe whole of the software development system we find debatable closing remarks by the panelists. decisions \nfor one factor can create surprising Larry Constantine efficiencies for another. Using the terminology \nY . Larry L. Constantine, Professor of Computing of patterns we would say that competitive forces, *--___ \nSciences, University of Technology, Sydney, is when resolved, expose unique patterns of lesser an internationally \nrecognized consultant on the *. forces, which have solutions which might not human side of computer technology. \nHe is a have occurred in isolation. I have assembled a graduate of the Sloan School of Management at \nnetwork of forty patterns of competitive the Massachusetts Institute of Technology, development and studied \nthe interactions Constantine has published more than a hundred between them. Competitive developers will \nfind papers and eight books in several fields, the particular patterns useful while including the software \nengineering classic, organizational theorists might benefit most from Structured Design, written with \nEd Yourdon, adopting the pattern form. and, most recently, Constantine on Peopleware (Prentice Hall, \n1995), based on his popular Ward Cunningham is a founder of Cunningham column in Software Development. \nHis current &#38; Cunningham, Inc. Ward has served as a research and consulting interests include Principal \nin the IBM Consulting Group and as sqftware usability and the role of work culture in Director ofR&#38; \nD at Wyatt Software where he high-performance technical teamwork and architected the WyCash portfolio \nmanagement organizational change. In addition to his system. He developed the Foundation graphical framework \nwhile with Knowledge Systems Corp. academic work, he is Principal Consultant with Ward has also conducted \nresearch in object-orientedprogramming, computer aided design the international consultingfirm of Constantine \n&#38; Lockwood, Ltd. and man-machine interfaces as a Principal Ward Cunningham Engineer in the Tektronix \nComputer Research A competitive market places extreme demands Laboratory. Ward received his Masters in \non software development teams and the products Computer Science from Purdue University. they produce. \nUnder time to market pressure a 232 Ward is well known for his contributions to the developing practice \nof object-oriented programming. Ward created the CRC design method which helps programming teams find \nthe objects that make the foundations for their programs. Ward has written on CRC and related topics \nin JOOP, OOPSLA and HOOPLA publications.  Luke Hohmann What s that? You said you adopted OT but the \nsoftware was still delivered late, over-budget, and with more errors than expected? Certainly you were \nable to recoup your investment with the plethora of high-quality reusable components (models, classes, \nobjects) that were created. No? You re not certain of the reusability of any of the components? An,d \nyou don t think OT is all that great anyway? Maybe the problem isn t the technology: OT has been around \nfor quite some time, and there are real benefits associated with it. And maybe it isn t the developers: \nmost developers want to do a good job, building the best system they can. And maybe it isn t even the \nmanagers: like developers, managers also want to do a good job, satisfying the needs of their employees \nwhile meeting (and exceeding) the expectations of their customers. OK, where s the problem? That is, \nif the problem isn t the technology or the people, then where is it? The answer lies in the structures, \nprocesses, and outcomes that are associated with any human endeavor. Briefly, outcomes are the things \nproduced. In software, they can be data models, source code, requirements documents, meeting notes, and \nso forth. Processes are the means by which we create outcomes. Structure ties everything together by \nprescribing a preferred process and defining the form and content of outcomes. All human activity takes \nplace in the context of structure. Language provides the structure necessary for communication. Our highway \nsystem provides the structure needed for transportation. The right structure enables a process that produces \nappropriate outcomes. A poor structure inhibits process and produces outcomes (systems) that don t work, \nare delivered late, and produce few (if any) reusable components. In software development, methods provide \none kind of structure. By following the processes defined in the method, we produce outcomes that enable \nus to build the right kind of system. But we need more than just methods. We need organizational structures \nthat support developers working in OT. We need to keep the structure of reviews (you do engage in reviews, \ndon t you?) but change the process and outcomes associated with reviews. We need to provide the structures \nthat support the processes of reuse. We need to provide effective, useful training that teaches which \noutcomes are appropriate, the best processes to use when creating them, and the structures that are needed \nto support both the transition and the ongoing efforts of the organization. Such training touches everyone \nin the organization, from developers (who often focus on the wrong outcome) to managers (who aren t taught \nwhich structures and processes make sense for their environment). Without such training (itself a structure, \nprocess, and outcome) successfully adopting the new paradigm becomes extraordinarily difficult. The soft \nissues of software development are inextricably bound to the structures, processes, and outcomes of the \norganization. By building an understanding of these elements, we can engineer them to enable ourselves \nand our developers to create truly effective systems. Luke Hohmann is the Education Technical Director \nof ObjectSpace, Inc., a Dallas-based consulting firm providing object-oriented sofnvare and services. \nA high-energy, bi-lingual instructor (he speaks both Smalltalk and C++), his classes are in great demand. \nHe s the author of Journey of the Software Professional: A Sociology of Software Development, a forthcoming \nbook from Prentice-Hall on structure andprocess in organizations.  Norman Kerth Soft issues is not really \nthe right phrase. A better phrase is hard issues or the difficult issues. It is about working with people, \nworking in teams, dealing with emotions, striving for accurate and honest communications, etc. These \ntopics are more complex than anything else we have to discuss in computers, and these topics are more \nlikely to contribute to the success or failure of a project, than any thing technical. The reason we \nhave not had much discussion on this most difficult part of developing software is speakers can t do \njustice to this topic in just a couple of paragraphs. In fact, the topic is so 233 interesting and \nvast, that I think it can become a study of a lifetime. One of the many issues we could look at is what \nhappens to a professional when he/she has to give up well practiced problems skills, to learn new ones \nwhich offer the vague promise of a better way of developing software. L We see this situation frequently \nduring the transition to objects. These skills are used in our livelihood and often contribute to our \nidentity. Thus these skills are very important, and not set aside easily. They certainly are not without \ngiven up without experiencing a range of emotions: fear of incompetence; longing for the old way; frustration \nover not knowing how to proceed; anger at the methodologists, the authors, the OOPSLA experts and tool \nvendors who claim the transition is easier than it is; distrust over methodologies that change every \nyear or so; mystification of objects and its vocabulary, compared to their known way of working; trapped \ninto a way that makes no sense, and an observation that the experts have no responsibility for the success \nof the project - it is the responsibility of self.  These are only a few of the kinds of emotions that \nsomeone might experience while mastering objects. There is also joy of learning, satisfaction of mastery, \nand the excitement of discovery. The point here is that experiencing negative emotions is part of the \nprocess of learning about objects. In many of our work environments, we don t believe that we have the \nfreedom to express such emotions -instead they remain inside us, either to do damage or to sneak out \nin some more obscure and ineffective form of behavior. I think it is crucial to install into your culture, \nthe Four Freedoms of an Empowering Environment as you begin a transition to objects. These freedoms include: \n. The freedom to speak about what you really see and think rather than accept the vision of others -not \nonly about objects but also about the project, its goals, the management process, etc.; . The freedom \nto ask about puzzles - not just about objects, but also architecture, other folks work, management decisions, \nunsupportive methodologies, etc.; . The freedom to talk about what ever is coming up for you. This is \nabout acknowledging that you have feelings around the struggle to master objects -the positive as well \nas the negative emotions; . The freedom to say I don t think I can exercise one of my freedoms because \n. . Because people aren t perfect, a work environment may not always safe to exercise these natural human \nfreedoms. This freedom provides for the active maintenance of such a healthy environment. If you can \nt establish these freedoms within your work environment as you ready to move to objects, then I recommend \nthat the transition to objects be delayed. The Four Freedoms are a subtle but key foundation to the success \nof your transition to objects, and when missing, the probability of object-oriented project failure is \nvery high. Norman Kerth has his own consultingfirm, Elite Systems, which deals with technical, methodological, \nand human issues in sofmare development. He s has formally studied people systems and is a member of \nthe Weinberg and Weinbergfaculty. Like Ward, Norm has been a member of the patterns community since its \nearliest days. He ran a birds-of-a-feather discussion about The People Side of Object- Oriented Technologies \nat OOPSLA 9.5,and is the lead organizer of a workshop on that topic at this year s OOPSLA. Paul S. R. \nChisholm Paul Chisholm is with Ex Machina, Inc., New York, NY. 234  \n\t\t\t", "proc_id": "236337", "abstract": "The key to making object technology work isn't technology. So what is it? This panel will cover a lot of the \"soft\" issues about dealing with people and teams. It's partly about managing software development, and mostly about doing it.", "authors": [{"name": "Paul S. R. Chisholm", "author_profile_id": "81100214506", "affiliation": "Ex Machina, Inc., New, York, NY", "person_id": "P221080", "email_address": "", "orcid_id": ""}, {"name": "Larry Constantine", "author_profile_id": "81100375146", "affiliation": "Professor of Computing Sciences, University of Technology, Sydney", "person_id": "PP14132845", "email_address": "", "orcid_id": ""}, {"name": "Ward Cunningham", "author_profile_id": "81100562629", "affiliation": "", "person_id": "PP31073616", "email_address": "", "orcid_id": ""}, {"name": "Luke Hohmann", "author_profile_id": "81100413804", "affiliation": "", "person_id": "PP39041662", "email_address": "", "orcid_id": ""}, {"name": "Norman Kerth", "author_profile_id": "81100339993", "affiliation": "", "person_id": "PP31037922", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/236337.236360", "year": "1996", "article_id": "236360", "conference": "OOPSLA", "title": "Soft issues and hard problems in software development (panel)", "url": "http://dl.acm.org/citation.cfm?id=236360"}