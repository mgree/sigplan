{"article_publication_date": "10-01-1996", "fulltext": "\n Translation: Myth or Reality? Panel/Debate Session Steven Fraser, Robert C. Martin, Stephen J. Mellor, \nMichael Lee, Grady Booth, Stephen Garone, Martin Fowler, Douglas Schmidt, Marie Lenzi Abstract: In the \nrealm of 00 methodologies . Is there, in fact, a real difference between there are two major schools \nof thought. Both the two schools of thought? schools claim to define mechanisms whereby As a result of \nthis exploration, we hope tosoftware applications can be created that are answer the question: Is translation \na myth or is it reusable, maintainable, and robust. Moreover, a reality? both schools claim to use abstraction \nas a key mechanism for achieving these benefits. At issue Format: The panel will take the form of a is \nwhether or not these two schools are formal debate. After the initial positions and fundamentally different, \nor just variations on an rebuttals, a panel of distinguished practitioners object-oriented theme. and \nwriters (Stephen Garone, Martin Fowler, Douglas Schmidt, and Marie Lenzi) will probeShlaer and Mellor \nhave dubbed one of these the debaters, with the goal of illuminating theschools Translational . In the \ntranslational underlying issues. Finally, the debaters will takeapproach, two models are created. One \nis an questions from the floor. abstract model of the application domain which is devoid of any design \ndependencies. The other Position Statement (Pro): model is an abstract model of the design which is \n Translation is a Reality. devoid of any application dependencies. These  (Stephen J. Mellor &#38; Michael \nLee) two models are composed automatically to yield What s Translation? The heart of the translation \nthe code for the system. approach to software development is an The other school -supported by Booth, \napplication-independent software architecture, Rumbaugh, Jacobson, and Martin -views the which comprises \na set of stand-alone architecture of a system from several different mechanisms and a set of archetypes. \nThe perspectives of abstraction, e.g. logical, physical. mechanisms are the classical conceptual entities \nThese abstractions typically form a layer; from design : containers, bags, lists, inter- abstractions \nin the logical sense manifest process communication mechanisms, themselves as individual classes as well \nas synchronization and coordination primitives, collaborations of classes. There may be one state machine \nmechanisms, event transmission, layered model, at different layers of abstraction, database elements \nand structures, networks and or, especially given the Objectory view point, the like. The archetypes \nare also design concepts, there may be multiple models, with an analysis but they are incomplete until \nthe application has model that s nearly independent from the design been embedded into them. The archetypes \nare model. stated formally so that general purpose translators may be written to traverse aThe panel \nwill explore: repository containing an analysis model to . Is there a seamless transition between complete \nthe archetype and so yield the code. analysis and design? There are many possible architectures. For \n. Should there be a single model or should example, we could have a single-tasking there be two -one \nfor the analysis and one architecture in which all conceptual entities infor the design? the analysis \nbecome classes; communication . If there are two models, how are they between objects is by asynchronous \nevents, bridged ? using an event blackboard; all object instances of . What, if any, are the differences \nin process a class are expressed as a linked list; between the two schools? relationships between object \ninstances are . How does architecture manifest itself! managed by two-way pointers, and so on. 441 \nAnother architecture, suitable for real-time and embedded systems, might have several tasks, some of \nwhich execute periodically. The periodic task runs at a higher priority than the others, and events are \nqueued to it through a global data region. Some application data is also stored in the global region \nto support fast access, and organized by attribute for fast iteration, A third architecture might organize \nprocessing by threads, executing sequences of actions by duplicating code. Each of these architectures \nhas different mechanisms and archetypes. Any of the architectures may be used for a given application, \nso long as performance and space requirements are met. We can therefore separate the application completely \nfrom the architecture, yielding portability of an application across multiple designs and achieving large-scale \nreuse of the architecture. What s Reality? By reality , we mean: deployed now in industrial strength, \nreal-world systems, and capable of wide-scale deployment in three years. Clearly, one may set the bar \nat any height (Proof of concept? Greater than 50% of all systems using the technology?), but our choice \nseems reasonable, given the current uptake of 00 methods. The technology that is required for translation \nincludes (1) a well-defined analysis notation, fully supported by a meta-model; (2) tools that use the \nmeta-model to store, retrieve and manipulate client models; (3) a large library of architectures; and \n(4) translation technology that embeds the application into the architecture to yield the code. At present, \nall of these technologies are commercially available, save a large library of architectures (item 3) \nwhere there is only a small range of architectures available. Of course, individual projects may build \ntheir own architecture, and it is by this route that the current industrial-strength systems have been \nbuilt. Position Statement (Con) (Robert C. Martin &#38; Grady Booth) There is a seamless and continuous \niteration between analysis, design and implementation. There should be N models, one for each layer of \nabstraction. At the top is the most general analysis model. At the bottom is the most detailed and specific \nplatform model. Between these two extremes are models of intermediate generality. The abstract layers \ndo not depend upon the detailed layers, thus allowing the abstract layers to be reused with different \ndetails. The detailed layers do not depend upon the abstract layers, so that other applications can use \nthe details. The models are bridged through abstract polymorphic interfaces. i.e. abstract classes that \nare defined in the abstract layers and implemented in the detailed layers. The differences between the \ntwo schools is in the composition of the layers, and in the way in which the layers are bridged. In the \ntranslational school, the layers are bridged through automatically generated glue cod. In the other school, \nthe layers are bridged through abstract polymorphic interfaces. Architecture manifests itself as the \nstructure of, and the dependencies between all the layers of abstraction. The architecture represents \nthose decisions that impact the maintainability, reusability and robustness of the application. There \nis a real difference between the two schools of thought. That difference has nothing to do with whether \nor not code should be translated from models. Rather it has to do with how the abstraction layers are \nbridged. Translationists make use of proprietary languages to describe the problem domain. They also \nmake use of proprietary and/or custom tools to translate the proprietary languages into platform specific \nlanguages, and to generate the glue code that binds the models together. The other school of thought \nhas no need for proprietary language or tools (although they may be used as needed) The binding between \nthe layers of abstraction is accomplished through standard features of 00 programming languages. Is translation \na myth? There are possibly two myths involved in the translational school of thought. The first is that \nthere is an overriding benefit to generating 100% of the code for a project. Much of that generated code \nwill have simply been translated from one algorithmic language to another. The second myth is that binding \nlayers of abstraction together with 442 automatically generated glue code is an object oriented technique. \n Stephen J. Mellor Stephen J. Mellor is co-founder and senior vice-president of Project Technology Inc. \n(Pr), a Berkeley, CA-based total solution--training, consulting and CASE tool--company. With PT co-founder \nSally Shlaer, he wrote Object-Oriented Systems Analysis: Modeling the World in Data and Object Lifecycles: \nModeling the World in States. He is presently at work, with MS Shlaer, on Recursive Design: Implementation \nthrough Translation. Michael Lee Michael Lee is vice-president of Development at Project Technology, \nInc., where he directs the development of application-independent software architectures and CASE technology. \nPreviously, he has held senior project management positions at a variety of companies that have successfully \nemployed translation technology since the early 1980 s. Robert C. Martin Robert Martin is president \nof Object Mentor; a firm which provides design consulting, training and development services to major \ncorporations working with OOD and C++. He is also the author ofDesigning Object-Oriented C++ Applications \nusing the Booth Method ISBN O-13-203837-d (Prentice-Hall). Grady Booth Grady Booth is Chief Scientist \nat Rational Software Corporation. He has been with the company since its foundation in 1980. Booth has \npioneered the development of object-oriented analysis and design methods. His work centers primarily \naround complex software systems. Booth is the author offour books published by Addison/Wesley, including \nSoftware Engineering with Ada, Software Components with Ada, and Object Solutions. Booth has also published \nmore than 100 technical articles on object-oriented technology and software engineering. Booth has consulted \nand lectured on these topics throughout the world. Booth is a Distinguished Graduate of the United States \nAir Force Academy, where he received his B.Sc. in Computer Science in 1977. He received an M.S. E. E. \nin Computer Engineering from the University of Cahfornia at Santa Barbara in 1979. Booth is an ACM Fellow \nand a Rational Fellow. He is a member of the American Association for the Advancement of Science, the \nAssociation for Computing Machinery, and the Institute of Electrical and Electronic Engineers. Stephen \nGarone Stephen Garone is a leading researcher, writer and consultant for international Data Corporation \ns Object Tools market planning service. This service focuses on all aspects of object technology, including \nobject-oriented analysis and design, programming tools, GUIs and object database management systems. \nMr. Garone s primary interests are the market for object-oriented analysis and design methodologies and \ntools, and consulting with vendors of object technology products based on emerging software technologies. \n Martin Fowler Martin Fowler is an independent consultant who trains and mentors corporations in Object \nOriented analysis, design, and patterns. He has applied many methodologies to information system problems \nin health care, financial services, and manufacturing. Douglas Schmidt Dr. Douglas C. Schmidt is an \nassistant professor of computer science at Washington University in St. Louis, Missouri. His research \nfocuses on design patterns, implementation, and experimental analysis of object-oriented techniques for \ndeveloping high-performance distributed communication systems on parallel processing platforms that YU~ \nover high-speed networks. Marie Lenzi Marie Lenzi has worked in systems development for over 25 years \nand has worked in object technology since in addition to her consulting work she edits Object Magazine. \n Steven Fraser Steven Fraser is an Advisor with the Design Process Engineering Team at the Nortel Lab \nin Santa Clara California 443  \n\t\t\t", "proc_id": "236337", "abstract": "In the realm of OO methodologies there are two major schools of thought. Both schools claim to define mechanisms whereby software applications can be created that are reusable, maintainable, and robust. Moreover, both schools claim to use abstraction as a key mechanism for achieving these benefits. At issue is whether or not these two schools are fundamentally different, or just variations on an object-oriented theme.Shlaer and Mellor have dubbed one of these schools \"Translational\". In the translational approach, two models are created. One is an abstract model of the application domain which is devoid of any design dependencies. The other model is an abstract model of the design which is devoid of any application dependencies. These two models are composed automatically to yield the code for the system.The other school - supported by Booch, Rumbaugh, Jacobson, and Martin - views the architecture of a system from several different perspectives of abstraction, e.g. logical, physical. These abstractions typically form a layer; abstractions in the logical sense manifest themselves as individual classes as well as collaborations of classes. There may be one layered model, at different layers of abstraction, or, especially given the Objectory view point, there may be multiple models, with an analysis model that's nearly independent from the design model.The panel will explore:&amp;bull; Is there a seamless transition between analysis and design?&amp;bull; Should there be a single model or should there be two - one for the analysis and one for the design?&amp;bull; If there are two models, how are they \"bridged\"?&amp;bull; What, if any, are the differences in process between the two schools?&amp;bull; How does architecture manifest itself!&amp;bull; Is there, in fact, a real difference between the two schools of thought?As a result of this exploration, we hope to answer the question: Is translation a myth or is it a reality?", "authors": [{"name": "Grady Booch", "author_profile_id": "81100557878", "affiliation": "Chief Scientist, Rational Software Corporation", "person_id": "PP31047618", "email_address": "", "orcid_id": ""}, {"name": "Steven Fraser", "author_profile_id": "81339499863", "affiliation": "Nortel Lab, Santa Clara California", "person_id": "PP35043325", "email_address": "", "orcid_id": ""}, {"name": "Robert C. Martin", "author_profile_id": "81100426864", "affiliation": "President of Object Mentor", "person_id": "PP14150443", "email_address": "", "orcid_id": ""}, {"name": "Steven J. Mellor", "author_profile_id": "81100022477", "affiliation": "Project Technology Inc., PT", "person_id": "P270133", "email_address": "", "orcid_id": ""}, {"name": "Michael Lee", "author_profile_id": "81100386545", "affiliation": "Project Technology, Inc", "person_id": "PP14136945", "email_address": "", "orcid_id": ""}, {"name": "Steven Garone", "author_profile_id": "81100168125", "affiliation": "International Data Corporation's Object Tools Market Planning Service", "person_id": "P269865", "email_address": "", "orcid_id": ""}, {"name": "Martin Fowler", "author_profile_id": "81100062314", "affiliation": "Object Oriented analysis design and Patterns", "person_id": "PP31078391", "email_address": "", "orcid_id": ""}, {"name": "Douglas C. Schmidt", "author_profile_id": "81339526336", "affiliation": "Computer Science, Washington University, St. Louis, Missouri", "person_id": "PP42052864", "email_address": "", "orcid_id": ""}, {"name": "Marie Lenzi", "author_profile_id": "81409597098", "affiliation": "Object Technology", "person_id": "P189133", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/236337.236384", "year": "1996", "article_id": "236384", "conference": "OOPSLA", "title": "Translation: myth or reality? (panel)", "url": "http://dl.acm.org/citation.cfm?id=236384"}