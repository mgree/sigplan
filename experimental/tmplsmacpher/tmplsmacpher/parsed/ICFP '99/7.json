{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "The advantage of lazy functional languages is that programs may be written declaratively without specifying the exact evaluation order. The ensuing order of evaluation can however be quite involved which makes it difficult to debug such programs using traditional, operational techniques. A solution is to trace the computation in a way which focuses on the declarative aspects and hides irrelevant operational details. The main problem with this approach is the immense cost in time and space of tracing large computations. Dealing with these performance issues is thus the key to practical, general purpose debuggers for lazy functional languages. In this paper we show that computing partial traces on demand by re-executing the traced program is a viable way to overcome these difficulties. This allows any program to be traced using only a fixed amount of extra storage. Since it takes a lot of time to build a complete trace, most of which is wasted since only a fraction of a typical trace is investigated during debugging, partial tracing and repeated re-execution is also attractive from a time perspective. Performance figures are presented to substantiate our claims.", "authors": [{"name": "Henrik Nilsson", "author_profile_id": "81100060854", "affiliation": "Department of Computer and Information Science, Link&#246;pings universitet, Sweden, and INRIA Sophia Antipolis, France", "person_id": "PP39081220", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317782", "year": "1999", "article_id": "317782", "conference": "ICFP", "title": "Tracing piece by piece: affordable debugging for lazy functional languages", "url": "http://dl.acm.org/citation.cfm?id=317782"}