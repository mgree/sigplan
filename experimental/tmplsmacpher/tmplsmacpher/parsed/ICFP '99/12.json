{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "We investigate finite-rank intersection type systems, analyzing the complexity of their type inference problems and their relation to the problem of recognizing semantically equivalent terms. Intersection types allow something of type &amp;tau;<inf>1</inf> &amp;Lambda; &amp;tau;<inf>2</inf> to be used in some places at type &amp;tau;<inf>1</inf> and in other places at type &amp;tau;<inf>2</inf>. A <i>finite-rank</i> intersection type system bounds how deeply the &amp;Lambda; can appear in type expressions. Such type systems enjoy strong normalization, subject reduction, and computable type inference, and they support a pragmatics for implementing parametric polymorphism. As a consequence, they provide a conceptually simple and tractable alternative to the impredicative polymorphism of System F and its extensions, while typing many more programs than the Hindley-Milner type system found in ML and Haskell.While type inference is computable at every rank, we show that its complexity grows exponentially as rank increases. Let <b>K</b>(0, <i>n</i>) = <i>n</i> and <b>K</b>(<i>t</i> + 1, <i>n</i>) = 2<sup><b>K</b>(<i>t,n</i>)</sup>; we prove that recognizing the pure &amp;lambda;-terms of size <i>n</i> that are typable at rank <i>k</i> is complete for <sc>DTIME</sc>[<b>K</b>(<i>k</i>&amp;minus;1, <i>n</i>)]. We then consider the problem of deciding whether two &amp;lambda;-terms typable at rank <i>k</i> have the same normal form, generalizing a well-known result of Statman from simple types to finite-rank intersection types. We show that the equivalence problem is <sc>DTIME</sc>[<b>K</b>(<b>K</b>(<i>k</i> &amp;minus; 1, <i>n</i>), 2)]-complete. This relationship between the complexity of typability and expressiveness is identical in wellknown decidable type systems such as simple types and Hindley-Milner types, but seems to fail for System F and its generalizations. The correspondence gives rise to a conjecture that if &amp;Tau; is a predicative type system where typability has complexity <i>t</i>(<i>n</i>) and expressiveness has complexity <i>e</i>(<i>n</i>), then <i>t</i>(<i>n</i>) = &amp;Omega;(log* <i>e</i>(<i>n</i>)).", "authors": [{"name": "Assaf J. Kfoury", "author_profile_id": "81332508516", "affiliation": "Boston University", "person_id": "PP14218147", "email_address": "", "orcid_id": ""}, {"name": "Harry G. Mairson", "author_profile_id": "81100061196", "affiliation": "Brandies University", "person_id": "P107959", "email_address": "", "orcid_id": ""}, {"name": "Franklyn A. Turbak", "author_profile_id": "81339533353", "affiliation": "Wellesley College", "person_id": "PP39084675", "email_address": "", "orcid_id": ""}, {"name": "J. B. Wells", "author_profile_id": "81341498152", "affiliation": "Heriot-Watt University", "person_id": "PP39080916", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317788", "year": "1999", "article_id": "317788", "conference": "ICFP", "title": "Relating typability and expressiveness in finite-rank intersection type systems (extended abstract)", "url": "http://dl.acm.org/citation.cfm?id=317788"}