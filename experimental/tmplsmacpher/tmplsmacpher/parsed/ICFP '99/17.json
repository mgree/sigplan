{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "We present two complementary approaches to writing XML document-processing applications in a functional language.In the first approach, the generic tree structure of XML documents is used as the basis for the design of a library of combinators for generic processing: selection, generation, and transformation of XML trees.The second approach is to use a type-translation framework for treating XML document type definitions (DTDs) as declarations of algebraic data types, and a derivation of the corresponding functions for reading and writing documents as typed values in Haskell.", "authors": [{"name": "Malcolm Wallace", "author_profile_id": "81100271064", "affiliation": "University of York, UK", "person_id": "P186483", "email_address": "", "orcid_id": ""}, {"name": "Colin Runciman", "author_profile_id": "81100654458", "affiliation": "University of York, UK", "person_id": "P49752", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317794", "year": "1999", "article_id": "317794", "conference": "ICFP", "title": "Haskell and XML: generic combinators or type-based translation?", "url": "http://dl.acm.org/citation.cfm?id=317794"}