{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "A good foreign-language interface is crucial for the success of any modern programming language implementation. Although all serious compilers for functional languages have some facility for interlanguage working, these are often limited and awkward to use.This article describes the features for bidirectional interlanguage working with Java that are built into the latest version of the MLj compiler. Because the MLj foreign interface is to another high-level typed language which shares a garbage collector with compiled ML code, and because we are willing to extend the ML language, we are able to provide unusually powerful, safe and easy to use interlanguage working features. Indeed, rather then being a traditional foreign <i>interface</i>, our language extensions are more a partial <i>integration</i> of Java features into SML.We describe this integration of Standard ML and Java, first informally with example program fragments, and then formally in the notation used by The Definition of Standard ML.", "authors": [{"name": "Nick Benton", "author_profile_id": "81100165244", "affiliation": "Microsoft Research Ltd., Cambridge, U.K.", "person_id": "P208599", "email_address": "", "orcid_id": ""}, {"name": "Andrew Kennedy", "author_profile_id": "81100450709", "affiliation": "Microsoft Research Ltd., Cambridge, U.K.", "person_id": "PP14158369", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317791", "year": "1999", "article_id": "317791", "conference": "ICFP", "title": "Interlanguage working without tears: blending SML with Java", "url": "http://dl.acm.org/citation.cfm?id=317791"}