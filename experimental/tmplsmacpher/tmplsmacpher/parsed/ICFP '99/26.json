{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "We present an approach for the verification of Erlang programs using abstract interpretation and model checking. In general model checking for temporal logics like LTL and Erlang programs is undecidable. Therefore we define a frame-work for abstract interpretations for a core fragment of Erlang. In this framework it is guaranteed, that the abstract operational semantics preserves all paths of the standard operational semantics. We consider properties that have to hold on all paths of a system, like properties in LTL. If these properties can be proved for the abstract operational semantics, they also hold for the Erlang program. They can be proved with model checking if the abstract operational semantics is a finite transition system. Therefore we introduce a example abstract interpretation, which has this property. We have implemented this approach as a prototype and were able to prove properties like mutual exclusion or the absence of deadlocks and lifelocks for some Erlang programs.", "authors": [{"name": "Frank Huch", "author_profile_id": "81100099102", "affiliation": "Lehrstuhl f&#252;r Informatik II, RWTH Aachen, 52056 Aachen, Germany", "person_id": "PP37023706", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317908", "year": "1999", "article_id": "317908", "conference": "ICFP", "title": "Verification of Erlang programs using abstract interpretation and model checking", "url": "http://dl.acm.org/citation.cfm?id=317908"}