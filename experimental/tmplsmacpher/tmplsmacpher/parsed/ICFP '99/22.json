{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "This paper presents a technique for compiling Standard ML Modules into typed intermediate language fragments, which may be compiled separately and linked using traditional linking technology to form executable code. The technique is called <i>static interpretation</i> and allows compile-time implementation details to propagate across module boundaries. Static interpretation eliminates all module-level code at compile time.The technique scales to full Standard ML and is used in the ML Kit with Regions compiler. A framework for smart recompilation makes the technique useful for compiling large programs.", "authors": [{"name": "Martin Elsman", "author_profile_id": "81100301515", "affiliation": "Computer Science Division, University of California, Berkeley, and University of Copenhagen", "person_id": "P192114", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317800", "year": "1999", "article_id": "317800", "conference": "ICFP", "title": "Static interpretation of modules", "url": "http://dl.acm.org/citation.cfm?id=317800"}