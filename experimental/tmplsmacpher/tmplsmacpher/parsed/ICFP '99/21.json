{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "Programs are often structured around the idea that different pieces of code comprise distinct <i>principals</i>, each with a view of its environment. Typical examples include the modules of a large program, a host and its clients, or a collection of interactive agents.In this paper, we formalize this notion of principal in the programming language itself. The result is a language in which intuitive statements such as, \"the client must call open to obtain a file handle,\" can be phrased and proven formally.We add principals to variants of the simply-typed &amp;lambda;-calculus and show how we can track the code corresponding to each principal throughout evaluation. This multiagent calculus yields syntactic proofs of some type abstraction properties that traditionally require semantic arguments.", "authors": [{"name": "Steve Zdancewic", "author_profile_id": "81384616728", "affiliation": "Department of Computer Science, Cornell University", "person_id": "PP14144604", "email_address": "", "orcid_id": ""}, {"name": "Dan Grossman", "author_profile_id": "81405594870", "affiliation": "Department of Computer Science, Cornell University", "person_id": "PP43120334", "email_address": "", "orcid_id": ""}, {"name": "Greg Morrisett", "author_profile_id": "81339518683", "affiliation": "Department of Computer Science, Cornell University", "person_id": "PP43136279", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317799", "year": "1999", "article_id": "317799", "conference": "ICFP", "title": "Principals in programming languages: a syntactic proof technique", "url": "http://dl.acm.org/citation.cfm?id=317799"}