{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "Square matrices serve as an interesting case study in functional programming. Common representations, such as lists of lists, are both inefficient---at least for access to individual elements---and error-prone, because the compiler cannot enforce \"squareness\". Switching to a typical balanced-tree representation solves the first problem, but not the second. We develop a representation that solves both problems: it offers logarithmic access to each individual element and it captures the shape invariants in the type, where they can be checked by the compiler. One interesting feature of our solution is that it translates the well-known fast exponentiation algorithm <i>to the level of types</i>. Our implementation also provides a stress test for today's advanced type systems---it uses nested types, polymorphic recursion, higher-order kinds, and rank-2 polymorphism.", "authors": [{"name": "Chris Okasaki", "author_profile_id": "81100613198", "affiliation": "Department of Computer Science, Columbia University, New York, NY", "person_id": "P46261", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317781", "year": "1999", "article_id": "317781", "conference": "ICFP", "title": "From fast exponentiation to square matrices: an adventure in types", "url": "http://dl.acm.org/citation.cfm?id=317781"}