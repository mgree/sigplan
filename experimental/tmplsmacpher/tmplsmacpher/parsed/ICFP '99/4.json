{"article_publication_date": "09-01-1999", "fulltext": "", "proc_id": "317636", "abstract": "In a programming language with procedures and assignments, it is often important to isolate uses of state to particular program fragments. The frameworks of type, region, and effect inference, and monadic state are technologies that have been used to state and enforce the property that an expression has no visible side-effects. This property has been exploited to justify the deallocation of memory regions despite the presence of dangling pointers.Starting from an idea developed in the context of monadic state in Haskell, we develop an ML-like language with full assignments and an operator that enforces the encapsulation of effects. Using this language, we formalize and prove the folklore connection between effect masking and monadic encapsulation. Then, by employing a novel set of reductions to deal with dangling pointers, we establish the soundness of the type-based encapsulation with a proof based on a standard subject reduction argument.", "authors": [{"name": "Xavier Leroy", "author_profile_id": "81100078576", "affiliation": "", "person_id": "PP39075012", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317773", "year": "1999", "article_id": "317773", "conference": "ICFP", "title": "Objects, classes and modules in Objective Caml (invited lecture, abstract only)", "url": "http://dl.acm.org/citation.cfm?id=317773"}