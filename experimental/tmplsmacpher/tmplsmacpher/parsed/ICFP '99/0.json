{"article_publication_date": "09-01-1999", "fulltext": "\n\t\t\t", "proc_id": "317636", "abstract": "In an impure functional language, there are programs whose behaviour is completely functional (in that they behave extensionally on inputs), but the functions they compute cannot be written in the purely functional fragment of the language. That is, the class of programs with functional behaviour is more expressive than the usual class of pure functional programs. In this paper we introduce this extended class of \"functional\" programs by means of examples in Standard ML, and explore what they might have to offer to programmers and language implementors.After reviewing some theoretical background, we present some examples of functions of the above kind, and discuss how they may be implemented. We then consider two possible programming applications for these functions: the implementation of a search algorithm, and an algorithm for exact real-number integration. We discuss the advantages and limitations of this style of programming relative to other approaches. We also consider the increased scope for compiler optimizations that these functions would offer.", "authors": [{"name": "John Longley", "author_profile_id": "81100392028", "affiliation": "", "person_id": "PP40035999", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/317636.317775", "year": "1999", "article_id": "317775", "conference": "ICFP", "title": "When is a functional program not a functional program?", "url": "http://dl.acm.org/citation.cfm?id=317775"}