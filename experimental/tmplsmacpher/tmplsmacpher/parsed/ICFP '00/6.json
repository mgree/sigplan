{"article_publication_date": "09-01-2000", "fulltext": "\n Typed Compilation of Inclusive Subtyping* Karl Crary Carnegie Mellon University Pittsburgh, PA  ABSTRACT \nIpresentatype-preservingtranslationthateliminatessub\u00adtypingandboundedquantifcationwithoutintroducingany \nrun-timecosts.ThistranslationisbasedonMitchelland Pierce'sencodingofboundedquantifcationusingintersec\u00adtiontypes.Ishowthat,previousnegativeobservations \nnotwithstanding,theencodingisadequategivenasuf\u00adcientlyrichtargettypetheory.Thenecessarytargettype theoryismadeeasilytypecheckablebyincludingacollection \nofexplicitcoercioncombinators,whicharealreadydesired foreliminatingsubtyping.However,noformofcoercion \nabstractionisnecessary(eventosupportboundedquantif\u00adcation),leadingtoasimpletargetlanguage. 1. INTRODUCTION \nType-preservingcompilers,thosethatutilizestrongly typedintermediatelanguages,oferseveralcompellingad\u00advantagesoveruntypedcompilers.Atypedcompilercan \nutilizetypeinformationtoenableoptimizationsthatwould otherwisebeprohibitivelydifcultorimpossible.Internal \ntypecheckingcanbeusedtohelpdebugacompilerbycatch\u00adingerrorsintroducedintoprogramsinoptimizationortrans\u00adformationstages.Finally,ifpreservedthroughthecompiler \ntoitsultimateoutput(oratleasttosomeinterchangelan\u00adguage),typescanbeusedtocertifythatexecutablesare safe,thatis,freeofcertainfatalerrorsormaliciousbehav\u00adior[8]. \nTypedcompilationisoftenparticularlyproftableforad\u00advancedprogramminglanguages,whichmaybechalleng\u00adingtoimplementefcientlyorcorrectlywithoutexploiting \ntypes.However,advancedprogramminglanguageswithso\u00adphisticatedtypesystemsposetheirownchallengestotyped \ncompilation:thetypingconstructsofasourcelanguage musteitherbeincludedinthecompiler'stypedinterme\u00ad * ThismaterialisbasedonworksupportedinpartbyARPAgrant \nF-19628-95-C-0050andNSFgrantCCR-9984812.Anyopinions,fnd\u00adings,andconclusionsorrecommendationsinthispublicationare \nthoseoftheauthorsanddonotrefecttheviewsoftheseagencies. Permission to make digital or hard copies of \nall or part of this work for personal or classroom use is granted without fee provided that copies are \nnot made or distributed for pro.t or commercial advantage and that copies bear this notice and the full \ncitation on the .rst page. To copy otherwise, to republish, to post on servers or to redistribute to \nlists, requires prior speci.c permission and/or a fee. ICFP 00, Montreal, Canada. diatelanguages,orbe\\compiledaway\"intomoreprimi\u00adtiveconstructs.Wherepossible,itisgenerallypreferable \ntoreducesophisticatedtypingconstructstomoreprimitive ones,becausetypedintermediatelanguagesareoftenfairly \ncomplicatedalreadywithouttheaddedcomplexityofsource languagefeatures. InthispaperIconsiderthetypedcompilationofalan\u00adguagesupportingsubtypingandboundedquantifcation[3, \n2].Subtypingisapervasivelanguagefeature,inthatit interactswithmostotherlanguagefeatures,andtherefore \ncansubstantiallycomplicateprogramminglanguagesthat includeit.Thisisparticularlytrueforlow-leveltypedin\u00adtermediatelanguages.Therefore,asisoftenthecase,itis \ndesirabletodismantlesubtypinginfavorofmoreprimitive andeasy-to-typeconstructs. Onewell-knownwaytodosoistheseminal\\Pennin\u00adterpretation\"ofBreazu-Tannen,etal.[1].ThePennin\u00adterpretationeliminatesinstancesofsubsumptionbyinsert\u00adingexplicitcallstocoercionfunctions,andhandlesbounded \nquantifcationbyrewritingpolymorphicfunctionstotakean additionalcoercionargumentmappingthefunction'stype \nargumenttoitsupperbound.AlthoughBreazu-Tannen,et al.'sinterestwasinsemantics,theirtranslationcanalsoeas\u00adilybeviewedasatype-preservingcompilationstrategy.In\u00addeed,underoneinterpretationofsubtyping,Breazu-Tannen \netal.'stranslationcannotbeimproveduponinanyessential way. Inapracticalsetting,subtypingcanbeinterpretedintwo \ndiferentways:inclusively,wherethemembersofasubtype actuallybelongtothesupertype,andcoercively,inwhich \narun-timecoercionmaybenecessarytoconvertmembers ofthesubtypeintomembersofthesupertype.Forcoercive subtyping,thecostsofthePenninterpretationareunavoid\u00adable(ingeneral),butforinclusivesubtyping,therun-time \napplicationofcoercionsandrun-timepassingofcoercionsto polymorphicfunctionsrepresentunnecessaryandunaccept\u00adablecosts.Inmanysettings,theavoidabilityofthesecosts \nmakesinclusivesubtypingmoreattractivethancoercive. Thishasledmanylanguagedesignerstoeschewlanguage featuresrequiringrun-timecoercions(suchasint:float \nsubtyping)infavorofonesenjoyingapurelyinclusiveinter\u00adpretation,suchasrecordswithprefxsubtypingand(often) \nobjects. Whatwedesire,then,isatype-preservingtransformation thateliminatesinclusivesubtypingwithoutintroducingany \nrun-timecosts.Wemaybeginwithapreliminaryobserva\u00adtionaboutthetargetlanguageofanysuchtransformation. Ifsubtypingiseliminated,thensubsumptionmustbeper- \nCopyright 2000 ACM 1-58113-202-6/00/0009 ..$5.00 formedexplicitly,butifthatexplicitsubsumptionistobe \nperformedwithoutrun-timecost,thenitcannotbeper\u00adformedbytheordinarydynamicconstructsofthelanguage. Thus,ourtargetlanguagemustincludeacollectionofcom\u00adbinatorsforbuildingstaticcoercions,inthestyleofCurien \nandGhelli[5],forexample. Withsuchacollectionofcombinators,andintheabsence ofboundedquantifcation,itiseasytoconstructastaticco\u00aderciontoreplaceeachinstanceofsubsumptioninthesource \nlanguage.However,inthepresenceofboundedquantif\u00adcationoneisonceagainleftwiththeobviousproblemof producingcoercionsfromquantifedtypestotheirupper \nbounds.Onenaturalwaytosolvethisproblemistoin\u00adtroducecoercionvariablesandawaytoabstractoverthem (statically,soasnottoincurrun-timecost),andthento \nabstractanewcoercionvariableateachpolymorphicfunc-tionjustasinthePenninterpretation.Suchanapproach mightbeviewedasaninclusiveinterpretationofthePenn \ninterpretation.(Anapproachsimilartothiswasemployed byCurienandGhelli,althoughtheytiedcoercionvariables \ntoparticulartypevariables,andabstractedthemautomat\u00adicallyinpolymorphicfunctions.) Thisapproachcanbemadetowork,butthenecessary \nfacilitiesquicklybecomecomplicatedasonescalesthelan\u00adguagetosupportadditionalfeaturessuchasmodulesor higher-ordertypeconstructors.InthispaperIproposea \nsimplerapproachinwhichcoercionabstractionsandvari\u00adableswillinitiallynotbenecessaryatall.Althoughwewill \nfndcoercionvariablesnecessarytoextendthetechnique torecursivetypes,eventhenthecoercionsemployedatin\u00adstancesofsubsumptionwillstillbeclosedandnocoercion \nabstractionswillbenecessary.Thecostofthissimplifed targetlanguagewillbeasomewhatmorecomplicatedtrans\u00adlation. \nThetranslationisbasedonaninterpretationofsubtyping usingintersectiontypesthatwasfrstsuggestedbyJohn MitchellandexploredfurtherbyBenjaminPierce[9,Section \n3.5.1].IntheMitchell-Pierceinterpretation,thebounded quantifedtype8a:T:a(a)isinterpretedtomean8a:a(a^ \nT).Intheformertype,anytypeargumentisrequiredtobe asubtypeofthegivenboundT;initsinterpretation,any typeargumentispermitted,butiscutdowntoasubtype \noftheboundwhereveritisused. Pierceobservedthatthisencodingdoesnotentirelywork, becauseitfailstovalidatethemostgeneralruleforsubtyp\u00adingofboundedquantifedtypes.However,thatfailureturns \nouttobeanartifactoftheparticulartypetheory,F^[9,10], thatPiercewasusing.Ishowthatinamoderatelymoreex\u00adpressivetypetheory,theMitchell-Pierceinterpretationin \nfactbecomesavalidencoding. TheMitchell-Pierceencodingisusefulforourpurposesbe\u00adcauseitallowsustoeliminateboundedquantifcationfully, \nwithoutanyneedforcoercionabstractions.Instead,sub\u00adsumptioncoercionscanbeconstructedentirelylocally,even \ninthecaseofboundedquantifcation:thepromotionofa typevariabletoitsupperboundisimplementedsimplyby thecoercionfroma^TtoT. \nSinceweassumeaninclusiveinterpretationofsubtyping, wheresubsumptionhasnorun-timeaction,thecompilation \nprocessofthispaperwillmakenochangestothetype-and coercion-erasureoftheprograminquestion.Theaction ofcompilationisonthetypes,inreducingthehigh-level \nlanguagefeatureofsubtypingtolower-levelstaticcoercions. typestermsvaluescontexts Tev; :: :: :: :: ajintjT1!T2jT1XT2j \n8a:T1:T2jtop xjijAx:T:eje1e2j(e1e2)j e:1je:2jAa:T:vje[T] xjijAx:T:ej(v1v2)jAa:T:Ej;a:Tj;x:T v Figure1: \nSourceSyntax Judgement Interpretation `; o k ; is a validcontext ;`T type Tisavalidtype ;`e:T eisavalidtermoftypeT \n;`T1:T2 T1isasubtypeofT2 Figure2:Sourceand(First)TargetJudgements Theresultinglanguage,thoughlarger(bytheintroduction \nofcoercions),issimplerandenjoysentirelydeterministic andsyntax-directedtypechecking. Thispaperisorganizedasfollows:Ibeginbydeveloping \nthetranslationeliminatingsubtypingintwosteps.First,in Section2,IpresentthetranslationinanF^-liketypethe\u00adory,makingclearexactlywhattypingrulesarenecessaryto \nvalidatetheMitchell-Pierceencoding.Thetargetlanguage forthisversionofthetranslationwillstillcontainsubtyp\u00adingandwillnotenjoytractabletypechecking,soitwillnot \nsufceforourultimatepurposes.Then,inSection3,Irefor\u00admalizethetranslationwithatargetlanguagewhereexplicit \ncoercionsreplacesubtypingandthatiseasilytypechecked. InSection4,Iextendtheseresultstoaccountforrecur\u00adsivetypes.Finally,inSection5,Igiveasemanticsforthe \n(second)targetlanguagethatmakesprecisethenotionthat itscoercionshavenorun-timeefect.Inwhatfollows,fa\u00admiliarityisassumedwiththepolymorphiclambdacalculus, \nsubtyping,boundedquantifcation,andintersectiontypes. 2. THE MITCHELL-PIERCE INTERPRETATION ThesourcelanguageforthetranslationisF.[5]aug\u00admentedwithproductsandabasetype(int),thesyntax \nforwhichisgiveninFigure1,andthejudgementforms forwhicharegiveninFigure2.Thetypingandsubtyping rulesforthesourcelanguagearestandard;wediscussthe \nmostimportantrulesbelowandthefullsystem(forthelan\u00adguage'sfnalform)issummarizedinAppendixA.Notethe useofavaluerestrictioninthesyntaxoftypeabstractions; \nthisistoensurethattherearenoproblemsinpassingto atype-erasuresemanticsinSection5.Inwhatfollows,we willwritethesimultaneouscapture-avoidingsubstitutionof \nE1:::EforX1::: XinEasE[E1En/X1Xn]. nn Asusual,wewillconsideralpha-equivalentexpressionsto beidentical. \nThetargetlanguageoftheencodingissimilartothe source,exceptthatboundedquantifcationisreplacedby simplequantifcation,andbinaryintersectiontypesare \nadded.ThetargetsyntaxappearsinFigure3;thetarget's judgementformsarethesameasforthesource(Figure2). typesT::ajintjT1!T2jT1XT2j \n8a:TjT1^T2jtop termse::xjijAx:T:eje1e2j(e1e2)j e:1je:2jAa:vje[T] valuesv::xjijAx:T:ej(v1v2)jAa:v contexts;::Ej;aj;x:T \nFigure3:(First)TargetSyntax Thetypingandsubtypingrulesforthetargetlanguageare standard,exceptthatwewilladdtwosomewhatunusual \nrulesinSection2.1andwewillhavenoneedfortheintersec\u00adtiontypedistributivityrules.Thefullsystemissummarized \ninAppendixA.1. TheideatotheMitchell-Pierceinterpretationisthe boundedquantifedtypeisdefnedintermsofordinary \nquantifcationandintersectiontypes: 8a:T1:T2 def8a:T2[a^T1/a] Theleft-handtypeincludestypeabstractionsthatmaybe \nappliedtoanysubtypeofthegivenboundT1.Theencoding relaxesthis,allowingitsmemberstobeappliedtoanytype, \nbutthencutsthattypedowntoasubtypeofT1whereverit isused. Whenthetypeargument,sayT,isinfactasubtypeof thebound|aswillalwaysbethecaseintargetprograms \nresultingfromwell-typedsourceprograms|thetypesTand T^T1willbeequivalent,andthustheresulttypesT2[T/a] \nandT2[T^T1/a]willalsobeequivalent.Thismeansthatthe applicationofatypeabstractionworksasexpected.How\u00adever,withinthebodyofatypeabstraction,a^T1canbe \nshowntobeasubtypeofT1withoutmakinganyassump\u00adtionsabouta,andthuspromotionoftypevariablestotheir upperboundsalsoworksasexpected. \nWeexplorethisingreaterdetailbyconsideringthreeof themostimportanttypingrulesofthesourcelanguage,the subtypingrulefortypevariablesandthetypingrulesfor \ntypeabstractionandapplication,andtheimagesofthose rulesundertheencoding. Thesubtypingruleforvariablesstatesthatanytype \nvariablesisasubtypeofitsgivenupperbound: ((a:T)2;) ;`a:T Theinvariantoftheencodingisthatanytypevariable \nisreplacedbytheintersectionofthatvariablewith itsupperbound,sowhenahasupperboundT,itis everywherereplacedbya^T.Thus,theimageofthis \nrule'sconclusionis;`a^T:T,whichcertainly holds.1 Thetypingrulefortypeabstractionsisasfollows: T00(a62Dom(;)) \n;a:T`v:;`Ttype ;`Aa:T:v:8a:T:T Theimageofthisrule'sfrstantecedentis: 0 ;a`v[a^T/a]:T[a^T/a] 0 1Strictlyspeaking,theimageis;0`a^T0:T0where;andT0 \nare theimagesof;andT,butwewillomitthatlevelofdetailinthis informaldiscussion. Wemayassumethatthisjudgementholdsandcon\u00adclude,bytheusualrulefortypeabstractionformation, \nthat 0 ;`Aa:v[a^T/a]:8a:T[a^T/a] holds,whichistheimageoftherule'sconclusion. Thetypingrulefortypeapplicationisasfollows: \n;`e:8a:T1:T2;`T:T1 ;`e[T]:T2[T/a] Theimageofthisrule'sfrstantecedentis: ;`e:8a:T2[a^T1/a] Fromthis,usingtheusualrulefortypeapplication, \nwededucethat: ;`e[T]:T2[T^T1/a] CertainlyT^T1:T,and,bythesecondantecedent, T:T^T1.Usingtheformersubtypingrelationshipin \npositivepositionsofT2andthelatterinnegativeones, weobtain ;`T2[T^T1/a]:T2[T/a] andhencewemayconcludebysubsumptionthat \n;`e[T]:T2[T/a] holds,whichistheimageoftherule'sconclusion. 2.1 Quanti.er subtyping Theprecedingdiscussionshowsthattheencodingvali\u00addatesthreeofthefourrulesforboundedquantifcation,and \nitiseasytoshowthatitalsovalidatesalltherulesnot relatingtoboundedquantifcation.However,acomplica\u00adtionariseswiththeremainingrule,thesubtypingrulefor \nboundedquantifedtypes: T0 :T0T0 ;`1:T1;a1 `T2:2 ;`8a:T1:T2:8a:T10:T2 0 Itisnotsoobviousthattheencodingvalidatesthisrule. \nConsiderthejudgement: ;`8a:top:a:8a:int:a Certainlythisjudgementholdsinthesourcelanguage,since int:top.However,theimageofthisjudgementunderthe \nencodingis: ;`8a:a^top:8a:a^int Thisjudgementdoesnotfollowfromtheusualsubtyping rulefor(unbounded)quantifedtypes,sincea^top: \na^int.Inlanguageswheretheusualruleistheonlyrule forsubtypingquantifedtypes(suchasPierce'sF^),theen\u00adcodingfails. \nOnewaytosavetheencodingistorestrictthesourcelan\u00adguagebyreplacingtheFsubtypingrulewiththe\\Kernel Fun\"rule,whichrequirestheboundsT1and1tobeiden- \nT0 tical.Withsucharestrictioninthesourcelanguage,the problemdoesnotarise. However,thereisnoneedtodothis.Wecanalsomake \ntheencodingworkbystrengtheningthetargetlanguage. Wewillstrengthenthetargetlanguagebyaddingsubtyping rulesthatallowtheimpliciteliminationandformationof \nquantifedtypes: T0 ;`8a:Ttype;`type ;`8a:T:T[T0/a] ;`Ttype (anotfreeinT) ;`T:8a:T Theformerruleallowsquantifedtypestobeinstantiated \nimplicitlyusingsubtyping,ratherthanexplicitlyusingthe eliminationconstructforquantifedtypes(e[T]).Thelatter \nrulesimilarlyallowsimplicitformationofquantifedtypes. Notethatalthoughtheformerrulemakestheusualelimi\u00adnationconstructredundant,thelatterrulecannotreplace \ntheformationconstructAa:e,becauseitdoesnotprovide anybindingofatobeusedinthebodye.Astrongertyp\u00adingrule,asopposedtosubtyping,canmaketheformation \nconstructunnecessary,butforourpurposeswewillhaveno needforit. Theserulesaresemanticallywell-justifedinatype\u00aderasuresetting,inwhichtypeabstractionandtypeappli\u00adcationhavenosemanticefect.However,theymaketype\u00adcheckingproblematic,sotheyarerarelyusedinpractical \nprogramminglanguages.Nevertheless,thislanguageserves welltoillustratetheMitchell-Pierceinterpretation.More\u00adover,withtheeliminationofsubtypinginfavorofexplicit \ncoercionsinSection3,ourtargetlanguagewillbeeasily typechecked. Withtheadditionofthesetworules,theencodingnow \nvalidatesthesubtypingruleforquantifedtypes.Recalling theexampleabove: 0 8a:a^top:8a:8a:a^top 00 :8a:(a^int)^top \n8a:(a^int)^top :8a:a^int Thefrstlinefollowsbyimplicitformation,thesecondby implicitelimination(beneaththeoutermostquantifer)us\u00adinga \n0^int,thethirdbyalphaconversion,andthelastby thelowerboundpropertyofintersectiontypes. Moregenerally,supposetheimagesoftheantecedentsof \nthesubtypingrulehold,thatis;`1:T1and T0 000 ;a`T2[a^T1/a]:T2[a^T1/a] T0 T0 anytypevariablea).Theshowndirectionfollowsfromthe \nlowerboundpropertyofintersectiontypes,andtheconverse followsfromthegreatestlowerboundproperty,sinceT10:T1 \nisgivenbythefrstantecedent.Itfollowsfromthisthat First,observethat(a^1)^T1:a^1andviceversa(for 00 ;a`T2[(a^T1)^T1/a]:T2[a^T1/a] \nusingtheshowndirectioninpositivepositionsofT2andits converseinnegativepositions. Nowwemayshowthattherule'simageholds,inananal\u00adogousmannertotheexample: \n0 8a:T2[a^T1/a]:8a:8a:T2[a^T1/a] 00 T0 :8a:T2[(a^1)^T1/a] T0 8a:T2[(a^1)^T1/a] :8a:T2[a^1/a] T0 :8a:T20[a^T10/a] \njajdef a def jintjint jT1!T2jdefjT1j!jT2j jT1XT2jdefjT1jXjT2j j8a:T1:T2jdef8a:jT2j[a^jT1j/a] def jtopjtop \nSub(E;T) def T Sub((;a:T0);T) def Sub(;;T[a^jT0j/a]) Sub((;x:T0);T) def Sub(;;T) jTj; def Sub(;;jTj) \nFigure4:TypeTranslation Thefrstlinefollowsbyimplicitformation,thesecondby impliciteliminationusinga 0^1,thethirdbyalphacon- \nT0 version,thefourthbythefactshownabove,andthelastby thesecondantecedent'simage. 2.2 Formalization Theencodingisformalizedasasyntax-directedtype \ntranslationjTj;,termtranslationjej;,andcontexttrans\u00adlationj;j.Webeginwiththetypetranslation(shownin Figure4),whichwedefneintwoparts.Thefrstpartisa \nparametrictranslationjj,whichdoesnotmodifytypevari\u00adables.Thekeyclauseistheoneforquantifedtypes,which \nstates: j8a:T1:T2jdef8a:jT2j[a^jT1j/a] Theparametrictypetranslationaccountsfortheupper boundsofallboundvariables,butdoesnotaccountforthe \nupperboundsoffreevariables.Thoseareobtainedbyref\u00aderencetothecontext.Thus,thesecondpartisacontext sensitivetranslationjj;,whichmodifestypevariablesap\u00adpropriately: \nSub(E;T) def T Sub((;a:T0);T) def Sub(;;T[a^jT0j/a]) Sub((;x:T0);T) def Sub(;;T) jTj; defSub(;;jTj) Thetermtranslation(Figure5)andcontexttranslation \n(Figure6)simplyapplytheappropriatetranslationtotheir componenttypesanddeleteupperboundsfromvariables. \nWiththisformalization,wecanstatethefollowingstatic correctnesstheorem,whichsummarizestheinformaldis\u00adcussionabove.Wedistinguishbetweenjudgementsinthe \nsourceandtargetlanguagesbymarkingtheturnstiles` Sor ` T,respectively. Theorem2.1. 1.If;` STtypeand` S;okthenj;j`jTj;type. \nT 2.If;` ST1:T2and` S;okthenj;j` TjT1j;:jT2j;. 3.If;` Se:Tand` S;okthenj;j` Tjej;:jTj;. AlthoughIdonotformalizeanoperationalsemanticsfor \nthesourceortargetlanguagehere,itiseasytoseethat jxj; def x jij; def i jAx:T :ej; def Ax:jTj;:jej; je1e2j; \ndef (je1j;)(je2j;) j(e1 e2)j; def (je1j; je2j;) je:ij; def (jej;):i jAa:T :ej; def Aa:jej(;,u 1) je[T]j; \ndef (jej;)[jTj;] Figure5:(First)TermTranslation jEj def E j; a :Tj def j;j a j; x :Tj def j;j x :jTj; \n Figure6:ContextTranslation theencodingisdynamicallycorrectinanysemanticsthat respectstypeerasure,sinceanysourceterm'serasureis \nidenticaltoitstranslation'serasure.Thisobservationalso neatlyaddressestheissueofthetranslation'scoherence:any \ntwotranslationsofatermmustbeequivalent,sinceeachis equivalenttothesourceterm.  3. THE COERCION INTERPRETATION \nOurendgoalistoeliminatesubtypingentirely,notjust toeliminateboundedquantifcationinfavorofintersection \ntypes.Tothatend,wedefneacoercion-basedcalculusto serveasatargetlanguage,andatranslationfromtheorig\u00adinalsourcelanguagetothenewcoercionlanguage.Inthe \ncoercioncalculus,\\subtyping\"relationshipswillberepre\u00adsentedbyexplicitcoercions,whichwillmaketypechecking \neasy. ThesyntaxofthecoercioncalculusisgiveninFigure7. Asidefromthenewsyntacticclassofcoercions,thesyntax \nissimilartothetargetlanguagefromSection2.Toaidin typechecking,severalcoercionconstructs( ,top,andapp) \nincludetypeannotationsindicatingtheirdomains;indis\u00adcussionwewillomittheseannotationswhentheyareclear \nfromcontext. Thejudgementsofthecoercioncalculusaregivenin Figure8.Thejudgementsfortypeformationandtyp\u00ad \ntypesT::ajintjT1!T2jT1XT2j 8a:TjT1^T2jtop termse::xjijAx:T:eje1e2j(e1e2)j e:ijAa:vjce coercionsc:: idjc10c2jc1!c2jc1Xc2j \n8a:cjhc1c2ij i[T1^T2]j top[T]japp[8a:T]T0jgen contexts;::Ej;aj;x:T valuesv::xjijAx:T:ej(v1v2)jAa:vjcv \nFigure7:CoercionCalculusSyntax Figure8:CoercionCalculusJudgements Judgement Interpretation ` ; o k ; \nis a v alid context ; ` T type T is a valid type ; ` e : T e is a valid term of type T ; ` c : T1 )T2 \nc is a valid coercion from T1 to T2 ingoftermsarestandard.Thefnaljudgement,fortyp\u00adingcoercions,istheanalogofthesubtypingjudgement; \n;`c:T1)T2indicatesthatcisacoercionfromT1to T2.Inthiscase,thecoercioncmaybethoughtofasawit\u00adnessthatT1isasubtypeofT2.Whenjudgementsinthe \ncoercioncalculusmustbedistinguishedfromjudgementsin thesourcelanguage,wewilldosobymarkingtheturnstile \n` C. Mostofthetermsofthecoercioncalculushavetheirusual meanings.Thenewtermconstruct,ce,indicatestheappli\u00adcationofacoerciontoaterm;thismaybethoughtofas \nsyntacticallyindicatingtheuseofsubsumption.Alsonote thatthetermconstructfortypeapplicationisomitted;that \nconstructisreplacedbytheappcoercion. Thecoercionconstructsareinterpretedasfollows: Thecoercionsidandc10c2denoteidentityandcom\u00adposition.Theymaybethoughtofaswitnessestothe \nrefexivityandtransitivitysubtypingrules.  Thecoercionsc1!c2,c1Xc2,and8a:cliftcoercions overthebasictypeoperators.Forexample,c1!c2 \nmodifesafunctionbyapplyingc1toitsargumentand c2toitsresult.Theseconstructsarewitnessestothe subtypingrulesforcompatibilitywiththebasictype \noperators.  Thecoercionhc1c2iistheintroductionconstructfor intersectiontypes,andintuitivelyworksbyapplying \neachofthetwogivencoercionsandcollectingthere\u00adsults.Ithasthetypingrule:  ;`c1:T)T1;`c2:T)T2 ;`hc1c2i:T)T1^T2 \nThiscoercionisthewitnesstothegreatestlower boundruleforintersectiontypes. Thecoercion iistheeliminationconstructforinter\u00adsectiontypes,andworksbyselectingoneofthetwo \nresultsfromanintersectionintroduction.Ithasthe typingrule: ;`T1^T2type (i12) ;` i[T1^T2]:T1^T2)Ti Thisisthewitnesstothelowerboundruleforinter\u00adsectiontypes. \nNotethatusingthelasttwocoercionswecandefnea compatibilitycoercionforintersectiontypes: c1^c2 defhc10 \n1 c20 2i Thecoerciontopistheintroductionconstructforthe typeofthesamenameandwitnessesthesubtyping toprule. \nTheapplicationcoercionappTistheeliminationcon\u00adstructforquantifedtypes.Itwitnessestheimplicit eliminationrulefromSection2.1andhasthetyping \nrule: ;`8a:Ttype;`type T0 ;`app[8a:T]T0:8a:T)T[T0/a] Notethattheusualeliminationformforquantifed typescanbebuiltfromthiscoercion: \ne[T] def (appT)e Thegeneralizationcoerciongenintroducesamember ofaquantifedtypebywrappingatypeabstraction \n(i.e.,Aa:;)arounditsargument.Itwitnessestheim\u00adplicitintroductionrulefromSection2.1andhasthe typingrule: \n;`Ttype (anotfreeinT) ;`gen:T)8a:T Thetypingrulesforcoercionsandtherestofthecoercion calculusaresummarizedinAppendixB.1.Typecheckingfor \nthislanguageiseasy,duetoauniquetypingpropertyfor coercions: Proposition3.1.Suppose;,c,andTaregiven.Then \nthereexistsatmostonesuchthat;`c:T)and, T0 T0 T0T0 conversely,thereexistsatmostonesuchthat;`c: )T. Providingthispropertyisthepurposeofthedomainanno\u00adtationsonthe,top,andappcoercions.Withoutthem, \ntop!iddoesnothaveauniquecodomain,forexample. 3.1 The Coercion Translation Withatargetlanguageinplace,wecannowdefnethe \ntranslationeliminatingsubtyping.Thetypeandcontext translationsareidenticaltothoseusedinthefrsttransla\u00adtion(Figures4and6).Thetermtranslationisdiferent, \nofcourse,sinceitmustnowprovidecoercionexpressions. Furthermore,sincethenecessarycoercionexpressionsare \ndeterminedbytypingandsubtypingderivations(notbythe syntaxofthetermsthemselves),thetranslationisgivenas \natype-directedtranslation. Thetype-directedtranslationisgivenasatermtransla\u00adtionandasubtypingtranslation.Thetermtranslationis \ngivenbyajudgement;` SCe:T e 0 ,meaningthatehas typeT(inthesource)ande 0isitstranslation.Thesubtyp\u00adingtranslationisgivenbyajudgement;` \nSCT1:T2 c, meaningthatthecoercioncwitnessesthat(inthesource)T1 isasubtypeofT2.Asusual,rulesinthetermtranslationare \ninone-to-onecorrespondencewithsourcetypingrules,and rulesinthesubtypingtranslationwiththesourcesubtyping \nrules. Theinterestingrulesaretheonesthatdealwithquantifed types.Weproceedbylookingcarefullyattheserules;the \ncompleterulestothetranslationappearinAppendixC. Thetranslationruleforvariablesis: ((a:T)2;) ;`a:T 2 \nThecorrectnesscriterionforsubtypingtranslationsis thatif ;` SCT1:T2 c map[a:a](c+c;) def c+ map[a:;](c+c;) \ndef id(fora6;) def map[a:int](c+c;)id map[a:T1!T2](c+c;) def map[a:T1](c;c+)! map[a:T2](c+c;) map[a:T1XT2](c+c;) \ndef map[a:T1](c+c;)X map[a:T2](c+c;) map[a:(8;:T)](c+c;) def8;:map[a:T](c+c;) (where;isfresh) map[a:T1^T2](c+c;)def \nmap[a:T1](c+c;)^ map[a:T2](c+c;) def map[a:top](c+c;)id Figure9:Defnitionofmap (and;iswell-formed)then \nj;j` Cc:jT1j;)jT2j; Thisruleestablishesthatcriterionsincejaj;a^jTj; and2takesa^jTj;tojTj;. Thetranslationrulefortypeabstractionsissimply: \n;` STtype 0 T000(a62Dom(;)) ;a:T` SCv: v ;` SCAa:T:v:8a:T:T Aa:v Thecorrectnesscriterionfortermtranslationsisthe \nusual,thatif;` SCe:T e 0(and;iswell-formed) thenj;j`e 0:jTj;.Thisrulepreservesthatcriterion C sinceAa:v0hastype \n8a:jT0j(;,u1) 8a:Sub(;;jT0j[a^jTj/a]) Sub(;;8a:jT0j[a^jTj/a]) j8a:T:T0j; Thesecondlinefollowssinceaisnotinthedomainof \n;,theothertwoaredirectfromthedefnitions. Thetranslationrulefortypeapplicationis 0 ;` SCe:8a:T1:T2 e;` \nSCT:T1 c ;` SCe[T]:T2[T/a] 0 (map[a:jT2j;](hidci)0appjTj;)e 1 (a62Dom(;)) wheremap[a:T](c+c;)appliesc+atallpositiveoccur\u00adrencesofainTandc;atallnegativeoccurrences.Its \ndefnitionisgiveninFigure9anditstypingbehavior isspecifedbythefollowinglemma: Lemma3.2.If;a`Ttypeand;`c+:T1)T2 \nand;`c;:T2)T1and`;aokthen;` map[a:T](c+c;):T[T1/a])T[T2/a]. Since1takesjTj; ^jT1j;tojTj;,andhidcigoes \ntheoppositedirection,usingLemma3.2,wemayde\u00adducethatthemapexpressionabovetakesjT2j;[jTj; ^ jT1j;/a]tojT2j;[jTj;/a]. \nWhencomposedwithappjTj;,theresultingcoer\u00adciontakesj8a:T1:T2j;8a:jT2j;[a^jT1j;/a]to jT2j;[jTj;/a].Usinganeasy-to-showsubstitution \nlemma,thelatterisequaltojT2[T/a]j;,asrequired. Finally,thetranslationruleforsubtypingofquantifed typesis: \nT0 :T0 T0 ;` SC1:T1c1;a1 ` SCT2:2c2 ;` SC8a:T1:T2:8a:T10:T2 0 8a:(c20 map[a:jT2j;](1hidc102i)0 app(a^j1j;))0 \nT0 gen (a62Dom(;)) Letusexaminethiscoercionstartingatthemiddle. Letabeatypevariable.Then1takes(a^j1j;)^ \nT0 T0 jT1j;toa^j1j;;andhidc102igoestheotherdi- T0 rection,sincec102takesa^j1j;tojT1j;.Thus T0 themapexpressiontakesjT2j;[(a^j1j;)^jT1j;/a]to \nT0 jT2j;[a^j1j;/a]. Whencomposedoneachendwithc2andapp(a^jT10j;), theresulttakes8a 0:jT2j;[a 0^jT1j;/a]tojT20j;[a^ \njT10j;/a].Thus,dischargingthevariablea,theen\u00adtire8expressiontakes8a:8a 0:jT2j;[a 0^jT1j;/a]to j8a:T10:T20j;.Whencomposedwithgen(andemploy\u00adingachangeofvariables),theresulttakesj8a:T1:T2j; \ntoj8a:T10:T20j;,asrequired. Thestaticcorrectnessofthistranslationisformalizedby thefollowingtheorem,whichsummarizestheinformaldis\u00adcussionabove: \nTheorem3.3. 1.If;` STtypeand` S;okthenj;j`jTj;type. T 2.If;` SCT1:T2cand` S;okthenj;j` Cc: jT1j;)jT2j;. \n3.If;` SCe:Te 0and` S;okthenj;j`e 0:jTj;. T Asbefore,thetranslationcaneasilybeseentobedynami\u00adcallycorrectinanysemanticsrespectingtypeerasure,since \nanysourceterm'serasureisidenticaltoitstranslation'sera\u00adsure.  4. RECURSIVE TYPES Thetranslationaboveaccountsforabasicsourcelan\u00adguagesupportingfunctions,products,andboundedpoly\u00admorphism.Anaturalquestiontheniswhethertheapproach \nscalestolarger,moreexpressivetypesystems.Infact,the translationabovegeneralizeseasilytoaccountforsource\u00adlevelintersectionandsumtypes,anddualizesnicelyfor \nboundedexistentialanduniontypes(withappropriateen\u00adhancementstothetargetlanguage).Theseextensionsare omittedherebecausetheyaddlittletothepresentdiscus\u00adsion.Theapproachalsogeneralizestosupportrecursive \ntypes,butthatextensionisabitmoreinvolvedandmerits somediscussion. Accountingforrecursivetypesrequiressupportfortwo \nsubtypingprinciples.First,wemustsupporttheusualrule forsubtypingrecursivetypes: ;a:top` STtype ;a 0:top` \nStype T0 00 T0 (aa 026Dom(;)) ;a:topa:a` ST: ;` Sfa:T:fa0:T0 types T :: j fa:T coercions c :: j xj \nrec(x : a)a 0:c)j isorec(x+ : a1 )a 0 2 x; : a2 )a 0 1: c+ c ;)j fold[fa:T]j unfold[fa:T] coercion contexts \n< :: Ej < x : T1 )T2 Figure11:ExtensionsforRecursiveTypes Second,wemustbeabletomapatypeisomorphismthrough \nanytypeexpression(wherewethinkofT1andT2asiso\u00admorphicwhenT1:T2andT2:T1).Thisrequirement arosebothintypeapplicationandinsubtypingofquanti\u00adfedtypes.Previouslythiswaspossibleusingonlytheusual \nsubtypingrules,butthisisnotthecaseinthepresenceof recursivetypes. Theproblemisthatinthesubtypingruleforrecursive \ntypesabove,thepremisea:a 0isusefulonlyinpositive positions;innegativepositionsthepremiseisorientedthe \nwrongway.Consequently,wecanmapanisomorphismonly throughrecursivetypesinwhichtherecursivevariablesap\u00adpearsonlypositively.Nevertheless,weshouldhaveboth \norientationsavailablesincewearedealingwithisomorphism andnotmerelysubtyping. Theneededsubtypingruleprovidestheusualpremisefor \npositivepositions,butalsoprovidestheoppositepremise fornegativepositions.Tojustifythesepremisestherule \nmustensurethatthetwotypesareinfactisomorphic,by requiringsubtypingineachdirection,asshownintherule inFigure10. \nIntheusualuseofthisrule,theappearancesofa1in T1aredividedupintopositiveandnegativeappearances, withthenegativeonesmarkeda \n0 1inT1+andthepositive onesin1.Thisensuresthattherecursiverelationship T; isavailableinpositivepositionswhenshowingleft-to-right \nsubtyping(asinthesimplerule),andisavailableinnegative positionswhenshowingright-to-leftsubtyping,asrequired. \nAppearancesofa2inT2aresimilarlydivided. Thenecessaryextensionstothesyntaxofthecoercioncal\u00adculus,principallynewcoercionforms,aregiveninFigure11. \nTwonewcoercions(foldandunfold)areusedtointroduce andeliminaterecursivetypes.Thesyntaxforthesecoer\u00adcionsgivetheircodomainanddomaintypes,respectively, \ninordertopreserveuniquetyping(Proposition3.1). Moreinterestingarethecoercionswitnessingthesubtyp\u00adingandisomorphismrulesforrecursivetypes.Thesubtyp\u00adingcoercion,rec(x:a)a \n0:c),appliesctothebodyofa memberofarecursivetype,wherecmaycallitselfrecur\u00adsivelythroughthecoercionvariablex.Thetypingrulefor \nrecis: T00 ;a`Ttype;a 0`type (;aa 0);(<x:a)a)`c:T)T0 0 ;;<`rec(x:a)a:c):fa:T)fa0:T0 (aa 062Dom(;)x62Dom(<)) \nThuscusesxtocoercesubcomponentsfromtypeatoa 0 . Notethattheintroductionofcoercionvariablesmandates theuseofcoercioncontexts(<).However,italsoisimpor\u00ad \n 0 0 T+ T; ;a1:topa1:top` Stype;a1:topa1:top` Stype 1 1 0 0 T+ T; ;a2:topa2:top` Stype;a2:topa2:top` \nStype 2 2 0000 T+T+ ;a1:topa2:topa1:a2a2:a1 ` S1:2 0 1 00 0000T;T; a1a1a2a262Dom(;) ;a1:topa2:topa1:a2a2:a1 \n` S2:1 @T1T1+[a1/a0 1]T1;[a1/a10]A ;` Sfa1:T1:fa2:T2 T2 T2+[a2/a0 2]T2;[a2/a20] Figure10:RecursiveTypeIsomorphismRule \ntanttonotethatcoercioncontextsarenecessaryonlyfor typingcoercions;nocoercionvariableneedeverappearfree \ninaterm. Theisomorphismcoercion,isorec(x+:a1)a20 x;: a2)a 0 1:c+c;),appliesc+tothebodyofamemberof arecursivetype,butsimultaneouslydefnesareversecoer\u00adcionc;,andmakesbothcoercionsrecursivelyavailableto \neachotherunderthenamesx+andx;(respectively).The resultingtypingruleisgiveninFigure12. Asintheruleitwitnesses,theisorecruledividesup \ntheappearancesoftherecursivevariablesinthetwotypes. Inthisversionoftherule,thedivisionintopositiveand \nnegativeisrequiredtobetheusualone.Therequirement isimposedsothattypecheckingofcoercionsremainssyntax \ndirected(otherwise1,2,etc.arenotdeterminedbyT1 T+T+ andT2),ensuringeasytypechecking.Itisnotrequiredfor \ntypesafety,soitcouldberelaxed,butdoingsowouldbe unlikelytoprovideanyusefulexpressivepower. Foldandunfoldoperationsinthesourcelanguageare \ntranslatedusingfoldandunfoldcoercionsintheobvious manner.Subtypingofrecursivetypesistranslatedbythe rule: \n;a:top` STtype ;a 0:top` Stype T000 T0 ;a:topa:a` SCT:c ;` SCfa:T:fa0:T0 0 rec(x:a)a:map[a 0:T0](hidtopi)0c0 \n1 map[a:T](hidhxtopii1)) Thisruleismadesomewhatmessybytheinterpretationof a 0 asa 0^top;inpractice,acompilerwouldoptimizethe \ncasewhenanupperboundistop.Thecoercion'sbodyfrst coercesTtoT[a^(a 0^top)/a],therebysettingitupfor c,afterwhichitcoercestheresultingT0[a \n0^top/a0]back downto. T0 Finallywecandefnethenecessaryfnalclauseofmap usingtheisomorphismcoercionby:2 \nmap[a:(f;:T)](c+c;) def 00 isorec(x+:;1);2x;:;2);1: map[; :T](x+x;)0map[a:T](c+c;) map[a:T](c;c+)0map[;:T](x;x+)) \n(where;1;10;2;20 x+x;arefresh) Withthisclause,somestrengtheningoftheinductionhypothesisin necessarytoshowLemma3.2,sincex+andx;donotoperateon \nthesametypes.  5. DYNAMIC SEMANTICS OF THE COERCION CALCULUS Itremainstoputthiscompilationstrategyonasolidfoot\u00adingbyestablishinganoperationalsemanticsforthecoercion \ncalculus.Wedesiretwopropertiesofthesemantics:wewant theusualtypesafetyproperty,ofcourse,butwealsowant \ntomakeexplicittheinclusivenatureofsubtyping,thatis, thatcoercionshavenorun-timeefect. Wetaketheviewthattherun-timesubstanceofaterm \nisrefectedintheterm'serasure,theportionoftheterm remainingafteralltypes,typeabstractionsandcoercions \nareerased.Types,typeabstractionsandcoercionswillbe viewedashavingpurelystaticimportance.3 Thisviewimmediatelyadvisesthedesignoftheopera\u00adtionalsemantics.Considerevaluationofthetermhc1c2iv. \nAnaiveapproachwouldbetoincludeatermformforin\u00adtersectiontypes(written,say,he1e2i),andtodefnethese\u00admanticssothathc1c2ivevaluatestohc1vc2vi.Withsuch \nanapproach,intersectiontypesbecomelittlediferentthan products,suggestingthereislikelyaproblem.Theerasure \nviewimmediatelyexposesthisproblem:withthisevalua\u00adtionruleacoercioncanchangetheerasureofaterm,inthis casebyintroducinganewpair.Thus,thisinterpretation \nviolatesthespiritoftheenterprise.Asimilarissuecanbe seentoarisewiththetopcoercion;iftopvevaluatesto,say, \n(),thenagaintheerasurechanges. Instead,thesemanticsrulesthathc1c2ivisavalueform, andanyfurther\\computation\"withthecoercionsc1orc2 \nissuspendeduntilaprojectioncoercionisapplied.When projectionoccurs,i(hc1c2iv)evaluatestociv,andatno pointdoestheerasurechange.Thevalueformhc1c2ivis \nmostproftablyreadasasinglevaluewithtwodiferent views.4 Thesemanticssimilarlydefnestopvandfoldvtobe valueforms,andgiventhisitprovestobeconvenientto \nsaythatcvisavalueforanycoercionc.Onepleasant consequenceofthisisthatatermisavalueexactlywhen itserasureisavalue. \nAnotherconsequenceofthisdesignisthatvaluesdo notenjoyusefulcanonicalforms.Forexample,afunc\u00adtionalvaluemayhavetheformAx:T:e,asonewouldpre\u00adfer,butitmayalsohavetheform1(hidci(Ax:T:e))or \n(c1!c2)(Ax:T:e),forexample.Therefore,theoperational semanticsutilizestworelations,theusualsmall-stepeval\u00ad \n3 Thisviewcanbereconciledwithlanguagesinwhichtypescanbe run-timeobjectsbyexplicitlyrefectingtypesintothetermstructure \nasinCrary,etal.[4]. 4 Dimocketal.[6]employasimilaridea:Theyincludeanintersection pairconstruct,andsolvetheaboveproblembyrequiringtheerasure \nofe1ande2tobeidenticalforhe1e2itobesyntacticallywell-formed. Theycanthendefnetheerasureofanintersectionpairtobethe \ncommonerasureofitscomponents. 0000 1 ;=;aaaa 00 12 ;a1a`T+type;a1a`T;type <01200 1111 =<x:a1)ax:a2)a \n21 00 B00 C ;a2a2 `T2+type;a2a2 `T2;type a1a+ a26Dom(;); xx2Dom(<) B a122+;6C B 0 C ;0;<0`c+:T+)T+;0;<0`c;:T;)T; \nB a1positive,anegativeinT1+ C 1 1221 T+ Ba2negative,a20positivein2 C 00 B C ;;<`isorec(x+:)ax:)a:cc):fa1:T1)fa2:T2 \n0 T; a12;a21+; B a1negative,a1positivein1 C B 0 T; C positive,anegative in @ a222 A T1=T+[a1/a0]=T;[a1/a0] \n1111T2=T+[a2/a0]=T;[a2/a0] 222 2 Figure12:IsomorphismCoercionRule canonical valuesV:: ijAx:T:ej(v1v2)jAa:vj \nhc1c2ivjtop[T]vjfold[fa:T]v idv7v !c (c107c1(c2v) c2)v!c (c1!c2)(Ax:T:e)7Ax:T0:c !c2(e[c1x/x]) T0 (where`c1:)T) \n(c1Xc2)(v1v7(c1v1c2v2) 2)!c(8a:c)(Aa:v)7Aa:cv !c (i[T])(hc1c2iv)7 !cciv (app[T0]T)(Aa:v)7v[T/a] !c \ngenv7Aa:v(afresh) !c unfold[T](fold[T0]v)7!cv v7v 0 !c 0(cnoth;;itoporfold) cv!7ccv (RulesforrecandisorecappearinAppendixB.2.) \nFigure13:Canonicalization uationrelation(writtene!7e 0),andanauxiliary,canon\u00adicalizationrelation(writtenv!7cv \n0)thatconvertsvalues tocanonicalform.Thecanonicalizationrelationispurely atechnicaldevice;itrepresentsnorun-timeactionwhatso\u00adever,asformalizedinProposition5.4andTheorem5.5. \nForexample,therulesforevaluatingapplicationsareas follows: !0 e17e 1 e7!e 0 00 e1e27e v7ve !1e2 e! 0 \nv17v1 !c 0 v1v27v(Ax:T:e)v!e[v/x !1v2 7] Thefrst,second,andfourthrulesarestandard.Thethird usesthecanonicalizationrelationtoplacethefunctioninto \ncanonicalformsothatthefourthrulecanapply. Thecanonicalvalueformsandcanonicalizationrulesare giveninFigure13.Theremainingevaluationrulesappear \ninAppendixB.2. Asusual,typesafetyfollowsfromsubjectreductionand progresslemmasforevaluation,eachofwhichrequiresa \nsimilar,auxiliarylemmaforcanonicalization: Lemma5.1(SubjectReduction). If`v:Tandv!7cv 0then`v 0:T. \n If`e:Tande!7e 0then`e 0:T.  xr def x (e:i)r def (er):i ir def i (Aa:v)r def vr (Ax:T:e)r def Ax:er \n(ce)r def er (e1e2)r def e r 1e r 2 Figure14: Erasure Lemma5.2(Progress). If`v:Ttheneitherviscanonicalorv7v \n0 !c. If`e:Ttheneithereisavalueore!7e 0 . 0 !*thene 0isnotstuck(thatis,eithere 0isavalueore 07e Theorem5.3(TypeSafety).If`e:Tande7e \n!00). Twoadditionalfactsformalizetheassertionthatcoercions havenorun-timeefect:First,asdiscussedabove,canonical\u00adization(i.e.,applicationofcoercions)neverafectsavalue's \nerasure.Second,anycanonicalizationsequenceterminates infnitelymanysteps;thisisimportantsincenontermina\u00adtioniscertainlyarun-timeefect.Moreimportantly,with\u00adoutcanonicalizationthetypesafetyresultdoesnotapplyto \ntheerasedlanguage,asnonterminationofcanonicalization couldshieldthetypedlanguagefromanunsafestatethat \ntheerasedlanguagewasabletoreach. Proposition5.4(InvariantErasure).Let(;)rbe rr defnedasinFigure14.Thenifv17!cv2thenvv \n12. Theorem5.5(Canonicalization).If`v:Tthenv canonicalizesinafnitenumberofsteps. Theorem5.5isprovenusingalogicalrelationargumentthat \nisdetailedinAppendixD.Itisworthwhiletonotethat thistheoremdependsonthetypingcondition;canonicaliza\u00adtioncanfailforill-typedvalues.Forexample,(unfold0 \nrec(x:unfold0x0fold)0fold)vloopsasittriestocanon\u00adicalize.  6. CONCLUSION ThisworkshedsnewlightontheMitchell-Pierceinter\u00adpretationofsubtypingbyshowingthat,inatypetheory \nsupportingimplicitformationandeliminationofquanti\u00adfedtypes,itisanentirelysatisfactoryencodingoffullF \nboundedquantifcation.Byitself,thisisaresultofprimar\u00adilytheoreticalimportance(particularlygiventheintractable \nrichnessofthenecessarytypetheory);however,withthecal\u00adculusofexplicitcoercionsthisresultbecomesofpractical \ninteresttotypedcompilation. Byreifyingsubtypingderivationsasexplicitcoercions,we notonlyprovideaneasilytypecheckedtargetlanguage,but \nwealsoachievethiswork'sultimategoalofcompilingaway subtypingentirely.Laterphasesofatypedcompilerneed \ndealonlywiththecoercions,andsometypedcompilers(such astheTypedAssemblyLanguagecompiler[7])supportsim\u00adilar,ifnotquitesoexpressive,coercionconstructsalready. \nMoreover,bytranslatingboundedquantifcationusingin\u00adtersectiontypesratherthancoercionabstractions,weallow \ntheuseofarelativelysimplecalculusofcoercions. APPENDIX A. THE SOURCE LANGUAGE ;` STtype (FV(T)<Dom(;)) \n;` STtype ;` Se:T ((x:T)2;);` Sx:T;` Si:int ;` ST1type;,x:T1 ` Se:T2 (x62Dom(;)) ;` S x:T1:e:T1!T2 ;` \nSe1:T1!T2;` Se2:T1 ;` Se1e2:T2 ;` Se1:T1;` Se2:T2 ;` S(e1,e2):T1XT2 ;` Se:T1XT2(i1,2);` Se:i:Ti T0 ;,a<T` \nSv:;` STtype (a62Dom(;)) 0 ;` SAa<T:v:8a<T:T ;` Se:8a<T1:T2;` ST<T1 ;` Se[T]:T2[Tla] ;` Se:T1;` ST1<T2 \n;` Se:T2 ;` ST1<T2 ;T0<T1;<T0 ` S1` ST22 ;` ST1!T2<T10<T2 0 ;<T0;<T0 ` ST11` ST22 ;` ST1XT2<T10XT2 0 \n;` ST0<T1;,a<T0` ST2<T0 112 ;` S8a<T1:T2<8a<T0:T0 12 ;` STtype ;` ST<top ` S;ok ` S\u00a3ok ` S;ok;` STtype \n(a62Dom(;)) ` S;,a<Tok ` S;ok;` STtype (x62Dom(;)) ` S;,x:Tok A.1 The First Target Language Toobtainthe(frst)targetlanguagefromthesourcelanguage, \ndeletethevariablesubtypingrule,replacetherulesforintro\u00adduction,elimination,andsubtypingofquantifedtypesandfor \nvariablecontextformationby ;,a` Tv:T (a62Dom(;)) ;` TAa:v:8a:T ;` Te:8a:T;` TT0type ;` Te[T0]:T[T0la] \n;,a` TT1<T2 (a62Dom(;)) ;` T8a:T1<8a:T2 ` T;ok (a62Dom(;)) ` T;,aokandaddthefollowingrules: ;` TT1^T2type \n(i1,2) ;` TT1^T2<Ti ;` STtype ;` ST<T ;` ST1<T2;` ST2<T3 ;` ST1<T3 ((a<T)2;) ;` Sa<T ;` TT<T1;` TT<T2 \n;` TT<T1^T2 ;` T8a:Ttype;` TT0type ;` T8a:T<T[T0la] ;` TTtype (anotfreeinT) ;` TT<8a:T  B. THE COERCION \nCALCULUS B.1 Static Semantics ;`Ttype (FV(T)<Dom(;)) ;`Ttype ;`e:T ((x:T)2;);`x:T;`i:int ;`T1type;,x:T1 \n`e:T2 (x62Dom(;)) ;`x:T1:e:T1!T2 ;`e1:T1!T2;`e2:T1 ;`e1e2:T2 ;`e1:T1;`e2:T2 ;`(e1,e2):T1XT2 ;`e:T1XT2(i1,2);`e:i:Ti \n;,a`v:T (a62Dom(;)) ;`Aa:v:8a:T ;`e:T1;;\u00a3`c:T1)T2 ;`ce:T2 ;`c:T1)T2 ;`Ttype ;;i`id:T)T ;;i`c1:T2)T3;;i`c2:T1)T2 \n;;i`c10c2:T1)T3 ;;i`c1:T0)T1;;i`c2:T2)T0 12 ;;i`c1!c2:(T1!T2))(T0!T0) 12 ;;i`c1:T1)T0;;i`c2:T2)T0 12 \n;;i`c1Xc2:(T1XT2))(T0XT0) 12 (;,a);i`c:T1)T2 (a62Dom(;)) ;;i`8a:c:8a:T1)8a:T2 ;;i`c1:T)T1;;i`c2:T)T2 \n;;i`hc1,c2i:T)T1^T2 `;ok ;`Ttype ;;i`top[T]:T)top ;`8a:Ttype;`T0type ;;i`app[8a:T]T0:8a:T)T[T0la] ;`Ttype \n(a62FV(T));;i`gen:T)8a:T ((x:T1)T2)2i);;i`x:T1)T2 0 ;,a`Ttype;,a`T0type (;,a,a0);(i,x:a)a0)`c:T)T0 ;;i`rec(x:a)a0:c): \na:T) a0:T0 0 (a,a62Dom(;),x26Dom(i)) 0T+ 0T; ;,a1,a`type;,a1,a`type 11110T+ 0T; ;,a2,a`type;,a2,a`type \n2222 00 ;0;i`c+:T+)T+;0;i`c;:T;)T; 1221 00 ;;i`isorec(x+:a1)a,x;:a2)a:c+,c;): 21 a1:T1) a2:T2 01 0 00 \n;=;a1a1a2a2 000 B <=<x+:a1)a2x;:a2)a1 C B 00 C a1aa2a2Dom(;)x+x;6Dom(<) 62 B 12C B 0 T+ C a1positive,a1negativein1 \nB 0 C Ba2negative,a2positiveinT2+ C B 0 T; C Ba1negative,a1positivein1 C B 0 T; C B a2positive,a2negativein2 \nC @A T1 =T+[a1/a0]=T;[a1/a0] 1111T2 =T+[a2/a0]=T;[a2/a0] 2222 ;;i` a:Ttype ;;i`fold[ a:T]:T[ a:Tla]) \na:T ;;i` a:Ttype ;;i`unfold[ a:T]: a:T)T[ a:Tla] `\u00a3ok `;ok (a62Dom(;)) `;,aok ;`T1^T2type `;ok;`Ttype \n(i1,2) (x62Dom(;)) ;;i` i[T1^T2]:T1^T2)Ti `;,x:Tok B.2 Dynamic Semantics Evaluation 00 ;` SCe1:T1!T2.e;` \nSCe2:T1.e2 1 00 ;` SCe1e2:T2.e1e 2 0 e17!e0 1 e7!e 00 e1e27e1e2ve!ve !7 00 ;` SCe1:T1.e1;` SCe2:T2.e2 \n00 0 ;` SC(e1,e2):T1XT2.(e1,e2)v17v !c 1 0 v1v27v1v2(x:T:e)v7e[vlx] !! ;` SCe:T1XT2.e0 (i1,2) !0 ;e:i:.e0:i \ne17e0 ` SCTi 1 e7!e 0 (e1,e2)!7(e1,e2)(v,e)7!(v,e0) 0 T0(a62;) ;,a<T` SCv:.v;` STtype 0 v7v;` SCv:8a<T:T.Aa:v0(i1,2)e7e0!c0 \n! !77 e:i7e0:iv:i!v0:i(v1,v2):i!vi Canonicalization ;` SCe:8a<T1:T2.e0;` SCT<T1.c ;e[T]:T2[Tla]. !c0 \nv7v0 ` SC(map[a:jT2j;](1,hid,ci)0appjTj;)e (cnoth;,;i,toporfold) 0 cv7!ccv(a26Dom(;)) idv7v !c ;` SCe:T1.e;` \nSCT1<T2.c(c107c1(c2v) c2)v!c(c1!c2)(x:T:e)!7cx:T0:c2(e[c1xlx]) ;` SCe:T2.ce (where`c1:T0)T) (c1Xc2)(v1,v2)7!c(c1v1,c2v2);` \nSCT1<T2.c (8a:c)(Aa:v)7Aa:cv !c (i[T])(hc1,c2iv)7civ !c ;` STtype (app[T0]T)(Aa:v)7v[Tla] !c genv7Aa:vfresh) \n;` SCT<T.id !c(a unfold[T](fold[T0]v)7v !c ;` SCT1<T2.c1;` SCT2<T3.c2 rec(x:a)a0:c)(fold[a:T]v)7 ! \nc ;<.c20 fold[a0:T0] ` SCT1T3c1 0 ((c[ a:T,a0:T0 ,rec(x:a)a:c)la,a0 ,x])v) (where`rec(x:a)a0:c):a:T)a0:T0) \n ((a<T)2;);` SCa<T.2 00 isorec(x+:a1)a2,x;:a2)a1:c+,c;) (fold[a1:T1]v) 7 ! c fold[a2:T2];` SCT0<T1.c1;` \nSCT2<T0.c2 12 (c+[a1:T1,a1:T1,a2:T2,a2:T2, ;` SC(T1!T2)<(T0!T0).(c1!c2) 00 12 isorec(x+:a1)a2,x;:a2)a1:c+,c;), \n00 isorec(x;:a2)a1,x+:a1)a2:c;,c+)l 00 a1,a1,a2,a2,x,x;]v) + 00 (where`isorec(x+:a1)a2,x;:a2)a1:c+,c;):T0 \nT0 ;` SCT1<.c1;` SCT2<2.c2 a1:T1)a2:T2) 1;` SCT1XT2<T10XT0.c1Xc2 2  C. THE COERCION TRANSLATION ;` \nSCe:T.e0 ;` SCT10<T1.c1;,a<T0` SCT2<T0.c2 12 ((x:T)2;) ;` SC8a<T1:T2<8a<T0:T20. 1 ;` SCx:T.x 8a:(c20 \nmap[a:jT2j;](1,hid,c102i)0 app(a^jT10j;))0 gen ;` SCi:int.i (a62Dom(;)) 0 ;` ST1type;,x:T1 ` SCe:T2.e;` \nSTtype (x62;) ;` SCx:T1:e:T1!T2.x:jT1j;:e0;` SCT<top.top D. CANONICALIZATION PROOF WedefneasetofclosedvaluesStobecanonicallyclosed \nwhen: ifv2Sandv!7cv 0thenv 02S,and  ifv2Sandv 07vandv 0hasthesametypeasv  !c thenv 02S. Wedefneanassignmenttobeafnitemappingfromtype \nvariablestopairs(TS),suchthatTisaclosedtype,and Sisacanonicallyclosedsetofclosedvalueshavingtype T.Ifaisanassignment,wewritea(v)tomeantheresult \nofperformingthesubstitutionobtainedbyignoringtheset componentsoftheassignment. WenextdefnealogicalrelationROovervaluestobe \n1theleastrelationsuchthatROholdsif`v:a(T),v 1(v)canonicalizes,and: ifTisathenv2Swherea(a)(TS)  ifTisT1^T2thenRO(1v)andRO(2v) \n 1112 T00 ifTis8a:T0thenforanyclosedtype, RO 10[100Iu]((appT00)v) ifTisfa:T0thenRO(unfoldv). 10[1Iu] \nNotethatfunctionspaces(andproductsaswell)arecon\u00adsideredtobebasetypes,whichdramaticallysimplifesthe constructionoftherelation,asiteliminatesanynegative \nappearancesoftherelationbeingdefned.Thisispossible becausethereexistnocoercionsthateliminatefunctionsor \nproducts. LemmaD.1.WhenROiswell-defned(thatis,whenthe 1 FV(T).Dom(a)),itiscanonicallyclosed. DefnetherelationROovercoercionssothatRO(c) \n11)12 11)12ifRO(v)impliesRO(cv),forallvaluesv.Let[[;]]bethe 1112 setofassignmentswhosedomainisexactlythedomainof \n;.Alsolet[[<]]abethesetofmappings'fromDom(<)to closedcoercionssuchthatR;(Ox)('(x)),forallx2Dom(<). LemmaD.2.If;;<`c:T1)T2anda2[[;]]and'2 \n[[<]]athenRO('(a(c))). 11)12 Proof.Byinductiononderivations.Theinteresting casesarethoseforrecandisorec. \nCase1:Supposethelastruleappliedisrecformation, RO andleta2[[;]]and'2[[<]]a.Suppose u:1(v).Wewish RO toshowthat \nu0:10('(a(rec(x:a)a 0:c)))v).Weshow thisbyinductiononthederivationof u:1(v). ROLetc 0'(a(c)).Byassumption,vcanonicalizesandhas \nappropriatetype,sov7cfoldv 0 .Thusrec(x:a)a 0:c !*0)v canonicalizesanditcertainlyhasappropriatetype. \nItremainstoshowthatRO(unfold(rec(x: 10[ u0:10Iu] a)a 0:c0)v)).LetSbethesetofvaluesv 0suchthat RO0)followsfromasmallerderivationthanthatof \nu:1(v ROItisnotdifculttoshowthatSiscanonically u:1(v). closed.Leta 0extendasothata 0(a)(a(fa:T)S)and \n00O '0 a(a)(a(fa0:T0)R u0:10).Alsoletextend'sothat '0(x)rec(x:a)a 0:c0).Notethata 02[[;aa 0]]. Byinduction, \nu0:10(rec(x:a)a 0:c0)v 0)forall RO 0RO0 00 v2S,andthusu)u0(rec(x:a)a:c)).Thus '0 2[ x:a)a 0] a 0 .Hence,bytheouterinduc-RO0 \n'0 0000 tionhypothesis,1)10('0(a 0(c))).Letc 00(a 0(c)) c[a(fa:T)a(fa0:T0)rec(x:a)a:c)/aax]. WemayshowbyinductiononTthatRO0 \n(unfoldv)(since 1RO 1[ u:1Iu](unfoldv)byasmallerderivationthanRO u:1(v)). RO000 Thus,usingtheabove,10(c(unfoldv)).Wemaythen \nshow,byinductiononT,thatRO(c 00(unfoldv)). 10[ u0:10Iu0] Observethat: 00 unfold(rec(x:a)a:c)v) 00 7unfold(rec(x:a)a:c)(foldv \n!* c0)) 000 7unfold(fold(c)) !cv 7c 00 v 0 !c and 00000 c(unfoldv)7c(unfold(foldv)) !* c 000 7!ccv Therefore,RO(unfold(rec(x:a)a \n0:c0)v))by 10[ u0:10Iu0] canonicalclosure. Case2:Supposethelastruleappliedisisorecfor\u00admation.Thereasoninginthiscaseissimilartotheprevious \none,exceptthata 0and'0 aredefnedsothat: 0 a(a1)(a(fa1:T1)S) 00 O a(a1)(a(fa1:T1)R u1:11) a 0(a2)(a(fa2:T2)0) \n 00 O a(a2)(a(fa2:T2)R u2:12) '0 00 (x+)isorec(x+:a1)a2x;:a2)a1: '(a(c+))'(a(c;))) 00 '0(x;)isorec(x;:a2)a1x+:a1)a2: \n'(a(c;))'(a(c+))) whereSisdefnedanalogouslytothepreviouscase.Then RO0 ('0 u1)u 0(x+))holdsbythesamesortofinductionasin \n2 thepreviouscase,andRO0 ('0(x;))holdsvacuously. 0 u2)u1 UsingLemmaD.2,wemayeasilyproveTheorem5.5byan \ninductionontypingderivations. E. REFERENCES [1]ValBreazu-Tannen,ThierryCoquand,CarlA. Gunter,andAndreScedrov.Inheritanceasimplicit \ncoercion.InformationandComputation,93:172{221, 1991. [2]LucaCardelli,SimoneMartini,JohnC.Mitchell,and \nAndreScedrov.AnextensionofsystemFwith subtyping.InformationandComputation,109(1{2), 1994. [3]LucaCardelliandPeterWegner.Onunderstanding \ntypes,dataabstraction,andpolymorphism. ComputingSurveys,17(4):471{522,December1985. [4]KarlCrary,StephanieWeirich,andGregMorrisett. \nIntensionalpolymorphismintype-erasuresemantics. In1998ACMInternationalConferenceonFunctional Programming,pages301{312,Baltimore,September \n1998.ExtendedversionpublishedasCornell UniversitytechnicalreportTR98-1721. [5]Pierre-LouisCurienandGiorgioGhelli.Coherenceof \nsubsumption,minimumtypingandtype-checkingin F.MathematicalStructuresinComputerScience, 2(1):55{91,1992. \n[6]AllynDimock,RobertMuller,FranklynTurbak,and J.B.Wells.Stronglytypedfow-directed representationtransformations.In1997ACM \nInternationalConferenceonFunctionalProgramming, pages11{24,Amsterdam,June1997. [7]GregMorrisett,KarlCrary,NealGlew,Dan \nGrossman,RichardSamuels,FrederickSmith,David Walker,StephanieWeirich,andSteveZdancewic. TALx86:Arealistictypedassemblylanguage.In \nSecondWorkshoponCompilerSupportforSystem Software,Atlanta,May1999. [8]GregMorrisett,DavidWalker,KarlCrary,andNeal \nGlew.FromSystemFtotypedassemblylanguage. ACMTransactionsonProgrammingLanguagesand Systems,21(3):527{568,May1999.Anearlierversion \nappearedinthe1998SymposiumonPrinciplesof ProgrammingLanguages. [9]BenjaminC.Pierce.ProgrammingwithIntersection \nTypesandBoundedPolymorphism.PhDthesis, CarnegieMellonUniversity,SchoolofComputer Science,Pittsburgh,Pennsylvania,December1991. \n [10]BenjaminC.Pierce.Intersectiontypesandbounded polymorphism.MathematicalStructuresinComputer Science,7(2):129{193,April1997. \n  \n\t\t\t", "proc_id": "351240", "abstract": "I present a type-preserving translation that eliminates subtyping and bounded quantification without introducing any run-time costs. This translation is based on Mitchell and Pierce's encoding of bounded quantification using intersection types. I show that, previous negative observations notwithstanding, the encoding is adequate given a sufficiently rich target type theory. The necessary target type theory is made easily typecheckable by including a collection of explicit coercion combinators, which are already desired for eliminating subtyping. However, no form of coercion abstraction is necessary (even to support bounded quantification), leading to a simple target language.", "authors": [{"name": "Karl Crary", "author_profile_id": "81100253026", "affiliation": "Carnegie Mellon University, Pittsburgh, PA", "person_id": "P157139", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/351240.351247", "year": "2000", "article_id": "351247", "conference": "ICFP", "title": "Typed compilation of inclusive subtyping", "url": "http://dl.acm.org/citation.cfm?id=351247"}