{"article_publication_date": "09-01-2000", "fulltext": "\n &#38;S.LP yoW periods ,hihisa has da ,sothasa beolv in p o se s. e b e e n u se d to a t k do k is rem \no b e\u00ad h ev , a b e o u rs h a re y the m h it p o in te r w ith a p o in y here. , ab o b e Cthepoin \ntinea tth thefrstt ysomeas y a e in p o in e lo \u00ad b oth b e sa p o in vode een\"\" ythem bet ,itkno kto \nkissa being kataGCbeenysta kgro b een e w e to b e tu rn ed of . pol\u00ad h h a s a kno k from k u n b er \ne lev h sa e a rra e h a ben expetedbeha hw tof bet berofm eranea t on h step o f t o f liv t o f w \np er\u00ad b er b e e o b ta in ert in ea o in 3 t to a e w tinwhihtheystthet eran wspen edataa ber be\u00ad \nviourofthev ben hs.Com\u00ad ben tofliv tdropino ,wbet v(EB) v(EB) v(EB) v(EB) v(EB) v(EB) ,whiv(EB) y o f \nh sta e h a y o f e h a e ha be b e e ha e h a h w t in v b een t s k sa y o f p o in be y on y b e v \ny toperates yhija be etobein berbeen tofliv yhaem ha ytoev been wo tofliv eha hblo hlo posed htoon kmeonr \nhon,Sw\n\t\t\t", "proc_id": "351240", "abstract": "We describe an efficient technique for incorporating Baker's incremental garbage collection algorithm into the Spineless Tagless G-machine on stock hardware. This algorithm eliminates the stop/go execution associated with bulk copying collection algorithms, allowing the system to place an upper bound on the pauses due to garbage collection. The technique exploits the fact that objects are always accessed by jumping to code rather than being explicitly dereferenced. It works by modifying the entry code-pointer when an object is in the transient state of being evacuated but not scavenged. An attempt to enter it from the mutator causes the object to \"self-scavenge\" transparently before resetting its entry code pointer. We describe an implementation of the scheme in v4.01 of the Glasgow Haskell Compiler and report performance results obtained by executing a range of applications. These experiments show that the read barrier can be implemented in dynamic dispatching systems such as the STG-machine with very short mutator pause times and with negligible overhead on execution time.", "authors": [{"name": "A. M. Cheadle", "author_profile_id": "81100154205", "affiliation": "Imperial College, London", "person_id": "P2828", "email_address": "", "orcid_id": ""}, {"name": "A. J. Field", "author_profile_id": "81100419482", "affiliation": "Imperial College, London", "person_id": "PP36038536", "email_address": "", "orcid_id": ""}, {"name": "S. Marlow", "author_profile_id": "81100515135", "affiliation": "Microsoft Research, Cambridge", "person_id": "PP37038471", "email_address": "", "orcid_id": ""}, {"name": "S. L. Peyton Jones", "author_profile_id": "81100271851", "affiliation": "Microsoft Research, Cambridge", "person_id": "P254328", "email_address": "", "orcid_id": ""}, {"name": "R. L. While", "author_profile_id": "81100277274", "affiliation": "The University of Western Australia, Perth", "person_id": "PP31068874", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/351240.351265", "year": "2000", "article_id": "351265", "conference": "ICFP", "title": "Non-stop Haskell", "url": "http://dl.acm.org/citation.cfm?id=351265"}