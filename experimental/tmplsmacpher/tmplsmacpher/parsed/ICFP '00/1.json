{"article_publication_date": "09-01-2000", "fulltext": "\n Regular Expression Types for XML Haruo Hosoya J\u00b4er ome Vouillon Benjamin C. Pierce Department of Computer \nand Information Science University of Pennsylvania fhahosoya,vouillon,bcpierceg@saul.cis.upenn.edu \nABSTRACT Weproposeregularexpressiontypesasafoundationfor XMLprocessinglanguages.Regularexpressiontypesare \nanaturalgeneralizationofDocumentTypeDefnitions (DTDs),describingstructuresinXMLdocumentsusingreg\u00adularexpressionoperators(i.e.,*,?,|,etc.)andsupporting \nasimplebutpowerfulnotionofsubtyping. Thedecisionproblemforthesubtyperelationis EXPTIME-hard,butitcanbecheckedquiteefcientlyin \nmanycasesofpracticalinterest.Thesubtypingalgorithm developedhereisavariantofAikenandMurphy'sset\u00adinclusionconstraintsolver,towhichareaddedseveralop\u00adtimizationsandtwonewproperties:(1)ouralgorithmis \nprovablycomplete,and(2)itallowsauseful\\subtagging\" relationbetweennodeswithdiferentlabelsinXMLtrees. \n1. INTRODUCTION TherecentrushtoadoptXMLisdueinparttothehope thatthestatictypingprovidedbyDTDs[22](ormoreso\u00adphisticatedmechanismssuchasXML-Schema[23])willim\u00adprovethesafetyofdataexchangeandprocessing.However, \nalthoughXMLdocumentscanbecheckedforconformance withDTDs,currentXMLprocessinglanguagesofernoway ofverifyingthatprogramsoperatingonthesedocumentswill \nalwaysproduceconformingoutputs. Inthispaper,weproposeregularexpressiontypesasa foundationforstaticallytypedprocessingofXMLdocu\u00adments.Regularexpressiontypesareanaturalgeneraliza\u00adtionofDTDs,describing,asDTDsdo,structuresinXML \ndocumentsusingregularexpressionoperators(i.e.,*,?,|, etc.).Moreover,regularexpressiontypessupportasimple \nbutpowerfulnotionofsubtyping. Wehaveusedregularexpressiontypesinthedesignof adomain-specifclanguagecalledXDuce(\\transduce\")for \nXMLprocessing[15,14].Inthepresentpaper,though, ourfocusisonthestructureofthetypesthemselves,their roleindescribingtransformationsonXMLdocuments,and \nthealgorithmicproblemstheypose.Interestedreadersare Permission to make digital or hard copies of all \nor part of this work for personal or classroom use is granted without fee provided that copies are not \nmade or distributed for pro.t or commercial advantage and that copies bear this notice and the full citation \non the .rst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires \nprior speci.c permission and/or a fee. ICFP 00, Montreal, Canada. Copyright 2000 ACM 1-58113-202-6/00/0009 \n..$5.00 invitedtovisittheXDucehomepage http://www.cis.upenn.edu/~hahosoya/xduce.html formoreinformationonthelanguageasawhole. \nAsasimpleexampleofregularexpressiontypes,consider thefollowingsetofdefnitions typeAddrbook=addrbook[Person*] \ntypePerson=person[Name,Addr,Tel?] typeName=name[String] typeAddr=addr[String] typeTel=tel[String] correspondingtothefollowingDTD: \n<!ELEMENTaddrbookperson*> <!ELEMENTperson(name,addr,tel?)> <!ELEMENTname#PCDATA> <!ELEMENTaddr#PCDATA> \n<!ELEMENTtel#PCDATA> Inoursyntax,typeconstructorsoftheformlabel[...] classifynodes(\\elements\"inXMLjargon)with \nthelabellabel,i.e.,XMLstructuresoftheform <label>...</label>.Typesmayalsoinvolvetheregular expressionoperators*(repetition)and?(optionality), \naswellas|(alternation),whichwe'llseeexamplesof later.Here,thetypeAddrbookdescribesalabeladdrbook containingzeroormorerepetitionsofnodeswithlabel \nperson.Eachpersoncontainsasequenceofnodeslabeled name,addr,andoptionallytel,eachofwhichcontainsa String(called#PCDATAintheDTDsyntax).Aninstance \nofthetypeAddrbookisthefollowingXMLdocument: <addrbook> <person> <name>HaruoHosoya</name> <addr>Tokyo</addr> \n </person> <person> <name>JeromeVouillon</name> <addr>Paris</addr> <tel>123-456-789</tel> </person> \n<person> <name>BenjaminPierce</name> <addr>Philadelphia</addr> </person> </addrbook> Ingeneral,atypedenotesasetofdocuments.Ournotion \nofsubtypingissimplyinclusionbetweenthesetsdenotedby twotypes.Thefexibilityprovidedbythisformofsubtyping \nturnsouttobequiteusefulinprogramming.Forexample, thisdefnitionallowsthefollowingsubtyping: Person*<:(person[Name,Addr]*, \nperson[Name,Addr,Tel], Person*) |person[Name,Addr]* ThissubtypinggivesaviewofthetypePerson*astheunion \nofsequencesthathaveatleastonepersonwithteland sequencesthathavenopersonswithtel.Thisinclusion canbeusedtotriviallychecktheexhaustivenessofacase \nstatementwithtwocasescorrespondingtothetwoclauses oftheright-handtype.Noticethatifweinterpretedthe Person*typeasanML-liketype \n{person:{name:String, addr:String, tel:Stringoption}}list theconventionalsubtypingofvariantandrecordtypes \nwouldnotyieldaninclusionliketheoneabove.Wegive furtherexamplesoftheusefulnessofthiskindoffexible subtypinginSection2. \nThemaindifcultythatwemustfaceinprogramming withregularexpressiontypesisthatthedecisionproblemfor subtypingisalgorithmicallydifcult:typesareessentially \ntreeautomata[10]andthusthesubtypingproblemreduces todecidinglanguageinclusionfortreeautomata,whichis \nknowntobeEXPTIME-complete[20].1 Wehavedevelopedanalgorithmforsubtypecheckingthat worksquiteefcientlyonexamplesfromtheXMLprocess\u00adingdomain.Ouralgorithmcanbeviewedasanadaptation \nofAikenandMurphy'salgorithmforset-inclusionconstraint solving[1],withtwoimportantextensions.First,ouralgo\u00adrithmiscomplete,asweproveinSection4.Whilecom\u00adpletenessisnotcriticalinAikenandMurphy'scontextof \nprogramanalysesforoptimization,itiscrucialhereforgen\u00aderatingcomprehensibleerrormessagesincaseoftypecheck\u00adingfailure.Second,weallow\\subtagging\"betweenlabels, \nsupportingausefulobject-orientedprogrammingidiom. Wehaveincorporatedanumberofoptimizationtech\u00adniquesinourimplementationofthesubtypingalgorithm. \nTheserangefromstandardtechniquessuchashashconsing toset-theoreticoptimizationsarisingfromourobservations \noftheactualusesofsubtypinginXMLprocessing.Our algorithmrunsatreasonablespeedevenonXDuceappli\u00adcationsthatinvolvequitelargetypes,suchasthecomplete \nDTDforHTMLdocuments. Thecontributionsofthispapercanbesummarizedas follows: Wemotivatetheuseofregularexpressiontypes,set\u00adinclusion-basedsubtyping,andsubtaggingforthedo\u00admainofXMLprocessing. \n Weformalizetheconnectionofregularexpression typestotreeautomataanddevelopasubtypingal\u00adgorithm,givingsoundness,completeness,andtermi\u00adnationproofs. \n Weoutlineseveraloptimizationsspecializedtothedo\u00admainofXMLprocessingandpresentpreliminarymea\u00adsurementsoftheirpracticalefects. \n 1Strictlyspeaking,whatisknownisthatoursubtyping problemwithoutsubtaggingisEXPTIME-complete.We conjecturethatthisisalsothecasewithsubtagging. \nThepaperisorganizedasfollows.Inthenextsection,we givesomeexamplesofprogrammingwithregularexpression types.InSection3,wegivetheconnectionofregularex\u00adpressiontypestotreeautomataandthedefnitionofsubtyp\u00ading.InSection4,wepresentoursubtypingalgorithmand \nproveitscorrectness.Section5describesourimplementa\u00adtiontechniquesandSection6discussessomeperformance \nmeasurements.WesurveyrelatedworkinSection7and concludeinSection8. 2. REGULAR EXPRESSION TYPES Webeginwithaseriesofexamplesillustratingtheappli\u00adcationofregularexpressiontypesandsubtypingtoXML \nprocessing. 2.1 Values Eachtypeinourlanguagedenotesasetofsequences.Types likeStringandtel[String]denotesingletonsequences; \nthetypeTel*denotessequencesformedbyrepeatingthe singletonsequenceTelanyfnitenumberoftimes.Soeach elementofthetypeperson[Tel*]isasingletonsequencela\u00adbeledwithperson,containinganarbitrary-lengthsequence \nofTels.IfSandTaretypes,thenthetypeS,Tdenotesall thesequencesformedbyconcatenatingasequencefromS andasequencefromT.Thecommaoperatorisassociative: \nthetypes(Name,Tel*),AddrandName,(Tel*,Addr)have exactlythesamesetofelements.Asthe\\unit\"element forthecommaoperator,wehavetheemptysequencetype, \nwritten().Thus,Name,()and(),Nameareequivalentto Name. 2.2 Subtyping Thesubtyperelationbetweentwotypesissimplyinclusion \nbetweenthesetsofsequencesthattheydenote.(SeeSec\u00adtion3fortheformaldefnition.) Wenowshowthesequenceofstepsinvolvedinverifying \nthattheXMLdocumentgivenintheintroductionactually hastypeAddrbook.First,fromtheintuitionthat?means \\optional\",weexpectthefollowingrelations: \nName,Addr<:Name,Addr,Tel? Name,Addr,Tel<:Name,Addr,Tel? Noticethateachrighthandsidedescribesalargersetof \nsequencesthanthelefthandside.Similarly,*means\\zero ormore,\"soinparticularitcanbethree: T,T,T<:T* Wrappingbothsidesofthefrsttworelationswiththela\u00adbelpersonandcombiningthesewiththethirdrelation,we \nobtain: person[Name,Addr], person[Name,Addr,Tel], person[Name,Addr] <:(person[Name,Addr,Tel?])*: Finally,enclosingbothsidesbyaddrbookconstructor,we \nobtain addrbook[ person[Name,Addr], person[Name,Addr,Tel], person[Name,Addr]] <:addrbook[(person[Name,Addr,Tel?])*] \nAddrbook: SincetheXMLdocumentgivenintheintroductiontrivially hasthetypeonthelefthandside,ithasalsothetypeon \ntherighthandside. 2.3 Regular Expression Types as Derived Forms Wehaveseenarichvarietyoftypeconstructors,butsome \nofthemcanactuallybederivedascombinationsofasmaller setofotherconstructors|concatenation,labeling,alterna\u00adtion,emptysequence,andrecursivedefnition.Forexample, \ntheoptionaltypeT?canberewrittenasT|(),usinganal\u00adternationoruniontypeandtheemptysequence. Otherregularexpressionoperatorsarealsodefnable.T+, \nstandingforoneormorerepetitionsofT,canberewritten as(T,T*).Moreinterestingly,T*itselfcanalsobederived \nusingrecursion.Thatis,T*isequaltoavariableXdefned bythefollowingequation: typeX=T,X|() (Notethesimilaritytothedefnitionoflistasadatatype \ninML.) 2.4 Recursion Yetmoreinterestingtypescanbebuiltusingrecursionto expressnestingofstructures.Considerthefollowingdefni\u00adtions. \ntypeFld=Rcd* typeRcd=name[String],folder[Fld] |name[String],url[String], (good[]|broken[]) ThemutuallyrecursivetypesFld(\\folder\")andRcd \n(\\record\")defneasimpletemplateforstoringstructured listsofbookmarks,suchasmightbefoundinawebbrowser: \nafolderisalistofrecords,whilearecordiseitheranamed folderoranamedURLpluseitheragoodorabadtagin\u00addicatingwhetherornotthelinkisbroken. \nWecanwriteanotherpairoftypes typeGoodFld=GoodRcd* typeGoodRcd=name[String],folder[GoodFld] |name[String],url[String],good[] \nwhichareidenticaltoFldandRcdexceptthatlinksare allgood.Intuitively,weexpectthatGoodFldshouldbea subtypeofFldbecauseGoodFldallowsfewerpossibilities \nthanFld.Ourtypesystemvalidatesthisinclusion. 2.5 Subtagging InXMLprocessing,wesometimesencountersituations \nwherewehavetohandlealargenumberoflabelsandit isconvenienttoorganizetheminahierarchy,inthestyle ofobject-orientedlanguages.Thisleadsustosupporta \nnotionof\\subtagging\"inourtypesystem,allowingsubtyp\u00adingbetweentypeswithdiferentlabels.Thisfeaturegoes \nbeyondtheexpressivepowerofDTDs,butasimilarmech\u00adanismcalled\\equivalenceclasses\"canbefoundinXML\u00adSchema(Section3.5in[23]|socalledeventhoughitdoes \nnotyieldasymmetricrelationbetweentypes). Thesubtaggingrelationisarefexiveandtransitivere\u00adlationonlabels.Wedeclaresubtaggingexplicitlywitha \nsetofglobalsubtagforms.Forexample,thefollowingde\u00adclaresthatthetagsi(italic)andb(bold)aresubtagsof fontstyle: \nsubtagi<:fontstyle subtagb<:fontstyle Inthepresenceofthesedeclarations,wehavethesubtyping relations i[T]<:fontstyle[T] \nb[T]<:fontstyle[T] forallT.Theserelationsallowustocollapsetwocase branchesforiandbintoonecaseforfontstyle,whenboth \ncasesbehavethesame.Thisuseofsubtaggingissimilarto thecommontechniqueinobject-orientedprogrammingof defninganabstractclassfontstylewithsubclassesiand \nb. Subtaggingisalsousefulforotherpurposes.IntheXDuce language,thespeciallabel~denotes\\anylabel.\"Thatis, \nforeverylabell,wehavethefollowingbuilt-insubtagging relation: subtagl<:~ Thus,thetype~[T]describesanylabeledstructurewhose \ncontentsbelongtotypeT.Thelabel~,inturn,canbeused todefneacompletelygenerictypeAnyasfollows: typeAny=(~[Any]|String|Int|Float)* \nThatis,thevaluesdescribedbyAnyconsistofzeroormore repetitionsofarbitrarylabels(containingAny)andbase \ntypes. 2.6 Pattern Matching Regularexpressiontypescanenhancethepatternmatch\u00adingmechanismsfoundinmainstreamfunctionallanguages. \nForexample,inXDucewecanwritethefollowingpattern match: _:(person[Name,Addr]*), x:(person[Name,Addr,Tel]), \n_:(Person*) !(*dosomestuff*) |y:(person[Name,Addr]*) !(*dootherstuff*) Apatternoftheformx:TmatchesanyvalueoftypeTand \nbindsthevariablextothisvalue.(Underscoreisusedasa \\don'tcare\"variablename,asinML.)Inthisexample,the frstcasematchesvaluescontainingatleastonepersonwith \ntel.Inthiscase,thevariablexisboundtothefrstperson withatel.Thesecondcasematchesvaluescontainingno personwithtel. \nNoticethatthefrstpattern_:(person[Name,Addr]*) inthefrstcasematchesavariablelengthsequence| somethingthatisbeyondthepowerofMLpatternmatch\u00ading.Thismakesstandardtechniquesforexhaustiveness \ncheckingsomewhatdifculttoapplytosuchpatterns. However,wecanusesubtypingalsoforcheckingexhaus\u00adtivenessofpatternmatches.Weassumethatthetypefor \ntheinputvaluetothepatternmatchisavailablefromthe context.(InXDuce,thisisensuredbytypeannotationson functionheaders.)Intheexample,supposethatthetypeof \ntheinputvalueisPerson*.Inordertoshowexhaustiveness ofthepatternmatchwithrespecttothistype,itissufcient \ntoshowthateveryvalueoftypePerson*isacceptedbythe pattern.Thisleadstothefollowingsubtypingcheck Person*<:(person[Name,Addr]*, \nperson[Name,Addr,Tel], Person*) |person[Name,Addr]* wheretherighthandsideiscalculatedbytakingtheunion \nofthetypesofthetwopatternclauses. 2.7 Semistructured Data OneofthemainapplicationdomainsforXMLisrep\u00adresentingandtransmittingdatabases.Sincethisfexi\u00adblerepresentationallowsforstraightforwardevolutionof \ndatabase\\schemas\"andintegrationofdatabaseswithdif\u00adferentschemas,itisoftencalledasemistructuredformat \ninthedatabasecommunity.Thisviewisespeciallyuseful forwrapper/mediatorsystemsfortheWebthatintegrate multipleindependentdatasources,whichmaythemselves \noccasionallyevolve.Inthissection,wepresentsomedif\u00adferentscenariosofdatabaseevolutionandintegrationand \nshowhowourregularexpressiontypesensurestaticsafety inafexibleandrobustway. SupposethatwebeginwiththefollowingXMLdatabase \nA <addrbook> <person> <name>HaruoHosoya</name> <addr>Tokyo</addr> </person> <person> <name>JeromeVouillon</name> \n<addr>Paris</addr> <tel>123-456-789</tel> </person> </addrbook> withthetypeAddrbookdefnedasfollows: typeAddrbook=addrbook[Person*] \ntypePerson=person[Name,Addr,Tel?] Now,supposeweupgradethisdatabasesothatsomeper\u00adsonrecordcancontainarbitrarilymanytels.Thisprocess \ninvolveschangestotypes,databases,andprograms.We changethetypesasfollows: typePerson=person[Name,Addr,Tel*] \nNoticethatthenewcontenttype(Name,Addr,Tel*)of personisasupertypeoftheoldtype(Name,Addr,Tel?) andthereforethetypeAddrbookofthewholedatabasebe\u00adcomesbiggeraswell.Thismeansthatourdatabase,which \nhadtheoldtype,stillconformstothenewtype,without theneedofrestructuring.Afteraddingsometelfeldsto ourdatabase,wearriveatthefollowingdatabaseB: \n<addrbook> <person> <name>HaruoHosoya</name> <addr>Tokyo</addr> <tel>111-222-333</tel> </person> <person> \n<name>JeromeVouillon</name> <addr>Paris</addr> <tel>123-456-789</tel> <tel>999-888-777</tel> </person> \n</addrbook> Ateachstepinthisprocess,thetypeofthedatabaseis Addrbook.Thedatabasecanthereforesmoothlyevolve \nwhilepreservingtherobustnessprovidedbytypesafety. Upgradingtheprogramsthatoperateonourdatabasecan beslightlytrickier.Sincethenewtypeisasupertypeofthe \noldtyperatherthanasubtype,allfunctionsthatoutput theoldtypecanbetreatedasoutputtingthenewtype. Ontheotherhand,functionsthatinputtheoldtypehave \ntobemodifedsoastohandletheadditionalcases.Some programmersmaybehappywiththis,sincethetypesys\u00adtemishelpinginisolatingthepartoftheprogramrequiring \nupdates.Otherprogrammersmayfeelthatthetypesare preventing\\forwardcompatibility\"ofoldprograms.Forex\u00adample,ifweareinterestedinextractingspecifcallytheName \nfeld,thenourprogramshouldworkforthenewdatabase justaswellastheold.Butthissortofforwardcompatibil\u00aditycaneasilybeachieved,atthecostofwritingtheoriginal \nprograminaslightlymorerefnedway:wemaintainthecon\u00adventionthatfunctionsonpersonsshouldactuallybeable tohandleinputsoftype(Name,Addr,Tel?,Any),simplyig\u00adnoringtheadditionalfeldsattheend.Nowif,whenthe \ndatabase'stypeisevolved,newfeldsarealwaysaddedat theend,theseoldprogramswillworkandtypecheckwithout change. \nXMLalsomakes\\databaseintegration\"easierthanmore structuredformatssuchasrelationaldatabases.Again,reg\u00adularexpressiontypeshelpensurethetypesafetyofintegra\u00adtionsteps.Forexample,considerintegratingtheprevious \ndatabaseBwithanotherdatabaseCwithaslightlydiferent typefromB's: typeAddrbook2=addrbook[Person2*] typePerson2=person[Name,Addr,Email*] \ntypeEmail=email[String] Dataintegrationagaininvolveschangestotypes, databases,andprograms.Weintegratedatabasesbycon\u00adstructingatreewhoseroothasthelabeladdrbookand \nwhosecontentistheconcatenationofthecontentsofthe twodatabases.Thenaturaltypeofthismergeddatabaseis: typeAddrbook=addrbook[Person*,Person2*] \nSupposethatwewanttowriteaprogramtoscanthewhole sequenceandextractthenamesofallthepersons.Forwrit\u00adingsuchaprogram,thetypeofthedatabaseisratherincon\u00advenient,sinceitinvolvestwooccurrencesofrepetition,nat\u00adurallyleadingtotwoseparateloopsforscanningthewhole \nsequence.Obviously,itisbettertorollthesetwoloopsinto one.Todothis,wecanuseasubtypeinclusionthatforgets \nthefactthatthatallthePersonscomebeforethePerson2s: Person*,Person2*<:(Person|Person2)* Now,eachelementhaseithertypePersonorelsetype \nPerson2,leadingnaturallytoone-loopscans.However,we candobetter:eachstepofthenaturalscanoverthistype involvestwoverysimilarcases,bothofwhichjustextract \ntheNamefeld.Wecanuseonemoresubtypeinclusion(ac\u00adtuallyanequivalence,hencewritten,usingthefactthat alternationdistributesoverlabelsandconcatenations)to \nrewritethetypesothatthecommonstructureisexposed: person[Name,Addr,Tel*]| person[Name,Addr,Email*] person[(Name,Addr,Tel*)| \n(Name,Addr,Email*)] person[Name,Addr,(Tel*|Email*)] Afterallthisrewriting,thetypeAddrBookisnowexpressed \ninaformthatleadsnaturallytoscanningtheNamefelds withasinglecompactloop: addrbook[person[Name,Addr,(Tel*|Email*)]*] \nThesedistributivelawsillustratethefexibilityofregular expressiontypes,comparedtothe\\tagged\"sumtypes(as \nfound,forexample,inMLandHaskell).  3. DEFINITIONS Wedistinguishtwoformsoftypes:externalandinternal. \nTheexternalformisonethattheuseractuallyreadsand writes;alltheexamplesintheprevioussectionsareinthis form.Internally,however,thesubtypingalgorithmusesa \nsimplerrepresentationtostreamlineboththeimplementa\u00adtionanditsaccompanyingcorrectnessproofs.Wefrstgive \nthesyntaxofeachform.Next,wedescribethetranslation fromtheexternalformtotheinternalform.Thenwegive thedefnitionofsubtypingintermsoftheinternalform. \n3.1 External Form Weassumeacountablyinfnitesetoflabels,rangedoverby l,andacountablyinfnitesetofvariables,rangedoverby \nX.Typeexpressionsarethendefnedasfollows. T :: () emptysequence X variable l[T] label T,T concatenation \nT|T union Thebindingsoftypevariablesaregivenbyasingle,global setEoftypedefnitionsofthefollowingform. \ntypeX=T Thebodyofeachdefnitionmaymentionanyofthedefned variables(inparticular,defnitionsmayberecursive).We \nsometimesregardEasamappingfromtypevariablesto theirbodies.Wewritedom(E)forthesetofdefnedvari\u00adables. BasetypessuchasStringandIntareactuallytreatedas \nspeciallabels:StringisanabbreviationforString[]and IntforInt[].(Thismeansthat,strictlyspeaking,values \nofthesetypesarealsolabels:forexample,theelements ofInt[]include1[],2[],etc.,where1and2arebuilt-in sub-tagsofInt.) \nWeassumeaglobalsubtaggingrelation,arefexiveand transitiverelationonlabels,written-. Aswehavedefnedthemsofar,typescorrespondtoar\u00adbitrarycontext-freegrammars|forexample,wecanwrite \ndefnitionslike: typeX=Int,X,String|() Sincethedecisionproblemforinclusionbetweencontext freelanguagesisundecidable[13],weneedtoimposean \nadditionalrestrictiontoreducethepowerofthesystemso thattypescorrespondtoregulartreelanguages.Deciding \nwhetheranarbitrarycontext-freegrammarisregularisalso undecidable[13],soweadoptasimplesyntacticcondition, \ncalledwell-formedness,thatensuresregularity.Intuitively, well-formednessallowsrecursiveusesofvariablestooccur \nonlyintailpositions.Forexample,weallowthefollowing typedefnitions: typeX=Int,Y typeY=String,X|() Moreprecisely,wedefnewell-formednessintermsofa \n\\right-linearity\"judgmentoftheforma`T:rl(X),where aisasetofvariables.Itshouldberead\\Tisright-linearin \nX,assumingthatallbodiesofvariablesinaareright-linear inX.\"Thisjudgmentusesanauxiliary\\disconnectedness\" \njudgmentoftheforma`T:dc(X),read\\Tisdisconnected fromX(i.e.,XdoesnotoccurinthetoplevelofT),assum\u00adingthatallbodiesofvariablesinaaredisconnectedfrom \nX.\"Thesetwojudgmentsaredefnedbythefollowingrules (whereX6Y): a`T:rl(X)forT()orl[T]orX a`Y:rl(X)ifY2a \na`Y:rl(X)ifY6anda[fYg`E(Y):rl(X) 2a a`T|U:rl(X)ifa`T:rl(X)anda`U:rl(X) a`T,U:rl(X)iff`T:dc(X)anda`U:rl(X) \na`T:dc(X)forT()orl[T] a`Y:dc(X)ifY2a a`Y:dc(X)ifY6anda[fYg`E(Y):dc(X) 2a a`T|U:dc(X)ifa`T:dc(X)anda`U:dc(X) \na`T,U:dc(X)ifa`T:dc(X)anda`U:dc(X) Theemptysequence,alabel,andthevariableXareright\u00adlinearinX.ForvariablesYotherthanX,werecursively \nchecktheright-linearityofthebodyofY.Toensureter\u00admination,wekeeptrackinaofvariablesthathavealready beenchecked.For(T|U),bothTandUshouldberight-linear \ninX.For(T,U),wecheckifUisright-linearinX,whileT isdisconnectedfromX.Thedisconnectednessjudgmentis defnedsimilarly,exceptforthefrstrule,inwhichXisnot \ndisconnectedfromX.Now,thesetoftypedefnitionsEis saidtobewell-formedif f`E(X):rl(X)forallX2dom(E) 3.2 \nInternal Form Transitionsorinternaltypesaredefnedbythefollowing: A::Eleaftransition l(X,X)branchtransition \nAjAalternation femptytransition FV(A)isthesetofstatesappearinginA.Atreeautomaton orcontextisafnitemappingtfromstatesXitotransitions \nAi.Anystateoccurringinthetransitionsinthecontext mustbeoneofitsstates:FV(t(X)).dom(t)forX2 dom(t). Thesemanticsofinternaltypesaredefnedintermsof \ngroundtypes,whicharedefnedbythefollowinggrammar: t:: Eleaf l(t,t)branch Intuitively,Ecorrespondstotheemptysequence;l(t,t0)cor\u00adrespondstoasequencewhoseheadisalabell[T]where \ntcorrespondstoTandt0correspondstotheremainderof thesequence.Groundtypescanbeseenasabstractionsof setsofconcretevalues.Thatis,eachconcretevalue\\di\u00adrectly\"belongstoagroundtypewiththesamestructure. \nForexample,thevalue <name>Haruo</name><addr>Tokyo</addr> hasexternaltype name[String[]],addr[String[]] \nfromwhichwecanreadofthegroundtype: name(String(E,E),addr(String(E,E),E)): Atransitiondenotesasetofgroundtypes.Thedeno\u00adtationfunction[ \nA] Lisdefnedastheleastsolutionofthe followingsetofequations: [ EL] fEg [ l(X,X0)]]Lfl0(t,t0)jl0 -l^t2[[t(X)]]L^ \nt02[[t(X0)]]Lg [ AjA0L] [ AL] [[ A0L] [ f] Lf Theserulesarestraightforwardexceptthatabranchtran\u00adsitionl(X,X0)denotesnotonlybranchgroundtypeswith \nlabellbutalsoalllabelssmallerthanlinthesenseof l0 subtagging.(Viewedanotherway,thedenotationfunction \ndefnesthesetoftreesacceptedbyatreeautomaton.) Forlateruseinthesubtypingalgorithm,wedefnethe structuralequivalence=betweentransitionsasthesmallest \nrelationcontainingthefollowing: Ajf=A AjA=A (AjB)jC=Aj(BjC) AjB=BjA AjB=AjCifB=C Theserulesessentiallytreatatypeasasetof(leaforbranch) \ntransitions.Wecaneasilyprovethat[ A] L[[B] Lwhen\u00adeverA=B. Intheremainderofthepaper,weassumethatasingle \ncontexttisgivenonceandforallandsharedamongall types.Thereforewesimplywrite[ A] tomean[ A] L.In examplesandinformalexplanations,wesometimesidentify \nastateanditsassociatedtransition.Forinstance,wewrite l(B,C)forl(X,Y)whereBt(X)andCt(Y). 3.3 Translation \nGivenanexternaltypeT0,translationconstructsapairof aninternaltypeandacontext.Thecontextassociateseach \nstateXwithaninternaltypecorrespondingtosomeexternal typeT.Foreaseofformulation,wewritesuchstatesasXT. \nAteachstep,wecomputeaninternaltypecorresponding toanexternaltypeusingthefunctiontsdefnedbelow. ts(())pE \nts(l[T])pl(XT,X()) ts(X)pf X2p ts(X)pts(E(X))(p[fXg)X26p ts(T1|T2)pts(T1)pjts(T2)p ts((),T)pts(T)p ts(l[T1],T2)pl(XT1,XT2) \nts(X,T)pf (X,T)2p ts(X,T)pts(E(X),T)(p[f(X,T)g) (X,T)6 2p ts((T1,T2),T3)pts(T1,(T2,T3))p ts((T1|T2),T3)pts(T1,T2)pjts(T1,T3)p \nThisfunctioncollectsalllabelsappearingattheheadofase\u00adquenceandturnsthemintobranchtransitionswhose\\car\" \nstatecorrespondstothecontenttypeofthelabelandwhose \\cdr\"statecorrespondstotheremainderofthesequence. \nThesebranchtransitionscontainstatesXT,forwhichthe associatedexternaltypeTwillbethetargetoftranslation \ninthenextstep.Thefunctiontsalsocollectstheleaftran\u00adsitionifthegiventypecontainstheemptysequence.We keeptrackofwhichtypeswehavealreadyseen,intheset \npoftypes.Whenweencounterthesametypeforthesec\u00adondtime,theresultistheemptyset.Forexample,sup\u00adposewehavethetypedefnitiontypeX=Xandwewant \ntotranslate(X,Int).Thecorrespondinginternaltypeis ts(X,Int)fts(X,Int)f(X,Int)gf,whichisreasonable sincebothXandtherefore(X,Int)denotetheemptyset \n(becauseweareinterestedintheleastsolutionofrecursive typedefnitions).Intherulebeforethelast,weturnaleft \nassociativeconcatenationtorightassociative,thuseventu\u00adallyrevealingtheheadofasequence. Thewholetranslationproceduretakesasinputanexter\u00adnaltypeT0andreturnsaninternaltypeA0andacontext \nt.Initially,tissettotheemptycontext,andwestart withcomputingtheinternaltypeA0fortheexternaltype T0:A0ts(T0)f.Somebranchtransitionsintheresult \nmaycontainstatesthatarenotyetint.Forsuchastate XT,wecomputeitsinternaltypeAXT ts(T)fandaddthe mappingXT7!AXTtot.Werepeatthisprocessuntilall \ntransitionsinA0andtcontainstatesthatareint. Theintuitionbehindtheterminationoftranslationisthat allexternaltypesencounteredbytheprocess(i.e.,given \ntothefunctionts)havetheformofasequenceT1,..,Tn whereeachTiappearsinadiferentplaceintheoriginaltype defnitions;thesetofsuchsequencesisfnite.Amoreformal \ndiscussionofthispointcanbefoundintheaccompanying technicalreport[16]. 3.4 Subtyping Thesubtypingrelationbetweentwotypesisdefnedseman\u00adtically:twointernaltypesareinthesubtyperelationiftheir \ndenotationsareinthesubsetrelation: A<:A0if[ A] [ A0] :  4. SUBTYPING ALGORITHM Thissectiondevelopsanalgorithmfordecidingthesubtyp\u00adingrelation. \n4.1 Highlights Ouralgorithmisatop-downonesimilarinspirittostandard subtypingalgorithms.Westartwithapairoftypes,and,at \neachstep,wegenerateoneormoresubgoalsuntilwereach leafgoalsinvolvingonlytrivialchecks. Themaindifcultyofconstructingsuchatop-downalgo\u00adrithmarisesfromthe\\untaggedness\"ofuniontypes.Specif\u00adically,themostinterestingcaseiswhenwehaveuniontypes \nontheright-handside: l(A,B)<:l(C,D)jl(E,F) Whatsubgoalsshouldwegenerate?Thefrstrulewemight tryisthefollowing: \n(Weak-Rec) l(A,B)<:l(C,D)orl(A,B)<:l(E,F) l(A,B)<:l(C,D)jl(E,F) However,thisruleistooweak.Forexample,forchecking \nl((CjE),D)<:l(C,D)jl(E,D),neitherpremiseholds. Amorerealisticexampleisthesubtypingrelationgivenin Section2.6: \nPerson*<:(person[Name,Addr]*, person[Name,Addr,Tel], Person*) |person[Name,Addr]* AikenandMurphy[1]actuallyadoptarulesimilarto \nWeak-Recandarguethattheyrarelyseecaseswherethis ruleisnotenough.Inoursetting,however,suchcasesdo ariseinpractice. \nAnotherrulewemightexpecttoseeisonethatdis\u00adtributesallunionsoverlabels.Forexample,toverify l((CjE),D)<:l(C,D)jl(E,D),wecouldtransformthe \nleft-handsidetol(C,D)jl(E,D)andcheckwhethereach clauseontheleftappearsontheright.However,thisap\u00adproachdoesnotworkforrecursivetypes,wherewewould \napplydistributivityinfnitely. Fortunately,asimpleset-theoreticobservationleadstoa solutiontothisdifculty.Letusconsideraslightlymore \ngeneralcase: l(A,B)<:l(C1,D1)jl(C2,D2)jl(C3,D3) First,ingeneral,acrossproductXxYisequalto(Xx T)\\(TxY)wherethemaximaltypeTdenotestheset \nofallgroundtypes.Thereforetheright-handsideofthe subtypingrelationcanberewrittenasfollows. (l(C1,T)\\l(T,D1)) \nj(l(C2,T)\\l(T,D2)) j(l(C1,T)\\l(T,D1)) Usingdistributivityofintersectionsoverunions,wecanturn thisdisjunctiveformtothefollowingconjunctiveform. \n(l(C1,T)jl(C2,T)jl(C3,T))\\ (l(T,D1)jl(C2,T)jl(C3,T))\\ (l(C1,T)jl(T,D2)jl(C3,T))\\ (l(T,D1)jl(T,D2)jl(C3,T))\\ \n(l(C1,T)jl(C2,T)jl(T,D3))\\::: Ineachclauseoftheconjunctiveform,ifCiappears,then thecorrespondingargumentDidoesnotappear,andvice \nversa.Thereforeeachclausecanberewrittenas ;) (ji2Il(Ci,T))jji2Il(T,Di) whereIisasubsetoff1,2,3gandIisf1,2,3gnI.Since \ntheconjunctiveformaboveistheintersectionofsuchforms forallsubsetsIoff1,2,3g,thesubtypingrelationreduces \ntochecking,foreachI, ;) l(A,B)<:(ji2Il(Ci,T))jjl(T,Di) i2I orequivalently, l(A,B)<:l(ji2ICi,T)jl(T,jDi): \ni2I WriteCforji2ICiandDforji2IDi. Now,sinceeachclauseontherighthastypeTasoneofits arguments,thesituationbecomeseasierthanthebeginning: \nitsufcestotest A<:CorB<:D: Toseewhy,supposel(A,B)<:l(C,T)jl(T,D)butA6<:C andB<6:D.Wecanfndtreest2AnCandu2BnD.This \nmeansthatl(t,u)2l(A,B)butneitherl(t,u)2l(C,T)or l(t,u)2l(T,D),whichcontradictstheassumption. Thisdiscussioncanbefurthergeneralizedtocaseswhere \nthesubtyperelationtocheckhasarbitrarynumberofclauses ontheright-handside. Therearetwosourcesofcomputationalinefciencyhere. \nOneistheexponentialblow-upinvolvedinconsideringall thesubsetsIoff1,:::,ng.Theotheristhebacktrack\u00adingincurredbycheckingwhetheroneortheotherofthe \ntwoconditionsaboveholds.Manyoftheoptimizationsde\u00adscribedinSection5.2areintendedtoavoiddealingwith thesegeneralcases,wheneverpossible. \n 4.2 Algorithm Thesubtypingalgorithmisdefnedbytwoformsofjudg\u00ad 0`*0 ment;`A<:B);and;A<:B);,where;is asetofpairsoftypesoftheformC<:D,called\\assump\u00adtions.\"Bothjudgmentsshouldberead:\\assumingthatall \nrelationsC<:Din;hold,thealgorithmprovesA<:Band possiblyreturnsadditionalpairsE<:Fintheoutputset ;0thathavebeenprovedinthisprocess.\" \nAsinstandardalgorithmsforsubtypingrecursivetypes, westorethegivenpairoftypesateachsteptotheassump\u00adtionset.Lateronifweencounterthesamepair,westop \ngoingfurther,thusensuringtermination.Wehavetobe carefulnottochecktheassumptionsetimmediatelyafter storingthegivenpair,whichwouldinvalidlyprovesubtyp\u00adingbetweenanypairoftypes.Thisiswhywehavetwo \ndiferentjudgments. Theaccumulatedassumptionsareeventuallyreturnedas theoutputset;0 ,whichispropagatedastheinputtoother \nsubtypechecks,avoidingrepeatedchecksofthesamepair. Furthermore,itisreusednotonlyintheprocessofasingle \nsubtypecheckingbutalsoallthewaythroughthecompila\u00adtionofthewholeprogram,thusservingasa\\cache\"ofall verifedsubtyperelations.(See[3,6,12]forfurtherdiscus\u00adsion.) \nWenowpresenttherulesforthesubtypingalgorithm.We write(A<:B)2=;forsetmembershipuptostructural equivalence:(A0<:B0)2;forsomeA0 \n=AandB0 =B. (Hyp) (A<:B)2=; ;`A<:B); (Assum) (A<:B)6; 2=`*0 ;;A<:BA<:B);;`A<:B);0 IfthepairA<:Bofinputtypesisalreadyintheset;ofas-sumptions,weimmediatelysucceed(ruleHyp).Otherwise, \nweaddthepairtothisset(ruleAssum).Thesetworules ensureterminationaswellasavoidanceofrepeatedchecks ofthesamepair.InAssum,weswitchfromthejudgmentof \ntheform;`A<:B);0to;`*A<:B);0 ,preventing theincorrectapplicationoftheruleHypimmediatelyfollow\u00adingAssum.Wekeepusingthejudgment;AB);0 \n`*<: inthesubsequencerules,andswitchbacktothejudgment ;`A<:B);0inthelastruleRecbelow. Theremainingrulesdependontheshapesoftheinput \ntypes.Thefrstthreearesimple: (Empty) `* ;f<:A); (Split) `*<:`*A0<: ;AB);0;0B);00 `*A0 ;Aj<:B);00 (Leaf) \nA=EjA0 `* ;E<:A); Iftheleft-handsideistheemptyset,wesimplyreturnsince therelationclearlyholds(ruleEmpty).Iftheleft-handside \ncanbesplitintotheunionoftwosetsAand,wegener- A0 atetwosubgoalsforthesesets(ruleSplit).Theintuition behindthisruleisaset-theoreticproperty:A[A0Bif \nABandB.(Theremaybemanywaystosplit A0 theleft-handsideintotheunionoftwosets;thealgorithm choosesoneofthem,non-deterministically.)Iftheleft-hand \nsideisasingletonsetwithaleaftransition,wecheckthatthe right-handsidealsocontainsaleaftransition(ruleLeaf). \nThealgorithmcanfailonlyatthisrule. Intheremainingcases,theleft-handsidehasasingle branchtransition.First,defnecardasfollows: \ncard(A1jA2)card(A1)+card(A2) card(A)1ifAEorl(X,X0)orf Now: (Prune) l00 C=(B,B)jC0card(C0)<card(C) l0`*0 \nl6;<:); -l(A,A0)C0 `* ;l(A,A0)<:C);0 (Prune-Leaf) C=EjC0card(C0)<card(C) ;`*l(A,A0)<:C0);0 ;`* l(A,A0)<:C);0 \n(Rec) A t (X) Forall1:j:n,l-lj A0t(X0)Bjt(Yj)Forall1:i:2n ,either B0 j t (Y0 j) 4.2.1Theorem[Soundness]:If;`A<:B);0and \n;isconsistent(i.e.,C<:Dforall(C<:D)2=;),then A<:Band;0isalsoconsistent. 4.2.2Theorem[Completeness]:IfA<:B,then;` \nA<:B);0forsome;0 . Theproofsofthesetheorems(andtheterminationproperty below)aregiveninouraccompanyingtechnicalreport[16]. \nTheterminationofthealgorithmcanbeseenasfollows. TheprocessfromEmptytoPrune-Leafobviouslytermi\u00adnatesbecausethesizesofthetypesalwaysdecrease.InRec, \nobservethatX,X0 ,Y1,:::,Yn,Y10 ,:::,Yn0 arealwayssome statesofthetreeautomataoftheinputtypes.Sincethe \nsetofstatesisfnite,thesetofunionsofstates,forwhich Recgeneratesubgoals,isalsofnite.Assumpkeepstrack ofallsuchunionsofstatesthatthealgorithmencounters, \nandHypensurestermination. 4.2.3Theorem[Termination]:Forall;,A,andB,the algorithmeitherproves;`A<:B);0forsome;0 \nor fails.  5. IMPLEMENTATION Ourimplementationofsubtypingconsistsofthesetofrules givenintheprevioussectionplusanumberofoptimiza\u00adtiontechniquesspecializedtothesubtypingproblemsthat \nariseintheXMLdomain.Thissectiondescribessomeof thesetechniques.Thetechniquesarecategorizedintolow\u00adlevel,representationaltechniquesandhigher-levelheuristics \ninspiredbyset-theoreticobservations.Ourimplementation iswritteninO'Caml[17]. 5.1 Low-level Optimizations \n`A<:j j2I ni Bj );ior;i;1 ` A0 <: j j2I ni B0 j );i Inordertomakesubtypingfaster,itiscrucialtominimize \n;i;1 j isasubtypeoftheunionj Bj,or thenumberofinternaltypestranslatedfromtheexternal types.Observingthatsemanticallyequalexternaltypescan \n;0 `*l(X,X0)<:l1(Y1,Y10)j:::jln(Yn,Y0));2n n TherulesPruneandPrune-Leafremovefromtheright handsidealeaftransitionEandallbranchtransitionswith \nlabelsthatarenotgreaterthanl.Thesidecondition l0 card(C0)<card(C)ensuresprogressbyguaranteeingthat thealgorithmproceedswithsmallertransitions. \nTheruleRechandlestheothercases:theright-handside isthe(possiblyempty)unionoftypeslj(Yj,Yj0),withall labelsljgreaterthanthelabell.Thisruleformalizesthe \nintuitionexplainedinSection4.1.Weindexthesubsetsof f1,2,:::,nginsomearbitraryorderfrom1to2n.We InIn writeIinforthecomplementofsuchasubset.Foreach \nindexi,weprovethateitherAisasubtypeoftheunion A0 B0 j. betranslatedtothesameinternaltype,weexploittheprop\u00adertiesofalternationandcommaoperators.Sincealterna\u00adtioniscommutative,associative,andidempotent,analter\u00adnationoftypesisrepresentedasasetoftypes.Inaddition, \nnestedalternationsarefattenedsothat((R|S)|(T|U))and (U|(S|(T|R)))canberecognizedasequal,forexample. Sincethetranslationusesonlyunionandequalityopera\u00adtionsonsets,asuitablerepresentationissortedlists,which \nallowsustoperformthesetwooperationsinlineartime. (Weuseasimilarrepresentationforinternaltypes.)Onthe \notherhand,sincethecommaoperatorisassociative,ase\u00adquenceoftypesissimplyrepresentedasalistoftypes,with \nnestedsequencesfattenedandtheemptysequenceremoved sothat(((R,()),S),(T,U))and(R,(S,(T,U)))canberec\u00ad \nni ni j2I j2I ognizedasequal.Wealsousehashconsingtomakeequality testsfaster. InFigure1,weshowtheprooftreeforcheckingthesub\u00ad \ntypingrelationX<:Ywherethecontextis: XEjl(X,E) YEjl(Y,E) Intheprooftree,wewrite;forfX<:Yg.Noticethatwhen \nX<:Yischeckedforthesecondtime,Hypisused,thus ensuringtermination.Also,checking;l(X,E)<:l(Y,E) `* generatesacomplexformofpremises,someofwhichfail, \nincurringbacktracking. Thisalgorithmissoundandcomplete. Weneedtobealittlecarefulabouttherepresentationof \naset;ofassumptions,describedinSection4.Ahashtable mightappearasuitablerepresentationforthis,butitisnot \nthecase.RecallthatinRec,wehavethepremises\\A<:::: or<::::.\"Forimplementingthis,whenthefrstpremise A0 fails,whatwehavetopasstothesecondpremiseistheorig\u00adinalsetofassumptions,notwhatthefrstpremisewould \nreturnasan\\outputsetofassumptions,\"whichmaycon\u00adtainwrongassumptions.Therefore,ifweusedahashtable for;,wewouldhavetocopythewholehashtableevery \n 0fail 1 ! Hyp fail BC B. C andB . C . Leaf @A ;`X<:Y);or;`\u00a3<:0 ;`X<:0or;`\u00a3<:\u00a3); `* Leaf ;l(XY\u00a3)<:l(YY\u00a3)); \n`* `* ;\u00a3<:\u00a3jl(YY\u00a3));;l(XY\u00a3)<:\u00a3jl(YY\u00a3)); ;`* \u00a3jl(XY\u00a3)<:\u00a3jl(YY\u00a3)); `X<:Y); Figure1:Exampleprooftree timebeforecheckingthefrstpremise,whichwouldbevery \nexpensive.Instead,weuseafunctionalrepresentationof sets,wheretherequiredoperationshere(unliketheunions \noftypesdescribedabove),areinsertionandmembership. Thereforeweusebalancedbinarytrees.Operationsforbal\u00adancedbinarytreestakelogarithmictimeinthesizeofthe \nset,asopposedtoconstanttimeforhashtables;butthis doesnotappeartocauseanyproblemsinpractice.  5.2 High-level \nOptimizations TheruleRecispotentiallycostlyasitmaygenerateex\u00adponentiallymanysubgoalsandinvolvebacktracking.Our \nheuristicrulesaremainlyintendedtoavoidtheapplication ofthisruleasmuchaspossible,oratleasttosimplifyits \napplications. 5.2.1 Physical equality Inanimplementationofsubtypingforanytypesystem,the mosttrivialoptimizationischeckingphysicalequalitybefore \ngoingdeeplyinthestructure.Inthepresenceofuniontypes, thiscanbeslightlygeneralized,usingthefactthatA<:Aj \nB.Inourimplementation,weusethefollowingrule (Triv) ;`B<:AjC);0 ;`AjB<:AjC);0 whichcanbeseenasacombinationofSplitandA<:AjB. \n(WetrythisrulebeforeHyp.)Noticethatthisrulesimply takesthediferencebetweentwosetsoftransitions.Sincea \ntypeisrepresentedasasortedlist,thisoperationischeap. 5.2.2 Empty type elimination Inthisoptimization,weeliminatealltypesdenotingthe \nemptysetbeforestartingthesubtypingalgorithm.Doing soallowsthealgorithmtoshort-cutsometestslater,since \nitcanassumethatanytypeitencountersisnotempty.In particular,thealgorithmnowdoesnothavetogeneratetwo goalsoftheformA<:fateachapplicationoftheruleRec. \nInsuchcases,itisfairlycommonthattherighthandside isjustasinglebranchtransition:l(A,B)<:l0(C,D).When thishappens,weonlyneedtocheckA<:CandB<:D \nwithl-l0 ,whichdoesnotinvolvebacktrackingatall. Emptytypeeliminationcanbehighlytuned.Intheory, identifyingandeliminatingemptystatescanbeperformed \ninlineartime[10].However,weuseasimplerbutpotentially quadraticalgorithm,whichperformbetterinpractice.(We \nrefertothisoptimizationlaterbyEmp.) 5.2.3 Merging similar transitions Inordertomakethepreviousoptimizationmoreefective, \nwemergetransitionsontherighthandsidewheneitherthe frstorsecondargumentsarethesame: (Merge1) ;`*l(A,B)<:l0(C,(DjE)));0l-l0 \n;`* l(A,B)<:l0(C,D)jl0(C,E));0 (Merge2) `* l0l0 ;l(A,B)<:((CjD),E));0l\u00ad ;`* l(A,B)<:l0(C,E)jl0(D,E));0 \n(WetrytheserulesbeforeSingle.)Inourexperience,the frstcaseismorecommonthanthesecondcase.Thisis because,intheexternalformoftypes,labelsofthesame \nnameoftenhavethesamecontenttype.(Ifwe\\import\" DTDsasregularexpressiontypes,labelsofthesamename are required \nto have the same content t ype.) Therefore we check Merge1 frst and thenMerge2. 5.2.4 Default case Finally,ifthetypeontherighthandsideinRechasthe \nformBjC1j:::jCnandBislargerthananyCi,then weonlyneedtocomparethelefthandsidewiththislargest typeB: (Super) \n`* 1:i:n;iCi<:B);i+1 `*<: ;n+1AB);0 `* ;1A<:BjC1j:::jCn);0 (WetrythisrulebeforeRecafterMerge1/2.)Thistypi\u00adcallyhappenswhentheprogrammerwritesa\\default\"case \ninapatternmatch,whichisgivenatype(e.g.Any)that coversalltheothercases. Inprinciple,thisoptimizationcangeneratesomanysub\u00adgoalsinthecourseofsearchingforthelargesttypethatthe \ncostsurpassesthegain.However,wehavenotfoundsucha situationinpracticesofar.Thisisprobablybecausemost ofthecasesarehandledbythepreviousoptimizations,and \nbecausethealternativeruleRecisoftenmoreexpensive.  6. PERFORMANCE MEASUREMENT Wehaveincorporatedthesubtypingalgorithmdescribedin \ntheprevioussectionsinaprototypeimplementationofthe XMLprocessinglanguageXDuce.XDuceisasimplefrst\u00adorderfunctionallanguage;atypicalXDuceprogramconsists \n ApplicationBookmarksDifHtml2Latex (strict)Html2Latex (transitional)Html2Latex (frameset) #oflinesXDuceDTD3101197355|30798931211973231226 \ntime(sec)totalsubtyping0.480.0180.0390.0140.580.220.880.360.870.34 subtypealg.internals statesassumptions \n756133 276165 783345 946433 975454 Table1:ApplicationsandMeasurementResults ofacollectionoftypedeclarationsandrecursivefunctions \nthatusepatternmatchingtoanalyzeinputvalues.XDuce canparseordinaryDTDs,interpretingthemasasregular expressiontypedeclarations.Someofourapplicationsuse \nthisfeaturetoincorporatefairlylargeDTDsfromreal-world XMLapplications. Inthissection,wepresenttheresultsofsomepreliminary \nperformancemeasurementsofourimplementation.Inthe experiments,weareinterestedinthewall-clocktimethat ouralgorithmtakestotypecheckvariousapplicationpro-grams(subtypechecksconsumemostofthistime).Theac\u00adcompanyingtechnicalreportshowsadditionalexperimental \nresultsontheseparateefectsofeachhigh-leveloptimization [16].TheplatformforourexperimentisaSunEnterprise \n3000(250MHzUltraSPARC)runningSunOS5.7. Ourtestsuiteconsistsofthreesmallish(thoughnon\u00adtrivial)applicationswritteninXDuce: \nBookmarksisasimpledatabasequery.Ittakesasinputa NetscapebookmarksfleoftypeBookmarks,whichis asubsetofthe(muchlarger)typeHTML.Itextractsa \nparticularfoldernamed\\Public,\"formatsitasafree\u00adstandingdocument,addsatableofcontentsatthe front,andinsertslinksbetweenthecontentsandthe \nbody.ThetypeoftheresultisthefullHTMLtype. Html2LatextakesanHTMLfle(oftypeHTML)andcon\u00advertsitintoLaTeX(avalueoftypeString). \nDi.implementsChawathe's\\treedif\"algorithm[8].It takesapairofXMLflesoftypeXml,whichisthe typeofallXMLdocuments,andreturnsatreewith \nannotationsindicatingwhethereachsubtreehasbeen retained,inserted,deleted,orchangedbetweenthetwo inputs. \nThefrsttwoapplicationsarewrittenasstraightforward traversalsoftheinputtreebyseveralsimplerecursivefunc\u00adtions.Thethirdoneismorecomplex.Itsfrstphaseisa \ndynamicprogrammingalgorithm,whereregularexpression typesareusedforrepresentingtheinternaldatastructures; \nthesecondphasecombinestwoinputtreesandinsertsan\u00adnotationsateachnode,usingtypestoensurethatthean\u00adnotationsandtheactualtreesareneverconfused.Inthe \ncourseofwritingtheseapplications,ourtypecheckerwasa tremendoushelpinfndingsillymistakes. TheHTMLtype(moreprecisely,XHTML,whichisanXMLim\u00adplementationofHTML)isconsideredtobeoneofthelargest \ntypesforwebdocuments.Thismakesitanexcellentbench\u00admarkcaseforourimplementation.Thereareactuallythree versionsofXHTML:XHTML-strict,XHTML-transitional, \nandXHTML-frameset;accordingly,ourHtml2Latexappli\u00adcationcomesinthreeversions.Thefrstissmallestandthe thirdisslightlylargerthanthesecond. \nThefrstgroupofcolumnsinTable1showsthenumberof linesofXDuceinthewholeprogram(countingtypeswritten inXDucesyntax,butnotexternalDTDs),andthenumber \noflinesinexternalDTDs(ifused).Thediferencebetween thethreeversionsofHtml2Latexismainlyinthenumberof linesofDTDs. \nThecolumn\\total\"inthetableshowsthetotaltimespent bythesubtypingalgorithmduringthetypecheckingofthe wholeprogram.Itincludesconversionfromtheexternal \nformtotheinternalform(INT),emptytypeelimination (EMP),andthemainsubtypingalgorithm(SUB),asde\u00adscribedinSection4.Theoptimizationsareallturnedonfor \nthistable.Thecolumn\\subtyping\"showsthetimespent bythemainalgorithmSUB. Asthetableindicates,thespeedoftypecheckingisac\u00adceptablefortheseapplications.Inparticular,itisquite \nencouragingthatittakeslessthanonesecondtotypecheck programsinvolvingthefullHTMLtype. Forreference,Table1givestwomorecolumns:\\states\" \nand\\assumptions.\"The\\states\"columnindicatesthenum\u00adberofstatesoftheinternalformstoredinthesystem,and the\\assumps\"indicatesthenumberofpairsstoredintheset \nofassumptions.Noticethatthenumberofassumptionsis muchsmallerthanthenumberofstates.(Ifweusedaclas\u00adsicalalgorithmbasedondeterminizationoftreeautomata, \nwewouldhavetoconsiderafarlargernumberofpairsof states.Infact,inanearlystage,wedidimplementsuchan algorithmanditdidnotseemtobepracticalatall.) \n 7. RELATED WORK StatictypingofprogramsforXMLprocessinghasbeenap\u00adproachedfromseveraldiferentangles.Onepopularidea \nistoembedatypesystemforXMLinanexistingtyped language.Theadvantageisthatwecanenjoynotonlythe statictypesafety,butalsoalltheotherfeaturesprovidedby \nthehostlanguage.ThecostisthatXMLvaluesandtheir correspondingDTDsmustsomehowbe\\injected\"intothe valueandtypespaceofthehostlanguage;thisusuallyin\u00advolvesaddingmorelayersoftaggingthanwerepresentin \ntheoriginalXMLdocuments,whichinhibitssubtyping.The lackofsubtyping(oravailabilityofonlyrestrictedformsof \nsubtyping)isnotaseriousproblemforsimpletraversalof treestructures;itbecomesastumblingblock,though,in \ntaskslikethe\\databaseintegration\"thatwediscussedin Section2.7,whereordering-forgettingsubtypinganddis\u00adtributivitywerecriticallyneeded. \nArecentexampleoftheembeddingapproachisWallace andRunciman'sproposaltouseHaskellasahostlanguage [21]forXMLprocessing.TheonlythingtheyaddtoHaskell \nisamappingfromDTDsintoHaskelldatatypes.Thisallows theirprogramstomakeuseofothermechanismsstandard infunctionalprogramminglanguages,suchashigher-order \nfunctions,parametricpolymorphism,andpatternmatching. However,theydonothaveanynotionofsubtyping.Adif\u00adferenceintheotherdirectionisthatourtypesystemdoes \nnotcurrentlysupporthigher-orderfunctionsorparametric polymorphism.(Weareworkingonbothoftheseexten\u00adsions.) \nAnotherpieceofworkalongsimilarlinesisthefunctional languageXM>forXMLprocessing,proposedbyMeijerand Shields[18].TheirtypesystemisclosetoHaskell's,except \nthattheyincorporateso-calledGlushkovautomataintype checking,resultinginamorefexibletypesystem.How\u00adever,neithertheirtypesystemnorGlushkovautomataare \ndescribedindetailintheirpaper,makingcomparisonwith ourworkdifcult. Acloserrelativetoourtypesystemisthetypesystem \nforthequerylanguageYAT[9],whichallowsoptionaluse oftypessimilartoDTDs.Thenotionofsubtypingbetween thesetypesissomewhatweakerthanours(lacking,inpar\u00adticular,thedistributivitylawsusedinour\\databaseinte\u00adgration\"example). \nTypesbasedontreeautomatahavealsobeenproposedin amoreabstractstudyoftypecheckingforageneralformof \\treetransformers\"forXMLbyMilo,Suciu,andVianu[19]. \nThetypesthereareconceptuallyidenticalourregularex\u00adpressiontypes,(exceptforsubtagging). Regularexpressiontypeswereoriginallymotivatedbyan \nobservationbyBunemanandPierce[7]thatuntaggedunion typescorrespondednaturallytoformsofvariationfoundin \nsemistructureddatabases.Thediferencefromthepresent paperisthattheystudiedunorderedrecordtypesinsteadof \norderedsequencesanddidnottreatrecursivetypes. Oursubtypingalgorithmiscloselyrelatedtotheal\u00adgorithmsforset-inclusionconstraintsolvingdevelopedby \nAikenandothers[1,2];inparticular,ouralgorithmisvery similartothealgorithmdescribedin[1].However,thegoals \noftheanalysesaresomewhatdiferent:weareinterestedin atypesystemforwebprogramming,whiletheyareinter\u00adestedinprogramanalysis.Thisdiferenceofdomainshas \natleasttwoimplications.First,sincewehavetoclearlyex\u00adplainanytypeerrorstotheuser,itisimportanttodevise \naprovablycompletealgorithm,whileitisnotsocriticalin theircontextofprogramanalysisforoptimization,where \nonecanarguethatincompletenessistolerableiffalsean\u00adswershappenonlyrarely(asinsomeothertypesystems[5, 4]).However,aswehaveshowninSection4.1,suchcases \nwouldariseinpracticeinoursettingifwetookAikenand Murphy'salgorithmdirectly.Second,thediferenceofthe domainleadsustoexperimentswithdiferentinputs.Their \ninputsarecollectedfromanalysisonawholeprogramand canbehuge.Tacklingsuchabigjobtakeslongtofnish (e.g.,morethanoneminuteforaprogramofafewthou\u00adsandsoflines[11]).Ontheotherhand,ourinputsaretypes \nthattheuserwrites,whichwecanassumearenotnearly solarge.Inaddition,sincewewanttousesubtypingvery casuallyinourtypechecker,itmustbeveryquick. \nAnotherpaperbyAikenandWimmers[2]describesa diferentdecisionprocedureforset-constraintsolving.Al\u00adthoughitgivesacompletealgorithm,theuseofintersections \nandnegationsappearsrathercriticalintheiralgorithm;it isnotobviousexactlyhowanefcientalgorithmcouldbe \nderivedfromitintheabsenceofthesefeatures. 8. CONCLUSIONS WehaveproposedregularexpressiontypesforXMLprocess\u00ading,arguingthatset-inclusion-basedsubtypingandsubtag\u00adgingyieldusefulexpressivepowerinthisdomain.Wede\u00advelopedanalgorithmforsubtyping,givingsoundness,com\u00adpleteness,andterminationproofs.Byincorporatingseveral \noptimizationtechniques,ouralgorithmrunsatacceptable speedsonseveralapplicationsinvolvingfairlylargetypes, \nsuchasthecompleteDTDforHTMLdocuments. OurworkontypesystemsforXMLprocessinghasjust begun.Inthefuture,wehopetoincorporateotherstandard \nfeaturesfromfunctionalprogramming,suchashigher-order functionsandparametricpolymorphism.Thecombination \nofthesefeatureswithregularexpressiontypesraisessome subtleissues.Forfunctiontypes,wehavenotfoundasensi\u00adblesemanticsoftypesthatyieldsacompletealgorithm.For \npolymorphism,inferenceoftypeargumentsattypeapplica\u00adtionsisnotobvious(thereisnouniqueminimalsolutionin \ngeneral). Acknowledgments OurmaincollaboratorsintheXDuceprojectarePeter BunemanandPhilWadler.Wehavealsolearnedagreat \ndealfromdiscussionswithNilsKlarlundandVolkerRen\u00adneberg,withtheDBGroupandthePLClubatPenn, andwithmembersofProfessorYonezawa'sgroupatTokyo. \nCommentsfromtheICFPrefereeshelpedimprovethepre\u00adsentationsignifcantly. ThisworkwassupportedbytheJapanSocietyforthePro\u00admotionofScience(Hosoya),theUniversityofPennsylvania's \nInstituteforResearchinCognitiveScience(Vouillon),and theNationalScienceFoundationunderNSFCareergrant \nCCR-9701826(Pierce). 9. REFERENCES [1]A.AikenandB.R.Murphy.Implementingregular treeexpressions.InJ.Hughes,editor,Functional \nProgrammingLanguagesandComputer Architecture1991,volume523ofLectureNotesin ComputerScience.Springer-Verlag,1991. \n [2]A.AikenandE.L.Wimmers.Solvingsystemsofset constraints(extendedabstract).InProceedings, SeventhAnnualIEEESymposiumonLogicin \nComputerScience,pages329{340,SantaCruz, California,22{25June1992.IEEEComputerSociety Press. [3]R.M.AmadioandL.Cardelli.Subtypingrecursive \ntypes.ACMTransactionsonProgrammingLanguages andSystems,15(4):575{631,1993.Preliminaryversion inPOPL'91(pp.104{118);alsoDECSystems \nResearchCenterResearchReportnumber62,August 1990. [4]AmyFelty,ElsaGunter,JohnHannan,DaleMiller, GopalanNadathurandA.Scedrov.Lambdaprolog: \n Anextendedlogicprogramminglanguage.InE.L.R. Overbeek,editor,Proceedingsonthe9thInternational ConferenceonAutomatedDeduction,volume310of \nLNCS,pages754{755,Berlin,May1988.Springer. [5]L.Augustsson.Cayenne|alanguagewithdependent types.InProceedingsoftheACMSIGPLAN \nInternationalConferenceonFunctionalProgramming (ICFP'98),volume34(1)ofACMSIGPLANNotices, pages239{250.ACM,June1999. \n[6]M.BrandtandF.Henglein.Coinductive axiomatizationofrecursivetypeequalityand subtyping.InR.Hindley,editor,Proc.3dInt'lConf. \nonTypedLambdaCalculiandApplications(TLCA), Nancy,France,April2-4,1997,volume1210of LectureNotesinComputerScience(LNCS),pages \n63{81.Springer-Verlag,Apr.1997.Fullversionin FundamentaInformaticae,Vol.33,pp.309-338,1998. [7]P.BunemanandB.Pierce.Uniontypesfor \nsemistructureddata.InProceedingsofthe InternationalDatabaseProgrammingLanguages Workshop,Sept.1999.AlsoavailableasUniversityof \nPennsylvaniaDept.ofCIStechnicalreport MS-CIS-99-09. [8]S.S.Chawathe.Comparinghierarchicaldatain externalmemory.InProceedingsoftheTwenty-.fth \nInternationalConferenceonVeryLargeDataBases, pages90{101,Edinburgh,Scotland,U.K.,Sept.1999. [9]S.CluetandJ.Simeon.UsingYATtobuildaweb \nserver.InIntl.WorkshopontheWebandDatabases (WebDB),1998. [10]H.Common,M.Dauchet,R.Gilleron,F.Jacquemard, \nD.Lugiez,S.Tison,andM.Tommasi.Treeautomata techniquesandapplications.Draftbook;available electronicallyonhttp:// \nwww.grappa.univ-lille3.fr/tata. [11]M.FahndrichandA.Aiken.Makingset-constraint programanalysesscale.TechnicalReportCSD-96-917, \nUniversityofCalifornia,Berkeley,Sept.1996. [12]V.Gapeyev,M.Levin,andB.Pierce.Recursive subtypingrevealed.InProceedingsoftheInternational \nConferenceonFunctionalProgramming(ICFP),2000. [13]J.E.HopcroftandJ.D.Ullman.Introductionto AutomataTheory,Languages,andComputation. \nAddison-Wesley,1979. [14]H.HosoyaandB.Pierce.Treeautomataandpattern matching,July2000.Availablethroughhttp:// \nwww.cis.upenn.edu/~hahosoya/papers/ tapat-full.ps. [15]H.HosoyaandB.C.Pierce.XDuce:AtypedXML processinglanguage.InProceedingsofThird \nInternationalWorkshopontheWebandDatabases (WebDB2000),May2000. [16]H.Hosoya,J.Vouillon,andB.C.Pierce.Regular \nexpressiontypesforXML.Technicalreport, UniversityofPennsylvania,2000. [17]X.Leroy,J.Vouillon,D.Doligez,etal.TheObjective \nCamlsystem.Softwareanddocumentationavailable ontheWeb,http://pauillac.inria.fr/ocaml/, 1996. [18]E.MeijerandM.Shields.XMLambda:AFunctional \nProgrammingLanguageforConstructingand ManipulatingXMLDocuments.page13.Submitted toUSENIX2000TechnicalConference. \n[19]T.Milo,D.Suciu,andV.Vianu.Typecheckingfor XMLtransformers.InProceedingsoftheNineteenth ACMSIGMOD-SIGACT-SIGARTSymposiumon \nPrinciplesofDatabaseSystems,pages11{22.ACM, May2000. [20]H.Seidl.Decidingequivalenceoffnitetreeautomata. \nSIAMJournalofComputing,19(3):424{437,June 1990. [21]M.WallaceandC.Ranciman.HaskellandXML: Genericcombinatorsortype-basedtranslation?In \nProceedingsoftheFourthACMSIGPLAN InternationalConferenceonFunctionalProgramming (ICFP`99),volume34-9ofACMSigplanNotices, \npages148{159,N.Y.,Sept.27{291999.ACMPress. [22]Extensiblemarkuplanguage(XMLTM). http://www.w3.org/XML/. \n[23]XMLSchemaPart0:Primer,W3CWorkingDraft. http://www.w3.org/TR/xmlschema-0/,2000.  \n\t\t\t", "proc_id": "351240", "abstract": "We propose <i>regular expression types</i> as a foundation for XML processing languages. Regular expression types are a natural generalization of Document Type Definitions (DTDs), describing structures in XML documents using regular expression operators (i.e., *, ?, |, etc.) and supporting a simple but powerful notion of <i>subtyping</i>.The decision problem for the subtype relation is EXPTIME-hard, but it can be checked quite efficiently in many cases of practical interest. The subtyping algorithm developed here is a variant of Aiken and Murphy's set-inclusion constraint solver, to which are added several optimizations and two new properties: (1) our algorithm is provably complete, and (2) it allows a useful \"subtagging\" relation between nodes with different labels in XML trees.", "authors": [{"name": "Haruo Hosoya", "author_profile_id": "81100504076", "affiliation": "Department of Computer and Information Science, University of Pennsylvania", "person_id": "PP37028416", "email_address": "", "orcid_id": ""}, {"name": "J&#233;r&#244;me Vouillon", "author_profile_id": "81100141421", "affiliation": "Department of Computer and Information Science, University of Pennsylvania", "person_id": "P338489", "email_address": "", "orcid_id": ""}, {"name": "Benjamin C. Pierce", "author_profile_id": "81100303310", "affiliation": "Department of Computer and Information Science, University of Pennsylvania", "person_id": "PP14111353", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/351240.351242", "year": "2000", "article_id": "351242", "conference": "ICFP", "title": "Regular expression types for XML", "url": "http://dl.acm.org/citation.cfm?id=351242"}