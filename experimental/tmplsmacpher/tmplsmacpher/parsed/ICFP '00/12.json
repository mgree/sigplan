{"article_publication_date": "09-01-2000", "fulltext": "\n Breadth-First Numbering: Lessons from a Small Exercise in Algorithm Design (Functional Pearl) Chris \nOkasaki Department of Computer Science Columbia University cdo@cs.columbia.edu ABSTRACT Everyprogrammerhasblindspots.Breadth-frstnumbering \nisaninterestingtoyproblemthatexposesablindspotom\u00admontomany-perhapsmost-funtionalprogrammers.  Categories \nand Subject Descriptors D.1.1[ProgrammingTehniques]:AppliativeFun\u00adtional)Programming General Terms Algorithms,Design \n Keywords Breadth-frstnumbering,breadth-frsttraversal,views 1. INTRODUCTION Breadth-frsttraversalofatreeiseasy,butrebuildingthe \ntreeafterwardsseemstobemuhharder,atleasttofun\u00adtionalprogrammers.AtICFP'98,JohnLaunhburyhal\u00adlengedmewiththefollowingproblem: \nGivenatreeT,reateanewtreeofthesame shape,butwiththevaluesatthenodesreplaed bythenumbers1ITIinbreadth-frstorder. \nForexample,breadth-frstnumberingofthetree a b d  Permission to make digital or hard copies of all \nor part of this work for personal or classroom use is granted without fee provided that copies are not \nmade or distributed for pro.t or commercial advantage and that copies bear this notice and the full citation \non the .rst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires \nprior speci.c permission and/or a fee. ICFP 00, Montreal, Canada Copyright 2000 ACM 1-58113-202-6/00/0009 \n..$5.00 shouldyieldthetree 1 2 3 4  LaunhburyknewofasolutionbyJonesandGibbons[5] thatdependedonlazyevaluation,butwonderedhowone \nwouldsolvetheprobleminastritlanguagelikeStandard ML[6].Iquiklysribbledwhatseemedtometobea mostlystraightforwardanswerandshowedittohimatthe \nnextbreak. Overthenextyear,Ipresentedtheproblemtomanyother funtionalprogrammersandwasontinuallyamazedatthe \nbaroquesolutionsIreeivedinreply.Withonlyasingle exeption,everyonewhoamenearaworkableanswerwent inaverydiferentdiretionfrommysolutionrightfromthe \nverybeginningofthedesignproess.Igraduallyrealized thatIwaswitnessingsomesortofmassmentalblok,a ommunalblindspot,thatwassteeringprogrammersaway \nfromwhatseemedtobeaverynaturalsolution.Imakeno laimsthatmineisthebestsolution,butIfnditfasinating thatsomethingaboutmysolutionmakesitsodi\u00c6ultfor \nfuntionalprogrammerstooneiveofinthefrstplae. STOP! Beforereadingfurther,spendtenorffteenminutessketh\u00adingoutasolution.Foronreteness,assumethatyouhave \natypeoflabeledbinarytrees datatype'aTree E Tf'a 'aTree 'aTree andthatyouaretoprodueafuntion bfnum:'aTree->intTree \n 2. BREADTH-FIRST TRAVERSAL Whenattemptingtosolveanynon-trivialproblem,the frststepshouldalwaysbetoreviewsolutionstorelated \nproblems.Inalgorithmdesign,asinprogrammingingen\u00aderal,theftofideasistobeapplaudedratherthanon\u00addemned.Inthisase,themostobviousandidateforplun\u00adderisthewell-knownqueue-basedalgorithmforbreadth-frst \ntraversal,thatis,produingalistofthelabelsinatree,in breadth-frstorder[5].Forexample,breadth-frsttraversal \nofthetree  a b d  shouldyieldthelist[a,b,d,]. Thekeystepindevelopinganalgorithmforbreadth-frst traversalistogeneralizetheproblem,illustratingthepara\u00addoxial,yetommon,phenomenonthatamoregeneralprob\u00adlemisofteneasiertosolve.Inpartiular,wegeneralizethe \nproblemfrombreadth-frsttraversalofatreetobreadth\u00adfrsttraversalofaforest,thatis,from bftrav:'aTree->'alist \nto bftrav':'aTreeSeq->'alist whereSeqissomeas-yet-undeterminedtypeofsequenes usedtorepresentforests.Forexample,breadth-frsttraver\u00adsaloftheforest \nade  b f shouldyieldthelist[a,d,e,b,,f]. Then,bftravanbespeifedbytheequation bftravt bftrav'(t) where(t)denotesthesingletonforestontainingt. \nNow,bftrav'iseasytospeifywiththefollowingthree equations: bftrav'() [] bftrav'(E<ts) bftrav'ts bftrav'(T(x,a,b)<ts) \nx::bftrav'(tsCaCb) Thelastequationtakesthehildrenofthefrsttreeand addsthemtotheendofthesequene.Theemptysequene \nisdenoted(),andthesymbols<andCdenoteinfx\"ons\" and\"sno\",respetively.Sinethisisaspeifationrather thananimplementation,Ifeelfreetouse(),<,andCon \nbothsidesoftheequations. Thefnalstepbeforeatuallyproduingodeistohoose animplementationforthesequeneADT.Themainopera\u00adtionsweneedonthesesequenesareaddingtreestotheend \nofthesequeneandremovingtreesfromthebeginningof thesequene.Therefore,wehoosequeuesasoursequene representation.Figure1givesaonreteimplementationin \nStandardML. TheuseofqueuesasanADTmakesthisodelookrather uglytoaneyeaustomedtotheleanlinessofpattern mathing,espeiallytheif-then-elseandaseexpressions \ninbftrav'.Theproblemisthatpatternmathingannot normallybeperformedonADTs.Views[10]oferaway aroundthisproblem.Figure2reimplementsbreadth-frst \ntraversalmoreleanlyusingthesyntaxforviewsproposed in[9].Notethatthedefnitionofbftrav'isnownearly identialtothespeifation. \n signatureQUEUE sig type'aQueue valempty :'aQueue valisEmpty:'aQueue->bl val enq: 'a Queue 'a->'a Queue \nv a l d e q : ' a Q u e u e - > ' a ' a Q u e u e end signatureBFTRAV sig valbftrav:'aTree->'alist end \nfunt rBreadthFirstTraversal(Q:QUEUE):BFTRAV strut penQ funbftrav'q ifisEmptyqthen[] elseasedeqqf (E,ts)>bftrav'ts \n(T(x,a,b),ts)> x::bftrav'(enq(enq(ts,a),b)) funbftravt bftrav'(enq(empty,t)) end Figure1:Breadth-frsttraversalinSML. \nsignatureQUEUE sig type'aQueue valempty:'aQueue val>> :'aQueue 'a->'aQueue viewtype'aQueue Empty \u00ab\u00abf'a \n'aQueue end funt rBreadthFirstTraversal(Q:QUEUE):BFTRAV strut penQ infix>> infixr\u00ab\u00ab funbftrav'Empty [] \nbftrav'(E\u00ab\u00abts) bftrav'ts bftrav'(T(x,a,b)\u00ab\u00abts) x::bftrav'(ts>>a>>b) funbftravt bftrav'(empty>>t) end \nFigure2:Breadth-frsttraversalusingviews. Providedeahqueueoperationrunsin01)time,this algorithmrunsin0n)timealtogether.Agoodimplemen\u00adtationofqueuesforthisappliationwouldbetheusualim\u00adplementationasapairoflists[1,2,3].Sinethisappliation \ndoesnotrequirepersistene,fanierkindsofqueuese.g.,[3, 7])wouldbeoverkill.  3. BREADTH-FIRST NUMBERING \nWenextattempttoextendthesolutiontobreadth-frst traversaltogetasolutiontobreadth-frstnumbering.As inbreadth-frsttraversal,wewillbeginbygeneralizingthe \nproblem.Insteadofbreadth-frstnumberingofatree,we willonsiderbreadth-frstnumberingofaforest.Inother words,weintrodueahelperfuntionthattakesaforestand \nreturnsanumberedforestofthesameshape.Itwillalsobe helpfulforthehelperfuntiontotaketheurrentindex,so itssignaturewillbe \nbfnum':int->'aTreeSeq->intTreeSeq Thenbfnumanbespeifedintermsofbfnum'as bfnumt t' where(t') bfnum'1(t) \nExtendingtheequationsforbftrav'tobfnum'isfairly straightforward,rememberingthattheoutputforestmust alwayshavethesameshapeastheinputforest. \nbfnum'i() () bfnum'i(E<ts) E<ts' wherets' bfnum'its bfnum'i(T(x,a,b)<ts) T(i,a',b')<ts' wherets'Ca'Cb' \nbfnum'(i+1)(tsCaCb) Notiehoweveryequationtextuallypreservestheshapeof theforest. Giventhesespeifations,weneedtohoosearepresenta\u00adtionforsequenes.Themainoperationsweneedonforests \nareaddingandremovingtreesatboththefrontandthe bak.Therefore,weouldhoosedouble-endedqueuesas oursequenerepresentation \nperhapsusingHoogerwoord's implementationofdouble-endedqueues[4]).However,a loserinspetionrevealsthatwetreattheinputforestand \ntheoutputforestdiferently.Inpartiular,weaddtreesto thebakofinputforestsandremovethemfromthefront, whereasweaddtreestothefrontofoutputforestsandre\u00admovethemfromthebak.Ifweremovetheartifialon\u00adstraintthatinputforestsandoutputforestsshouldberep\u00adresentedwiththesamekindofsequene,thenweanrepre\u00adsentinputforestsasordinaryqueuesandoutputforestsas \nbakwardsqueues. Ifwewanttorepresentbothinputforestsandoutput forestsasordinaryqueues perhapsbeauseourlibrarydoesn't \ninludebakwardsqueues),thenweanhangethespei\u00adfationofbfnum'toreturnthenumberedforestinreverse order.Then,theequationsbeome \nbfnum'i() () bfnum'i(E<ts) ts'CE wherets' bfnum'its bfnum'i(T(x,a,b)<ts) ts'CT(i,a',b') whereb'<a'<ts' \nbfnum'(i+1)(tsCaCb) Nowitisasimplemattertoturnthisspeifationinto runningode,eitherwithviewsFigure4)orwithoutFig\u00adure3).Eitherway,assumingeahqueueoperationrunsin \nsignatureBFNUM sig valbfnum:'aTree->intTree end funt rBreadthFirstNumbering(Q:QUEUE):BFNUM strut penQ \nfunbfnum'iq ifisEmptyqthenempty elseasedeqqf (E,ts)>enq(bfnum'its,E) (T(x,a,b),ts)> letvalq enq(enq(ts,a),b) \nvalq' bfnum'(i+1)q val(b',q'') deqq' val(a',ts') deqq'' inenq(ts',T(i,a',b'))end funbfnumt letvalq enq(empty,t) \nvalq' bfnum'1q val(t', ) deqq' int'end end Figure3:Breadth-frstnumberinginSML. funt rBreadthFirstNumbering(Q:QUEUE):BFNUM \nstrut penQ infixr\u00ab\u00ab infix>> funbfnum'iEmpty empty bfnum'i(E\u00ab\u00abts) bfnum'its>>E bfnum'i(T(x,a,b)\u00ab\u00abts) \n letvalb'\u00ab\u00aba'\u00ab\u00abts' bfnum'(i+1)(ts>>a>>b) ints'>>T(i,a',b')end funbfnumt letvalt'\u00ab\u00abEmpty bfnum'1(empty>>t) \nint'end end Figure4:Breadth-frstnumberingusingviews. 01)time,theentirealgorithmrunsin0n)time.One again,theusualimplementationofqueuesasapairoflists \nwouldbeagoodhoieforthisalgorithm.  4. LEVEL-ORIENTED SOLUTIONS NearlyallthealternativesolutionsIreeivedfromother \nfuntionalprogrammersareleveloriented,meaningthatthey expliitlyproessthetreeorforest)levelbylevel.Inon\u00adtrast,myqueue-basedsolutionsdonotmakeexpliitthe \ntransitionfromoneleveltothenext.Themainadvantageof thelevel-orientedapproahisthatitreliesonlyonlists,not \nonfanierdatastruturessuhasqueuesordouble-ended queues. Iwillnotattempttodesribeallthepossiblelevel-oriented \nsolutions.Instead,toprovideafairomparisontomyqueue\u00adbasedapproah,Iwilldesribeonlytheleanestofthesede\u00adsigns. \nForompleteness,IalsoreviewJonesandGibbons' algorithminAppendixA,buttheiralgorithmisnotdiretly omparabletominesineitdependsonlazyevaluation.) \nGivenalistoftrees,wheretherootsofthosetreesform theurrentlevel,weanextratthenextlevelbyolleting thesubtreesofanynon-emptynodesintheurrentlevel,as \nin nat(maphildrenlvl) where funhildrenE [] hildren(T(x,a,b)) [a,b] Later,afterareursiveallhasnumberedallthetreesin \nthenextlevel,weannumbertheurrentlevelbywalking downbothlistssimultaneously,takingtwonumberedtrees fromthenextlevelforeverynon-emptynodeintheurrent \nlevel. funrebuildi[][] [] rebuildi(E::ts)s E::rebuilditss rebuildi(T(, , )::ts)(a::b::s) T(i,a,b)::rebuild(i+1)tss \nThelasttrikypointishowtoomputethestartingindex fornumberingthenextlevelfromthestartingindexforthe urrentlevel.Weannotsimplyaddthelengthofthelist \nrepresentingtheurrentleveltotheurrentindex,beause theurrentlevelmayontainarbitrarilymanyemptynodes, whihshouldnotinreasetheindex.Instead,weneedto \nfndthenumberofnon-emptynodesintheurrentlevel. Althoughweoulddefneaustomfuntiontoomputethat value,weaninsteadnotiethateahnon-emptynodein \ntheurrentlevelontributestwonodestothenextlevel,and thereforemerelydividethelengthofthenextlevelbytwo. \nTheompletealgorithmappearsinFigure5. Thisalgorithmmakesthreepassesovereahlevel,frst omputingitslength,thenolletingitshildren,andfnally \nrebuildingthelevel.Attheprieofslightlymessierode,we ouldeasilyombinethefrsttwopasses,butthereseems tobenowaytoaomplishallthreetasksinasinglepass \nwithoutlazyevaluation.  5. DISCUSSION Comparingmyqueue-basedsolutionwiththelevel-oriented solutionintheprevioussetion,Iseenoompellingreason \nstrutureBreadthFirstNumberingByLevels:BFNUM strut funhildrenE [] hildren(T(x,a,b)) [a,b] funrebuildi[][] \n[] rebuildi(E::ts)s E::rebuilditss rebuildi(T(,,)::ts)(a::b::s) T(i,a,b)::rebuild(i+1)tss funbfnum'i[] \n[] bfnum'ilvl letvalnextLvl nat(maphildrenlvl) valj i+(lengthnextLvldiv2) valnextLvl' bfnum'jnextLvl \ninrebuildilvlnextLvl'end funbfnumt hd(bfnum'1[t]) end Figure5:Level-orientedbreadth-frstnumbering. topreferoneovertheother.Thelevel-orientedsolution \nisperhapsslightlyeasiertodesignfromsrath,butthe queue-basedalgorithmisonlyamodestextensionofthe queue-basedalgorithmforbreadth-frsttraversal,whihis \nquitewell-knownmorewell-known,infat,thanthelevel\u00adorientedalgorithmforbreadth-frsttraversal).Informaltim\u00adingsindiatethatthelevel-orientedsolutiontobreadth-frst \nnumberingisslightlyfasterthanthequeue-basedone,but thedifereneisminorandisnotinanyaseanapriori justifationforfavoringthelevel-orientedapproah. \nWhyisitthenthatfuntionalprogrammersfaedwith thisproblemsooverwhelminglyommittoalevel-oriented approahrightfromthebeginningofthedesignproess? \nIanonlyspeulate,armedwithanedotalresponsesfrom thoseprogrammerswhohaveattemptedtheexerise.Ihave identifedfourpotentialexplanations: \nUnfamiliaritywiththeunderlyingtraversalalgorithm. Aprogrammerunfamiliarwiththequeue-basedalgo\u00adrithmforbreadth-frsttraversalwouldbeexeedingly \nunlikelytoomeupwiththequeue-basedalgorithm forbreadth-frstnumbering.However,thisaounts foronlyasmallfrationofpartiipantsintheexer\u00adise. \n Unfamiliaritywithfuntionalqueuesanddouble-ended queues.Aprogrammerunfamiliarwiththefatthat suhdatastruturesanbeimplementedfuntionally \nwouldbeunlikelytodesignanalgorithmthatrequired theiruse.Inthisategory,Iperhapshaveanun\u00adfairadvantage,havinginventedavarietyofnewim\u00adplementationsoffuntionalqueuesanddouble-ended \nqueues[8].Butmostprogrammersprofessanaware\u00adnessthatthesedatastruturesareavailableof-the\u00adshelf,eveniftheyouldn'tsayofhandhowthoseim\u00adplementationsworked. \n Prematureommitmenttoadatastruture.Mostfun\u00adtionalprogrammersimmediatelyreahforlists,and trysomethingfanieronlyiftheygetstuk.Eventhe \nprogrammerwhoinitiallyhoosesqueuesislikelyto  runintotroublebeauseoftheoppositeorientations . .. . \n oftheinputandoutputqueues.Thequeue-basedalgo-. .  rithmiseasiesttodevelopifyoubeginwithanabstrat \nnotionofsequenesandommittoapartiularrepre\u00adsentationofsequenesonlyattheendoftheproess.    . .   \nPrematureommitmenttoaprogramminglanguage. Or,tobemorepreise,prematureommitmenttoa   singleprogramminglanguagefeature:patternmath-.. \n. . . ... . ing.Thistiesbakintothepreviousreason.Fun\u00adtionallanguagessuhasStandardMLandHaskell donotpermitpatternmathingonabstrattypes, \ntherebyenouragingearlyommitmenttoaparti\u00adularonretetype,inpartiulartoaonretetype suhasliststhatblendsnielywithpatternmathing. \nBeauseoftheirmoreompliatedinternalstruture, queuesanddouble-endedqueuesdonotblendnearlyas wellwithpatternmathing.Viewsoferawayaround \nthisproblem,butbeauseStandardMLandHaskell donotsupportviews,theydonothelptheprogram\u00admerwhoommitstowritinglegaloderightfromthe \nbeginningofthedesignproess.Again,Iperhaps haveanunfairadvantage,havingearlierproposeda notationforaddingviewstoStandardML[9].) \nThelasttworeasons,iftrue,arepartiularlyworrisome. WetellourstudentsabouttheengineeringbeneftsofADTs, \nbutthenfailtousethem.Wenodatplatitudessuhas \"Programintoalanguage,notinit\",butthenignoreor failtoreognizetheblindersimposedbyourownfavorite \nlanguage. Ofourse,onedoesnotgenerallyuseasledgehammerto rakawalnut-whenworkingonatoyproblem,weoften permitourselvesadegreeofsloppinessthatwewouldnever \ntolerateonalargeprojet.Furthermore,endingupwitha level-orientedsolutionisnotbyitselfevideneofanysloppi\u00adnesswhatsoever.Still,ifyouaeptthelaimthatneither \nsolutionisintrinsiallyeasiertodesignthantheother,then youhavetowonderwhatexternalfatorisausingthedis\u00adparityinproposedsolutions. \nAcknowledgments ThankstoJohnLaunhburyfororiginallyproposingthe problemandtothemanyprogrammerswhopartiipated \ninthisexperiment.  6. REFERENCES [1]F.WarrenBurton.Ane\u00c6ientfuntional implementationofFIFOqueues.Information \nProessingLetters,14 5):205-206,July1982. [2]DavidGries.TheSieneofProgramming.Textsand MonographsinComputerSiene.Springer-Verlag, \nNewYork,1981. [3]RobertHoodandRobertMelville.Real-timequeue operationsinpureLisp.InformationProessing \nLetters,13 2):50-53,November1981. [4]RobR.Hoogerwoord.Asymmetrisetofe\u00c6ientlist operations.JournalofFuntionalProgramming, \n2 4):505-513,Otober1992. [5]GeraintJonesandJeremyGibbons.Linear-time breadth-frsttreealgorithms:Anexeriseinthe \narithmetioffoldsandzips.TehnialReportNo.71, ......... .. .. .. .. .. .. .. .. .. Figure6:Threadingalistofindiesthroughatree. \nUniversityofAukland,1993.AlsoknownasIFIP WorkingGroup2.1workingpaper705WIN-2.). [6]RobinMilner,MadsTofte,RobertHarper,andDavid \nMaQueen.TheDefnitionofStandardML (evised). TheMITPress,Cambridge,Massahusetts,1997. [7]ChrisOkasaki.Simpleande\u00c6ientpurelyfuntional \nqueuesanddeques.JournalofFuntional Programming,54):583-592,Otober1995. [8]ChrisOkasaki.PurelyFuntionalDataStrutures. \nCambridgeUniversityPress,1998. [9]ChrisOkasaki.ViewsforStandardML.InWorkshop onML,pages14-23,September1998. \n [10]PhilipWadler.Views:Awayforpatternmathingto ohabitwithdataabstration.InACMSymposiumon PriniplesofProgrammingLanguages,pages307-313, \nJanuary1987. APPENDIX  A. BREADTH-FIRST NUMBERING WITH LAZY EVALUATION JonesandGibbons'originalsolutionisatuallyforaslightly \ndiferentproblemknownasbreadth-frstlabelling[5].To makeomparisonseasier,Iadapttheiralgorithmtothe somewhatsimplerframeworkofbreadth-frstnumbering. \nSupposeyouaremagiallygivenalistofintegersrepre\u00adsentingthefrstavailableindexoneahlevel.Thefollowing Haskellfuntionproduesatreewhereeahlevelisnum\u00adberedbeginningwiththegivenindex.Italsoproduesa \nlistontainingthenextavailableindexateahlevel.The listofindiesatsasstatethatisthreadedthroughthetree. \nbfn::([Int],Treea)->([Int],TreeInt) bfn(ks,E) (ks,E) bfn(k:ks,Txab) (k+1:ks'',Tka'b') where(ks',a') bfn(ks,a) \n(ks'',b') bfn(ks',b) TheefetofthisfuntionisillustratedinFigure6. Buthowdowereatetheinitialstate?Clearly,thefrst \navailableindexonthefrstlevelshouldbe1,butwhatabout theotherlevels?TheessentialtrikinJonesandGibbons' \nsolutionistorealizethat,whentheentiretreehasbeen proessed,thenextavailableindexattheendofonelevel isatuallythefrstavailableindexforthenextlevel.In \notherwords,ifksisthefnalstate,thenweanonstrut theinitialstateas1:ks.Theoverallalgorithmanthus beexpressedas \n bfnumt t' where(ks,t') bfn(1:ks,t)  Thistrikoffeedingtheoutputofafuntionbakintothe \u00c6 input,asillustratedinFigure7,iswherelazyevaluationis \nrequired.Withoutlazyevaluation,yououldstillusetheir mainalgorithm,butwouldneedtoalulatetheinitiallist \n\u00c6 ofindiesinaseparatepass. . \u00c6 ..           . .. . ... . ....    . .. . ... . ....  \nFigure7:Threadingtheoutputofonelevelintoinputofthenextlevel.  the      \n\t\t\t", "proc_id": "351240", "abstract": "Every programmer has blind spots. Breadth-first numbering is an interesting toy problem that exposes a blind spot common to many---perhaps most---functional programmers.", "authors": [{"name": "Chris Okasaki", "author_profile_id": "81100613198", "affiliation": "Department of Computer Science, Columbia University", "person_id": "P46261", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/351240.351253", "year": "2000", "article_id": "351253", "conference": "ICFP", "title": "Breadth-first numbering: lessons from a small exercise in algorithm design", "url": "http://dl.acm.org/citation.cfm?id=351253"}