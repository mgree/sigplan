{"article_publication_date": "09-01-2000", "fulltext": "\n Deriving Backtracking Monad Transformers Functional Pearl Ralf Hinze Institut f\u00a8ur Informatik III Universit\u00a8at \nBonn R\u00a8omerstra\u00dfe 164, 53117 Bonn, Germany ralf@informatik.uni-bonn.de ABSTRACT InapaperaboutprettyprintingJ.Hughesintroduedtwo \nfundamentaltehniquesforderivingprogramsfromtheir speifation,whereaspeifationonsistsofasignature andpropertiesthattheoperationsofthesignaturearere\u00adquiredtosatisfy.Briefy,thefrsttehnique,thetermim\u00adplementation,representstheoperationsbytermsandworks \nbydefningamappingfromoperationstoobservations thismappinganbeseenasdefningasimpleinterpreter. Theseond,theontext\u00adpassingimplementation,represents \noperationsasfuntionsfromtheirallingontexttoobser\u00advations.Weapplybothtehniquestoderiveabaktraking monadtransformerthataddsbaktrakingtoanarbitrary \nmonad.Inadditiontotheusualbaktrakingoperations failureandnondeterministihoie theprologutandan operationfordelimitingtheefetofautaresupported. \n Categories and Subject Descriptors D.1.1[ProgrammingTehniques]:Appliative(Fun\u00adtional)Programming;D.3.2[ProgrammingLanguages]: \nLanguageClassifations appliative(funtional)languages; D.3.3[ProgrammingLanguages]:LanguageConstruts andFeatures \nontrolstrutures;polymorphism;F.3.1[Log\u00adisandMeaningsofPrograms]:SpeifyingandVer\u00adifyingandReasoningaboutPrograms \nspeifationteh\u00adniques;F.3.2[LogisandMeaningsofPrograms]:Se\u00admantisofProgrammingLanguages algebraiapproahes \ntosemantis;F.3.3[LogisandMeaningsofPrograms]: StudiesofProgramConstruts ontrolprimitives General Terms \nDesign,languages,theory,verifation  Keywords Programderivation,monads,monadtransformers,bak\u00adtraking,ut,ontinuations,Haskell,Prolog \nPermission to make digital or hard copies of all or part of this work for personal or classroom use is \ngranted without fee provided that copies are not made or distributed for pro.t or commercial advantage \nand that copies bear this notice and the full citation on the .rst page. To copy otherwise, to republish, \nto post on servers or to redistribute to lists, requires prior speci.c permission and/or a fee. ICFP \n00, Montreal, Canada. Copyright 2000 ACM 1-58113-202-6/00/0009 ..$5.00 1. INTRODUCTION Whyshouldonederiveaprogramfromitsspeifation? \nIdeally,aderivationexplainsandmotivatesthevariousde\u00adsignhoiestakeninapartiularimplementation.Atbest aderivationeliminatestheneedforso\u00adalledeurekasteps, \nwhihareusuallyinevitableifaprogramisexplained,say, bymeansofexample. InapaperaboutprettyprintingJ.Hughes[6]introdued \ntwofundamentaltehniquesforderivingprogramsfromtheir speifation.Bothtehniquesprovidetheprogrammerwith \nonsiderableguidaneintheproessofprogramderivation. Toillustratetheirutilityandversatilityweapplytheframe\u00adworktoderiveseveralmonadtransformers,whihamong \notherthingsaddbaktrakingtoanarbitrarymonad. Briefy,amonadtransformerisamappingonmonadsthat augmentsagivenmonadbyaertainomputationalfeature \nsuhasstate,exeptions,ornondeterminism.Traditionally, monadtransformersareintroduedinasinglebigeureka \nstep.Eventhereentintrodutorytextbookonfuntional programming[2]failstoexplainthepartiulardefnitions ofmonadtransformers.Afterdefninganexeptionmonad \ntransformerR.Birdremarks:\"Whyhavewehosentowrite []?Theansweris:beauseitworks.\".Buildingupon Hughes'tehniqueswewilltrytoprovideamoresatisfying \nanswer.Thereadershouldbeprepared,however,thatthe resultsaresomewhatdiferentfromthestandardtextbook examples. \nThepaperisorganizedasfollows.Se.2reviewsmonads andmonadtransformers.Se.3introduesHughes'teh\u00adniquesbymeansofasimpleexample.Se.4appliesthe \nframeworktoderiveabaktrakingmonadtransformerthat addsbaktrakingtoanarbitrarymonad.Finally,Se.5 extendsthedesignofSe.4toinludeadditionalontrol \nonstruts:Prolog'sutandanoperationfordelimitingthe efetofut.Finally,Se.6onludesandpointsoutdire\u00adtionsforfuturework. \n 2. PRELIMINARIES MonadshavebeenproposedbyMoggiasameanstostru\u00adturedenotationalsemantis[11,12].Wadlerpopularized \nMoggi'sideainthefuntionalprogrammingommunityby usingmonadstostruturefuntionalprograms[15,16,17]. InHaskell98[13]monadsareapturedbythelassdefnition \ninFig.1.Theessentialideaofmonadsistodistinguishbe\u00adtweenomputationsandvalues.Thisdistintionisrefeted onthetypelevel:anelementofmarepresentsaomputa\u00adtionthatyieldsavalueoftypea.Thetrivialomputation \nlassMonadmwhere return::a-ma ( )::ma-(a-mb)-mb ( ::ma-mb-mb ) fail::String-ma  m n m onstn fails errors \n Figure1:TheMonadlass. thatimmediatelyreturnsthevalueaisdenotedreturna. Theoperator ),ommonlyalled'bind',ombinestwo \n( omputations:m kappliesktotheresultofthe om\u00adputationm.Thederivedoperation( )providesahandy shortutifoneisnotinterestedintheresultofthefrst \nomputation.Theoperationfailisusefulforsignalingerror onditionsandwillbeusedtothisefet.Notethatfaildoes \nnotstemfromthemathematialoneptofamonad,but hasbeenaddedtothemonadlassforpragmatireasons, see[13,Se.3.14]. \nTheoperationsarerequiredtosatisfythefollowingso\u00ad alledmonadlaws. returna km return(m kd) k2  kamm \n ( a-kda k2) (M1) (M2) (M3) Foranexplanationofthelawswereferthereaderto[2, Se.10.3].Notethatfailisintentionallyleftunspeifed. \nDiferentmonadsaredistinguishedbytheomputational featurestheysupport.Eahomputationalfeatureistyp\u00adiallyaessedthroughanumberofadditionaloperations. \nForinstane,abaktrakingmonadadditionallysupports theoperationsfalseand(I)denotingfailureandnondeter\u00administihoie.Itisrelativelyeasytoonstrutamonad \nthatsupportsonlyasingleomputationalfeature.Unfortu\u00adnately,thereisnouniformwayofombiningtwomonads, whihsupportdiferentomputationalfeatures.Thereason \nissimplythattwofeaturesmayinteratindiferentways. Thereis,however,auniformmethodforaugmentingagiven monadbyaertainomputationalfeature.Thismethodis \napturedbythefollowinglassdefnitionwhihintrodues monadtransformers[9]. lassTransformerTwhere promote::(Monadm)=ma-Tma \nobserve::(Monadm)=Tma-ma AmonadtransformerisbasiallyatypeonstrutorTthat takesamonadmtoamonadTm.Itmustadditionally \nprovidetwooperations:anoperationforembeddingom\u00adputationsfromtheunderlyingmonadintothetransformed monadandaninverseoperation,whihallowsustoobserve \n'augmented'omputationsintheunderlyingmonad.Sine observeforgetsstruture,itwillingeneralbeapartialfun\u00adtion.Inwhatfollowswewillabbreviateobservebywand \npromoteby7.Turningtothelawswerequirepromotionto respetthemonadoperations. 7(returna) returna(P1) 7(m \nk) 7m (7 k)(P2) Theselawsdetermine7asamonadmorphism.Ingeneral,7 shouldrespeteveryoperationtheunderlyingmonadpro\u00advidesinordertoguaranteethataprogramthatdoesnot \nusenewfeaturesbehavesthesameintheunderlyingandin thetransformedmonad.Theounterpartof7isnotquite amonadmorphism. \nw(returna) returna(01) w(7m k) m (w k)(02) Theseondlawisweakerthantheorrespondinglawfor7. ItisunreasonabletoexpetmoresineomputationsinTm \nan,ingeneral,notbemimikedinm.  3. ADDING ABNORMAL TERMINATION ThissetionreviewsHughes'tehniquebymeansofasim\u00adpleexample.Weshowhowtoaugmentagivenmonadbyan \noperationthatallowsonetoterminateaomputationab\u00adnormally.Monadswithadditionalfeaturesareintrodued assublassesofMonad. \ntypeExeption String lass(Monadm)=Raisemwhere raise::Exeption-ma Theallraiseeterminatestheurrentomputation.This \npropertyisapturedbythelaw: k raisee raisee, (R1) whihformalizesthatraiseeisaleftzeroof( ). Now, letustrytoderiveamonadtransformerforthisfeature. \nBeforehand,wemustdeterminehowraiseeisobservedin thebasemonad.Wespeify: w(raisee) faile, (03) whihappearstobetheonlyreasonablehoiesinewe \nknownothingoftheunderlyingmonad. Remark.Wedonotonsideranoperationfortrappingex\u00adeptions(suhashandle)inordertokeeptheintrodutory \nexampleshortandsimple.Itisworthnoting,however, thatthederivationofafully\u00adfedgedexeptionmonadtrans\u00adformerproeedssimilartothederivationgiveninSe.5. \n 3.1 A term implementation Thetermimplementationrepresentsoperationssimplyby termsofthealgebraandworksbydefninganinterpreter \nforthelanguage.Sinewehavefouroperationsreturn, ( ),raise,and7thedatatypethatimplementstheterm algebraonsequentlyomprisesfouronstrutors.Weadopt \ntheonventionthatmonadtransformersaregivennames thatareallinupperase.Fortheonstrutornameswe re\u00adusethenamesoftheoperationswiththefrstletterin \nlik upperase;operatorse( )areprefxedbyaolon. dataRAISEma Returna Vb(RAISEmb): (b-RAISEm a) RaiseExeption \nPromote(ma) Notethatthedefnitioninvolvesanexistentiallyquantifed typevariable[8]inthetypeof(: ).Weuse \nGHC/Hugs syntaxforexistentialquantifation:theexistentiallyquan\u00adtifedvariableisboundbyanexpliituniversalquantifer \nwrittenbeforetheonstrutor. dataRAISEmaReturna Vb(RAISEmb):(b-RAISEma) RaiseExeption Promote(ma) instaneMonad(RAISEm)where \nreturn Return () (:) instaneRaise(RAISEm)where raise Raise instaneTransformerRAISEwhere promo te Promote \nobserve (Returna) returna observe (Returna: k) observe(k a ) observe ((m: kd) : k2) observe(m : ( a-kda: \nk2)) observe (Raisee: k) faile observe (Promotem : k) m (observe k) observe (Raisee) faile observe (Promotem) \nm Figure2:AtermimplementationofRAISE. Now,eahoftheoperationsreturn,(),raise,and7 isimplementedbytheorrespondingonstrutor.Inother \nwords,theoperationsdonothing.Alltheworkisperformed bywwhihanbeseenasdefningatinyinterpreterforthe monadilanguage.Exeptforoneasethedefnitionofw \nisstraightforward. w(Returna)returna w(m:k) w(Raisee)faile w(Promotem)m Canwefllintheblankontheright\u00adhandside?Itappears \nimpossibletodefnew(m:k)intermsofitsonstituents. Theonlywayoutofthisdilemmaistomakeafurtherase distintionon \nm: wwww (Returna:((m:kd)(Raisee:(Promotem k):k): k2)k) w(kw(mfailm ae ) : (w (a-kda:k) k2)) Voilaa.Eahequationisasimpleonsequeneofthemonad \nlawsandthelawsforw.Inpartiular,theseondequation employs(M3),theassoiativelawfor(),toreduethe sizeof(: \n)'sfrstargument.Thisrewritestepisanalogous torotatingabinarytreetotheright.Fig.2summarizesthe termimplementation.Notethatinthesequelwewillomit \ntrivialinstanedelarationslikeMonad(RAISEm)and Raise(RAISEm). Whataboutorretness?Firstofall,thedefnitionofw \nisexhaustive.Itisfurthermoreterminatingsinethesizeof (:)'sleftargumentissteadilydereasing.Weanestab\u00adlishterminationusingaso\u00adalledpolynomialinterpretation \noftheoperations[4]: Returnra1Raisere1 m:n2xm+nPromoterm1 r Amultivariatepolynomialoprofnvariablesisassoiated \nwitheahn\u00adaryoperationop.Foreahequationwe wrwemustshowthatTeTrforallvari\u00adables(rangingoverpositiveintegers)whereTisgivenby \nT(oped en)opr(Ted)(Ten).Notethatweon\u00adsiderbindonlyforthespeialasethattheresultofthe frstargumentisignored.Theinlusionofm:kinits \nfullgeneralityisfeasiblebuttehniallymoreinvolvingsine theinterpretationofkdependsonthevaluemomputes. \nDoestheimplementationsatisfyitsspeifation?Sine weareworkinginthefreealgebra,thelawsdonothold:the expressionsReturnaandReturna:Return,forexample, \naredistint,unrelatedterms.Thelawsofthespeifation onlyholdunderobservation.Themonadlawsbeome: w(return \na k) w (ka) w(m return) w m w((m kd) k2) w (m ( a-kda k2)) Thefrstandthethirdarediretonsequenesofw'sdef\u00adnition.Theseondanbeshownbyindutiononm.For\u00adtunately,weanlivewiththeweakenedlaws,sinetheonly \nwaytorunomputationsoftypeRAISEmistousew.  3.2 A simpli.ed term implementation Canwedobetterthanthenaivetermimplementation? \nAmajorritiismofthefrstattemptisthattheoperations donotexploitthealgebrailaws.Itisoneivablethatwe anworkwithasubsetofthetermalgebra.Forinstane, \nweneednotrepresentbothRaiseeandRaisee:Return. Arathersystematiwaytodeterminetherequiredsubset oftermsistoprogramasimpliferforthedatatypeRAISE, \nwhihexploitsthealgebrailawsasfaraspossible.Itturns outthatweonlyneedtomodifywslightly. a ::RAISEma-RAISEma \na(Returna)Returna a(Returna:k)a(ka) a((m:kd):k2)a(m:(a-kda:k2)) a(Raisee:k)Raisee a(Promotem:k)Promotem:(ak) \na(Raisee)Raisee a(Promotem)Promotemnumberreferstothepreonditiononlyandreason: Inspetingtherighthandsidesweseethatwerequire(:) \nonlyinonjuntionwithPromote.Sine7misfurthermore equivalentto7mreturnwean,infat,restritourselves tothefollowingsubsetofthetermalgebra. \ndataRAISEma Returna VbPromoteBind(mb)(b-RAISEma) RaiseExeption FollowingHughes[6]weallelementsofthenewdatatype \nsimplifedterms.Weavoidthetermnormalformoranoni\u00adalformsinedistinttermsmaynotneessarilybeseman\u00adtiallydiferent.Forinstane,returnaanberepresented \nbothbyReturnaandPromoteBind(returna)Return. Nonetheless,usingthisrepresentationthedefnitionofwis muhsimpler.Itis,infat,diretlybasedonthelaws(01). \n(03).TheompleteimplementationappearsinFig.3.If weareonlyinterestedindefningamonad(notamonad transformer),thenweanomittheonstrutorPromoteBind. \nTheresultingdatatypeorrespondsexatlytothestandard defnitionoftheexeptionmonad. Whataboute\u00c6ieny?Thenaiveimplementationor \nrather,thefrstdefnitionofwhasarunningtimethatis proportionaltothesizeoftheomputation.Unfortunately, the'improved'termimplementationhasaquadratiworst\u00adasebehaviour.Considertheexpression \nw(((7(return0)in)in)in) whereinisgivenbyinn7(return(n+1)).Sinethe amortizedrunningtimeofbindisproportionaltothesize \nofitsfrstargument,ittakesO(n2)stepstoevaluatethe expressionabove.Thesituationisanalogoustofatteninga \nbinarytree.Badluk.  3.3 A context-passing implementation Sineweannotimprovetheimplementationoftheoper\u00adationswithoutsarifingtheruntimee\u00c6ieny,letustry \ntoimprovethedefnitionofw.Whilerewritingwwewill workoutaspeifationforthefnalontext-passingimple\u00admentation.Forastart,weanavoidsomepatternmathing \nifwespeializewforopk.Tothisendwereplaethe equationsonerning()bythesingleequation w(op:)wdop anddefnewdby \nwd(Returna)wd(m:k)wdm(a-ka:) wd(Raisee)faile wd(Promotem)ma\u00ad  Interestingly,theparameterisusedtwieinonjuntion \nwithw.Inanattempttoeliminatethemutualreursive dependeneonwweouldtrytopasswasaparameter insteadof.Thisvariationofwd,whihweallw,anbe \nspeifedasfollows. wop w(op:) .Va aw(a)(1) LetusderivethedefnitionofwforopReturna.We assumethatpreondition(1)holdsnotethattheequation \nw(Returna) {speifationandassumption(1)} w(Returna:) {defnitionw} w(a) {assumption(1)} a ThealulationsforPromotemandRaiseearesimilar.It \nremainstoinferthedefnitionforop(m:k): w(m:k) {speifationandassumption(1)} w((m:k):) {defnitionw} w(m:(a-ka:)) \n{speifation} wm(a-w(ka:)) {speifationandassumption(1)} wm(a-w(ka) ) Voilaa.Thedependeneonwhasvanished.Tosummarize, \nwisgivenby w(Returna) -a w(m:k) -wm(a-w(ka) ) w(Raisee) -faile w(Promotem) -m Notethattheonstrutorsappearonlyontheleft\u00adhand \nsides.Thismeansthatweareevenabletoremovethein\u00adterpretativelayer,iereturnaanbeimplementeddiretly by -ainsteadofReturn.Ingeneral,weonsistently \nreplaewopbyop.Silently,wehaveonvertedthetermim\u00adplementationintoaontext-passingimplementation.Tosee whytheterm'ontext\u00adpassing'isappropriate,onsiderthe \nfnalspeifationoftheontext\u00adpassingimplementation. op w(op) .Va aw(a)(2) Theparameter ofopanbeseenasarepresentationof \nop'sallingontextw(.)werepresentaontext byanexpressionthathasaholeinit.Thisisthenubof thestory:everyoperationknowstheontextinwhihitis \nalledanditisfurthermoreabletoaessandtorearrange theontext.Thisgivestheimplementoramuhgreater freedomofmanoeuvreasomparedtothesimplifedterm \nalgebra.Forinstane,()anusetheassoiativelawto improvee\u00c6ieny.Byontrast,()ofthesimplifedterm varietydoesnotknowofanyouterbindsandonsequently \nfallsintothee\u00c6ienytrap. Itisquiteinstrutivetoinfertheoperationsoftheontext\u00adpassingimplementationfromsrathusingthespeifation \nabove.Fig.4summarizesthealulations.Interestingly, eahmonadlaw,thelawforraise,andeahlawforwis invokedexatlyone.Inotherwords,thelawsofthespe\u00adifationareneessaryandsu\u00c6ientforderivinganimple\u00admentation. \nItremainstodeterminethetypeofthenewmonadtrans\u00adformer.Thisismosteasilyaomplishedbyinspetingthe dataRAISEmaReturna \nVbPromoteBind(mb)(b-RAISEma) RaiseExeption instaneMonad(RAISEm)where returnaReturna Returnakka (PromoteBindmkd)k2 \nPromoteBindm(a-kdak2) RaiseekRaisee instaneRaise(RAISEm)where raiseeRaisee instaneTransformerRAISEwhere \npromotemPromoteBindmReturn observe(Returna)returna observe(PromoteBindmk)m(observek) observe(Raisee)faile \n Figure3:AsimplifedtermimplementationofRAISE. defnitionof7.Notethat7mequals()mandreall that()possessesthetypeVaVbma-(a-mb)\u00admbwhihisequivalenttoVama-(Vb(a-mb)\u00admb).Consequently,thenewtransformerhastypeVb(a\u00admb)-mb.So,whilethetermimplementationrequires \nexistentialquantifation,theontext\u00adpassingimplementa\u00adtionmakesuseofuniversalquantifation.Thefnalimple\u00admentationappearsinFig.5.d \nTheognosentiwoulder\u00adtainlyreognizethattheimplementationisidentialwith thedefnitionoftheontinuationmonadtransformer[9]. \n0nlythetypesarediferent:RAISEinvolvesrank\u00ad2types whiletheontinuationmonadtransformerisadditionally parameterizedwiththeanswertype:CONTansma \n(a-mans)-mans.ThetransformerRAISEm onstitutesthesmallestextensionofmthatallowsoneto addraise.Note,forinstane,thatallisdefnablein \nCONTansmbutnotinRAISEm.WewillseeinSe.4.3 thatrank\u00ad2typeshaveadvantagesoverparameterizedtypes.  4. ADDING \nBACKTRACKING Bydefnition,abaktrakingmonadisamonadwithtwo additionaloperations:theonstantfalse,whihdenotesfail\u00adure,andthebinaryoperation(I),whihdenotesnondeter\u00administihoie.Thelassdefnitionontainsathirdop\u00aderation,termedons,whihprovidesahandyshortutfor \nreturnaI m. lass(Monadm)=Baktrmwhere false :: m a (I) :: m a -m a -m a ons :: a -m a -m a onsam return \na I m Theoperationsarerequiredtosatisfythefollowinglaws. falseI mm(B1) mI falsem(B2) dNotethatRAISEmustatuallybedefnedusingnewtype \ninsteadoftype.This,however,introduesanadditional dataonstrutorthatafetsthereadabilityoftheode. Insteadweemploytypedelarationsasiftheyworkedas \nnewtypedelarations. (mI n)I omI (nI o)(B3) falsekfalse(B4) (mI n)k(mk)I (nk)(B5) Thatis,falseand(I)formamonoid;falseisaleftzero \nof(),and()distributesleftwardthrough(I).Now, sineweaimatdefningabaktrakingmonadtransformer, wemustalsospeifytheinterationofpromotedoperations \nwith(I): (7mk)I n7ma-ka(B6) I n Consider7masadeterministiomputation,ieaompu\u00adtationthatsueedsexatlyone.Then(B6)formalizesour \nintuitionthatadeterministiomputationanbepushed outofadisjuntion'sleftbranh.Finally,wemustspeify howthebaktrakingoperationsareobservedinthebase \nmonad. wfalsefail\"false\" (04) w(returnaI m)returna(05) Soweanobservethefrstanswerofanondeterministi omputation. \n4.1 A term implementation Thefreetermalgebraofthebaktrakingmonadisgiven bythefollowingtypedefnition. \ndataBACKTRma Returna Vb(BACKTRmb):(b-BACKTRma) False BACKTRma:I BACKTRma Promote(ma) Letustrytoderiveaninterpreterforthislanguage.The \ndefnitionofthebaseasesfollowsimmediatelyfromthe speifation.Form:kweobtain: w(Returna:k)w(ka) w((m:kd):k2)w(m:(a-kda:k2)) \nw(False:k)fail\"false\" w((m:I n):k)w((m:k):I (n:k)) w(Promotem:k)m(wk) Similarly,form:I nwemakeaasedistintiononm: \n(returna) {speifationandassumption(2)} observe(returna) {(M1)} observe(a) {assumption(2)} a (mk) {speifationandassumption(2)} \nobserve((mk)) {(M3)} observe(m(a-ka)) {speifation} m(a-observe(ka)) {speifationandassumption(2)} m(a-ka \n) (raisee) {speifationandassumption(2)} observe(raisee) {(R1)} observe(raisee) {(03)} faile (promotem) \n{speifationandassumption(2)} observe(promotem) {(02)} ma-observe(a) {assumption(2)} m observem {(M2)} \nobserve(mreturn) {speifation} m(a-observe(returna)) {(01)} mreturn Figure4:Derivingaontext\u00adpassingimplementa\u00adtionofRAISE. \ntypeRAISEmaVb(a-mb)-mb instane(Monadm)=Monad(RAISEm)where returna-a mk -m(a-ka) instane(Monadm)=Raise(RAISEm)where \nraisee-faile instaneTransformerRAISEwhere promotem-m observemmreturn  Figure5:Aontext\u00adpassingimplementationof \nRAISE. w(Returna:I f)returna w(m:k:I f) w(False:I f)wf w((m:I n):I f)w(m:I (n:I f)) w(Promotem:I f)m \nUnfortunately,oneaseremains.Thereisnoobviousway tosimplifyw(m:k:I f).Asusual,wehelpourselvesby makingafurtherasedistintiononm. \nw((Returna:k):I f)w(ka:I f) w(((m:kd):k2):I f)w((m:(a-kda :k2)):I f) w((False:k):I f)wf w(((m:I n):k):I \nf)w((m:k) :I ((n:k):I f)) w((Promotem:k):I f)ma-w(ka:I f) Voilaa.Wehavesueededinbuildinganinterpreterfor \nbaktraking.Fig.6liststheompleteimplementation. Now,whataboutorretness?Clearly,theasedistin\u00adtionisexhaustive.Toestablishterminationweanusethe \nfollowingpolynomialinterpretation. Returnra 2 m:Irn 2xm+n m: rn m 2 xn Promoterm 2 Falser 2 Asbefore,thelawsofthespeifationonlyholdunderob\u00adservation. \n 4.2 A simpli.ed term implementation Letustakeabrieflookatthesimplifedtermimplementa\u00adtion.Inspetingthedefnitionofwreallthatasimplifer \nislikelytomakethesameasedistintionaswweseethat weneedatmostsixterms:False,Returna,Returna:I f, Promotem,Promotem:k,andPromotem:I \nf.We aneliminatethreeofthemusingreturnaonsafalse, 7m7mreturn,and7m:I f7ma-onsaf. Thisexplainsthefollowingdefnitionofsimplifedterms. \ndataBACKTRma False Consa(BACKTRma) VbPromoteBind(mb)(b-BACKTRma) Inessene,thesimplifedtermalgebraisanextensionofthe \ndatatypeofparametrilistswithFalseorrespondingto[] andConsorrespondingto(:).Theadditionalonstrutor PromoteBindmakesthediferenebetweenamonadand \namonadtransformer.Notethatthestandardlistmonad transformer,LISTmam[a],anonlybeappliedto so\u00adalledommutativemonads[7].Byontrast,BACKTR \nworksforarbitrarymonads.  4.3 A context-passing implementation InSe.3.3wehaveseenthattheontext\u00adpassingimple\u00admentationessentiallyremovestheinterpretativelayerfrom \nthe'naive'termimplementation.Ifweapplythesame steps,weanderiveverysystematiallyaontext\u00adpassing implementationofbaktraking.Weleavethedetailstothe \nreaderandskethonlythemainpoints.First,fromthease analysiswperformswemayonludethatthemostom\u00adplexontexthastheformw(.I \nf).Allotherontexts anberewrittenintothisform.Seond,ifweinspetthe dataBACKTRmaReturna Vb(BACKTRmb):(b-BACKTRma) \nFalse BACKTRma:I BACKTRma Promote(ma) instaneTransformerBACKTRwhere promote Promote observe (Returna) \nreturna observe (Returna: k) observe(k a) observe ((m: kd) : k2) observe(m: ( a -kda: k2)) observe (False: \nk) fail\"false\" observe ((m:I n) : k) observe((m: k) : I (n: k)) observe (Promotem: k) m (observe k) observe \nFalse fail\"false\" observe (Returna:I f) returna observe ((Returna: k) :I f ) observe(k a :I f) observe \n(((m: kd) : k2) :I f) observe((m: ( a-kda : k2)):I f) observe ((False: k) :I f) observef observe (((m:I \nn) : k) :I f) observe((m: k) : I ((n: k) : I f)) observe ((Promotem: k) :I f) m a-observe (k a :I f) \nobserve (False:I f) observef observe ((m:I n) :I f) observe(m:I (n :I f)) observe (Promotem:I f) m observe \n(Promotem) m Figure6:AtermimplementationofBACKTR. equationsthatareonernedwithw(.I f)weseethat fappearsoneintheontextw..Likewise,isusedtwie \nintheontextw(.a:I f).Theseobservationsmotivatethe followingspeifation. op fw(opI f) f wf (3) ... ... \n1Vff(Va afw(aI f))fwf(4) TheniethingaboutHughes'tehniqueisthatmistakes madeatthispointwillbedisoveredlaterwhentheoper\u00adationsarederived.Forinstane,itmayseemunneessary \nthat isparameterizedwithf. .However,ifwesimplypostu\u00adlateVa aw(aI f),thenwewillnotbeabletoderivea defnitionfor(I).Betterstill,oneandevelopthespeifa\u00adtionabovewhilemakingthealulations.Thederivationof \nfalse,forinstane,motivatesassumption(3);thederivation ofreturnsuggestseitherVa aw(aI f)orassump\u00adtion(4)andthederivationof(I)onfrmsthat(4)isthe \nrighthoie.TheompletederivationappearsinFig.7. Interestingly,eahequationofthespeifationisinvoked exatlyone. \nItremainstodeterminethetypeofthebaktrakingmonad transformer.Ifweassumethattheseondparameter,the so\u00adalledfailureontinuation,hastypemb,thenthefrst \nparameter,theso\u00adalledsuessontinuation,isoftype a-mb-mb.Itfollowsthatthetypeofthenew transformerisVa(a-mb-mb)-mb-mb.Again, \ntheanswertypeisuniversallyquantifed.Wewillseeshortly whythisisareasonablehoie.Fig.8summarizestheim\u00adplementation. \nReonsiderFig.7andnotethatthederivationofreturn, ifation.Thelaws(04)and(05)areonlyrequiredinthe derivationofw.0nly7relieson(03)whih,however,ap\u00adpearstobetheonlysensiblewaytoobservepromotedopera\u00adtions.Thissuggeststhatweandefnediferentobservations \nwithouthangingthedefnitionsoftheotheroperations.In otherwords,wemaygeneralizethespeifationasfollows (here'isanarbitraryobserverfuntion). \nopf '(op I f) (5) f 'f 1 Vf. f. (Va af. '(aI f.)) f. 'f. 1 Vm k ' (7m k) m (' k) Toillustratetheuseofthegeneralizedspeifationassume \nthatwewanttoolletallsolutionsofanondeterministi omputation.Tothisendwespeifyanobservationsolveof type(Monadm)=BACKTRma-m[a]: \nsolvefalsereturn[](S1) solve(returnaI m)a<solvem(S2) solve(7mk)m(solvek),(S3) where(<)isgivenby (<)::(Monadm)=a-m[a]-m[a] \na<msmsas-return(a:as) Animplementationforsolveanbereadilyderivedifwe speialize(5)forreturnandffalse.Weobtain: \n'opop(f)e 'falsee 1Vaf. '(returnaI f.)af'f. (),false,and(I)isompletelyindependentofw'sspe\u00ad1Vmk'(7mk)m('k) \ntypeBACKTRma Vb(a-mb-mb)-mb-mb instane(Monadm)=Monad(BACKTRm)where returnamk-m(a-ka) (returna)f  {speifationandassumptions(3)&#38;(4)} \nobserve(returnaI f) {(M1)} observe(aI f) {assumptions(3)&#38;(4)} af instane(Monadm)=Baktr(BACKTRm)where \nfalse-id mI n-mn  (mk)f instaneTransformerBACKTRwhere promotemf-ma-af {speifationandassumptions(3)&#38;(4)} \nobserve ((m k) I f) {(M3)} observe (m (a-ka)I f) {speifationandassumption(3)} m(a-observe(ka))f f. I \nf. observemm(af-returna)(fail\"false\") Figure8:Aontext\u00adpassingimplementationof BACKTR. {speifationandassumption(4)} \nm(a-ka )f f. f.falsef Consequently,solveopop(<)(return[]).Now,instead ofprovidingsolveasanadditionalobserverfuntionwepro\u00admoteitintothebaktrakingmonad. \nsols::(Monadm)=BACKTRma-BACKTRm[a] solsm7(m(<)(return[])) Thiswayweanusetheallsolutionolletingfuntionasif \nitwereanewomputationalprimitive.Sine7isamonad morphism,wefurthermoreknowthatsolssatisfessuitable variantsof(S1).(S3).Notethattheimplementationofsols \nmakesnon\u00adtrivialuseofrank\u00ad2types.Ifweusedavariant ofBACKTRthatisparameterizedwiththeanswertype, thensolsannotbeassignedatypeta-t[a]forsomet. \n  5. ADDING CONTROL LetusextendourlanguagebytwoadditionalProlog\u00adlike ontrolonstruts.Thefrst,alledutanddenoted'!', \nallowsustoreduethesearhspaebydynamiallypruning unwantedomputationpaths.Theseond,termedall,is providedforontrollingtheefetofut.Bothonstruts \nareintroduedasasublassofBaktr. lass(Baktrm)=Cutmwhere ! :: m() utfalse :: m a all :: m a -m a !return()I \nutfalse utfalse!false Theoperationalreadingof'!'andallisasfollows.The utsueedsexatlyoneandreturns().Asaside\u00adefet \nitdisardsallpreviousalternatives.Theoperationallde\u00adlimitstheefetofut:allmexeutesm;iftheutis invokedinm,itdisardsonlythehoiesmadesinemwas \nalled.Thelassdefnitionontainsathirdoperation,alled utfalse,whihapturesaommonprogrammingidiomin Prolog,theso\u00adalledut\u00adfailombination[14]. \nNotethatinstanesofthelassCutmustdefneeither '!'orutfalse.Thedefaultdefnitionsalreadyemployour knowledgeaboutthepropertiesoftheoperations,whih \nweshallonsidernext.Weskeththeaxiomatizationonly briefy,foramorein\u00addepthtreatmenttheinterestedreader isreferredto[5].Theutisharaterizedbythefollowing \n {speifationandassumptions(3)&#38;(4)} observe(falseI f) {(B4)} observe(falseI f) {(B1)} observef {assumption(3)} \nf (mI n)f {speifationandassumptions(3)&#38;(4)} observe((mI n)I f) {(B5)} observe((mI n)I f) {(B3)} \nobserve(mI (nI f)) {speifationandassumption(4)} m(observe(nI f)) {speifationandassumptions(3)&#38;(4)} \n (promotem)f {speifationandassumptions(3)&#38;(4)} observe(promotemI f) {(B6)} observe(promotem(a-af)) \nI {(03)} ma-observe(aI f) {assumptions(3)&#38;(4)} ma-af observem {(M2)and(B2)} observe(mreturnI false) \n{speifation} m(af. -observe(returnaI f.))(observefalse) {(04)} m(a-observe(returna))(fail\"false\") f. \nI f.{(05)} m(a-returna)(fail\"false\") f. Figure7:Derivingaontext\u00adpassingimplementa\u00adtionofBACKTR. threeequations. \n(!m)!m(!1) I n !(mI n)m!n(!2) I !return()!(!3) Thefrstequationformalizesourintuitionthatautdis\u00adardspasthoiepoints,iealternativeswhihappear'above' \nortoitsleft.0ntheotherhand,theutdoesnotafetfu\u00adturehoiepoints,iealternativeswhihappeartoitsright. Thisfatisapturedby(!2).Axiom(!3)simplyreordsthat \nutreturns().Animmediateonsequeneoftheaxiomsis !return()I !false,whihexplainsthedefaultdef\u00adnitionofut.Toseewhythisrelationholdsreplaemby \nreturn()andnbyfalsein(!2). Theoperationutfalseenjoysalgebraipropertieswhih aresomewhateasiertoremember:utfalseisaleftzeroof \nboth()and(I). utfalsekutfalse(CF1) utfalseI mutfalse(CF2) Thedefaultdefnitionsusethefatthat'!'andutfalseare \ninterdefnable.Likewise,thetwosetsofaxiomsareinter\u00adhangeable.Wemayeitherdefneutfalse!falseand taketheequationsfor'!'asaxiomsthelawsforutfalse \narethensimplelogialonsequenesorvieversa. Finally,allisrequiredtosatisfy: allfalsefalse(C1) all(returnaI \nm)returnaI allm(C2) all(!m)allm(C3) all(mI utfalse)allm(C4) all(7mk)7m(allk)(C5) Thus,allmbehavesessentiallylikemexeptthatanyut \ninsidemhasonlyloalefet.Itremainstolaydownhow thenewoperationsareobservedintheunderlyingmonad. w(allm)wm(06) \nNotethatweneednotspeifytheobservationof'!'and utfalsesine(C3),(C4),and(06)implyw(!m)wm andw(mI utfalse)wm. \n5.1 A term implementation Thefreetermimplementationfaestwoproblems,one tehnialandonefundamental.Letusonsiderthetehnial \nproblemfrst.Inspetingthetypesignatureofut,wefnd thatutannotbeturnedintoaonstrutor,beauseitdoes nothavetherighttype.Ifwedefneatype,say,CUTma, \nthen'!'musthaveexatlythistype.Alas,itstypesignature onlyallowsforasubstitutioninstane,ieCUTm().Here, \nwestumbleoverthegeneralproblemthatHaskell'sdata onstrutisnotapableofexpressingarbitrarypolymorphi termalgebras.Fortunately,theaxiomssavetheday.Sine \n'!'anbeexpressedintermsofutfalseandthisoperation hasapolymorphitype,weturnutfalseintoaonstrutor. dataCUTmaReturna \nVb(CUTmb):(b-CUTma) False CutFalse CUTma:I CUTma Call(CUTma) Promote(ma) Turningtothedefnitionofwweenounteraproblemofa \nmorefundamentalnature.Forastart,wedisoverthatthe termw(allmk)annotbesimplifed.Ifwemakeafur\u00adtherasedistintiononm,weendupwithw(all(allm \nkd)k2)whihisnotreduibleeither.Theruxisthat wehavenoaxiomthatspeifestheinterationofallwith ().Andrightlyso.Eahallopensanewsopeforut. \nHene,weannotreasonablyexpetthatnestedallsanbe ollapsed.Thissuggeststodefnetwointerpreters,onefor wandoneforall,whihmeans,ofourse,thattheimple\u00admentationisnolongerbasedonthefreetermalgebra.The \nresultingode,whihismostlystraightforward,appearsin Fig.9.Theequationsinvolvingutfalseusethefatthat utfalseisaleftzeroofboth()and(I),andthatall \nmapsutfalsetofalse.Notethatwfallsbakonallto avoiddupliationofode. 5.2 A simpli.ed term implementation \nForthesakeofompleteness,hereisthesimplifedterm algebra,whihaugmentsthetypeBACKTRofSe.4.2with anadditionalonstrutorforutfalse. \ndataCUTma False CutFalse Consa(CUTma) VbPromoteBind(mb)(b-CUTma) Inessene,wehavelistswithtwodiferentterminators, \nFalseandCutFalse.Interestingly,exatlythisstruture (withoutPromoteBind)hasbeenusedtogiveadenotational \nsemantisforPrologwithut[1],whereutfalseandallare termedesandunes.  5.3 A context-passing implementation \nWehaveseenthattherealizationofutandallismore demandingsinethereisnowaytosimplifynestedinvoa\u00adtionsofall.Withregardtotheontext\u00adpassingimplemen\u00adtationthismeansthatwemustonsideraninfnitenumber \nofpossibleontexts.Usingagrammar\u00adlikenotationwean haraterizethesetofallpossibleontextsasfollows. c::w(.kI \nf)c[all(.kf)] I AontextiseithersimpleoroftheformC[all(.kI f)] whereCistheenlosingontext.Thus,ontextsareor\u00adganizedinalist\u00adorstak\u00adlikefashion.Asusualwewill \nrepresentoperationsasfuntionsfromontextstoobserva\u00adtions.ThemaindiferenetoSe.4.3isthateahoperation mustnowonsidertwodiferentontextsandthattheon\u00adtextsarereursivelydefned.Note,however,theduality \nbetweenthetermandtheontext\u00adpassingimplementation: InSe.5.1wehadtwointerpreters,allandw,andeahin\u00adterpreterhadtoonsidereahoperation.Herewehavetwo \nontextsandeahoperationmustonsidereahontext. Turningtotheimplementationdetailswewillseethat thegreatestdi\u00c6ultyistogetthetypesright.Theontexts \narerepresentedbyareursivedatatypewithtwoonstru\u00adtors:OBCC(whihisanaronymforobserve\u00adbind\u00adhoie ontext)andCBCC(all\u00adbind\u00adhoieontext).Thefrst \ntakestwoarguments,thesuessandthefailureontinu\u00adation,whiletheseondexpetsthreearguments,thetwo ontinuationsandtherepresentationoftheenlosingon\u00adtext.Inordertoinfertheirtypesitisusefultoonsiderthe \n dataCUTmaReturna Vb(CUTmb):(b-CUTma) False CutFalse CUTma:I CUTma Promote(ma) instaneCut(CUTm)where \nutfalse CutFalse all(Returna)Returna all(Returna:k)all(ka) all((m:kd):k2)all(m:(a-kda:k2)) all(False:k)False \nall(CutFalse:k)False all((m:I n):k)all((m:k):I (n:k)) all(Promotem:k)Promotem:(allk) allFalse False allCutFalseFalse \nall(Returna:I f)Returna:I allf all((Returna:k):I f)all(ka:I f) all(((m:kd):k2):I f)all((m:(a-kda:k2)):I \nf) all((False:k):I f)allf all((CutFalse:k):f)False I all(((m:I n):k):f)all((m:k):I ((n:k):f)) II all((Promotem:k):I \nf)Promotem:a-all(ka:I f) all(False:I f) all(CutFalse:I f)all((m:I n):I f)all(Promotem:I all(Promotem) \ninstaneTransformerpromote observem observe. observe. (Returna) observe. (Promotem: observe. False observe. \n(Returna:I f)  allf False all(m:I (n:I f)) f)Promotem:I allf Promotem CUTwhere Promote observe. (allm) \n::(Monadm)=CUTma-ma returna k)m(observe. k) fail\"false\" returna observe. (Promotem:I f)m observe. (Promotem)m \nFigure.:AtermimplementationofCUT. speifationoftheontext\u00adpassingimplementationbefore\u00adhand.ThespeifationissimilartotheonegiveninSe.4.3 \nexeptthatwehavetwolauses,oneforeahontext. op(OBCC f )w(opf) I f wf (4) ... ... 1Vff(Va afw(aI f))fwf(5) \nopCBCC fall(opf) I f allf (6) ... ... 1Vff(Va afall(aI f))fallf(7) Thefrstlauseloselyorrespondstothespeifationof \nSe.4.3.Forthatreasonwemayassigntheomponentsof OBCC fthesametypes:f hastypemband hastype a-mb-mbwherebistheanswertype.Thisimplies \nthatthetypeofontextsmustbeparameterizedwithm,a, andb. datacmabOBCC(a-mb-mb)(mb) Theseondlauseofthespeifationhasessentiallythe \nsamestrutureasthefrstone.Themaindifereneisthat theomponentsdwellinthetransformedmonadratherthan intheunderlyingmonad.Furthermore,CBCCadditionally \nontainstheenlosingontextwhihmayhaveadiferent type.Toillustrate,onsidertheontextC[all(.f)] I oftypecmab.IfweassumethattheenlosingontextC \nhastypecmibthereisnoreasontorequirethatChas thesameargumenttypeastheentireontext,butitmust havethesameanswertypethenfhastypeCUTmiand \nhastypea-CUTmi-CUTmi.Thismotivatesthe followingdefnition. datacmabOBCC(a-mb-mb)(mb) ViCBCC(a-CUTmi-CUTmi) \n(CUTmi)(cmib) typeCUTmaVbcmab-mb Notethattheintermediatetypeisrepresentedbyanexis\u00adtentiallyquantifedvariable.Themutuallyreursivetypes \ncandCUTaresomewhatmind\u00adbogglingastheyinvolve bothuniversalandexistentialquantifation,aombination offeaturestheauthorhasnotseenbefore. \nNowthatwehavethetypesright,weanaddressthe derivationofthevariousoperations.Exeptfor7theal\u00adulationsareanalogoustothoseofSe.4.3.For7mwe \nmustondutanindutiveprooftoshowthatmpropagates throughthestakofontexts,ie(7mk)ma\u00adka.Theproofisleftasanexerisetothereader.Tode\u00adriveutwereason: \n!CBCCf {speifationandassumptions(6)&#38;(7)} all(!f) I {(!3),(M3),and(M1)} all(!()I f) {(!1)and(!2)} \nall(()I !false) {assumption(7)} ()(all(!false)) {(C3)and(C1)} ()false ThederivationfortheontextOBCCproeedsinananal\u00adogousfashion.Forallweobtain: \nallm {(M2)and(B2)} all(mreturnI false) {speifation} mCBCC(af. -all(returnaI f.))(allfalse) {(C1)and(C2)} \nmCBCC(af. -returnaI allf.)false {f. allf. } mCBCC(af. -returnaI f.)false {defnitionons} mCBCConsfalse \nThus,allinstallsanewontextwithonsandfailasthe initialfailureontinuations.Theompleteimplementation appearsinFig.10.Notethatmostofthemonadoperations \npatternmathontheontext.Thisfatsetstheimplementa\u00adtionapartfromontinuationpassingstyle(CPS),wherethe ontextisananonymousfuntionthatannotbeinspeted. \nByontrast,CPS\u00adbasedimplementations[3,10]usethree ontinuations(asuess,afailure,andautontinuation).  \n6. CONCLUSION Naturally,mostofthereditgoestoJ.Hughesforin\u00adtroduingtwowonderfultehniquesforderivingprograms \nfromtheirspeifation.Manyofthealulationsgivenin thispaperalreadyappearin[6],albeitspeializedtomon\u00adads.However,thestepfrommonadstomonadtransformers \nisnotabigoneandthisisoneofthepleasantfndings.To beabletoderiveanimplementationofProlog'sontrolore fromagivenaxiomatizationisquiteremarkable.Wehave \nfurthermoreappliedthetehniquestoderivestatemonad transformers,STATE,andexeptionmonadtransformers, EXC.Inbothasesthetehniquesworkedwell. \nSomeworkremainstobedonethough.Wedidnotad\u00addresstheproblemofpromotioningeneral.Itiswellknown thatdiferentombinationsoftransformersgenerallyleadto \ndiferentsemantisoftheoperationsinvolved.Forinstane, omposingSTATEwithBACKTRyieldsabaktraking monadwithabaktrakablestate,whihisharaterized \nasfollows. storesfalsefalse stores(mI n)storesmI storesn Reversingtheorderofthetwotransformersresultsina \nglobalstate,whihenjoysadiferentaxiomatization. stores(mI n)storesmI n Forbothvariantsitisstraightforwardtoderiveanimple\u00admentationfromtheorrespondingspeifationinthe \nfrstase(I)ispromotedthroughSTATE,intheseond asestoreispromotedthroughBACKTR.Unfortunately, someharderasesremain,wheretheauthorhasnotbeen \nabletoderiveapromotioninasatisfyingway.Theproblem\u00adatioperationsare,ingeneral,thosewheretheinteration \nwith()isnotexpliitlyspeifed.Forinstane,itisnot learhowtoderivethepromotionofallthroughthestate monadtransformer. \n datactxmabOBCC(a-mb-mb)(mb) ViCBCC(a-CUTmi-CUTmi)(CUTmi)(ctxmib) typeCUTmaVbctxmab-mb instane(Monadm)=Monad(CUTm)where \nreturnatxo-asetxoofOBCCCBCCftx-aftx  f. f. mktxo-asetxoofOBCCf-m(OBCC(a-ka(OBCC))f)  f. f. CBCCftx-m(CBCC(a-kaCBCC)ftx) \n  instane(Monadm)=Baktr(CUTm)where falsetxo-asetxoofOBCC  CBCCftx-ftx mI ntxo-asetxoofOBCCf-m(OBCC(n(OBCCf))) \n CBCCftx-m(CBCC(nCBCCf)tx) instane(Monadm)=Cut(CUTm)where !txo-asetxoofOBCC ()(fail\"false\") CBCCftx-()falsetx \n allmtxo-m(CBCConsfalsetxo) instaneTransformerCUTwhere promotemtxo-asetxoofOBCCCBCCftx-ma-aftx  observemm(OBCC(af-returna)(fail\"false\")) \n Figure10:Aontext\u00adpassingimplementationofCUT. 7. ACKNOWLEDGMENTS Iwouldliketothankfouranonymousrefereesfortheir \nvaluableomments. 8. REFERENCES [1]M.Billaud.Simpleoperationalanddenotational semantisforPrologwithut.TheoretialComputer \nSiene,71(2):193.208,Marh1990. [2]R.Bird.IntrodutiontoFuntionalProgramming usingHaskell.PrentieHallEurope,London,2nd \nedition,1998. [3]A.deBruinandE.deVink.Continuationsemantis forprologwithut.InJ.Di azandF.0rejas,editors, \nProeedingsoftheInternationalJointConfereneon TheoryandPratieofSoftwareDevelopment:Vol.1, LNCS351,pages178.192.Springer\u00adVerlag,1989. \n[4]N.DershowitzandJ.\u00adP.Jouannaud.Rewritesystems. InJ.vanLeeuwen,editor,HandbookofTheoretial ComputerSiene,VolumeB:FormalModelsand \nSemantis,hapter6,pages243.320.ElsevierSiene PublishersB.V.(NorthHolland),1990. [5]R.Hinze.Prolog'sontrolonstrutsinafuntional \nsettingAxiomsandimplementation.International JournalofFoundationsofComputerSiene,2000.To appear. [6]J.Hughes.Thedesignofapretty\u00adprintinglibrary.In \nJ.JeuringandE.Meijer,editors,AdvanedFuntional Programming,LNCS925,pages53.96. Springer\u00adVerlag,1995. [7]M.P.JonesandL.Duponheel.Composingmonads. \nTehnialReportYALEU/DCS/RR\u00ad1004,Department ofComputerSiene,YaleUniversity,Deember1993. [8]K.LaauferandM.0dersky.AnextensionofMLwith \nfrst\u00adlassabstrattypes.InProeedingsofthe1992 ACMWorkshoponMLanditsAppliations,San Franiso,California,pages78.91.ACM\u00adPress,1992. \n[9]S.Liang,P.Hudak,andM.Jones.Monad transformersandmodularinterpreters.InProeedings ofthe21stACMSymposiumonPriniplesof \nProgrammingLanguages,SanFraniso,California, pages333.343.ACM\u00adPress,1995. [10]E.Meijer.CalulatingCompilers.PhDthesis, \nNijmegenUniversity,1992. [11]E.Moggi.Anabstratviewofprogramming languages.TehnialReportECS\u00adLFCS\u00ad90\u00ad113, \nDepartmentofComputerSiene,Edinburgh University,1990. [12]E.Moggi.Notionsofomputationandmonads. InformationandComputation,93(1):55.92,1991. \n[13]S.PeytonJonesandJ.Hughes,editors.Haskell98 ANon\u00adstrit,PurelyFuntionalLanguage,February 1999.Availablefrom \nhttp://www.haskell.org/definition/. [14]L.SterlingandE.Shapiro.TheArtofProlog: AdvanedProgrammingTehniques.TheMITPress, \n1986. [15]P.Wadler.Comprehendingmonads.InProeedingsof the1990ACMConfereneonLISPandFuntional Programming,Nie,pages61.78.ACM\u00adPress,1990. \n[16]P.Wadler.Theesseneoffuntionalprogramming.In Proeedingsofthe19thACMSymposiumon PriniplesofProgrammingLanguages,SanteFe,New \nMexio,pages1.14.ACM\u00adPress,1992. [17]P.Wadler.Monadsforfuntionalprogramming.In J.JeuringandE.Meijer,editors,AdvanedFuntional \nProgramming,LNCS925,pages24.52. Springer\u00adVerlag,1995.   \n\t\t\t", "proc_id": "351240", "abstract": "In a paper about pretty printing J. Hughes introduced two fundamental techniques for deriving programs from their specification, where a specification consists of a signature and properties that the operations of the signature are required to satisfy. Briefly, the first technique, the term implementation, represents the operations by terms and works by defining a mapping from operations to observations --- this mapping can be seen as defining a simple interpreter. The second, the context-passing implementation, represents operations as functions from their calling context to observations. We apply both techniques to derive a backtracking monad transformer that adds backtracking to an arbitrary monad. In addition to the usual backtracking operations --- failure and nondeterministic choice --- the prolog cut and an operation for delimiting the effect of a cut are supported.", "authors": [{"name": "Ralf Hinze", "author_profile_id": "81332504302", "affiliation": "Institut F&#252;r Informatik III, Universit&#228;t Bonn, R&#246;merstra&#946;e 164, 53117 Bonn, Germany", "person_id": "PP39073187", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/351240.351258", "year": "2000", "article_id": "351258", "conference": "ICFP", "title": "Deriving backtracking monad transformers", "url": "http://dl.acm.org/citation.cfm?id=351258"}