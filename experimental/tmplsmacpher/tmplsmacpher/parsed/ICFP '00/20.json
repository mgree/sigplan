{"article_publication_date": "09-01-2000", "fulltext": "\n Recursive Subtyping Revealed Functional Pearl Vladimir Gapeyev Michael Y. Levin Benjamin C. Pierce Department \nof Computer and Information Science University of Pennsylvania fvgapeyev,milevin,bcpierceg@cis.upenn.edu \nABSTRACT Algorithmsforcheckingsubtypingbetweenrecursivetypes lieatthecoreofmanyprogramminglanguageimplementa\u00adtions.Butthefundamentaltheoryofthesealgorithmsand \nhowtheyrelatetosimplerdeclarativespecifcationsisnot widelyunderstood,dueinparttothedifcultyoftheavail\u00adableintroductionstothearea.Thistutorialpaperofersan \n\\end-to-end\"introductiontorecursivetypesandsubtyping algorithms,frombasictheorytoefcientimplementation, \nsetintheunifyingmathematicalframeworkofcoinduction. 1. INTRODUCTION Recursivelydefnedtypesinprogramminglanguagesand \nlambda-calculicomeintwodistinctvarieties.Consider,for example,thetypeXdescribedbytheequation X=Nat!(NatxX): \nAnelementofXisafunctionthatmapsanumbertoapair consistingofanumberandafunctionofthesameform.This typeisoftenwrittenmoreconciselyastX.Nat!(NatxX). \nAvarietyoffamiliarrecursivetypessuchaslistsandtrees canbedefnedanalogously. Intheiso-recursiveformulation,thetype \ntX:Nat!(NatxX)isconsideredisomorphictoitsone\u00adstepunfolding,Nat!(Natx(tX.Nat!(NatxX))).The termlanguageprovidesapairofbuilt-incoercionfunctions \nforeachrecursivetypetX.T, unfold2tX.T!fX!7tX.TgT fold2fX7!tX.T !tX.TgT witnessingtheisomorphism(asusual,fX!7SgTdenotesthe \nsubstitutionofSforfreeoccurrencesofXinT). Intheequi-recursiveformulation,ontheotherhand, arecursivetypeanditsone-stepunfoldingareconsidered \nequivalent|interchangeableforallpurposes.Inefect,the equi-recursivetreatmentviewsatypeliketX.Nat!(NatxX) \nPermission to make digital or hard copies of all or part of this work for personal or classroom use is \ngranted without fee provided that copies are not made or distributed for pro.t or commercial advantage \nand that copies bear this notice and the full citation on the .rst page. To copy otherwise, to republish, \nto post on servers or to redistribute to lists, requires prior speci.c permission and/or a fee. ICFP \n00, Montreal, Canada. Copyright 2000 ACM 1-58113-202-6/00/0009 ..$5.00 asmerelyanabbreviationfortheinfnitetreeobtainedby \nunrollingtherecursion\\outtoinfnity\":1 ! Nat x Nat ! Nat x Nat Theequi-recursiveviewcanmaketermseasiertowrite, \nsinceitsavesannotatingprogramswithfoldandunfold coercions,butitraisessometrickyproblemsforthecom\u00adpiler,whichmustdealwiththeseinfnitestructuresandop\u00aderationsonthemintermsofappropriatefniterepresen\u00adtations.Moreover,inthepresenceoftheseinfnitetypes, \neventhedefnitionsofotherfeaturessuchassubtyping canbecomehardtounderstand.Forexample,suppos\u00adingthatthetypeEvenisasubtypeofNat,whatshould \nbetherelationbetweenthetypestX.Nat!(EvenxX)and tX.Even!(NatxX)? Thesimplestwaytothinkthroughsuchquestionsisoften \ntoviewthem\\inthelimit.\"Inthepresentexample,the elementsinhabitingbothtypescanbethoughtofassim\u00adplereactiveprocesses:givenanumber,theyreturnanother \nnumberplusanewprocessthatisreadytoreceiveanother number,andsoon.Processesbelongingtothefrsttype alwaysyieldevennumbersandarecapableofacceptingar\u00adbitrarynumbers.Thosebelongingtothesecondtypeyield \narbitrarynumbers,butexpectalwaystobegivenevennum\u00adbers.Theconstraintsbothonwhatargumentsthefunction mustacceptandonwhatresultsitmayreturnaremore \ndemandingforthefrsttype,sointuitivelyweexpectthe frsttobeasubtypeofthesecond.Wecandrawapicture summarizingourcalculationsasfollows: \n1Thetwodiferentformulationsofrecursivetypeshavebeen aroundsincethebeginning,butthepleasantlymnemonic \nterms\\iso-recursive\"and\\equi-recursive\"arearelatively newcoinage,duetoCrary,Harper,andPuri[9]. ... .: \n justarrowtypes,binaryproducts,andamaximalToptype. Additionaltypeconstructorssuchasrecords,variants,etc., \n!!  canbeaddedwithnochangestothebasictheory.Bind\u00adingconstructssuchasuniversalandexistentialquantifers \n:. .: xx canalsobeformulatedinthesameframework[11],butthey !! aretrickier,sincetheyrequireworkingwithinfnitetrees \n\\modulorenamingofboundvariables.\"Constructssuch astypeoperatorsthatintroducenontrivialequivalencesbe\u00ad \ntweentypeexpressionsposeadditionalproblems.  xx Nopreviousunderstandingofthemetatheoryofrecur- Even \n... Nat ... sivetypesorbackgroundinthetheoryofcoinductionisre\u00adquired,thoughthedevelopmentwillassumeacertaindegree \nCansuchargumentsbemadeprecise?Indeedtheycan. Thebasicideascanbefoundinseveralplaces,goingback toAmadioandCardelli'scomprehensivestudy[3],which \nofmathematicalsophisticationandsomefamiliaritywith typesystemsandsubtyping.  2. INDUCTION AND COINDUCTION \n remainsthestandardreferenceinthearea.Unfortunately, theavailableliteratureisnotasfriendlytonewcomersas \nmightbewished.Morerecenttreatmentstendtoberather condensed,assumingthatthereaderisalreadyfamiliarwith \nsomeoftherelevantintuitions.Ontheotherhand,Amadio andCardelli'soriginalpaper,whilecomplete,isalsoquite \ncomplexand,insometechnicalrespects,beginningtobe slightlydated.Moreefcientsubtypingalgorithmsarenow known(e.g.,[15,6,14]).Also,itisnowwidelyagreed \nthatframingdefnitionsandproofsintermsofcoinduction (ratherthanlimitsofsequencesofapproximations)substan\u00adtiallysimplifesbothintuitionsandformalities. \nOurpurposeinthistutorialisnottoannouncenewre\u00adsults,butrathertoformulateknowntechniquesaslucidlyas possible,beginningfromfundamentaldefnitionsandlead\u00ading,bysimplesteps,toefcientalgorithmsforcheckingsub\u00adtyping.Wealsotrytomakeclear,ateverypoint,theanal\u00adogybetweenthecoinductivestructureswedefneandthose \nfoundinthefamiliar,inductiveworldoffnitetypesand ordinarysubtyping. Webeginbyreviewingthebasictheoryofinductiveand \ncoinductivedefnitionsandtheirassociatedproofprinciples (Section2).Sections3and4instantiatethisgeneraltheory \nforthecaseofsubtyping,defningboththefamiliarinduc\u00adtivesubtypingrelationonfnitetypesanditscoinductive \ngeneralizationtoinfnitetypes.Section5makesabriefde\u00adtourtoconsidersomeissuesconnectedwiththeruleoftran\u00adsitivity(anotorioustroublemakerinsubtypingsystems). \nSection6derivessimplealgorithmsforcheckingmember\u00adshipininductivelyandco-inductivelydefnedsets;Section7 \nconsidersmorerefnedalgorithms.Thesealgorithmsareap\u00adpliedtosubtypingfortheimportantspecialcaseof\\regular\" \ninfnitetreesinSection8.Section9introducest-typesas afnitenotationforrepresentingregulartreesandpresents \natheoremthatthemorecomplex(butfnitelyrealizable) subtypingrelationont-typescoincideswiththeordinary coinductivedefnitionofsubtypingbetweenregulartrees. \nSection10bringstogetheralltheprecedingmaterialtode\u00adriveaconcretesubtypingalgorithmfort-typesandproves \nitstermination.Finally,Section11discussesawell-known simplifedversionofthealgorithmandshowsthatithasex\u00adponentialbehaviour.Severalsectionsareaccompaniedby \nexercisesforthereader;solutionstothesecanbefoundat theendofthepaper. Intheinterestofbrevity,someofthelessinteresting \nproofsareomittedinthisshortversion. Wedealwithaverysimplelanguageoftypes,containing AssumewehavefxedsomeuniversalsetUasthedomain \nofdiscourseforourinductiveandcoinductivedefnitions.U representsthesetof\\everythingintheworld\";theroleofan \ninductiveorcoinductivedefnitionwillbetopickoutsome subsetofU.(Lateron,wearegoingtochooseUtobethe setofallpairsoftypes,sothatsubsetsofUarerelations \nontypes.Butforthepresentdiscussion,anarbitrarysetU willdo.)ThepowersetofU,i.e.,thesetofallthesubsets \nofU,iswrittenP(U). 2.1Defnition:AfunctionF2P(U)!P(U)ismono\u00adtoneifX.YimpliesF(X).F(Y). Inwhatfollows,wewillassumethatFissomemonotone \nfunctiononP(U).WerefertoFasageneratingfunction. 2.2Defnition:LetXbeasubsetofU. 1.XisF-closedifF(X).X. \n2.XisF-consistentifX.F(X). 3.XisafxedpointofFifF(X)=X. Ausefulintuitionforthesedefnitionsistothinkoftheel\u00adementsofUassomesortofstatementsorassertions,andof \nFasrepresentinga\\justifcation\"relationthat,givensome setofstatements(premises),tellsuswhatnewstatements \n(conclusions)followfromthem.AnF-closedset,then,is onethatcannotbemadeanybiggerbyaddinginnewel\u00adementsjustifedbyF|italreadycontainsallconclusions \njustifedbyitsmembers.AnF-consistentsetisonethat is\\self-justifying\":everyassertioninitisjustifedbyother \nassertionsthatarealsoinit.AfxedpointofFincludes preciselythejustifcationsrequiredbyitsmembers,thecon\u00adclusionsthatfollowfromitsmembers,andnothingelse. \n2.3Example:Considerthefollowinggeneratingfunction onthethree-elementuniverseU=fa,b,cg: E1(0)=fcg E1(fag)=fcg \nE1(fbg)=fcg E1(fcg)=fb,cg E1(fa,bg)=fcg E1(fa,cg)=fb,cg E1(fb,cg)=fa,b,cg E1(fa,b,cg)=fa,b,cg ThereisjustoneE1-closedset|fa,b,cg|andfourE1 \n\u00adconsistentsets|0,fcg,fb,cg,fa,b,cg. Thisfunctioncanberepresentedcompactlybyacollection ofinferencerules: \ncbc cba Eachinferencerulestatesthatifalloftheelementsabove thebarareintheinputset,thentheelementbelowisin \ntheoutputset.(Weoftenomitthebarwhenarulehasno premises.) 2.4Theorem[Knaster-Tarski[20]]:Theintersectionof \nallF-closedsetsistheleastfxedpointofF.Theunionof allF-consistentsetsisthegreatestfxedpointofF. 2.5Defnition:TheleastfxedpointofFiswrittentF. \nThegreatestfxedpointofFiswrittenF. NotethattFitselfisF-closed(hence,itisthesmallest F-closedset)andthatFisF-consistent(hence,itisthe \nlargestF-consistentset). 2.6Example:ForthesamplegeneratingfunctionE1 shownabove,wehavetE1 =E=fa,b,cg: \n1 2.7Exercise:SupposeageneratingfunctionE2onthe universefa,b,cgisdefnedbythefollowinginferencerules: \ncab abc WriteoutthesetofpairsintherelationE2explicitly,aswe didforE1above.ListalltheE2-closedandE2-consistent \nsets.WhataretE2andE2? AnimmediateconsequenceoftheKnaster-Tarskitheorem isthefollowingpairoffundamentalreasoningprinciples: \n2.8Corollary[of2.4]: 1.Principleofinduction:IfXisF-closed,thentF X. 2.Principleofcoinduction:IfXisF-consistent,then \nXF. Theintuitionbehindtheseprinciplescomesfromthinking ofthesetXasapredicate(representedasitscharacteristic \nset,thesubsetofUforwhichthepropertyistrue).Then showingthatpropertyXistrueofanelementxisthesame asshowingthatxisinthesetX.Now,theinductionprin\u00adciplesaysthat,ifthereisapropertywhosecharacteristic \nsetXisclosedunderF(i.e.,thepropertyispreservedby F),thenthepropertyistrueofalltheelementsofthein\u00adductivelydefnedsettF.Thecoinductionprinciple,onthe \notherhand,tellsushowtoprovethatanelementxisinthe coinductivelydefnedsetF.Toprovex2F,itsufces tofndasetXsuchthatx2XandXisF-consistent. \nWewillusetheprinciplesofinductionandcoinduction heavilythroughoutthepaper.(Wewillnotwriteoutev\u00aderyinductiveargumentintermsofgeneratingfunctionsand \npredicates;intheinterestofbrevity,wewillsometimesfall backonfamiliarabbreviationssuchasstructuralinduction.) \n 3. FINITE AND INFINITE TYPES Havingintroducedcoinduction,ournextjobwillbetoin\u00adstantiatethesedefnitionswiththespecifcsofsubtyping. \nBeforewecandothis,though,weneedtodefneprecisely howtoviewtypesas(fniteorinfnite)trees. Forbrevity,wedealinthispaperwithjustthreetype \nconstructors:!,x,andTop.Wedefnetypesas(possibly infnite)treeswithnodeslabeledbyoneofthesymbols!, x,orTop.Thedefnitionisspecializedtoourpresentneeds; \nforageneraltreatmentofinfnitelabeledtreessee[8]. * Wewritef1,2gforthesetofsequencesof1sand2s.The emptysequenceiswritten.,andstandsforkcopiesofi. \nik Ifnandaaresequences,thenn.adenotestheconcatenation ofnanda. 3.1Defnition:Atreetype(or,simply,atree)isa \n* partialfunctionT2f1,2g*f!,x,Topgsatisfyingthe followingconstraints: .T(.)isdefned .ifT(n.a)isdefnedthenT(n)isdefned \n.ifT(n)=!orT(n)=xthenT(n.1)andT(n.2)are defned .ifT(n)=TopthenT(n.1)andT(n.2)areundefned. AtreetypeTisfniteifdom(T)isfnite.Thesetofalltree \ntypesisdenotedT;itssubset,thesetofallfnitetreetypes, isTf. Thesetoffnitetypescanbedefnedmorecompactlyby \nagrammar: T::=Top TxT T!T TheforceofsuchagrammaristhatthesetoftypesTis theleastfxedpointoftheevidentgeneratingfunction.The \nuniverseofthisgeneratingfunctionisthesetofallfnite andinfnitelabeledtrees(whichcanbedefnedalongsimilar \nlinesto3.1).Thefullsetoftreetypescanbederivedfrom thesamegeneratingfunctionbytakingthegreatestfxed pointinsteadoftheleastfxedpoint. \nFornotationalconvenience,wewriteTopforthetreeT suchthatT(.)=Top.Similarly,whenT1andT2aretrees, wewriteT1xT2forthetreewith(T1xT2)(.)=xand \n(T1xT2)(i.n)=Ti(n)andT1!T2forthetreesuchthat (T1!T2)(.)=!and(T1!T2)(i.n)=Ti(n)fori=1,2. 3.2Example:Thetypeexpression(TopxTop)!Topde\u00adnotesthefnitetreetypeTdefnedbythefunctionwith \nT(.)=!andT(1)=xandT(2)=T(1.1)=T(1. 2)=Top.Preciseuseofsimilarnotationfornon-fnite typesisproblematic,sincethecorrespondinglinearterms \nwouldbeinfnitelylong.Inexamplesweinformallyuse ellipsisforthispurpose.Forexample,theexpression Top!(Top!(Top!...))correspondstothetypeTdefned \nbyT(2k)=!,forallk.0,andT(2k.1)=Top,forall k.0. 4. SUBTYPING Wedefnesubtypingrelationsonfnitetreetypesandon \ntreetypesingeneralasleastandgreatestfxedpoints,re\u00adspectively,ofmonotonefunctionsoncertainuniverses.For \nsubtypingonfnitetreetypestheuniverseisthesetTfxTf ofpairsoffnitetreetypes;ourgeneratingfunctionswill \nmapsubsetsofthisuniverse|thatis,relationsonTf|to othersubsets,andtheirfxedpointswillalsoberelationson \nTf.ForsubtypingontreestheuniverseisTxT,pairsof arbitrary(fniteorinfnite)trees. 4.1Defnition[Finitesubtyping]:Twofnitetreetypes \nSandTareinthesubtypingrelation(\\SisasubtypeofT\")if (S,T)2tSf,wherethemonotonefunctionSf2(TfxTf)! (TfxTf)isdefnedby \nSf(R)=f(T,Top)jT2Tfg [f(S1xS2,T1xT2)j(S1,T1),(S2,T2)2Rg [f(S1!S2,T1!T2)j(T1,S1),(S2,T2)2Rg: Thisgeneratingfunctionpreciselycapturestheefectofthe \nusualdefnitionofthesubtypingrelationbyacollectionof inferencerules: T.:Top S1.:T1S2.:T2 S1xS2.:T1xT2 \nT1.:S1S2.:T2 S1!S2.:T1!T2 Intheserules,thepairoftypes(S,T)iswrittenS.:T.The statementSTabovethelineinthesecondandthirdrules \n.: shouldbereadas\\ifthepair(S,T)isintheargumentto Sf \"andbelowthelineas\\then(S,T)isintheresult.\" 4.2Defnition[Infnitesubtyping]:TwotreetypesS \nandTareinthesubtypingrelationif(S,T)2S,where S2(TxT)!(TxT)isdefnedby: S(R)=f(T,Top)jT2Tg [f(S1xS2,T1xT2)j(S1,T1),(S2,T2)2Rg \n[f(S1!S2,T1!T2)j(T1,S1),(S2,T2)2Rg: Notethattheinferencerulepresentationofthisrelationis preciselythesameasfortheinductiverelationabove:all \nthatchangesisthatweconsideralargeruniverseoftypes andtakeagreatestinsteadofaleastfxedpoint. 4.3Exercise:CheckthatSisnotthewholeofTxTby \nexhibitingapair(S,T)thatisnotinS. 4.4Exercise:Canyoufndapairoftypes(S,T)thatare relatedbyS,butnotbytS?Whataboutapairoftypes \n(S,T)thatarerelatedbySf,butnotbytSf? Onefundamentalfactaboutthesubtyperelation|tran\u00adsitivity|shouldbecheckedrightaway.(Ifthesubtyperela\u00adtionwerenottransitive,thecrucialpropertyofpreservation \noftypesunderreductionwouldimmediatelyfail.Tosee this,supposethatthereweretypesS,T,andUwithS<:T andT<:UbutnotS<:U.LetsbeavalueoftypeSandf \nafunctionoftypeU!Top.Thentheterm(Ax:T.fx)s canbetyped,usingtheruleofsubsumptiononceforeach application,butreducesinonesteptotheill-typedterm \nfs.) 4.5Defnition:Thetransitiveclosureofabinaryre\u00adlationR.UxUistheleastrelationQcontainingRand closedundertransitivity:if(S,U)2Qand(U,T)2Q,then \n(S,T)2Q.Equivalently,thetransitiveclosureofRisthe leastfxedpoint,tTCR,ofthegeneratingfunction TCR(X)= \nR[f(S,T)j(S,U),(U,T)2XforsomeU2Ug: R+ ThetransitiveclosureofRiswritten. 4.6Lemma:IfR.TxTisS-consistent,thensoisits \ntransitiveclosure. R+ 4.7Corollary:Sistransitive. Proof:SinceSisS-consistent,itstransitiveclosure,(S)+ \n, isS-consistentbyLemma4.6.Therefore,(S)+Sby theprincipleofcoinduction.SinceS(S)+bythedef\u00adnitionoftransitiveclosure,wehaveS=(S)+ \n.Thelatter relationisobviouslytransitive. 4.8Exercise:Showthatthesubtyperelationisalsore\u00adfexive. 5. \nA DIGRESSION ON TRANSITIVITY Standardformulationsofinductivelydefnedsubtypingrela\u00adtionsgenerallycomeintwoforms:adeclarativepresentation \nthatisoptimizedforreadabilityandanalgorithmicpresen\u00adtationthatcorrespondsmoreorlessdirectlytoanimple\u00admentation.Insimplesystems,thetwoaregenerallysimilar; \ninmorecomplexsystems,theycanbequitediferent,and provingthatthetwopresentationsdefnethesamerelation ontypescansometimesposeasignifcantchallenge. \nOneofthemostdistinctivediferencesbetweendeclara\u00adtiveandalgorithmicpresentationsisthatdeclarativepresen\u00adtationsgenerallyincludeanexplicitruleoftransitivity|if \nS<:UandU<:TthenS<:T|whilealgorithmicsystemsnever do.Thisruleisuselessinanalgorithm,sinceapplyingitin \nagoal-directedmannerwouldinvolveguessingU. Theruleoftransitivityplaystwousefulrolesindeclar\u00adativesystems.First,itreassuresthereaderthatthesub\u00adtyperelationis,indeed,transitive.Inalgorithmicpresenta\u00adtions,transitivityisnotobvious,butmustbeproved,aswe \ndidabove.Second,transitivityoftenallowsotherrulesto bestatedinsimpler,moreprimitiveforms;inalgorithmic \npresentations,thesesimplerulesneedtobecombinedinto heaviermega-rulesthattakeintoaccountallpossiblecom\u00adbinationsofthesimplerones.Forexample,inthepresence \noftransitivity,therulesfor\\depthsubtyping\"withinrecord felds,\\widthsubtyping\"byaddingnewfelds,and\\permu\u00adtation\"offeldscanbestatedseparately,makingthemall \neasiertounderstand.Withouttransitivity,thethreerules mustbemergedintoasingleruletakingwidth,depth,and \npermutationintoaccountallatonce. Interestingly,theviabilityofadeclarativepresentation witharuleoftransitivityisaconsequenceofa\\trick\"that \ncanbeplayedwithinductive,butnotcoinductive,defni\u00adtions.Toseewhy,observethattransitivityisaclosure property|itdemandsthatthesubtyperelationbeclosed \nunderthetransitivityrule.Sincethesubtyperelationitself isdefnedastheclosureofasetofrules,wecanachieve \nclosureundertransitivitysimplybyaddingittothemain subtypingrules.Thisisageneralpropertyofinductivedef\u00adinitionsandclosureproperties:giventworelations,each \ndefnedinductivelyfromsetsofinferencerules,theunionof thetwosetsofruleswillgeneratetheleastrelationthatis \nclosedunderbothsetsofrules.Thisfactcanbeformulated moreabstractlyintermsofgeneratingfunctions: 5.1Proposition:SupposeFandGaremonotonefunc\u00adtions,andletH(X)=F(X)[G(X).ThentHisthe \nsmallestsetthatisbothF-closedandG-closed. Unfortunately,thistrickdoesnotworkwithcoinductive defnitions.Asthefollowingexerciseshows,addingtransi\u00adtivitytotherulesgeneratingacoinductivelydefnedrelation \ndoesnotgiveustherelationwewant. 5.2Exercise:Showthatthegeneratingfunction Str (R)=S(R) [f(S,T)j(S,U),(U,T)2RforsomeU2Tg \nisdegenerate,inthesensethatitsgreatestfxedpointisthe totalrelationTxT. Inthecoinductivesetting,itappearswearestuckwith \nalgorithmicpresentationsandmega-rules. 6. MEMBERSHIP CHECKING Wenowturnourattentiontothequestionofhowtodecide, \ngivenageneratingfunctionFonsomeuniverseUandan elementx2U,whetherornotxfallsinthegreatestfxed pointofF. \nAgivenelementx2Ucan,ingeneral,begeneratedbyF inmanyways.Thatis,therecanbemorethanonesetX Usuchthatx2F(X).CallanysuchsetXa\\generating \nset\"forx.Because,duetomonotonicityofF,anysuperset ofageneratingsetforxisageneratingsetforx,itmakes sensetorestrictattentiontominimalgeneratingsets.Wego \nevenfurtherandconsidertheclassof\\invertible\"functions, whereeachxhasatmostoneminimalgeneratingset. 6.1Defnition:AgeneratingfunctionFissaidtobein\u00advertibleif,forallx2U,thecollectionofsets \nGx =fX.Ujx2F(X)g eitherisemptyorcontainsauniquesmallestmember.For aninvertibleF,thepartialfunctionsupportF2U*P(U) \nisdefnedasfollows2: supportF(x)= { XifX2Gxand8X02Gx:XX0 \"ifGx =0 Thefunctionisliftedtosetsasfollows: \nsupportF(X)= {S x2XsupportF(x)if8x2X:supportF(x)# \" otherwise WhenFisclearfromcontext,wewilloftenomitthesub\u00adscriptinsupportF(andotherF-basedfunctionsdefned \nlater). Fromnowon,wefocusourattentiononinvertiblegener\u00ad atingfunctions. 6.2Defnition:Anelementxissupportedifsupport(x)is \ndefned;otherwise,xisunsupported.Asupportedelement isgroundifsupport(x)=0. Notethatanunsupportedelementxcannotappearin \nF(X)foranyX,whileagroundxisineveryF(X). Aninvertiblegeneratingfunctioncanbevisualizedasa \\supportgraph\".Forexample,Figure1defnesafunction \nEontheuniversefa,b,c,d,e,f,g,h,igbyshowingwhich elementsareneededtosupportagivenelementoftheuni\u00adverse:foragivenx,itssupport(x)consistsofallyforwhich \nthereisanarrowfromxtoy.Anunsupportedelementis denotedbyaslashedcircle.Inthisexample,iistheonlyun\u00adsupportedelementandgistheonlygroundelement.(Note \nthat,accordingtoourdefnition,hissupported.) 6.3Exercise:Writeoutasetofinferencerulescorrespond\u00adingtothisfunction,aswedidinExample2.3.Checkthat \n2Wewrite\"throughoutthepapertomean\\undefned,\"and f(x)#tomean\\f(x)isdefned.\" h Figure1:Asamplesupportfunction \nE(fb,cg)=fg,a,dg,thatE(fa,ig)=fg,hg,andthatthe setsofelementsmarkedinthefgureastEandEare indeedtheleastandthegreatestfxedpointsofE. \nLookingattheexampleofFigure1mightleadustocon\u00adjecturethatanelementxisinthegreatestfxedpointif andonlyifnounsupportedelementisreachablefromx. \nThissuggestsanalgorithmicstrategyforcheckingwhether xisinF:enumerateallelementsreachablefromxviathe supportfunction;returnfailureifanunsupportedelement \noccursintheenumeration;otherwise,succeed.Observe, however,thattherecanbecyclesofreachabilitybetween theelements,andtheenumerationprocedureshouldtake \nsomeprecautionsagainstfallingintoaninfniteloop. 6.4Defnition:SupposeFisaninvertiblefunction.Defne thefunctiongfpF(orjustgfp)asfollows: \ngfp(X)=ifsupport(X)\",thenfalse elseifsupport(X)X,thentrue elsegfp(support(X)[X). Intuitively,gfpstartsfromXandusessupporttoenrichit \nuntileitheritbecomesconsistentoranunsupportedelement isfound. Theextensionofgfptosingleelementsisgivenby \ngfp(x)=gfp(fxg). 6.5Exercise:AnotherobservationthatisclearfromFig\u00adure1isthatanelementxofFisnotamemberoftFif \nxparticipatesinacycleinthesupportgraph(orthereisa pathfromxtoanelementthatparticipatesinacycle).Is theconversealsotrue?IfxisamemberofFbutnottF, \nisitnecessarilythecasethatxleadstoacycle? Therestofthissectionisdevotedtoprovingcorrectness andterminationofgfp.(First-timereadersmaywantto \nskipthismaterialandjumptothenextsection.)Westart byobservingacoupleofpropertiesofthesupportfunction. \n6.6Lemma:XF(Y)ifsupport(X)Y. 6.7Lemma:SupposePisafxedpointofF.ThenXP ifsupport(X)P. Nowwecanprovepartialcorrectnessofgfp. \n6.8Theorem: 1.Ifgfp(X)=true,thenXF. 2.Ifgfp(X)=false,thenX6F. Proof:Theproofofeachclauseproceedsbyinductionon \ntherecursivestructureofarunofthealgorithm. 1.Fromthedefnitionofgfp,itiseasytoseethat therearetwocaseswheregfp(X)canreturntrue. \nIfgfp(X)=truebecausesupport(X)X,then, byLemma6.6,wehaveXF(X),i.e.,XisF\u00adconsistent;thus,XFbythecoinductionprin\u00adciple.Ontheotherhand,ifgfp(X)=truebecause \ngfp(support(X)[X)=true,then,bytheinduction hypothesis,support(X)[XF,andsoXF. 2.Letgfp(X)=falsebecausesupport(X)isundefned. \nThenX6FbyLemma6.7.Letgfp(X)=false becausegfp(support(X)[X)=false.Bytheinduction hypothesis,support(X)[X6F.Equivalently,X6 \nForsupport(X)6F.Eitherway,X6F(using Lemma6.7inthesecondcase). Wearegoingtospecifyasufcientterminationcondition \nforgfpbygivingaclassofgeneratingfunctionsforwhich thealgorithmterminates.Todescribetheclass,weneed someadditionalterminology. \n6.9Defnition:ForageneratingfunctionFandanele\u00admentx2U,thesetofpredecessorsofxis { 0ifsupportF(x)\" predF(x)=supportF(x)ifsupportF(x)# \nanditsextensiontosetsX.Uis [ predF(X)=predF(x): x2X ThesetofallelementsreachablefromasetXviathe supportFisdefnedbythefollowingfunction \n[ reachableF(X)=predn(X): F n.0 anditsextensiontosingleelementsx2Uis reachableF(x)=reachableF(fxg): Wesaythatanelementy2UisF-reachablefroman \nelementxify2reachableF(x). 6.10Defnition:AgeneratingfunctionFissaidtobe fnitestateifreachableF(x)isfniteforeachx2U. \nFinitestatefunctionsformaclassofgeneratingfunctions forwhichgfpterminates: 6.11Theorem:Ifreachable(X)isfnite,thengfp(X)is \ndefned.Consequently,ifFisfnitestate,thengfp(X)ter\u00adminatesforanyfniteX.U. Proof:Foreachpossiblerecursivecallgfp(Y)inthecall \ngraphgeneratedbytheoriginalinvocationgfp(X),wehave Yreachable(X).Moreover,Ystrictlyincreasesoneach call.Sincereachable(X)isfnite,m(Y)=jreachable(X)j; \njYjservesasaterminationmeasureforgfp. 7. MORE EFFICIENT ALGORITHMS Althoughthegfpalgorithmiscorrect,itisnotveryefcient, \nsinceithastorecomputethesupportofthewholesetX everytimeitmakesarecursivecall.Considerthefollowing traceofgfponthefunctionEfromFigure1. \ngfp(fag) =gfp(fa,b,cg) =gfp(fa,b,c,e,f,gg) =gfp(fa,b,c,e,f,g,dg) =true: Notethatthealgorithmrecomputessupport(a)fourtimes. \nWecanrefnethealgorithmtoeliminatethisredundantre\u00adcomputationbymaintainingasetAofassumptionswhose supportsetshavealreadybeenconsideredandasetXof \ngoalswhosesupporthasnotyetbeenconsidered. 7.1Defnition:SupposeFisaninvertiblefunction.De\u00adfnethefunctiongfpa \nasfollows(thesuperscript\\a\"isfor \\assumptions\"): gfpa(A,X)= ifsupport(X)\",thenfalse elseifX=0,thentrue \nelsegfpa(A[X,support(X)n(A[X)). Inordertocheckx2F,computegfpa(0,fxg). Thisalgorithmcomputesthesupportofeachelementat \nmostonce.Atracefortheaboveexamplelookslikethis: gfpa(0,fag) =gfpa(fag,fb,cg) =gfpa(fa,b,cg,fe,f,gg) =gfpa(fa,b,c,e,f,gg,fdg) \n=gfpa(fa,b,c,e,f,g,dg,0) =true: Thecorrectnessstatementforthisalgorithmisslightly moreelaboratethantheoneswesawintheprevioussection: \n7.2Proposition: 1.Ifsupport(A) A[X and gfpa(A,X ) = true, then A[X F . 2.Ifgfpa(A,X) = false, then X \n6 F . Tomakethemembershipcheckingalgorithmmoresimi\u00adlartotheknownimplemetationsofrecursivesubtyping,we \nmakemoremodifcations.First,theorderofcomputationis mademoreexplicitbycomputingsupportforoneelementat \natime.Second,westartusingnewlycomputedassumptions assoonastheybecomeavailablebythreadingthesetofas\u00adsumptionsthroughrecursivecalls.(Notethatthismakes \nthealgorithmnon-tail-recursive.) 7.3Defnition:GivenaninvertiblefunctionF,defnethe functiongfpt asfollows(\\t\"standsfor\\threading\")3: \ngfpt(A,x)= ifx2A,thenA elseifsupport(x)\",then\" else letx1,:::,xn =support(x)in letA0 =A[fxgin letA1 =gfpt(A0,x)in \n1 ::: letAn =gfpt(An;1,xn)in An. 3Weusethefollowingconventionforundefnedness:ifan expressionBisundefned,then\\letA=BinC\"isalso \ntakentobeundefned.Thisavoidstheneedtowriteexplicit \\exceptionhandling\"clausesforeveryrecursiveinvocation \nofgfpt . Tocheckx2F,computegfpt(0,x):iftheresultisaset ofassumptionsthenx2F;iftheresultisundefned,then \nx26F. Thecorrectnessstatementmustagainberefned,taking intoaccountthenon-tail-recursivenatureofthisformulation \nbypositinga\\stack\"Xofelementswhosesupportsmust stillbechecked. 7.4Proposition: 1.Ifgfpt(A,x)=A0 ,thenA[fxg.A0 \n. 2.ForallX,ifsupport(A)A[X[fxgandgfpt(A,x)= A0 ,thensupport(A0)A0[X. 3.Ifgfpt(A,x)\",thenx21F. 7.5Corollary:Ifgfpt(0,x)=A0 \n,thenx2F. Proof:Bythefrstpartoftheproposition,x2.Instan- A0 tiatingthesecondstatementofthepropositionwithX=0, \nweobtainsupport(A0)A0|thatis,A0isF-consistent,and soFbycoinduction. A0 Sinceallofthealgorithmsinthissectionexaminethe \nreachablesetinonewayoranother,theterminationcondi\u00adtionforallofthemisthesameasthatoftheoriginalgfp algorithm:theyterminateonallinputswhenFisfnite \nstate. 8. REGULAR TREES Atthispoint,wehavedevelopedgenericalgorithmsfor checkingmembershipinagreatestfxedpoint,andsepa\u00adratelyshownhowtodefnesubtypingbetweeninfnitetrees \nasthegreatestfxedpointofaparticulargeneratingfunc\u00adtionS.Theobviousnextstepistoinstantiateoneofthe algorithmswithS.Ofcourse,thisconcretealgorithmwill \nnotterminateonallinputs,sinceingeneralthesetofstates reachablefromagivenpairofinfnitetypescanbeinfnite. \nBut,asweshallseeinthissection,ifwerestrictourselvesto infnitetypesofacertainwell-behavedform,calledregular \ntypes,thenthesetsofreachablestatesareguaranteedto remainfniteandthesubtypecheckingalgorithmwillalways \nterminate. 8.1Defnition:AtreetypeSisasubtreeofatreetype TifScanbepresentedintheformS=Aa:T(n.a)forsome \nn.Wewritesubtrees(T)forthesetofallsubtreesofT. 8.2Defnition:AtreetypeT2Tisregularifsubtrees(T) isfnite,i.e.,Thasonlyfnitelymanydistinctsubtrees.The \nsetofregulartreetypesisdenotedbyTr. 8.3Examples: 1.Anyfnitetreetypeisregular,sincethenumberof subtreesisboundedbythenumberofnodes. \n2.Thenumberofdistinctsubtreesofatypecanbe strictlylessthanthenumberofnodes.Forexample, T=Top!(TopxTop)hasfvenodesbutonlythree \ndistinctsubtrees. 3.Someinfnitetreesareregular.Forexample,thetree T=Topx(Topx(Topx...)) hasjusttwodistinctsubtrees(TitselfandTop). \n4.Thetype T=Bx(Ax(Bx(Ax(Ax(Bx(Ax(Ax(Ax(Bx...) wherepairsofconsecutiveBsareseparatedbyincreas\u00adinglymanyAs,isnotregular.Notethat,becauseT \nisirregular,thesetreachable(T,T)containingallthe subtypingpairsneededtojustifythestatementT<:T isinfnite. \n8.4Observation:TherestrictionSrofStoregulartree typesisfnitestate. Thismeansthatwecanobtainadecisionprocedurefor \nthesubtyperelationbyinstantiatingoneofthemembership algorithmswithS.Ofcourse,inordertoimplementsuch adecisionprocedurewewouldneedtobeabletodecide \nwhentworegulartreesareequal(tocalculatetheunions,set equalityandmembership,etc.usedbythealgorithms).The \nt-notationinthenextsectioncanbeusedforthispurpose, butwewillgoastepfurther,showingdirectlyhowtobuild \nasubtypingalgorithmfort-types. 9. /-TYPES Wenowformalizethefnitet-notationforregulartypes. 9.1Defnition:LetXrangeoverafxedcountableset \nraw fX1,X2,:::goftypevariables.ThesetTmofrawt-types isthesetofexpressionsdefnedbythefollowinggrammar: \nT::=X Top TxT T!T tX.T Thesyntacticoperatortisabinder,andgivesrise,inthe standardway,tonotionsofboundandfreevariables,closed \nrawt-types,andequivalenceofrawt-typesuptorenaming ofboundvariables.FV(T)denotesthesetoffreevariablesof \narawt-typeT.Thecapture-avoidingsubstitutionfX7!SgT ofarawt-typeSforfreeoccurrencesofXinarawt-type Tisdefnedintheusualway. \nRawt-typeshavetoberestrictedalittletoachievea tightcorrespondencewithregulartrees:wewanttobeable to\\readof\"atreetypeastheinfniteunfoldingofagiven \nt-type,buttherearerawt-typesthatcannotbereasonably interpretedasrepresentationsoftreetypes.Thesetypes \nhavetheformtX.tX1...tXn.X,wheretheX1throughXnare distinctfromX.Forexample,considerT=tX.X.Unfolding ofTgivesTagain,sowecannotreadofanytreebyunfolding \nT.Thisleadsustothefollowingrestriction. 9.2Defnition:Arawt-typeTiscontractiveif,forany subexpressionofToftheformtX.tX1...tXn.S,thebodyS \nisnotX.Alternatively,arawt-typeiscontractiveifevery occurrenceofat-boundvariableinitisseparatedfromits \nbinderbyatleastone!orx. Arawt-typeiscalledsimplyat-typeifitiscontractive. Thesetoft-typesiswrittenTm. \nWhenTisat-type,wewritet-height(T)forthenumber oft-bindingsatthefrontofT. Thecommonunderstandingoft-typesasfnitenotation \nforinfniteregulartreetypesisformalizedbythefollowing functiontreeof. 9.3Defnition:Defnethefunctiontreeofmappingclosed \nt-typestotreetypesinductivelyasfollows: treeof(Top)(.)=Top treeof(T1!T2)(.)=! treeof(T1!T2)(i.n)=treeof(Ti)(n) \n treeof(T1xT2)(.)=x treeof(T1xT2)(i.n)=treeof(Ti)(n) treeof(tX.T)(n)=treeof(fX7tX.TgT)(n) ! Themappingisliftedtothepairsoftypesinthestandard \nway:treeof(S,T)=(treeof(S),treeof(T)). Toverifythatthisdefnitionisproper(i.e.,exhaustive andterminating),notethefollowing: \n1.Every\\recursivecall\"ontheright-handsidereduces thelexicographicsizeofthepair(jnj,t-height(T)):the casesforS!TandSxTreducejnjandthecasefortX.T \npreservesjnj,butreducest-height(T). 2.Allrecursivecallspreservecontractivenessandclosure oftheargumenttypes.Inparticular,thetypetX.Tis \ncontractiveandclosedifitsunfoldingfX7tX.TgT ! is.Thisjustifesthereferencetounfoldinginthedef\u00adnitionoftreeof(tX.T). \nThesubtypingrelationfortreetypeswasdefnedinSec\u00adtion4asthegreatestfxedpointofgeneratingfunctionS. Wearegoingtodefnesubtypingfort-typessimilarly,us\u00adingageneratingfunctionthat,togetherwithsubtypingrules \nusedinS,incorporatestherulesfort-types, S.:fX7!tX.TgT fX7!tX.SgS.:T and S.:tX.T tX.S.:T Belowisthefulldefnition. \n9.4Defnition:Twot-typesSandTareinthesubtyping relationif(S,T)2Sm,wherethemonotonefunctionSm2 P(TmxTm)!P(TmxTm)isdefnedby: \nSm(R)=f(S,Top)jS2Tmg [f(S1xS2,T1xT2)j(S1,T1),(S2,T2)2Rg [f(S1!S2,T1!T2)j(T1,S1),(S2,T2)2Rg [f(S,tX.T)j(S,fX7tX.TgT)2Rg \n![f(tX.S,T)j(fX7!tX.SgS,T)2R, T6Top,andT=tY.T1g: =6 (Notetheasymmetrybetweenthefnalandpenultimate clausesofSm,neededtomakeSminvertible.Otherwise,the \nclauseswouldoverlap.)Thesupportfunctioncorresponding toSmis: supportSm(S,T)= 8  0 ifT=Top  f(S1,T1),(S2,T2)gifS=S1xS2 \n  andT=T1xT2  f(T1,S1),(S2,T2)gifS=S1!S2 andT=T1!T2  f(S,fX7!tX.T1gT1)gifT=tX.T1  f(fX7!tX.S1gS1,T)gifS=tX.S1and \n T6tX.T1,T6 ==Top : \" otherwise. Thetwonotionsofsubtyping,onefortreetypesandthe otherfort-types,tightlycorrespondtoeachother,asthe \nfollowingtheoremshows. 9.5Theorem:Let(S,T)2TmxTm.Then(S,T)2Smif treeof(S,T)2S. 10. COUNTING SUBEXPRESSIONS \nInstantiatingthegenericalgorithmgfpt(7.3)withthespe\u00adcifcsupportfunctionsupportSmcorrespondingtothesub\u00adtyperelationont-types(9.4)yieldsthesubtypingalgorithm \nshowninFigure2.Section7showsthattheterminationof subtype(A,S,T)= if(S,T)2A,then A elseletA0 =A[(S,T)in \nifT=Top,then A0 elseifS=S1xS2andT=T1xT2,then letA1 =subtype(A0,S1,T1)in subtype(A1,S2,T2) elseifS=S1!S2andT=T1!T2,then \nletA1 =subtype(A0,T1,S1)in subtype(A1,S2,T2) elseifS=tX.S1,then subtype(A0,fX!7tX.S1gS1,T) elseifT=tX.T1,then \nsubtype(A0,S,fX7tX.T1gT1) ! else \" Figure2:Theconcretesubtypingalgorithm thisalgorithmwillbeguaranteedifreachableSm(S,T)isf\u00adniteforanypairoft-types(S,T).Thecurrentsectionisde\u00advotedtoprovingthatthisisthecase(cf.Proposition10.11). \nAtfrstglance,thispropertyseemsplausible,butprov\u00adingitrigorouslyrequiresabitofwork.Infact,thereare twopossiblewaysofdefningthesetof\\closedsubexpres\u00adsions\"ofat-type:one(whichwecalltop-downsubexpres\u00adsions)directlycorrespondingtothesubexpressionsgener\u00adatedbysupportSm,andanother(bottom-upsubexpressions) \nforwhichitiseasytoshowthatthesetofclosedsubexpres-sionsofeveryclosedt-typeisfnite.Theterminationproof \nproceedsbydefningbothofthesesetsandshowingthatthe formerisasubsetofthelatter.Ourdevelopmentisbased onBrandtandHenglein[6]. \n10.1Defnition:At-typeSisatop-downsubexpres\u00adsionofat-typeT,writtenSvT,ifthepair(S,T)isinthe leastfxedpointofthefollowinggeneratingfunction: \nTd(R) = f(T,T)jT2 T mg [ f(S,T1xT2)j(S,T1)2Rg [ f(S,T1xT2)j(S,T2)2Rg [ f(S,T1!T2)j(S,T1)2Rg [ f(S,T1!T2)j(S,T2)2Rg \n[ f(S, t X.T)j(S,fX7!tX.TgT)2Rg 10.2Exercise:Giveanequivalentdefnitionoftherelation SvTasasetofinferencerules. \nFromthedefnitionofsupportSm itiseasytoseethat,for anyt-typesSandT,thepairscontainedinsupportSm(S,T) areformedfromtop-downsubexpressionsofSandT: \n10.3Lemma:If(S0 ,T0)2supportSm(S,T),theneitherS0 v SorvT,andeithervSorvT. S0 T0 T0 Thetop-downsubexpressionrelationistransitive: \n10.4Lemma:IfSvUandUvT,thenSvT. Combiningthetwopreviouslemmasgivestheproposition whichmotivatedtheintroductionoftop-downsubexpres\u00adsions. \n10.5Proposition:If(S0 ,T0)2reachableSm(S,T),thenS0 v Sor vT,andvSorvT. S0 T0 T0 Thefnitenessofreachable(S,T)followsfromtheabove \npropositionandthefactthatanyt-typeUhasonlyafnite numberoftop-downsubexpressions.Unfortunately,thelat\u00adterfactisnotobviousfromthedefnitionofv.Attempt\u00adingtoproveitbystructuralinductiononUusingdefning \nclausesofTddoesnotworkbecausethelastclauseofTd wouldbreaktheinduction:toconstructsubexpressionsof U=tX.TitreferstoalargerexpressionfX7tX.TgT.The \n!alternativenotionofbottom-upsubexpressionsavoidsthis problembyperformingthesubstitutionoft-typesforrecur\u00adsionvariablesaftercalculatingthesubexpressionsinsteadof \nbefore.Thisleadstoasimpleproofoffniteness. 10.6Defnition:At-typeSisabottom-upsubexpres\u00adsionofat-typeT,writtenS:T,ifthepair(S,T)isinthe \nleastfxedpointofthefollowinggeneratingfunction: Bu(R)=f(T,T)jT2Tmg [f(S,T1xT2)j(S,T1)2Rg [f(S,T1xT2)j(S,T2)2Rg \n[f(S,T1!T2)j(S,T1)2Rg [f(S,T1!T2)j(S,T2)2Rg [f(fX!7tX.TgS,tX.T)j(S,T)2Rg Thenewnotionofsubexpressionsdifersfromtheone \ngivenearlieronlyintheclauseforatypestartingwitha tbinder.Toobtainthetop-downsubexpressionsofsuch atype,weunfoldeditfrstandthencollectedthesubex\u00adpressionsoftheunfolding.Toobtainthebottom-upsubex\u00adpressions,wefrstcollectthe(notnecessarilyclosed)subex\u00adpressionsofthebody,andthenclosethembyapplyingthe \nunfoldingsubstitution. 10.7Exercise:Giveanequivalentdefnitionoftherelation S:Tasasetofinferencerules. \nThefactthatanexpressionhasonlyfnitelymany bottom-upsubexpressionsiseasilyproved. 10.8Lemma:fSjS:Tgisfnite. \nThenextsubstitutionlemmawillbeneededintheproof ofthepropositionthatfollowsit. 10.9Lemma:IfS:fX7QgT,theneitherS:Qor \n!else S=fX7forsomewith:T. !QgS0S0S0 Thefnalpieceoftheproofestablishesthatalltop\u00addownsubexpressionsofat-typeoccuramongitsbottom-up \nsubexpressions. 10.10Proposition:IfSvT,thenS:T. Proof:WewanttoshowthattTdtBu.Bytheprinciple ofinduction,thisfollowsfromthefactthattBuisTd-closed, \nthatisTd(tBu)tBu.Toobtainthelatter,wejusthave toconsidertheefectofeachclauseofTdontBu.SinceTd andBuaredefnedsimilarly,thecasesofalltheclausesare \ntrivial,exceptthelastone,whereweapplyLemma10.9. CombiningProposition10.5,Proposition10.10and Lemma10.8givesthefnalresult: \n10.11Proposition:Foranyt-typesSandT,theset reachableSm(S,T)isfnite. 11. DIGRESSION: AN EXPONENTIAL AL-GORITHM \nThesubtypingalgorithmpresentedatthebeginningofSec\u00adtion10canbesimplifedabitmorebymakingitreturnjust abooleanvalueratherthananewsetofassumptions(see \nFigure3).TheresultingprocedurecorrespondstoAmadio subtypeac(A,S,T)= if(S,T)2A,then true elseletA0 =A[(S,T)in \nifT=Top,then true elseifS=S1xS2andT=T1xT2,then subtypeac(A0,S1,T1)and subtypeac(A0,S2,T2) elseifS=S1!S2andT=T1!T2,then \nsubtypeac(A0,T1,S1)and subtypeac(A0,S2,T2) elseifS=tX.S1,then subtypeac(A0,7tX.S1gS1,T) fX!elseifT=tX.T1,then \nsubtypeac(A0,S,fX7!tX.T1gT1) else false. Figure3:AmadioandCardelli'ssubtypingalgo\u00adrithm andCardelli'salgorithmforcheckingsubtyping[3].Itcom\u00adputesthesamerelationastheonecomputedbysubtype, \nbutmuchlessefcientlybecauseitdoesnotrememberpairs oftypesinthesubtyperelationacrosstherecursivecalls \nitmakesinthe!andxcases.Thisseeminglyinnocent changeresultsinablowupofthenumberofrecursivecalls thealgorithmmakes.Whereasthenumberofrecursivecalls \nmadebysubtypeisproportionaltotheproductofthesizes ofthetwoargumenttypes,inthecaseofsubtypeacitis exponential. \nTheexponentialbehavioroftheAmadioandCardelli'sal\u00adgorithmcanbeseenclearlyinthefollowingexample.Defne familiesoftypesSnandTninductivelyasfollows: \nS0 =tX.TopxX T0 =tX.Topx(TopxX) Sn+1 =tX.X!Sn Tn+1 =tX.X!Tn: SincebothSnandTnhavejustoneoccurrenceofSn;1and \nTn;1correspondingly,theirsizewillbelinearinnafterun\u00adfoldingtheabbreviations.CheckingSn<Tnisgoingto generateanexponentialderivation,however.Thiscanbe \nseenbythefollowingsequenceofrecursivecalls subtypeac(0,Sn,Tn) =subtypeac(A1,Sn!Sn;1,Tn) =subtypeac(A2,Sn!Sn;1,Tn!Tn;1) \n=subtypeac(A3,Tn,Sn)andsubtypeac(A3,Sn;1,Tn;1) =subtypeac(A3,Tn,Sn)and... =subtypeac(A4,Tn!Tn;1,Sn)and... \n=subtypeac(A5,Tn!Tn;1,Sn!Sn;1)and... =subtypeac(A6,Sn,Tn)andsubtypeac(A6,Tn;1,Sn;1) and... =etc., where \nA1 =f(Sn,Tn)g A2 =A1[f(Sn!Sn;1,Tn)g A3 =A2[f(Sn!Sn;1,Tn!Tn;1)g A4 =A3[f(Tn,Sn)g A5 =A4[f(Tn!Tn;1,Sn)g \nA6 =A5[f(Tn!Tn;1,Sn!Sn;1)g: Noticethattheinitialcallsubtypeac(0,Sn,Tn)resultsinthe twounderlinedrecursivecallsofthesameforminvolving \nSn;1andTn;1.These,inturn,willeachgiverisetotwo recursivecallsinvolvingSn;2andTn;2,andsoon.The totalnumberofrecursivecallswillclearlybeproportional \nto. 2n 12. FURTHER READING Forbackgroundoncoinduction,readersarereferredtoBar\u00adwiseandMoss'ViciousCircles[5],Gordon'stutorialon \ncoinductionandfunctionalprogramming[12],andMilner andTofte'sexpositoryarticleontheuseofcoinductionin \nprogramminglanguagesemantics[17].Basicinformation onmonotonefunctionsandfxedpointscanbefoundin[1] and[10]. \nTheuseofcoinductiveproofmethodsincomputersci\u00adencedatesfromthe1970s,forexampleintheworkofMil\u00adner[16]andPark[19]onconcurrency(alsocf.Arbiband \nManes'scategoricaldiscussionofdualityinautomatathe\u00adory[4]).Buttheuseofinductioninitsdual\\co-\"formwas \nfamiliartomathematiciansconsiderablyearlierandisdevel\u00adopedexplicitly,forexample,inuniversalalgebraandcate\u00adgorytheory.Aczel'sseminalbook[2]onnonwell-founded \nsetsincludesabriefhistoricalsurvey. Recursivetypesincomputersciencegobackto(atleast) Morris[18].Basicsyntacticandsemanticproperties(with\u00adoutsubtyping)arecollectedinCardoneandCoppo[7]. \nPropertiesofinfniteandregulartreesaresurveyedbyCour\u00adcelle[8]. AmadioandCardelli[3]gavethefrstsubtypingalgorithm \nforrecursivetypes.Theirpaperdefnesthreerelations:an inclusionrelationbetweeninfnitetrees,analgorithmthat \ncheckssubtypingbetweent-types,andareferencesubtyp\u00adingrelationbetweent-typesdefnedastheleastfxedpoint \nofasetofdeclarativeinferencerules;theserelationsare provedtobeequivalent,andconnectedtoaPERmodel construction.Coinductionisnotused.Instead,toreason \naboutinfnitetrees,anotionoffniteapproximationsofan infnitetreeisintroduced.Thisnotionplaysakeyrolein \nmanyoftheproofs. BrandtandHenglein[6]laybaretheunderlyingcoinduc\u00adtivenatureofAmadioandCardelli'ssystem.Theygivea \nnewinductiveaxiomatizationofthesubtypingrelationthat issoundandcompletewithrespecttothatofAmadioand Cardelli.Theso-calledArrow/Fixruleoftheaxiomati\u00adzationembodiesthecoinductivenessofthesystem.The \npaperdescribesageneralmethodforderivinganinductive axiomatizationforrelationsthatarenaturallydefnedby \ncoinductionandpresentsadetailedproofofterminationfor asubtypingalgorithm.Section10ofthepresentpaperis \nessentiallyasketchofthelatterproof.BrandandHenglein establishthatthecomplexityoftheiralgorithmisO(n 2). \nKozen,Palsberg,andSchwartzbach[15]describeanel\u00adegantquadraticsubtypingalgorithmforrecursivetypes. Theyobservethataregularrecursivetypecorrespondstoan \nautomatonwithlabeledstates.Then,theydefneaformof productoftwoautomatathatyieldsaconventionalwordau\u00adtomatonacceptingawordifthetypescorrespondingtothe \noriginalautomataarenotinthesubtyperelation.Alinear\u00adtimeemptynesstestnowsolvesthesubtypingproblem.This \nfact,plusthequadraticcomplexityofproductconstruction andlinear-timeconversionfromtypestoautomata,givesan \noverallquadraticcomplexityforthesubtypingalgorithm. Hosoya,Vouillon,andPierce[13]usearelatedautomata\u00adtheoreticapproach,associatingrecursivetypes(withunions) \ntotreeautomatainasubtypingalgorithmtunedtoXML processingapplications. JimandPalsberg[14]addresstypeinferenceforlanguages \nwithsubtypingandrecursivetypes.Likeus,theyadopta coinductiveviewofthesubtyperelationoverinfnitetrees \nandmotivateasubtypecheckingalgorithmasaprocedure buildingtheminimalsimulation(i.e.,consistentset,inour \nterminology)fromagivenpairoftypes.Theydefnetheno\u00adtionsofconsistencyandP1-closureofarelationovertypes, \nwhichcorrespondtoourconsistencyandreachablesets. Acknowledgments WearegratefulforinsightsandencouragementfromRobert \nHarper,HaruoHosoya,PerditaStevens,J.er^omeVouil\u00adlon,andPhilipWadler,andforcarefulreadingsofthe manuscriptbyPennyAnderson,AlanSchmitt,andthe \nICFPreviewers.ThisworkwassupportedbytheUniversity ofPennsylvaniaandbyNSFCareergrantCCR-9701826, PrincipledFoundationsforProgrammingwithObjects. \n 13. REFERENCES [1]P.Aczel.Anintroductiontoinductivedefnitions.In J.Barwise,editor,HandbookofMathematicalLogic, \nnumber90inStudiesinLogicandtheFoundationsof Mathematics,pages739{782.NorthHolland,1977. [2]P.Aczel.Non-Well-FoundedSets.StanfordCenterfor \ntheStudyofLanguageandInformation,1988.CSLI LectureNotesnumber14. [3]R.M.AmadioandL.Cardelli.Subtypingrecursive \ntypes.ACMTransactionsonProgrammingLanguages andSystems,15(4):575{631,1993.Preliminaryversion inPOPL'91(pp.104{118);alsoDECSystems \nResearchCenterResearchReportnumber62,August 1990. [4]M.ArbibandE.Manes.Arrows,Structures,and Functors:TheCategoricalImperative.Academic \nPress,1975. [5]J.BarwiseandL.Moss.ViciousCircles:Onthe MathematicsofNon-wellfoundedPhenomena. CambridgeUniversityPress,1996.Originally \nappearedasCSLILectureNotes60. [6]M.BrandtandF.Henglein.Coinductive axiomatizationofrecursivetypeequalityand \nsubtyping.InR.Hindley,editor,Proc.3dInt'lConf. onTypedLambdaCalculiandApplications(TLCA), Nancy,France,April2-4,1997,volume1210of \nLectureNotesinComputerScience(LNCS),pages 63{81.Springer-Verlag,Apr.1997.Fullversionin FundamentaInformaticae,Vol.33,pp.309-338,1998. \n[7]F.CardoneandM.Coppo.Typeinferencewith recursivetypes:Syntaxandsemantics.Information andComputation,92(1):48{80,1991. \n [8]B.Courcelle.Fundamentalpropertiesofinfnitetrees. TheoreticalComputerScience,25:95{169,1983. [9]K.Crary,R.Harper,andS.Puri.Whatisarecursive \nmodule?InProceedingsoftheACMSIGPLAN ConferenceonProgrammingLanguageDesignand Implementation(PLDI),pages50{63,May1999. \n[10]B.A.DaveyandH.A.Priestley.Introductionto LatticesandOrder.CambridgeUniversityPress,1990. [11]G.Ghelli.Recursivetypesarenotconservativeover \nF:.InM.BezenandJ.Groote,editors,Proceedings ofthetheInternationalConferenceonTypedLambda CalculiandApplications(TLCA),Utrecht,The \nNetherlands,number664inLectureNotesin ComputerScience,pages146{162,Berlin,March1993. SpringerVerlag. \n[12]A.Gordon.Atutorialonco-inductionandfunctional programming.InFunctionalProgramming,Glasgow 1994,pages78{95.SpringerWorkshopsinComputing, \n1995. [13]H.Hosoya,J.Vouillon,andB.C.Pierce.Regular expressiontypesforXML.InProceedingsofthe InternationalConferenceonFunctionalProgramming \n(ICFP),2000. [14]T.JimandJ.Palsberg.Typeinferenceinsystemsof recursivetypeswithsubtyping.Manuscript,1999. \n[15]D.Kozen,J.Palsberg,andM.I.Schwartzbach. Efcientrecursivesubtyping.InACMSymposiumon PrinciplesofProgrammingLanguages(POPL),pages \n419{428,1993. [16]R.Milner.ACalculusofCommunicatingSystems, volume92ofLectureNotesinComputerScience. \nSpringerVerlag,1980. [17]R.MilnerandM.Tofte.Co-inductioninrelational semantics.TheoreticalComputerScience,87:209{220, \n1991. [18]J.H.Morris.Lambdacalculusmodelsofprogramming languages.TechnicalReport MIT-LCS//MIT/LCS/TR-57,MassachusettsInstitute \nofTechnology,LaboratoryforComputerScience,Dec. 1968. [19]D.Park.Concurrencyandautomataoninfnite sequences.InP.Deussen,editor,Proceedingsofthe \n5thGI-ConferenceonTheoreticalComputerScience, volume104ofLectureNotesinComputerScience, pages167{183.Springer-Verlag,Berlin,1981. \n[20]A.Tarski.Alattice-theoreticalfxpointtheoremand itsapplications.PacifcJournalofMathematics, 5:285{309,1955. \n Solutions to Selected Exercises Solutionto2.7: E2(fg)=fag E2(fag)=fag E2(fbg)=fag E2(fcg)=fa,bg E2(fa,bg)=fa,cg \nE2(fa,cg)=fa,bg E2(fb,cg)=fa,bg E2(fa,b,cg)=fa,b,cg TheE2-closedsetsare:fag,fa,b,cg.TheE2-consistent \nsetsare:0,fag,fa,b,cg.TheleastfxedpointofE2isfag. Thegreatestfxedpointisfa,b,cg. Solutionto4.3:Thepair(Top,TopxTop)isnotinS. \nToseethis,justobservefromthedefnitionofSthatthis pairisnotinS(X)foranyX.SothereisnoS-consistent setcontainingthispair,andinparticularS(whichisS\u00adconsistent)doesnotcontainit. \nSolutionto4.4:Forthefrstpart,anypairofinfnitetypes willdo.Forthesecond,therearenosuchtypes:theleast andgreatestfxedpointsofSfcoincide. \nSolutionto4.8:Beginbydefningtheidentityrelation ontreetypes:I=f(T,T)jT2Tg.Observe(straightfor\u00adwardly)thatIisS-consistent.Fromthisandthecoinduc\u00adtionprinciple,IS,thatis,Sisrefexive. \nSolutionto5.2:Bythecoinductionprinciple,itisenough StrStr toshowthatTxTis-consistent,i.e.,TxT(Tx T).Suppose(S,T)2TxT.PickanyU2T.Then \nStr (S,U),(U,T)2TxT,andso,bythedefnitionof,also (S,T)2Str(T xT). Solutionto6.3: iabcbdefgg hadebcfg Solution \nto 10.2: T vT S Sv vT1 T1xT2 S Sv vT2 T1xT2 S Sv vT1 T1!T2 S Sv vT2 T1!T2 S v fX7!tX.TgT SvtX.T TheTdgeneratingfunctiondifersfromthegeneratingfunc\u00adtionswehaveconsideredthroughoutthispaper:itisnot \ninvertible.Itcouldbeseenbyconsideringtheassertion BvAxB!BxC;itissupportedbythetwoassertionsets fBvAxBgandfBvBxCg,butneitherofthemisasubset \noftheother. Solutionto10.7:AlltherulesforBuarethesameasthe rulesforTdgiveninthesolutionofExercise10.2,except \ntherulefort-type: S:T fX7tX.TgS:tX.T !  \n\t\t\t", "proc_id": "351240", "abstract": "Algorithms for checking subtyping between recursive types lie at the core of many programming language implementations. But the fundamental theory of these algorithms and how they relate to simpler declarative specifications is not widely understood, due in part to the difficulty of the available introductions to the area. This tutorial paper offers an \"end-to-end\" introduction to recursive types and subtyping algorithms, from basic theory to efficient implementation, set in the unifying mathematical framework of coinduction.", "authors": [{"name": "Vladimir Gapeyev", "author_profile_id": "81100322379", "affiliation": "Department of Computer and Information Science, University of Pennsylvania", "person_id": "P292003", "email_address": "", "orcid_id": ""}, {"name": "Michael Y. Levin", "author_profile_id": "81100404720", "affiliation": "Department of Computer and Information Science, University of Pennsylvania", "person_id": "PP31086707", "email_address": "", "orcid_id": ""}, {"name": "Benjamin C. Pierce", "author_profile_id": "81100303310", "affiliation": "Department of Computer and Information Science, University of Pennsylvania", "person_id": "PP14111353", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/351240.351261", "year": "2000", "article_id": "351261", "conference": "ICFP", "title": "Recursive subtyping revealed: (functional pearl)", "url": "http://dl.acm.org/citation.cfm?id=351261"}