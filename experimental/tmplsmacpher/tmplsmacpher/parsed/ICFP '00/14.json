{"article_publication_date": "09-01-2000", "fulltext": "\n h is strict. y a lac h v e sho y c b een h v h v y be ev y a n ea rlier o be h a s th o se en y o be \ne w ill h a e v y v u st be ev e an occurs be e2Expr!xjx1x2jbjop l x1:::xk jcasexofalt1;:::;altnend \n0 jletx=eine jletrecx1=b1;:::;xn=bnine jevalx b2Build! lx:ejCl x1:::xkjthunkl e alt2Alt!Cx1:::xk->e x2Var \nl2Label!1,2,::: C2DataCon[IntLit  Figure1:ThesyntaxofFleet Cheapeagernessisacomplementtotransformationsbased \nonstrictnessanalysis[10;19].Bothtechniquesallowcall-by\u00advaluetobeusedinsteadofcall-by-need,therebyevaluating \nexpressionsearlierthaninanunoptimizedimplementation. Thediferenceisinthecorrectnesscriteria;wherestrictness \nanalysisfndsexpressionsthatwouldhavebeenevaluated anyway,cheapeagernessfndsexpressionswhichareharm\u00adlesstoevaluateeveniftheywouldnothavebeenevaluated \nundercall-by-need.Thishastheimportantimplicationthat cheapeagernesscanfndsomeopportunitiesforoptimiza\u00adtionthatstrictnessanalysiscanneverfnd,andviceversa. \nReplacingcall-by-needwithcall-by-valueimprovesperfor\u00admanceinseveralways:Fewerthunksneedtobeconstructed \nand(often)laterevaluatedandunboxeddatarepresenta\u00adtionscanbeusedinmoreplaces[12;4].Inaddition,some compilerback-endshaveseparateevaloperations,forin\u00adstancetheCharlmesLML/Haskellcompiler[9]andourown \ncompiler[3].Suchanexplicitevaloperationcanbeelimi\u00adnatedifitcanbeprovedthatitsargumentwillneverbea thunk.Eliminatingthunksincreasestheopportunitiesfor \nthistransformation. 2. THE LANGUAGE FLEET Figure1givesthesyntaxofFleet.Itisasimplefunctional languagecontainingtheconstructsofthelambdacalculusas \nwellasconstructors,caseexpressions,built-inoperatorsand recursiveandnonrecursivelet.Graphreductionishandled \nbyexplicitevalandthunkconstructs;therestofthelan\u00adguagehasacall-by-valuesemantics.Replacingcall-by-need \nwithcall-by-valueisasource-to-sourcetransformation: l thunke=)e Lambdaabstractions,constructorsandthunksarereferred \ntoasbuildableexpressions.Thesearetheonlykindofex\u00adpressionsallowedasright-hand-sidesinletrecbindings. \nBuildableexpressionsandoperatorapplicationsarelabeled. Theselabelsidentifyparticularexpressionsandareusedto \nconveyfowinformation.Theyarealsousedbythecheap\u00adnessanalysis;itsresultisasetoflabelsofthunksthatmay 1 \nletrecfrom=n.letr=thunk2 letn1=thunk3 letn'=evaln ininc4n' infromn1 inCons5 nr inletz= 06 infromz  \n  Figure2:Thefromprogram beeliminated. Figure2givesanexampleFleetprogramcomputingthelist ofallnaturalnumbers. \nWegiveFleetabigstepoperationalsemanticsinFigure3. Theinferencerulesallowustoprovestatementsoftheform \np`e+v wherepisanenvironmentmappingvariablestovalues,e isanexpression,andvavalue.Avalueisaclosure;a pairofanenvironmentandabuildableexpression.Note \nthatthunksarealsovaluesinthissemanticssincetheyare anexplicitconstructinthelanguage.Werefertoclosures \nwheretheexpressionpartisanabstractionoraconstructor applicationasweakheadnormalform(whnf)closures. Anunusualfeatureofoursemanticsisthatweallowvalues \ntobeinfnite(seenastreeswhereeachvariablebindingin anenvironmentisabranch).SeeAppendixAforaformal defnitionofinfnitevaluesusingpathexpressions.Infnite \nvaluesariseinthe[letrec]ruleinthesemanticsandcorre\u00adspondtothecyclicstructuresbuiltbyanimplementation. \nThecheapeagernessanalysisusestheresultsofaprevious fowanalysis.Afowanalysisfndsinformationaboutthe dataandcontrolfow1inaprogram[2;16;8;15].Inour \ncase,fowinformationtakestheformofafowassignment' mappingvariablestosetsofexpressions.Theseexpressions \nareallproducersofvaluesandincludebuildableexpressions andoperatorapplications.Sinceallproducersarelabeled, \nfowinformationcouldrecordlabelsratherthanexpressions. Wehavechosentorecordexpressionsinordertosimplifythe \ndefnitionofthecheapeagernessanalysis. Figure4givesafowassignmentforthefromprogram.Note thatthefowinformationforthevariablen1,boundtothe \nthunkcontainingtheincrement,alsoincludesthefowinfor\u00admationforthethunkbody.Includingthefowinformation \nforthethunkbodyinthefowinformationforthethunk isnecessarysincethecheapeagernesstransformationmay replacethethunkwiththebody. \n1Inahigherorderlanguagetheseareintertwinedsincefunc\u00adtionsarefrstclassdata.Thisisrefectedinthenomencla\u00adtureoffowanalysis,asthetermcontrolfowanalysisisalso \nused[16].Sincedataisoftenrepresentedasclosures,both inanimplementationandinthesemantics,thetermclosure \nanalysiscanalsobefoundintheliterature[15]. p`x+p(x) var l p(x1)=(p0,x:e)p0[x7!p(x2)]`e+v app p`x1x2+v \np`b+(p,b) build [ op] p(x1):::p(xk)=C l p`opx1:::x+([],Cl) op kl00 0 p0!p0(x p(x)=(,Cx1:::xk)p[:::,xi7i),:::]`e+v \ncase p`casexof:::;Cx1:::xk-.e;:::end+v 00 p`e+vp[x7!v 0]`e+v let 0 p`letx.eine+v p0=p[:::,xi7!(p0,bi),:::]p0`e+v \nletrec p`letrecx1.b1;:::;xn.bnine+v l p(x)=(p0,thunke)p0`e+v eval-i p`evalx+v p(x)isawhnfclosure eval-ii \np`evalx+p(x) Figure3:OperationalsemanticsofFleet from:f1 n:E1g 0 n:fthunk3 E3,inc4 n,06 g r:fthunk2 E2,Cons5 \nnrg 0 n1:fthunk3 E3,inc4 ng 00 n:finc4 n,06 g z:f06 g Abbreviations: E1 letr=thunk2 E2inCons5 nr E2 letn1=thunk3 \nE3infromn1 00 E3 letn=evalnininc4 n Figure4:Flowinformationforfrom 3. THE ANALYSIS Thefrstquestionthatmustbeansweredwhenformalizing \nthecheapnessanalysisiswhatkindsofexpressionsshould beconsideredexpensiveorunsafe,thusmakingthemunft forspeculativeevaluation. \nCallsofrecursivefunctions:Notallrecursivefunctions areexpensive.Iftherecursivecallonlyoccursnested insidethebodyofathunkexpression,asinthefrom \nfunctionabovewheretherecursivecallisinthebody ofthethunk2 ,acalltothefunctionwillnotleadtoa recursivecall,onlytotheconstructionofathunkthat, \nifandwhenitisevaluated,willperformtherecursive call.Thuswewilldistinguishbetweenfunctionsthat arelazilyrecursive(recursivecallsonlyinthunkbod\u00adies)andthosethatareeagerlyrecursive.Atypical \neagerlyrecursivefunctionislength. Case:Ifthescrutinizedvariableinacaseexpressionis boundtoaconstructornotinanyalternative,arun\u00adtimeerrorwilloccur(inthesemantics,thisshowsup \nastheimpossibilityofmakingaderivationoftheeval\u00aduationrelation;thereisnoruleforpatternmatching failure).Fortunately,fowinformationcanbeusedto \nfndoutwhetherthismayhappenornot. Operators:Someoperators,forinstancedivision,areun\u00addefnedforsomeoperands.Otheroperators,forin\u00adstancefxedprecisionintegeraddition,mayoverfow. \nIfsuchoverfowistrapped,integeradditionisanun\u00adsafeoperation,butifoverfowjustwrapsaround,as wewillassume \n2inthispaper,itissafe.Inbothcases, fowinformationcouldbeusedtofndoutwhetheran exceptionispossibleornot. \nEvaluation:Wearegoingtoeliminateallthunkswhichare cheapandsafe.Ifanevalmightactuallyfnditsar\u00adgumentathunk,itisbecausethatthunkisexpensive \norunsafe.Thusanevalissafeifeverythunkthat mightbeboundtoitsargumentiseliminated,infor\u00admationthatisreadilyavailablefromfowanalysis. \nItiseasytoseethateliminationofonethunkmaydepend oneliminationofanother(thishappensifthebodyofthe frstthunkcontainsanevalwhichmayevaluateclosures \nbuiltwiththesecondthunk).Infact,therecanevenbe circulardependencies.Considerthethunklabeledwith3in thefromprograminFigure2,reproducedbelow: \nthunk3letn'=evaln ininc4n' Thebodyofthisthunkischeapandsafeexceptforthe subexpressionevaln.Theonlythunkthatcanbebound \ntonis,accordingtothefowinformationinFigure4,the verythunkcontainingtheeval. Inordertounderstandif,andinthatcasewhy,athunkde\u00adpendingonitselfcanbeeliminatedornot,itisimportantto \n2Althoughthisisnotentirelysatisfactory,itisconsistent withe.g.thedefnitionofHaskell98[11,section6.4]. \n  notethatthenecessaryconditionisthatnoneofthespec\u00adulativelyevaluatedexpressionsinthefnalprogramexecute \nanexpensiveoperation,inthiscasefndathunkinaneval. Butifweeliminatethethunk3 intheexample,therewill benothunkboundtoninthefnalprogram.Thusweare \nallowedtoeliminatethatthunk. Afnalrestrictionisthatthunksintheright-hand-sidesof letrecbindingscannotbeeliminatedsincebuildableex\u00adpressionsarerequiredinthisposition.Thisrefectsboth \nthesemantics,whichputstheright-hand-sidesinclosures, andrealimplementationswhichbuildcyclicdatastructures \nforletrecbindings. 3.1 Formalization Weformalizethecheapnessanalysisusinganinferencesys\u00adtem,showninFigure5,whichallowsustoprovejudgements \noftheform S` ' e:l whereSisasetofconstraints,'afowassignment,eisan expressionandlisalabel.Therearealsoauxilliaryjudge\u00ad \n' mentsoftheformS` Rb:lwhichexpresstherestriction thatthunksinletrecbindingscannotbeeliminated. ' JudgementsoftheformS` \nlE,whereEisanerrorcheck, ensurethatexpressionswhichmaycausearun-timeerror areconsideredexpensive. l0 \nl0 Therearethreemainformsofconstraints:l.c,l.e l0 andl.t.Thelabelsarelabelsofthunkexpressionsand lambdaabstractionsandtheconstraintsrelatethecostsof \nevaluatingthecorrespondingthunkorfunctionbodies.A fourthformofconstraintisl.cn,whichisusedtoindicate \nthatthebodyofthethunkorfunctionlabeledwithlis expensiveorunsafetoevaluate. Figure6showstheconstraintsSderivedfromthefrompro\u00adgraminFigure2usingthefowassignment'inFigure4 \n(42isanarbitrarylabelrepresentingthetoplevelcontext). ThuswehaveS` ' e:42whereeisthefromprogram. Definition1(Costassignment).Acostassignment \nisafunction5mappinglabelstocosts,whichareeithernat\u00aduralnumbersorthespecialcostn.WewillletLrangeover costs. \nThecostnrepresentsacomputationwhichmaylooporraise anexception.Theothercostsallrepresentterminatingand \nnonexceptingcomputations;wecallthesefnitecosts.The outputoftheanalysisisacostassignment;allthunkswhose \nlabelsaremappedtofnitecostswillbeeliminated. Definition2.Acostassignment5isamodelofacon\u00adstraintsetS,written5j=Sifallofthefollowingholds: \nForeveryconstraintl.cl02S,either5(l)5(l0)or 5(l)=n.Foreveryconstraintl.cn2S,5(l)=n. l0 Foreveryconstraintl.e2S,either5(l)=nor \n5(l0)=6n. ' S`e:l ' S`x:l var ' l0 S`e: abs l0' S`x:e:l ' S`IsAbs(x1) l l0 app' S[fl.cl0jx:e2'(x1)g`x1x2:l \n' S`NoErr(opx1:::xr) ll0 op' S`opx1:::xr:' Cl0 S`x1:::xr:l con ' '' S`OneOf(x,C1,:::,Cn)S`e1:l:::S`en:l \nl case ' S`casexof:::;Cixi1:::xiri -.ei;:::end:l ''0 S`e:lS`e:l let ' 0 S`letx.eine:l '' ' S` Rb1:l:::S` \nRbn:lS`e:l letrec ' S`letrecx1.b1;:::;xn.bnine:l ' l0 S`e: thunk l0' S[fl.tl0g`thunke:l l0 .e' S[fll0jthunke2'(x)g`evalx:leval \nS` ' Rb:l bisnotathunk S` ' Rb : l S` ' b:l r-whnf S[ f S` ' e:l0 l0.c g` ' Rthunk l0 e : l r-thunk \n' S`E l 8e2'(x):eisanabstraction isabs ' S`IsAbs(x) l 8e2'(x):eisbuiltwithoneoftheCi oneof ' S`OneOf(x,C1,:::,Cn) \nl opx1:::xrisdefnedifthexiaredescribedby' noerr ' S`NoErr(opx1:::xr) l ' S[fl.c g`E error l Figure5:Constraintderivationrules \n2.c1,42.c1,1.t2,2.t3,3.e3 Figure6:Constraintsderivedfromthefromprogram 5(1)=1,5(2)=n,5(3)=1,5(42)=2 Figure7:Modeloftheconstraintsderivedfromfrom \nForeveryconstraintl.tl02S,either5(l)5(l0)or 5(l)=nor5(l0)=n. Amodel5ofaconstraintsetSisminimalif5(l)=nand \n50j=Simpliesthat50(l)=n(everylabelmappedtonby 5mustbemappedtonbyanymodelofS).Notethata minimalmodelisuniqueifitexists. \nTheconstraintsetderivedfromthefromprogramhasa minimalmodel,whichisshowninFigure7. Lookingattheinferencerules,wecanseethatconstraints \noftheforml.ccorrespondtofunctioncalls,wherelis l0 thelabelofthecaller(theinnermostlambdaabstractionor \nthunk)andisthelabelofthecallee(alambdaabstrac\u00ad l0 tion).Constraintsoftheforml.cnindicatethatthe evaluationofthethunkorfunctionbodylmightcausea \nrun-timeerror.Suchconstraintsaregeneratedbytheerror ' checkingjudgementsS` lE. l0 Similarly,l.ecorrespondstoaneval,occurringinthe \nthunkorfunctionbodyl,whichmayevaluateathunkla\u00adbeled.Ifisassignedafnitecost,thethunkwillbe l0 l0 eliminated.Thustherewillbenosuchthunkfortheeval \ntofnd,sothecostofthethunkbodydoesnotafectthe costoftheeval. l0 Thethirdkindofconstraint,l.t,correspondstoathunk \nlabeledwithl0nestedinsideathunkorfunctionlabeledwith l.Theotherconstraintsaremonotonic,inthesensethatthe \nmoreexpensivethelabelontherightis,themoreexpensive isthelabelontheleft.Thisnestingconstraintisdiferent; \nifisassignedn,lcanbeassignedanycost. l0 Themotivationforthisruleisasfollows:Recallthatthe costassignedto(thelabelofthethunk)isthecostassoci\u00ad \nl0 atedwiththethunkbody;ifthatcostisn,thethunkisleft asathunkratherthanbeingeliminated,andthunkexpres\u00adsionsarealwayssafeandcheap(thatistheirraisond'.etre, \nafterall).Athunkthatisassignedafnitecost,however, isreplacedbythethunkbody,makingtheenclosingexpres\u00adsionmoreexpensivethanthebody.Thisformofconstraint \nisusedtoensurethatthetransformationdoesnotturnlazy recursionintoeagerrecursion. Thenonmonotonicityofnestingconstraintsimpliesthatnot \nallconstraintsetshaveminimalmodels.Considerthefol\u00adlowingexample: letrecf= 1 x.lett=thunk2 gx inPair3 \ntt g= 4 y.letu=thunk5 fy inPair6 uu in... Wegetthefollowingconstraintset(therathertrivialfow informationisnotshown): \n1.t2,2.c4,4.t5,5.c1 Ifwetrytoassignfnitecoststoallofthelabels,wehavea cycleofstrictinequalities,sowehavetoassignntoeither \nlabel2orlabel5.Ifwechooselabel2,wegetthefollowing legalcostassignment: 5(1)=1,5(2)=n,5(4)=3,5(5)=2 Wecouldequallywellhavechosentoassignntolabel5and \n2tolabel2.Operationally,thisisnotsurprising;itisokto eliminateoneofthethunkexpressionsintheexamplesince \ntherecursionisindirect.Eliminatingboth,however,would turnthelazyrecursionoftheoriginalprogramintoeager \nrecursion. 3.2 Monovariance and Cloning Analyseswhereasinglepropertyiscomputedforeverypro\u00adgrampointaregenerallycalledmonovariant(withtheop\u00adpositebeingapolyvariantanalysis).Ourcheapeagerness \nanalysisisamonovariantanalysissinceeverylabelisas\u00adsignedonlyonecost.Inlargeprograms,thisispotentiallya \nseriouslimitation:Functionscalledfromdiferentsitesmay becheapatsomesitesandexpensiveatother. Considerforinstanceastrictfunctionwhichisappliedtoan \nevaluatedargumentatsomesitesandtoathunkatother. Consequently,thisfunctionwillsometimesevaluatethunks, \nandthelabelofitslambdaabstractionmustthereforebe mappedton,makingallcallstothisfunctionexpensive. Themonovariancemayevenconfusetheanalyserintobe\u00adlievingthatmorefunctionsarerecursivethanisactuallythe \ncase.Considerthefollowingcodefragment: 1 letapx= f:fx inletg=apxapx in...g... Thefowinformationforfclearlymustincludethe1 \nfab\u00adstraction,butthenwewillgettheconstraint1.c1which willforce5(1)=n. Onewayofdealingwiththeseproblemsistoclone(make \nseveralcopiesof)eachfunctionbeforethefowanalysis(this techniquehasbeenusedbye.g.Heintze[7]toincrease \ntheprecisionofamonovariantfowanalysis).Weclone globalletandletrecbindingswhereallright-hand-sides arelambdaabstractions.Ourcloningstrategyisdeepinthe \nsensethatweapplycloningtothebodyofalet(rec)ex\u00adpressionbeforemakingonecopyofthebindingsforeveryoc\u00adcurrenceofanyoftheboundvariablesinthe(cloned)body. \nThealternativeisshallowcloningwhereonecopyismade foreveryoccurrenceintheoriginalbody.Deepcloningmay leadtoexponentialcodegrowth,butguaranteesthatthere \nisonlyonenonrecursiveoccurrenceofavariableboundina clonablelet(rec).Cloningoftheexpressionaboveyields \nSolve: foreachl2LabAbsdo + ifl. clorl.c then/(l):= Propagate\u00adforeachl2LabThunkdo + Rl:=flg[fl0jl02LabThunkandl. \ncel0g ifthereisacycleCinthe.ctsubgraphsuchthat C<Rl[LabAbs then/(l):= loop Propagate\u00adforeachl.tl0do \nif/(l0)=thenremovel.tl0fromthegraph + ifthereisanll0suchthatl0.l . tct then/(l0):= elseexitloop endloop \n assignfnitecoststoalllabelssuchthat/(l)6= Propagate-: foreachldo + ifl.l0and/(l0)=then/(l):= ce Figure8:Constraintsolvingalgorithm \n1 letapx= f:fx 2 f0:f0 inletapx'= x inletg=apxapx' in...g... ifxisnotboundinaclonablelet(rec).Nowthefow \ninformationforfincludesthe2 f0abstraction,soweget 1.c2instead. 3.3 Implementation ItiseasytoseehowtheinferencesysteminFigure5canbe \nturnedintoafunctionConstraintstakingafowassignment ',alabellandanexpressioneandproducingthesmallest constraintsetSsuchthatS` \n' e:l.Wethereforeproceed tothequestionofhowtocomputeamodeloftheconstraints thusderived. Duetothenonmonotonicityofthe.tconstraints,thereis \nroomforsomecunningintheconstraintsolvingalgorithm. Thereissometimesachoiceofwhichthunklabelstomapto ninordertoavoidturninglazyrecursionintoeagerrecur\u00adsion.Inthesecases,itisbesttochooselabelsthatmustbe \nmappedtoninanymodeloftheconstraints.Wecallsuch labelsforcedlabels.Ifwesucceedinsolvingtheconstraints \nbymappingonlyforcedlabelston,theconstraintshave aminimalmodelandwehavefoundit.Thealgorithmwe presentbelowalwaysfndstheminimalmodelifoneexists. \nWhendiscussingthisalgorithm,itwillbehelpfultoview theconstraintsasdefningagraphwithlabelsandnas nodesandthreediferentkindsofedgescorrespondingto \nthethreetypesofconstraints3(thisgraphisarefnement ofthecallgraphoftheprogram).Wewillformsubgraphs ofthisgraphbyconsideringonlycertainkindsofedges,for \n3Thechoiceofsymbolsfortheconstraintswasmotivatedby thisanalogy. instanceonlythe.cedgesoronlythe.cand.eedges. \nWewillrefertotheseasthe.candthesubgraph, . ce respectively.Wewillalsousethetransitiveclosureofthe +l0 \narrowsymbolstoindicatereachability(e.g.l.means l0 c thatthereisapathfromltointhe.csubgraph).Note thatwedonotmeanthetransitiveandrefexiveclosure; \nl. +ldoesnotholdingeneral. c WegiveourconstraintsolvingalgorithminFigure8.The generalstrategyistosystematicallyfndtheforcedlabelsin \ntheconstraintset,usingthefollowingobservations: Cyclesinthe.csubgraphcorrespondtoeagerlyre\u00adcursivefunctionsandcanonlybesolvedbymapping \nallofthelabelsinthecycleton. l0 l0l0 Ifl.corl.eandismappedton,thenl mustalsobemappedton.ThePropagatestepsare \nmotivatedbythisfact.  IfCisacycleinthesubgraph,wemustmapsome  . ct ofthethunklabelsinCton(otherwisewemayturn \nlazyrecursionintoeagerrecursion).Ifthereissome thunklabellfromwhichallofthelabelsinC(except possiblylitself,ifl2C)arereachableinthe \n. ce subgraph,itfollowsthatlmustbemappedton. Aspecialcaseofthisiswhenthecyclecontainsonly onethunklabell. \nAsanexampleofthelastpoint,considerthefollowingcon\u00adstraintset: 1.t2,2.t3,3.c1,2.e3 Wemustmapeither2or3ton.Ifwechoose3,wewill \nsoonfndthatwewillalsohavetomap2tonbecauseof theconstraint2.e3,butifwechoose2tostartwith,we canassign3afnitecost. \nWhenallforcedlabelshavebeenmappedtontheremay stillbecyclesinthegraphwhichhavenotyetbeen . ct brokenbymappingsomeofthethunklabelston.Wethen \npicksomearbitrarythunklabelsfromsuchcyclesandmap themton.Whennocyclesareleft,allnodesnotmapped toncanbemappedtofnitecostsinasinglebottom-up \ntraversal.Aswehavediscussedabove,cyclesinvolving.e edgesdonotnecessarilyforceanylabelston. Lemma1.ForeveryconstraintsetS,Solvecomputesa \n5suchthat5j=S.Furthermore,ifShasaminimalmodel, then5isthisminimalmodel. Proof:Wewillnotgiveaformalproofofthefrstpartof \nthelemma,sincewethinkthatthealgorithmisrelatively straightforward.Thesecondpartislessobvious,though. \nClearly,iftheloop:::endloopexitsonitsfrstiteration, thealgorithmwillonlymapforcedlabelstonandhence5 willbetheminimalmodelofS.Wewillnowprovethatif \nthisdoesnothappen,thenShasnominimalmodel. Whenthealgorithmreachestheifinthefrstiterationof theloop:::endloopwehavethefollowingsituation:Take \nanythunklabellwhichisnotyetmappedton.Forevery cycleCinthe.ctsubgraphthereissomethunklabel2 l0 C(distinctfroml)whichisnotreachablefromlinthe \n. cesubgraph(otherwiseCwouldhavebeencontainedin Rl[LabAbsandlwouldhavebeenmappedton).Thuswe canbreakCbymappingtonwithouthavingtomapl \nl0 ton.Thismeansthatwecanpickanarbitrarylabelland breakeverycycleinthe.ctsubgraphwithoutmappinglto n. \nIfthealgorithmdoesnotexittheloop:::endloopatthis point,thereisstillsome(unbroken)cycleinthe.ctsub\u00adgraph.Thusanymodel5ofSmapsatleastonemorelabel \nlton,butbecauseoftheaboveargument,weknowthat 50 theremustalsoexistsomeothermodelofSwhichdoes notmaplton.Hence5isnotminimal.2 \n 4. EXPERIMENTAL RESULTS Wehaveimplementedcheapeagernessinanexperimental compilerforasimplelazyhigherorderfunctionallanguage \ncalledPlain.Thecompilerhasa(ratherprimitive)strict\u00adnessanalyzerbasedondemandpropagationanda(rather sophisticated)fowanalyzerbasedonpolymorphicsubtype \ninference[2].Exceptbeingusedforcheapeagerness,thefow informationisexploitedbyupdateavoidanceandrepresen\u00adtationanalysis[4].Sinceseveraloptimizationsareprogram\u00adwide,separatecompilationisnotsupported.Thecompiler \nisdescribedmorefullyintheauthor'sPhDthesis[3,chapter 3]. Thecompilercanbeinstructedtogeneratecodecounting \nvariousevents,includingtheconstructionandevaluationof thunks.Wehavemeasureduserlevel(machine)instruc\u00adtioncountsusingtheicountanalyzerincludedintheShade \ndistribution.Theexecutiontimesmeasuredarethesumof userandsystemtimes,asreportedbytheclock()function, \nandistheaverageoffourruns.Bothtimesandinstruction countsincludegarbagecollection.Allmeasurementswere \nperformedonalightlyloadedSunUltra5workstationwith 128MBofmemoryanda270MHzUltraIIiprocessor. Wehavemadepreliminarymeasurementsoftheefective\u00adnessofcheapeagernessusingasetofsmalltestprograms \n(thelargestis.700linesofcode).Thesmallsizeofthe programsmakesanyclaimsbasedontheseexperimentsvery tentative.Withthiscaveat,wepresenttheprograms: \nnqhTheN-Queensprogramwrittenwithhigherorderfunc\u00ad tionswhereverpossible(appendisdefnedintermsof foldretc),runwithinput11. \nq1Sameasnqh,butwithallhigherorderfunctionsmanu\u00adallyremovedbyspecialization,runwithinput11. qfSameasq1,butwithdeforestration(seeWadler[18]) \napplied(alsomanually),runwithinput11. sortSortsalistof6000integersusinginsertionsort. factorFactorizesanumberintoprimesinaveryinefcient \nway,runwithinput1073602561. eventAsmalleventdrivensimulatorfromHartelandLan\u00adgendoensbenchmarksuite[6],runwithinput400000. \nschedAjobscheduler,alsofromthatbenchmarksuite,run withinput12. tcAsimplepolymorphictypecheckerfromthesamesource \n4 , runwithinput600. Therearetwosetsofmeasurements,withandwithoutcloning (seeSection3.2).Theprogramswhichonlyoccurwithout \ncloningwerenotafectedbyit;thenumbersareallthesame. InTable1wehavemeasuredtheexecutionoftheprograms withdiferentlevelsofaggressivenessforthecheapeagerness \noptimization: Nocheapeagernessatall,exceptforbuildableexpres\u00adsions.  Allevalsandfunctioncalls(exceptpartialapplica\u00adtions)consideredexpensive.Thisoptionwasimple\u00admentedbymarkingthelabelofeverythunkbodycon\u00adtaininganevalandthelabelofeverylambdaabstrac\u00adtionwhosebodywasnotanotherabstractionwithn. \nThisalternativecorrespondsroughlytowhatonecan accomplishwithoutaspecialcheapeagernessanalysis.  Asabove,butwithouttherestrictiononevals.This \nalternativecorrespondsroughlytotheanalysis(very) briefypresentedin[2].  FullcheapeagernessasdescribedinSection3.3. \n Whileonemustbeverycarefulindrawingconclusionsfrom suchasmallsetofnot-very-largeprograms,itseemsclear \nthatcheapeagernesspaysof.Fornoprogramdoesexecu\u00adtiontimeorinstructioncountincrease.Thebeneftvaries fromessentiallynone(sort),wheretheanalysisdoesnot \nfndanyimportantcheapandsafethunkstoeliminate,to dramatic(betterthanafactoroftwo)forqfwhichisdom\u00adinatedbyatailrecursivefunction(innerloop)withanon\u00adstrict,accumulatingparameter. \nThelargerprograms,event,schedandtc,allgetsome beneft,withareductioninthenumberofexecutedinstruc\u00adtionsvaryingfrom5%(sched)to26%(event).Thesmaller \nreductionsfortheseprogramshavetwocauses;frst,they excutecall-by-need-relatedoperationslessfrequentlythan \nsortandtheN-Queensvariants,ascanbeseenfromthe leftmostsetofcolumns,andsecond,asmallerpartofthose operationsareeliminated.Thelatterefectispartiallydue \ntomonovariance,astheimprovementachievedbycloning5 shows. Theimprovementsininstructioncountandexecutiontime \nareduenotonlytothethunkallocationsavoided,butalsoto 4Itiscalledtypecheckthere. 5Althoughtheclonedprogramsexecutefewerinstructions, \ntheirrun-timesarelonger.Thisefectisduetoanincrease inthenumberofmissesintheinstructioncache,causedby \ntheenormouscodegrowthassociatedwithouraggressive cloning.Wehaverecentlysolvedthisproblem[5],butnot intimetorerunallthetests.Theclonedversionsarenow \nfasterthanthosewithoutcloning. Th NocheapEvEcCoIn Ti AllevalsexpensiveThEvEcCoInTi AllcallsexpensiveThEvEcCoIn \nTi Somecallscheap ThEvEcCoInTi Withoutcloning nqh q1 qf sort factorevent schedtc 1213111269118 2414133518182235 \n11119126887 272530231212711 77754143277890504108913 3.62.31.75.40.53.90.66.7 47324100100679889 58522836451001001001009061100986889 \n37710580481001001001004484989910092 70554299100839879 47585237717032283605855445048421001001001001009999339909291637555374729598937597988667861009174 \n475852377170 32283605855 44504842 10010010010010099 99339909293 63755537473 909388759594 7964771008972 \n Withdeepcloning nqh sort eventschedtc 131211119 2235192035 1112987 182314711 724776437108843 3.45.43.80.97.1 \n47100679889 64521001008861100986989 010041984 72100839990 67998210291 432448058571001001001001009963725527780959393869610886618508791 \n43244805857 10010010010010099 61695427776 818575859188 73547008480 Nocheap:NumberofThunksbuiltandEvals,Ecalls(evalsappliedtothunks)andCoercions(boxingsandunboxings) \nexecutedper1000instructionsexecuted,followedbymillionsofInstructionsexecutedandexecutionTimeinseconds \nwithcheapeagernessdisabled. Otheroptions:Relativeoperationandinstructioncountsaswellasrelativeexecutiontime,allasperentages: \nOptimizedoperationcountortime x100 Unoptimizedoperationcountortime Table1:Diferentversionsofcheap theenablingofotheroptimizations.Inparticular,eliminat\u00adingthunksoftenenablestheeliminationofevaloperations \n(whichcanbeelidedifthecompilercanprovethatthear\u00adgumentwillalwaysbeawhnf),anditalsomakesitpossible touseunboxeddatarepresentationsmoreoften. \nInterestingly,thereductioninexecutiontimeis(almost) alwayslargerthanthereductionininstructioncounts,indi\u00adcatingthat\\expensive\"instructionsareeliminated. \nIfwecomparethereductionsinthenumberofthunksbuilt andthenumberofthunksevaluated,weseethatcheapea\u00adgernessfndsthunkswhichhaveanaboutaverageprobabil\u00adityofbeingevaluated;itdoesnotjustfndthunkswhich \nwouldnothavebeenevaluatedanyway.Combiningthisin\u00adformationwithacomparisonoftheratiosofthunksbuiltto instructionsexecutedandthunksevaluatedtoinstructions \nexecuted,weseethatbothbeforeandafteroptimization, mostthunksareevaluated.Wealsoseethatthereduc\u00adtionininstructioncountsincreasewhenwemovetowards \nmoreaggressiveoptimization.Speculativeevaluationpays ofevenforfunctioncalls! Wehavealsocomparedstrictnessanalysisandcheapeager\u00adnesssincetheyarebothoptimizationswhichreplacecall-by\u00adneedwithcall-by-value.TheresultsareshowninTable2. \nThestrictnessanalysiswhichisturnedonorofisthein\u00adterproceduralpartoftheanalysisdescribedin[3].Withthe \nanalysisturnedof,allfunctionsareconsiderednonstrict. eagerness(withstrictnessanalysis) theboundvariableisusedstrictlyinthebodywillnotget \nathunkwrappedaroundtherighthandside. Thebaselineofthecomparisonistheperformancewithnei\u00adtherstrictnessanalysisnorcheapeagernessturnedon,and \ntheotheralternativesarewithonlystrictnessanalysis,only cheapeagernessorbothturnedon(thecheapeagernessis \nthefullversionpresentedintherightmostcolumninTa\u00adble1). Theresultsindicatethatcheapeagernessmakesabigger \ndiferenceininstructioncountthanstrictnessanalysisforall programsexceptsched.Thisisaslightlysurprisingresult, \ngiventhatcheapeagernessissomuchlessstudiedinthe literature.Onemustnotforget,however,thatinthesetests \nwearepittingaverysimplestrictnessanalyseragainsta rathersophisticatedcheapnessanalysis(especiallywhenthe \ncheapnessanalyserishelpedbycloning).  5. RELATED WORK Earlierworkoncheapeagernessbasicallyfallsintogroups. \nFirst,thereistheworkontermination(latertotality)anal\u00adysis,pioneeredbyMycroft[10],wheretheobjectiveisto \nformulateananalysiswhichisabletoguaranteethatthe semanticsofanexpressionisnot..Mycroft'sfrst-order analysiswaslaterextendedtoahigher-orderlanguageby \nAbramsky[1]andsubsequentlyreformulatedasatotality typesystembySolberg[17]. Strictnessisstillpropagatedintraprocedurally;aletwhere \nNoneoftheseanalyseshandlelazydatastructures;thebase Withoutcloning Neithercheapnorstrict Strictbutnotcheap \nCheapbutnotstrict Cheapandstrict ThEvEcCoInTi ThEvEcCoInTi ThEvEcCoInTi ThEvEcCoInTi nqh q1 qf sort \nfactoreventschedtc 13151313611139 2717163719172631 12131213610118 253141251317610 861631518744876881421114 \n4.22.82.26.00.55.10.97.4 80756999100636572 80757099100766292 78736599100595768 97696199100539990 9087868383771049010398737776708291 \n372759899499483 482779933619656 403069899449382 37642511042989910093257102979078 6048359898579374 372439898405957 \n472129933565859 402639898335052 350098027490 6461 5045 4032 10489 9591 5456 7366 7365 Withdeepcloning \nnqh sort eventschedtc 1413131311 2537212634 131312119 232521611 838744568142973 3.76.05.41.29.9 8099636572 \n7999695990 7899595768 6799518787 869110490777176698772 3698499078 2299609453 3998448877 251989916410296079 \n5099588865 3598395353 1999485049 3798324348 0981740 5052 10489 5953 6961 7257 Neithercheapnorstrict:NumberofThunksbuiltandEvals,Ecalls(evalsappliedtothunks)andCoercions(boxings \nandunboxings)executedper1000instructionsexecuted,followedbymillionsofInstructionsexecutedandexecution \nTimeinsecondswithcheapeagernessandstrictnessanalysisdisabled. Otheroptions:Relativeoperationandinstructioncountsaswellasrelativeexecutiontime,allaspercentages: \nOptimizedoperationcountortime x100 Unoptimizedoperationcountortime Table2:Comparingcheapeagernesswithstrictnessanalysis \ndomainsareallfat.Verylittleisalsosaidabouthowthe informationistobeusedtotransformprograms.Inthe caseofrecursiveprograms,itisfarfromclearhowtogo \nfromananalysisresulttoacorrectprogramtransformation. Considerthefromprogram:Ifwehavenonfatdomainsfor \nlists,weclearlyhaveE[ frome] p=6.forallexpressions eandenvironmentspmappingfromtothesemanticsofits defnition,butevaluatingtherecursivecallspeculativelystill \nchangestheterminationbehaviouroftheprogram.Thisis anexampleofasituationwherealocallymeaningpreserving \ntransformationchangesthesemanticsofaprogramonthe globallevel,aproblemthathasbeenstudiedbyforinstance \nSands[13]. Ontheotherhand,wehavethemorepracticallyoriented workofJohnsson[9]andSantos[14].Theybothexploit \ncaseswhereallofthefreevariablesofanexpressionhave beenevaluatedbecauseofstrictoccurrencesnotinthespec\u00adulatedexpression.Considere.g.theexpressionx+g(x+1,y) \nwherexisclearlyusedstrictly.Sincexmustbeevaluated anyway,theotheroccurrenceofxrequiresnofurtherevalu\u00adation,makingx+1acheapandsafeexpression.Johnssonis \nalsoabletospeculatesomeexpressionsconditionallybased onrun-timeinformation,ageneralizationwebelievemight \nbeworthwilealsoinourcase.Itishoweverorthogonalwith respecttotheuseofglobalinformation. Itwouldbeinterestingtoseetheperformanceimprovements \ntheyget,butunfortunatelyneitherauthorpresentnumbers forthisparticulartransformation. 6. CONCLUSIONS \nAND FURTHER WORK Wehavepresentedwhattoourknowledgeisthefrstglobal cheapnessanalysisactuallyimplementedinacompiler.Our \nexperimentalresults,althoughtheyarebasedonnot-very\u00adlargeprograms,indicatethatcheapeagernesscancutin\u00adstructioncountssignifcantlyandthatourglobalanalysisis \naclearimprovementonpurelylocaltransformations. Theanalysercanhandledatastructuresandhigherorder functionsanddoesnotdependontheintermediatelanguage \nbeingtyped.Itisnotperfect,however.Themaindisadvan\u00adtageisthattheanalysisisnotcompositional;separatecom\u00adpilationisimpossible.Acompositionalanalysisisclearly \ndesirable,andissketchedintheauthor'sPhDthesis[3, chapter6]. Anespeciallyencouragingaspectofourresultsisthatthe \nmorewillingtheoptimizeristoconsiderthunkscheap,the largeristheperformanceimprovement.Thisindicatesthat \nitwouldbeusefultoconsiderevenmoreaggressiveversions ofcheapeagerness,especiallyasmostthunksstillremainin \nseveralprograms. Currently,weleaveathunkifeliminatingitwould changelazyrecursionintoeagerrecursion.Thisisnec\u00adessarytoavoidanunboundedamountofextrawork; \nifwecouldboundthisamount,wecouldliftthere\u00adstriction.Onewayofachievingthisistomaintaina speculationlevelasanewabstractmachineregister, \ninitializedtoasmallpositiveinteger(e.g.4).When reachingsuchacycle-breakingthunk,thespeculation counterischecked:Ifitispositive,itisdecremented \nandthethunkbodyisspeculativelyevaluated(and thenthespeculationcounterisincremented),other\u00adwiseathunkisbuilt. \n Thunkswhichcontainoperationswhichmaycauserun\u00adtimeerrors,suchasdivideswherethedivisorcannot beprovedtobenonzero,areneverspeculatedinour \ncurrentsystem.Ifthedangerousargumentsareavail\u00adable(i.e.asfreevariablesofthethunk),wecouldtest whetherforinstanceadivisorreallyiszeroandonly \nbuildathunkinthatcase.  Ifwespeculatemorethunksconditionallyinthisway, manyevalswhichwecannotprovewillneverseea \nthunk,willseeawhnfmostofthetime.Thuswecould checkiftheargumenttoanevalinathunkisawhnf andonlybuildthethunkinthatcase. \n Giventhelargepartofthethunksbuiltbyaprogramthat arealsoevaluated,andtheideasabove,wethinkthatcheap \neagerness,alreadyquiteworthwhile,hasalotmoretogive inthefuture! 7. ACKNOWLEDGEMENTS ThankstoAlanMycroftforanenlightningemaildiscussion \naboutcheapeagernessandtoallofthosewhotriedtohelp mefndoutwhocoinedtheterm\\cheapeagerness\"(itsur\u00adfacedsomeyearsafterAlan'swork).Ifyouknowwhoit \nwas,pleasesendmeanemail! 8. REFERENCES [1]S.Abramsky.Abstractinterpretation,logicalrelations andKanextensions.JournalofLogicand \nComputation,1(1):5{39,1990. [2]Karl-FilipFaxeen.Optimizinglazyfunctionalprograms usingfowinference.InAllanMycroft,editor, \nProceedingsoftheSecondInternationalSymposiumon StaticAnalysis,pages136{153,Glasgow,UK, September1995.Springer-Verlag. \n[3]Karl-FilipFaxeen.Analysing,Transformingand CompilingLazyFunctionalPrograms.PhDthesis, DepartmentofTeleinformatics,RoyalInstituteof \nTechnology,June1997. [4]Karl-FilipFaxeen.Representationanalysisforcoercion placement.InKonstantinosSagonasandPaulTarau, \neditors,ProceedingsoftheInternationalWorkshopon ImplementationofDeclarativeLanguages,September 1999. \n[5]Karl-FilipFaxeen.Thecostsandbeneftsofcloningin alazyfunctionallanguage.Toappearin:DraftProcs, 2ndScottishWorkshoponFunctionalProgramming \n(Eds.StephenGilmoreandKevinHammond),July 2000. [6]PieterHartelandKoenLangendoen.Benchmarking implementationsoflazyfunctionallanguages.In \nFunctionalProgramming&#38;ComputerArchitecture, pages341{349,Copenhagen,June93. [7]NevinHeintze.Set-basedanalysisofMLprograms.In \nProc.ACMConferenceonLISPandFunctional Programming,1994. [8]SureshJagannathanandStephenWeeks.Aunifed treatmentoffowanalysisinhigher-orderlanguages. \nInPrinciplesofProgrammingLanguages,1995. [9]T.Johnsson.Efcientcompilationoflazyevaluation. InM.VanDeusen,editor,Compilerconstruction: \nProceedingsoftheACMSIGPLAN'84symposium (Montreal,Canada,June17{22,1984),volume19(6) ofACMSIGPLANNotices,pages58{69,NewYork, \nNY,USA,June1984.ACMPress. [10]AlanMycroft.Thetheoryandpracticeoftransforming call-by-needintocall-by-value.InProceedingsofthe \n4thInternationalSymposiumonProgramming,pages 269{281.SpringerVerlag,April1980.LNCS83. [11]SimonPeytonJonesandJohnHughes.Reportonthe \nprogramminglanguageHaskell98.Downloadablefrom www.haskell.org,February1999. [12]SimonLPeytonJonesandJohnLaunchbury. \nUnboxedvaluesasfrstclasscitizensinanon-strict functionallanguage.InJohnHughes,editor,FPCA '91,pages636{666.SpringerVerlag,1991.LNCS523. \n[13]DavidSands.Totalcorrectnessbylocalimprovement inthetransformationoffunctionalprograms.ACM TransactionsonProgrammingLanguagesand \nSystems,18(2):175{234,March1996. [14]AndreeSantos.CompilationbyTransformationin Non-StrictFunctionalLanguages.PhDthesis,Glasgow \nUniversity,DepartmentofComputingScience,1995. [15]PeterSestoft.Analysisandefcientimplementationof functionalprograms.PhDthesis,DIKU,Universityof \nCopenhagen,Denmark,October1991. [16]O.Shivers.ThesemanticsofSchemecontrol-fow analysis.InProceedingsoftheSymposiumonPartial \nEvaluationandSemantics-BasedProgram Manipulation,volume26,pages190{198,NewHaven, CN,June1991. [17]KirstenLacknerSolberg.Strictnessandtotality \nanalysiswithconjunction.InProceedingsof TAPSOFT'95,pages501{515.SpringerVerlag,1995. LNCS915. [18]PhilipWadler.Deforestration:Transformingprograms \ntoeliminatetrees.InHaraldGanzinger,editor,ESOP '88,pages344{358.SpringerVerlag,1989. [19]PhilipWadlerandR.J.M.Hughes.Projectionsfor \nstrictnessanalysis.InFunctionalProgramming&#38; ComputerArchitecture,Portland,Oregon,September 1987. \n'0 p`e+wrong w-let ' 0 p`letx.eine+wrong ' p`e+v spec-thunk 'l p`thunke+v 0 p(x)=(p,b)b6::'(x) wrong \n' p`e+wrong l b::Bifb2Borb=Clandopx1:::xr2B Figure9:Extrarulesforcheckingfowinformation APPENDIX A. \nINFINITE VALUES Thesemanticsusesinfnitelynestedclosures.Wewillhere giveaformaldefnitionofthese.Let~xrangeoverfnite \nsequencesofvariablesandletx.~xbethexfollowedbythe sequence~xand~x.xbethesequence~xfollowedbyx.The emptysequenceiswrittenasE. \nDefinition3.Avalueisafunctionffromsequencesof variablestobuildableexpressionssuchthatiff(~x)=bthen f(~x.x)isdefnedifx2FV(b).Further,f(E)isalways \ndefnedandiff(~x.x)isdefned,thensoisf(~x)(thedomain offisclosedundertakingofprefxes). IfpisanenvironmentandFV(b).Dom(p)wewillwrite \n(p,b)forthevaluefsuchthatf(E)=bandf(x.~x)=p(x)(~x) ifx2FV(b)and~x2Dom(p(x)). Thefollowinglemma,whichwestatewithoutproof,tellsus \nthatthesemanticsofletrecexpressionsmakessensesince theequationwhichoccurstherehasauniquesolution. Lemma2.Anequationoftheform \n00 0 p=p[x1!7(p,b1),:::,xn7!(p,bn)] hasauniquesolutionp 0givenby p 0(x)(~x)=p(x)(~x)ifx26fx1,:::,xng \np 0(xi)(x.~x)=p 0(x)(~x)ifx2FV(bi) p 0(xi)(E)=bi wheretheinductioninthemiddlelineiswell-foundedsince \n~xisalwaysoffnitelength. B. SAFE FLOW ASSIGNMENTS InthisAppendixwemakegoodonourpromisetogivea formaldefnitionofcorrectfowinformationbydefningan \nextensiontotheoperationalsemanticsofFleetpresentedin Section2.Thisnewsemantics,whichconsistsofallofthe \nrulesinthestandardsemanticsplusthreenewrules(givenin Figure9)isparameterizedwithrespecttoafowassignment \n'.Thusthejudgementsintheextendedsystemhavethe form p` ' e+v wherep,eandvareasintheoriginalsystemexceptthat \nthereisadistinguishederrorvaluewrong,whichisgenerated andpropagatedbythenewrules. Thefowassignmentischeckedinthe[wrong]rule.Ifthe \nvalueofanyvariableintheenvironmentfailstomatchthe fowinformationforthisvariable,wrongisgeneratedand propagatesthroughthe[w-let]ruletotherootofthederiva\u00adtion.Thematchingpredicate,::,issatisfediftheexpression \npartoftheclosureisincludedinthefowinformationorif theexpressionpartisaconstructorproducedbyanopera\u00adtorapplication(whichimparteditslabeltotheconstructor) \nincludedinthefowinformation. The[spec-thunk]ruleisneededsincewewillspeculatively evaluateathunkbodywhichwouldnothavebeenevaluated \nintheoriginalprogram.Wemustthuscatchanyviolations ofthefowassignmentduringtheevaluationofthethunk body.Wemustalsotakeaccountofthefactthatwhen \nwehaveeliminatedathunk,somevariableswhichhadbeen originallyboundtothethunkmaynowbecomeboundtothe valuethethunkbodyevaluatesto,sowemustnotaccept \nassafefowinformationwhichdoesnottakethispossibility intoaccount. Definition4.Wesaythat'issafewithrespecttop,e \nifp` ' e+wrongisnotderivableintheextendedsystem. C. CORRECTNESS Thissectionsketchesacorrectnessproofforthecheapea\u00adgernesstransformation.Wedonotgiveallthedetailsof \ntheproof,butwehavechoppedtheproofintosmallenough piecesthatwehopethattheinterestedreadercanrecon\u00adstructit. \nWewillneedanumberofdefnitionsforstatingthecorrect\u00adnessresultanditssupportinglemmas.First,anotationfor \nthetransformationtoperform: Definition5.Wewillwriteen5where5isacostas\u00adsignemnt,fortheexpressionewithanyoccurrencesofa \nsubexpressionthunkl e 0suchthat5(l)6=nreplacedbye 0 . Aprogramwillnotcomputeexactlythesamevalueafter \ncheapeagernessasbeforesincesomethunkswillbereplaced byweakheadnormalforms.Rather,thevalueswillbere\u00adlatedbythefollowingrelation: \nDefinition6(Approximation).Wesaythatavalue (p,b)i,5-approximatesavalue(p.,b.),written(p,b)-i. (p.,b.)if \n i=0,or  bn5=b.andb.n5=b.andp-.i;1 p.,or  b=thunkl eand5(l)6nandifp`e+vthen  = v-i.(p.,b.). Wesaythatpi,5-approximatesp.ifDom(p)=Dom(p.) \nandp(x)-i.p.(x)foreveryx2Dom(p). Further,wesaythatv5-approximatesv.,writtenv-v. ifforalli0v-i v.andsimilarlyforp-p.. \nDefinition7(5-freeness).Wesaythatanenviron\u00admentp.isi,5-freeifi=0or,foreveryx2Dom(p.)there 0 00 ... areb.andpsuchthatp.(x)=(p,b.)andpis(i;1),5\u00adfreeandb.n5=b..Wesaythatp.is5-freeifforalli0 \np.isi,5-free. Notetheuseofinductioninthesedefnitions.Thisisnec\u00adessarysinceclosuresmaybeinfnitelynested.Therefore, \nwewilltypicallyrelyoninductionoveriinv-i v..We willfollowtheconventionofusingv.,p.,:::formoremore evaluatedvalues. \nDefinition8.Wewillwrite5j= ' e:Ltomeanthat thereareSandlsuchthatS` ' e:land5j=Sand 5(l)=L,and  foreveryx2Dom(')ande2'(x)thereareSandl \nsuchthatS` ' e:land5j=S.  Whenevaluatinganoptimizedprogram,wedoofcoursenot getacompletelydiferentvalue,afactweformalizeinthe \nlemmabelow.Ifwehadusedadenotationalsemanticsin\u00adsteadofanoperationalone,wewouldhavegottenthisresult forfree,asitwhere.Theresultisreallyveryobvious;ifwe \nspeculatesomethunksandtheevaluationoftheprogram stillterminates,wewillgetessentiallythesamevalue. Lemma3(Monotonicity).Ifp`e+vandp-p. \nandp. `en5+v.,thenv-v.. Proofsketch:Byinductionontheheightofthederivation ofp. `en5+v.. 2 Wearenowreadytostatethecruciallemma;thatanex\u00adpressiontheanalysisthinksischeapandsafereallyischeap \nandsafe.Theconditionthattheenvironmentbe5-freeis relatedtocorrectnessofeliminatingsetsofmutuallyevalu\u00adatingthunks. \nLemma4(Termination).If'issafewithrespectto p,eand5j= ' e:L,whereL=6n,andp.is5-freethen p. `en5+v.forsomevaluev.. \nProofsketch:Byinductiononkin5j= ' e:kandonthe sizeofe. 2 Wefnallyarriveatthemaincorrectnesslemma,whichsays \nthatifweeliminatesomethunkswhichtheanalysisthinks aresafetoeliminate,andiftheoriginalprogramterminated, \nthenthenewonewillterminatetoo. Lemma5.If'issafewithrespecttop,eand5j= ' e:L andp`e+vandp-p.thenp. `en5+v.forsome \nvaluev.. Proofsketch:Byinductionontheheightofthederivation ofp`e+v.Theproofusesbothoftheabovelemmas.2 \nCorollary6.Ifeisclosedand'issafewithrespectto [],eand5j= ' e:Land[]`e+vthen[]`en5+v.for somev.suchthatv-v.. \nWewillnowturnourattentiontoensuringthatthecon\u00additionsintheabovelemmacanbemet.Inparticular,our aimistoprovethattheanalysiscomputesa5suchthat \n5j= ' e:LforsomecostL.Todothis,weneedanaddi\u00adtionalconditiononthefowassignment'. Definition9.Ifeisaclosedexpressionwesaythat' \nisparsimoniouswithrespecttoeifforeveryx2Dom(') ande 02'(x)wehavethate 0isasubexpressionofe. Notethatitiseasytoseethatforeveryclosedexpression \neandfowassignment'whichissafewithrespecttoe,[] (theemptyenvironment)thereisapasimoniousandsafe fowassignment'0withthesamedomainas'andsuch \nthat'0(x)'(x)forallx2Dom('). Lemma7.Ifeisaclosedexpressionand'isparsimo\u00adniouswithrespecttoeandS` ' e:land5j=S,then \n5j= ' e:5(l). Proof:Sinceeveryexpressione 0intherangeof'isasubex\u00ad''0l0l0 pressionofeandS`e:lwehaveS`e:whereis \nthelabelofimmediatelyenclosingthunkorfunctionbody ofe 0ine. 2 Lemma8(Correctness).Ifeisaclosedexpression, \n'isparsimoniouswithrespecttoeandsafewithrespectto e,[],lisanarbitrarylabelnotoccurringine,5=Solve(S), \nS=Constraints(',l,e)and[]`e+vthen[]`en5+v. forsomev.suchthatv-v.. Proof:CombineLemma1,Lemma7andCorollary6.2 \n\t\t\t", "proc_id": "351240", "abstract": "Cheap eagerness is an optimization where cheap and safe expressions are evaluated before it is known that their values are needed. Many compilers for lazy functional languages implement this optimization, but they are limited by a lack of information about the global flow of control and about which variables are already evaluated. Without this information, even a variable reference is a potentially unsafe expression!In this paper we show that significant speedups are achievable by cheap eagerness. Our cheapness analysis uses the results of a program-wide data and control flow analysis to find out which variables may be unevaluated and which variables may be bound to functions which are dangerous to call.", "authors": [{"name": "Karl-Filip Fax&#233;n", "author_profile_id": "81100421611", "affiliation": "Dept. of Teleinformatics, KTH, Stockholm", "person_id": "P157333", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/351240.351255", "year": "2000", "article_id": "351255", "conference": "ICFP", "title": "Cheap eagerness: speculative evaluation in a lazy functional language", "url": "http://dl.acm.org/citation.cfm?id=351255"}