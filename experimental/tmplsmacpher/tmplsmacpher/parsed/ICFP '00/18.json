{"article_publication_date": "09-01-2000", "fulltext": "\n Intersection Types and Computational Effects * Rowan Davies Department of Computer Science Carnegie \nMellon University Pittsburgh, PA 15213, U.S.A. rowan@cs.cmu.edu ABSTRACT Weshowthatstandardformulationsofintersectiontypesys\u00adtemsareunsoundinthepresenceofcomputationalefects, \nandproposeasolutionsimilartothevaluerestrictionfor polymorphismadoptedinthereviseddefnitionofStandard \nML.Itdifersinthatitisnottiedtolet-expressionsandre\u00adquiresanadditionalweakeningoftheusualsubtypingrules. \nWealsopresentabi-directionaltype-checkingalgorithmfor theresultinglanguagethatdoesnotrequireanexcessive \namountoftypeannotationsandillustrateitthroughsome examples.Wefurthershowthatthetypeassignmentsys\u00adtemcanbeextendedtoincorporateparametricpolymor\u00adphism.Takentogether,weseeoursystemandassociated \ntype-checkingalgorithmasasignifcantsteptowardsthein\u00adtroductionofintersectiontypesintorealisticprogramming \nlanguages.Theaddedexpressivepowerwouldallowmany morepropertiesofprogramstobestatedbytheprogrammer andstaticallyverifedbyacompiler. \n Categories and Subject Descriptors F.3.3[LogicsandMeaningsofPrograms]:Studiesof ProgramConstructs|typestructure;D.3.3[Programming \nLanguages]:LanguageConstructsandFeatures|polymor\u00adphism;F.3.1[LogicsandMeaningsofPrograms]:Spec\u00adifyingandVerifyingandReasoningaboutPrograms \n General Terms Languages,Theory,Verifcation 1. INTRODUCTION Theadvantagesofstaticallytypedprogramminglan\u00adguagesarewellknown,andhavebeendescribedmanytimes \n* ThisworkwassponsoredinpartbytheAdvancedResearch ProjectsAgencyCSTOunderthetitle\\TheFoxProject: AdvancedLanguagesforExtensibleSystems\",ARPAOrder \nNo.C533. Permission to make digital or hard copies of all or part of this work for personal or classroom \nuse is granted without fee provided that copies are not made or distributed for pro.t or commercial advantage \nand that copies bear this notice and the full citation on the .rst page. To copy otherwise, to republish, \nto post on servers or to redistribute to lists, requires prior speci.c permission and/or a fee. ICFP \n00, Montreal, Canada. Copyright 2000 ACM 1-58113-202-6/00/0009 ..$5.00 Frank Pfenning Department of Computer \nScience Carnegie Mellon University Pittsburgh, PA 15213, U.S.A. fp@cs.cmu.edu (see,forexample,[3]).However,conventionaltypesystems \nforrealisticprogramminglanguagescannotexpress,and thereforenotcheck,manyinterestingprogramproperties. \nInpriorresearchwehavedesignedanextensionofML's typesystemtocaptureinvariantsofdatastructures.In theresultinglanguageofrefnementtypes[7,5,4]wecan \ndefnesubtypesofdatatypes,essentiallyviaregulartree grammars.Experimentswithrefnementtypesandrelated workonsofttypes[1,21]havedemonstratedtheutilityof \ntheadditionalexpressivepowertocatchmoreprogrammer errorsandgivestrongerguaranteesatmoduleboundaries. \nForpracticalpurposes,refnementsrequireatleastsome formofintersectiontypes,becauseagivenfunctionmay havemorethanoneproperty.Asasimpleexample(elabo\u00adratedinSection5),considerthetypesnatofnaturalnum\u00adbersandposofpositivenaturalnumberswherepos:nat. \nThenthefunctiondoublemapsnaturalnumberstonat\u00aduralnumbers(nat!nat),butalsomapspositivenum\u00adberstopositivenumbers(pos!pos)andhencehastype \n(nat!nat)^(pos!pos). Inthispaperwedemonstratethatgeneralintersection typesareunsoundinthepresenceofcomputationalefects \nandmaketwomajorcontributionstowardstheuseofinter\u00adsectiontypesinpracticalprogramminglanguages: 1.Weproposeasimpletypeassignmentsystemforacore \nfunctionallanguagewithmutablereferencesandinter\u00adsectiontypesandprovethatitissound,and 2.wedesignacorrespondingsourcelanguagethatper\u00admitsbi-directionaltype-checkingwithoutbeingpro\u00adhibitivelyverbose. \nWeillustratetheresultingcorelanguagewithsomesmall examples.Ourrestrictionissimilartothevaluerestriction \nemployedinML[10]inordertoavoidunsoundusesofpara-metricpolymorphism(see[17,20]).However,inaddition toavaluerestrictionontheintroductionofintersections, \nwealsoneedtodiscardthedistributivitylawforsubtyping, leadingtoasystemwhichisoverallsignifcantlysimpler \nthangeneralintersectiontypeswithoutanoticeablelossin expressivepoweroraccuracy. Refnementtypesdiferfromintersectiontypesinthat \ntheintersectionA^BcanonlybeformedifAandBare specializationsofthesamesimpletype.Wedonotimpose thisadditionalrequirementhere,sinceitisorthogonalto \nbothsoundnessinthepresenceofefectsandtheissueofbi\u00addirectionaltypechecking.Soourresultsapply,forexample, \ntooperatoroverloadingandevenself-application.Onthe otherhand,wehavechosenaninclusioninterpretationof \nsubtypingwhichallowsustogiveanuntypedoperational semanticswithoutexplicitcoercions.Thisissufcientfor \nrefnementtypesandcouldeasilybeextendedtoacoercive interpretationofsubtypingandintersections[2,15]. Finally,weshowhowourtypeassignmentsystemcanbe \nextendedtoincludeavalue-restrictedformofparametric polymorphism.However,wedonotshowhowtoextendour sourcelanguage,sinceageneralizationofbi-directionaltype \ncheckingtolocaltypeinference[13]inthepresenceofpoly\u00admorphism,subtyping,intersections,andavaluerestriction \ndoesnotappearstraightforward. Weclosetheintroductionwithasimpleexamplethatil\u00adlustratestheunsoundnessofintersectioninthepresenceof \nmutablereferences.Similarcounterexamplescanbecon\u00adstructedforothercomputationalefectssuchasexceptions. \nAssume,asabove,thatpos:nat.Weworkwitharepresen\u00adtationofnaturalnumbersasbitstringssothatErepresents 0andE1represents1. \nletx=ref(E1):natref^posref inlety=(x:=E) inletz=!x inz:pos Inthisexample,wecreateanewcellwithinitialcontents \nE1andassignthetypenatref^posref.Certainly,both ofthesearevalidtypesforx,sincethecontentsofthecell isbothoftypenatandtypepos.ThenweassignEtox, \nwhichiswell-typedsincexhastypenatref,amongothers. Thenwereadthecontents,requiringtheresulttohavetype \npos,whichisvalidsincexhastypeposref,amongothers. Duringevaluation,however,zwillbeboundtoE,sothe typesystemisunsound:thewholeexpressionhastypepos, \nbutevaluatestoEwhichrepresentszeroanddoesnothave typepos. Theremainderofthispaperisorganizedasfollows.In \nSection2weshowthatavaluerestrictiononintersection introductionleadstoasoundtypeassignmentsystemfora smallfunctionallanguageincludingmutablereferences.In \nSection3wepresentacorrespondingsourcelanguageand abi-directionaltype-checkingalgorithm.Ourtypesystem \nisgeneralizedtoincludeparametricpolymorphisminSec\u00adtion4andillustratedbyvariousexamplesinSection5.We concludewithsomeremarksaboutfutureworkinSection6. \n 2. A VALUE RESTRICTION FOR INTER-SECTION TYPES Inthissectionwepresentasmalllanguagewithfunctions, mutablereferences,andintersectiontypes.Wealsoinclude \nanexampledatatypebitsforstringsofbits,alongwithtwo subtypesnatfornaturalnumbers(bit-stringswithoutlead\u00adingzeroes)andposforpositivenaturalnumbers.Weplace \navaluerestrictionontheintroductionofintersections,omit theproblematicdistributivityrulefromsubtyping,andthen \nshowthatthisleadstoasoundsystembyprovinganappro\u00adpriateprogressandtypepreservationtheorem.Ananalysis oftheproofgivessomeinsightastowhyeachofourrestric\u00adtionsisrequired. \nThetermlanguageinthissectiondoesnotcontaintypes forseveralreasons: 1.thetypingrulesaremaximallygeneral,admittingas \nmanyprogramsaspossible, 2.theprogresstheoremdemonstratesthatanuntyped operationalsemanticsissound(i.e.,typesmay,but \nneednotbecarriedatruntime),and 3.formulatingreductionrulesdirectlyontermswith sometypeannotationsasinSection3isawkwardat \nbest. Typeinferenceforthislanguageismostlikelyundecid\u00adable,andprincipaltypesdonotexist.Thereforewepresent \namorepracticalsourcelanguagewhichincludessometype informationandanassociatedbi-directionaltypechecking \nalgorithminSection3.Theuntypedtermsinthissection canbeobtainedsimplybyerasurewhichwouldnaturally bepartofthecompilationprocess(seeTheorem7).We \navoidcoercionsbyconsideringonlysubtyperelationswhich areinclusions,butthisisnotanessentialrestrictionofour \napproach. 2.1 Syntax Thesyntaxisrelativelystandardforacall-by-valuelan\u00adguageintheMLfamily.Weallowgeneralfxed-points \nwitheagerunrolling,whichmeansweshoulddistinguishtwo kindsofvariables:thoseboundinA,letandcaseexpres\u00adsionswhichstandforvalues(denotedbyx),andthosebound \ninfxexpressionswhichstandforarbitraryterms(denoted byu).AsproposedbyLeroy[9],wecanalsoeasilyadmit a\\byname\"letexpression.Wefurtheruseidentiferslto \naddresscellsinthestoreduringevaluation. Werepresentnaturalnumbersasbit-stringsinstandard form,withtheleastsignifcantbitrightmostandnoleading \nzeroes.Weview0and1asconstructorswritteninpostfx form,andEstandsfortheemptystring.Forexample,6 wouldberepresentedasE110. \nTypesA::=A1!A2jArefjunit jbitsjnatjposjA1 ^A2 TermsM::=xjAx:MjM1M2 jletx=M1inM2 jujfxu:M jljrefMj!MjM1:=M2j() \njEjM0jM1 jcaseMofE)M1|x0)M2|y1)M3 WeuseACBfortypesandMCNforterms.Wewrite fM0IxgMfortheresultofsubstitutingM0 \nforxinM,re\u00adnamingboundvariablesasnecessarytoavoidthecapture M0 offreevariablesin. Wedistinguishthefollowingtermsasvalues: \nValuesV::=xjAx:Mjlj()jEjV0jV1 Fortype-checking,weneedtoassigntypestovariables andcellsincontexts;andf,respectively.Moreover,dur\u00adingexecutionofaprogramweneedtomaintainastoreC. \nVariableContexts;::=\u00b7j;Cx:Aj;Cu:A CellContextsf::=\u00b7jfCl:A StoreC::=\u00b7jCC(l=V) ProgramStatesP::=C.M WeassumethatvariablesxCuandcellslcanbedeclared \natmostonceinacontextorstore.Weomitleading\u00b7'sfrom contexts,andwrite;C;0 fortheresultofappendingtwo variabledisjointcontexts(andsimilarlyforcellcontextsand \nstores).  2.2 Subtyping Thesubtypingjudgmentforthislanguagehastheform: A:BTypeAisasubtypeofB. Itisdefnedbythefollowingrules,whicharestandard \nexceptfortheomissionofdistributivity(seebelow)andthe additionofsubtypingforthebasetypesbits,natandpos. \nNotethatfunctiontypesarecontra-variantintheargument andco-variantintheresult,whilethereftypeconstructor \nisnon-variant. pos:natnat:bits A1:A2A2:A3 A:AA1:A3 A 1 ^A2:A1 A1 ^A2:A2 A:B1 A:B2 A:B1 ^B2 B1:A1 A2:B2 \nA1!A2:B1!B2 A:BB:A Aref:Bref Asmentionedearlier,weomitthefollowingdistributivity rulesinceitleadstounsoundnesswhenfunctionsinvolve \nefects: 00 (A!B)^(A!B):A!(B^B) Acounterexampleisgivenby(Ax:ref(E1))()which wouldhavetype(natref)^(posref)since \n(Ax:refE):(unit!natref)^(unit!posref) andtheaboveruleallowsustoinfer (unit!natref)^(unit!posref) :unit!(natref^posref) \nInotherwords,distributivitywouldallowustocircum\u00adventthevaluerestrictionontheintroductionofintersec\u00adtionsgiveninthenextsubsection.Itissomewhatsur\u00adprising,however,thatitispossibletosimplydroptherule \nandobtainasensiblesystem.Thelossinexpressivepower thatresultsappearstobeminimalinpractice,sinceoften \nwhenwewanttocoercetype(A!B)^(A!)totype B0 B0 A!(B^)wecanreplacethefrsttypebythesecond throughoutthetypederivation(possiblyusing7-expansion \ntosatisfythevaluerestrictiononintersectionintroduction, similarto[20]).Droppingdistributivityhastheinteresting \nefectthatthesubtypingrulesforvarioustypeconstructors (!,ref,^)arenoworthogonal.Thispersists,evenwhen \nfurtherconstructorssuchasproductsorlistsareadded. Therulesabovedonotimmediatelyyieldanalgorithm fordecidingsubtyping.Wethuspresentthefollowingalgo\u00adrithmicsubtypingjudgment,andshowthatitisequivalent \nAo totheabove.Weusethenotationforanordinarytype, namelyonethatisnotanintersection,althoughitmaycon-tainembeddedintersections.Duetotheabsenceofdistribu\u00adtivity,oursubtypingalgorithmisquitediferenttoprevious \nalgorithmsproposedReynolds[14]. A BTypeA forintersectiontypes,suchasisalgorithmicallyasubtypeof thaB. \nt of p os p os p os nat p os bits nat nat nat bits bits bits B1 A1 A2 B2 A1!A2 B1!B2 A BAref B A \nBref unit unit A1 A1 ^A2 Bo Bo A2 A1 ^A2 Bo Bo Wenowpalgorithmic A B1 A B1 A B1 ^B2 rovesomesimplelemmasneededtoanddeclarativesubtypingcoincide. \nshow t h a t Lemma1(AlgorithmicSubtyping). Thealgorithmicsubtypingjudgmentsatisfes: 1.IfA BthenA^A0 BandA0^A \nB. 2.A A. 3.IfA1 A2andA2 A3thenA1 A3. Proof.Bysimpleinductionsongiventypesorderiva\u00adtions.Refexivity(2)requiresmonotonicity(1). \nTheorem2.A BifandonlyifA:B. Proof.Ineachdirection,byinductiononthegiven derivation,usingthepropertiesintheprecedinglemma. \n 2.3 Typing Thetypingjudgmentfortermshastheform: f;;`M:ATermMhastypeAincellcontextf andvariablecontext;. \nThetypingrulesaregiveninFigure1.Theserulesare standardforfunctions,defnitions,fxedpoints,references, \nandintersectiontypes,withtheexceptionthattheintro\u00adductionruleforintersectionsisrestrictedtovalues. Therearethreetypingrulesforcase,dependingon \nwhetherthesubjectcanbeshowntohavetypebits,nat, orpos.Thisillustratesthatinatypicaluseofintersections \nasrefnements,wederiveintroductionaswellaselimina\u00adtionrulesforeachtype.NotethatthebranchforEdoes notneedtobecheckedwhenthecasesubjecthastypepos. \n x:Ain; tpvar f;(;Cx :A)`M:B tplam f;;`M:A!B f;;`N:A tpapp f;;`x:A f;;`Ax:M:A!B f;;`M N :B f;;`M:Af;(;Cx:A)`N:Bu:Ain;f;(;Cu:A)`M:A \n0 tplet tpvar tp.x f;;`letx=MinN:Bf;;`u:Af;;`fxu:M:A l:Ainff;;`M:Af;;`M:Aref tpcell tpref tpget f;;`l:Areff;;`refM:Areff;;`!M:A \nf;;`M:Areff;;`N:A tpset tpunit f;;`M:=N:unitf;;`():unit tpe f;;`E:nat f;;`M:pos f;;`M:bits tpz1 tpz2 \nf;;`M0:pos f;;`M0:bits f;;`M:nat f;;`M:bits tpo1 tpo2 f;;`M1:pos f;;`M1:bits f;;`M:bitsf;;`M1:Af;(;Cx:bits)`M2:Af;(;Cy:bits)`M3:A \ntpcase1 f;;`caseMofE)M1|x0)N2|y1)M3:A f;;`M:natf;;`M1:Af;(;Cx:pos)`M2:Af;(;Cy:nat)`M3:A tpcase2 f;;`caseMofE)M1|x0)N2|y1)M3:A \nf;;`M:posf;(;Cx:pos)`M2:Af;(;Cy:nat)`M3:A tpcase3 f;;`caseMofE)M1|x0)N2|y1)M3:A f;;`V:Af;;`V:Bf;;`M:AAB \ntpconj tpsubs f;;`V:A^B f;;`M:B Figure1:TypingRules Weomitformalstatementandproofofthetrivialexchange, \nLemma4(TypingInversion). weakening,andcontractionproperties. Thistypesystemdoesnotadmitprincipaltypes.For \nexample,thetermref(E1)hasthetypesbitsref,natref andposref,butnoneoftheseisasubtypeoftheothers. Evenifweaddparametricpolymorphism(asinSection4), \nthistermhasnoprincipaltype. Thevaluerestrictiononintersectionintroductiondoesnot appeartoresultinmuchlossofexpressivepower,particu\u00adlarlysincenon-valuesmaybe7-expandedtovalues,justas \nin[20].Thisonlyaltersthesemanticsoftheprogramwhen efectsareinvolved. Lemma3(Substitution). 1.Iff;;`V:Aandf;(;Cx:A)`N:B \nthenf;;`fVIxgN:B. 2.Iff;;`M:Aandf;(;Cu:A)`N:B thenf;;`fMIugN:B. Proof.Byastandardinductiononthetypingderivation \nforN. Storesaretypedusingthefollowingjudgment: 0 f0 f`C:fStoreCsatisfescellcontextwhencheckedagainstcellcontextf. \nTherulessimplytypeeachvalueunderanemptyvariable context. f`C0 :f0 f;\u00b7`V:A f`\u00b7:\u00b7f`(C0Cl=V):(f0Cl:A) Thefollowingjudgmentdefnestypingofprogramstates: \n`(C.M):(f.A)State(C.M)satisfes cellcontextfandtypeA. Itisdefneddirectlyfromtheprevioustypingjudgments: \nf`C:ff;\u00b7`M:A `(C.M):(f.A)  2.4 Reduction Semantics Wenowpresentareductionstylesemanticsforourlan\u00adguage,roughlyfollowingWrightandFelleisen[22].Westart \nbydefningevaluationcontexts,namelyexpressionswitha hole[]withinwhichareductionmayoccur: E::=[]jEMjVE \njletx=EinM jrefEj!EjE:=MjV:=E jE0jE1 jcaseEofE)M1|x0)M2|y1)M3 WewriteC.M7;!C0 .M0 foraone-stepcomputation, \ndefnedbythereductionrulesinFigure2.Wemaintainthe invariantthatMdoesnotcontainfreevariablesxoruand thatallcellslinMaredefnedinC. \nCriticalintheproofofprogressarethefollowinginversion properties.Thesearegeneralizationsofsimplerpropertiesin \nlanguageswithoutsubtyping,intersections,orefects.They arestatedatalevelofgeneralitywhereeachcanbeproved \ndirectlybyinductingonthegiventypingderivation. 1.Iff;\u00b7`V:AandAB1!B2thenV=Ax:M andf;(x:B1)`M:B2. 2.Iff;\u00b7`V:AandABrefthenV=landthere \nexistsasuchthatinf,B,andB. B0 l:B0 B0 B0 3.Iff;\u00b7`V:AandAbitsthenwehaveoneofthe followingcases: (a)V=E \n(b)V=(V00)andf;\u00b7`V0:bits (c)V=(V11)andf;\u00b7`V1:bits 4.Iff;\u00b7`V:AandAnatthenwehaveoneofthe followingcases: \n(a)V=E (b)V=(V00)andf;\u00b7`V0:pos (c)V=(V11)andf;\u00b7`V1:nat 5.Iff;\u00b7`V:AandAposthenwehaveoneofthe followingcases: \n(a)V=(V00)andf;\u00b7`V0:pos (b)V=(V11)andf;\u00b7`V1:nat Wearenowreadytoproveourmaintheorem,namely thatourtypesystemwithmutablereferencesandvalue\u00adrestrictedintersectionssatisfesprogressandtypepreserva\u00adtion,i.e.,thatprogramscan'tgowrongasintheexample \nintheintroduction. Theorem5(ProgressandTypePreservation). If`(C.M):(f.A)theneither 1.Misavalue,or 2.(C.M);!7(C0 \n.M0)forsomeC0 ,M0 andf0 satisfying`(C0 .M0):(fCf0 .A). Proof.ByinductiononthetypingderivationforM. Thecaseforsubsumptionisimmediate,usingthein\u00adductionhypothesis. \n Thecaseforintersectionintroductionistrivial:the valuerestrictionforcesMtobeavalue.  Fortheremainingcasesthetypingrulematchesthe \ntoptermconstructorofM.  ThecasesforthetypingrulescorrespondingtoAx:M, l,()andEaretrivial,sincetheyarevalues. \n Thecaseforthetypingrulecorrespondingtofxis easy,sincewecanapplythesubstitutionlemmato constructtherequiredtypingderivation. \n Intheothercases,weapplytheinductionhypothesis tothesubderivationsforappropriatesubtermsNiof Mwhichareinevaluationpositionsi.e.M=E[Ni] \n(ineachcase,thereisatleastone).  C . E [(Ax:M)V] 7;! C . E [fV I x gM] C . E [letx=V inM] 7;! C . E \n[fV I x gM] C . E [fxu:M] 7;! C . E [ffxu:MIugM] C . E [(refV)] 7;! CC(l=V). E [l] (lnotinCorE) C1C(l=V)CC \n2. E [!l] 7;! C1C(l=V)CC 2. E [V] C1C(l=V1)CC 2. E [l:=V2] 7;! C1C(l=V2)CC 2. E [()] C . E [caseEofE)M1|x0)M2|y1)M3] \n7;! C . E [M1] C . E [caseV 0ofE)M1|x0)M2|y1)M3] 7;! C . E [fV I x gM2] C . E [caseV 1ofE)M1|x0)M2|y1)M3] \n7;! C . E [fV I y gM3] Figure2:ReductionRules Then,ifforsomeNitheinductionhypothesisyields (C.7(C0 \n.N0 with(C0 .Ni0):(fCf0 Ni);!i). B)thenwecanconstructtherequiredreductionand typingderivationforM. \n Otherwise,eachimmediatesubtermNiwithM= E[Ni]isavalue.  Thenweapplytheappropriateclauseofthepreceding \ninversionlemma,usingrefexivityofalgorithmicsub\u00adtyping.IneachcasewefndthatMcanbereduced andwecanconstructtherequiredtypingforthere\u00adsultofreduction,usingthesubstitutionlemmainsome \ncases.  Allofourrestrictionsareneededinthisproof: ThecaseofE[!l]requiressubtypingforAreftobe co-variant. \n ThecaseofE[l:=V]requiressubtypingforArefto becontra-variant.Withthepreviouspointitmeansit mustbenon-variant. \n Thevaluerestrictionisneededbecauseotherwisethe inductionhypothesisisappliedtothepremisesofthe intersectionintroductionrule \n f;\u00b7`M:A1 f;\u00b7`M:A2 f;\u00b7`M:A1 whichyieldsthatforsomeC1,(C.M)7. ;!(C1Mand`(C1.M1):(andalsothatforsomeC2,M2(C.M)7. \n;!(C2Mand`(C2.M2):( ^A2 M1andf1 1) fCf1.A1) andf2 2) fCf2.A2) Evenifweshowthatevaluationisdeterministic(which \nshowsM1 =M2 =M0 andC1 =C2 =C0),wehave nowaytoreconcilef1andf2toaf0 suchthat `(C0 .M0):(fCf0 .A^A2) 1 \nbecauseanewcellallocatedinC1andC2maybe assignedadiferenttypeinf1andf2.Itisprecisely thisobservationwhichgivesrisetothecounterexample \nintheintroduction. 6 Theabsenceofdistributivityiscriticalintheinversion propertyforvaluesV:AforAB1!B2which \nreliesonthepropertythatifA1 ^A2 B1!B2then eitherA1 B1!B2orA2 B1!B2. Theanalysisaboveindicatesthatifwefxthecellsinthe \nstoreanddisallownewallocationsbyremovingtherefM construct,thelanguagewouldbesoundevenwithoutavalue restrictionaslongasthereftypeconstructorisnon-variant. \nOverall,thisproofisnotmuchmoredifcultthanthecase withoutintersectiontypes,butthisispartiallybecausewe \nhavesetupourdefnitionsverycarefully.  3. BIDIRECTIONAL TYPE CHECKING Intheprevioussectionwepresentedapuretypeassign\u00admentsystem.Thislanguageisnotdirectlysuitableforpro\u00adgramming:forexample,typeinferenceisimpracticaland \nprincipaltypesdonotexist.Inthissectionwepresentthe coreofaprogramminglanguagewhichallowstheprogram\u00admertospecifytypes,alongwithanalgorithmfortypecheck\u00ading. \nPreviousproposalsforexplicitlytypedlanguageswithin\u00adtersectiontypeshaverequiredtypestobegivenforeach boundvariable.Thisleadstoaproblem,sincetheprogram\u00admermaywishtoassociatediferenttypeswithavariable \nindiferentbranchesoftheintersectionintroductionrule. ThisproblemwassolvedbyReynolds[14]byintroducing \natypedeclarationincludingmanyalternativetypes.This wasextendedbyPierce[12]toaspecialformbindingatype \nvariabletooneofasetofalternativetypes.Neitherofthese solutionsiscompletelysatisfactory.Forexample,thereis \nstillnowaytodirectlyspecifythatacurriedfunctionhasa typelike(pos!nat!pos)^(nat!pos!pos).Another solutionappearsin[19]andusesanintersectionintroduc\u00adtionrulethatexplicitlyincludestwotermsthatareidentical \nexceptfortypeinformation.Thissolutionisusedforacom\u00adpilerintermediatelanguage,anddoesnotseemsuitablefor \ndirectlyprogrammingin,sincemaintainingnearlyidentical codefragmentswouldbeverytedious. Ourproposalinsteaddistinguishestermsforwhichatype \ncanbesynthesizedfromtermswhichcanbecheckedagainst agiventype.Thisschemacantypeonlynormalforms,so weincludeanexplicittypeascriptionC:Awhichchecks \nCagainstAandthenyieldsAasthesynthesizedtypefor thewholeexpression.Unlikeacastoperationinsomedy\u00adnamicallytypedlanguages,however,thisascriptionincurs \nnorun-timeoverhead.Inpractice,wemostlyascribetypes tofunctiondefnitionswhichisasmallstepfromMLwhere \\goodstyle\"alreadysuggestsexplicitascriptionofsigna\u00adturestostructures. \n3.1 Syntax Weusethesametypesasintheprevioussection.Weomit locationsfromthelanguageofterms,sincetheyarecreated \nbytheevaluationoftermsrefCandshouldnotdirectly occurinprogramsource. InferableI::=xjujICj!IjI:=Cj() jEjI0jI1 \njC:A CheckableC::=IjAx:Cjletx=IinC jfxu:CjrefC jcaseIofE)C1|x0)C2|y1)C3 Wedistinguishthefollowingtermsasvalues: \nInferableIv::=xj()jEjIv0jIv1jCv:A CheckableCv::=IvjAx:C WewriteInvforaninferabletermnotoftheformIv. \n3.2 Typing Thetypingjudgmentsforinferableandcheckableterms havetheform: ;`I\"ATermIhasAasaninferabletype. \n;`C#ATermCchecksagainsttypeA. Itisourintentionthattherulesforthesejudgmentsbein\u00adterpretedalgorithmically:given;andI,wecanconstruct \nallderivationsof;`I\"A(alsoconstructingAforeach derivation);given;,C,andAwecancheckwhetherthereis aderivationof;`C#A.Inanimplementation,thiscould \nleadtounacceptablenon-determinismandfurthertransfor\u00admationsarerequiredtoobtainanefcientalgorithm.We arecurrentlyinvestigatinganalgorithmwhichsynthesizes \nalltypesofaninferabletermandtracksapplicableones throughtheuseofbooleanconstraints.Inanycase,thesys\u00adtemismuchsimplerthanfullintersectiontypespreviously \nimplementedin[6,4]whichhavealreadydemonstratedfea\u00adsibilityinmostpracticalcases. Thefollowingjudgmentnon-deterministicallyextractsor\u00addinarytypesfromatype(possiblyanintersection). \nA\"TypeAhasordinarytypeasaconjunct. BoBo cnjct ord AoAo \" Bo A 1 \"1 cnjct left Bo (A1 ^A2)\" 1 Bo A 2 \"2 \ncnjct right Bo (A1 ^A2)\" 2 ThetypecheckingrulesaregiveninFigure3.Notethat therearetworulestochecktermsIagainstatypeonly \ntoavoidoverlapwiththeruletochecktermsCvagainsta conjunction. 3.3 Soundness Wenowshowthatthebi-directionalcheckingalgorithmis \nsoundwithrespecttothetypeassignmentsysteminthepre\u00advioussection.Completenessissomewhattrickier:whilewe \ncanoftendirectlyannotateprogramswhicharewell-typed accordingtothetypeassignmentsysteminSection2,we maysometimesneedtorestructureitbyliftinglocalfunc\u00adtiondefnitions.Forexamplethefollowingterm \nAx:letf=Ay:xinfx maybeassignedthetype(nat!nat)^(pos!pos)but thereisnoannotationthatwecanaddforthetypeoffthat \nallowsustotype-checkthetermwiththistype.Thiscould alsobesolved,atsomecostinelegance,byintroducinga typeenumerationconstructasin[12].Wewillnotpursue \nthisfurther;moreexperimentswithourimplementationare neededtodecidewhetherthisiswarrantedandintuitiveto \ntheprogrammer. Inordertorelatethetermsofthissectionwiththoseof thepreviousone,wedefnetheerasurefunctionj\u00b7jinthe \nobviousway,namelycompositionallyexceptthatweremove typeascriptions: jC:Aj=jCj Lemma6.IfA\"BthenA:B. Proof.ByinductiononthedefnitionofA\"B. \nTheorem7(SoundnessofTypeChecking). 1.If;`I\"Athen\u00b7;;`jIj:A. 2.If;`C#Athen\u00b7;;`jCj:A. Proof.Byinductiononthetypingderivations,usingthe \nprecedinglemma.  4. PARAMETRIC POLYMORPHISM Wenowshowhowtoaddparametricpolymorphismtoour language.Ourapproachistoconsiderparametricpolymor\u00adphismastheinfniteanalogofintersectionpolymorphism, \nhenceourtypingandsubtypingrulesareinfniteanalogsof thoseinSection2.Inparticularweincludeavaluerestric\u00adtionontheintroductionofpolymorphism,andomitarule \nfordistributivitywiththefunctiontypeconstructor.Wedo notconsidertypecheckinghere,howeverwehopethatsome \noftheideasfromlocal-typeinference[13]forparametric polymorphismmaybeincorporatedintothetype-checking \nalgorithmofSection3toobtainapracticalprogramming language. 4.1 Syntax Weaddtypevariablesanduniversalquantifcationtothe \ntypesofSection2.Thetermsandvaluesofthelanguage areasbefore. TypesA::=A1!A2jArefjunit jbitsjnatjposjA1 \n^A2jaj8a:A Asusual,weallowtacitrenamingofboundtypevariables. WewritefBIagAforthecapture-avoidingsubstitutionof \nBforainA. x:Ain;u:Ain; tivar tivar 0 ;`x\"A;`u\"A ;`I\"AA\"B1!B2;`C#B1 ;`C#A ti app ti type ;`IC\"B2 ;`(C:A)\"A \n;`I\"AA\"Bref;`I\"AA\"Bref;`C#B ti get ti set ti unit ;`!I\"B ;`I:=C\"unit;`()\"unit ti e ;`E\"nat ;`I\"pos ;`I\"nat \n;`I\"bits ti z1 ti z2 ti z3 ;`I0\"pos;`I0\"bits;`I0\"bits ;`I\"pos ;`I\"nat ;`I\"bits ti o1 ti o2 ti o3 ;`I1\"pos \n;`I1\"pos ;`I1\"bits Bo ;`Iv \"AA;`Inv \"AAB;`Cv#A;`Cv#B tc subsv tc subsnv tc conj ;`Iv#Bo ;`Inv#B ;`Cv#A^B \n;Cx:A`C#B;`I\"A;Cx:A`C#B;Cu:A`C#A tc lam tc let tc .x ;`Ax:C#A!B;`letx=IinC#B;`fxu:C#A ;`C#A tc ref \n;`refC#Aref ;`I\"BB\"bits;`C1#A;Cx:bits`C2#A;Cy:bits`C3#A tc case1 caseIofE)C1|x0)C2|y1)C3#A ;`I\"BB\"nat;`C1#A;Cx:pos`C2#A;Cy:nat`C3#A \ntc case2 caseIofE)C1|x0)C2|y1)C3#A ;`I\"BB\"pos;Cx:pos`C2#A;Cy:nat`C3#A tc case3 caseIofE)C1|x0)C2|y1)C3#A \nFigure3:TypeCheckingRules AA posnatposbitsnatbits B 1 A1 A2 B2 ABBA A1!A2 B1!B2 ArefBref Bo BoA 1 A2 \nBo BoA 1 ^A2 A1 ^A2 AB1 AB1 AB1 ^B2 fA0IagABo AB (anotfreeinA) 8a:ABo A8a:B Figure4:StructuralSubtypingRules \n 4.2 Subtyping Weaddthefollowingsubtypingrulesforparametricpoly\u00admorphism,whichareinfniteanalogsoftherulesforinter\u00adsectionpolymorphism. \nA:B (anotfreeinA) 8a:A:fBIagAA:8a:B Analogouslywithintersectionpolymorphism,weomitthe followingdistributivityrulesinceitleadstounsoundness \nwhenfunctionsinvolveefects: (anotfreeinA) 8a:(A!B):A!8a:B Ifweweretoincludethisrule,oursubtypingrelationfor \nthefragmentcontainingfunctionsandparametricpolymor\u00adphismwouldbeequivalenttothatproposedbyMitchell[11]. \nMitchell'ssubtypingrelationhasbeenshowntobeundecid\u00adable[18,16],butthetechniquesusedintheseproofsdo notseemtoapplydirectlyintheabsenceofdistributivity. \nWethereforedonotknowatpresentwhetheroursubtyping relationisdecidable. Asbefore,wepresentanmoredirectedversionofthesub\u00adtypingrelation.Theserulesareanalogoustothoseforin\u00adtersectionpolymorphism,andallowtheproofofprogressto \nbeextendedappropriately.Alas,theydonotactuallyde\u00adscribeanalgorithm,sincetheydonotdescribeamethodfor choosingthetypeusedtoinstantiateapolymorphicparam\u00adeterwhenthisisrequired.Wethereforerefertoourrelation \nasstructuralsubtyping. Weusethenotationasbeforeforanordinarytype, A o thatis,thatisneitheranintersectionnoraquantifedtype. \nABTypeAisstructurallyasubtypeofB. TherulesaregiveninFigure4.Weincludeageneral refexivityrulehereeventhoughitisonlystrictlyneeded \nfortypevariablesandbasetypes.Thisallowsustotreata subtypingderivationofaconclusioninvolvinganunbound \ntypevariableasajudgmentparametricinthatvariable,that is,wemayinstantiatethevariablewithanytypeandobtain \navalidderivation. AsintheSection2,wenowprovesomesimplelemmas neededtoshowthatstructuralanddeclarativesubtyping \ncoincide. Lemma8(StructuralSubtyping). Thestructuralsubtypingjudgmentsatisfes: A0 A0 1.IfABthenA^Band^AB. \n2.IffA0IagABthen8a:AB. 3.IfA1 A2andA2 A3thenA1 A3. Proof.Thefrsttwoarebysimpleinductionsonthe supertypeB.Fortransitivityweproceedbystructuralin\u00adductiononthetwoderivations.Oneinterestingcasearises \nwhenthefrstandsecondderivationsendin D 1 D2 A0 andfA0IagA0 Ao (anotinA1)00 Ao A 12 23 A 1 8a:A8a:A 2 \n23 Here,wesubstituteA0 forainthederivationD1toobtainan instancewithconclusionA1 fA0IagA0 andthenapplythe \n2 inductionhypothesistothisderivation(whichhasthesame structureasD1)andD2toobtaintherequiredresult. \nTheorem9.ABifandonlyifA:B. Proof.Ineachdirection,byinductiononthegiven derivation,usingthepropertiesintheprecedinglemma. \n 4.3 Typing Weaddthefollowingtypingruleforintroducingpara\u00admetricpolymorphismwithavaluerestriction.Instantiation \nofpolymorphictypesisdoneviatheexistingsubsumption rule. f;;`V:A tp para(anotfreeinfC;) f;;`V:8a:A Thesubstitutionlemmaextendsnaturallytoincludethis \nrule.Wetreattypingderivationswithfreetypevariablesas parametricderivations,justasforsubtyping. Theorem10(ProgressandTypePreservation). \nInthetypesystemextendedbyparametricpolymorphism,if `(C.M):(f.A)theneither 1.Misavalue,or 2.(C.M)7;!(C0 \n.M0)forsomeC0 ,M0 ,andf0 satisfying`(C0 .M0):(fCf0 .A). Proof.Theproofisstructuredexactlyasbefore.The \nmainchangeisthatwehaveadditionalcasesineachpartof theTypingInversionLemmaforthenewtypingrule,each ofwhichmakesuseofparametricityinasimilarmannerto \ntheproofoftransitivityofstructuralsubtyping. Asbefore,allofourrestrictionsareneededinthisproof: Thevaluerestrictiononparametricpolymorphismis \nneededbecauseotherwisetheinductionhypothesisis appliedtothepremiseoftheintroductionrule f;\u00b7`M:A anotfreeinf \nf;\u00b7`M:8a:A whichyieldsthatforsomeC0 ,M0 andf0 (C.M)7.M0) ;!(C0 and`(C0 .M0):(fCf0 .A) f0 Butamayappearin,sowecannotapplythein\u00ad \ntroductionruleforparametricpolymorphism. Theabsenceofdistributivityiscriticalintheinversion propertyforvaluesV:AforAB1!B2which \nreliesonthepropertythatif8a:AB1!B2then thereexistsA0 suchthat[A0Ia]AB1!B2.  5. EXAMPLES Wenowshowsomeexamples,primarilyonesmanipu\u00adlatingnaturalnumbersrepresentedasbit-stringswithout \nleadingzeroes.Wehavealreadygivensomecounterexam\u00adplestosoundnessintheabsenceofappropriaterestrictions \nabove,sothecodebelowmostlyillustratesbi-directional type-checkingandtheuseofsubtypingandintersection \ntypesinasourcelanguagetoenforcedatarepresentation invariants. Wepresentexamplesastop-leveldefnitionsoftheform \nvalx:A=M,whichshouldbeinterpretedassyntactic sugarforletx=(M:A)in:::withopen-endedscope. Here,M:Aisinferable,whichmeansMonlyneedsto \nbecheckable.First,afunctionforincrementinganatural number. valinc : (bits!bits)^(nat!p os) = fxinc: A \nn : casen ofE)E1 | x0)x1 | x1)(incx)0 NotethattypesforvariablesboundbyAorinthe branchesofthecaseexpressiondonothavetypelabels. \nInfact,itwouldbedifculttoallowforthis,sincethebody ofthefxexpressionwillbecheckedtwice:onceagainst bits!bitsandonceagainstnat!nat.Inthefrstsitua\u00adtionweanalyzethebodyofthefunctionwithn:bits,inthe \nsecondwithn:nat.Furthernoticethatsubsumptionallows ustoderiveadditionaltypesforinc,forexample,using (bits!bits)^(nat!pos):nat!nat \n(bits!bits)^(nat!pos):pos!pos Finallyweremarkthatascribingsimplyinc:nat!nat insteadofnat!poswouldhavebeeninsufcient:inorder \ntoseethattheresultofthelastcaseofthefunctiondefnition isavalidnaturalnumber,weneedtoknowthattheresult \noftherecursivecall(incx)ispositive. Oursecondexampleisbinaryaddition. valplus : (nat!nat!nat) ^(p os \n!nat!p os) ^(nat!p os !p os) = fxplus:An:Am:casen ofE)m | x0)casem ofE)x0 | y0)(plusxy)0 | y1)(plusxy)1 \n| x1)casem ofE)x1 | y0)(plusxy)1 | y1)(inc(plusxy))0 Again,forthisdefnitiontotype-checkweneedtoknow \nthatinc:nat!pos.Applicationofplustoargumentsof typebitswhichcannotbeshowntohavetypenatorposis prohibitedbytype-checking.Inthisexample,aweakertype \nsuchas(nat!nat!nat)^(pos!pos!pos)wouldhave sufced,butgivensubsequentcallstopluslessinformation aboutitsbehavior. \nNext,weshowhowtype-checkingcancatcherrorswhich couldnotbecaughtwithoutsubtyping: valdouble:(nat!nat)^(pos!pos) \n=Ax:x0 willfailtotype-checkforx:nat.Indeed,doubleEevaluates toE0whichisnotavalidrepresentationofzero.Weleave \nthesimplefxtothereader. Wecanalsowriteandtype-checkafunctiontostandard\u00adizearbitrarybit-stringsbyerasingleadingzeroes. \nvalstdize:bits!nat =fxstdize:Ab:caseb ofE)E |x0)casestdizex ofE)E |y0)y00 |y1)y10 |x1)(stdizex)1 Thefollowingexampleshowshowreferencesandintersec\u00adtionsmaybeusedtogetherinausefulandsoundway,and \nalsodemonstratesthesyntacticstructuringthatissome\u00adtimesneededfortype-checking.Eachcalltothefunction countwithsomeinitialvaluengeneratesacounteroftype \nunit!natorunit!pos.Thiscountercanbecalled repeatedly,successivelyreturningn,n+1,:::.Thetype ofcountrefectsthatthecounterisalwayspositiveifitis \ninitializedwithapositivenumber. valcount0 :(natref!(unit!nat))^ (posref!(unit!pos)) =Ac:Ax: letr=!cin \nlety=(c:=incr)inr valcount:(nat!(unit!nat))^ (pos!(unit!pos)) =An:count0 (refn) Finally,anexamplenotconnectedtorefnements,but \nmoregeneralusesofintersectiontypesandparametricpoly\u00admorphismwhichareaccommodatedbyoursystem: val!:8a:8;:((a!;)^a)!; \n=Ax:xx  6. CONCLUSION AND FUTURE WORK Weareintheprocessofimplementingarefnement-type checkerforaconservativeextensionofStandardMLbased \nonthealgorithminSection3.Toavoidmuchofthenon\u00addeterminisminthisalgorithm,wesynthesizealltypesfor aninferableterm,andgeneratebooleanconstraintstorep\u00adresentthechoicebetweenthem.Wecanthendetecttype \nerrorsbycheckingthesatisfabilityoftheaccumulatedcon-straints,usinganefcientrepresentationsuchasBinaryDe\u00adcisionDiagrams. \nThecombinationofparametricpolymorphismwithinter\u00adsectiontypesshouldbeinvestigatedfurther.Inparticularit \nseemsthatthelocaltypeinferenceof[13]couldbeintegrated withourbi-directionalcheckingforintersectiontypes.In \nourworkonrefnementtypesforMLweplacetherestriction thattheonlyrefnementofanMLtypevariableisasingle correspondingrefnementtypevariable.Thissimplifesthe \nsituationgreatlyandallowstherefnementtypecheckerto beguidedbythetypederivationconstructedusingordinary \nMLtypeinference. Ourpresentexamplesdonotindicatethis,butitiscon\u00adceivablethatthevaluerestrictionrejectstoomanynatural \nprogramswhoseevaluationcanbeseennottohaveefects andcouldthereforebetypedmorelooselywithoutcom\u00adpromisingsafety.Inthatcasewecouldgeneralizeourap\u00adproachfromavaluerestrictiontoavaluabilityrestriction, \nasproposedbyHarperandStone[8].Thiswouldclassify somefunctionsasbeingtotalandefect-freesothatthey canessentiallybetreatedasvaluesforthepurposeoftype\u00adchecking.Interestingly,ifwemakesuchfunctiontypessub-typesoftheordinaryMLfunctiontypes,thenintersections \nonceagainmayarisenaturallyduringtype-checking.We intendtoinvestigatethisfurther. Acknowledgments.Wewouldliketothanktheanony\u00admousrefereesforhelpfulsuggestionsandgratefullyacknowl\u00adedgevaluablediscussionswithRobertHarper. \n 7. REFERENCES [1]A.Aiken,E.Wimmers,andT.K.Lakshman.Soft typingwithconditionaltypes.InTwenty-FirstACM \nSymposiumonPrinciplesofProgrammingLanguages (POPL'94),pages163{173,Portland,Oregon,Jan. 1994. [2]V.Breazu-Tannen,T.Coquand,C.Gunter,and \nA.Scedrov.Inheritanceasimplicitcoercion. InformationandComputation,93:172{221,1991. [3]L.Cardelli.Typesystems.InA.B.Tucker,Jr.,editor, \nTheHandbookofComputerScienceandEngineering, chapter103,pages2208{2236.CRCPress,1997. [4]R.Davies.Apracticalrefnement-typecheckerfor \nStandardML.InM.Johnson,editor,Algebraic MethodologyandSoftwareTechnologySixth InternationalConference(AMAST'97),pages \n565{566,Sydney,Australia,Dec.1997. Springer-VerlagLNCS1349. [5]R.Davies.Practicalrefnement-typechecking.Thesis \nProposal,CarnegieMellonUniversityComputer ScienceDepartment,Nov.1997. http://www.cs.cmu.edu/~rowan/papers/proposal.ps \n[6]T.Freeman.RefnementTypesforML.PhDthesis, Carnegie-MellonUniversity,Mar.1994.Availableas technicalreportCMU-CS-94-110. \n [7]T.FreemanandF.Pfenning.Refnementtypesfor ML.InProceedingsoftheSIGPLAN'91Symposium onLanguageDesignandImplementation,Toronto, \nOntario,pages268{277.ACMPress,June1991. [8]R.HarperandC.Stone.Atype-theoretic interpretationofStandardML.InG.Plotkin, \nC.Stirling,andM.Tofte,editors,Proof,Language, andInteraction:EssaysinHonourofRobinMilner. MITPress,2000. \n [9]X.Leroy.Polymorphismbyname.InTwentiethACM SymposiumonPrinciplesofProgrammingLanguages (POPL'93),pages220{231,Charleston,South \nCarolina,January1993. [10]R.Milner,M.Tofte,R.Harper,andD.MacQueen. TheDefnitionofStandardML(Revised).MITPress, \n1997. [11]J.C.Mitchell.Polymorphictypeinferenceand containment.InformationandComputation, 76(2/3):211{249,1988. \n[12]B.C.Pierce.Intersectiontypesandbounded polymorphism.MathematicalStructuresinComputer Science,7(2):129{193,Apr.1997. \n[13]B.C.PierceandD.N.Turner.Localtypeinference. InThe25thACMSIGPLAN-SIGACTSymposiumon PrinciplesofProgrammingLanguages(POPL'98), \npages252{265,SanDiego,California,1998. [14]J.C.Reynolds.Preliminarydesignofthe programminglanguageForsythe.TechnicalReport \nCMU-CS-88-159,CarnegieMellonUniversity, Pittsburgh,Pennsylvania,June1988. [15]J.C.Reynolds.Designoftheprogramminglanguage \nForsythe.TechnicalReportCMU-CS-96-146,Carnegie MellonUniversity,Pittsburgh,Pennsylvania,June 1996. [16]J.TiurynandP.Urzyczyn.Thesubtypingproblem \nforsecond-ordertypesisundecidable.InProceedings, 11th AnnualIEEESymposiumonLogicinComputer Science,pages74{85,NewBrunswick,NewJersey, \n27{30July1996.IEEEComputerSocietyPress. [17]M.Tofte.Typeinferenceforpolymorphicreferences. InformationandComputation,89:1{34,November \n1990. [18]J.B.Wells.TheundecidabilityofMitchell'ssubtyping relation.TechnicalReport95-019,BostonUniversity, \nBoston,Massachusetts,December1995. [19]J.B.Wells,A.Dimock,R.Muller,andF.Turbak.A typedintermediatelanguageforfow-directed \ncompilation.InTAPSOFT'97:TheoryandPracticeof SoftwareDevelopment,Proc.7thInternationalJoint ConferenceCAAP/FASE,pages757{771,Lille, \nFrance,Apr.1997.Springer-VerlagLNCS1214. [20]A.K.Wright.Simpleimperativepolymorphism. InformationandComputation,8:343{55,1995. \n[21]A.K.WrightandR.Cartwright.Apracticalsofttype systemforScheme.InProceedingsofthe1994ACM ConferenceonLISPandFunctionalProgramming, \npages250{262,Orlando,Florida,June1994. [22]A.K.WrightandM.Felleisen.Asyntacticapproach totypesoundness.InformationandComputation, \n115:38{94,1994.  \n\t\t\t", "proc_id": "351240", "abstract": "We show that standard formulations of intersection type systems are unsound in the presence of computational effects, and propose a solution similar to the value restriction for polymorphism adopted in the revised definition of Standard ML. It differs in that it is not tied to let-expressions and requires an additional weakening of the usual subtyping rules. We also present a bi-directional type-checking algorithm for the resulting language that does not require an excessive amount of type annotations and illustrate it through some examples. We further show that the type assignment system can be extended to incorporate parametric polymorphism. Taken together, we see our system and associated type-checking algorithm as a significant step towards the introduction of intersection types into realistic programming languages. The added expressive power would allow many more properties of programs to be stated by the programmer and statically verified by a compiler.", "authors": [{"name": "Rowan Davies", "author_profile_id": "81100185069", "affiliation": "Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA", "person_id": "P249790", "email_address": "", "orcid_id": ""}, {"name": "Frank Pfenning", "author_profile_id": "81100157780", "affiliation": "Department of Computer Science, Carnegie Mellon University, Pittsburgh, PA", "person_id": "PP39030152", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/351240.351259", "year": "2000", "article_id": "351259", "conference": "ICFP", "title": "Intersection types and computational effects", "url": "http://dl.acm.org/citation.cfm?id=351259"}