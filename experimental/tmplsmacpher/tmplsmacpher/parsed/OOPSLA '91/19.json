{"article_publication_date": "11-01-1991", "fulltext": "\n The Economics of Software Reuse (PANEL) Martin L. Griss, Hewlett-Packard Laboratories, (moderator) Sam \nS. Adams, Knowledge Systems Corporation Howard Baetjer, Jr., Ago&#38;s Project, George Mason University \nBrad J. Cox, Information Age Consulting Adele Goldberg, ParcPlace Systems Abstract Non-object-oriented \nnumeric, statistical, graphics and data-structures libraries are also widely used. We discuss several \nmodels of a software com-Many companies are developing proprietary soft-ponents industry and issues concerning \neffective ware libraries, but a significant market in reusable reuse and object-oriented programming, \nand spec- software is yet to appear. This is largely because ef- ulate on how (and whether) a vigorous \ncomponents market will arise. A software industrial revolu-fective reuse depends on more socioeconomic \nthan tion requires an infrastructure, a reuse mindset , technical factors[5,6], while most workers have \ncon-and the treatment of software as an asset. centrated on technology. Too few software devel-opers \nvalue or appreciate the effort required to pro-duce a quality library, and so a combination of inex- \nBackground perience and NIH make them unwilling to pay for It is widely believed that systematic application \ngood quality software. While (improved) object-of reuse to prototyping, development, and main-oriented \ntechnology seems to be a very promising tenance is one of the most effective ways to sig-vehicle for \nrealizing the dream, and recent work in nificantly improve the software process, shorten domain analysis, \nobject-oriented methods, library time-to-market, improve software quality and ap-technology and architectural \nframeworks should plication consistency, and reduce development and lead to a consistent methodology \nfor domain spe-maintenance costs[l, 2,3]. One of the dreams of the cific reuse, there remains a significant \neffort. Peo-software engineering community is to have widely ple need to learn the most effective way \nof using[7], used libraries of reusable software[4, 51. Despite investing in and performing cost/benefit \nanalysis the fact that many people believe that a vigorous on the technology, and in setting up processes \nand market in software libraries would soon arise, the incentives that encourage appropriate change. \nmovement in this direction has been disappointing. The panel will illuminate the issues, identify The \nonly widely used object-oriented libraries are problems, and suggest future directions. We will those \nfor data-structures and user-interface fra.me-address the questions: works, which Smalltalk has had for \nover a decade. Permission to copy without fee all or part of this material is . Will a viable softcware \ncomponents industry granted provided that the copies are not made or distributed for arise, and if so \nwhen and how? direct commercial advantage, the ACM copyright notice and the title of the publication \nand its date appear, and notice is given . What impediments need to be overcome and that copying is by \npermission of the Association for Computing how? Machinery. To copy otherwise, or to republish, requires \na fee . Is it possible to develop a marketplace for and/or specific permission. reusable software ? \nHow do we pay for it?  c 1991 ACM 89791-446-5/9110010/0264...$1.50 OOPSLA 91 How do companies that develop \nreusable soft- ware for internal use pay for it? Are economics of reuse within a corporation different \nfrom those across corporations?  Sam S. Adams Providing an appropriate infrastructure for the dis-tribution \nand management of reusable software is one of the most critical factors in the successful exploitation \nof object technology on a large scale within an organization. Since reusable software components and \nfra.meworks become more valuable as assets as they become more widely used, appro-priate mechanisms must \nbe provided to ensure and increase the quality and value of reusable software. Reusable Software as an \nAsset: Economic issues have always had a strong influence on the evolution of software development practices. \nOne historical effect of the evolution of software devel-opment in organizations is the view that the \nresult-ing software is an extremely expensive end product that constantly requires costly maintenance \nto re-tain its effectiveness -80% of the cost of a tradi-tional software system now comes from the main-tenance \nand enhancement of delivered systems. The waterfall model of software development was meant to optimize \nscarce and expensive program-ming resources and to reduce maintenance costs by providing better initial \nsystem specifications. While reuse is sought after in the engineering com-munity, the economic and organizational \neffects of reusable software as a financial asset have not been widely investigated. Most software organizations \nhave developed management structures and engi-neering pra,ctices that consider the executable end-product \nto be a short-lived commodity that will quickly be replaced by the next revision or sys-tem. Reusable \nsoftware must be treated like an as-set, and managed a,s a value-retaining medium that ca.n benefit from \ninvestment and provide both short term and long term financial dividends. Organiza-tions already have \nelaborate and successful mecha-nisms and policies for the management of corporate assets such as facilities, \nmachinery, computer sys- tems, and personnel. Just as they spend a large percentage of their revenue \non increasing the value of their other assets, investment in the quality and reusability of corporate \nsoftware assets should be considered a high priority. This will be profitable, however, only if an effective \nmechanism exists for the collection, refinement, quality assessment and distribution of reusable software. \nA reuse-based infrastructure must be designed to support these activities, providing a foundation for \nthe tracking, reporting and management of the costs and bene-fits of the development, testing, maintenance \nand reuse of an organization s software assets. Developing a Reuse Mindset: From a soft-ware asset perspective, \nthere is an important multi-plier to consider for any given change to a software component, termed by \nLynn Fogwell the reuse factor : every change (good or bad) to a piece of reusable software must be considered \nas to its im-pact on all future users of the software, not just the current project. Even a. small renaming \nof a method or function to be more intention reveal-ing can have dra.matic effects over the lifetime \nof the software. For example, most C programmers use very terse names for variables and functions, even \nthough the negative effect this practice has on code reada.bility and reuse is well documented. When \nsomething this seemingly trivial can have dra.matic long term effects, how much more should the reuse \nfactor be considered on major changes such as refactoring an object class hierarchy? We must continue \nto (incrementally) strive to increase the value of our software assets with constant con-sideration of \nboth the short term and long term ef-fects. In a large organization, there may be several libraries of \nreusable software, each maintained for a specific user group. Since reusable software should eventually \nmigrate hierarchically to corporate li- braries that span departments and projects, every library manager \nshould accept only high quality software. Only the more general, broadly reusable software gets marketed \nor submitted to higher-level corporate libraries. Each level can incre-mentally a.ssess the software \nquality by local stan-da,&#38;, a.nd provide a pa.tl1wa.y to promote the best and most widely reusable \nsoftware to the la.rgest user base, maximizing an orga.nization s return on its investment. It is critical \nthat an organiza-tion explicitly recognize the point in the migra-tion of reusable software where the \ngreatest im-pact occurs. This is where a piece of software (method, class, subsystem, or design information) \nis exposed to a larger community. This is where costs can be estimated for the integration, educa-tion, \nand maintenance of the software, including any rework required to meet standards, where a financial cost/benefits \nanalysis should take place, and where various design, coding and documenta-tion standards should be checked \nand enforced, and any potential conflicts determined and analyzed. Software Engineering in a Pervasive \nReuse Environment: For the past five years, Knowledge Systems has had extensive experience in the reuse \nof object-oriented software across many different projects and problem domains, using Smalltalk. The \nSmalltalk programmer starts new projects with hundreds of reusable classes at his disposal, in-corporating \nvendor-supplied and locally developed and acquired libraries. Unlike traditional environ-ments, reuse \nis a fact of life in Smalltalk, per-meating every methocl and class. This has pro-voked much research \ninto the implications. Experi-enced Smalltalk programmers enjoy great produc-tivity and freedom, but \nare confronted with seri-ous new challenges in the management of reusable components and the often tangled \nconfiguration de-pendencies that arise in organization-wide reuse. Analysis and design activities are \nalso markedly af-fected, but most methodologies for the design of ob- ject oriented systems have very \nlittle to say about the effect of reuse, and usually assume a clean slate to begin a design activity. \nSoftware development organizations will be af-fected in many wa.ys when reuse becomes a perva- sive daily \nconcern. If we are to exploit the economic advantages of object-oriented technology today, as well as \nin the future, we must not only consider reusable software an asset, but treat it as one. Howard Baetjer, \nJr. A variety of active markets in software components will emerge over the next few years. Although \nob- stacles to such markets are great, the rewards to overcoming them are greater. As our investiga- \ntions of the development of other industries sug- ges t , profit-seeking entrepreneurs will develop new \nkinds of markets and market institutions to answer the challenge. For instance: How may buyers find out \nwhat is avail- able? Electronic markets hold tremendous promise for improving communication across huge \nareas. Costly search of passive repositories will be replaced with active matching of buyers a.nd sellers. \nWhat will induce a larger supply of com- ponents for sale? Supply will increase as com- munication and \ncompatibility problems ease. With lower transaction costs, developers in specialized domains who customize \nproprietary components will expand to new market niches. As experience increases and object-oriented \ntechnologies mature, some firms will productize their proprietary li- braries. How may component developers \nbe as-sured of getting paid for value they provide their customers? Examinations of other indus-tries \nhighlight the almost infinite number of possi- ble property right arrangements and pricing strate-gies. \nFinding those most appropriate to the spe-cial nature of software represents one of the great-est challenges \nfacing the entrepreneur. Already, a variety of innovative pricing schemes, includ-ing bundling strategies, \nand charge-per-use (rather than charge-per-copy) are being developed for soft- ware. While no one innovation \npromises a perfect fix, various combinations of these ideas seem more than adequate to support component \nnmrkets. Brad J. Cox The possibility of a software industrial revolution, in which programmers stop \ncoding everything from scratch and begin a.ssembling a.pplications from well-stocked catalogs of reusable \nsoftware compo- Whereas mature engineering domains define standard prod-ucts and expect diverse processes \nto be used in making them, in software we do the reverse, defining standard languages and methodologies \nfrom which standard compon.ents are to automatically ensue. nents, is an enduring, but elusive, dream. \nAl-though object-oriented programming systems, lan-guages, and architectures have brought this dream \ncloser, common-sense organizational principles like reusability and interchangeability are still the \nex-ception rather than the rule. According to Tho1na.s Kuhn, science does not progress continuously, \nby gradually extending an established paradigm. It proceeds as a series of revolutionary upheavals. The \ndiscovery of unrec-oncilable shortcomings in an established paradigm produces a crisis that may lead \nto a revolution in which the established para,digm is overthrown and replaced. The software crisis is \nsuch a crisis, and the soft-ware industrial revolution is such a revolution. The familiar process-centric \nparadigm of software cngi-neering, where progress is measured by advance-ment of the software development \nprocess, entered the crisis sta.ge 23 years ago when the term, soft-ware crisis, was first coined. The \nparadigm that ma,y launch the Information Age is the sa.me one that launched the Manufacturing Age 200 \nyea,rs ago. It is a product-centric paradigm in which progress is mea.sured by the accretion of stan-dard, \ninterchangeable, reusable components, and only secondarily by advancing the processes used to build them. \n The consumer-side benefits of reusable code are easy to demonstrate, if not to grasp in practice. But \nwhat makes reuse beneficial to those who pro-duce it, given that reusable code costs far more to build \nand distribute than ordinary code? What is the economically robust basis for code reuse in particular, \nand for commercial interchange of intel- lectual properties in general? By intellectual properties I \nencompa.ss wisdom, entertainment, and information in general, along with softwa.re components of every \ngranularity; from objects as large a.s entire applications to those as small as Software-IC s, string \ncompa,re subrou-tines, and even macros. This question has arisen repeatedly whenever technology impinges \nupon some established way of packa.ging intellectual properties. Each time it has been a,nswered through \na combination of technical, legal and economic initiatives. Does the ease with which software can be \nrepli- cated involve funda.mentally different issues than those that digital music recording, or gramophones, \nor ra,dio and television, posed to the entertain-ment industry ? Or that character recognition tech-nology, \nor Xerography, or photography, posed to the publishing industry? Or tha.t numerically-controlled machine \ntools, or pattern lathes, or stan- da.&#38; for interchangeable parts, posed to manufa.c-turing? Or that \nthe printing press posed to the knowledge workers of Guttenberg s day? Ma.nkind s response to technological \nchange oc-curs in a. stereotyped manner throughout hist,ory. The establishment usually resists strenuously, \nbut consumer demand wins in the end. Occasionally establishments resist to the point that they are replaced \nby outsiders that were never successful with the old paradigm. The change never occurs overnight: but \ngenerally recluires a generat,ion or more. Ultimately, technology changes the balance of power, but a \nnew relationship emerges in which the interests of both parties are brought into bal-a.nce once a.ga.in. \nChange is not driven by technological push but by consumer pull. The softwa.re revolution will not be \ndriven by the software development comma nity, just as the industrial revolution was not driven by the \ncottage industry gunsmiths. It will be driven by the consumers of software products, just as the consumers \nof ordnance products, the U.S. Gov-ernment, drove manufacturing to interchangeable parts.  Adele Goldberg \nOne of the powerful ideas that has attracted new attention as a result of the development of object-oriented \nsoftware technology is the notion of reusable, combinable applications. Today, we see this idea being \npromoted at the level of op-erating systems, window systems, and indepen-dent software architectures \n(low-level, such as Mi-crosoft s DLLs and Sun s sharable libraries, and high-level, such as Patriot Partners \nConstellation project and ParcPlace s object model and frame-works approach). Many believe that the discipline \nof defined, pub-lished interfaces (which the object-oriented ap-proach naturally promotes) will create \na new mar-ketplace for reusable software components. How-ever, from our experience with many developers \nand users of Smalltalk systems in many differ-ent environments, we think the key economic shift will \nbe in a different area. A public market is a very loosely organized environment. Compo-nents placed in \na market will face a very wide va-riety of different demands, and even well-designed components with \nminimally constrained interfaces will have trouble attracting a critical mass of cus-tomers. On the other \nhand, within a single or-ganization, reusable components can be developed and redesigned within a context \nthat can span a large fraction of their intended uses. In this way, the accumulation of reusable code \ncan become an important business a.sset, and can be treated (as we believe is appropriate) as an investment \nand a capital good, rather than (as at present) simply a cost. In an object-oriented environment where \ninheri-tance is supported, it is not only individual compo-11c11ts that arc reused. The design of interfaces \nbe-tween objects is often more importa,nt than the im-plementation of functions within objects. Frame-works \ncan capture the structural design of soft-ware objects that address a given (partial) problem domain. \nAs such, the frameworks developed and reused within an organization will come, over time, to capture \nand eventually even define the exper-tise of the organization, and as such can contribute to the organization \ns ability to meet its customers needs. This is sometimes called competitive advan-tage, but it applies \nequally well in situations where competition is not involved. This position of ad-vantage often means \nthat the organization should or can not share the results publically. Given these two beliefs, that reusable \ncode can become an important business asset and that an important form of this asset is software frame-works, \nwe have initiated a major data collection project. The goal of the project is to be able to propose an \neconomic model for corporations that accounts for the costs of the introduction and man-agement of object-oriented \ntechnology. Data is be- ing supplied by a number of corporations with both completed and ongoing projects. \nThe results will be reported on in the form of a recommended cost model as well as case studies. One \noutcome of this project will be recommendations for structuring an organization to best manage its investment \nin cre-ating reusable software assets. Martin L. Griss Since 1984, Hewlett-Packard (HP) has had sev-eral \nvisible software reuse projects in divisions and laboratories. Some use DBMS systems to store and distribute \nsoftware components. Oth-ers use Objective-C or C++ to develop class li-braries (for UI, data-structures \nand instrument sub-systems). Several libra.ries have been widely distributed within HP, and some outside. \nRecently, several HP entities have sta,rted multi-division do-main analysis to develop common a.rchitectures, \ncomponents and libraries, for instrument firmware, and for chemical aad medical system software, pro-ducing \nframeworks and major components to be used in several products. Other divisions have set up libraries, \nestablished reuse goals, and started reuse councils and component projects. HP Labo-ratories has several \ncomponent-based software con-struction research projects, exploring hypertext-based reuse library management \ntools, application frameworks, software-bus architectures and object-oriented analysis and design methods. \nSince 1989, we have been investigating ways to make software reuse a more significant part of HP s software \nprocess for the 1990 s. We now believe that a broad, well coordinated software reuse pro-gram involving \na significant management, process, education, and technology infrastructure is needed to make significant \nprogress. In October 1990, we initiated a Corporate Engineering Software Reuse program. This program \nconsists of a core team of software reuse experts, with additional people on assignment with divisional \npilot projects. The core team will be involved in: the de-velopment a.nd execution of a reuse assessment \nand metrics; the design and execution of several pilot projects with divisional partners to de-velop \nand test methods a.nd tools for design for reuse , design with reuse , and library man-agement ; the \ncollection of reuse best. practices, processes and guidelines in a customizable hand-book; a.nd, consulting, \ntra.ining, a,nd workshops. We have assessed several divisional reuse programs, held a Reuse Practitioner \ns Workshop for HP engi-neers and managers, and published our first reuse newsletter. We are developing \na reuse curriculum. We will not build a single Corporate reuse library, nor stress a single language. \nMost of the pro-cesses, methods, training and tools we advocate are largely independent of pa,rticular \nlanguages, but OOA/OOD derived methods for domain a,nalysis and design for reuse seem destined to play \na signif- icant role. We strongly believe in the importance of pro-viding economic incentives to divisions \nto pilot , bo0tstra.p a,nd evaluate systematic reuse programs. It is important to develop a. viable economic \nmodel, a,nd to provide ea,rly validation of the cost/benefits of reuse within HP. We have just started \nseveral joint pilot projects with divisions, to which we pro- vide additional people, funding, and consulting, \nbacked by strong management support, and Corpo-rate Engineering s technology transfer infrastruc- ture. \n Biographies Sam S. Adams is the Senior Technical Consul-tant and co-founder of Knowledge Systems Corpo-ration. \nSince 1984, he has been actively develop-ing object-oriented software systems in Smalltalk, and is widely \nrecognized for his expertise in rapid prototyping and in the design and implementation of advanced software \ncomponents and frameworks. He has also been training computer profession-als in object oriented technology \nfor over 4 years, and was instrumental in the development of KSC s Smalltalk Apprentice Program. A frequent \nspeaker and panelist at leading industry conferences, he has recently presented tutorials on R.apid Prototyping \nat OOPSLA 89 and 90, a.nd has presented several workshops on OOA a.nd OOD. Howard Baetjer, Jr. is Executive \nDirector of the Agorics Project, a research project of the Cen-ter for the Study of Market Processes \nat George Mason University. The Agorics Project is cur-rently engaged in a ma,jor study of the evolution \nof the softwa,re components industry. As part of the Agorics Project, he has co-authored articles on \nthe evolution of progra.mming practice, and was pri-mary developer of the prototype of the AGORA, a framework \nfor economic experimentation written in Smalltalk. He has a B.A. (Psychology, Princeton), an M. Litt. \n(English Literature, Edinburgh) a.nd an M.A. (Political Science, Boston College). He is completing his \nPh.D. (Economics, George Ma,son IJniversi ty) on Soft,ware as Capital . Brad J. Cox is a founder a.nd \nChief Techni- cal Officer of The Stepstone Corporation, the au- thor of the book, Object-oriented Programming, \nAn Evolutionary Approach, and the originator of Stepstone s Objective-C System-building Environ- ment \na.nd many of its Software-IC libraries. He is writing another book, Object-oriented System-building; \nA Revolutionary Approach. His work is aimed at bringing about a software industrial rev-olution in which \nsoftware is produced, not by fab-ricating everything from first principles, but by as-sembling interchangeable \n(reusable) software com-ponents. Previously, he worked at Schlumberger-Doll Research Laboratory (AI and \n00 technolo-gies to oil field services) and in the ITT Program-ming Technology Center (00 for a large, \nhighly distributed telephone exchange, System 1240). He received his Ph.D. (University of Chicago) for \nwork now called neural networks. Adele Goldberg is President and CEO of Par- cPlace Systems. Pa.rcPlace \nSystems provides a broad range of object-oriented technologies and services, including development tools \nfor Smalltalk and for C++, that serve the applications develop-ment needs of corporate programmers. Before \nthat, she managed a research laboratory at Xerox PARC. She wrote several books, Smalltalk-80: The Lan-guage, \nwith David Robson, and Smalltalk-80: The Interactive Programming Environment , and led the effort to \nmake Smalltalk-available on standard microprocessors. She is editor of the book The History of Personal \nWorkstations. She was President of the ACM (1984-198G), helped form ACM Press, jointly received the ACM \nSoftware System Award (1987), and PC Magazine s Lifetime Achievement Award (1990). She has a Ph.D (In-formation \nSciences, University of Chicago, 1973). Martin L. Griss is a senior scientist at Hewlett-Pa.ckard Laboratories, \nPalo Alto. He leads research on softwa.re reuse, software-bus frameworks, and hypertext-based reuse tools. \nHe works closely with HP Corporate Engineering to systematically intro-duce softwa.re reuse into HP s \nsoftware develop-ment, processes. He was previously director of HP s Softwa.re Technology Labora.tory, \nresea,rching ex-pert systems, object-oriented data.bases, progran-ming technology, human-computer interaction, \nand distributed computing. He serves on HP software engineering councils and is a, consultant to HP ma,nagement \non software engineering. Before that he was a.n associate professor of Computer Science at the University \nof Uta,h, working on computer algebra and portable LISP systems (PSL). He has published numerous papers, \nand was an ACM na- tional lecturer. He has a Ph.D. (Physics, University of Illinois, 1971). References \nTed Biggerstaff and Alan Perlis (Eds). Software PI Reusability, volume 1 SC 2. ACM Press, NY, 1989. \nWill Tracz. Tutorial: Software Reuse: Emerg- PI ing Technology. IEEE Computer Society Press, IEEE Catalog \nNumber EH0278-2, 1988. Bruce Barnes and Terry B. Bollinger. Making PI reuse cost-effective. IEEE Software, \n8(1):13-24, January 1991. Doug McIlroy. Mass-produced software compo- Bl nents. In J. M. Buxton, P. \nNa.ur, ancl B. Ran-dell, editors, Soft ware Engineering Concepts and Techniques, lYG8 Nate Conference \non Soft- ware Engineering, pages 135-155 (88-98), Jan-uary 19G9. Brad J. Cox. Planning the software industrial \n 151 revolution. IEEE Software, 7(6):25-33? Novem- ber 1990. Gregory Aha.ronian. Starting a software \nreuse PI effort a.t your compa.ny. Distributed at NASA Workshop, Towards a IVational Softwnre Ex-change, \nApril 1991. P. F. Smart, S. N. Woodfield, D. W. Embley, VI and D. T. Scott. An empirical investigation \nof the effect of education and tools on soft-ware reusability. In Proceedings of the Seventh Annual International \nPhoenix Conference on Computers and Communications, pages 224- 228. IEEE Comput. Sot. Press, Washington: \nDC, TISA, Ma.rch 1988.  \n\t\t\t", "proc_id": "117954", "abstract": "", "authors": [{"name": "Martin Griss", "author_profile_id": "81100145121", "affiliation": "Hewlett-Packard Laboratories", "person_id": "PP31078141", "email_address": "", "orcid_id": ""}, {"name": "Sam S. Adams", "author_profile_id": "81332487530", "affiliation": "Knowledge Systems Corporation", "person_id": "PP31069178", "email_address": "", "orcid_id": ""}, {"name": "Howard Baetjer", "author_profile_id": "81100231471", "affiliation": "Agorics Project, George Mason University", "person_id": "P112079", "email_address": "", "orcid_id": ""}, {"name": "Brad J. Cox", "author_profile_id": "81406596855", "affiliation": "Information Age Consulting", "person_id": "P31872", "email_address": "", "orcid_id": ""}, {"name": "Adele Goldberg", "author_profile_id": "81100493367", "affiliation": "ParcPlace Systems", "person_id": "PP31044665", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/117954.117974", "year": "1991", "article_id": "117974", "conference": "OOPSLA", "title": "The economics of software reuse", "url": "http://dl.acm.org/citation.cfm?id=117974"}