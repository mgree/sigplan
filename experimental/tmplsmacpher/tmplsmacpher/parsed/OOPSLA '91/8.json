{"article_publication_date": "09-01-1991", "fulltext": "\n Phoenix, Arizona 6-17 October f991 Organizer: Robert Holibaugh Software Engineering Institute Carnegie \nMellon University The object-oriented modeling (OOM) workshop was held on Sunday October 5th, 1991 in \nconjunction with the OOPSLA 91 conference at the Hyatt Hotel Phoenix, Arizona. Participants were invited \nbased on a short position paper. We received 12 position papers and invited all who submitted a paper. \nAttendance was limited to one author per paper to encourage maximum participation by each attendee. Only \n11 authors were able to attend. The position papers were copied, bound, and sent to each participant \nby the 15th of September, 1991. The workshop goals were to identify the operational goals of Object-Oriented \nModels (OOM) and to identify the representation mechanisms that supported these goals. The participants \nhad reviewed the position papers prior to the workshop and everyone made insightful observations and \ncontributions. The workshop began with each participant defining on one slide their goals for OOM. This \nshort presentation introduced each participant, their background, perspective, and goals for OOM. During \nthe morning, the group brainstomled, refined, and clarified a set of OOM goals; these goals were then \ngrouped them into categories. The afternoon session followed a similar format. The participants made \npresentations that identified their representation techniques and related to their goals. These representation \ntechniques were discussed, criteria for OOMs were defined, the parts of an OOM were identified and defined, \nand future work that is needed on object-oriented modeling was identified. A short sumnmry of the workshop \nwas given by the organizer, and the workshop concluded at approximately 5:00 PM. In section 1, we describe \nthe activities and results of the discussion of OOM goals. In Section 2, the Addendum to the Proceedings \nOOPSLA 91  Object Oriented Modelling activities and results of the discussion on representation techniques \nfor OOM are discussed. Section 3 is a summary followed by a list of the participants and their position \npapers. 1 OOM Goals The position papers and participants for the Object- Oriented Modeling Workshop were \nan eclectic group. We had participants from academia, government, industry; from the US, Europe, and \nAustralia; from research, consultanting, software developers, and systems analysis; and from small, medium, \nand large companies. Each participant briefly described the OOM goals, their use of OOM, and how their \ngoals supported their use. 1.1 Presentations on OOM Goals From the presentations, it was not apparent \nwhether or not there would be any commonality in goals or representation. Each participant presented \none slide on their goals: John Sheffler described his use of OOMs at Mitre to support prototyping and \nrisk reduction for large scale projects. Specifically, they use OOMs for feasibility analysis and requirements \nsolicitation. Duane Cichy described his use of OOMs at Martin Marrietta to redefine the software development \nprocess. His process is now model centered, maps OOM to Ada, and supports auto translation to code. John \nPantone described his use of OOMs at Objectech in his consulting business. They use OOMs to define their \nclients problem (with good success), as a basis for their internal software development, and their object \nmodeling tool that provides documentation and will be the basis for I 73 I automating the software engineering \nprocess. Karl Lieberherr described his use of OOM at Northeastern University to develop tools to simplify \nthe software engineering process. The tools need a powerful, flexible, yet formal basis so they are easy \nto learn, crisp and clean mathematically, easy to maintain, and will support sophisticated software. \nTrygve Reenskaug described the Taskon A/C automated approach to software development that is based on \nOOMs. This approach has been fomralized into new roles that relate to levels of abstraction for a particular \nproduct line. Frameworks for a domain are created by the kernal-maker, while new modules are produced \nby the module-m aker, and systems produced for the user by the tool-maker. Roger Duke described the research \nat University of Queensland that is using formal techniques for OOM. OOM with a formal basis in Z is \nconcise, extensible, precise, analytical, methodological, and supports automated refinement, verification, \nand maintenance. John Sauter described the use of OOM at the Industrial Technology Institute to integrate \ncomplex electro-mechanical systems description, rapid prototyping, experimentation, and rapid reconfiguration \nOOM is used as a basis for their interdisciplinary effort. Fiona Hayes described her research at HP Labs \non software development that will support reuse, team development, and a traceable process for analysis, \ndesign, and implementation. This seamless approach has coherent notation, a uniform framework, rules \nfor derivation and satisfaction, and is based on an abstract OOM. Robert Holibaugh described the use \nat the Software Engineering Institute at Carnegie Mellon of OOM to support domain analysis for the Joint \nIntegrated Avionics Working Group to support software reuse. OOMs provide a simple, yet powerful technique \nto define abstract software specifications, domain constraints, analysis rationale, and external relationships \nto hardware. 1.2 Identification and Refinement of OOM Goals After the presentations, the group spent \none hour identifying goals for OOMs. They identified approximately 30 goals, that were grouped into three \nareas. There was some discussion of the goals as proposed, and they were later refined during the categorization \nto clarify overlap. These goals were grouped into three areas: Formal basis, Methodological , and Communication. \nSome of the goals were allocated to more than one area because they supported two of these high level \ngoals. At a high level, an object-oriented model s purpose is to communicate to both humans and machines, \nand therefore, an OOM needs an set of mathematical underpinnings. Secondly, there must exist a method \nthat a software engineer can follow to construct a model in his area of expertise. Below we list the \ngoals as grouped by the workshop. The participants did not believe that this was a complete set of goals, \nbut it was sufficient for the discussion to proceed to representation. The goals identified by the workshop \nare listed below. They are grouped into the areas where the workshop has placed them. An object-oriented \nmodel needs a formal basis that supports: testing the model to determine if it is well- formed formalizing \nthe properties of the domain using application specific languages identifying parts (aggregation) partitioning \nof classes and objects testing the model for completeness and consistency verifying the model is complete \nand consistent validating the model against existing systems identifying exceptions to the model specifying \nbehavior using multiple formalisms An Object-oriented model needs to be supported by a method. This method \nmust support: - a process for creating a model that is feasible for a software engineer -mechanisms for \nthe defining model - capturing the process for producing the model so that the expertise behind the \nmodel is traceable - identification, resolution, and documentation of issues that arise during model \ncreation -a serunless process for producing the model (i.e, no changes in notation or process for different \nlevels of abstraction) -identification of pnrts of the model or orouping parts into large classes Taggregation) \n- partitioning of OOM classes and objects that are related - evolution of the model over time To support \ncommunication, the model must support: - communication with people (people acquire information incrementally, \nand the model must support this type extraction of information) - communication with the machine (formal \nrepresentation for processing) - reasonable size even for complex problems; (i.e., model is comprehensible) \n - the documentation of real-world expertise - informal explanation (examples) - representation of \nmultiple perspectives about the domain - a grammar with its syntax for formal description  1.3 Summary \nof OOM Goals At the end of the morning session, the workshop coordinator reviewed the goals that had \nbeen identified and their categorization. The main use of OOMs was to communicate with people and through \nmachine analysis of the model to demonstrate certain properties of the model. These properties might \ninclude completeness, consistency, ambiguity, etc., but they were ultimately intended to communicate \nto people whether they were users, customers, developers, reviewers, or managers. To provide the machine \nprocessing, the OOM should have a mathematical bnsis. A formal basis also supports the method that is \nused to create the model. A method for creating the model is another form of communication; it is communication \nwith the creator of the model. The creator of the model is interested in the same properties as the user, \ncustomer, and manager, but his use of the information is different. The availability of completeness \nand consistency information provides essential feedback for validating model during construction. Addition \nof inconsistent or ambiguous data to the model diverts the focus of the model developer. When the developer \ncompletes a section of the model, the feedback on whether or not it is complete keeps attention focused \nuntil completeness is achieved and prevents problems later during use. Completeness in a model can be \nused to select between alternatives. Feedback which is mathematically based keeps the developer focused \non the current issues and can be used to compare alternatives. The consistency of the model s data also \nhelps to evaluate trade-offs that may ultimately be decided by the customer. A formal basis for an object-oriented \nmodel, and its support for communication and a method were readily accepted by this workshop. Representations \nof models are key to providing a formal basis for object-oriented modeling. 2 OOM Representation Techniques \nAfter lunch, the workshop discussed representation techniques that supported the goals defined during \nthe morning. We began the afternoon session with each participant describing their representation technique. \nAfter the presentations, we defined criteria that any representation techniques should meet, and the \nminimal information that should be included in an object-oriented model. The participants had diverse \nrepresentation schemes, but there is a consistency between these mechanisms. 2.1 Presentations on OOM \nRepresentation Techniques Each participant had one slide to describe his/her representation mechanism. \n. Duane Cichy describe the three views, application, host, and products views that are used by Martin \nMarrietta for creating object-oriented models. The application view specifies the functions, objects, \nattributes, and relations of the classes. The host view addresses software reuse and inheritance, commonality \nand code simplification. The product view is based on the analysis of the computer architecture and other \nsystem and hardware constraints. . Don Firesmith described the five models that make up the ASTS domain \nmodeling technique. The models are: semantic nets, message diagrams, classification diagrams, state diagrams, \nand timing diagrams. . John Sauter described the three representations that they use at the Industrial \nTechnology Institute to define OOMs. They use object to define the primitives, composition techniques \nto grouping related objects, control diagrams to describe the operations of the objects, and a petri-net \nlanguage for defining behavior. . Trygve Reenskaug described the elements of their OOM representation \ntechnique. They define object specifications, collaborations, and their role(s), and for interactions \nbetween objects they define ports, the contract between ports, and the messages that are passed between \nports. They also include programmer documentation for the model. . Fiona Hayes describe the five techniques \nthat she is using at HP labs to define OOMs. They use Entity-Relationship Diagrams (ERD) to define the \nstatic structure, pre- post specification to define an abstract definition of system behavior and to \ndefine changes to ERDs, object interactions to define programs of communicating objects and to define \neach system operation, class templates to define class attributes and the methods interface, and finite \nstate machines to define class behavior. They have also separate their research into systems and components \nareas. . John Sheffler described MITRE s use of OOMs for requirements analysis and design. They use Shlaer-Mellor \ntechniques [3] to describe the problem domain: the information model defines structure and the state, \nprocess, and object communication models define behavior. To describe a logical solution to the problem, \na method is used whose graphical representation is based on that of the Hierarchical Object-Oriented \nDesign (HOOD) method. . John Pantone described the diagrams that they use at Objectech to define their \nOOMs. Their notation is based on the object- oriented modeling method developed at GE [2] but it does \nnot have all the detail on relationships that they use. They have specifically not used all the detail; \nit presents problems when they do. . Karl Lieberherr described the four types of structures that they \nuse at Northeastern University to develop tools for object- oriented modeling and design. They use class \ndictionary graphs, class dictionaries, propagation patterns, and describe growth plans for the evolution \nof software. . Roger Duke described how they used Z to represent their OOMs at the University of Queensland. \nZ has all the mechanisms that they need to define their models. . Robert Holibaugh described the extensions \nthat were added the object-oriented analysis (OOA) techniques [ 11 of Coad and Yourdon for defining a \nstores management domain model for the JIAWG. These additions included: scenarios to define visible behavior, \ntextual rationale for structural variation in classes, attributes, and service, and pseudo code to define \nservice semantics. 2.2 Identification and Refinement of Representation Techniques After the presentations \non representation techniques, the group identified eight criteria for object-oriented modeling representation \ntechniques. These criteria were discussed, and the elemenls of a generic object- oriented modeling were \nidentified. Each element was discussed, examples identified, and the adequacy of these examples were \nevaluated. This representation session was concluded with a statement of where and what type of efforts \nwere needed to enhance object- oriented modeling in the future. The criteria for defining representation \ntechniques that the group identified can be grouped into two general areas: usage and capability. Some \ncriteria such as small set of primitives apply to both areas. The criteria that the workshop identified \nare that an object-oriented model be: -concise -easy to create - adjustable in scope -difficult to mis-use \n-based on a small set of primitives - able to define different levels of abstraction - expressive (i.e., \npowerful enough to model the problem and its solution) - able to define the whole problem/solution with \none technique (uniformity of representation) Being concise is not the same as being based on a small \nset of primitives. The small set of primitives describes the representation elements while a concise \nmodel doesn t extraneous information. These criteria are not orthogonal, but they covered the needs of \nthe group. Based on these criteria and further discussion, the elements of object-oriented modeling were \nidentified. Based on the identification of criteria and some 2.3 Summary of OOM discussion, the workshop \nidentified six elements for Representation Techniques inclusion in object-oriented models. Most of these \nelements define static attributes of the model, but In summary, the group felt that: model behavior deftnes \nis a dynamic attribute. The - an effective object-oriented model should be minimal elements of an object-oriented \nmodel are: able to describe itself, . Classes and relationships between the -defining behavior was the \nlargest area for classes. Object-oriented modeling research, relationships include: generalization/ - \na mechanism for defining behavior should be specialization, whole-part, and associative specification \nindependent, relationships. These relationships define the -more attention should be given to properties \nof the classes or objects. Entity- relationships other that generalization- Relationship Diagrams, semantic \nnets, and specialization and whole-part, and frames can be used to define model structure. -whole-part \nrelationships need more study and better examples than are in the . Class Functions. The model must define \nthe literature. functions for each class in the model. How does the object s state get changed. Data \n  3 Workshop Summary flow diagrams, pseudo code, and formal specifications can be used to define the \n 1 . At me conclusion of the workshop, the participants functions of an object-oriented model all expressed \ntheir surprise that there had been so . Constraints on classes, functions, and much agreement on goals, \nrepresentation, and areas relationships. Some classes may be for further work. This was especially surprising \ndue mutually exclusive in the same instance of a to the diverse backgrounds of the participants. model. \nPre-post conditions using predicate logic define constraints on model state, References relationships, \nand classes. Predicate logic, HI P. Coad and E. Yourdon temporal logic, or pseudo code can be used Object-Oriented \nAnalysis. to define constraints. Prentice-Hall, Inc., Englewood Cliffs, . Behavior. The model must be \nable to address NJ 07632,199O. real-time (temporal) issues. What are the preferred, allowable, or inhibited \norder of PI J. Rumbaugh, M. Blaha, W. Premerlani, execution of functions in the model. F. Eddy, and W. \nLorensen. StateCharts, finite-state machines, petri- Object-Oriented Modeling and nets, temporal logic \ncan all be used to Design. describe some aspects of model behavior. Prentice-Hall, 199 1. . Rationale. \nRationale defines how, when, [31 S. Shlaer and S. Mellor. where, and why each variation is included in \nObject-Oriented Systems Analysis: the model. For exainple, in a car model, Modeling the World in Data \nsome cars have a V-6 engine standard with Prentice-Hall, Englewood Cliffs, NJ, an optional V-8, but cannot \nhave an 4 1988. cylinder engine. English text or predicate logic can be used to define rationale. . Traceability. \nThe model should describe for the user how it was created, so that its construction and use can be more \nthoroughly understood. English text can be used, but a more formal representation is desirable. PAPERS \nAND PARTICIPANTS IN OBJECT-ORIENTED MODELING WORKSHOP  Applying Object Oriented Technology to a Robotic \nSubsystem-An Application of the IADA Method and Tool Set Duane Cichy, J. Spears, and R. Nichols Martin \nMarrietta PO Box 179 Denver, CO 80201 Object-Oriented Analysis Models Must be Coherent, Fiona Hayes and \nDerek Coleman HP Labs Filton Rd Bristol BS12 6QZ UK A Formal Approach Io Object-Oriented Modeling Using \nObject-Z, Roger Duke Computer Science Department University of Queensland St. Lucia Queensland 4072 AUSTRALIA \nObject-Oriented Graphics for Requirements Analysis and Logical Design, Don Firesmith Advanced Software \nTechnology Specialist 17124 Lutz Road Ossian, IN 46777 Joint Integrated Avionics Working Group (JIAWG) \nDomain Modeling, Robert Holibaugh Software Engineering Institute Carnegie Mellon University Pittsburgh, \nPA 15213 The Demeter Modeling Method, Karl Lieberherr Director, Center for Software Sciences Northeastern \nUniversity College of Computer Science 125 Cullinane Hall 360 Huntington Avenue Boston, MA 02115 Object-Oriented \nModeling, John Pantone Objectech Corp. PO Box 27 168 San Diego, CA 92198 OOM Goals and Represent&#38;on \nTechniques at Taskon, Trygve Reenskaug Taskon A/S Gaustadalleen 21 N 0371 Oslo 3 Norway XSpec: Modeling \nComplex Systems, John Sauter Industrial Technology Institute PO Box 1485 Ann Arbor, MI 48106 Inheritance \nConstraints: Another Interpretation of Specialization, W. Sun, R. Ege, and C. Yu School of Computer Science \nFlorida International University The State University of Florida at Miami, University Park, Miami, Florida \n33 199 Models for Object-Oriented Development, Elaine Ward and John Sheffler MITRE Corp. 7525 Colshire \nDrive McLean, VA 22102 9-11 October 1991 Phoenix, Arizona  \n\t\t\t", "proc_id": "143773", "abstract": "", "authors": [{"name": "Robert Holibaugh", "author_profile_id": "81100138635", "affiliation": "", "person_id": "P245210", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/143773.143794", "year": "1991", "article_id": "143794", "conference": "OOPSLA", "title": "Object oriented modelling", "url": "http://dl.acm.org/citation.cfm?id=143794"}