{"article_publication_date": "08-01-1997", "fulltext": "\n Simple semantic analysis problems for functional programs Viktor Sabelfeld viktor@montblanc. rs. uni-siegen.de \nUniversitat-Gesamthochschule Siegenl Germany Andrei Sabelfeld andreiQcs.chalmers .se Chalmers University \nof Technology, Goteborg, Sweden Adviser: ~ohn Hughes, rjmh@cs.chalmers.se Keywords: static analysis, \nflow analysis, abstract interpretation, approximation, recursion scheme, strictness analysis, parameter \ndependence. To check applicability conditions of equivalent program transformations, to detect semantic \nerrora in programs, and to specialise programs efficiently one should learn how to determine semantic \nproperties of programs. Many authors have explored program analysis problems on program mo\u00addels. Most \nsignificant results were obtained in flow analysis [3] and abstract interpretation [1, 2] approaches. \nWe introduce a new method of semantic analysis for a model of functional programs called recursion schemes. \nWe describe two simple classes of semantic property analysis problems, forward and backward property \nanalysis problems, and use a marking technique for their solution. The basic idea of forward analysis \nis to explore the properties which flow from function result to its arguments, backward analy\u00adsis deals \nwith the properties which flow from function argu\u00adments to its result. Our approach is close to Patrick \nand Radhia Cousot s abstract interpretation approach [1, 2]. We consider the fix\u00adpoint semantics of recursive \nprograms. Namely, we associate a term sequence called approximation sequence to a recur\u00adsion scheme; \nit is obtained by the systematical unfolding of function calls in the main term of the scheme. Given \nthe properties of the approximation sequence terms we de\u00adfine the program property as the limit of the \nconstructed sequence of properties. Forward and backward property analysis problems prove to be undecidable \nin the general case. However, we give sufficient conditions for solving these problems and present marking \nalgorithms that compute program properties un\u00adder the conditions required. Further, we sketch examples \nof forward (essentiality of term occurrences) and backward (hopelessness of term occurrences) property \nanalysis prob\u00adlems. Informally, a term occurrence in a program is essential if it influences the approximation \nsequence of the program. Permission to make digital/tlard copy of part or all this work for personal \nor classroom use is granted without fee provided that copies are not made or distributed for profit or \ncommercial advarr tage, the copyright notice, the title of the publication and its date appear, and notice \nia given that copying is by permission of ACM Inc. To copy otherwise, to republish, to post on servers, \nor to redistribute to lists, requires prior specific permission and/or a fee ICFP 97 Amsterdam, ND ~ \n1997 ACM 0-89791 -918-1 /97/0006 . ..$3.50 Suppose a subset Strict(~) of the set 2tl, ,ar ~$ tf)) is \nassociated to each basic functional symbol ~. An interpre\u00adtation Z is strict, if the condition Vdl ...Vd. \n(VA EStrict(f) 3 EA d,=1) + I(f )(d,, . . ..d~)=l wheren= ar ity(f) holds for each basic symbol ~. For \nex\u00adample, the natural way to bound the interpretations of the ternary symbol if is to settle Strict(if) \n= {{1, 2}, {1, 3}}. A term t is called hopeless if Z(t) = 1-for all strict interpreta\u00adtions I. Both essential \nand hopeless term occurrences can be de\u00adtected by the marking algorithms that solve the forward and backward \nproblems. Some state property analyses of recursive programs well described either in the flow analysis \nor abstract interpre\u00adtation approaches cannot be formulated in a natural way aa either forward or backward \nanalysis problems. As an in\u00adstance we describe the formal parameter dependence analysis of recursion \nschemes aa a flow analysis problem.  References [1] Cousot P., Cousot R. Abstract interpretation: a \nuni\u00adfied lattice model for static analysis of programs by con\u00adstruction or approximation of fizpoints. \nIn Conference Records of the 4 h Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, \npages 238-252. Los Angeles, California, 1977. [2] Cousot P., Cousot R. Abstract interpretation frame\u00adworks. \nJournal of Logic and Computation, 2(4):511 547, August 1992. [3] Kam J.B., Unman J.D. Monotone data flow \nanalysis frameworks. Acts Informatica 7: 9, pages 305-318, 1977. 319  \n\t\t\t", "proc_id": "258948", "abstract": "", "authors": [{"name": "Viktor Sabelfeld", "author_profile_id": "81100199345", "affiliation": "Chalmers University of Technology, G&#246;teborg, Sweden", "person_id": "P291238", "email_address": "", "orcid_id": ""}, {"name": "Andrei Sabelfeld", "author_profile_id": "81100199347", "affiliation": "", "person_id": "PP36025272", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/258948.258988", "year": "1997", "article_id": "258988", "conference": "ICFP", "title": "Simple semantic analysis problems for functional programs (poster)", "url": "http://dl.acm.org/citation.cfm?id=258988"}