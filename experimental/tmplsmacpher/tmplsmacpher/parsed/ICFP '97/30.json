{"article_publication_date": "08-01-1997", "fulltext": "\n Functional Programming and Attribute Grammars Deforestation Etienne Duris jrom a work with Didier Parigot \nand Gilles Roussel Etienne. Duris@inria. fr INRIA, Domaine de Voluceau, Rocquencourt, BP 105, 78153 \nLe Chesnay Cedex, France The functional programming community is paying in\u00adcreasing attention to structure-baaed \ntransformations. To make these trmx+formations simpler, data structures in pro\u00adgrams should be explicit. \nWe argue that one of the original concepts of Attribute Grammars (AGs) is precisely to make data structures \nexplicit in program specifications. Here, we point out the similarities amd relations between AGs and \nfunctional programming paradigms, especially in the con\u00adtext of a data structure-based transformation, \ncaUed defo\u00adrestation, which prevents the construction of useless inter\u00admediate data structures in function \ncomposition. An AG is a declarative specification of computations over structures. Commonly these structures \nare concrete, but Dynamic AGs [Parigot et aL96] work equally well with abstract structures, like a computation \nrecursion scheme. We could then consider an AG as a function with an ar\u00adgument driving the computation, \npossibly with other ar\u00adguments aa inherited attributes (computed top-down), and which returns its result \nas a synthesized attribute (computed bottom-up). Nevertheless, AGs specifications have some important \ncharacteristics which allow them to be clear, concise, and easily maintained. First they are declarative, \ni.e. program specification is completely independent of any evaluation or\u00adder. Secondly they allow a \ncomplex computation to be de\u00adcomposed into small eskly understandable local parts, on each constructor, \nwhich are joined together by the gen\u00aderator evaluator. Finally they make the structure (con\u00adstructors) \nexplicit in the specification, facilitating structure\u00adbased transformations like deforestation or structure\u00addirectea \ngenericity i.e. instantiation of an algorithm for a new structure, giving a relation between old and \nnew struc\u00adtures [Dur97]. From a given structure T1, the successive application of twoAGs f : T1 + Tz \nand g : Tz-T3 yields a structure of type T3. In such a case, the intermediate structure of type T2 is \nuseless, and the aim of Descriptional Composition (DC) is to automatically transform the f and g composition \ninto a new AG specification which no longer uses T2-constructors. The basic idea for DC is to recognize \nin j the use of a con\u00adstructor c and plunge (integrate) the computation associated with c in g into this \nuse (semantic rule projection). Permission to make digital/hard copy of part or all this work for personal \nor classroom use is granted without fee provided that copies are not made or distributed for profit or \ncommercial advan\u00ad tage, the copyright notice, the title of the publication and its date appear, and notice \nis given that copying is by permission of ACM, Inc. To copy otherwise, to republish, to post on servers, \nor to redistribute to lists, requires prior specific permission and/or a fee. ICFP 97 Amsterdam, ND \n@ 1997 ACM 0-8!3791-918-1 /97/0006 ... $3.50 This intermediate data structure elimination is also the \ngoal of functional deforestation. Considering T1, T2 and T3 as types and ~, g as functions, several methods \nhave been studied in functional programming to achieve such trans\u00adformations. Most of these try to exploit \na kind of generic control operator to capture both the pattern of recursion of a function and the pattern \nof recursion of the type defini\u00adtion. The shortcut deforestation of Launchbury et al. [93] makes this \npossible for lists, using a f oldr/buildr elimi\u00adnation rule. To take every type into account, Sheard \net al. [93] consider in their Normalization Algorithm the fold operator (a catarnorphism) related to \na jtmctor automati\u00adcally generated from algebraic type dethition. Thanks to Takkano et aL s studies [95], \nHu et al. [96] have recently generalized these ideaa and homogenized these notions with hylomorphisms. \nThis has lead to the automatic exploitation of deforestation theorems like Acid Rain. These methods (functors, \ncata, hylo) are similar to AGs Descriptional Composition in that they are baaed on lo\u00adcal transformations \n(at constructor level); furthermore, they provide the same results for first order functions [Dur97]. \nIn spite of these similarities, a particularity of DC is to be a source to source transformation, completely \nindependent of any evaluation order, whereas in fusion methods, the functor (type) gives the function \nevaluation scheme (fusion could be viewed as generalized partial evaluation). Moreover, for more complex \nprograms, AGs naturally use inherited attributes rather than higher order functions. From the beginning \nof AGs, inherited attributes have been common objects among other attributes (unlike higher or\u00adder functions \namong first order ones in functional program\u00adming). Thus, for some complex specifications, fusion trans\u00adformation \nneeds special treatments due to higher order func\u00adtions where DC only has to deal with inherited attributes. \nFor example, the well-known reverse function (for lists) com\u00adposed twice leads to a simple AG copy by \nDC, whereas this is not necessarily so with fusion methods. Therefore it seems interesting to study possible \ncross\u00adfertilization between these two different paradigms, higher order functions and inherited attributes. \nWe think that hy\u00adlomorphisms in triplet form used in the HYLO system [Hu et aL97] could ease comparisons, \nbecause they highlight dis\u00adtinctions between syntactic and semantic parts of a function. References for \ncited works appear in: ~ur97] E. Duris, D. Parigot, G. Roussel, M. Jourdan. Structure-directed genericity \nin finctionai programming and attribute grammars. RR-3105, INRIA, Feb. 1997. ftp: //ftp. inrla. fr/INRIA/publicat \nion/RR/RR-3105.pa .gz  312  \n\t\t\t", "proc_id": "258948", "abstract": "", "authors": [{"name": "Etienne Duris", "author_profile_id": "81100594142", "affiliation": "INRIA, Domaine de Voluceau, Rocquencourt, BP 105, 78153 Le Chesnay Cedex, France", "person_id": "P79418", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/258948.258981", "year": "1997", "article_id": "258981", "conference": "ICFP", "title": "Functional programming and attribute grammars deforestation (poster)", "url": "http://dl.acm.org/citation.cfm?id=258981"}