{"article_publication_date": "08-01-1997", "fulltext": "\n BIGTYPES in LIL Bruce J. McAdam bjm@dcs.ed.ac.uk The University of Edinburgh Supervisor: Stephen Gilmore \nstg@dcs.ed.ac. uk Motivation Despite the assistance which a typed functional program\u00adming language gives \nprogrammers, programming is still a process fraught with problems. In fact, sometimes problems are caused \nby programmed relying too heavily on correct typing as an indication of a program correctness[3]. BIGTYPES \nare a system devised to provide extra type information to programmers in languages using Hindley-Milner \ntype inference (e.g. Standard ML[4]). By making extra information available, the programmer will discover \nmore errors without the need to break apart a stmctured program in order to investigate local definitions. \nThe extra information in a BIGTYPE explains every use of a name in a program (e.g. declarations of new \nfunctions and uses of library functions). This helps the programmer by: letting them know if a library \nfunction had a different type from that expected; giving the type of imperative oper\u00adations; reminding \na programmer of the types in a program. An Example The BIGTYPE has two parts, a DEEPTYPE describing \nfree names (e.g. those referring to librzg-ies or built into the lan\u00adguage) and a WIDETYPE describing \nnew names (e.g. func\u00ad tions defined shows a simple bugged with by the programmer). This but incorrect \nprogram which the aid of BIGTYPES. example could below be de\u00ad fun I len len (Cons (h, t)) (Smpty) = = \n1 O + len(t) The BIGTYPE tells the programmer that Empty is a pat\u00adtern (variable) with type List. This \nis not what was expec\u00adted, it should be a constructor with type List. In this case, the programmer has \nnot realised that lists are fat-lists implemented with three constructors: Cons, App and Nil. Empty is \ntreated as matching lists with struc\u00adture App(a, b) or Nil. This consequently gives incorrect answers \nfor lists formed with the append constructor. The BIGTYPE for this example is sufficient to show the \nprogrammer the error by telling him how the names have been interpreted. Permission to make digital/hard \ncopy of part or all this work for personsl or claasroom uae is granted without fee provided that copies \nare not made or distributed for profit or commercial advan\u00adtage, the copyright notica, the title of the \npublication and its date appear. and notice is given that copying is by permission of ACM, Inc. To copy \notherwise, to republish, to post on servers, or to redistribute 10 lists, requires prior specific permission \nand/or a fee ICFP 97 Amsterdam, ND @ 1997 ACM 0-89791 -918 -1/97 /0006,.. $3.50 Implementation W The \nBIGTYPES are derived using an extension of the stand\u00adard algorithm for Hindley-Milner type-inference[2], \nW. We call this extended algorithm W . W has clauses for each of the type-derivation rules, W retains \nthese but also inserts into the BIGTYPE information which algorithm W wouJd discard. Though the implementa\u00adtion \nwas for ML, the close relationship between the semantic rules and W mean that BIGTYPES can be implemented \nfor any similarly typed language. Algorithm W has been added to the ML-Kit compiler[l] to demonstrate \nthe use of BIGTYPES. There was no notice\u00adable effect on run-time. The implementation used a simple pretty-printer \nfor dis\u00adplaying the results. Information could be presented bet\u00adter using a more sophisticated printing \nroutine, for example an interactive printer which allows the programmer to pick which parts to display \n(so the programmer can focus on a particular area and not be overwhelmed by extra informa\u00adtion). The \nPoster The poster illuminates the concept with examples of pro\u00adgrams and their BIGTYPES. The algorithm \nis also given in detail with an explanation of its relationship to the semantic rules to show how easily \nit can be added to an existing type checker. References [1] Lars Birkedal, Nick Rothwell, Mads Tofte, \nand David N. Turner. The ML Kit. DIKU, March 1993. [2] Luis Damas and Robin Milner. Principal type-schemes \nfor functional programs. In Ninth Annual Symposium on Principles of Programming Languages, 1982. [3] \nStephen Gilmore. Designing for proof. In Mathematics 0/ Software Quality, 1995. [4] Robin Milner, Mads \nTofte, and Robert Harper. The Definition of Standard ML. MIT Press, 1990. 316 \n\t\t\t", "proc_id": "258948", "abstract": "", "authors": [{"name": "Bruce J. McAdam", "author_profile_id": "81100195979", "affiliation": "The University of Edinburgh", "person_id": "P33610", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/258948.258985", "year": "1997", "article_id": "258985", "conference": "ICFP", "title": "BigTypes in ML (poster)", "url": "http://dl.acm.org/citation.cfm?id=258985"}