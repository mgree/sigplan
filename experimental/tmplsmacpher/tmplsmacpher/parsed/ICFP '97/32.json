{"article_publication_date": "08-01-1997", "fulltext": "\n Modelling String Folding with G2L Grammars Natalio Krasnogor Pablo E. Martinez L6pez Pablo Mocciola \nDavid Pelts LIFIA, Departamento de Informatica, Universidad National de La Plata. C.C. 11, Correo Central, \n1900, La Plata, Buenos Aires, Repfiblica Argentina E-mail: {natk,fidel,pablom, davp}@info. unlp.edu. \nar URL: http: //www-lifia.info. unlp.edu. ar In the last few years an entirely new discipline has emerged, \nComputational Biology . lt tties to solve prob\u00adlems raised from Biosciences using mathematical and com\u00adputational \ntools. The Protein Folding is one of the most important open problem in Biology due to its theoret\u00adical \nand pragmatic implications. In order to study the Protein Folding Problem in an abstract way, we will \nuse a generalization of it due to Paterson and Przytycka [4]. In their paper they consider the String \nFolding Problem, with can be stated aa follows: given a finite string S, an integer k, andagrid G,isthere \nafold ofSinGwith a score at least k? A fold of S in G is defined as an injective mapping F: [1.. .n]-G, \nwhere n=l Sl, andifl<i, j~ n, i= j-1 then F(i) is adjacent to F(j) in G; the score of F is computed counting \nthe number of identical symbol pairs mapped to adjacent nodes of G, calling those pairs bonds. In their \npaper, Paterson and Przytycka show that Strtng-Folding is NP-Complete in the Z2 and Z3, while other instances \nof the problem remain NP-Hard. In our work we try to model the process of string folding using an extension \nof L-system to generate a family of restricted parallel graph grammars. The biologist Aristid Linden\u00admayer \ndevelops what it came to be named Lindenmayer Parallel rewriting systems when he was trying to model \ndevelopment in plants [2]. A basic L-system is a gram\u00admar G={E, II, a}, where X is a finite set of symbols \ncalled the alphabet, II is the set of rewriting rules and crEX* is the starting string that generates \nthe language. The most simply L-system is context-independent, taking II with the structure {r : X+X \n}, with means that a sim\u00adple character of a string S maps to a string of Z . One of the most important \nfeatures of L-systems is that the rewriting rules are applied in parallel all over the original string, \nwhile in other grammars, rules apply sequentially. We can extend L-systems to allow context-sensitivity, \nif the rewriting rules are of the form: L{ P) R+-S, with PEZ and L, RcE*. The traditional interpretation \nto L-systems are Logo-like draws. The G2L grammars are a neat ex\u00adtension to L-systems that can be used \nto specify arbitrary graphs (see [1] for a detailed description). We are researching the use of restricted \nG2L gram\u00admars as a describing tool for string foldings. Our aim is to represent the graph induced by \nthe mapping F() us\u00ading this new subfamily of grammars. We must be able to Permission to make digital/hard \ncopy of part or all this work for personal or classroom use is granted without fee provided that copies \nare not made or distributed for profit or commercial advan correctly disable cycles in the graph, with \nin turns means that the folding is self avoiding. The restrictions we are developing apply to the set \nof rewriting rules. We allow just some kind of structures, and we do not permit ar\u00adbitrary left and right \ncontexts. We implement our ideas using a functional language [3]. Functional languages as HaekelJ [6] \nfit naturally with many features of G2L gram\u00admars, for example it is straightforward to implement fold\u00ading \npatterns oriented algorithms. The absence of side effects allows to develop the software in sequential \nma\u00adchines and later on to parallefize the simulations, thus reflecting in a strong way the parallelism \nthat the String Folding Problem have per-se . Most important, it allows to reason about the problem and \nnot about the program, allowing non-computer-scientist to develop algorithms in a very abstract way, \nsaying what to do but not how to do it ; as a consequence, programs are short. From a pragmatic point \nof view, using a functional program and G2L grammars to model the string folding process, we are able \nto develop a rich set of paire (fi,fi ), where jp is a folding pattern [5] and fp is a functional program \nthat will fold the pattern fp in a certain way. This gives rise to a powerful, easy to understand, parallel \nsimulation of the folding process. References [1] E.J.W. Boera. Using L-systems aa graph grammar: G2L \nsys\u00adtems. Technical Report 95-30, Department of Computer Sci\u00adence, Leiden University, The Netherlands, \nOctober 1995. [2] A. Lindenmayer. Mathematical models for cellular interaction in development. Journal \nof Theoret$ca/ B:o/ogy, 18, 1968, [3] N. Krasnogor, P.E. Martinez L6pez, P. Mocciola, and D. Pelts. Protein \nfolding meets functional programming. Presented at Recomb 97; submitted to ICFP 97. [4] M. Paterson and \nT. Przytycka. On the complexity of string folding. Preprint submitted to Elsevier preprint. [5] D. Pelt \na, N. Kraanogor, and P. Moscato. Primeros result ados de un algoritmo deterministic para e] problems \ndel protein folding en el modelo H-P. In IV .lomadas del Grupo Monte. wdeo, Brasil, 1996. [6] J. Peterson, \net al. Report on the programming language Haskell, a non-strict, purely functional language. Version \n1.3. Technical report, Yale University, May 1996. tage, the copyright notice, the title of the publication \nand its date appear, and notice is given that copying is by permission of ACM, Inc. To copy otherwise, \nto republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or \na fee. ICFP 97 Amsterdam, ND @ 1997 ACM 0-89791 -918 -1/97 /0006 . ..$3.50 314  \n\t\t\t", "proc_id": "258948", "abstract": "", "authors": [{"name": "Natalio Krasnogor", "author_profile_id": "81100048341", "affiliation": "LIFIA, Departamento de Inform&#225;tica, Universidad Nacional de La Plata, C. C.11, Correo Central, 1900, La Plata, Buenos Aires, Rep&#250;blica Argentina", "person_id": "PP33022988", "email_address": "", "orcid_id": ""}, {"name": "Pablo E. Mart&#237;nez L&#243;pez", "author_profile_id": "81100004230", "affiliation": "LIFIA, Departamento de Inform&#225;tica, Universidad Nacional de La Plata, C. C.11, Correo Central, 1900, La Plata, Buenos Aires, Rep&#250;blica Argentina", "person_id": "P218884", "email_address": "", "orcid_id": ""}, {"name": "Pablo Mocciola", "author_profile_id": "81100097112", "affiliation": "LIFIA, Departamento de Inform&#225;tica, Universidad Nacional de La Plata, C. C.11, Correo Central, 1900, La Plata, Buenos Aires, Rep&#250;blica Argentina", "person_id": "P218887", "email_address": "", "orcid_id": ""}, {"name": "David Pelta", "author_profile_id": "81332520645", "affiliation": "LIFIA, Departamento de Inform&#225;tica, Universidad Nacional de La Plata, C. C.11, Correo Central, 1900, La Plata, Buenos Aires, Rep&#250;blica Argentina", "person_id": "P63269", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/258948.258983", "year": "1997", "article_id": "258983", "conference": "ICFP", "title": "Modelling string folding with G2L grammars (poster)", "url": "http://dl.acm.org/citation.cfm?id=258983"}