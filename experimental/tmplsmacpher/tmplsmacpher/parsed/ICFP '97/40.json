{"article_publication_date": "08-01-1997", "fulltext": "\n A-flow: A Parallel Functional Synchronous Dataflow Language Guilhem de WAILLY Th2me Architectures Logicielles \net Materielles Laboratoire d Informatique, Signaux et Systemes URA 1376 du CNRS et de l University de \nNice -Sophia Antipolis 41, bd Napo1610n III -06041 -Nice CEDEX -France http://alto.unice.fr/~gdw In \nthis summary, we present a new functional synchronous datatlow (FSDF) language designed to efficiently \nprogram a static paraI1el architecture (SPA) in a time/resource deter\u00ad ministic way. Conventional dynamic \nparallel architectures (DPA) usu\u00adally share resources between the processors via an intercon\u00adnection \nnetwork. This mechanism avoids the oonfhcts when two processors want to access the same resource at the \nsame time. The main advantage of DPAs is to liberate the pro\u00adgrammer from the low level resources sharing \nproblem. But, the implementation becomes time indeterministic because it is impossible to know in advance \nhow long are the the con\u00adfhct management times. We have shown in our theais (available in our WEB page.) \nthat some kind of applications, such as but not limited to digital filters, do not need any dynamic access \ncontrol be\u00adcause potential conflicts can be solved at compile-time. As shown ii figure 1, the resulting \narchitecture beco\u00admes particularly simple: all the processors and the shared resources (global memory, \n10s) are directly plugged into a main bus (we an current[u studying a SPA with hetero\u00adgenwus processors.). \nCom\u00adpared to DPAs, it has sev\u00aderal advantages: it is simple and cheap, simple to emu\u00adlate, simple to \nextend, possi\u00adbly with heterogeneous pro\u00adcessors, the hardware does not dynamically alter the be\u00adhavior \nof the implementa\u00adtions. Figure 1: The SPA The resource accesses are model. scheduled with the introduc\u00adtion \nof well placed nop instructions ( The main bus could be thought as a bottle neck , wnversely to a DPA \nmodel. But in fine, the nop are also genemted by the hardwarv.). The main problem with the SPA model \nis that it is very difficult to program by hands . So, such architectures can Permission to make digital/hard \ncopy of part or all this work for personal or clasaroom use is granted without fee provided that copies \nare not made or distributed for profit or commercial advan\u00ad tage, the copyright notice, the title of \nthe publication and ita date appear, and notice is given that copying is by permission of ACM, Inc. To \ncopy otherwise, to republish, to peat on aervera, or to redistribute to Iista, requires prior specific \npermission and/or a fee ICFP 97 Amsterdam, ND  @ 1997 ACM 0-89791 -918 -1/97 /0006,.. $3.50 only be \nfully exploited if they can be programmed in an automatic manner. The strong constraint imposed by the \nhardware is the time/resources bounds of the applications. In order to ob\u00adtain these properties in a \nproved way, we have formalized state based applications. This formalization includes an abstract language \ncalled A-matrices and its solving machine. The solving machine gives the semantics of the programs. It \nis fully functional and baaed on a tail recursive operator ( Taii recursive func\u00adtions are implemented \nwith itemtions (goto).). We have de\u00adsigned three criterion operators which reject time or resource unbound \nprograms. Due to the functional property of the model, these criteria are proved. On the top of the abstract \nmodel, we have designed a FSDF language named A-FLOW. It extends the abstract language with the lambda \nabstraction concept, and with an implicit static type checking ( Implicit means that types are deduced \nfrom the data writting, such as in SCHEME. The ad\u00advantage is that the pmgmmmer does not have to declare \nevery where the type of the data, and he can ensily design polymorphic abstmctions.). Modular design \nis possible because A-FLOW supports hierarchical environments with static bindings. The A-FLOW compiler \nis very extensive. The data type and operator, named algebra, are described in some text files which \nare dynamically loaded into the compiler. The user can define its own algebra very quickly. Data types \nare identified with regular expressions. In addition, it supports incremental compilations of separate \nmodules. On the other side, targets of the compiler (the code that the compiler will produce) are also \ndescribed into text files that are dynamically loaded. Currently, C, SCHEME, asm-386 and SPA targets \nare defined (Notice that these difler\u00adent targets indicate that the compiler isreallyadaptable.). The \nSPAtarget is dedicated to a parallel scheduler for the SPA. In order to validate the tool chain, we have \nimplemented the ADP(Xcompression norm used in the wireless phones, The graphical interface of A-FLOW \ncould easily model the graphical specification parts of the norm. The A-FLOW lan\u00adguage is used to write \nthe most complicated parts, almost = term rewriting. With a 5 processors SPA, the obtained gain is about \n60 percent (If toe have 100 instructions w th one processor, we obtain 40 instructions with jive processors.). \nSo, theSPA con\u00adcept and the tool chain show their efficiency. They are well adapted for large applications \nimplemented with expensive processors, 322  \n\t\t\t", "proc_id": "258948", "abstract": "", "authors": [{"name": "Guilhem de Wailly", "author_profile_id": "81100034321", "affiliation": "Th&#232;me Architectures Logicielles et Materielles, Laboratoire d'Informatique, Signaux et Systemes, URA 1376 du CNRS et de l'Universit&#233; de Nice - Sophia Antipolis, 41, bd Napol&#233;lon III -06041 - Nice CEDEX - France", "person_id": "P100334", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/258948.258991", "year": "1997", "article_id": "258991", "conference": "ICFP", "title": "&#955;-flow (poster): a parallel functional synchronous dataflow language", "url": "http://dl.acm.org/citation.cfm?id=258991"}