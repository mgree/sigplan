{"article_publication_date": "08-01-1997", "fulltext": "\n Distributed Programming, a purely functional approach Eleni Spiliopoulou, Ian Holyer, Neil Davies Department \nof Computer Science University of Bristol Functional languages are considered as providing a par\u00adticularly \nexpressive approach to programming complex sys\u00adtems. Due to their clean semantics, they allow for correct\u00adness \nproofs, because equational reasoning can be applied. The major underlying feature that provides the ability \nfor equational reasoning is referential transparency. Our goal is to tackle the complex logical problems \nof distributed systems using functional languages. To address the issue of distribution, concurrency \nis required, which is usually considered as introducing non-determinism [2]. Un\u00adfortunately non-determinism \ndestroys the clean properties of functional languages, because equational reasoning can\u00adnot be applied. \nOur approach is to allow concurrency, but without any non-determinism at the programming level. The form \nof concurrency which has been adopted, we have called deter\u00administic concurrency [3, 1]; this preserves \nreferential trans\u00adparency and the equational reasoning this supports. All desired program behaviors in \nthis setting can be achieved without non-determinism. This approach enables not only the behaviour of \nreactive but also that of distributed systems to be described in purely functional terms. Our interest \nis twofold. The first is preserving the logical properties of programs, independently of the way in which \nthey are distributed. The second is providing a framework for a novel form of computational mobility \namongst loosely coupled systems. The deterministic concurrency approach to distribution leads to a model \nwith a number of important characteris\u00adtics. Many of these stem from the fact that the issue of distribution \nis orthogonal to the issue of fimctionality. One characteristic is the relative simplicity of distributed \nprogram development. In most distributed programming en\u00advironments, the distribution mechanisms are programmed \nexplicitly. With our model, the way in which a program is distributed across processors is specified \npurely by anno\u00adtations. The details of communication are handled auto\u00admatically by the underlying mechanism \nof demand driven execution rather than being programmed explicitly. More importantly, the desired functionality \nof a program can be developed independently of the way in which it is to be dis\u00adtributed. A program can \nbe developed in a single-processor Permission to make digital/hard copy of part or all this work for \npersonal or classroom use is granted without fee provided that copies are not made or distributed for \nprofit or commercial advan\u00ad tage, the copyright notice, the title of the publication and its date appear, \nand notice k given that copying is by permission of ACM, Inc. To copy otherwise, to republish, to post \non servers, or to redistribute to lists, requires prior specific permission end/or a fee ICFP 97 Amsterdam. \nND  @ 1997 ACM 0-89791 -918 -1/97 /0006 . ..$3.50 setting where debugging is relatively easy before \nbeing spread across many processors. Another characteristic is the high level of trustability which can \nbe achieved. The semantics and externally visi\u00adble behaviour of a program are the same, no matter how \nthe program is distributed. The only difference is in the speed at which results or interactions occur. \nThis allows a pro\u00adgrammer to gain confidence in the correctness of distributed programs. Only properties \nof the functionality of a program need be proved; properties of the distribution aspects rely on the \ncorrectness of the underlying support mechanisms. Within this framework, all entities are mobile. Both \ncode and data can be moved dynamically, on demand. Portabil\u00adity of mobile code in heterogeneous networks \nof processors is achieved by keeping the code in an interpretable form. There is also potential support \nfor long lived items, ie data and programs which last for a complete user session, or which are part \nof a permanently running operating system envi\u00adronment. We have developed a model of distribution [4] \nusing func\u00adtional programming with deterministic concurrency. This model allows us to retain the clean \nsemantic properties of functional languages, and to separate issues of the ftmction\u00adality of programs \nfrom issues to do with the way they are distributed. In fact the semantics and behaviour of pro\u00adgrams \ndo not depend on the distribution details. Experi\u00adments have confirmed that the determinism restriction \ndoes not reduce the expressiveness of the model. On the other hand, the ease of program development and \ntrustability of the resulting systems is considerably increased. This approach to distributed programming \nwill be illus\u00adtrated in a poster, in which there are depicted several issues related to an efficient \nimplementation.  References [1] David Carter, Deterministic Concurrency, MSC Thesis, September 1994 \n[2] S. Firme, Simon Peyton Jones, Concurrent Haskell, 1995 [3] Ian Holyer, David Carter, Concurrency \nin a Purely Declarative Style, Glasgow Workshop on Functional Programming, Ayr, Scotland, 1993 [4] Eleni \nSpiliopoulou, Ian Holyer, Neil Davies Distribution in a Demand Driven Style, Submitted to Euro-par 97, \nWorkshop for symbolic computation 320  \n\t\t\t", "proc_id": "258948", "abstract": "", "authors": [{"name": "Eleni Spiliopoulou", "author_profile_id": "81100310471", "affiliation": "Department of Computer Science, University of Bristol", "person_id": "P76358", "email_address": "", "orcid_id": ""}, {"name": "Ian Holyer", "author_profile_id": "81100133705", "affiliation": "Department of Computer Science, University of Bristol", "person_id": "P115478", "email_address": "", "orcid_id": ""}, {"name": "Neil Davies", "author_profile_id": "81100185430", "affiliation": "Department of Computer Science, University of Bristol", "person_id": "PP14074506", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/258948.258989", "year": "1997", "article_id": "258989", "conference": "ICFP", "title": "Distributed programming, a purely functional approach (poster)", "url": "http://dl.acm.org/citation.cfm?id=258989"}