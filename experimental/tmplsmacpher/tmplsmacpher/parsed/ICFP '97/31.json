{"article_publication_date": "08-01-1997", "fulltext": "\n Protein Folding meets Functional Programming Natalio Krasnogor Pablo E. Martinez L6pez Pablo Mocciola \nDavid Pelta LIFIA, Departamento de Inform&#38;tica, Univeraidad Nacionalde La Plata. C. C.ll, Correo \nCentral, 1900, La Plata, Buenos Aires, Reptiblica Argentina. Email:{natk,fidel )pablom,davp} @info .unlp.edu. \nar URL: http: //www-lifia.info. unlp.edu.ar In the last few years an entirely new discipline has emerged: \nComputational Biology . It tries to solve, baaed on a strong mathematical and computational background, \nproblems raised from Biosciences. The Protein Folding Problem (PF for short) is one of the most important \nopen problems in Biology. It can be stated as follows: given an unfolded aminoacid find the right sequence, \nfolding of that sequence. In nature, the proteins fold to their native state, which determines its functionality. \nSome lattice-based computational models of the PF were shown NP-Complete, others remain NP-hard [2, 9], \nbut some ap proximation algorithms errist [3]. However its theoretical and practical relevance [8, 9] \nmakes worthwhile spending resources and time in modeling the folding process. Usu\u00adally, strong enfaais \nis put in the results obtained, rather that in the way they are generated, enlarging the gap between \nresearchers from Computer Science and Biology. We claim that, using the right tools, both communities \ncan collaborate much closer, enhancing the results at the same time. Historically, Functional Programming \n(FP for short) [1] has been associated with a small scope of applications, mainly academic. Computer \nScience community did not pay enough attention to its potential, perhaps due to the lack of efficiency \nof functional languages. Now, new the\u00adoretical developments in the field of FP [4] are emerg\u00ading, and \nbetter languages (e.g. Haakell [7], Concurrent Haekell [5]) have been defined and implemented. Also, \nthe gap between theory and practice is smaller in this paradigm than that of other paradigms, making \nFP a good choice for developing simulation and optimization programs [10]. Traditionally, all programs \nfor optimiza\u00adtion problems were written in C, C++ or Ada; this builds a firewall between developers and \nend-users. PF is suit\u00adable to be modeled with a lazy concurrent functional lan\u00adguage for many reasons: \nnon-computer-science people can think in a very high abstraction level and map their ideas, aimost directly, \nto functional code; the learning curve of a FP language is smoother than that of an imperative one, bridging \nthe gap between developera and usera; functional code is concise; the folding process is intrinsically \nparal\u00adlel and FP is specially adequate for managing parallelism; concurrent processes on the string to \nbe folded can be sim\u00adulated using easy-to-use features of concurrent functional Permission to make digital/hard \ncopy of part or all this work for personal or classroom use is granted without fee provided that copies \nare not made or distributed for profit or commercial advan \u00ad languages; the use of lazy languages avoids \nthe construc\u00adtion of protein configurations until they are needed (if ever); using FP, it is straightforward \nto associate folding algorithms to folding patterns [6]. Our proposal is to use FP as a bridge between \nre\u00adsearchers of Computer Science and Biosciences. Com\u00adputer science researchers have their benefit because \nof rapid protot yping, while bioscience-researchers haveit be\u00adcauseof the high abstraction that FP provides. \n References [1] Rlchar-d S, Bird and Philip Wadler. Introduction to Fhnc\u00adt:onal Programming. Prentice \nHall, 198S. [2] Aviezri S. Fraenkel. Complexity of protein folding. Bulletin oj Mathematical Biology, \n6, 1993. [3] W.E. Hsrt and S. Istrail. Fast protein folding in the hydrophobic-hydrophilic model within \nthree eighths of opti\u00admal. In Proceedings of the 27th ACM Syrnpos:urn on Theory of Computation, pages \n157 168, 1995. [4] Johan Jeuring and Erik Meijer, editors. Advanced Pvnctional Progromrn:ng, LNCS 925. \nSpringer-Verlag, May 1995. [5] Simon L. Peyton Jones, Andrew Gordon, and Sigbjorn Finne. Concurrent \nHsskell. In ACM Symposium on the Princi\u00adples of Programming Languages (PoPL 96), St. Petersburg Beach, \nFlorida, January 1996. [6] Kreanogor, Martfnez L6pez, Mocciola, and Pelta. Modelling string folding \nwith G 2L grammars. Presented at Recomb 97; submitted to ICFP 97. John Peterson, Kevin Hammond, et al. \nReport on the pro\u00adgramming language Hsakell, a non-strict, purely functional language. Version 1.3. Technical \nreport, Yale University, May 1996. PI [8] A. Sali, E. Shakhnovich, and M. Karplus. How does a protein \nfold. Nature, 369:248 251, May 1994. [9] R. Unger and J. Moult. Finding the lowest free energy con\u00adformation \nof a protein is an NP-hard problem: Proof and im\u00adplications. Technical report, Center for Advanced Research \nin Biotechnology. University of Maryland, 1993. [10] Philip Wadler, editor. Journal of Functional F \nrogrammtng. Specsal Issue on State-of-the-art Apphcations of Pure Func\u00adtional Programming Languages, \nvolume 5 (3). Canrbridge University Press, July 1995. tage, the copyright notice, the title of the publication \nand ita date appear, and notice is given that copying ia by permission of ACM, Inc. To copy otherwise, \nto republish, to post on servers, or to redistribute to Iista, requirea prior specific permission and/or \na fee. ICFP 97 Amsterdam, ND @ 1997 ACM 0-89791 -918 -1/97 /0006 ... $3.50 313 \n\t\t\t", "proc_id": "258948", "abstract": "", "authors": [{"name": "Natalio Krasnogor", "author_profile_id": "81100048341", "affiliation": "LIFIA, Departamento de Inform&#225;tica, Universidad Nacional de La Plata, C. C.11, Correo Central, 1900, La Plata, Buenos Aires, Rep&#250;blica Argentina", "person_id": "PP33022988", "email_address": "", "orcid_id": ""}, {"name": "Pablo E. Mart&#237;nez L&#243;pez", "author_profile_id": "81100004230", "affiliation": "LIFIA, Departamento de Inform&#225;tica, Universidad Nacional de La Plata, C. C.11, Correo Central, 1900, La Plata, Buenos Aires, Rep&#250;blica Argentina", "person_id": "P218884", "email_address": "", "orcid_id": ""}, {"name": "Pablo Mocciola", "author_profile_id": "81100097112", "affiliation": "LIFIA, Departamento de Inform&#225;tica, Universidad Nacional de La Plata, C. C.11, Correo Central, 1900, La Plata, Buenos Aires, Rep&#250;blica Argentina", "person_id": "P218887", "email_address": "", "orcid_id": ""}, {"name": "David Pelta", "author_profile_id": "81332520645", "affiliation": "LIFIA, Departamento de Inform&#225;tica, Universidad Nacional de La Plata, C. C.11, Correo Central, 1900, La Plata, Buenos Aires, Rep&#250;blica Argentina", "person_id": "P63269", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/258948.258982", "year": "1997", "article_id": "258982", "conference": "ICFP", "title": "Protein folding meets functional programming (poster)", "url": "http://dl.acm.org/citation.cfm?id=258982"}