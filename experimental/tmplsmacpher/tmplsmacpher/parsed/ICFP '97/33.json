{"article_publication_date": "08-01-1997", "fulltext": "\n A Functional Macro Expansion System for Optimizing Code Generation: Gaining Context-Sensitivity without \nLosing Confluence Eero Lassila Digital Systems Laboratory, Department of Computer Science and Engineering \nHelsinki University of Technology P.O. Box 1100, FIN-02015 HUT, Finland eero. lassila@hut .f i As the \nmaxhine-specific macro assemblers offer little sup\u00ad port for hierarchical program abstraction, they are \nrather weak code-generator writing tools: reusable optimized code libraries cannot be easily constructed. \nThe underlying rea\u00adson is the lack of modularity. For instance, if some assembly macro M uses some register \nR as a temporary data stor\u00adage, the programmer has to be most cautious when calling M: the macro expander \nis not able to issue a warning that the value possibly already stored in R will be lost during the execution \nof M. Clearly, this problem cannot be solved without contezt-sensttive macros. The traditional way to \nobtain some context-sensitivity is to use global expansion-time variables-in addition to the explicit \nmacro arguments-for intermacro communication. For instance, when the contents of some memory location \nare loaded into the register file, a global variable may be used for recording the memory address, so \nthat a possible subsequent load horn the same memory location can be elim\u00adinated. Still, global vaxiables \ndo not provide modularity, and their use is subject to some basic limitations: informa\u00adtion can be passed \nonly from left to right and, in practice, only within straight-line code segments. Moreover, in the case \nof global variables we have to stick with the left-to\u00adright and depth-first expansion; but when macro \narguments are the sole communication device, the final expansion re\u00adsult is independent of the expansion \norder of the individual macro calls. Thus, global variables are incompatible with the Church-Rosser or \nconfluence property. Why should an assembly-level macro system be conflu\u00adent? First, parallel implementations \nbecome possible: at any time, all the leaf nodes of the expansion tree (which originates from a single \nmacro call) can be processed in par\u00adallel. Second, code maintainability is enhanced: if some macro definition \nis modified, this change propagates only to such nodes that are descendants of a call of the modified \nmacro (with global variables, in contrast, the change could propagate to all the node+ on the right of \nthe call). Third, it becomes straightforward to augment the macro expan\u00adsion with external global optimizations: \nwe may introduce an intermediate optimization layer inside the expansion tree, because we are free to \nselect such an expansion order that Advisor: Prof. Leo Ojala (same affiliation), Permission to make digitallhard \ncopy of part or all this work for personal or classroom use is granted without fee provided that copies \nare not made or distributed for profit or commercial advan\u00adtage, the copyright notice, the title of the \npublication and its date appear, and notice is given that copying is by permission of ACM, Inc. To copy \notherwise, to republish, to POS! on servers, or to redistribute to lists, requires prior specific permission \nand/or a fee ICFP 97 Amsterdam, ND Q 1997 ACM 0-89791 -918 -1/97 /0006 .,.$3.50 all the macro calls above \nthe layer are mocessed first. Our idea is that each macr~ call is treated as a logical module rather \nthan a text string. The module implemen\u00adtation, i.e. the result of the conditional expansion, depends \non the expansion-time interjace of each macro call. The interface is constituted by domain-specific attributes, \nwhose expansion-time values the macro writer can examine. These values are determined by the environment \nof the macro call in a way that is invisible to the macro writer (for instance, program flow analysis \nmay be necessary). Confidence re\u00adquires that the environment of any macro call node IV in an expansion \ntree consists of only such nodes that are guamn\u00adteed to be present in the tree whenever N is (that is, \nall the ancestors of N with ail their one-step descendants). More\u00adover, the expansion has to be functional \nwith no side effects: the expansion of IV must not change the environment of IV. The introduction of \nthe domain-specific attributes makes the implementation of the macro expander domain-depen\u00addent (in contrast \nto the conventional general-purpose macro processors such as the C preprocessor). As suggested above, \nthe domain we are interested in is the synthesis of machine\u00adlevel computer programs. Hence, our main \ndomain-specific attributes are the following: Which addressing modes are used for passing run-time data \ninto and out from the par\u00adticular instance of the macro called? What is the available temporary storage \n(including the set of free registers) at the point of the macro call? What possibly useful knowledge \ndoes the expander already have about the run-time contents of the registers at the call point? At the \nmoment, our concrete contributions are a for\u00admal macro expansion model [2], which crystallizes the idea \nsketched above, and a simple demonstration prototype [1, 2] of the suggested retargetable macro assembler, \nwhich then applies the model to machine-level program synthesis. The prototype and some related publications \nwe available; please see f tp: //saturn. hut. f ilpublref lex/README. References [1] Eero Lassila. A \nmacro expansion approach to embed\u00added processor code generation. In Proceedings of EURO-MICRO 96 Conference, \npages 136 142. IEEE Computer Society Press, 1996. [2] Eero Lassila. Towards optimizing code generation \nby domain-sensitive macro expansion. Report A42, Digital Systems Laboratory, Helsinki University of Technology, \nEspoo, Finland, January 1997. 315  \n\t\t\t", "proc_id": "258948", "abstract": "", "authors": [{"name": "Eero Lassila", "author_profile_id": "81100125821", "affiliation": "Digital Systems Laboratory, Department of Computer Science and Engineering, Helsinki University of Technology, P.O. Box 1100, FIN-02015 HUT, Finland", "person_id": "P75799", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/258948.258984", "year": "1997", "article_id": "258984", "conference": "ICFP", "title": "A functional macro expansion system for optimizing code generation: gaining context-sensitivity without losing confluence (poster)", "url": "http://dl.acm.org/citation.cfm?id=258984"}