{"article_publication_date": "01-13-1988", "fulltext": "\n\t\t\t", "proc_id": "73560", "abstract": "<p>We give an algorithm for type inference in a language with functions, records, and variant records. A similar language was studied by Cardelli who gave a type checking algorithm. This language is interesting because it captures aspects of object-oriented programming using subtype polymorphism. We give a type system for deriving types of expressions in the language and prove the type inference algorithm is sound, i.e., it returns a type derivable from the proof system. We also prove that the type the algorithm finds is a &#8220;principal&#8221; type, i.e., one which characterizes all others. The approach taken here is due to Milner for universal polymorphism. The result is a synthesis of subtype polymorphism and universal polymorphism.</p>", "authors": [{"name": "R. Stansifer", "author_profile_id": "81100300689", "affiliation": "Department of Computer Sciences, Purdue University, West Lafayette, IN", "person_id": "PP39079536", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/73560.73568", "year": "1988", "article_id": "73568", "conference": "POPL", "title": "Type inference with subtypes", "url": "http://dl.acm.org/citation.cfm?id=73568"}