{"article_publication_date": "01-13-1988", "fulltext": "\n\t\t\t", "proc_id": "73560", "abstract": "<p>A <italic>Rewrite System</italic> is a collection of <italic>rewrite rules</italic> of the form &#945; &#946; where &#945; and &#946; are tree patterns. A rewrite system can be extended by associating a cost with each rewrite rule, and by defining the cost of a rewrite sequence as the sum of the costs of all the rewrite rules in the sequence. The REACHABILITY problem for a rewrite system <italic>R</italic> is, given an input tree <italic>T</italic> and a fixed <italic>goal</italic> tree <italic>G</italic>, to determine if there exists a rewrite sequence in <italic>R</italic>, rewriting <italic>T</italic> into <italic>G</italic> and, if so, to obtain one such sequence. The C-REACHABILITY problem is similar except that the obtained sequence must have minimal cost among all those sequences writing <italic>T</italic> into <italic>G</italic>.</p><p>This paper introduces a class of rewrite systems called Bottom-Up Rewrite Systems (BURS), and a table-driven algorithm to solve REACHABILITY for member of the class. This algorithm is then modified to solve C-REACHABILITY and specialized for a subclass of BURS so that all cost manipulation is encoded into the tables and is not performed explicitly at solving time. The subclass extends the <italic>simple machine grammars</italic> [AGH84], rewrite systems used to describe target machine architectures for code generation, by allowing additional types of rewrite rules such as commutativity transformations.</p><p>A table-driven code generator based on solving C-REACHABILITY has been implemented and tested with several machine descriptions. The code generator solves C-REACHABILITY faster than a comparable solver based on Graham-Glanville techniques [AGH84] (a non-optimal technique), yet requires only slightly larger tables. The code generator runs much faster than recent proposals to solve C-REACHABILITY that use pattern matching and deal with costs explicitly at solving time [AGT86, HeD87, WeW86]. The BURS theory generalizes and unifies the bottom-up approaches of Henry/Damron [HeD87] and Weisgerber/Wilhelm [WeW86].</p>", "authors": [{"name": "E. Pelegr&#237;-Llopart", "author_profile_id": "81100567998", "affiliation": "Computer Science Division, EECS Department, University of California, Berkeley", "person_id": "P73285", "email_address": "", "orcid_id": ""}, {"name": "S. L. Graham", "author_profile_id": "81452606376", "affiliation": "Computer Science Division, EECS Department, University of California, Berkeley", "person_id": "PP40035494", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/73560.73586", "year": "1988", "article_id": "73586", "conference": "POPL", "title": "Optimal code generation for expression trees: an application BURS theory", "url": "http://dl.acm.org/citation.cfm?id=73586"}