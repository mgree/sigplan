{"article_publication_date": "10-21-2007", "fulltext": "\n Notation and Representation in Collaborative Object-Oriented Design: An Observational Study Uri Dekel \nand James D. Herbsleb School of Computer Science, Carnegie Mellon University {udekel,jdh}@cs.cmu.edu \nAbstract Software designers in the object-oriented paradigm can make use of modeling tools and standard \nnotations such as UML. Nevertheless, casual observations from collocated design collaborations suggest \nthat teams tend to use phys\u00adical mediums to sketch a plethora of informal diagrams in varied representations \nthat often diverge from UML. To bet\u00adter understand such collaborations and support them with tools, we \nneed to understand the origins, roles, uses, and implications of these alternate representations. To \nthis end we conducted observational studies of collaborative design exercises, in which we focused on \nrepresentation use. Our primary .nding is that teams intentionally improvise representations and organize \ndesign information in response to ad-hoc needs, which arise from the evolution of the de\u00adsign, and which \nare dif.cult to meet with .xed standard no\u00adtations. This behavior incurs orientation and grounding dif\u00ad.culties \nfor which teams compensate by relying on memory, other communication mediums, and contextual cues. With\u00adout \nthis additional information the artifacts are dif.cult to interpret and have limited documentation potential. \nCollab\u00adorative design tools and processes should therefore focus on preserving contextual information \nwhile permitting uncon\u00adstrained mixing and improvising of notations. Categories and Subject Descriptors \nD.2.10 [Software En\u00adgineering]: Design -Methodologies and Representations; H.5.3 [Information Interfaces \nand Presentation]: Group and Organization Interfaces Computer Supported Cooperative Work General Terms \nDesign, Documentation, Human Factors Keywords Representation, Notation, Modeling, Collabora\u00adtive Software \nDesign, UML, OOD Permission to make digital or hard copies of all or part of this work for personal or \nclassroom use is granted without fee provided that copies are not made or distributed for pro.t or commercial \nadvantage and that copies bear this notice and the full citation on the .rst page. To copy otherwise, \nto republish, to post on servers or to redistribute to lists, requires prior speci.c permission and/or \na fee. OOPSLA 07, October 21 25, 2007, Montr\u00b4ebec, Canada. eal, Qu\u00b4Copyright c &#38;#169; 2007 ACM 978-1-59593-786-5/07/0010. \n. . $5.00 1. Introduction Software design is a highly visual activity, where diagrams are used for brainstorming, \ngrounding, and communicat\u00ading ideas and decisions [6]. This is particularly true for the object-oriented \n(OO) paradigm, which involves large num\u00adbers of entities and complex relations between them. Vari\u00adous \nnotations have been proposed for expressing designs in this paradigm, and one of them, the Uni.ed Modeling \nLan\u00adguage (UML) [23], has become a widely recognized stan\u00addard. Many software packages and CASE tools \nenable de\u00adsigners to create UML models for documentation and im\u00adplementation purposes. The design of \ncomplex software systems, and in partic\u00adular object-oriented design (OOD), is often also a highly collaborative \nactivity, where ideas are presented, discussed, and re.ned by multiple stakeholders. Such interactions \nof\u00adten take place in face-to-face design meetings, in which drawing activities also play a central role \n[6]. Recent efforts make UML modeling functionality available to teams using electronic whiteboards [5,8,15], \nand some also offer support for the systematic capture of decisions and rationale [3]. However, casual \nobservation suggests that OOD teams do not fully utilize these standards, techniques, and tech\u00adnologies. \nInstead, they tend to follow an erratic process in which they generate a plethora of diagrams and fragments \nover physical mediums such as whiteboards or paper. These visual artifacts are not only less aesthetic \nand complete than those created electronically, but most importantly, also fre\u00adquently diverge in their \nnotation from UML, in some cases substantially. It is easy to dismiss this everyday phenomenon as a man\u00adifestation \nof a developer mentality of cutting corners, or of the need for agile design methods [1]. However, it \nalso highlights several issues that have much relevance for the larger community of OO practitioners \nand researchers, but which have received little attention. First, while we have powerful notations, formalisms, \nand tools for expressing .\u00adnalized designs, we know surprisingly little about the pro\u00adcesses and representations \nby which teams create these de\u00adsigns in the .rst place, and whether the same tools are ap\u00adplicable in \nthese early stages. Second, while we know that designers often sketch in alternate notations, the origins, \nse\u00admantics, and roles of these notations remain unclear. Third, we know little about the impact of sketches \ncreated in these notations, the connections between them, and whether they can be straightforwardly used \nfor documentation or imple\u00admentation or transformed into compliance with standard for\u00admalisms. These \nissues have many signi.cant implications. For ex\u00adample, it is not clear that UML, which is primarily \na speci\u00ad.cation and documentation standard, can also effectively be used as a design notation in early \nphases and in collabora\u00adtive settings. Should efforts be invested in modifying UML or in coming up with \na different notation? Can UML-based design tools be augmented to effectively support early col\u00adlaborative \ndesign? Despite the abundance of literature on sketching and col\u00adlaboration in general, only a few works \n[5, 8, 9, 28, 29] ad\u00address the unique settings of collaborative OOD, and these primarily focus on the \neventual automatic transformation of sketches into complete and aesthetic implementation-and archival-quality \nUML models. They appear to treat the cre\u00adation of these .nalized models as the primary motivation behind \ndrawing activities, and tend to consider the early sketches as premature or peripheral artifacts that \nwill evolve in due time; digressions from from UML are treated as ac\u00adcidental and are deprecated. While \nsupport for transforming and completing these models into a standard notation is likely valuable for \nuse in later development stages [6], we suspect that this approach does not tell the entire story about \nOOD representations, nor does it support all the unique needs of design teams. Rather, there may be important \nunderlying reasons behind the representational choices teams make, which have signif\u00adicant impact on \nhow teams work in the OO paradigm, and on how practices and tools can support them. 1.1 About this work \nIn this paper we seek answers to several questions: First, what kinds of representations are constructed \nby design teams as the design evolves, and how do they diverge from UML? Second, why are such nonstandard \nrepresen\u00adtations constructed and what purpose do they serve? Third, how are these representations used \nthroughout the design process? Fourth, can a better understanding of these repre\u00adsentations suggest new \npractices and forms of tool support? To answer these questions, we conducted a series of observational \nstudies of collaborative design exercises at the OOPSLA DesignFest event, focused on representation and \ndiagram use. These settings allowed us to study the rep\u00adresentations used by groups of experienced OO \npractitioners working on identical problems, while curbing the impact of organization-speci.c practices. \nWe discuss this choice and its potential threats to the validity of our .ndings in Sec. 3. Our intention \nin this paper is not to comprehensively cat\u00adalogue or explain all the improvised notations used in col\u00adlaborative \nOOD, or to offer quantitative information about representational choices, although these are interesting \nav\u00adenues for subsequent work. Instead, our presentation is fo\u00adcused on typical cases in which alternate \nnotations are used, since these have little to do with the completeness of the model and are perhaps \nthe most revealing about representa\u00adtional needs and choices. In addition, we focus on several re\u00adlated \nissues which have signi.cant implications for support\u00ading collaborative OOD, but which have received \nlimited at\u00adtention: How heterogeneous information is represented, the characteristics of designs that \nspread over multiple diagrams, and how teams cope with this delocalization.  1.2 Findings and contribution \nOur observations suggest that in choosing representations, teams make deliberate and intentional choices \nto diverge from standard notations or borrow idioms from other nota\u00adtions. While often bene.ting from \nlower physical and cogni\u00adtive efforts, teams make these choices primarily in response to the immediate \nneeds arising from their evolving under\u00adstanding of the problem and solution. Improvised freehand notations \nare not only easier or faster to use, but also offer a degree of freedom in selecting structure and interpretation \nthat may better .t and evolve with the design than a .xed notation. Similarly, information is dispersed \nand laid out in ways that not only increase the locality of related entities, but which also facilitate \na more natural representation of com\u00adplex heterogeneous information. While these representational choices \nallow teams to focus on creativity, the resulting artifacts and the relations between them may be less \nintuitive, exact, and complete. Teams try to compensate for this by using additional but transient com\u00admunication \nmediums, such as voice and gestures, and by re\u00adlying on memory and contextual cues. Other stakeholders, \nhowever, will face signi.cant dif.culties in subsequently in\u00adterpreting and using the resulting diagrams \nas documentation or implementation artifacts. In fact, knowledge of contextual and historical information \nof the experiences shared by the meeting s participants may be necessary even for diagrams that teams \nhave explicitly prepared for presentation. The importance of these .ndings is in improving our un\u00adderstanding \nof collaborative design meetings and in guid\u00ading the development of new tools. One contribution of our \nwork is in demonstrating the priority given to creative ac\u00adtivities and that some of the noncompliant \nartifacts, often treated as peripheral by existing tools and approaches, ac\u00adtually play a major role \nin problem-solving and in commu\u00adnicating about the design. Second, we show several typical ways in which \ncollaborative design unfolds, and how ad hoc needs lead away from standard notations. A third contribu\u00adtion \nis in highlighting the importance of contextual and his\u00adtorical information in the work of design teams \nand in its manifestation into the products, thus prompting efforts to preserve it. Such efforts may be \nmore effective than attempts to support or perfect any notational standard, since teams re\u00adquire a .exibility \nthat may not be possible with a .xed rep\u00adresentation. Outline: The rest of this paper is organized as \nfollows: Sec. 2 reviews the literature on the use of visual artifacts in OOD and the tools for supporting \nit. Sec. 3 discusses our choice of settings for the study and presents the methodol\u00adogy. We begin presenting \nour observations in Sec. 4, which describes the use of alternate notations in individual ar\u00adtifacts. \nThis presentation continues in Sec. 5, which de\u00adscribes the representation of heterogeneous information, \nand in Sec. 6, which discusses the dependencies between dia\u00adgrams. We discuss these results in Sec. 7, \nand their implica\u00adtions for tools in Sec. 8. We conclude and present our current research directions \nin Sec. 9. 2. Background and related work The design and architecture of a complex software system has \nsigni.cant implications for its functionality, cost, and reliability; a signi.cant portion is therefore \ntypically done upfront. While individual developers perform many design activities, the design of common \nmodules, larger systems, and components is typically a highly collaborative process which involves many \nstakeholders. Design may be the most collaborative part of the development process [16]. Design tasks \ngenerally make heavy use of external rep\u00adresentations to support problem-solving and collaboration and \nto capture the current state of the design [27]. This also applies to the domain of software design, \nin which diagrams go through a lifecycle from transient artifacts used to un\u00adderstand and come up with \na design, to archived documents serving communication and documentation purposes [6]. However, the choice \nof representation depends on many fac\u00adtors, including: intended use, whether design is individual or \ncollaborative, organizational background, development paradigm, and the speci.cs of the design problem. \n 2.1 Representing completed designs As with other design domains, well-de.ned and accepted representations \nand notations, rendered aesthetically and with precision, are important for clearly and unambiguously \nexpressing .nalized software designs [6, 9, 29]. In the OO paradigm, the Uni.ed Modeling Language [23] \nhas gained widespread academic and industrial acceptance as a standard representation for completed designs \nthat serve documenta\u00adtion or implementation planning purposes. UML consists of 13 diagram types, which \ncover many of the structural, dynamic, and functional aspects of a system. These notably include: class \ndiagrams (CDs), sequence dia\u00adgrams (SDs), and use-case diagrams (UCDs). UML offers precise notations \nfor accurate speci.cations, as well as ex\u00adtension mechanisms. This comprehensiveness enables com\u00adpliant \nUML models to be used as early implementation ar\u00adtifacts, as blueprints for implementation, or as basis \nfor au\u00adtomatic code generation [8]. A common criticism of UML is that it lacks .xed semantics and conventions \n[4, 26], po\u00adtentially leading to defects due to misinterpretations. Other critics, focused on creative \nmodeling, argue that UML is too strict, and suggested that investment in creating complete models is \nnot cost-effective [1].  2.2 Representing early designs While much attention has focused on the representations \nused for documenting completed designs, little is known about the representations used in earlier design \nphases to come up with initial designs, and whether the same notations are applicable. One obvious difference \nabout these phases is that design teams tend to sketch, often using physical medi\u00adums such as whiteboards. \nSketching allows designers to ef\u00adfectively focus on the problem [1], and encourages experi\u00admentation \nwith the design [5,21,24]. Most of our knowledge on early diagrams in industrial settings comes from \nCherubini s study of diagram use at Mi\u00adcrosoft [6]. He found that while many diagrams created in design \ncollaborations were transient, some were immedi\u00adately captured for subsequent use or were captured after \nbe\u00ading recreated in later collaborations. As their importance be\u00adcame clear, they iteratively became \nmore organized and aes\u00adthetically pleasing, and were often captured electronically. The representations \nused in these diagrams were a a mix of informal visual conventions based primarily on box-and\u00adarrow notation, \nwith only limited adoption of standards such as UML. However, the studied population used a variety of \ndevelopment paradigms and may not have been pro.cient in OOD or UML, and the factors leading to the representa\u00adtional \nchoices were not studied. The few observations that do focus on collaborative OOD work are primarily \nreported by researchers involved in con\u00adstructing sketch-based design support tools [5, 8, 9, 28, 29] \nand take place in specialized settings. In these observations, the end product is typically a design \ndocumented in syn\u00adtactically correct UML, often in electronic form. Initially, freehand sketches are \nused to represent the problem domain, while limited UML diagrams, incomplete in content and syntax, are \nused for early designs of the solution. Damm et al. [8, 9] further argued that these diagrams are then \nincre\u00admentally evolved into complete and compliant UML mod\u00adels, with noncompliant elements removed. Overall, \nthese studies give the impression that divergence from UML is accidental or unwanted. Departures from \nUML or other standard notations might appear counterproductive when the goal is to produce an implementation-ready \nmodel or documentation. However, since representation choices have signi.cant impact on de\u00adsign, constraining \nthe early stages may have unexpected ef\u00adfects. Clearly, there are different potential uses and outcomes \nfor diagrams created in design collaborations, and both or\u00adganizational practices and prior knowledge \nof the intended use of a diagram likely have an impact on the representa\u00adtional choices. Since our goal \nis to understand the needs of early design, we have chosen to conduct our study in set\u00adtings which afford \nrelative freedom from such potentially confounding constraints. 2.3 Design support tools Most of the \nexisting tool support for collaborative OOD is similar to that provided for individual designers, consist\u00ading \nmainly of functionality for creating complete models in UML. One approach, aimed at distributed teams, \nis to offer distributed groupware versions of the familiar single\u00aduser desktop CASE tools [3, 22]. In \ncollocated collabora\u00adtions, however, designers need large drawing surfaces [12], which were traditionally \nonly available in the form of white\u00adboards or paper. As large display technologies became avail\u00adable, \nattempts were made to provide OOD speci.c support over electronic whiteboards [5,8,15]. These tools focused \non the automated conversion of sketched shapes and handwrit\u00ading, which are the natural mode of interaction \nwith a white\u00adboard, into notational primitives and even UML models. Of particular interest is Damm et \nal. s Knight tool [8] which, based upon the observations described above, offers a guided mode that facilitates \nthe evolution of these artifacts, through several levels of restriction, to complete UML mod\u00adels representing \nimplementation-ready designs. Whenever artifacts violate UML speci.cations due to nonstandard no\u00adtation \nor incompleteness, their tool forces the offending no\u00adtations to be changed, or removed. Other tools \nallow a layer of uninterpreted freehand sketches to coexist with a layer of structured UML. The interactive \nnature of electronic whiteboards raises the question of how to best support collaborative design, and \nwhat, if any, support should be provided for rough, inter\u00admediate forms. We note that although these \ntechnologies re\u00adceived much attention, their availability is extremely limited, and most practitioners \nhave no supporting tools when in\u00advolved in collocated design collaborations. While some re\u00adsearch focuses \non supporting distributed design, such set\u00adtings are plagued by many additional problems and are out\u00adside \nthe scope of the current work. 3. Methods 3.1 Settings Our studies of collaborative OOD span three incarnations \nof the annual DesignFest events of the ACM conference on Object Oriented Programming Systems Languages \nand Ap\u00adplications (OOPSLA). In 2004 we conducted a prelimi\u00adnary study focused on the physical design \nenvironment, us\u00ading only photographic evidence [10]. The observations pre\u00adsented in this paper are primarily \nbased on extensive data collection in the 2005 session, and always refer to it unless otherwise noted. \nIn 2006, we conducted a limited validation study to verify our conclusions. In this popular conference \nevent, experienced designers select one of several given design problems and are ran\u00addomly assigned to \none of several teams which will work on that problem. They are given a short document describing the \nproblem, constrains on the solution, and important use cases and scenarios. Depending on the session, \nteams then spend 3 to 6 hours coming up with an appropriate design to solve that problem. The stated \ngoal of this event is to learn more about design by doing it and to sharpen design skills by working \non a real problem with others in the .eld [11]. One noteable characteristic of the DesignFest event \nis the relative freedom given to the teams. While teams are not expected to produce working systems, \nthey are encouraged, both in the given documentation and verbally during the ses\u00adsion, to prepare materials \nfor presentation to others at the social event at the end of the conference, and for a possible web archive. \nHowever, they are not given explicit require\u00adments for the representations and quality of these materials. \nSimilarly, the given documentation merely suggests a simple process outline, stepping from introductions \nto planning, dis\u00adcussion, sketching and resolution of disagreements. It also encourages teams to elect \na moderator and a recorder, but we have rarely seen these roles used in practice. We also note that drawing \nactivites at DesignFest take place primarily over physical mediums, which offer greater freedom than \nelectronic tools [2]. The organizers provide all participating teams with at least one .ipchart and several \nposterboards, as well as notepads, sticky-notes, tacks and pens. Powerstrips and wireless internet were \navailable, but the few participants who used laptops did so mostly for unrelated activities. Only two \nparticipants, from the same organization but in different teams, tried using a CASE tool to digitize \ntheir teams sketches. 3.2 Choice of setting and threats to validity We chose these settings for three \nreasons: First, participants do not have a history of working together, and are collaborat\u00ading outside \nan organizational context that prescribes design methods, notations, and processes. We believe this simpli\u00ad.es \nthe interpretation of our results and enables generaliza\u00adtion about common practices. Had we observed \nteams in an organizational context with a work history, it would be hard to disentangle behavior that \nis merely prescribed by organi\u00adzational practices or shared team habits, from natural behav\u00adiors that \ndirectly support the immediate task of collaborative design. Second, since our focus is on the OO paradigm \nand the use of UML in particular, we wanted to minimize the risk that limited familiarity with these \ntechniques would factor into the choice of representations. The OOPSLA confer\u00adence attracts experienced \ndesigners well versed in these techniques, which adds validity to the .ndings. Third, since design problems \nin DesignFest are based on real-world projects, we can observe multiple teams working on the same problem, \nand reproduce the nonproprietary designs. Although we could probably .nd other settings that are bet\u00adter \nin any one of these considerations, DesignFest seems to score adequately on all three, and, in our opinion, \ndeserves the attention of more researchers. Observational studies of software development in the lit\u00aderature \ntake place in the lab, in academic settings, or in industrial ones. Research in arti.cial settings enables \nthe collection of data which could be dif.cult to gather other\u00adwise. The DesignFest settings not only \nallowed us to study teams of experienced OOD practitioners while restricting confounding organizational \npractices, but also to study mul\u00adtiple teams working on the same problem from scratch, a sit\u00aduation which \nrarely occurs in the industry. Of course, these advantages involve a tradeoff, as arti.cial settings \nraise the question of whether the results could be generalized. Clearly, additional research in industrial \nsettings is re\u00adquired to establish that the observations we made here hold more generally. All setting \nare unique in certain respects, and replication in multiple organizations may be necessary. Nevertheless, \nlet us brie.y mention the primary ways in which DesignFest differs from industrial settings, and esti\u00admate \ntheir potential impact on generalization. First, design takes place in isolation from other, over\u00adlapping, \ndevelopment phase: There is no prior requirement gathering, though in some sessions the DesignFest organiz\u00aders \nplayed the role of clients and spent time with each team, and more importantly, the produced designs \nare not sub\u00adsequently implemented. However, DesignFest problems are based on real-world speci.cations, \nand most participants ap\u00adpeared passionate and serious in their work. It is thus likely that the proposed \ndesigns, or at least the initial high-level sketches, would be similar to those created by industrial \nteams early in the design phase. This brings us to a second problem, of the extreme time pressure compared \ncompared to industrial settings. While more research is necessary, we believe that our data reliably \ncaptures how representations are selected when teams .rst face the problem, an issue on which limited \nprior knowledge exists. The impact of the time limits is likely to be primarily on how details are .eshed \nout, documented, and reviewed; these issues have been studied more extensively by others. Third, DesignFest \nparticipants receive no material com\u00adpensation for participation and are not held accountable for their \nwork; the motivation is primarily to learn and interact with respected peers. In that sense, it resembles \nopen-source settings, where nonmaterial compensation is key to contribu\u00adtion. This similarity also applies \nto the diverse background of the participants, as industrial teams typically have shared prior experiences \nand practices. However, we explicitly tried to minimize such organizational bias.  3.3 Collected data \nIn the 2005 session, on which we report here, we made video recordings of the design sessions of several \nteams. We chose video in order to capture as much context as possible, including a trace of all interactions, \nannotations, and references to artifacts. Because teams tend to post and refer to materials all around \nthem [10], we used widescreen camcorders to capture more of the design area, one of them .lming in high-de.nition. \nTo enable us to evaluate the value and limitations of more available means of preserving design knowledge, \nwe also made a separate audio recording and frequently took still photographs. These additional mediums \nalso served as a redundancy for the material in the videos. Due to the sensitive nature of video recordings, \nsignif\u00adicant measures were taken to ensure participant consent. Prior to the conference, the DesignFest \norganizers sent pre\u00adregistered participants an email describing the study and ask\u00ading for preliminary \nconsent to different recording mediums. The large number of preregistered participants allowed the organizers \nto form initial groups based on consent, with\u00adout denying anyone their choice of design problem. Since \nthe DesignFest event is also open to walk-in participants, potentially affecting group composition, we \nalso verbally in\u00adtroduced the study to each of the consenting groups, and ob\u00adtained written consent. \nIn addition to changing all names in this paper, we avoided presenting photos of individuals when possible, \nand distorted identifying features in other cases. The real-life design problems available that year \nwere a medical information system for a pediatric theraphy clinic, a system for a web-based image management \nand photo print\u00ading business, and a generic simulator for third-party con\u00adtrollers in industrial production \nlines. The .rst two problems are representative of typical information and eCommerce systems, while the \nlast is an example of a more exploratory project in a different domain Since many consenting teams were \nworking at the same time, our selection of observed teams attempted to obtain a blend of problems, to \nsample groups that had at least four participants at the beginning of the session, and that were located \nin areas with limited acoustic interference from other teams. Depending on the session, teams worked \nbetween 3 and 6 hours excluding breaks, and we tried to .lm the entire session of each team. In one case, \nwe switched from team D to team E to capture more drawing activity. Overall, we obtained over 20 hours \nof video footage from seven teams, summarized in Table 1. We also obtained still photographs of the work \nof other teams. Group Problem Session Length Recorded A Simulator Sun PM 3 hours All B Image Shop Sun \nAM 3 hours All C Image Shop Sun PM 3 hours All D Medical System Sun Full 6 hours First 2 hours E Medical \nSystem Sun Full 3 hours Last hour F Medical System Wed Full 5 hours All G Medical System Wed Full 5 hours \nAll Table 1. Groups for which video footage was recorded  3.4 Data analysis Before proceeding to analyze \nthe data, all video footage was digitally transferred to a video editing software, allowing us to effectively \nbrowse hours of footage to trace the evolution of artifacts. The tapes were then fully transcribed as \nLATEX documents, allowing us to create versions limited to dia\u00adlogue and versions with descriptions of \nadditional activities. Our analysis of each team s work typically proceeded as follows: First, we studied \nphotographs of the .nished dia\u00adgrams from the end of the session, and tried to understand them without \nadditional information, as potential consumers of these materials would have to. Next, we examined all \nthe photographs taken throughout the session, and used tempo\u00adral cues to obtain a better understanding \nof the artifacts and their evolution. Only then we read through the transcripts, and eventually watched \nthe entire tape. Throughout this pro\u00adcess, we made notes of relevant observations. Eventually we pooled \nand studied the observations from all teams, identi\u00ad.ed the examples which we present in this paper, \nand re\u00adturned to the materials to study them in depth. 4. Results: Alternate notations in individual \nartifacts Our presentation of the results begins with the representa\u00adtions used in the collaborative \ncreation of individual arti\u00adfacts. As could be expected from the venue, UML was utilized by all observed \nteams. Speci.cally, all teams drew class di\u00adagrams, and several drew sequence diagrams, use-case dia\u00adgrams, \nand even one package diagram. Perhaps due to the limitations imposed by the settings, the nine other \ndiagram types were hardly used. In conformance with our casual ob\u00adservations and prior works, we frequently \nobserved depar\u00adtures from UML, and proceeded to investigate them. Previous researchers [9] suggested \nthat divergences from UML are mostly accidental and that diagrams eventually comply with the standard. \nWhen we observed teams ex\u00adplicitly reproducing artifacts for presentation at the confer\u00adence s .nal event, \nthey indeed tried to create aesthetic and complete UML models. However, most of these attempts took place \ntowards the end of the session, after the brunt of the creative activity was done, and had a relaxed \nand vi\u00adsually distinct interaction style: Teams often split up, and subgroups worked on recreating diagrams \non new canvases instead of modifying existing ones. In the creative phases, however, we often observed \nsitua\u00adtions where the departures from UML appeared to be inten\u00adtional rather than accidental. Speci.cally, \nwe saw artifacts which convey information that could have been expressed in a straightforward manner \nvia UML, but were created in completely different notations or which violated signi.cant principles of \nthe standard. These cases are particularly inter\u00adesting since they yield signi.cant clues about the behavior \nand needs of design teams. To help the reader distinguish the detailed objective de\u00adscriptions of activities \nand artifacts from our subjective in\u00adterpretation and analyses, we present the former as italicized text. \nAlso, the textual descriptions frequently refer to pho\u00adtographs of the artifacts. Because of space constraints, \nwe could only include small images within the text. The reader is encouraged to view the electronic version \nof this paper, where these photos appear in full color and at a much higher resolution than that possible \nin print. Using the PDF reader s zoom or magnifying glass functionality will make the hand\u00adwriting in \nmany .gures legible. 4.1 Adapting to evolution Certain UML diagram types convey multiple layers of in\u00adformation. \nClass diagrams, in particular, not only list the classes of the system (or its entities in the case of \ndomain\u00admodeling [1]), but also specify the members of each class, and the OO (e.g., inheritance) and \ndata cardinality (e.g., one-to-many) connections between classes. The notations of UML allow designers \nto add this information in any or\u00adder, while still maintaining the syntactic correctness of the diagram. \nNevertheless, we observed a number of cases where dia\u00adgrams ended up with all these layers of information, \nbut ex\u00adpressed in an entirely different form. Teams tended to select diagram types opportunistically, \nin order to address the is\u00adsue at hand, and captured knowledge as it emerged from the problem-solving \nprocess, even if it did not .t the current se\u00adlection. In some cases, they began constructing a diagram \nof one type, only to have it morph into another, while on other occasions the diagrams turned into a \ncollection of fragments related only by their relevance to a particular design issue. We present three \nsuch examples in detail, in order to convey the process by which these changes occur. 4.1.1 Example: \nstructural domain model Our .rst example, depicted in Fig. 1, comes from team A, which was working on \nthe problem of constructing simula\u00adtors for third-party controllers of production lines. The team began \nits session by discussing assumptions, and then turned to exploring use-cases. Jack, standing by the \n.ipchart, titled the blank canvas Stories. Then, somebody suggested that they .rst cover high-level domain \nentities, and others agreed. The team started brainstorming ideas, which Jack scattered on the titled \ncanvas. Already, we have a discrepancy that may confuse future stakeholders: based on the title one may \nexpect to see the names of use cases, but the diagram actually contains the names of entities. Team members, \non the other hand, will likely recall that change of direction or recognize the con\u00adtents of the diagram \nwithout relying on the title. Very soon, it turned out that the proposed entities could be related and \nquestions were posed and discussed: Are Node and Waypoint merely synonyms? Are Source and Destination \nunique entities, and is there more than (a) Additions to Node (b) Rearranged (c) Add release (d) Final \nFigure 1. Steps in the evolution of the initial domain model diagram by team A one of each? Appearing \nto make the decisions himself, Jack used parentheses to make Waypoint an alias of Node, and then replicated \nSource and Destination under Node, with a small right-angled arrow to indicate the connec\u00adtion (Fig. \n1(a)). Improvising the arrow notation allowed Jack to capture the connection without disrupting his attempts \nto also cap\u00adture the barrage of brainstormed ideas. However, the .gure became inconsistent with class \ndiagram notation and its se\u00admantics unclear. Jack did not clarify the semantics of the connection, and \nwhen another participant proposed a spe\u00adcialization relation, he did not hear it or simply ignored it. \nNevertheless, he appears to have memorized this notation for subsequent idiomatic use. As the team continued \nto brainstorm, a notion was suggested for the inventory of items at a particular lo\u00adcation. At .rst, \nit was captured via the Count property of Node and listed with the same right-angle arrow. A replica \nof Count with the arrow was then added under Path. Fur\u00adther discussion of the notion of inventory lead \nto the re\u00adalization that Source, Destination, and Waypoints are all special kinds of Node. The representation \nwas changed, with Waypoint listed above Node, and Node listed un\u00adder the independent Source and Destination \nentities (Fig. 1(b)). It took a while until the redundancy of these entities under the original Node \nwas .xed. Later on, after a Release entity was proposed for the Source and written down (Fig. 1(c)), \nsomeone suggested writing the behaviors in a different color, allowing more methods to be added at various \nlocations around the entities (Fig. 1(d)). The resulting diagram, depicted in Fig. 1(d), conveys the \nsame details as would a class diagram used for domain mod\u00adeling [1]: candidate classes, properties, methods, \nand inher\u00aditance. However, from the point of view of proper UML modeling, its notations are ambiguous \nwithout the context of speci.c discussions and elements. For example, inheritance, which in class-diagrams \nappears as a direct line from a sub\u00adclass to a superclass above it, appears here as an arrow from a superclass \nto the name of a subclass below it. The problem is not only with the direction, but also with the replication \nof the superclass name. In addition, the exact same notation is used to represent a property of a class, \nand is also similar to the notation for a method. These problems may preclude this diagram from serving \nas a documentation artifact, at least without contextual in\u00adformation. For example, how would someone \nviewing this artifact infer that Count is a property of Node and not a su\u00adperclass? Nevertheless, this \ndiagram appeared to facilitate brain\u00adstorming as a preliminary step to coming up with a solu\u00adtion. By \nwriting all brainstormed nouns around the board, the team was able to avoid an early commitment to distinguish\u00ading \nclasses, .elds, and methods, which require different no\u00adtations in class-diagrams. Furthermore, keeping \nthe related entities for each candidate class in close proximity, some\u00adtimes at the cost of replication, \nallowed the preservation of the diagram as primarily a catalog of entities rather than as an attempt \nto fully structure the domain. 4.1.2 Example: structural solution model In our second example, depicted \nin Fig. 2, team E, which was working on the medical information system, arrived in\u00addirectly at a class \ndiagram, while retaining some inconsistent notations. The team was trying to envision the usage model \nof its system, and started drawing a sequence diagram that started with a user making a request. Since \nusers interact with the system and provide it with additional information via web forms, there was soon \na need to represent these forms. Craig, standing by the posterboard, placed a page that contained a rudimentary \narchitecture diagram immediately to the left of the sequence diagram, and partitioned it. In the remaining \narea, he started drawing rectangles for UI forms, writing the names of important actions inside them \n(Fig. 2(a)). More (a) UI diagram below architecture (b) Becomes entity-relation diagram (c) More relations \nadded (d) Final Figure 2. Steps in the evolution of the initial solution model diagram by team E interaction \nwas speci.ed in the sequence diagram, and ad\u00additional web-forms were added. By increasing the spatial \nproximity between the two dia\u00adgrams, the team was able to follow and manipulate the rep\u00adresentations \nof two facets of the system at the same time. No evidence, however, remains to alert future stakeholders \nof the connection between the two diagrams. As forms for treatment plan and treatment step were added, \na one-to-many relationship was realized and captured (Fig. 2(b)), followed by more cardinality connec\u00adtions \n(Fig. 2(c)). These changes essentially turned the form collection into an entity-relation diagram. Then, \nthe team realized that a Session is a special kind of Appointment, and added a parallel inheritance arrow \nto represent it, turning the drawing into a class diagram. In addition, a line representing control-and \ndata-.ow was added from the Session to the generated Treatment report, thus di\u00adverging from class-diagram \nnotation (Fig. 2(d)). Although the .nal version of this diagram resembles a compliant class diagram, \nit contains additional layers of in\u00adformation such as the contents of some web-forms. In addi\u00adtion, certain \nentities represent entry points into the sequence diagram, but this contextual information is not captured \nin writing and is lost. By combining all this information into one diagram, the team was able to treat \nmultiple facets of each entity without replication.  4.1.3 Example: behavioral domain model Alternate \nrepresentations evolve not only for structure, but also for behavior and function. Team A .nished the \ndomain model of the .rst example, and began to explore the interaction between the controller and the \nsimulator with a simple scenario. On a new canvas, they created a small map of the simulated production \nline, consisting of one source and one destination connected by a single conveyor belt. To describe the \nbehavior, Al wrote down a business rule, requiring a widget to arrive at the  (a) Early (b) Final Figure \n3. Functional domain model by team A destination before the next one leaves the source (top of Fig. \n3(a)). Now, Al wanted to describe the behavior of the controller, and speci.ed it in two textual steps \n(middle of Fig. 3(a)). Jack approached the board and added a sequence diagram to represent the interactions \nbetween both sides of the sys\u00adtem (bottom of Fig. 3(a)). When they realized that the con\u00adtroller s behavior \nis continuous, Al added a third step, send next one, and created a .owchart arrow from it back to the \n.rst step. Someone then mentioned the need for an exit\u00adcondition, and Al turned the steps into pseudo-code, \nby wrapping them within a while loop with curly braces (mid\u00addle of Fig. 3(b)). Later, the sequence diagram \nwas modi.ed to represent this change, and an external testing agent was added. (bottom of Fig. 3(b)). \nWe see that differences in individual perspective can lead to representation choices that differ in their \nability to cope with the evolution of the design. Al was focused on the con\u00adtroller, and described its \nbehavior in isolation, whereas Jack preferred a view of the entire system. Jack s choice to use a sequence \ndiagram later helped cope with the introduction of an additional entity, the tester, into the system. \nHowever, such diagrams typically represent only a single execution path, and could not be naturally extended \nto meet the evolv\u00ading need to model iterative and conditional behavior. The textual representation chosen \nby Al, on the other hand, was more malleable, and was complemented by bor\u00adrowing idioms from familiar \nrepresentations. The series of steps seemed suf.cient for sequential code, but iterative be\u00adhavior demanded \nthe representation of control .ow, and the arrow notation of .ow-charts was promptly borrowed. Flow\u00adcharts, \nhowever, bloat under complex control .ows, and the more concise syntactic elements of a programming language \nwere quickly used.  4.2 Customizing level of structure Everyday experience tells us that the hand-drawn \ndiagrams created early in the design process typically appear less aes\u00adthetic and organized than their \n.nalized versions, especially electronic ones. In some cases the difference is purely aes\u00adthetic and \nthe diagram can be rearranged and re-rendered without actually changing the structure [5]. Other sources \n[8] suggest that earlier models are simply less complete, and omit content and connections outside the \ncurrent focus; the missing details are incrementally added later. While we wit\u00adnessed many examples of \nless aesthetic diagrams and of less complete ones, we also observed early diagrams which ap\u00adpeared visually \ndifferent because of a choice to use a differ\u00adent level of structure. 4.2.1 Starting with unstructured \nrepresentations Notational standards such as UML typically de.ne several diagram types, each with its \nown primitives. Software tools that support them often require a user to specify the diagram type in \nadvance, and only allow the use of the appropriate primitives. However, as we have seen in the previous \nexam\u00adples, an early commitment to a diagram type is not always practical. In fact, teams may initially \nwork at such a simplis\u00adtic level that no diagram type is appropriate, since it would incur signi.cant \ncosts and may constrain them with irrele\u00advant structural details. The most typical example of this behavior \noccurred as teams began working on a new canvas and started brain\u00adstorming a homogenous set of entities. \nFor example, if team A was forced to use a class diagram when construct\u00ading the domain model of Fig. \n1(d), the cost of surrounding each new entity in a box might have been marginal. The real cost would \nhave come from constraining the ability to mod\u00adify and experiment as certain entities turned out not \nto be classes, but rather properties or methods. It appears that when teams expected their design to \nevolve, they tended to prefer simpler representations that im\u00adposed less constraints. Often, they chose \nto use text, in the form of lists or scattered elements. As the design evolved, re\u00adlations and annotations \nwere gradually added. In a few cases, the teams used this opportunity to complete the diagram to\u00adwards \nUML. For instance, team F took separate diagrams conveying a list of actors and a list of activities, \nplaced them adjacently, and connected them to form a use-case diagram, as can be seen in Fig. 4.  Figure \n4. A use case diagram composed by team F In most cases, however, teams continued to diverge from UML. \nThey represented the added information by repeatedly using improvised notations, as in the case of team \nA, or borrowed idioms from other notational standards, such as the inheritance arrows and relation cardinality \nanno\u00adtations from UML class diagrams. The repeated use con\u00adstrained the representation and implicitly \nadded some struc\u00adture to the diagram. This structure might eventually help in the interpretation of the \ndiagram even if the notations are unclear, as one could likely do with team A s domain model from Fig. \n1(d). (a) Team F (b) Team G Figure 5. Connector notations in two object diagrams When reuse was limited, \nand in particular when certain notations had only a single instance, we were often left with less structured \nand consistent representations that were more dif.cult to interpret. For example, consider Fig. 5(a) \nwhich depicts a diagram by team F, which was working on the medical system. The diagram primarily lists \nentities, but also conveys several unclear relations. The relations be\u00adtween role and the several descriptive \nentities to its imme\u00addiate right use the same notation, and could thus perhaps be interpreted as examples \nor instances of the same concept even before we consider the actual text of these entities to verify \nthis assumption. The relationship between patient record and treatment plan, on the other hand, is unique \nin this diagram and therefore cannot be interpreted with con\u00ad.dence without contextual knowledge from \nthe actual ses\u00adsion. Even if some notations are reused, however, the bene.ts can be offset if the emergent \nstructure becomes too com\u00adplex. Consider Fig. 5(b), which conveys a diagram of objects from team G, which \nwas also working on the same prob\u00adlem. In this diagram, it appears that the team initially brain\u00adstormed \nentities and scattered them about the board. When they needed to relate the entities they used generic \nlines, and decorated them with borrowed cardinality notations and with an improvised arrow notation. \nNevertheless, the complexity of the graphs makes it dif.cult to interpret the improvised notations or \nthe undecorated lines without additional con\u00adtextual information. Finally, we note that while lists or \nscattered sets of enti\u00adties on paper allowed teams to begin work with limited struc\u00adtural restrictions, \neven more freedom was available to those who used sticky-notes. For instance, one team in the 2006 study \ncreated entities on stickies, placed them on a canvas, and eventually connected them to form the class \ndiagram of Fig. 6(a). Many teams, including team D in Fig. 6(b), added structure by creating hierarchies \nof bins on a large canvas and placed atomic elements on sticky-notes The use of sticky-notes in OOD deserves \nfurther focused study, and may bene.t from specialized support in electronic white\u00adboards [17]. (a) \nCreating a class diagram (b) Creating custom hierarchies Figure 6. Uses of sticky notes  4.2.2 Working \nwith more structure Based on casual observations, one may expect that freeform design sketches will always \nhave equal or lesser structure than models adhering to standard notations. After all, these notations \nare often designed to accommodate several layers of complex information. While this may generally be \ntrue for UML class diagrams and sequence diagrams, use-case diagrams revealed an opposite phenomenon, \nwhere seem\u00adingly improvised non-conforming notations actually added structure rather than omitted it. \nAt its core, a use-case diagram (UCD) is a bipartite graph which matches a set of actors with a set of \nuse-cases,1 thus 1 Another layer of information connects use-cases to represent extensions and dependencies, \nbut we rarely saw its use. offering a straightforward way to represent this many-to\u00admany relationship. \nHowever, to identify the UCs associated with particular actors, or the actors associated with particu\u00adlar \nUCs, one must trace all outgoing edges. This incurs sig\u00adni.cant cognitive effort, since the UCDs for \nlarge or dense relations tend to become cluttered [10]. (a) Team B (b) Team C (c) Team G (d) Team E \n  Figure 7. Alternative use case diagrams While all but one team (A) in our study explicitly listed \nactors and UCs or activities, only three of them (C, F, G) drew actual UCDs. All other teams, as well \nas team C after it had already created a standard UCD, preferred to connect the actors and UCs using \nthe more structured tabular, tex\u00adtual, and numerical forms depicted in Fig. 7. It appears that for the \ntwo information system problems, teams tended to partition the set of use cases by an associated primary \nactor. This partition effectively created a one-to\u00admany relationship that could receive little bene.t \nfrom the bipartite representation and yet could become dif.cult to follow. Teams thus preferred to represent \nthis partition in structured textual representations, which are more organized and carry lower cognitive \ndemands, but which cannot be used for many-to-many relationships. Use-case diagrams are particularly \nsusceptible to replace\u00adment by more structured representations because their inher\u00adent structure is so \nlimited. Class-and sequence-diagrams, on the other hand, are very structured, and we have thus seen them \nreplaced by alternate notations mostly in the opposite direction, of less structure. Nevertheless, even \nthese diagrams types may occasion\u00adally be replaced by more structured representation. For ex\u00adample, .owcharts, \npseudo-code and actual source code are more structured than sequence diagrams because they inher\u00adently \nsupport complex conditions, control .ow, and reuse be\u00adhavior that is not natural to sequences; this may \nexplain their use in the earlier example of the behavioral model. Simi\u00adlarly, class diagrams are limited \nin describing the contents of each individual class since they simply present a list of members. We have \noccasionally seen teams devoting a sep\u00adarate diagram to the contents of a speci.c class, giving them \nmore freedom in specifying and manipulating its members. Some teams even created bins within the representation \nof a class into which members were sorted, effectively creating another level of abstraction within the \nclass. 5. Results: Representing heterogeneous information In the previous section we focused primarily \non individual diagrams that diverge from UML notation or use alternate representations. Individual diagrams, \nhowever, tell only part of the story. As the teams understanding of the problem and solution evolves, \ntheir knowledge and designs consists of different types of information. To fully understand how designers \nrepresent this designs, we must investigate how they deal with this heterogeneity.    5.1 Using independent \ndiagrams Since software designs cover multiple facets like struc\u00adture and behavior, two-dimensional notational \nstandards like UML typically consist of multiple diagram types [14]. The UML standard dictates that each \ndiagram will use the notation of exactly one diagram type, and restricts the use of foreign annotations. \nThese restrictions are usually followed in formal design documents, and most CASE tools enforce them \nby providing a separate drawing canvas for each dia\u00adgram, and offering only the drawing primitives of \nthe chosen diagram type. DesignFest teams, however, use physical mediums and are not forced to produce \na formal design document. They are therefore free to violate this restriction. Nevertheless, it appears \nthat initially they did try to adhere to the standard, The ability to increase the spatial proximity \nbetween di\u00adagrams, which is relatively straightforward with paper, ap\u00adpears to aid teams in coping with \nthe heterogeneous nature of the design. For example, in the earlier example of team E which was working \non the medical system (Fig. 2), they had to consider the parts of the user interface visible to the user, \nas well as the activities behind the scenes. This lead them to work concurrently on the sequence diagram \nand the UI dia\u00adgram, which were placed on separate but adjacent canvases. When smaller diagrams were \nrequired, and the use of sep\u00adarate large canvases for each diagram was impractical, teams appeared to \nrelax the restriction a little, allowing diagrams of different types to reside on the same canvas. For \nexample, we have seen team E using the area below the architectural diagram to create the UI diagram, \nin order to conserve space. Teams may also intentionally bring multiple small dia\u00adgrams together onto \nthe same canvas in order to increase lo\u00adcality. In the earlier example of team A s behavioral model (Fig. \n3), the exploration of a scenario resulted in multiple ar\u00adtifacts. While each artifact serves a different \nrole, it must be interpreted in the context of the others, and kept consistent with them, thus bene.ting \nfrom increased locality. A similar multiplicity, involving a sequence diagram and a more com\u00adplex map \nof the production line, appeared when the team later explored a more elaborate scenario.  5.2 Combining \ndiagrams While teams generally tried to keep diagrams of different types separate, they occasionally \nviolated UML practices by combining information from different diagram types into a single artifact. \nThis typically involved combining behavioral and structural information. For example, team F devoted \nan entire canvas to the meth\u00adods of a single business object (Fig. 8(a)), in a manner sim\u00adilar to a class \ndiagram, but in addition to listing the method signatures, they also speci.ed implementation details \nwhich have no place in such diagrams according to the standard. We observed a similar phenomenon in our \n2006 validation study, when a team working on a tournament management software textually elaborated the \nsteps of a use case, and added class-diagram elements to represent related entities (Fig. 8(b)). In both \ncases, the added information is closely coupled to the context of the primary diagram type.  (b) Class \ndiagrams in use-case steps Figure 8. Combining structure and behavior In addition, we frequently observed \nteams augment\u00ading UML class diagrams with indications of control-and data-.ows. For example, in the earlier \nexample of the evolv\u00ading class diagram by team E from Fig. 2(d), the team cre\u00adated an output entity for \na Treatment report and added a line from the Session class to represent the .ow of data used to create \nit. Similarly, the three outgoing edges from the Treatment object in the data model created by team G \nfrom Fig. 5(b) appear to represent some form of control or data .ow. One team in the 2005 study used \nclass diagram notation to represent the system architecture and the interactions within it, as depicted \nin Fig. 8(c). Other teams introduced external systems and storage mediums into standard class diagram. \nFor example, Team A was creating a class diagram and discussing how the Simulator class could be con.gured. \nThey added a con.guration .le and a class for loading it, and then used arrows to model the .ow of data \nfrom the .le to the simulator via the loader class (Fig. 9(a)). This hybridization of class structure \nand data .ow is apparently not accidental, as it was repeated in a subsequent .nalized version of the \ndiagram (Fig. 9(b)). (a) Initial diagram (b) Later diagram Figure 9. External elements in class diagrams \nby team A By combining diagrams or introducing foreign elements, teams increase the locality of information, \nwhile reducing the clutter, effort, and redundancy that stems from the use of independent diagrams. While \nthese are tangible bene.ts, this behavior appears to have a more fundamental motiva\u00adtion that is rooted \nin how designers think about the system and its components. Early design discussions typically re\u00advolved \naround objects, rather than classes, and referred to their structural and behavioral properties in ways \nthat cannot easily be disentangled. While notations that dictate a sepa\u00adration of these facets offer \nways to accurately model the de\u00adtails of each facet without interference from the other, this has limited \nbene.t in these early stages, while the costs of forcing a disentanglement may be signi.cant. 5.3 Introducing \nperipheral information into diagrams The tendency to increase the locality of information in the diagram \nis also evident from the ad-hoc integration of con\u00adcrete examples, details, and instantiations into the \ndiagram, rather than placement in external documents or use of anno\u00adtation standards. The UML standard, \nespecially as implemented in CASE tools, accommodates peripheral information only in spe\u00adcially marked \nnotes that lie in proximity to-or in di\u00adrect connection with-diagram elements; these constitute a semantically-and \nvisually-separate annotation layer. The last example shows that in collaborative work, the bound\u00adaries \nare not as clear, at least visually: the con.guration .le with its proposed format in Fig. 9(b) looks \nat .rst like an integral part of the diagram. Similarly, as team B was work\u00ading on the image shop problem, \nthey integrated examples of images, metainfo types, and order states into the class dia\u00adgram (Fig. 10(a)), \neven though it appears that these were not intended to eventually become classes. Concrete examples, \nnot always textual, were often added in an ad-hoc manner while discussing a recent idea or ad\u00ad (a) Class \ndiagram by team B (b) Sample record by team C dition. For instance, during the initial discussion about \nthe con.guration .les, a member of team A wrote a concrete example of its format on the top of the page \n(Fig. 9(a)). Sim\u00adilarly, in response to questions about security, a member of team C drew a small incomplete \nclass diagram (Fig. 10(b)). As more questions were raised about the data relations, he added a sample \nrecord next to it. While examples were typically placed on the same canvas as the entities they refer \nto, we saw limited spatial proximity or explicit connections between them within the canvas. For instance, \nthe data format appearing at the top of Fig. 9(a) is visibly remote from the con.guration .le at the \nbottom of the .gure. In fact, external observers might consider it unrelated to the diagram, or relate \nit to the methods of the controller as both use a distinct color. It appears that ex\u00adplicit proximity \nor connection, as practiced by UML, was not necessary since the example was given in a speci.c con\u00adtext. \nWhen creating documentation-oriented artifacts, teams appeared to explicitly capture these associations, \nas is evi\u00addent by the relocation of the format into the con.guration .le (Fig. 9(b)). We note that important \ncontext-sensitive design informa\u00adtion is not always fully captured in writing. It may some\u00adtimes be captured \nas more of a placeholder or reminder of other information, and be dif.cult to interpret without the contextual \ninformation. For example, only meeting partici\u00adpants will recognize that the annotations on the methods \nof the simulator in Fig. 9(a) convey that some methods are pri\u00advate while others correspond to a certain \nscenario. Similarly, the meaning of the crosses or the arrows on the edges in the earlier example of \nFig. 5(b) is unclear but likely denotes some concept discussed in the session. Worse yet, many notions \nand ideas in the course of dis\u00adcussion are not expressed with permanent visual markings, but rather created \nwith hand movements or even sketched in the air or with a capped pen over the board. All evidence of \nthese gestures is lost in the .nal diagram, although they potentially convey important annotations and \nexamples. De\u00adsigners often appeared to use this mode of communication to avoid cluttering the paper, \nso it is possible that interaction would have been different over a dry-erase whiteboard or an electronic \nmedium. Nevertheless, this behavior demonstrates that pertinent design information may not be explicitly \ncap\u00adtured in an artifact but rather expressed in its context. 6. Results: Dependencies between diagrams \nThe results presented so far show that even when teams are given freedom in their choice of representation, \ntheir designs are still dispersed over multiple diagrams. In this section we focus on the dependencies \nbetween these diagrams, how they change over time, and how teams cope with them.  6.1 Diagram evolution \nacross canvases In examining the representations of individual artifacts, we saw diagrams evolve and \nchange their type or focus in re\u00adsponse to ad-hoc design needs. As the diagram becomes more visually \ndense, however, it can no longer evolve in place . Especially when using physical mediums, larger seg\u00adments \ncannot be manipulated with ease, while striking out contents is detrimental to the diagram s aesthetics \nand may overload short-term memory if material is recreated. Thus, and as we have seen in our preliminary \nstudy [10], a single design or .nal diagram can sometimes evolve over several versions, each on a different \ncanvas. The model of continuous evolution towards complete UML described in the literature [5, 9, 28] \nimplies a monotonically increasing shift towards completeness in content and nota\u00adtion. When the evolution \nis not in-place, this model implies that each new version should convey at least the same infor\u00admation \nas its predecessor (except for intentional revisions), thus rendering all previous versions redundant. \nHowever, re\u00adproducing the contents requires a signi.cant menial effort, which designers are likely to \ntry and minimize. An issue of signi.cant concern, therefore, is whether they would per\u00adform this menial \ntask, or spread the design over multiple incomplete versions, potentially leading to a situation where \nthe .nal version might not stand on its own? Let us consider one such situation, occurring as team E \ncontinued working on the CD for its medical information system (Fig. 2(d)). As a result of the process \nby which the diagram evolved, it has become quite cluttered, with key entities, such as Patient, still \nrepresented as forms rather than as classes. Craig described the diagram as a mess and sug\u00adgested that \nthey clean it up; someone suggested summarizing and Craig agreed, saying they should also capture the \nrela\u00adtions. They proceeded to create a new diagram with a clearer and more spacious layout. It began \nas an entity-relation dia\u00adgram, but became a class diagram as inheritance was added once again. In creating \nthe new diagram, the team fell into a pattern, depicted in Fig. 11: Craig would turn his body or walk \ntowards the original diagram and identify an impor\u00adtant entity or relation. A discussion would ensue, \nfollowed by rendering a version on the new diagram, after which the pattern repeated itself.  The .nal \nversion of the diagram, depicted on the left can\u00advas of Fig. 12, conforms with prior research which suggests \nthat artifacts are often recreated with equivalent content to improve aesthetics or to migrate into an \nelectronic tool [6,8], or with less content, to highlight speci.c details [9]. How\u00adever, our preliminary \nstudy [10] suggested that the mundane activity of recreating artifacts serves not only aesthetic pur\u00adposes, \nbut also offers a chance to inspect, reconsider, and improve past decisions, resulting in different content. \nWhat, then, is the relation between the old and new diagrams in the work of team E, and to what degree \nare aesthetics the primary difference between them? As cleanup progressed with elements transferred to \nthe new diagram, certain decisions were revisited or expanded. For example, at the end of a long discussion, \nthe one-to\u00admany relation of Responsibility between Therapist and Session from the original diagram became \na many-to\u00admany relation between Therapist and Treatment plan in the new one, and received several associated \nproper\u00adties. Afterwards, the team created a relation between Plan and Appointment to indicate that a \nplan can consist of both appointments and sessions rather than solely of the more speci.c sessions. Later, \nthe .ow arrow from Session to Treatment report was replaced by a one-to-one rela\u00adtion. A discussion on \na reporting infrastructure ensued, and though never .nished, a general Query class was added to represent \nthis functionality. This example offers anecdotal evidence that designers may conserve effort by avoiding \nthe replication of some pertinent information, such as the .elds of the Treatment plan class, to the \nnew diagram. Grasping the complete de\u00adsign thus requires aggregating information from both ver\u00adsions, \nwhich is made dif.cult by the differences between them. It is also just one of the many situations we \nencoun\u00adtered in which substantial and often con.icting differences exist between the earlier version \nof the artifact and the re\u00advised one. The difference may not be noticed without careful comparison of \nboth diagrams. Determining the .nal decision would require knowledge of which diagram was newer, and \ndetermining the rationale behind them involves recalling the discussions at the time of the transition. \nMany diagrams evolved through more than two revisions. In general, relatively early after teams began \nworking on a new version, they seemed to determine the magnitude of dif\u00adferences from the previous version. \nWhen it appeared that only minimal changes would be necessary, they tended to split into smaller groups \nand produce an aesthetic and com\u00adplete .nalized version. Otherwise, the team remained cohe\u00adsive, and \nless attention was paid to completeness and aes\u00adthetics, perhaps in anticipation of yet another revision. \nNev\u00adertheless, the early determination was not always accurate, resulting in signi.cant decisions being \nmade at the subgroup or individual level. We note that the two designers using CASE tools to cap\u00adture \na .nalized version of the work of their teams on-the-.y also made frequent individual decisions, which \noccasionally even con.icted with those of the team. These designers were immersed in their personal devices \nand thus lost touch with their group s focus. In addition, the speed at which the tools allowed them \nto capture decisions appeared to further draw them away from the slower and more collaborative activity \nof their peers. Further study is necessary to assess whether personal devices are constructive or detrimental \nto collo\u00adcated collaborative OOD. 6.2 Noncontiguous artifact evolution The previous example demonstrated \na localized and contigu\u00adous evolution, from one version of the artifact of focus to another version of \nthe same artifact. Earlier, we have seen interweaving of work on multiple diagrams which evolve together, \nas when team E was creating the data model of Fig. 2(a) while working on the sequence diagram, or when \nteam A was working on the behavioral model using multiple representations (Fig. 3). In these situations, \nthere was still a locality in time and space and no additional artifacts were used or changed in the \ninterim. Such locality, however, is not always the case since, as we have seen, ad-hoc needs often divert \ndiscussions in different directions. Timelines constructed for the observed sessions show that teams \ntended to work for a while on one primary artifact and then shifted their attention to another. An arti\u00adfact \nmay be abandoned at some point, only to be recalled at a later point and be discussed, referenced, copied, \nor contin\u00adued, on the same canvas or on a different one. Team A was working on the class diagram of \nFig. 9(a), which was still located on the .ipchart. In the course of one long discussion, the team s \nassumptions came up, and the focus changed to a list of assumptions posted earlier on a different posterboard. \nAfter adding assumptions, they came back to the CD for another ten minutes, after which they .ipped the \nchart to an earlier unrelated diagram, and worked on it for a while, occasionally also working on the \nassumptions list. After returning to the CD, they began mak\u00ading the changes in green (controller methods, \ndata format, and markings near simulator methods). They posted the page and turned to working on scenarios \nfor an hour. Only to\u00adwards the end of the session did they begin creating the re\u00advised version of Fig. \n9(b). This example shows that individual diagrams do not evolve in a vacuum. Instead, each change takes \nplace in the context of the current state of the design at that time, which could be captured in artifacts \nthat share no obvious con\u00adnections. For example, certain design decisions were made in the context of \nthe original assumptions list, while others were made in the context of the new ones. The artifacts do \nnot capture these temporal dependencies, potentially pre\u00adsenting a signi.cant challenge for the eventual \ninterpretation of the meeting products. 6.3 Dependencies on multiple diagrams The network of dependencies \nbetween artifacts is further complicated by the .ow of design information from multiple sources, typically \nearlier diagrams, into a single sink , often the current artifact of focus. Having .nished discussing \nreports, the E team turned to the relations between the entities representing actors in the system. They \nreferred to a small diagram, created very early in the session, which described inheritance relations \namong User entities, including ones that did not appear in the original diagram of Fig. 2(d). These entities \nand rela\u00adtions were then copied into a separate page, and data car\u00addinality connections were added. As \ncan be seen in Fig. 12, this diagram was then placed adjacently to the right of the main diagram and \na connection was made, effectively inte\u00adgrating the new part into the main diagram. The additions to \nthe class diagram are compliant with UML, but much of the design rationale behind them lies in the con\u00adtext \nof the differences from the original hierarchy, and their integration into the larger diagram. (a) (b) \n(c) (d) Figure 13. Team E building an architectural model Another example of how multiple artifacts are \nused, inte\u00adgrated, and discussed, occurs towards the end of the E team s session: With time running out, \nthe team decided to capture the high-level architecture of their system, which they initially abandoned \nvery early in the session. In constructing this new diagram, they had prolonged discussions and referred \nto several artifacts, shown in Fig. 13, including: (a) a sim\u00adple model of client and server responsibilities, \n(b) the se\u00adquence diagram, (c) the architectural sketch on the same canvas as the discarded original \nmodel, and (d) the problem\u00adspeci.cation document with its notes. The resulting diagram adds little beyond \nthe original sketch, but many architectural decisions were made verbally in the context of the referenced \nartifacts but simply not written down as time ran out. The above examples show that even though individuals \nmaintain much design knowledge in their heads, and could implicitly apply it to the current diagram, \nthey instead ex\u00adplicitly reference it in existing materials. A likely explana\u00adtion for this phenomenon \nis the need to ground the knowl\u00adedge and offer context to the upcoming discussion, while ensuring that \nthat it is shared by all participants. In addition, since we frequently saw individuals examining artifacts \nbe\u00adfore speaking, it is possible that peer pressure leads design\u00aders to check their sources before contributing. \n 6.4 Coping with multiple artifacts The dependencies between design artifacts are a known chal\u00adlenge \nto all designers, but may be particularly problematic for collaborative teams working with physical mediums. \nThe need to make artifacts visible to everyone requires the use of large shared drawing spaces and results \nin the creation of large scale artifacts. The team s workspace is usually lim\u00adited, allowing them to \nkeep only a limited working subset visible at all times [10]. Even the artifacts in this workspace are \ntypically spread around the design environment, prevent\u00ading designers from seeing all of them at once. \nFor these reasons, when teams needed to continuously focus on multiple artifacts, they tried to increase \nthe physical locality. If the diagrams were not on the same canvas, then they were moved around and placed \nnext to each other. For instance, we saw team E place the UI and sequence diagrams next to one another, \nas elements in the former were entry points into the latter. Similarly, we saw team F place lists of \nactors and activities next to one another, and compose them into a use-case diagram (Fig. 4). When the \nneed to focus on multiple artifacts was tran\u00adsient, diagrams were often held in proximity without be\u00ading \nphysically attached. This was especially common when recreating a new version of a diagram from an earlier \nmodel or a personal note (Fig. 14), after which the original was of\u00adten removed from the working set. \nThere was limited need to af.x the diagrams, since the old version could always be brought back if necessary \n(e.g., Fig. 13(c)). There are situations, however, where diagrams were held in proxim\u00ad (a) Team C (b) \nTeam F Figure 14. Holding diagrams to increase locality ity in the course of conveying ideas. For example, \nwhen team F worked on a scenario involving user actions, a de\u00adsigner would often hold up a sketch of \na web form and a sequence diagram, demonstrate a user action on some wid\u00adget, and then continue to follow \nthe sequence of actions in the sequence diagram until the output was produced back on the form. In these \nsituations, no permanent evidence was left of the connection between the artifacts. As we have seen, \nthe content of one artifact can affect the discussion or content of another, even if they do not share \nmutual entities. While individuals may possess the relevant knowledge in their minds, they appear to \nreexamine the arti\u00adfacts before speaking, and later refer to them explicitly. Un\u00adfortunately, the effort \nand time involved in moving and ar\u00adranging artifacts around the workspace prohibited the estab\u00adlishment \nof physical proximity in many of these cases, and forced teams to repeatedly switch their attention between \ndifferent parts of the design area. This was particularly ev\u00adident for shorter references to materials \nposted around the work area, and especially when individuals, rather than the entire team, were considering \nthe materials or referring to their personal notes or the given documentation. The only physical manifestation \nof these public references were ges\u00adtures and pointing, while the only clue of private references was \ntypically a glance or a change in head position. Nevertheless, when the entire team needed to join the \nfo\u00adcus of an individual, gestures and gaze tracing were key [10]. Gaze tracing also helped individuals \nremain oriented on the focus of the team. For instance, if the participant opposite the board in Fig. \n15 was distracted, he could interpolate the gazes of his four peers to identify which of the three dia\u00adgrams \nthey were focused on. 7. Discussion The collected body of data from three years of DesignFest events \ncontains numerous examples of representations used in collaborative OOD, many of which signi.cantly diverge \nfrom UML, and of dependencies between the diagrams. However, our goal was not to merely con.rm the casual \nob\u00adservations and everyday knowledge of their existence, nor was it to try to catalogue them or to elicit \nquantitative in\u00adformation, which would have little use in these restricted and unique small settings. \nRather, in initiating this study, we set out to understand the representations used in collabora\u00adtive \nOOD, the reasons for their creation and their implica\u00adtions for tools. In the preceding result sections, \nwe presented representative examples of behaviors that, we believe, shed much light on these questions. \n When we set out to explore the representations, we ex\u00adpected artifacts to primarily be examples of incomplete \ndia\u00adgrams with accidental freehand notations that could eventu\u00adally be evolved into complete UML models, \nas described in the literature [9]. Perhaps because of the less restrictive set\u00adtings of our study, the \nactual data revealed surprising results: While we did see many incomplete diagrams, the representa\u00adtions \nended up being too varied to fall under any simple clas\u00adsi.cation. Most importantly, they appeared deliberate \nrather than accidental. We have seen many instances in which the divergent rep\u00adresentation could not \nsimply be dismissed as early forms of UML, or as independent and unrelated freehand anno\u00adtations. Instead, \nthere appear to be situations in which teams create artifacts that convey the same data as proper UML \ndiagrams, but make use of improvised notations to quickly solve immediate problems or capture insights \nbefore they are lost. One path for the evolution of such representations oc\u00adcurred when teams began with \na less structured representa\u00adtion, and then introduced additional notations and structure. A second path \nis when they chose a representation that could offer more structure or cover more facets of the design \nthan a standard UML diagram. In addition, rather than create the portfolio of visually independent diagrams \nfreqently seen in design documents and CASE tool models, teams deliberately created a large, interdependent \nand seemingly disorganized array of arti\u00adfacts. Some of these combined multiple diagrams, types, and \nannotations, while others depended on or overlapped with other artifacts. In addition, there is a complex \nnetwork of de\u00adpendencies, connections, and locality between the artifacts, many of them transient and \ncontext-sensitive, and in some cases subtle. Some of these connections are spatial, involv\u00ading the location \nof the artifacts at speci.c times, while oth\u00aders are temporal or contextual, involving their state or \nuse at given times Let us now try to explain these results and discuss their implications. 7.1 Ad-hoc \nchoice of representation Existing explanations for the divergence between design sketches and standards \nsuch as UML tend to follow two themes. First, early artifacts are mostly incomplete, and can evolve into \nconformance with the formalism with suf.cient effort and guidance [8, 15]. Second, there are criticisms \nof the standard itself, such as its power of expression, elegance, its level of restriction, or its approach \nto organizing data, and thus teams might be expected to rebel against it or at least adopt additional \nnotations. We shall relate to the .rst theme now, and discuss the second at the end of this section, \nBased on repeated close studies of the videotaped evi\u00addence, of which pertinent examples were presented \nin this paper, we propose an explanation for the choice of repre\u00adsentation, and the divergence in notation \nin particular, that is more fundamental and less dependent on the speci.cs of formalism and settings. \nNamely, we suggest that while teams are aware of the need to convey their design for future use, and \nwill explicitly work towards that goal in later and visu\u00adally distinct phases of the design, that is \nnot their primary motivation and concern. Rather, in the creative phases of the design, both the de\u00adsign \nprocess and the representations used to capture it are structured as an ad-hoc response to the team s \nunfolding un\u00adderstanding of their problem and solution. The ad-hoc ap\u00adproach allows teams to capture \nthe results of their problem\u00adsolving process in whatever order that it happens to take, and tackle issues \nin the order they choose, often using sketches as a short-term memory. In respect to representation, \nad-hoc choice serves sev\u00aderal purposes. One obvious bene.t is in allowing teams to minimize the costs \nin distraction and physical effort that arise from visual activity and in particular from adhering to \na complex notational standard. Like previous researchers, we saw teams .ltering out unrelated content \n[8] and skip\u00adping aesthetic polishing [5, 24]. We also saw them avoid\u00ading the menial chore of copying \nall content when creating a new version of a diagram, effectively spreading the design across several \nversions. In addition, we have frequently seen participants using gestures and air-pens rather than actu\u00adally \ndrawing, to avoid the associated costs of writing and subsequently erasing materials. This was also evident \nwhen teams used small and portable canvases or sticky notes that could be temporarily attached to larger \nsheets and moved about [10]. A second related bene.t is that it enables them to local\u00adize different types \nof information related to an issue, thus reducing physical clutter and memory load. Teams tended to increase \nthe physical locality of relevant materials: they shuf.ed canvases around or placed related diagrams \non the same canvas, and even integrated different materials into the same diagram. However, this increase \nin locality is not only physical; it also extends to a reliance on individual and group memory, on the \nimmediate context, and on alternate commu\u00adnication mediums such as speech or gesturing. This locality \nacts as a substitute for the need for speci.c and well-de.ned references and notations. A third, less \nobvious but more fundamental, purpose of ad-hoc choice is that information could be represented at lev\u00adels \nof completeness, abstraction, structure, and organization that are best adapted to the team s current \nand anticipated needs. In some cases, the available representations could not match the level of structure \nat which the teams wanted to work. In other cases, by avoiding an early commitment to a particular representation, \nteams were able to allow their representation to evolve in ways not possible with a .xed representation. \n 7.2 Impact on products As we have repeatedly seen throughout this paper, the pri\u00adority given to creative \ndesign and the attendance to ad-hoc needs comes at a cost: teams create an unedited collection of artifacts \nwith certain dependencies, inconsistencies and ambiguous notations, that may be less comprehensible and \nuseful to outsiders, thus lowering their potential as docu\u00admentation or implementation artifacts. This \nposes a prob\u00adlem since sketches as well as archival-quality artifacts from design meetings are subsequently \nused by developers, who need to understand decisions made in the design meeting [6]. They also frequently \nneed to understand the rationale behind these decisions [18], which is often not documented explic\u00aditly \n[20]. Furthermore, problems in interpreting UML dia\u00adgrams have been implicated in some software defects \n[19]. Even some of the explicitly-recreated and .nalized dia\u00adgrams that we have seen will present a challenge \nto external observers, due to ad-hoc annotations, foreign elements, and the differences between versions. \nFor instance, a hypothet\u00adical external observer will be challenged to understand the annotations on the \nmethods of Fig. 9(b), or where the status codes .t. Understanding the complete solution of team E, such \nas its data model of Fig. 12, will require him to lo\u00adcate the earlier versions, such as Fig. 2(d), identify \nthe dif\u00adferences, and elicit some details from the original. Interpret\u00ading all these representations \nwould require familiarity with the context of their creation.  7.3 Order of evolution Throughout all \nobserved sessions, it was evident that designs and artifacts do not evolve on a single continuous path \nof monotonically-increasing completeness. Rather, in response to ad-hoc needs, the designs and artifacts \nevolve on multiple paths that are interwoven and sometimes merged. Every ar\u00adtifact or idea may be abandoned, \nonly to be recalled at a later point, and be discussed, referenced, copied, or continued on the same \ncanvas or on a different one. The interwoven and noncontiguous order of work presents several challenges. \nDuring the session, it challenges the team members memory, individually and as a group, and they spend \nmuch effort attempting to recall and recap past dis\u00adcussions and decisions. Physically, it also increases \nclutter and confusion as the team struggles to maintain a limited working set of diagrams, requiring \nthem to search, move, and .ip diagrams, and depreciating the value of spatial cues which are essential \nto locating material [10]. The impact also persists after the session has ended, since the loss of temporal \norder can present challenges to interpreting the .nal diagrams. For instance, because team A made changes \nto its posted list of assumptions while working on the diagram of Fig. 9(a), a reader examining earlier \nartifacts might mistakenly assume that all listed assumptions were made at the same time at the beginning \nof the session, and thus interpret those artifacts in this mistaken context. We note that identifying \nthe connections and interweav\u00adings between artifacts is also challenging. Access to artifacts can vary \nin length and impact, from longer references that in\u00advolve copying, making changes, or even a return \nof focus and a continuation of discussion drawing, to short references, ac\u00adknowledged only in glance \nand speech. Individual designers leverage the extreme collocation to maintain awareness of what others \nare doing and what they are focused on. As could be expected, we have seen coordination problems arise \nwhen teams split into subgroups [10]. The nonlinear path of the design evolution also exacer\u00adbates the \nproblem of understanding the results, as it is dif.\u00adcult to interpret the resulting artifacts without \nunderstanding how and why they evolved from the originals. While the de\u00adsign rationale is rooted in the \ncontext of both versions of the artifact, it may only be captured in the discussion itself, and the difference \nbetween the artifacts may be the only hint that such a discussion ever took place. In addition, subtle \nrefer\u00adences to artifacts and temporal clues that may have important impact are not captured. 7.4 Use \nof UML as an idiom We conclude our discussion of the results by touching on the use of UML. Although \nour presentation focused on divergences from UML, it is important to note that the representations of \nmost artifacts are still based on that formalism and often comply with it. This is particularly evident \nin .nalized versions cre\u00adated for presentation: UML is apparently considered appro\u00adpriate for documenting \nand communicating designs. Testimony to its communicative qualities is offered by the fact that some \nof its notations become idioms that are applied almost automatically, even outside the expected context. \nFor example, the inheritance notation of class diagrams is so well recognized that we have frequently \nseen it used to indicate generalization and specialization relations among other en\u00adtities, such as actors \nin use-case diagrams. The use of inher\u00aditance to convey examples in the class diagram of Fig. 10(a) is \nanother possible example of this phenomenon. These id\u00adioms even make their way into architectural diagrams. \nFor example, in a freeform architecture diagram created by an\u00adother team working on the image shop problem \n(Fig. 8(c)), we can see the UML notations for inheritance and aggrega\u00adtion used in a diagram that primarily \nconveys components and the interaction between them. In fact, after examining the plethora of diagrams \nin three years of DesignFest events, we raise the possibility that the use of UML in the earlier and \nmore creative stages of collaborative OOD, before .nal diagrams are created, is not a real use of the \nstandard or of a consistent subset. Rather, it appears to be a use of freeform notations that borrows \nand utilizes several well-recognized UML constructs as idioms. This hypothesis may offer some explanation \nfor the use of only a handful of UML diagram types and of a very limited subset of their available primitives, \neven though many of the participants were very experienced UML modelers. When not using the idiomatic \nconstructs, representations tended to devolve into the box-and-arrow diagrams observed in non-OO settings \n[6]. This presented only a limited dif.\u00adculty during the meeting, because interpretation was implied \nby the context of the conversation, but presents a problem for external readers who lack syntactic or \ncontextual cues to interpret them. Finally, we want to clarify that we do not consider the .ndings of \nthis paper to be indicative of speci.c weaknesses of the UML standard compared to other potential notations. \nOur observations are not merely the result of studying a par\u00adticularly problematic formalism: While they \nhighlight inad\u00adequacies of UML in supporting collaborative design, UML is primarily a speci.cation-and \ndocumentation-oriented no\u00adtational standard. The important implication of our observations is that it \nis not clear that any current or future .xed standard with these goals would be .exible enough: The same \nfactors and ad\u00adhoc needs will likely lead designers to improvise around its restrictions as well. Thus, \ninstead of trying to improve col\u00adlaborative OOD by attempting to .nd a perfect formalism, perhaps an \ninvestment in tools that are independent of spe\u00adci.c notations may be more rewarding. 8. Implications \nfor design-support tools Our discussion so far has focused on understanding the rep\u00adresentations used \nin collaborative OOD. We shall now turn to identifying implications for design-support tools. 8.1 Utilizing \nlarge displays As described in Sec. 2.3, most existing efforts for supporting collaborative OOD focus \non using electronic whiteboards as shared drawing spaces, typically using sketch recognition to identify \nprimitives of the notation. These primarily focus on speci.c UML diagram types, though a recent tablet\u00adbased \ntool [15] supports customizable and domain-speci.c notations. Although there is limited information \non these tools suc\u00adcess in the .eld, our observations present two potential dif\u00ad.culties to real-world \ndeployment. First, designers employ a range of improvised and generalized notations that may be dif.cult \nto distinguish and associate with the speci.c no\u00adtations of a .xed standard with adequate con.dence. \nSec\u00adond, designers rely on contextual information and on alter\u00adnate communication mediums, not available \nto sketch rec\u00adognizers, to complement and help interpret the improvised notations. While automatic recognition \nis useful, it appears oriented primarily towards the creation of archival-quality artifacts from the \nmeeting. What other needs do teams have in order to come up with the design in the .rst place? Our earlier \nstudy of the design environment [10] showed that teams struggle to maintain a working set of visible \nar\u00adtifacts within the limited working space, and invest signi.\u00adcant effort in .nding and retrieving diagrams \nafter they were removed from that set. The observations in this paper also demonstrated that teams tend \nto increase the physical local\u00adity of related information, placing related information adja\u00adcently or \nembedding canvases within one another. The costs associated with physical mediums prevented them from \ndo\u00ading so in all applicable situations, especially for short ref\u00aderences, and they often needed to switch \nattention between different areas of the workspace. Large electronic sketching surfaces offer the potential \nfor alleviating these problems by creating a virtual drawing space that is much greater and more .exible \nthan any phys\u00adical canvas [12]. With appropriate interaction techniques, they can help teams rapidly \nidentify artifacts in this space and bring them into physical proximity within the limited physical viewport. \nMultiscale interfaces [13] can help over\u00adcome the inherent resolution limitations of these displays. \nAt present, we are not aware of any whiteboard based tool that implements this functionality. These devices \ncan also be con.gured to track and log all drawing activities. This can be used to offer an undo functionality, \nwhich may lure designers away from drawing in the air and leave records of the removed information, typically \nexamples. This record could also be used to provide temporal information which can help in the interpretation \nof diagrams. Large displays may also eventually play a role in meeting the increasingly important challenge \nof globally-distributed software design. Distributed work in general, however, presents unique challenges, \nheavily studied in the literature, which arise from from the loss of physical affordances. Else\u00adwhere \n[10], we discuss additional challenges speci.c to dis\u00adtributed OOD, based on our preliminary study, and \noutline additional requirements for supporting the design environ\u00adment under these settings, with respect \nto large displays. 8.2 Preserving context While most current work and some of our recommendations focus \non on the exciting potential of large displays, we must not lock ourselves to that technology. A long \ntime may pass before such devices are ubiquitous. Even if the technology was available in specially equipped \nmeeting rooms, many design collaborations are spontaneous, short-lived, and take place in locations such \nas personal of.ces [6]. What impli\u00adcations, then, does this study have for designers working in everyday \nsettings? Perhaps the most important contribution of our .ndings is in highlighting the critical role \nthat contextual cues, mem\u00adory, and alternate communication mediums, play in the de\u00adsign process. This \ninformation, important during the session, is particularly crucial for a subsequent understanding of \nthe designs and their rationale. At present, casual observation suggests that most teams do little to \npreserve this informa\u00adtion, and at best preserve only the .nal diagrams after the meeting has ended. \nHowever, it is not always possible to foresee in advance what artifacts will be important in the future, \nand in some cases this will only be recognized after several reproductions [6]. Therefore, the take home \nmessage for all designers is to try and preserve as much of this information as possible. We believe \nthat such investment may often be preferable to attempts to create a .nal and aesthetic version of the \nartifacts during the meeting The question, of course, is how to best capture this information. In our \nefforts to understand the diagrams, we made use of various information sources available to us. In terms \nof visual information, perhaps the most useful resource, which was also the easiest to obtain, were the \nphotos taken during the session, which captured intermediate states of the dia\u00adgrams and their spatial \nlocation in relation to other artifacts. These helped us understand the evolution of each diagram and \nof the design as a whole, as we could compare diagrams over time; in some cases, they revealed important \nmaterial which was later erased. With the ubiquity of digital cameras, most designers should be able \nto take these photos even in spontaneous meetings. Unfortunately, unless photos are taken frequently, \nim\u00adportant details may be lost, including: concurrent work on multiple diagrams, short references, or \nan example that is quickly erased. In addition, photos cannot capture gestures, drawing in the air , \nand the glances that establish reference. This information is particularly important if a voice record\u00ading \nor transcript of the meeting is captured, since many ver\u00adbal references rely on a speci.c visual context, \nsuch as what the designer has just looked at. In our study, only the video stream captured enough of \nthis evidence, thanks to its continuous nature. At present, video may be the most comprehensive means \nof capturing contextual details from collocated collaboration, and may therefore be the safest approach \nfor teams seeking to min\u00adimize the risk of losing critical information. However, al\u00adthough its effectiveness \nfor requirements engineering has re\u00adcently been demonstrated [7], the use of video in software design \nremains controversial. One obvious concern is the feasibility of recording all collaborative situations. \nHowever, since the goal of the video is primarily to capture gestures and timing information, and offer \ncontext to verbal interaction, even low-.delity streams are suf.cient. With decreasing storage costs \nand the avail\u00adability of webcams and video-capable digital cameras, we believe this footage can be captured \ninexpensively even in spontaneous meetings. A more fundamental concern regarding video is the chal\u00adlenge \nof locating information within such an unstructured stream. In our experience, the random access and \nrapid skim\u00adming capabilities afforded by digital video are extremely helpful in pinpointing relevant \nsections ef.ciently without watching the entire stream. Video can thus be considered as a form of insurance \nin case speci.c information may be sought in the future. In the future, advances in video analysis, or \nperhaps cor\u00adrelated data from instrumented electronic whiteboards, may provide structure to this stream \nand offer new possibilities such as the creation of useful summaries or aggregations of context. For \nexample, one could imagine a tool that could help supply useful context for a confusing notation, by \nvi\u00adsually summarizing the set of actions that occurred imme\u00addiately prior to creation of the notation, \nor by highlighting anything edited in close temporal proximity to the use of the notation. Based on our \nresults, it seems that .nding a rich set of techniques for capturing and displaying contextual infor\u00admation \nis a potentially very rich research area. We realize that some teams will not be able to use tech\u00adnological \nmeans to capture contextual information. To these designers we can only suggest that they remain constantly \naware of the future interpretability and traceability of their work, and try and preserve information \nin the diagrams whenever possible. This does not have to mean an explicit and costly documentation effort; \nit could be as simple as an\u00adnotating some artifacts in the short pauses before switching to another area. \n9. Conclusions and future research In this paper we presented observations that signi.cantly im\u00adprove \nour understanding of the visual and physical man\u00adifestations of collocated collaborative OOD. Our .ndings \ndemonstrated the tendency to choose representations and ar\u00adrange visual artifacts to accommodate immediate \nneeds, at a cost for the subsequent use of the artifacts. This highlighted the importance of supporting \nteams in managing artifacts and in preserving pertinent contextual information. Further study is necessary \nto ascertain whether our results generalize to real world design settings. The network of implicit depen\u00addencies \nbetween artifacts and their impact on the design also appears to merit further detailed study. Our current \nwork focuses on .nding means to preserve contextual information from design and development activ\u00adities \nwhich take place over electronic platforms, since these can be monitored with existing technologies. \nWe are in\u00advestigating the potential use of episodic memory [25] as a metaphor for representing accounts \nof these activities. Acknowledgments We would like to thank the organizers of the ACM Design-Fest events \nat OOPSLA 2004, 2005 and 2006 for their assis\u00adtance in conducting this research, and the numerous partici\u00adpants \nfor allowing us to observe and record their work. The authors gratefully acknowledge support by NSF grant \nIIS-0414698, as well as support from the Software Industry Center and its sponsors, particularly the \nAlfred P. Sloan Foundation as well as Accenture Technology Labs. The .rst author was supported by an \nIBM PhD Fellowship. References [1] S. W. Ambler. The Object Primer -Agile Model-Driven Development with \nUML 2.0. Cambridge University Press, 2003. [2] A. Black. Visible planning on paper and on screen: The \nimpact of working medium on decision-making by novice graphic designer. Behaviour and Information Technology, \n9(4):283 296, 1990. [3] N. Boulila. Group support for distributed collaborative concurrent software modeling. \nIn ASE 04, pages 422 425. [4] L. C. Briand, Y. Labiche, M. D. Penta, and H. D. Yan-Bondoc. An experimental \ninvestigation of formality in UML-based development. IEEE Transactions on Software Engineering, 31(10):833 \n849, 2005. [5] Q. Chen, J. Grundy, and J. Hosking. An e-whiteboard application to support early design-stage \nsketching of UML diagrams. In IEEE Conference on Human-Centric Computing (HCC 03), 2003. [6] M. Cherubini, \nG. Venolia, R. DeLine, and A. J. Ko. Let s go to the whiteboard: how and why software developers use \ndrawings. In CHI 07, pages 557 566. [7] O. Creighton, M. Ott, and B. Bruegge. Software cinema\u00advideo-based \nrequirements engineering. In RE 06, pages 106 115. [8] C. H. Damm, K. M. Hansen, and M. Thomsen. Tool \nsupport for cooperative object-oriented design: gesture based modelling on an electronic whiteboard. \nIn CHI 00, pages 518 525. [9] C. H. Damm, K. M. Hansen, M. Thomsen, and M. Tyrsted. Supporting several \nlevels of restriction in the UML. In UML 00, LNCS 2844, pages 396 409. Springer, 2000. [10] U. Dekel. \nSupporting distributed software design meetings: what can we learn from co-located meetings? In Workshop \non Human and Social Factors of Software Engineering (HSSE) at ICSE 05, SIGSOFT Softw. Eng. Notes, 30(4):1 \n7, 2005. [11] ACM DesignFest homepage. http://designfest.acm.org. [12] S. Elrod et al. Liveboard: a large \ninteractive display supporting group meetings, presentations, and remote collaboration. In CHI 92, pages \n599 607. [13] G. W. Furnas and B. B. Bederson. Space-scale diagrams: understanding multiscale interfaces. \nIn CHI 95, pages 234 241. [14] J. Gil and S. Kent. Three dimensional software modelling. In ICSE 98, \npages 105 114. [15] J. Grundy and J. Hosking. Supporting generic sketching\u00adbased input of diagrams in \na domain-speci.c visual language meta-tool. In ICSE 07, pages 282 291. [16] J. D. Herbsleb, H. A. Klein, \nG. Olson, H. Brunner, J. Olson, and J. Harding. Object-oriented analysis and design in software project \nteams. Human-Computer Interaction, 10(2):249 292, 1995. [17] S. R. Klemmer et al. The designers outpost: \na tangible interface for collaborative web site. In UIST 01, pages 1 10. [18] A. Ko, R. DeLine, and G. \nVenolia. Information needs in collocated software development teams. In ICSE 07, pages 344 353. [19] \nC. F. J. Lange and M. R. V. Chaudron. Effects of defects in UML models: an experimental investigation. \nIn ICSE 06, pages 401 411. [20] T. D. LaToza, G. Venolia, and R. DeLine. Maintaining mental models: a \nstudy of developer work habits. In ICSE 06, pages 492 501. [21] J. Lin, M. W. Newman, J. I. Hong, and \nJ. A. Landay. Denim: .nding a tighter .t between tools and practice for web site design. In CHI 00, pages \n510 517. [22] A. Mehra, J. Grundy, and J. Hosking. Supporting collab\u00adorative software design with a plug-in, \nweb services-based architecture. In Workshop on Directions in Software Engi\u00adneering Environments (WoDiSEE) \nat ICSE 04. [23] Object Management Group. UML 2.0 speci.cation. [24] B. Plimmer and M. Apperley. Interacting \nwith sketched interface designs: an evaluation study. In CHI 04, pages 1337 1340. [25] D. L. Schacter \nand E. Tulving. What are the memory systems of 1994? In D. L. Schacter and E. Tulving, editors, Memory \nSystems, pages 2 38. MIT Press, Cambridge, MA, 1994. [26] S. Tilley and S. Huang. A qualitative assessment \nof the ef.cacy of UML diagrams as a form of graphical documentation in aiding program understanding. \nIn SIGDOC 03, pages 184 191. [27] W. Visser. Designing as construction of representations: A dynamic \nviewpoint in cognitive design research. Human-Computer Interaction, 21(1):103 152, 2006. [28] J. Wu, \nT. Graham, and P. Smith. A study of collaboration in software design. In 2003 International Symposium \non Empirical Software Engineering (ISESE 03). IEEE Computer Society, 2003. [29] J. Wu and T. C. N. Graham. \nThe software design board: A tool supporting workstyle transitions in collaborative software design. \nIn LNCS 2844, pages 92 106. Springer, 2004.   \n\t\t\t", "proc_id": "1297027", "abstract": "<p>Software designers in the object-oriented paradigm can make use of modeling tools and standard notations such as UML. Nevertheless, casual observations from collocated design collaborations suggest that teams tend to use physical mediums to sketch a plethora of informal diagrams in varied representations that often diverge from UML. To better understand such collaborations and support them with tools, we need to understand the origins, roles, uses, and implications of these alternate representations. To this end we conducted observational studies of collaborative design exercises, in which we focused on representation use.</p> <p>Our primary finding is that teams intentionally improviserepresentations and organize design information in responseto ad-hoc needs, which arise from the evolution of the design, and which are difficult to meet with fixed standard notations. This behavior incurs orientation and grounding difficulties for which teams compensate by relying on memory, other communication mediums, and contextual cues. Without this additional information the artifacts are difficult to interpret and have limited documentation potential. Collaborative design tools and processes should therefore focus on preserving contextual information while permitting unconstrained mixing and improvising of notations.</p>", "authors": [{"name": "Uri Dekel", "author_profile_id": "81100230251", "affiliation": "Carnegie Mellon University, Pittsburgh, PA", "person_id": "P643495", "email_address": "", "orcid_id": ""}, {"name": "James D. Herbsleb", "author_profile_id": "81100340340", "affiliation": "Carnegie Mellon University, Pittsburgh, PA", "person_id": "P132484", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1297027.1297047", "year": "2007", "article_id": "1297047", "conference": "OOPSLA", "title": "Notation and representation in collaborative object-oriented design: an observational study", "url": "http://dl.acm.org/citation.cfm?id=1297047"}