{"article_publication_date": "09-12-2005", "fulltext": "\n\t\t\t", "proc_id": "1086365", "abstract": "This paper defines Poly<inf>AML</inf>, a typed functional, aspect-oriented programming language. The main contribution of Poly&lt;SMALL&gt;AML&lt;/SMALL&gt; is the seamless integration of polymorphism, run-time type analysis and aspect-oriented programming language features. In particular, Poly&lt;SMALL&gt;AML&lt;/SMALL&gt; allows programmers to define type-safe polymorphic advice using pointcuts constructed from a collection of polymorphic join points. Poly&lt;SMALL&gt;AML&lt;/SMALL&gt; also comes equipped with a type inference algorithm that conservatively extends Hindley-Milner type inference. To support first-class polymorphic point-cut designators, a crucial feature for developing aspect-oriented profiling or logging libraries, the algorithm blends the conventional Hindley-Milner type inference algorithm with a simple form of local type inference.We give our language operational meaning via a type-directed translation into an expressive type-safe intermediate language. Many complexities of the source language are eliminated in this translation, leading to a modular specification of its semantics. One of the novelties of the intermediate language is the definition of polymorphic labels for marking control-flow points. These labels are organized in a tree structure such that a parent in the tree serves as a representative for all of its children. Type safety requires that the type of each child is less polymorphic than its parent type. Similarly, when a set of labels is assembled as a pointcut, the type of each label is an instance of the type of the pointcut.", "authors": [{"name": "Daniel S. Dantas", "author_profile_id": "81100105822", "affiliation": "Princeton University, Princeton, NJ", "person_id": "P346516", "email_address": "", "orcid_id": ""}, {"name": "David Walker", "author_profile_id": "81100426485", "affiliation": "Princeton University, Princeton, NJ", "person_id": "PP18001632", "email_address": "", "orcid_id": ""}, {"name": "Geoffrey Washburn", "author_profile_id": "81100451282", "affiliation": "University of Pennsylvania", "person_id": "P639763", "email_address": "", "orcid_id": ""}, {"name": "Stephanie Weirich", "author_profile_id": "81100093135", "affiliation": "University of Pennsylvania", "person_id": "P267927", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/1086365.1086404", "year": "2005", "article_id": "1086404", "conference": "ICFP", "title": "Poly<sub>AML</sub>: a polymorphic aspect-oriented functional programming language", "url": "http://dl.acm.org/citation.cfm?id=1086404"}