{"article_publication_date": "01-08-2014", "fulltext": "\n A Nonstandard Standardization Theorem Beniamino Accattoli Eduardo Bonelli Delia Kesner Carnegie Mellon \nUniversity Univ. Nac. de Quilmes and CONICET Univ. Paris-Diderot, SPC, PPS, CNRS United States Argentina \nFrance Carlos Lombardi Univ. Nac. de Quilmes and Univ. de Buenos Aires Univ. Paris-Diderot, SPC, PPS, \nCNRS Argentina and France Abstract Standardization is a fundamental notion for connecting program\u00adming \nlanguages and rewriting calculi. Since both programming lan\u00adguages and calculi rely on substitution for \nde.ning their dynamics, explicit substitutions (ES) help further close the gap between theory and practice. \nThis paper focuses on standardization for the linear substitution calculus, a calculus with ES capable \nof mimicking reduction in .\u00adcalculus and linear logic proof-nets. For the latter, proof-nets can be formalized \nby means of a simple equational theory over the linear substitution calculus. Contrary to other extant \ncalculi with ES, our system can be equipped with a residual theory in the sense of L \u00b4evy, which is used \nto prove a left-to-right standardization theorem for the cal\u00adculus with ES but without the equational \ntheory. Such a theorem, however, does not lift from the calculus with ES to proof-nets, be\u00adcause the \nnotion of left-to-right derivation is not preserved by the equational theory. We then relax the notion \nof left-to-right standard derivation, based on a total order on redexes, to a more liberal no\u00adtion of \nstandard derivation based on partial orders. Our proofs rely on Gonthier, L\u00b4es axiomatic the\u00ad evy, and \nMelli`ory for standardization. However, we go beyond merely applying their framework, revisiting some \nof its key concepts: we obtain uniqueness (modulo) of standard derivations in an abstract way and we \nprovide a coinductive characterization of their key abstract no\u00adtion of external redex. This last point \nis then used to give a simple proof that linear head reduction a nondeterministic strategy hav\u00ading a \ncentral role in the theory of linear logic is standard. Categories and Subject Descriptors F.3.2 [Logics \nand Meanings of Programs]: Semantics of Programming Languages -Operational semantics; F.4.1 [Mathematical \nLogic and Formal Languages]: Mathematical Logic -Lambda calculus and related systems; I.1.3 Permission \nto make digital or hard copies of all or part of this work for personal or classroom use is granted without \nfee provided that copies are not made or distributed for pro.t or commercial advantage and that copies \nbear this notice and the full citation on the .rst page. Copyrights for components of this work owned \nby others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, \nor republish, to post on servers or to redistribute to lists, requires prior speci.c permission and/or \na fee. Request permissions from permissions@acm.org. POPL 14, January 22 24, 2014, San Diego, CA, USA. \nCopyright is held by the owner/author(s). Publication rights licensed to ACM. ACM 978-1-4503-2544-8/14/01. \n. . $15.00. http://dx.doi.org/10.1145/2535838.2535886 [Symbolic and Algebraic Manipulation]: Languages \nand Systems \u00adevaluation strategies General Terms Theory, Languages. Keywords Lambda-calculus, Standardization, \nResiduals, Explicit Substitutions, Linear Logic, Proof-Nets. 1. Introduction In his seminal paper [35] \nPlotkin introduced the idea of relating a calculus (given by means of an equational theory induced by \na rewriting relation) and a programming language (speci.ed as an abstract machine) via a standardization \ntheorem: the programming language implements the standard strategy associated to the calcu\u00adlus. Let us \nrecall what standardization is about. The idea is to iden\u00adtify a class of derivations, called standard, \nthat is complete: when\u00adever t _ u then there is a standard derivation from t to u. Often, it is possible \nto describe a reduction strategy that produces standard derivations only (the leftmost-outermost strategy \nin the .-calculus), and for which the normalization property holds as a corollary of the standardization \ntheorem: if t has a normal form then the standard strategy will reach this normal form. Completeness \nand normaliza\u00adtion are the justi.cations for Plotkin s approach. Another approach to close the gap between \ncalculi and program\u00adming languages is to resort to explicit substitutions (ES), that are re\u00ad.nements \nof .-calculus where evaluation is decomposed into small steps, and that can be thought as a framework \nin which to specify abstract machines as strategies. It would be natural to expect calculi with ES to \nenjoy standard\u00adization theorems whose induced standard strategies justify abstract machines. Surprisingly, \nthe literature does not present any such re\u00adlationship. This is due to some inherent dif.culties. Calculi \nwith ES are complex and fragile rewriting systems for which already study\u00ading normalization is technically \ndemanding. Standardization that mixes con.uence and termination arguments generally is simply out of \nscope. In particular, ES calculi present critical pairs and thus lack orthogonality, a basic syntactic \nproperty enjoyed by the .\u00adcalculus and on which most standardization techniques rely on. This paper makes \nsigni.cant progress on standardization for ES. The starting point is a recent advance in the .eld of \nES. A new generation of calculi with ES at a distance, having very simple meta-theories and conceived \nas behaviorally equivalent copies of graphical languages such as linear logic proof-nets, have recently \nbeen introduced by Accattoli and Kesner in [6] (see also [2, 3, 5]).  Traditional calculi with ES implement \nthe ordinary substitution by percolating ES through the term structure until they reach variable occurrences, \non which they .nally substitute or get garbage col\u00adlected. The key feature of distance calculi is that \nthe percolating process is factored out from the computational process. Indeed, ES at a distance do not \nmove: their dynamics is de.ned using contexts (i.e. terms with holes) that allows them to act directly \non single variable occurrences (via a context isolating the occurrence), with\u00adout any need to commute \nwith the other constructors in between. The Framework. In this paper we focus on a speci.c calculus at \na distance, the linear substitution calculus .lsub , that is both a slight generalization of a calculus \nby Robin Milner [33] (related to bigraphs), from which it inherits the substitution rules at a distance, \nand a slight modi.cation of the structural .-calculus by Accattoli and Kesner [6] (related to proof nets). \nSuch a calculus has some relevant features: 1. Linear logic and concurrency: it is tightly connected \nwith the translations of .-calculus into linear logic [4] and the p\u00adcalculus [3]. In particular, reduction \nrules for ES act as expo\u00adnential cut-elimination rules in linear logic (resp. replication in the p-calculus). \n 2. Linear head reduction (LHR): given the deep connection be\u00adtween .lsub and proof-nets [4], our calculus \nnaturally expresses linear head reduction, a notion of evaluation for proof nets that is connected with \nother fundamental models [3, 5, 14, 15, 17, 29]. Notably, LHR is a strategy for .lsub , while it cannot \nbe expressed as a strategy in .-calculus. 3. Simplicity and expressiveness: the calculus is simple (only \n3 rewriting rules) and it enjoys numerous desirable properties including: a tight correspondence with \nthe lambda calculus (simulating \u00df-reduction), con.uence on terms and metaterms, preservation of strong \n\u00df-normalisation and as we will show a theory of residuals.  The linear substitution calculus as do all \nother extant calculi with ES presents critical pairs, and so standardization is non\u00adtrivial. However, \n.lsub enjoys a unique property, that we call se\u00admantical orthogonality. Orthogonality. Orthogonal (.rst \nand higher-order) term rewrit\u00ading systems are de.ned as left-linear systems without critical pairs. They \nare the most studied class of rewriting systems, including in particular the .-calculus. This notion \nof syntactic orthogonality is handy and simple, but it has the drawback of being too restrictive. Fortunately, \northogonality can be de.ned in a more abstract way, as the fact that residuals a standard concept in \nrewriting theory (see Section 3) are suf.cient to close local con.uence diagrams. This form of semantical \northogonality is a particular property of syntactic orthogonality, but it is of a behavioral nature and \nmore general. The crucial point is that .lsub is not syntactically orthogo\u00adnal but in contrast to any \nother calculus with ES is semantically orthogonal, as we prove in this paper. In this sense .lsub is \nthe .rst calculus with ES that conservatively re.nes .-calculus, preserving its orthogonality. Unfortunately, \nmost techniques for standardiza\u00adtion rely on syntactical orthogonality. An exception is the abstract \ntheory of standardization developed by Gonthier, L\u00b4evy, and Melli`es (GLM) [19], and later re.ned by \nMelli `es [30, 32]. Such a theory can cope even with non semantically orthogonal calculi as the .s\u00adcalculus, \nbut it takes a much simpler form in presence of semantical orthogonality. Left-to-Right Standardization \nand Beyond. Two .rst contribu\u00adtions of this paper are 1) a theory of residuals for .lsub and 2) a proof \nof the axioms of GLM s theory. These technical results allow us to obtain a left-to-right1 standardization \ntheorem generalizing the well-known standardization theorem for .-calculus, and cap\u00adturing the deterministic \nweak (i.e. not reducing under abstractions) variant of LHR that is the variant that actually matches \nevaluation in the Krivine Abstract Machine and the p-calculus as a standard strategy. It is pleasing \nthat the properties of left-to-right derivations extend naturally to .lsub . However, such a standardization \ntheorem is not fully satisfying. A .rst reason is that LHR (without the weak restriction) is a nondeterministic \nstrategy whose sequences are not necessarily left\u00adto-right standard. However, the nondeterminism of LHR \ndoes not affect the .nal result nor the length of evaluation sequences (tech\u00adnically, LHR enjoys the \ndiamond property). It is then disappointing that LHR is not left-to-right standard, because LHR is a \ncrucial no\u00adtion in the theory of linear logic. A second reason for not being satis.ed with the left-to-right \nstandardization theorem concerns the close relationship between the linear substitution calculus and \nlinear logic proof-nets, the model behind its inception. Terms and proof-nets are behaviorally equivalent \nin a strong sense: every term t maps to a proof-net Pt, and every evaluation step on t or Pt maps to \nan evaluation step on the other. Additionally, the redexes are in bijection and so concepts such as residuals \ntransfer from terms to proof-nets and viceversa. The interest of proof-nets is that they provide a quotient \nof terms; remarkably, this quotient can be explicitly characterized by a sim\u00adple equational theory ~ \n(in the style of [6, 23], and here generated by 3 equations only) turning the behavioral equivalence \nwith linear logic proof-nets into a true isomorphism: for every proof-net P there is a ~-class containing \nall and only the terms behaviorally equivalent to P . Consequently, any notion or result that is stable \nby equivalence ~ immediately lifts to proof-nets. Unfortunately, left\u00adto-right derivations in the linear \nsubstitution calculus are not stable by ~, because ~ swaps some constructors, inverting the relative \nposition of some redexes. Thus, our left-to-right standardization theorem does not hold for proof-nets. \nThis is quite disappointing because proof nets provide an operational model, and one would like to have \na notion of standard derivation that can be freely trans\u00adported from the language to the model and viceversa. \nWe then re.ne our left-to-right standardization theorem. Partial Standardization Orders. Standard derivations \nare de.ned as those reductions that respect a certain order on redexes, for in\u00adstance the left-to-right \norder. In GLM s theory such a total order is replaced by a partial order, providing a more general but \nalso sub\u00adtler setting. To achieve a notion of standard derivation that is stable by ~ we are forced to \nrelax the total left-to-right order into a partial order. In the setting of total orders, given a derivation \n. : t _ u there is a unique standard derivation .' to which . standardizes, and moreover a deterministic \nand normalizing standard strategy can be easily obtained by selecting the minimum redex according to \nthe or\u00adder. When the order is partial, instead, there can be many standard derivations to which a derivation \nstandardizes, i.e. uniqueness is lost: a standard derivation is an ordered derivation but only up to \nswaps of --disjoint steps. Moreover, although GLM s theory does support partial orders, it requires a \nnumber of axioms to hold, some of which are not enjoyed by .lsub modulo ~. So we shall switch to the \naxiomatics of Melli`es PhD thesis [32], which is more general and allows us to prove existence of standard \nderivations for a suit\u00adable partial order. However, alas, .lsub modulo ~ does not even satisfy the axioms \nof [32] required to obtain uniqueness of stan\u00ad 1 We distinguish between the leftmost strategy (that repeatedly \nreduces the leftmost redex) from left-to-right standardization that re-arranges redexes (not necessarily \ninvolving the leftmost redex) from left to right. We also use leftmost (considering terms as strings \nof symbols) for what is sometimes called leftmost-outermost (that is relative to terms seen as trees). \n dard derivations. Nor does it supply us with the guarantee that re\u00adducing external redexes the generalization \nto partial orders of the notion of minimum redexes in the setting of total orders leads to normal forms. \nWe circumvent these inadequacies of the axiomatic framework by exploiting the embedding of a partial \norder into a to\u00adtal order, thus proving uniqueness (modulo swappings) of standard derivations and the \nnormalization of a (speci.c) external strategy. Main Contributions. A summary of our results follows: \n1. The Standardization Theorem. We identify a partial order -B that is related to the concept of exponential \nbox in linear logic proof-nets, and that is stable by ~. We show that Melli`es axioms for existence of \na standard derivation hold for -B , obtaining a standardization theorem for .lsub modulo ~. 2. Uniqueness \nModulo. For partial orders, GLM s theory has some additional axioms that ensures uniqueness modulo inde\u00adpendent \nswaps (see Section 8) but one of these axioms does not hold for .lsub . Nonetheless, we prove uniqueness \nin an abstract way, relying on the embedding of the partial box order into the total left-to-right order. \n 3. Coinductive External Redexes. In GLM s theory external re\u00addexes are de.ned somewhat indirectly, via \nan extraction pro\u00adcess [32]. We clarify this concept by providing a direct and sim\u00adple coinductive characterization: \nan external redex is a minimal redex that is persistently minimal, i.e. whose (unique) residual after \nany other redex is still external. 4. Applications. We use the coinductive characterization of exter\u00adnal \nredexes to obtain a normalization theorem for the leftmost strategy and to give a concise proof by coinduction \nof the fact that LHR is a standard strategy.  The nonstandard character of our standardization result \ncomes at least from the following facts: highlight of the .rst semantical orthogonal calculus with ES \nbeing isomorphic to linear logic proof\u00adnets and enjoying standardization; use of a partial (vs total) \norder on redexes being stable by equivalence classes; proof of uniqueness (modulo) of standard derivations \nby means of simple arguments and an original application of GLM s theory to a non-syntactical orthogonal \ncase. Abstract Machines. As mentioned before, we will show that weak LHR is a standard strategy. In parallel, \nAccattoli, Barenbaum and Mazza [7] studied the relationship between abstract machines and calculi at \na distance obtaining that weak LHR is the strategy implemented by the Krivine Abstract Machine, up to \na certain no\u00adtion of structural equivalence. This result re.nes a similar one by Danos and Regnier [14], \nand completes the lifting of Plotkins s approach (relating the SECD machine with a standard strategy \nin the call-by-value .-calculus) to the granularity of explicit substi\u00adtutions. Moreover, [7] contains \nsimilar correspondences between machines for call-by-value (the CEK and Leroy s ZINC) and call\u00adby-need \n(Sestoft s machine) and some variations over weak LHR. We are con.dent that the new understanding of \nstandardization for ES provided by our work will lead to analogous standardization theorems for call-by-value \nand call-by-need variant of the linear substitution calculus, completing the picture. Related Work. A \nbrief history of standardization may be found in [30]. Standardization was introduced in 1958 by Curry \nand Feys [13] for the lambda calculus. L\u00b4 evy [27] strengthens this result by de.ning the notion of permutation \nequivalence and showing that every derivation has a unique standard derivation in each equiva\u00adlence class. \nHuet and L\u00b4 evy [21] extend these ideas to .rst-order term rewriting without critical pairs and also \nshow that one must abandon the left-to-right order for more general orders in these systems. Klop gives \nthe .rst abstract proof of standardization and applies these ideas to higher-order rewriting [26]. Boudol \n[10] ex\u00adtends Huet and L\u00b4evy s work to term rewriting systems with critical pairs. Clark and Kennaway \n[12], Khasidashvili and Glauert [25], Paolini and Ronchi Della Rocca [34], and Xi [41] provide further \ngeneralizations along various axes. Gonthier, L\u00b4es [19] evy and Melli`introduce an axiomatic approach \nto standardization, later re.ned by Melli` es [30, 32], that has turned out to be convenient to deal \nwith our case, due to its abstract nature. Indeed, simple techniques such as Plotkin s inductive reasoning \nin [35] or the proof terms technique by van Oostrom and De Vrijer [40] extended to the higher-order case \nby Bruggink [11] are not easily adaptable to our equational setting. Takahashi s technique [37] does \nnot apply either. There is no relationship between our results and standardization by levels for linear \nlogic proof-nets2: both approaches use partial orders, but such orders are incomparable. This is a further \nreason to consider our result as nonstandard. Plan of the Paper. The next section introduces the linear \nsubstitu\u00adtion calculus. Section 3 de.nes residuals and Section 4 shows that residuals are compatible \nwith the equivalence ~ in a very strong sense. Section 5 explains the ideas behind the abstract approach \nto standardization and Section 6 proves the left-to-right standardiza\u00adtion theorem. Section 7 explains \nhow the left-to-right order can be relaxed to cope with the equational theory and Section 8 proves our \nequational standardization theorem. Section 9 provides uniqueness of standard derivations. Section 10 \npresents a coinductive charac\u00adterization of external redexes and Section 11 proves the normal\u00adization \ntheorem and the fact that (weak) linear head reduction is standard. 2. The Linear Substitution Calculus \nThe set of terms of the linear substitution calculus, denoted by T , is generated by the following grammar: \nt ::= x | tt | .x.t | t[x/t] A term x is called a variable, tu an application, .x.t an abstrac\u00adtion and \nt[x/u] an explicit substitution. The notions of free and bound variables are de.ned as usual plus fv(t[x/u]) \n:= fv(t) \\ {x} . fv(u). We work with the standard notion of a-conversion (i.e. renaming of bound variables \nfor abstractions and substitu\u00adtions). We use C to denote a context w.r.t. the previous grammar (i.e. \na term with a unique occurrence of a designated symbol D called the hole). We write C[t] for the term \nobtained by replacing the hole of C by the term t. We write C[ u] when the free variables of u are not \ncaptured by the context C, i.e. there are no abstractions or explicit substitutions in C that bind the \nvariables of fv(u).  The .lsub -calculus is given by the set of terms T and by the reduction relation \n..lsub de.ned as the union of .dB , .ls , and .gc , which are the closure by contexts C of the following \nrewriting rules, where L denotes a (possibly empty) list of substitutions [x1/t1] . . . [xk/tk]: (.x.t)Lu \n.db t[x/u]L C[ x]][x/u] .ls C[ u]][x/u] t[x/u] .gc t if x /. fv(t) The names db, ls, and gc stand for \ndistant beta, linear substitution, and garbage collection, respectively. Rule .db (resp. .ls ) comes \nfrom the structural .-calculus [6] (resp. Milner s calculus [33]), while .gc belongs to both calculi. \nIn db we may assume w.l.o.g. Sk Sk that {xi} n fv(u) = \u00d8 and x /. fv(u) . fv(ti) . i=1 i=1 Note that \nthe meta-notation L = [x1/t1] . . . [xk/tk] can also be seen as a context D[x1/t1] . . . [xk/tk]. This \nfact, together with 2 Such a standardization theorem is folklore in the linear logic community. See [2, \n16] for details.  the use of a context C in the second rule, and the global side condition in the third \nrule, justify the idea of rewriting rules at a distance. The substitution context in rule db is motivated \nby its encoding in proof-nets, where explicit substitutions are partially free to .oat (i.e. to traverse \nsome term constructors). Such freedom is formalized by the forthcoming graphical equivalence and by the \nstudy of its properties in Section 4. The linear substitution calculus enjoys all the properties re\u00adquired \nof calculi with ES (including simulation of \u00df-reduction, preservation of strong normalisation, con.uence \non terms and metaterms and full composition), whose proofs are simple and omitted, as they are minor \nvariations over those for Milner s calcu\u00adlus [24], or those of the structural .-calculus [6]. In order \nto study residuals we need to .x a precise terminology about redexes. A redex occurrence in a term t \nis either a tuple (D, r) where t = D[r] and r = (.x.s)Lu (a dB-redex) or a tuple (D, r, C) where t = \nD[r] and r = C[ x]][x/u] (a ls-redex), or a tuple (D, r) where t = D[r], r = s[x/u] and x ./fv(s) (a \ngc\u00adredex). For example, the term t = (xx)[x/y] has two different redex occurrences, namely (D1, r1, C1) \n= (D, (xx)[x/y], Dx) and (D2, r2, C2) = (D, (xx)[x/y], xD). The pattern of a redex is r, the second component \nof the tuple; the box3 of the redex is the subterm of the pattern noted u, and the context of the redex \nis D, the .rst component of the tuple. We use A, B, . . . for redexes occurrences and Red(t) for the \nset of all redex occurrences of t. A Given a redex occurrence A . Red(s) we write s . t for the reduction \nstep obtained by contracting A in s. The graphical equivalence ~ is given by the contextual, transi\u00adtive, \nsymmetric and re.exive closure of a-conversion (i.e. renam\u00ading of bound variables) and the following \naxioms: t[x/u][y/v] CS t[y/v][x/u] x /. fv(v) &#38; y /. fv(u) (.y.t)[x/u] s1 .y.t[x/u] y /. fv(u) (tv)[x/u] \ns2 t[x/u]v x /. fv(v) This equivalence characterizes exactly the representation of terms as proof-nets, \nin the sense that t ~ u iff t and u map to the same proof-net [4]. The .~ lsub -calculus is given by \nthe set of terms T and by the reduction relation ..~ , de.ned by the rewriting rules lsub {db, gc, ls} \nmodulo the equations {CS, s1, s2}, i.e. , t ..~ u lsub '' ' iff t ~ t ..lsub u ~ u. Thus in particular \nt ..lsub t implies t ..~ t ' . lsub Given any reduction relation R, an R-derivation is a (possibly empty) \nsequence of reduction steps having the form s = t0 .R t1 .R . . .. An R-derivation is .nite iff the associated \nsequence is .nite. We write d, e, . . . for derivations and d : s _R t when we stress the source s and \ntarget t of the (.nite) derivation. We write E for the empty derivation and A; d : s _ t for the derivation \nA composing s . u to the left of d : u _ t. A reduction relation R is said to be terminating iff every \nR-derivation is .nite. An element t is said to be in R-normal form iff there is no u such that t .R u. \n3. Residuals B The residuals of a redex A after a reduction step t . u are the traces of the redex A \nthat appear in the target term u. The crucial property that residuals need to satisfy is that any local \nA1A2 con.uence diagram u1 . t . u2 can be closed by reducing in u1 (resp. u2) all and only the residuals \nof the redex A2 after A1 (resp. of A1 after A2). When this happens for every possible local con.uence \ndiagram we say that the system is semantically 3 When terms are represented as linear logic proof-nets, \nwhat we call box corresponds exactly to the exponential box. orthogonal. The subtlety in the study of \nresiduals is that redexes may be duplicated or erased along the way and duplication may even nest two \nresiduals of the same redex. For further references the reader may consult [20, 27, 31, 38]. Another \nsimpler notion of orthogonality is syntactical orthogo\u00adnality [21], and happens when the system is left-linear \nand has no critical pairs. Syntactical orthogonality implies semantic orthog\u00adonality but the converse \ndoes not hold. In particular, the .lsub \u00adcalculus is not syntactically orthogonal but, as we will show \nin Sec\u00adtion 6, it turns out to be semantically orthogonal, a property that no other calculus with ES \nenjoys. In order to give an intuition on such a phenomenon let us consider a calculus with ES such as \n.s [1] or .x [9] containing at least the following reduction rules: (.x.t)u .b t[x/u] (tu)[x/v] .@ t[x/v]u[x/v] \nThe following critical pair arises: (.x.t)[y/v]u[y/v] @. ((.x.t)u)[y/v] .b t[x/u][y/v] However, the @-step \nhas no residual after the b-step. The b-step also has no residual (note how it would have a residual \nif the rule were at a distance). The diagram can be closed, but only reducing created redexes, and so \nthe calculus is not semantically orthogonal. The formal development of residuals is based on a notion \nof (well-)labeled term to be introduced next. Note that since .lsub is not syntactically orthogonal the \ntechnique of underlining the redex pattern [26] cannot be applied, e.g. in (xx)[x/s] the underlining \ndoes not distinguish between the two occurrences of the ls redexes. Labels. In order to follow redexes \nalong a derivation we mark them with special symbols called labels, denoted a, \u00df, ., . . .. The obtained \nset of labeled terms, denoted by TL, is generated by the following grammar. t ::= x | x a | tt | .x.t \n| .xa.t | t[x/t] | t[x a/t] The notations x(a), .x(a).t and t[x(a)/t] mean that x may or may not be labeled. \nWe write Lab(t) to denote the set of all the labels of t and t. to denote the term obtained from t by \nremoving all its labels. Thus for example ((x a y \u00df )[y/.z. .z]) . = (xy)[y/.z.z]. We extend the meta-notation \nL to lists of possibly labeled substi\u00adtutions, and C to possibly labeled contexts. Similarly, the notions \nof free and bound variables are extended to labeled terms as ex\u00adpected together with their corresponding \nnotion of a-conversion. We use flv(t) to denote the subset of fv(t) having at least one labeled occurrence, \ne.g. flv(x a y \u00df [y/z]) = {x}. a Labeled reduction . on labeled terms is de.ned as the con\u00adtextual closure \nof the following rewriting rules: a (.xa.t)Lu .dB t[x/u]L a C[ x a]][x/u] .ls C[ u]][x/u] a t[x a/u] \n.gc t x/. fv(t) De.nition of redexes for terms naturally extends to labeled ones. A labeled redex A is \na redex having a pattern of the form (.xa.t)Lu, C[ x a]][x/u] or t[x a/u], and a is called the label \nof the redex A. The anchor of a redex (labeled or not) is the variable possibly carrying its label. We \nwill usually associate the labels a, \u00df and . to the redex names A, B and C respectively; occasionally \nwe will write Aa to emphasize that a is the label of the redex A. We write Reda(t) for all the redexes \nof t labeled with a. In order to show some key properties required by the axiomatic approach (cfr. Section \n6) we will work with a subset of labeled terms, written TWL, called well-labeled terms, and de.ned by: \nx . TWL and x a . TWL  If t . TW L and x /. flv(t) then .x.t . TW L  If t, u . TW L , then tu . TW \nL  If (.x.t)L, u . TW L , then (.xa.t)Lu . TW L  If t, u . TW L , then t[x/u] . TW L  If t, u . TW \nL and x /. fv(t), then t[x a/u] . TW L .  Note that .xa .x, .x.xa and x[x a/u] are not in TW L . Note \nalso that subterms of well-labeled terms are not necessarily well-labeled (e.g. the abstraction of a \nlabeled db-redex). Well-labeled terms are stable by reduction and graphical equivalence: a LEMM A 1. \nLet t . TW L . If t . u or t ~ u, then u . TW L . Residuals. Here we de.ne residuals for the reduction \nrelation .lsub . In Section 4 we will extend them to the .~ lsub . A term t can be labeled in different \nways, leading to different variants of t. More precisely, we say that t is a variant of u iff t. = u \n.. Thus in particular, t is a variant of itself. If t is a variant of u, then we will consider the obvious \nbijection between the sets of redexes of t and u; sometimes, we will even identify some particular redexes \nof them which are related by this bijection. B To de.ne the residuals of a redex A . Red(t) after a step \nt . u, we consider the a-lift of t w.r.t. A by a, written lift(t, A, a), which is a particular variant \nof t obtained as follows. Let a be a fresh symbol, i.e. a /. Lab(t). If the redex A is already labeled \nin t, then change the label of A to a, otherwise, if A is not already B labeled, assign a to A. Let us \nwrite lift(t, A, a) . u for the induced associated reduction step. Then, the set of residuals of A B \nafter B is given by A(B) := {Reda(u) | lift(t, A, a) . u}. It is clear that this de.nition is completely \nindependent from the variant used to lift the term t. We write A(B)A ' for A ' . S A(B), and A(B) for \nA(B). For example, taking v = A.A \u00df\u00df \u00df B (x x x \u00df )[x/y], B = (D, v, x \u00df Dx \u00df ) (so that v . (x yx \u00df)[x/y] \n= v ') and A = Red\u00df (v) \\ B, we have A(B) = {B ' , B '' }, where B '' ' \u00df = (D, v , Dyx \u00df ) and B '' \n= (D, v , x yD). Creation. Given a reduction step t ..lsub u, the set of redexes in u that are not residuals \nof redexes in t are said to be created. While there are only 3 possible ways to create redexes in .-calculus \n[27], in the .lsub -calculus redexes may be created in one of 6 possible ways, we just show below one \nexample for each case, where the reduced redex has label a and the created redex is underlined: db creates \ndb: ((.xa .(.y.s))u) v .dB (.y.s)[x/u]v db creates ls: (.xa .x)u .dB x[x/u] db creates gc: (.xa .y)u \n.dB y[x/u] ls creates db: x a[x/.y.s]u .ls (.y.s)[x /.y.s]u ls creates gc: x a[x/y] .ls y[x/y] gc creates \ngc: z[y a/x][x/u] .gc z[x/u] Note that dB-steps can create every kind of redex, ls-steps can create {dB, \ngc}-redexes, and gc-redexes can only create other gc\u00adredexes. Note also that whenever a labeled redex \ncreates a redex A, then A is not labeled. Developments. Labels are particularly useful to study develop\u00adments, \ni.e. derivations in which only residuals of an initial set of redexes are contracted. For that, we .rst \nextend the concept of residual to .nite derivations as follows: A(E) := A, A(B; d) := (A(B))(d). A1 Given \nA . Red(t), a (possibly in.nite) derivation t = t0 . A2 t1 . t2 . . . is a development of A iff Ai . \nA(A1; . . . ; Ai-1)for all i. For example, in the .lsub -calculus, t0 = (xx)[x/I] . (xI)[x/I] . (I I \n)[x/I] is a development of the set containing the two ls-redexes of t0. In the sequel, A1; ...; An denotes \nany derivation d1; ...; dn such that di is a development of the set of re\u00addexes Ai for all i. The .nite \ndevelopments (FD) property states that given a term t and a set of redexes A . Red(t), any development \nof A starting at t terminates. This property (proved in Section 6) is one of the key requirements for \nthe axiomatic theory of stan\u00addardization that we are going to apply. The residual of a deriva\u00adtion over \na set of redexes A is de.ned as follows: E(A) = E and (B; d)(A) = B(e); d(A(B)), where e is any development \nof A. 4. Working with Equivalence Classes In this section we .rst de.ne the notion of residual of a redex \nalong an equation, so that we will be able to trace redexes along .~ lsub -derivations. We then show \nthat the notion of residual de.ned in Section 3 is well-de.ned w.r.t equivalence classes, i.e. 1) the \nresidual relation yields a unique bijection between two redexes in the same ~-equivalence class and 2) \nresiduals of rewriting steps lift to ~-equivalence classes. The labeled graphical equivalence4 ~ on labeled \nterms is given by the contextual, transitive, symmetric and re.exive closure of a-conversion and the \nfollowing axioms: t[x(a)/u][y(\u00df)/v] CS t[y(\u00df)/v][x(a)/u] x /. fv(v) &#38; y /. fv(u) (.y(\u00df).t)[x(a)/u] \ns1 .y(\u00df).t[x(a)/u] y /. fv(u) (tv)[x(a)/u] s2 t[x(a)/u]v x /. fv(v) The axioms are to be understood \nin such a way that each label occurs either in both sides of the axiom or in none of them. An equational \nproof of t ~ u is a derivation tree ending in t ~ u which uses a-conversion, the axioms CS , s1 and s2 \nand the standard inference schemes expressing compatibility of ~ w.r.t. all term constructors and transitivity, \nsymmetry and re.exivity of ~. Residuals Along Equations. We now propose a notion of trace of a redex \nalong an equational proof which is similar to that used for derivations. Although the intuitive idea \nis quite natural, one needs to guarantee that this notion is independent from the particular syntactic \nproof used to show that a term t is equivalent to another term u, a property that we call well-de.nedness. \nGiven t ~ u, A . Red(t) and a /. Lab(t), we consider the la\u00adbeled equation lift(t, A, a) ~ u. The set \nof residuals of A after t ~ u, is given by A(t ~ u) := {Reda(u) | lift(t, A, a) ~ u}. Again, this de.nition \nis independent from the variant used to lift the term t. We write A(t ~ u)A ' iff A ' . A(t ~ u) and \nwe extend this notion to sets of redexes as expected, in which case we write A(t ~ u)A ', where A . Red(t) \nand A ' . Red(u). For exam\u00ad a a ' a ' a ' ple, given v = (x x )[x/y][x /y ' ] ~ (z [x /y ' ]z )[z/y] \n= v ' a a ' and B = (D[x /y ' ], (x x )[x/y], Dx a), we have B(v ~ v ) = {(D, v ' , D[x ' /y ' ]z a)}. \nWell-De.nedness. Despite the simplicity of the equivalence rela\u00adtion ~, the result of well-de.nedness \nis not as straightforward as it may seem. In principle, it could be shown by introducing proof-nets and \nshowing that the proof nets corresponding to two ~-equivalent terms s and t are identical: thus there \nis a bijection between redexes in s and redexes in t, since there is a bijection between redexes in s \n(resp t) and redexes in their proof-net representation. We prefer, however, to avoid introducing proof-nets \nhere: on one hand because they are only apparently simpler than terms, on the other hand, to resort to \na unique formalism, namely terms, to develop our ideas. Note that our equations do not duplicate/erase/rename \nlabels, so that any redex has a unique residual along the equivalence. Then well-de.nedness can be stated \nas the fact that every equational proof of t ~ u induces the same bijection of redexes. The proof 4 By \nabuse of notation we use the same symbol both for the equivalence relation on labeled and unlabeled terms. \n of this property is based on the identi.cation of three structural invariants of labeled redexes with \nrespect to the equivalence ~, it is omitted for lack of space. LEMM A 2 (Well-De.nedness). Let t, u . \nTW L s.t. t ~ u. Then there is unique bijection f : Red(t) . Red(u) s.t. f(A) = A ' iff A(t ~ u)A ' . \ndexes A and B, then either A -B or B -A. In such a case the abstract theory is quite simple. Total orders \nhave a limited descriptive power, though. Consider a head-normal form t = xuv. The left-to-right order \nforces the redexes in u to be reduced before those in v. However, it is clear that u and v cannot interact \nin any way, and consequently they could be reduced in parallel even if this parallelism is not captured \nby the left-to-right order. In other words, the left-to-right order captures d 1~ d ~ u are 2 Note that \nuniqueness guarantees that if t u and t more than the action principle. Standardization can then be re.ned \nd~ u)A ' 1 d~ u)A ' 2 by switching to a partial order. For instance, the partial tree order two derivation \ntrees of t ~ u, then A(t The last result concerns preservation of residuals by means of iff A(t . -tree \n, where A -tree B if B is a sub-term of A (so that A and B ~-equivalence classes, where below we write \nt ~f u to emphasize that f is the (unique) bijection given by Lemma 2. A LEMM A 3. Let t ~f u. Consider \nA, B . Red(t). If t . t ', then: f(A) 1. Simulation: .u ' s.t. u . u ' and '' '' 2. Same equivalence \ntarget: t ~ u , i.e. .. s.t. t ~. u , and 3. Preservation of residuals: if B(A)B ', then f(B)(f(A)).(B \n' ).  5. Abstract Standardization A standard derivation is a canonical element of a class of deriva\u00adtions, \nwhere canonicity is expressed by means of completeness: whenever t _ u then there is a standard derivation \nfrom t to u. In .-calculus, a derivation is standard if redexes are selected from left-to-right. It is \neasy to see that the right-to-left order, in\u00adstead, does not provide completeness. Consider the derivation \nt = (.x.xx)(I I ) .\u00df (I I )(I I ) .\u00df I(I I ): it reduces both redexes in t, but it can only be obtained \nby reducing these redexes according to a left-to-right order, as the right-to-left order would instead \ngive (.x.xx)(I I ) .\u00df (.x.xx)I .\u00df I I . The left-to-right orientation is speci.c to the .-calculus and \nmay not be appropriate for other term rewriting systems, as for example the .rst-order TRS contain\u00ading \nthe unique rewriting rule f (x, a) . x. The abstract theory of standardization then replaces the left-to-right \norder with an abstract order -, capturing what we call the action principle. The Action Principle. Let \nus introduce two crucial concepts. Firstly, reduction of a redex A may directly act on another re\u00addex \nB (i.e. duplicate/erase it). For example in .-calculus, if t = (.x.xx)(I I ) .\u00df (I I )(I I ), then reduction \nof the leftmost redex A in t duplicates the redex B = I I . Secondly, reduction of a redex A may indirectly \nact on a redex B by 1) creating a new redex C that may directly (or indirectly act) on (a residual of) \nB, or 2) changing the set of redexes that can act on B or on which B can act. An ex\u00adample of the .rst \ncase: if t = (.x.x(I I ))M .\u00df M(I I ), where M = .x.xx, then reduction of the leftmost redex A in t indirectly \nacts on the redex B = I I by creating the redex M(I I ) which can duplicate (the residual of) B. An example \nof the second case will be given at the end of Section 8. Standard derivations are de.ned abstractly \naccording to the ac\u00adtion principle: for every redex A, reduction of A forbids future reductions of redexes \nwhich may have acted (directly or indirectly) on A before. The nesting order -essentially has to induce \nthis prin\u00adciple by capturing as much action as possible (we will see that \u00adhas to capture direct action, \nwhile in general it might capture only some cases of indirect action). The abstract theory of standardiza\u00adtion \nre-organizes derivations according to the action principle, re\u00adlying on some axioms about the interaction \nbetween the nesting order and residuals. Then, whenever the axioms are satis.ed, the standardization \ntheorem follows: an abstract reasoning proves that --ordered derivations are complete [19, 30, 32]. Total \nand Partial Orders. The left-to-right order has a fundamen\u00adtal property, it is a total order, i.e. given \ntwo coinitial different re\u00adare unrelated if B is to the right of A), captures the parallelism of redexes \nin t and admits a standardization theorem [30, 32]. The abstract theory of standardization for partial \norders is more sophisticated, so for the moment we stay with total orders and shall return to partial \norders in Section 7. In the rest of this section we introduce the necessary notions to deal with the \nabstract standardization theorem for total orders. In Section 6 we will adapt the left-to-right order \nto the .lsub -calculus and obtain a left-to-right standardization theorem. From Section 7 to the end \nof the paper, we will motivate and study a relaxed variant of this order, introducing the framework for \npartial orders and prove a more general standardization theorem for the .~ lsub -calculus. The Abstract \nTheory. In this paper we resort to the abstract framework developed by Gonthier, L\u00b4es in [19], but evy, \nand Melli`we adopt the more general formulation given by Melli` es in his PhD thesis [32], as the axioms \nin [19] will not work when we shall later relax the left-to-right order. The framework is based on Abstract \nRewrite Systems (ARS), a general formalism encompassing .rst and higher-order rewriting, plus a residual \nrelation ( ) and a par\u00adtial order -on redexes, verifying some axioms. The axioms are divided into two \ngroups: The basic axioms, which guarantee a well\u00adbehaved theory of residuals, and the standardization \naxioms, which concern the interaction of the order with the residual relation. To formally de.ne the \naxioms we introduce the following no\u00adtion. An Abstract Rewrite System (ARS) is a tuple of the form (O, \nR, Src( ), Tgt( ), ( ) , -) where O is called the set of objects, R is called the set of redexes , Src( \n) and Tgt( ) are functions from redexes to objects that we call source and target functions (resp.), \n( ) is a family of binary relations indexed by the set of redexes that we call the residual relation \nand -is a partial order on redexes. We say that two redexes A and B are coinitial if Src(A) = t = Src(B) \nfor some term t. Note that the .lsub \u00adcalculus may be seen as an ARS where O is the set of terms T de.ned \nin Section 2, whereas the .~ lsub -calculus is an ARS where O is the set of ~-equivalence classes generated \nby T modulo the graphical equivalence ~. The basic axioms are5: Autoerasure (AE). For any redex A, A(A) \n= \u00d8.  Finite residuals (FR). Let A, B be coinitial redexes. Then the set {C | A(B)C} is .nite.  Uniqueness \nof ancestors (UA). Let A, B, C be coinitial redexes. Then, B(A)B ' and C(A)C ' and B ' = C ' imply B \n= C.  Finite Developments (FD). Let A be a set of coinitial re\u00addexes. Then any development of A terminates. \n Semantic Orthogonality (SO). Let A, B be coinitial re\u00addexes. Then Tgt(B(A)) = Tgt(A(B)) and the relations \n(A; B(A)) and (B; A(B)) are exactly the same, where A; B(A)  5 In [32] Autoerasure is called A, Finite \nresiduals is called B, Unique\u00adness of ancestors is called D, and Semantic Orthogonality is called PERM. \n is the derivation that contracts A and then develops B(A); like\u00adwise for B; A(B) (cf. end of Sec. 3). \nWe consider two standardization axioms: Linearity. Let A and B be coinitial redexes s.t. A . B. Then \n.!B ' s.t. B(A)B ' .  Context-freeness. Let A, B, C be coinitial redexes s.t. B(A)B ' and C(A)C '. If \nA -C then (B -C . B ' -C ' ).  The linearity axiom captures direct action: if A does not nest B then \nit cannot directly act (i.e. duplicate/erase) on B, and so B has exactly one residual after A. The context-freeness \naxiom forbids a form of indirect action of the second kind: whenever A cannot act on C (i.e. A -C) then \nit cannot grant or remove the power to act on C to any other coinitial redex. A derivation d : t _ u \nis said to be obtained from a derivation e : t _ u by a standardizing permutation, written e . d (noted \nd.e in [32]), if d is obtained from e by swapping two consecutive redexes which form an inversion w.r.t. \n-in d; more precisely, e . d if e = f; B; A ' ; g and d = f; A; h; g, and A -B, where A(B)A ' and h develops \nB(A). We also say that d is more standard than e. The classic notion of L\u00b4 evy s permutation equivalence \non derivations, adapted to total orders, can be seen as the equivalence generated by standardization, \nindeed d : t _ u is permutation equivalent to e : t _ u, written d = e, iff d(. . .-1) * e. In the sequel \nwe write =-when we wish to emphasize the underlying order -. A derivation d is standard if it is a .-normal \nform. The standardization theorem then follows by specializing Thm. 4.7 in [32] to total orders: TH EO \nR E M 1 (Abstract Total Standardization). Consider any ARS equipped with a total order -and satisfying \nthe basic and the standardization axioms. Then for any derivation d : t _ u there exists a standard derivation \ne : t _ u such that d .* e. 6. The Left-to-Right Standardization Theorem In this section we prove a standardization \ntheorem for the .lsub \u00adcalculus relative to a total order. This result is an extension of the left-to-right \nstandardization theorem for .-calculus. The Left-to-Right Order. Given two redexes A and B in t we say \nthat A is left-to-right nesting or on the left of B, written A -L B, if the anchor of A is to the left \nof the anchor of B (looking at t as a string of symbols). Clearly, -L is a total order so that A -L B \nand A A. = B imply B -L In order to prove standardization for the .lsub -calculus by means of Theorem \n1 we need to verify the basic and the stan\u00addardization axioms. Basic Axioms. The .rst three basic axioms \nare trivially true. By using (well-)labeled terms to trace residuals we can prove the .nite development \naxiom. PRO P O S IT IO N 1 (FD). Let t . T and let A . Red(t). Then any .lsub -development of A terminates. \nProof. Consider any t . T and lift every redex in A . Red(t) with a different label belonging to some \narbitrary set L. It is clear that the resulting term is a well-labeled term. Now, let us consider S a \nthe labeled reduction relation .L:= a.L .. To prove the (FD) property it is suf.cient to show that the \nreduction relation .L terminates on well-labeled terms. Termination is proved by means of a measure that \nstrictly decreases with every reduction step (similar to that one used in the proof of Lemma 2 in [6]). \nThe next proposition proves the semantical orthogonality prop\u00aderty for .lsub , that is expressed as a \nform of local con.uence for the labeled system. Again we resort to well-labeled terms. PRO P O S ITI \nO N 2 (SO). The .lsub -calculus endowed with the left\u00adto-right order satis.es Semantic Orthogonality. \nProof. The proof uses well-labeled terms to trace residuals in such a way that axiom (SO) can be reformulated \nas follows: a. The reduction relations . and . locally commute, i.e. if a. t, u1, u2 . TW L , t . u1 \nand t . u2 then there exists v s.t. . a u1 _ v and u2 _ v. This alternative statement can be proved by \ninduction on the a. relations . and .. Standardization Axioms. Totality of the order -L provides very \nsimple proofs of these axioms: PRO P O S ITI O N 3. The .lsub -calculus endowed with the left-to-right \norder satis.es Linearity and Context-freeness. Proof. Linearity. By totality of -L , we have to show \nthat if B -L A in t then .!B ' s.t. B(A)B '. Now, if A is a db-redex this is obvious, as no redex is \nduplicated/erased by a db-step. If A is a {gc, ls}-redex then it can only act on redexes whose anchor \nis in its box, i.e. on redexes on its right, and thus not on B. Context-freeness. If A -L C then C -L \nA. Assume B -L C (and so B -L C -L A). Then, A is on the right of both B and C. It is easily seen that \nA can only change the order between redexes on its right; consequently B ' -L C '. The other direction \nis by contraposition. Assume B -L C, that is C -L B. We have to prove that B ' -L C ' , i.e. C ' -L B \n'. There are two cases. If C -L B -L A then we reason as in the previous direction, getting C ' -L B \n'. Otherwise, we have C -L A -L B. Now, the only case that is not immediate is when A is a ls-step. It \nis enough to observe that a ls-step can only move the redexes in its box at most where the step itself \nwas; hence, B ' can at most be where A was (while the position of C is left unchanged), and so C ' -L \nB ' . We can then conclude with our .rst standardization theorem: CO RO LLARY 1 (Left-to-right Standardization \nfor .lsub ). If t u then there is a -L -standard .lsub -derivation from t to _.lsub u. Proof. It follows \nfrom Theorem 1, whose hypothesis are given by Propositions 2, 1, and 3 (the .rst three basic axioms are \nimme\u00addiately seen to hold). 7. Towards Equational Standardization Proof-Nets. The linear substitution \ncalculus has been designed to mimic the representation of .-calculus in linear logic proof\u00adnets [18], \nwhere \u00df-reduction is decomposed into small steps. The relationship between the two formalisms occurs \nat the static and the dynamic levels: every term can be mapped to a proof-net, and every proof-net can \nbe mapped to an ~-equivalence class of terms, as de.ned in Section 2. Moreover, there is a bijection \nf between the redexes of a term t and the redexes of its corresponding proof-net P Nt which induces a \nstrong bisimulation between terms and proof\u00adnets: if t ..lsub u by reducing a redex A, then P Nt .P N \nP Nu by reducing f(A), and if P Nt .P N R then there exists a term u s.t. t . u and R = P Nu. The graphical \nequivalence ~ introduced in Section 2 then inher\u00adits a remarkably strong property: it is a strong bisimulation \nbetween .lsub and itself, i.e. t ~ u . v implies that . r s.t. t . r ~ v (the proof is similar to that \nof the structural .-calculus [6]). It, moreover, induces a bijection of redexes, and so it is possible \nto mimic deriva\u00adtions via ~ as follows: given a derivation d : t .n u and a term  ' '' t ~ t we can \nunambiguously refer to the projection d ' : t .n u (with u ' ~ u) of d on t ' . Since d and d ' essentially \nreduce the same redexes at each step, one expects any reasonable notion of standard\u00adization to apply \nwithout distinction to both derivations in the sense that either both are standard or none of them is. \nThis would im\u00adply, in particular, that our standardization theorem for .lsub (Corol\u00adlary 1) also applies \nto proof-nets. Unfortunately, the left-to-right order does not meet this requirement. Indeed, a left-to-right \nderiva\u00adtion for t[x/u][y/v] (where y /. fv(u)) does not project to a left-to\u00adright derivation for t[y/v][x/u], \nobtained by applying the equation t[x/u][y/v] ~CS t[x/u][y/v]. Relaxing the Order. We are therefore going \nto relax the total left-to-right order -L to a partial order -B that will be stable by ~. The de.nition \nof -B shall be guided by the action principle. Because of the linearity axiom, it is mandatory that -B \ncaptures direct action between redexes. For that, a simple diagrammatic intuition, due to Klop [26] and \nthen explored by Melli`es [30], turns out to be extremely helpful. The idea relies on the analysis of \nlocal con.uence diagrams. Whenever a redex is duplicated (resp. erased), then the standard derivation \nshould be the longest (resp. shortest) side of the diagram. Consider for example the diagram in Fig.1-a. \nThe standard way to get from the source to the sink of the diagram is the longest (i.e. down-below) side, \nbecause the ls\u00adredex acts on (i.e. nests) the redexes in s 6 . The standard derivation associated to \nthe diagram in Fig.1-b which is an erasing case is instead the shortest side, because the erasing redex \nacts on the redexes in s. The previous two cases are just reformulations of similar cases in .-calculus, \nand amount to what can be described as nesting as subterms. The novelty of .lsub is that direct action \n(and then nesting of redexes) can also happen at a distance. Consider now the example of the diagram \nin Fig.1-c. The duplicated ls-redex on y is not syntactically contained in the acting ls-redex on x. \nWorse, the same diagram applies to terms like (x[x/y]yz)[y/z], where [x/y] and [y/z] are no longer next \nto each other. According to the action principle, our order has to impose that the ls-redex on x nests \nthe ls-redex on y so that the standard side of the diagram is the longest one. Diagram in Fig.1-d is \nthe version at a distance of the erasing diagram, requiring the same notion of nesting at a distance. \nAll these intuitions lead to the partial order of the next section, that will be used in Section 8 to \nshow standardization of the .~ lsub -calculus. 8. The Box Standardization Theorem We now generalize the \nnotions introduced in Section 5 to the partial box order, and then prove the standardization theorem \nfor the .~ lsub -calculus with respect to this order. The Box Order. Let A, B . Red(t). Then, A immediately \nboxes B, noted A -1 B B if the anchor of B (i.e. the variable possibly carrying a label) is in the box \nof A, i.e. if the pattern of A is any of (.x.t)Lu, C[ x]][x/u] or t[x/u], then the anchor of B appears \nin u.  A boxes B, noted A -B B if A(-1 B )+B (we use A .B B for A(-B 1) * B);  A and B are disjoint, \nnoted A I B, if A B B and B B A.  6 Remark that otherwise one would lose completeness, as there would \nnot be any standard derivation from C[ x]][x/s] to the term C[ s ' ]][x/s], which is the intermediate \nterm in the sequence C[ x]][x/s] .. C[ s ' ]][x/s ' ] Note that A -B B implies A -L B. Additionally, \nnote the tran\u00adsitive closure in the de.nition of -B unnecessary for -L which impacts on the proofs of \nthe standardization axioms for -B . The key property of the box order is that it is stable by the equivalence \n~. For example, for t[x/u][y/v] with y /. fv(u) the redexes in u and the redexes in v are not related \nby -B , so that -B is stable by the permuting axiom t[y/v][x/u] ~CS t[x/u][y/v] (where y ./fv(u) &#38; \nx ./fv(v)). More precisely, given s ~ t, the bijection between Red(s) and Red(t) de.ned in Section 4 \nis order-preserving. To show this property it is suf.cient to remark that symbols inside boxes never \ngo in/out these boxes by means of the equivalence relation. Thus, we get: LEMMA 4 (Preservation of the \nBox Order by Equivalence). Let t, u . T s.t. t ~f u, where f is the bijection speci.ed in Lemma 2. Then, \nf commutes with -B , i.e. A -B B iff f(A) -B f(B). Several remarks on -B are in order: 1. Disjoint redexes \nmay superpose: A I B does not necessarily imply that A and B are syntactically disjoint. Examples: the \nre\u00addexes Aa and B\u00df are disjoint but 1) syntactically superposed in a\u00df \u00df (x x )[x/y], and 2) syntactically \nnested in (.za .x [x/z])y. However, disjoint redexes always strongly locally commute in a. the following \nsense: if t0 . t1 and t0 . t2 then there exists . a t3 s.t. t1 . t3 and t2 . t3. Note that this is just \na particular case of axiom (SO) where the diagram can be closed by using just one reduction step from \nti to t3. 2. Indirect action: the box order fails to capture indirect action, in the sense that A I B \nimplies that A cannot directly act on B but it can still indirectly act on it (and viceversa). For example, \nin the following derivation Aa I B\u00df and Aa creates a redex that can act on B\u00df : a\u00dfa\u00df x [x/.y.y]((.z.z)u) \n.ls (.y.y)[x/.y.y]((.z.z)u) This apparently odd fact that is not speci.c to the box order will not forbid \nthe standardization theorem. Its consequences, and an easy way to deal with them, will be discussed in \nSection 10. Note that by de.nition the box order is the minimum stan\u00addardization order, in the sense \nthat it is the transitive closure of the relation capturing direct action only. 3. The order on .-terms: \nin [30] (pp. 74-75) Melli` es considers three orders on .-terms, the left-to-right order plus two re.ne\u00adments \ncalled the tree and the argument order. When restricted to .-terms, our order coincides with the argument \norder. 4. Linear logic interpretation: we explained that there are two kinds of nesting in .lsub , namely, \nsubterm nesting and nesting at a distance. In the de.nition of the box order they are both captured by \nthe notion of immediately boxes. In terms of proof\u00adnets, however, they have different interpretations, \ndespite they are both related to the concept of exponential box7 .  Standardization Up to Square Equivalence. \nA consequence of switching to partial orders is that the notion of standard derivation has to be re.ned. \nIn fact, partial orders force to work modulo the exchanges of disjoint redexes, even to simply de.ne \nwhat is an or\u00addered (i.e. standard) sequence; this is why abstract standardization is a form of rewriting \nmodulo. Standardizing permutations are de.ned as in Section 5. How\u00adever, to deal with disjoint redexes \nand adequately represent their 7 A subterm nests B when B is contained in the !-box of A, while A nests \nB at a distance when the cut corresponding to B crosses an auxiliary conclusion of the box of A.  ' \n ' C[ x]][x/s] t[x/s'] x[x/y][y/z] x[x/z][y/z] x[x/y][y/z] C[ x]][x/s'] t[x/s] x[x/z][y/z] a) b) \nc) d)  ' C[ s]][x/s] z[x/z][y/z] x[y/z] C[ s]][x/s'] t y[x/y][y/z] Figure 1. Some standardization \ndiagrams. parallelism induced by the partial order, a new concept is necessary. A derivation d is said \nto be obtained from a derivation e by square permutation, written d.1 e, if d = f; A; B ' ; g and e = \nf; B; A ' ; g and A I B, where A(B)A ' and B(A)B ' . We write . for the equiv\u00adalence relation generated \nby .1 , and call it square equivalence. We use . for the relation modulo . and we generalize the -1) \n* permutation equivalence relation =-as ( . . . . A derivation d is standard if it is a -normal form \nmodulo .. The standardization theorem (Thm. 4.7 in [32]) then follows: THEOREM 2 (Abstract Partial Standardization). \nConsider any ARS equipped with a partial order that enjoys the basic and the standardization axioms. \nThen for every derivation d there exists a standard derivation e s.t. d * . e. Results. Our goal is to \nprove a standardization theorem for .~ lsub relative to -B . The proof consists in .rst obtaining the \ntheorem for .lsub and then lifting it to .~ lsub . The basic axioms do not mention the order, and thus \nthey still hold for .lsub . The standardization axioms are proved by the fol\u00adlowing proposition: PROPOSITION \n4. The .lsub -calculus endowed with the box order -B satis.es Linearity and Context-freeness. Proof. \nLinearity is easy, by just remarking that a redex B can be duplicated or erased by A only if its anchor \nis in the box of A, case in which A -B B. Context-freeness requires a detailed study of the interaction \nbetween the box order -B and the reduction relation. In particular the proof is involved due to the transitive \nclause de.ning the box order, and it is omitted for lack of space. Then, the previous proposition and \nTheorem 2 give: COROLLARY 2 (Box Standardization for .lsub ). If t u _.lsub then there exists a -B -standard \n.lsub -derivation from t to u. In order to lift the previous result to .~ we use the results on lsub \nequivalence classes developed in Section 4. PROPOSITION 5. The .~ lsub -calculus endowed with the box \norder -B satis.es the basic and the standardization axioms. Proof. By Lemma 3 and Lemma 4 the notion \nof residual and the box order lift to ~-equivalence classes preserving their properties. Moreover, the \nFD axiom can be shown exactly as done for .lsub in Proposition 1, by means of a measure that strictly \ndecreases with every reduction step and remains equal for every pair of equivalent pairs. Therefore, \nall axioms hold for .~ and we can conclude. lsub Proposition 5 allows to apply Theorem 2 again and .nally \nobtain our nonstandard, equational standardization theorem. COROLLARY 3 (Box Standardization for .~ ). \nIf t _.~ u lsub then there is a -B -standard .~ lsub lsub -derivation from t to u. The next section will \nstrengthen the result by showing unique\u00adness (modulo .) of the obtained standard derivation. We conclude \nthis section with a remark. Redex Order Existence Uniqueness .lsub Total, left-to-right (Sec. 6) Thm. \n1 Thm. 3 .lsub Partial, box (Sec. 8) Cor. 2 Thm. 4 .~ lsub Partial, box (Sec. 8) Cor. 3 Thm. 5 Figure \n2. Summary of results on standardization Variation on the Context-Freeness Axiom. We use in this paper \nContext-freeness as it appears in Melli`es s thesis [32]. In GLM s theory [19], however, the axiom appears \nin a stronger, symmetric form which does not hold for .lsub . Indeed, Strong context-freeness. Let A, \nB, C be coinitial redexes s.t. B(A)B ' and C(A)C ' . If A -C then ((B -C . B ' -C ' ) and (C -B . C ' \n-B ' )). Consider t = (.xa .y . [y/x])(z \u00df[z/u]), where Aa I C. , C. I B\u00df, and Aa -B B\u00df . The reduction \nstep of the redex Aa yields ' B ' the term y . [y/x][x/(z \u00df [z/u]], where C. -B \u00df , contradicting the \nstrong form of the axiom (but not the weaker one we use) and providing an example of the second kind \nof indirect action, as Aa changes who can act on (the residual of) B\u00df . 9. Uniqueness The standardization \nresults obtained up to now concern the ex\u00adistence of a standard derivation. In this section the theorems \nare strengthened by proving uniqueness of such derivations. We .rst discuss the simple case of the left-to-right \norder, and then provide an original proof of uniqueness (modulo) for the box order. The axiomatic theory \nin Mellies thesis provides uniqueness of standard derivations when two further axioms, Enclave and Stability, \nhold (Theorem 4.5 in [32]). Axiom Enclave has two parts. Let A, B, B ' be coinitial redexes s.t. B(A)B \n' . 1. Creation: If B -A and A creates a redex C, then B ' -C. 2. Nesting: Let C, C ' be redexes. If \nB -A -C and C(A)C ' , then B ' -C ' .  In terms of the action principle Enclave forbids yet another \nform of indirect action: if B can directly act on A then A cannot indirectly act on B. Consider the creation \npart: if C -B ' or C I B ' then C may act on B ' , and so A would indirectly act on B ; similarly for \nthe nesting part. PROPOSITION 6. The .lsub -calculus endowed with the left-to-right order -L satis.es \nEnclave. Proof. Creation: a simple inspection of the cases of creation (Section 3) shows that a redex \nA can create a redex C only on its right or at most where it was, so that C cannot nest any redex that \nwas on the left of A. Nesting: similarly, it is easily seen that A can only move redexes on its right \nand at most where it was. In the case of a total standardization order the axiom Stability disappears, \nbecause its statement (see [32]) assumes two --disjoint redexes. Thus, by applying Melli` es theorem \nwe obtain:  TH EO R E M 3 (Uniqueness for .lsub ). If t u then there _.lsub exists a unique -L -standard \n.lsub -derivation from t to u. Switching to partial orders, uniqueness is necessarily relaxed to uniqueness \nmodulo . (as standard derivations are de.ned up to .). Interestingly, for the partial box order both \npoints of Enclave fail for .lsub . For creation consider the step: \u00df a ' ' a\u00df ' s = ((.x.x)(y[z /z ]))[z \n/u] . ((.x.x)y)[z /u] = t Let us call Aa and B\u00df the two labeled redexes in s, and B\u00df ' (resp. C) the \nresidual of B\u00df (resp. the created gc-redex on z ') in t. We have B\u00df -B Aa but B\u00df' -B C. For nesting it \nis enough to consider a redex C inside u in the counter-example for creation. So the box order does not \ncapture the indirect action expressed by Enclave, and Mellies axiomatics cannot provide uniqueness modulo \n. for .~ lsub . However, we can obtain it via another argu\u00adment. In particular, our alternative proof \nshows that Enclave (to\u00adgether with Stability) is a suf.cient but by no means necessary condition for \nuniqueness. We .rst show uniqueness modulo . for .lsub , and then lift this result to .~ lsub . TH EO \nR E M 4 (Uniqueness Modulo for .lsub ). If t u then _.lsub there exists a -B -standard .lsub -derivation \nfrom t to u that is unique modulo .. Proof. (Sketch) Let e be the -B -standard .lsub -derivation given \nby Corollary 2 and f be the unique -L -standard derivation given by Corollary 1. We prove that e.f, from \nwhich the statement follows. Consider the leftmost contracted redex C in e = B1; . . . ; Bn (i.e. the \nleftmost redex in {A . Red(t) | A(B1; . . . ; Bi)Bi+1, 0 = i < n}) and let e ' be C; e1; e2 where e1 \n= (B1; . . . ; Bi)(C) and C(B1; . . . ; Bi)Bi+1 and e2 = Bi+2; . . . ; Bn. It is not dif.cult to prove, \ngiven that e is -B -standard, that e '.e, |e1| = i and so |e1; e2| = |e| - 1, where |e| denotes the number \nof steps in e. By induction hypothesis we obtain a -L -standard derivation f '  s.t. f '.(e1; e2). \nTherefore C; f ' is also -L -standard and moreover (C; f ' ).(C; e1; e2).e. Thm. 3 implies C; f ' = f. \nNote that the proof does not depend concretely on .~ lsub , but only on the fact that -B can be embedded \nin a total order admitting a standardization theorem, which is a fully abstract argument. By exploiting \nagain the results on equivalence classes, we obtain the strongest result of the paper: TH EO R E M 5 \n(Uniqueness Modulo for .~ ). If t _.~ u then lsub lsub there exists a -B -standard .~ -derivation from \nt to u that is lsub unique modulo .. Proof. By Lemma 3 and Theorem 4 using the stability of the -B -order \nby the equivalence ~ given by Lemma 4. 10. External Redexes, Coinductively When the nesting order -is \ntotal, standardization is relatively easy, because a derivation d : t _ u may be standardized by simply \nselecting the minimum redex A among the redexes in t that are reduced in d and then repeating the process \nfor the residual of this derivation after A. However, when the order is partial as our box order, and \nmore generally in Gonthier-Levy-Melli `es approach there may be many --minimal redexes among the redexes \nin t that are reduced in d; and randomly selecting one of them does not necessarily produce a standard \nderivation. This is due to the fact that the partial box order as it is usually the case with partial \norders fails to properly capture indirect action. Indeed, even if two minimal redexes A and B are necessarily \ndisjoint, A may create a redex which will nest (a residual of) B. We illustrate this situation in the \nsimpler setting of the .\u00adcalculus using the box order (called argument order by Melli` es in [30]). Let \nIa stand for .xa .x and Aa for Ia I (and similarly for B\u00df). Consider the derivation: \u00df a (Ia I) (I\u00df I) \n.\u00df (Ia I) I .\u00df I I .\u00df I Note that both Aa and B\u00df are minimal in the initial term, and the derivation \npicks at every step a minimal redex. However, the derivation d is not standard. This can be seen by permuting \nAa and B\u00df, which yields the following .-equivalent derivation, where the two last steps form an inversion \nfor the box order: a\u00df (Ia I) (I\u00df I) .\u00df I (I\u00df I) .\u00df I I .\u00df I A standardizing permutation swapping them \nproduces the follow\u00ading standard derivation: a \u00df (Ia I) (I\u00df I) .\u00df I (I\u00df I) .\u00df (I\u00df I) .\u00df I This example \nshows that selecting mimimal redexes does not nec\u00adessarily give standard derivations when the order is \npartial. A sim\u00adilar example in .lsub is obtained by considering the derivations of x a[x/.y.y]((.z\u00df .z)u). \nThe solution to this problem is to select an external redex [8, 10, 19, 21, 28, 32, 38, 39], i.e. a minimal \none on which no other redex can indirectly act. The de.nition of external redex for a derivation in GLM \ns theory is given via an extraction process. In particular, the de.nition mentions the nesting order \nonly indirectly. Alterna\u00adtively, external redexes can be de.ned coinductively as persistently minimal \nredexes, as hinted in [38], i.e. the minimal redexes whose (unique) residual after any other redex is \nstill persistently minimal. We .rst recall the de.nition of external redex from [32], that re\u00adquires \ntwo preliminary de.nitions. A redex A traverses a coinitial d derivation d becoming B, written A -. B, \niff: . For d = E, A -. B iff B = A. C;e e For d = C; e, A -. B iff C A and A ' -. B, where A(C)A ' . \nA redex A in t can be extracted from a derivation d : t _ u, written A n d, if there exist d1, d2 s.t. \nd = d1; A ' ; d2 and d1 A -. A ' . A redex A in t is external for d : t _ u if A . Ext-(d) := {B | .e \n=-d . B n e}. The following result corresponds to Lemma 4.36 in [32]. LEM M A 5 (External Gives Standard). \nConsider any ARS equipped with a partial order -that enjoys the basic and the standardization axioms. \nIf d = A1; . . . ; An and Ai . Ext-(Ai; . . . ; An) (1 = i = n), then d is --standard. External redexes \ngeneralize leftmost redexes in .-calculus, whose key properties are 1) no other redex can act on it, \nand 2) its unique residual after any other redex is still the leftmost redex. This suggests to de.ne \nexternal redexes coinductively as follows. Let d : t _ u be a derivation. The set of starting redexes \nof d is d1 := {B | .e s.t. d =-B; e}. A redex A in t is --external for d if d is not empty and: 1. Minimality: \nA is minimal in d1, and 2. Persistency: whenever d =-B; e and A(B)A ' (A ' is unique by minimality), \nthen A ' is --external in e.  The next two technical lemmas are used to relate the two notions of externality. \nTheir proofs are easy: LEM M A 6. Let A be --external for d. Then: 1. A n d, and 2. If e =-d then e \n1 = d1 and A is --external for e.  e LEM M A 7. Let A n d, i.e. d = e; A ' ; f and A -. A '. Then: \n 1. There exists g s.t. d =-A; g. 2. If d = B; d ' (with B = A) then B A and if A(B)A '' then  A '' \nd ' n . We conclude the section with the equivalence of the two notions of external redex. PROPOSITION \n7. A is --external for d iff A . Ext-(d). Proof. .) Let e =-d. Lemma 6.2 implies that A is --external \nfor e, and Lemma 6.1 gives A n e, i.e. A . Ext-(d). .) By coinduction on the de.nition of --external. \nA . Ext-(d) implies A n d so that Lemma 7.1 gives A . d1 . Let B . d1 so that d =-B; e and A n B; e. \nIf B = A then Lemma 7.2 gives B A, that implies A minimal in d1 , and A '' n e if A(B)A '' . Thus, A \n'' . Ext-(e). By the coinductive hypothesis A '' is -\u00adexternal for e, and thus A is --external for d. \n11. Applications In this section we apply the new characterization of external re\u00addexes to obtain a normalization \ntheorem, and to prove that (weak) linear head reduction is standard. A Normalizing Strategy for .lsub \nand .~ Using the coinduc\u00ad lsub . tive reformulation of external redexes, we can now provide an easy proof \nthat the leftmost strategy, which always reduces the leftmost redex, is normalizing for .lsub and .~ \nlsub , i.e. it reaches a normal form, if any. Let us say that a redex A is universally --external, i.e. \nexternal with respect to any reduction step (and thus wrt any derivation), when the following holds: \n1. Universal minimality: A is --minimal in Red(t). 2. Universal persistency: for any B . Red(t), if \nA(B)A ' then A ' is universally --external.  THEOREM 6 (Normalization). 1. The leftmost redex is universally \n-L -external .lsub . 2. The leftmost strategy is normalizing for .lsub and .~  lsub . Proof. 1) By \ncoinduction. Left-to-right order: the leftmost redex is -L -minimum and by the Enclave axiom for -L (Proposition \n6) its residual after any other redex is still minimum and thus leftmost. We conclude using the coinductive \nhypothesis. 2) For .lsub it follows by Theorem 5.2 in Mellies thesis [32] (p. 137, formulating abstractly \nan argument by Huet and L\u00b4evy [22]), stating that any strategy reducing -L -external redexes is normalizing. \nFor .~ lsub , let t be a term having an .~ lsub -normal form. Since ~ can be postponed (cfr. Lemma 3) \nand it is the identity on normal forms, then t has also a normal form in .lsub . The leftmost strategy \n.lsub \u00adnormalizes t. Since .lsub lsub , then the leftmost strategy also . .~ .~ lsub -normalizes t. Weak \nLinear Head Reduction is Standard. The leftmost strategy captures a relevant strategy in the theory of \nlinear logic, the weak (i.e. not under abstractions) variant of linear head reduction. To introduce such \na notion let us .rst de.ne weak head contexts by the grammar W := D | W t | W [x/t]. Weak linear head \nreduction (WLHR) .W is de.ned as the closure under weak head contexts of the rewriting rules { .db , \n.Wls }, where .Wls is the following variation on .ls : W [ x]][x/u] .Wls W [ u]][x/u] Alternatively, \n.W can be de.ned as the rewriting relation reducing only the {dB, ls}-redexes whose anchor is in a weak \nhead context. This notion of reduction is deterministic and tightly related to the p-calculus [3] and \nKrivine Abstract Machine [7, 14]. PROPOSITION 8 (Weak Linear Head Reduction is Standard). 1. Every term \nt . T has at most one .W redex, and if it does then it is the leftmost redex of t. 2. .W -derivations \nare -L -standard (and thus also -B -standard).  Proof. 1) By induction on t. 2) By Lemma 5 and Theorem \n6. Linear Head Reduction is Standard. The head strategy for .lsub historically arose as a special proof-nets \nstrategy8 [29]. Given the behavioral equivalence between .lsub and proof-nets, it can be easily expressed \nin our setting. For that, let us intro\u00adduce the set of head contexts, that are generated by the grammar \nH ::= D | .x.H | H t | H[x/t]. Linear head reduction (LHR) .H is de.ned as the closure under head contexts \nof the rewriting rules { .db , .Hls }, where .Hls is the following variation of the rewriting rule .ls \n: H[ x]][x/u] .Hls H[ u]][x/u] Alternatively, .H can be de.ned as the rewriting relation reducing only \nthe {dB, ls}-redexes whose anchor is inside a head context. Historically, linear head reduction has been \nde.ned on ordi\u00adnary .-terms (i.e. without explicit substitutions) [14, 29] by us\u00ading a notion of virtual \nredex (equivalent to a head-redex up to s-equivalence [36]). The alternative approach used here, already \nin use in [2, 3, 5], improves the original presentation in several aspects: there is no need to work \nwith virtual redexes, there is a one-to-one correspondence between LHR in proof-nets and LHR in .lsub \n, and LHR can be seen as a strategy of .lsub although it is not a strategy of \u00df-reduction. Moreover, \nthis presentation of LHR admits a factorization theorem, and can be easily generalized to take place \ninside arguments of terms [2]. Linear head reduction is another motivation for considering the partial \nbox order on redexes, as we now explain. A crucial point of our de.nition is that that .H in contrast \nto .W is nondeterministic, for instance we have both (.x.y[y/w])z .H (.x.w[y/w])z and (.x.y[y/w])z .H \ny[y/w][x/z]. This fact is not a drawback, rather a plus, as it faithfully mimicks the par\u00adallelism of \ncut-elimination in proof-nets. A simple case analysis shows that LHR enjoys the diamond property, i.e. \nany two steps commute and no duplication/erasure is involved. Therefore, the nondeterminism is harmless. \nIn particular, all maximal LHR deriva\u00adtions (if any) have the same length. Concerning standardization, \nhowever, not all LHR derivations are standard with respect to the left-to-right order -L , consider: \n(.x.y[y/w])z .H (.x.w[y/w])z .H w[y/w][x/z] This fact is disappointing because the nondeterminism of \nLHR is only apparent, and so one would like to consider LHR sequences as standard, without having to \nre-organize them. The box order turns LHR into a standard strategy, giving to the presentation of LHR \nwith explicit substitutions a solid status. THEOREM 7 (Linear Head Reduction is Standard). 1. Linear \nhead redexes are universally -B -external. 2. Linear head reduction is -B -standard.  Proof. 1) By \ncoinduction on the de.nition of universally -\u00adexternal. Universal minimality: the anchor of .H -redexes \nis out of all boxes, so they can never be nested by another redex. Universal persistency: it is easily \nseen that no redex can move the anchor of a .H -redex inside a box. So the residual of a .H -redex is \na .H -redex and we conclude by the coinductive hypothesis. 2) A 8 The one reducing only cuts out of all \n!-boxes that do not involve the auxiliary conclusion of any box.  universally external redex is easily \nseen to be external for every coinitial derivation. Then we conclude applying Lemma 5. 12. Conclusions \nWe study standardization for the linear substitution calculus, a cal\u00adculus with explicit substitutions, \nthat is not syntactically orthogo\u00adnal and that it is equipped with an equational theory that makes it \nisomorphic to linear logic proof-nets. Our main result is a standard\u00adization theorem, nonstandard because \nit is based on a partial rather than a total order, it lifts to equivalence classes (i.e. proof-nets), \nand it provides a notion of standard derivation which departs from the one by levels in the linear logic \nliterature. Along the way, we provided other results: 1) a theory of residu\u00adals lifting to equivalence \nclasses; 2) a simple left-to-right standard\u00adization theorem; 3) a coinductive characterization of the \nnotion of external redex; 4) a normalization theorem; 5) a simple proof that (weak) linear head reduction \nis standard. Last, we believe that a further contribution of this paper is the .ne analysis of Gonthier, \nL\u00b4es axiomatic framework, evy, and Melli`which gives new intuitions on their complex notions. Acknowledgments \nWe are grateful to Paul-Andr \u00b4e Melli`es for fruitful discussions. This work was partially funded by \nthe French-Argentinian Laboratory in Computer Science INFINIS (www.infinis.org) and by the Qatar National \nResearch Fund under grant NPRP 09-1107-1-168. References [1] M. Abadi, L. Cardelli, P. L. Curien, and \nJ.-J. L \u00b4evy. Explicit substitu\u00adtions. Journal of Functional Programming, 4(1):375 416, 1991. [2] B. \nAccattoli. An abstract factorization theorem for explicit substitu\u00adtions. In RTA, pages 6 21, 2012. [3] \nB. Accattoli. Evaluating functions as processes. In TERMGRAPH, pages 41 55, 2013. [4] B. Accattoli. Jumping \naround the box: graphical and operational studies on .-calculus and Linear Logic. PhD thesis, La Sapienza \nUniversity of Rome, february 2011. [5] B. Accattoli and U. Dal Lago. On the invariance of the unitary \ncost model for head reduction. In RTA, pages 22 37, 2012. [6] B. Accattoli and D. Kesner. The structural \n.-calculus. In CSL, pages 381 395, 2010. [7] B. Accattoli, P. Barenbaum, and D. Mazza. Distilling abstract \nma\u00adchines. Submitted, 2013. https://sites.google.com/site/ beniaminoaccattoli/machines.pdf?attredirects=0. \n[8] H. P. Barendregt, R. Kennaway, J. W. Klop, and M. R. Sleep. Needed reduction and spine strategies \nfor the lambda calculus. Information and Computation, 75(3):191 231, 1987. [9] R. Bloo and K. Rose. Preservation \nof strong normalization in named lambda calculi with explicit substitution and garbage collection. In \nComputing Science in the Netherlands, pages 62 72. Netherlands Computer Science Research Foundation, \n1995. [10] G. Boudol. Computational semantics of term rewriting systems. In Al\u00adgebraic methods in semantics, \npages 169 236. Cambridge University Press, 1986. [11] H. S. Bruggink. Equivalence of reductions in higher-order \nrewriting. PhD thesis, Utrecht University, 2008. [12] D. Clark and R. Kennaway. Some properties of non-orthogonal \nterm graph rewriting systems. In SEGRAGRA, volume 2 of ENTCS, pages 36 45, 1995. [13] H. Curry and R. \nFeys. Combinatory Logic. Number Vol. 1 in Studies in logic and the foundations of mathematics. North-Holland, \n1958. [14] V. Danos and L. Regnier. Head linear reduction, 2003. http: //iml.univ-mrs.fr/~regnier/articles/pam.ps.gz. \n[15] V. Danos, H. Herbelin, and L. Regnier. Game semantics &#38; abstract machines. In LICS, pages 394 \n405, 1996. [16] D. de Carvalho, M. Pagani, and L. Tortora de Falco. A semantic measure of the execution \ntime in linear logic. Theor. Comput. Sci., 412(20):1884 1902, 2011. [17] T. Ehrhard and L. Regnier. B\u00a8ohm \ntrees, krivine s machine and the taylor expansion of lambda-terms. In CiE, pages 186 197, 2006. [18] \nJ.-Y. Girard. Linear logic. Theoretical Computer Science, 50(1):1 101, 1987. [19] G. Gonthier, J.-J. \nL \u00b4es. An abstract standardisation evy, and P.-A. Melli `theorem. In LICS, pages 72 81, 1992. [20] G. \nHuet. Residual theory in .-calculus: A formal development. Jour\u00adnal of Functional Programming, 4(3):371 \n394, 1994. [21] G. Huet and J.-J. L \u00b4evy. Computations in orthogonal rewriting systems, I and II. In \nComputational Logic -Essays in Honor of Alan Robinson, pages 395 414, 1991. [22] G. Huet and J.-J. L \n\u00b4evy. Call by Need computations in non-ambiguous linear term rewriting systems. Technical Report 359, \nINRIA, 1979. [23] D. Kesner and S. Lengrand. Resource operators for lambda-calculus. Information and \nComputation, 205(4):419 473, 2007. \u00b4 [24] D. Kesner and S. O Conch \u00b4uir. Milner s lambda calculus with \npartial substitutions, 2008. http://www.pps.univ-paris-diderot.fr/ ~kesner/papers/shortpartial.pdf. [25] \nZ. Khasidashvili and J. R. W. Glauert. Discrete normalization and standardization in deterministic residual \nstructures. In ALP, pages 135 149, 1996. [26] J. W. Klop. Combinatory Reduction Systems. Phd thesis, \nUtrecht University, 1980. [27] J.-J. L\u00b4evy. R \u00b4eductions correctes et optimales dans le lambda-calcul. \nTh \u00b4ese d Etat, Univ. Paris VII, France, 1978. [28] L. Maranget. Optimal derivations in weak lambda-calculi \nand in orthogonal terms rewriting systems. In POPL, pages 255 269, 1991. [29] G. Mascari and M. Pedicini. \nHead linear reduction and pure proof net extraction. Theoretical Computer Science, 135(1):111 137, 1994. \n[30] P.-A. Melli`es. Axiomatic rewriting theory I: A diagrammatic standard\u00adization theorem. In Processes, \nTerms and Cycles: Steps on the Road to In.nity, volume 3838 of LNCS, pages 554 638. Springer, 2005. [31] \nP.-A. Melli `es. Axiomatic rewriting theory VI: Residual theory revis\u00adited. In RTA, pages 24 50, 2002. \n[32] P.-A. Melli`Description Abstraite de syst `e\u00b4PhDes. eme de r \u00b4ecriture. thesis, Paris 7 University, \n1996. [33] R. Milner. Local bigraphs and con.uence: Two conjectures. ENTCS, 175(3):65 73, 2007. [34] \nL. Paolini and S. Ronchi Della Rocca. Parametric parameter pass\u00ading lambda-calculus. Information and \nComputation, 189(1):87 106, 2004. [35] G. D. Plotkin. Call-by-name, call-by-value and the lambda-calculus. \nTheoretical Computer Science, 1(2):125 159, 1975. [36] L. Regnier. Une equivalence sur les lambda-termes. \n\u00b4Theoretical Computer Science, 2(126):281 292, 1994. [37] M. Takahashi. Parallel reductions in .-calculus. \nInf. Comput., 118(1): 120 127, 1995. [38] Terese. Term Rewriting Systems, volume 55 of Cambridge Tracts \nin Theoretical Computer Science. Cambridge University Press, 2003. [39] V. van Oostrom. Normalisation \nin weakly orthogonal rewriting. In RTA, pages 60 74, 1999. [40] V. van Oostrom and R. C. de Vrijer. Four \nequivalent equivalences of reductions. ENTCS, 70(6):21 61, 2002. [41] H. Xi. Upper bounds for standardizations \nand an application. Journal of Symbolic Logic, 64(1):291 303, 1999.  \n\t\t\t", "proc_id": "2535838", "abstract": "<p>Standardization is a fundamental notion for connecting programming languages and rewriting calculi. Since both programming languages and calculi rely on substitution for defining their dynamics, explicit substitutions (ES) help further close the gap between theory and practice.</p> <p>This paper focuses on standardization for the linear substitution calculus, a calculus with ES capable of mimicking reduction in lambda-calculus and linear logic proof-nets. For the latter, proof-nets can be formalized by means of a simple equational theory over the linear substitution calculus.</p> <p>Contrary to other extant calculi with ES, our system can be equipped with a residual theory in the sense of L&#233;vy, which is used to prove a left-to-right standardization theorem for the calculus with ES but without the equational theory. Such a theorem, however, does not lift from the calculus with ES to proof-nets, because the notion of left-to-right derivation is not preserved by the equational theory. We then relax the notion of left-to-right standard derivation, based on a total order on redexes, to a more liberal notion of standard derivation based on partial orders.</p> <p>Our proofs rely on Gonthier, L&#233;vy, and Melli&#232;s' axiomatic theory for standardization. However, we go beyond merely applying their framework, revisiting some of its key concepts: we obtain uniqueness (modulo) of standard derivations in an abstract way and we provide a coinductive characterization of their key abstract notion of external redex. This last point is then used to give a simple proof that linear head reduction --a nondeterministic strategy having a central role in the theory of linear logic-- is standard.</p>", "authors": [{"name": "Beniamino Accattoli", "author_profile_id": "81464672215", "affiliation": "Carnegie Mellon University, Pittsburgh, PA, USA", "person_id": "P4383927", "email_address": "beniamino.accattoli@gmail.com", "orcid_id": ""}, {"name": "Eduardo Bonelli", "author_profile_id": "81100470431", "affiliation": "Univ. Nac. de Quilmes and CONICET, Bernal, Argentina", "person_id": "P4383928", "email_address": "eabonelli@gmail.com", "orcid_id": ""}, {"name": "Delia Kesner", "author_profile_id": "81100396299", "affiliation": "Univ. Paris-Diderot, SPC, PPS, CNRS, Paris, France", "person_id": "P4383929", "email_address": "kesner@pps.univ-paris-diderot.fr", "orcid_id": ""}, {"name": "Carlos Lombardi", "author_profile_id": "86158822157", "affiliation": "Univ. Nac. de Quilmes and Univ. de Buenos Aires, Bernal, Argentina", "person_id": "P4383930", "email_address": "carlombardi@gmail.com", "orcid_id": ""}], "doi_number": "10.1145/2535838.2535886", "year": "2014", "article_id": "2535886", "conference": "POPL", "title": "A nonstandard standardization theorem", "url": "http://dl.acm.org/citation.cfm?id=2535886"}