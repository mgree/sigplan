{"article_publication_date": "10-01-2001", "fulltext": "\n A Fresh Approach to Representing Syntax with Static Binders in Functional Programming [Invited Lecture] \nAndrew M. Pitts Cambridge University Computer Laboratory Cambridge CB3 0FD, UK Andrew.Pitts@cl.cam.ac.uk \n1. ABSTRACT Tellategorytheoristsabouttheoneptofabstratsyn\u00adtaxforalanguageandtheymaysay\"that'sjusttheinitial \nalgebraforasum-of-produtsfuntorontheategoryof sets\".Despitewhatyoumightthink,theyaretryingtobe helpful,sinetheinitialitypropertyistheommondenomi\u00adnatorofbothdefnitionsbystruturalreursionandproofs \nbystruturalindution[5,Set.4.4]. Inreentyearswehavelearnedhowtoextendthisinitial algebraviewofabstratsyntaxtoenompasslanguageswith \nstatiallysopedbinders.Inthepreseneofsuhbindersone wantstoabstratawayfromthespeifnamesofbound variables,eitherbyquotientingparsetreesbyasuitable \nnotionofalpha-equivalene,orbyreplaingonventional parsetreeswithonesontainingdeBruijnindies[1].By hangingfromtheategoryofsetstootherwell-known,but \nstill'set-like'ategoriesofsheavesorpresheaves,oneanre\u00adgainaninitialalgebraviewofthisevenmorethannormally \nabstratsyntax.thepay-ofbeingnewandautomatially generatedformsofstruturalreursionandindutionthat respetalpha-equivalene[2,3]. \nOnegoodtestofthesenewideasistoseeiftheygive risetonewformsoffuntionalprogramming.Infatthey do.Thepaper[6]skethesafuntionalprogramminglan\u00adguageforrepresentingandmanipulatingsyntatialstru\u00adtureinvolvingbinders,basedonthemathematialmodelof \nvariable-bindingin[3,4].InthisML-likelanguagethere arenewformsoftypefornamesandname-bindingthat omealongwithfailitiesfordelaringfreshnames,forbind\u00adingnamesinabstrationsandforpullingapartsuhname\u00adabstrationsviapattern-mathing.Thekeyideaisthat \nproperlyabstratusesofnames,i.e.onesthatdonotde\u00adsendbelowthelevelofalpha-onversion,anbeimposed ontheuserbyastatitypesystemthatdeduesinformation \naboutthefreshnessofnames.Eventhoughweappeartobe givingusersa'gensyr'faility,thetypesystemrestritsthe \nwayitanbeusedtotheextentthatwekeepwithinefet- Permission to make digital or hard copies of all or part \nof this work for personal or classroom use is granted without fee provided that copies are not made or \ndistributed for pro.t or commercial advantage and that copies bear this notice and the full citation \non the .rst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires \nprior speci.c permission and/or a fee. ICFP 01, September 3-5, 2001, Florence, Italy. Copyright 2001 \nACM 1-58113-415-0/01/0009 ...$5.00. freefuntionalprogramming,inthesensethattheusuallaws ofpurefuntionalprogrammingremainvalid(augmented \nwithnewlawsfornamesandname-abstrations). InthistalkIwillintroduethisnewapproahtorepre\u00adsentinglanguagesstatibindersinfuntionalprogramming \nanddisusssomeofthedi\u00c6ultieswehavehadverifyingits semantiproperties.  2. REFERENCES [1]N.G.deBruijn.Lambdaalulusnotationwith \nnamelessdummies,atoolforautomatiformula manipulation,withappliationtotheChurh-Rosser theorem.Indag.Math.,34:381.392,1972. \n[2]M.P.Fiore,G.D.Plotkin,andD.Turi.Abstrat syntaxandvariablebinding.In14thAnnualSymposium onLogiinComputerSiene,pages193.202.IEEE \nComputerSoietyPress,Washington,1999. [3]M.J.GabbayandA.M.Pitts.Anewapproahto abstratsyntaxinvolvingbinders.In14thAnnual \nSymposiumonLogiinComputerSiene,pages 214.224.IEEEComputerSoietyPress,Washington, 1999. [4]M.J.GabbayandA.M.Pitts.Anewapproahto \nabstratsyntaxwithvariablebinding.FormalAspets ofComputing,2001.SpeialissueinhonourofRod Burstall.Toappear. \n[5]J.MeseguerandJ.A.Goguen.Initiality,indutionand omputability.InM.NivatandJ.C.Reynolds,editors, AlgebraiMethodsinSemantis,hapter14,pages \n459.541.CambridgeUniversityPress,1985. [6]A.M.PittsandM.J.Gabbay.Ametalanguagefor programmingwithboundnamesmodulorenaming.In \nR.BakhouseandJ.N.Oliveira,editors,Mathematis ofProgramConstrution.5thInternationalConferene, MPC2000,PontedeLima,Portugal,July2000. \nProeedings,volume1837ofLetureNotesinComputer Siene,pages230.255.Springer-Verlag,Heidelberg, 2000.  \n\t\t\t", "proc_id": "507635", "abstract": "Tell category theorists about the concept of abstract syntax for a language and they may say \"that's just the initial algebra for a sum-of-products functor on the category of sets\". Despite what you might think, they are trying to be helpful since the initiality property is the common denominator of both definitions by structural recursion and proofs by structural induction [5, Sect. 4.4]. In recent years we have learned how to extend this initial algebra view of abstract syntax to encompass languages with statically scoped binders. In the presence of such binders one wants to abstract away from the specific names of bound variables, either by quotienting parse trees by a suitable notion of alpha-equivalence, or by replacing conventional trees with ones containing de Bruijn indices [1]. By changing from the category of sets to other well-known, but still 'set-like' categories of sheaves or presheaves, one can regain an initial algebra view of this even more than normally abstract syntax---the pay-off being new and automatically generated forms of structural recursion and induction that respect alpha-equivalence [2, 3]. One good test of these new ideas is to see if they give rise to new forms of functional programming. In fact they do. The paper [6] sketches a functional programming language for representing and manipulating syntactical structure involving binders, based on the mathematical model of variable-binding in [3, 4]. In this ML-like language there are new forms of type for names and name-binding that come along with facilities for declaring fresh names, for binding names in abstractions and for pulling apart such name-abstractions via pattern-matching. The key idea is that properly abstract uses of names, i.e. ones that do not descend below the level of alpha-conversion, can be imposed on the user by a static type system that deduces information about the freshness of names. Even though we appear to be giving users a 'gensym' facility, the type system restricts the way it can be used to the extent that we keep within effect-free functional programming, in the sense that the usual laws of pure functional programming remain valid (augmented with new laws for names and name-abstractions). In this talk I will introduce this new approach to representing languages static binders in functional programming and discuss some of the difficulties we have had verifying its semantic properties.", "authors": [{"name": "Andrew M. Pitts", "author_profile_id": "81100104445", "affiliation": "Cambridge Univ. Computer Laboratory, Cambridge, UK", "person_id": "P18268", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/507635.507637", "year": "2001", "article_id": "507637", "conference": "ICFP", "title": "A fresh approach to representing syntax with static binders in functional programming", "url": "http://dl.acm.org/citation.cfm?id=507637"}