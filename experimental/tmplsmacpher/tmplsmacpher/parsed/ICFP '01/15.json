{"article_publication_date": "10-01-2001", "fulltext": "\n A Dependently Typed Assembly Language Hongwei Xi. University of Cincinnati hwxi ees.u.edu  ABSTRACT \nWepresentadependentlytypedassemblylanguage(DTAL) inwhihthetypesystemsupportstheuseofarestrited formofdependenttypes,reapingsomebeneftsofdependent \ntypesattheassemblylevel.DTALimprovesuponTAL, enablingertainimportantompileroptimizationssuhas run\u00adtimearrayboundhekeliminationandtaghekelim\u00adination.Also,DTALformallyaddressestheissueofrep\u00adresentingsumtypesatassemblylevel,makingitsuitable \nforhandlingnotonlydatatypesinMLbutalsodependent datatypesinDependentML(DML). 1. INTRODUCTION Aompilerforarealistiprogramminglanguageisoften \nlargeandomplex.Thoughitishighlydesirabletoestablish theorretnessofsuhaompiler,thereseemsnoefetive approahtoreahingthisgoalurrently.Instead,theon\u00adgoingresearhonertifyingompilersattemptstopartially \naddressthisproblemfromadiferentangle. Supposewehaveaompilerthattranslatessourepro\u00adgrameintotargetodeiei;ifepossessessomepropertyP \n(e.g.eisterminating)thatweknowieimustalsopossessif theompilerisimplementedorretly,weanthendesign theompilertoprodueaverifableertifateassertingthat \nieipossessesthepropertyP;iftheertifateissuessfully verifed,ouronfdeneintheompilerisraised;otherwise, \naompilererrorneedstobeloatedandthenfxed. InDML[1S,13],afuntionalprogramminglanguagethat supportstheuseofarestritedformofdependenttypes,a \nwell\u00adtypedprogramisbothtypesafe(whihexludes,forex\u00adamples,programsthatattempttoaddanintegertoafoat\u00adingpointnumber)andmemorysafe(whihexludesstray \nmemoryaesses).Ifweompileawell\u00adtypedprogramin DMLintosometargetodeatassemblylevel,thetarget odeshouldalsobebothtypesafeandmemorysafe.Obvi\u00adously,theimmediatequestionishowbothtypesafetyand \nmemorysafetyanbeapturedatassemblylevel.Inthis .PartiallysupportedbyNSFgrantno.CCR\u00adOOS1316 Permission \nto make digital or hard copies of all or part of this work for personal or classroom use is granted without \nfee provided that copies are not made or distributed for pro.t or commercial advantage and that copies \nbear this notice and the full citation on the .rst page. To copy otherwise, to republish, to post on \nservers or to redistribute to lists, requires prior speci.c permission and/or a fee. ICFP 01, September \n3-5, 2001, Florence, Italy. Copyright 2001 ACM 1-58113-415-0/01/0009 ...$5.00. Robert Harper Carnegie \nMellon University rwh s.ru.edu paper,weaddressthisquestionbydesigningadependently typedassemblylanguageinwhihthedependenttypesan \napturebothtypesafetyandmemorysafety. Speifapproahestoertifationinludeproof\u00adarrying ode(PCC)(adoptedinTouhstone[S])andtypesystems \n(adoptedinTIL[11]).InPCC,bothtypesafetyandmem\u00adorysafetyareexpressedby(frst\u00adorder)logiassertionsabout \nprogramvariablesandarehekedbyaverifationondi\u00adtiongeneratorandatheoremprover,andodeisthenerti\u00adfedbyanexpliitrepresentationoftheproof.InTIL,type \nsafetyisexpressedbytypeannotationsandishekedby atypehekerandnoadditionalertifationisrequired. TheTouhstoneapproahdrawsonestablishedresultsfor \nverifationoffrst\u00adorderimperativeprograms.TheTILap\u00adproahdrawsonestablishedmethodsfordesigningandim\u00adplementingtypesystems,makingitunlear(apriori)that \nitanbeextendedtolow\u00adlevellanguagesortoaountfor memorysafety. TypedAssemblyLanguage[7]isintroduedbyMorrisett \netal.,whereaformoftypesystemisdesignedatassembly\u00adlevelsuitableforompilingfuntionallanguagesandaom\u00adpilationfromSystemFtoTALisgiven.TALprovidesboth \ntypesafetyandmemorysafety,butattheostofmaking ritialinstrutionssuhasarraysubsriptingatomitoen\u00adsurememorysafety.Forinstane,eaharraysubsripting \ninstrutioninTALinvolveshekingwhetheragivenarray indexisbetweenthelowerandupperboundsofthearray beforefethingthedataitem. \nWeenrihTALtoallowformorefne\u00adgrainedontrolover memorysafetysoastosupportarrayboundhekelimina\u00adtion,hoistingboundheksoutofloops,e\u00c6ientrepresenta\u00adtionofsumtypes,et.Wedrawontheformalismofdepen\u00addenttypestoextendTALwithsuhaonept.However, \nweannotrelydiretlyonstandardsystemsofdependent types[4]forlanguageswithomputationalefets.Forin\u00adstane,itisentirelyunlearwhatitmeanstosaythatA \nisanarrayoflengthxforsomemutablevariablex:ifwe updatexwithadiferentvalue,thishangesthetypeof AbutAitselfisunhanged!Drawingonourexperiene \nwitharestritedformofdependenttypesinDML[1S],we introduealearseparationbetweenordinaryrun\u00adtimeex\u00adpressionsandadistinguishedfamilyofindexexpressions, \nlinkedbysingletontypesofformint(x):everyintegerex\u00adpressionoftypeint(x)musthavevalueequaltox.The indexexpressionsarehosenfromanintegerdomaininthis \npaper.Givenanexpressione(inDML),hekingwhether ehastypeint(x)(writtenase:int(x))involvesnon\u00adtrivial equationalreasoningabouttherun\u00adtimebehaviorofe.For \n{r:nat,n:natIr<=n} voidopy(intsr[r],intdst[n]){ var:inti,length;; length=arraysize(sr); for(i=0;i<length;i=i+1){ \ndst[i]=sr[i]; } return; } Figure1:AopyfuntioninXanadu instane,e:int(3)meansthate,whenevaluated,musteval\u00aduateto3.Clearly,3:int(3),andperhaps,1+2:int(3),but \nitis,ingeneral,undeidablewhetheranarbitrary(possibly efetful)ehastypeint(3).Thisiswheretheoremproving \nandonstraintsatisfationomesintothepiture. Itisdi\u00c6ulttoreadassemblyode.Inthefollowingpre\u00adsentation,wewilloasionallyuseprogramsinXanadu[15], \nadependentlytypedimperativelyprogramminglanguage withC\u00adlikesyntax,tofailitatethepresentationofDTAL. WeouldalsouseprogramsinDMLforthispurposebutthe \ngreatdiferenebetweenDMLandDTALwouldmakethis alternativelessdesirable.TheXanaduprograminFigure1 implementsaopyfuntiononarrays.Thefuntionheader \nintheprogramstatesthatforallnaturalnumbersmand nsatisfyingm:nthefuntiontakestwointegerarraysof sizesmandn,respetively,andreturnsnovalue.Notethat \n{r:nat,n:natIr<=n}isauniversalquantiferand intsr[r]andintdst[n] meanthatsranddstareintegerarraysofsizesmand \nn,respetively.Weusevar:tostartvariabledelaration, whihendswith;;.Furthermore,thefuntionarraysize returnsthesizeofanarray.Notethatthetypeindexris \nnotavailableatrun\u00adtimeandweusearraysizeheretoget anintegerequaltor(orliterally,anintegeroftypeint(r)). \nTheDTALodeinFigure2orrespondstotheXanadu program.Notethatr1... r5areregisters.Theinstru\u00adtionarraysizer3,r1isnon\u00adstandard,whihmeansthat \nwestoreintor3thesizeofthearraytowhihr1points. Thebranhinstrutionbgter5,finishjumpstothela\u00adbelfinishiftheintegerinr5isgreaterthanorequalto \nzero.Alsoloadr5,r1(r4)meansthatwestoreintor5 theontentoftheithellinthearraytowhihr1points, whereiistheintegerstoredinr4.Thestoreinstrutionis \ninterpretedsimilarly. Everylabelintheodeisassoiatedwithadependent type.Thedependenttypeassoiatedwiththelabelloop \nbasiallymeansthatthereexistanaturalnumberranda naturalnumbernsatisfyingr:nandanaturalnumberi suhthatr1,r2,r3,r4areoftypesintarray(r),int \narray(n),int(r),int(i),respetively,thatis,theyare anintegerarrayofsizer,anintegerarrayofsizen,an integerofvaluerandanintegerofvaluei.Thisenables \nustostate,forinstane,thatthetypeofr1dependsonthe valueinr3.ThetypesystemofDTALguaranteesthatthese propertiesaresatisfedwhentheodeexeutionreahesthe \nlabelloop. TheDTALodeiswell\u00adtyped,whihguaranteesthatthe integerinr4isalwaysanaturalnumberanditsvalueisal\u00adwayslessthanthesizeofthearraytowhihr1(r2)points \n1 whentheload(store)instrutionisexeuted.Inother words,itanbestatiallyverifedthatthereisnoneed forrun\u00adtimearrayboundhekinginthisase.Although \nthisisaverysimpleexample,itisnonethelessimpossible toinferthatthestoreinstrutionissafewithoutthedepen\u00addenttypeassoiatedwiththelabelloop.InDTAL,array \naessisseparatedfromarrayboundheksandthetype systemofDTALguaranteesthattheexeutionofwell\u00adtyped DTALanneverperformout\u00adof\u00adboundsarrayaess.Itis \nthisseparationthatmakesarrayboundhekelimination possible.Intheasewhereitisimpossibletoproveinthe typesystemofDTALwhetheranarrayaessmaybeout\u00adof\u00adbounds,run\u00adtimearrayboundheksanbeinsertedto \nensuresafety. WealsoaddressinDTALtheissueofrepresentingsum typesatassemblylevel.Furthermore,wedemonstratehow \ndependentdatatypesinDMLanbetranslatedintoDTAL, allowing,forinstane,animplementationofthelistreverse funtioninDTALthatusesthetypesystemofDTALto \nguaranteethisfuntiontobelength\u00adpreserving. Inarealistisetting,mahine\u00adlevelarithmetiisoften 32 moduloapowerof2,say,2.Thisanbereadilyhandled \ninourframework.Forinstane,weanassignthefollow\u00ad 232 ingtypeto+forhandling(unsigned)additionmodulo, 232}. \n whereint32isthesort{a:intiO:a 232 Ii:int32.Ij:int32.int(i)*int(j)-int((i+j)mod) Thereasonthatwedonottreatmoduloarithmetiinthis \npaperismerelyforalessinvolvedpresentation. Themainontributionofthepaperisaformulationofa dependenttypesystemforalanguageatassemblylevelthat \n(a)isnon\u00adtrivialforreasonsoutlinedpreviously,(b)gener\u00adalizesTALtoallowforapturingsignifantloop\u00adbasedop\u00adtimizations,()yieldsanappliationofdependenttypesto \nmanaginglow\u00adlevelrepresentationofsumtypes,settingup somemahineryneededforompilingdependentdatatypes supportedinDMLintoassemblylevel,and(d)providesan \napproahtoertifationbasedontype\u00adheking.Onetrade\u00adofisthatwepresumethattheonstraintsolverispartof trustedomputingbaseinorderforthereipienttoverify \ntheodeitreeives.Futureworkmightinludesomemeans offormallyrepresentingproofsofonstraintssothatthe onstraintsolveranbemovedoutofthetrustedomput\u00adingbase. \nAlso,itistobestudiedwhataretheadvantagesanddis\u00adadvantagesofusingaDTAL\u00adlikelanguageasthetargetlan\u00adguageofaompiler.WhenomparedwiththeworkinDML \nandXanadu,noveltiesinDTALinlude: Datatyperepresentationatassemblylevel.Forin\u00adstane,assumethatafuntioninDMLisgiventhe \ntypeIa:nat.(o)list(n)-(o)list(n),thatis,itis lengthpreserving;howansuhapropertybetrans\u00adlatedintolow\u00adlevelode? \n Controlfowatassemblylevelthatinvolvesdependent types.Therearesimplynojumps,onditionalorun\u00adonditional,ineitherDMLorXanadu,butwehaveto \ndealwithsuhlanguagefeaturesinDTAL.  Ingeneral,thedesignofDMLandXanaduismoreon\u00adernedwithtypeinferenewhilethedesignofDTALismore \n1 Thispointshouldbeomelearifonereasonsaboutin\u00adstrution4and5intheode. 00.opy:{r:nat,n:natIr<= 01. arraysizer3,r1 \n 02. rov r4,0  03.loop:{r:nat,n:natIr<= n}[r1:intarray(r),r2:intarray(n)] IIobtainthesizeofsourearray \nIIinitializetheloopountto0 n,i:nat} [r1:intarray(r),r2:intarray(n),r3:int(r),r4:int(i)] 04. subr5,r4,r3IIr5<-r4-r3 \n 05. bgter5,finishIIr4>=r3 06. loadr5,r1(r4)IIsafeload 07. storer2(r4),r5IIsafestore 08. addr4,r4,1IIinreasetheountby1 \n 09. jrp loop IIloopagain  10.finish:[] 11. haltIIitanalsoreturntotheallerifneeded Figure2:Aopyfuntion \nonernedwithtypehekingasthetypesinDTALareto begeneratedbyaompiler.Forinstane,someofthetyp\u00adingrulesinDTALarenotsyntaxdireted,andannotations \nmayneedtobegeneratedbyaompilerinDTALodeto direttype\u00adheking.Weonsiderthistobearuialpoint inthedesignofDTAL. \nWeorganizethepaperasfollows.ThesyntaxofDTAL isgiveninSetion2.Wethenformevaluationandtyp\u00adingrulessoastoassigndynamiandstatisemantisto \nDTAL,respetively.We,however,postponeuntilSetion3 thetreatmentofonstraints,whiharegeneratedduring type\u00adhekingprogramsinDTAL.InSetion4,wegiveade\u00adtailedexampleexplaininghowtype\u00adhekingisperformedin \nDTAL.ThesoundnessofthetypesystemofDTALisstated inSetion5andanextensionofDTALtohandlesumtypes isgiveninSetion6.WetheninSetion7mentionatype\u00adhekerforDTALandaompilerwhihompilesXanadu,a \nlanguageresemblingSafeC[9]andPoporn[6]withC\u00adlike syntax,intoDTAL.Therestofthepaperdisussessome loselyrelatedworkandfuturediretions. \n 2. DTAL Inthissetionwepresentadependentlytypedassembly language(DTAL),formingbothdynamiandstatiseman\u00adtisforDTAL. \n 2.1 Syntax Weassumethatthereareafxednumbernrofregis\u00adters.AregisterfleRisafnitemappingfromtheset {O1...nr-1}intotypes.Theintentistoapturesome \ntypeinformationonregisterswithR.ThesyntaxforDTAL isgiveninFigure3.Notethatstaks,whiharetreatedin [16],areomittedhereforsimpliity,thoughwedousestaks \ninsomeodeexample.Onemaysimplythinkofastakas aninfnitelistofregisters.Also,weomittuples,whihan behandledasinTAL. \nIntuitivelyspeaking,dependenttypesaretypeswhihde\u00adpendonthevaluesoflanguageexpressions.Forinstane, wemayformatype(int)array(x)tomeanthateveryheap \npointerofthistypepointstoanintegerarrayofsizex, wherexistheexpressiononwhihthistypedepends.We usethenametypeindexexpressionforsuhanexpression. \nWerestrittypeindexexpressionstoanintegerdomain. Thejustifationforthishoieisthatwehaveusedthis implementedinDTAL \ndomaintoeliminatearrayboundheksefetively[17]. WepresentthesyntaxfortypeindexexpressionsinFig\u00ad ure4,whereweuseatorangeovertypeindexvariablesand \niforfxedintegers.Notethatthelanguagefortypeindex expressionsistyped.Weusesortsforthetypesinthislan\u00ad guageinordertoavoidpotentialonfusion.Weuse\u00b7forthe \nemptyindexontextandomitthestandardsortingrulesfor thislanguage.Thesubsetsort{a:,iP}standsforthesort forthoseelementsofsort,satisfyingthepropositionP.For \nexample,weusenatasanabbreviationfor{a:intia?O}. Wepostponethetreatmentofonstraintsatisfationin thistypeindexlanguageuntilSetion3forsimpliityof \nexposition.However,weinformallyexplaintheneedfor onstraintsthroughtheDTALodeinFigure2.Notiethat registerr4isassumedtobeoftypeint(i1)forsomenatural \nnumberi1whentheexeutionreahesthelabelloop.The typeofr4hangesintoint(i1+1)aftertheexeutionof theinstrutionaddr4,r4,1.Thentheexeutionjumps \nbaktothelabelloop.Thisjumprequiresittobeverifed (amongmanyotherrequirements)thatr4isoftypeint(i2) forsomenaturalnumberi2.Therefore,weneedtoprove \nthati1+1isanaturalnumberundertheonditionthati1 isanaturalnumber.Thisisaonstraint,thoughitistrivial inthisase.Ingeneral,type\u00adhekinginDTALinvolves \nsolvingagreatnumberofonstraintsofthisform. Weusetopforthetypeofuninitializedregistersandas\u00ad sumethataregisterisinitializedifitisnotoftypetop.A \nblokB=A/Ac.(RI)roughlymeansthatBispolymor\u00ad phiintypevariableontext/andindexvariableontext c.WemayomitA/(Ac)if/(c)isempty.Inorderto \nexeutetheblokonanabstratmahine,weneedtofnd substitutions8and(for/andc,respetively,suhthat theurrentmahinestateentailsthestateR[8][(]andthen \nexeuteI[8][(].TheentailmentofRmeansthatthetype assignmenttoregistersinRorretlyrefetsthetypesof registersintheurrentabstratmahine.Forinstane,ifR \nindiatesthatanintegerisinaregisterr,thenaninteger mustbestoredinrintheabstratmahine.Astatetype state(A/.Ac.R),whenassoiatedwithalabel,meansthat \ntherearesubstitutions8and(for/andc,respetively, suhthattheurrentabstratmahinestateentailsR[8][(] whenevertheexeutionreahesthelabel.Theexplanation \nhereassumesthatwearrytypesaroundwhenweevaluate DTALode.Ofourse,wedonotatuallyneedtoarry typevariableso \nstatetypesa::=state(A/.Ac.R) regfletypesR::=[ro:To...rn..1:Tn..1] types T::=oiaitopiunitiint(x)iTarray(x)i:c.T \ntypeerasuresE::=oitopiunitiintiEarray typevariableontexts/::=\u00b7tvi/o registersr::=ro...rn..1 instrutionsins::=aoprdrsviboprviarraysizerdrsi \nrovrviloadrdrs(v)istorerd(v)vsi ... newarray[T]rrrijrpvihalt fxedintegersi::=\u00b7\u00b7\u00b7i-1iOi1i\u00b7\u00b7\u00b7 onstants::=o \niiil valuesv::=ir instrutionsequenesI::=jrpvihaltiins;I bloksB::=A/.Ac.(RI) arithmetiopsaop::=addisubirulidiv \nbranhopsbop::=beqibneibltiblteibgtibgte labels l labelmappingsA::={l1:a1...ln:an} programsP::=l1:B1;...;ln:Bn \nFigure3:SyntaxforDTAL indexvariablesa indexexpressionsxy::=aiiix+yix-yix*yix+y indexpropositionsP::=xyix:yix=yix?yixyiPiP11P2iP1VP2 \nindexsorts,::=inti{a:,iP} indexontextsc::=\u00b7ica:,icP Figure4:Syntaxfortypeindexexpressions examplesofDTALodethatwepresentinthispaper,we \nP=(opy:B1loop:B2finish:B3) attahthestatetypeaofalabelltothelabelexpliitly A(P)={opy:a1loop:a2finish:a3} \n intheprogram,andthelabelmappingoftheprograman J(P)=opy;I1;loop;I2;finish;halt beimmediatelyextratedfromtheodeifneessary.We \nB1 =A(m:natn:natm:n).(R1I1) explainthesedefnitionsinFigure5,wheretheprogramP B2 =A(m:natn:natm:ni:nat).(R2I2) \n isgiveninFigure2;I1andI2arethesequenesofinstru\u00ad B3 =(Remptyhalt) tionsbetweenthelabelsopyandloopandthosebetween \na1 =state(A(m:natn:natm:n).R1) labelsloopandfinish,respetively.R1isamappingwhih a2 =state(A(m:natn:natm:ni:nat).R2) \n maps1and2to(int)array(m)and(int)array(n),respe\u00ad a3 =state(Rempty) tively,andR1(i)=topfori =12;R2maps123and4to \n(int)array(m),(int)array(n),int(m)andint(i),respetively, Figure5:TherepresentationoftheprograminFig2andR2(i)=topfori \n=1234;Rempty(i)=topforiin allitsdomain.Notethatwewriteintfor:a:int.int(a), thatis,intisthesumofallsingletontypesint(a),wherea \ntypesaroundinpratiewhenweevaluateDTALodeasitrangesoverintegers. islearynor inevaluationofDTALode.ThisThefollowingerasurefuntionI\u00b7Itransformstypesinto \n typesplaoleispreiselyliketheasewhereawell\u00adtypedMLprogramistypeerasures,thatis,non\u00addependenttypes. evaluated. \nItopI=topIunitI=unitIoI=oIint(x)I=int WeuseJforageneralinstrutionsequeneinthefollow\u00adIaI=unitITarray(x)I=ITIarrayI:c.TI=ITI \n ingpresentation,whihonsistsofasequeneofinstrutions orlabels.GivenablokB=A/.Ac.(RI),wewritea(B)ItanbereadilyverifedafterthepresentationofDTALthat \nforstate(A/.Ac.R)andI(B)forI.Alsowedefnefuntions DTALbeomesaTAL\u00adlikelanguageifoneerasesallsyntax AandJonprogramP=l1:B1;...;ln:Bnasfollows. \nrelatedtotypeindexexpressions.InthisTAL\u00adlikelanguage, theerasureofaprogramiswell\u00adtypedifitiswell\u00adtypedin \nA(P)={l1:a(B1)...ln:a(Bn)}DTAL.Inthisrespet,DTALgeneralizesTAL.Westress J(P)=l1;I(B1);...;ln;I(Bn) \ntheerasurepropertybeauseitindiatesthatDTALdoes notmakemoreprogramstypablethanTALbut,instead,WereferA(P)asthelabelmappingofP,inwhihwere\u00adanassignmoreauratetypestoprograms. \nquirethatalllabelsbedistint.ForavalidprogramP, alllabelsinJ(P)mustbedelaredinA(P).Inallthe  2.2 Dynamic \nSemantics Weuseanabstratmahineforassigningoperationalse\u00admantistoDTAL,whihisastandardapproah.Amahine stateMisapair(1R),where1andRarefnitemappings \nwhihstandforheapandregisterfle,respetively. Thedomaindom(1)of1isasetofheapaddresses,the domaindom(R)ofRis{O...nr \n-1}.Wedonotspeify howaheapaddressisrepresented,butthereaderansimply assumeittobeanaturalnumber.GivenhEdom(1),1(h) \nisatuple(ho...hn.1)suhthatfori=O...n-1, everyhiiseitheraheapaddressoraonstant.Given iEdom(R),R(i)iseitheraheapaddressoraonstant. \nGivenaprogramP,A=A(P)assoiateseverylabelin J=J(P)withastatetypea.Weuselength(J)forthe lengthofthesequeneJ,ountingbothinstrutionsand \nlabels.WeuseJ(i)fortheithiteminJ,whihiseither J.1 aninstrutionoralabel.Alsowewrite(l)foriifl isJ(i).Thisiswell\u00addefnedsinealllabelsinaprogram \naredistint.WedefneaP\u00adsnapshotQaseitherHALTor apair(iM)suhthatO:ilength(J).Therelation (iM)-p(i.M.)meansthattheurrentmahinestate \nMtransformsintoM.afterexeutingtheinstrutionJ(i) andtheinstrutionounterissettoi. . GivenM=(1R),wedefnethefollowing. \n {oifviso; { iifvisintegeri; M(v)={ lifvislabell; { R(i)ifvistheithregisterri. Givenafnitemappingfandanelementxinthedomainof \nf,weusef(x)forthevaluetowhihfmapsx,andf[x -v] forthemappingsuhthat f(y)ifyisnotx;f[x v](y)= - vifyisx. \nClearly,f[x v]isalsomeaningfulwhenxisnotalreadyin -thedomainoff.Inthisase,wesimplyextendthedomain offwithx. \nWeusethenotationR[r h]tomeanthatwe -update theontentofregisterrwithh,thatis,R[r h]isreally -R[i h],whereiisthenumberingofregisterr.Alsowe \n-useM[r -h]for(1R[r -h])givenM=(1R). WepresentsomeevaluationrulesforDTALinFigure6. Wedonotonsidergarbageolletioninthisabstratma\u00adhine,andthereforethetypingoftheheapanonlybeaf\u00adfetedbythememoryalloationinstrutionsnewarray.No\u00adtiethattherules(eval-load)and(eval-store)implythat \nanout\u00adof\u00adboundsarrayaessstallstheabstratmahine. Theserulesalsoindiatethatthelengthofthetuple1(h) analwaysbedeterminedforeveryhEdom(1)atrun\u00adtime.WewillsoondesignatypesystemforDTALandprove \nthatO:ininbothrules(eval-load)and(eval-store) alwaysholdswhentheserulesareappliedduringtheeval\u00aduationofawell\u00adtypedDTALprogram.Therefore,thereis \nnoneedfordeterminingthelengthofthetuple1(h)forev\u00aderyhEdom(1)ifweonlyevaluatewell\u00adtypedDTALpro\u00adgrams.Intheasewhereitannotbedeterminedinthetype \nsystemofDTALwhetherasubsriptiswithinthebounds ofanarray,thearraysubsriptinginstrutionisill\u00adtyped andthusrejeted.Thissoundslikeasevererestrition,but \nitisnotbeauseweanalwaysinsertrun\u00adtimearraybound hekstomaketheinstrutiontypableinDTAL(wegive suhanexampleattheendofSetion2.3). \n(type-unit) c;/;RfAo:unit (type-int) c;/;RfAi:int(i) A(l)=a (type-label) c;/;RfAl:a O:inr (type-reg) \nc;/;RfAri:R(i)c;/;RfAv:T1c;/i=T1:T2 (type-sub) c;/;RfAv:T2 Figure7:Typingrulesforintegers,labels,registers \nTherule(eval-newarray)isnon\u00adstandard.IfITIis ofform(E)array,thennewarray[T]rr . r ..alloatesnnew word\u00adsizedmemoryonheap,wherenistheintegerstoredin \nr . ,andinitializeseahwordwiththeontentinr ..andthen storesapointinrwhihpointstothealloatedmemory.We \nemphasizethathmustbenewintherule(eval-newarray), thatis,hisnotalreadyinthedomainof1.Thetypingon\u00adsequenesofthismemoryalloationinstrutionsisexplained \ninthenextsetion,wherethetypingrule(type-newarray) isintrodued. Letusallaprogramwell\u00adstruturedifitsevaluationhalts \nnormally(whentherule(eval-halt)isapplied)orontinues forever.Inotherwords,theevaluationofawell\u00adstrutured \nprogramanneverbestuk.Certainlyitisundeidableto determinepreiselywhetheraprogramiswell\u00adstrutured, butthisisalsolessrelevant.Weintendtofndaonser\u00advativeapproahtoexaminingwhetheraprogramiswell\u00adstrutured.Suhanapproahmustbesound,thatis,it \nanonlyaeptwell\u00adstruturedprograms.Forinstane,a straightforwardapproahistoadoptamethodbasedon TALfortype\u00adsafetyandtheninsertrun\u00adtimeheksforall \narrayoperations.Unfortunately,thisapproahseemstoo onservative,makingitimpossibletoeliminatearraybound \nheks.NotiethatthisisessentiallytheaseinallJVML verifers.Inthenextsetion,wepresentalessonservative approahbasedonadependenttypesystem. \n 2.3 Static Semantics WepresentthetypingrulesforDTALinthissetion.Note thatweuseanarrayrepresentationforaregisterfleR.We \nomitthestandardrulesforforminglegaltypesandassume thatalltypesarewell\u00adformedinthefollowingpresentation. \nWeuseajudgmentofformc;/;RfAv:Ttomeanthat valuevisassignedtypeTundertheontextc;/;Rand thelabelmappingA.ThelabelmappingAisalwaysfxed \nwhenwetype\u00adhekaprogram,andthereforewewillomit itifthisausesnoonfusion.TherulesinFigure7arefor typingunit,integers,labelsandregisters. \nWepresentsometypingrulesforDTALinFigureS.We use(and8forindexandtypevariablesubstitutions,re\u00adspetively,whiharedefnedasusual.Givenaterm \nsuh asatypeoraregisterfle,wewrite [8]( [(])fortheresult ofapplying8(()to .Ajudgmentofformc;/;RfI meansthattheinstrutionsequeneIiswell\u00adtypedunder \nontextc;/;R.ThenotationR[r:T]meansthatweup\u00addatethetypeofregisterrtoTinR,thatis,ifristheith register,thenweupdatethevalueofR(i)withT.Weuse \nITI=(E)arrayJ(i)=newarray[T]rr . r ..M(r .)=n?OhEdom(1) (eval-newarray) (iM)-p(i+1M[h-(M(r ..)...M(r \n..))][r-h])J(i)=loadrdrs(v)1(M(rs))=(ho...hn.1)M(v)=iO:in (eval-load) (iM)-p(i+1M[rd -hi]) J(i)=storerd(v)vsM(rd)-hM=(1R) \n1(h)=(ho...hn.1)M(v)=iO:inM(vs)=h (eval-store) (iM)-p(i+1(1[h-(ho...hi.1hhi+1...hn.1)]R)) J(i)=halt \n (eval-halt) (iM)-pHALT Figure6:SomeevaluationrulesforDTAL cc .;/;R[r:T]fI (type-open-reg) c;/;R[r::c \n..T]fI c;/;Rfr .:int(x)ci=x?Oc;/;Rfr ..:Tc;/;(R[r:Tarray(x)])fI (type-newarray) c;/;Rfnewarray[T]rr \n. r ..;I c;/;Rfrs:int(x)c;/;Rfv:int(y)c;/;(R[rd:int(x+y)])fI (type-add) c;/;Rfaddrdrsv;I c;/;Rfrs:Tarray(x)c;/;Rfv:int(y)ci=O:yxc;/;R[rd:T]fI \n (type-load-array) c;/;Rfloadrdrs(v);I c;/;Rfrd:Tarray(x)c;/;Rfv:int(y)ci=O:yxc;/;Rfvs:Tc;/;RfI (type-store-array) \n c;/;Rfstorerd(v)vs;I c;/;Rfv:state(A/..Ac..R.)cf(:c . c;/f8:/. c;/;Ri= R.[8][(] (type-jmp) c;/;Rfjrpv;I \nc;/;Rfr:int(x)cx=O;/;RfIc;/;Rfv:state(A/..Ac..R.) .. R. cx=Of(:ccx=O;/f8:/cx=O;/;Ri= [8][(] (type-beq) \n c;/;Rfbeqrv;I Figure8:ThetypingrulesforDTAL therule(type-newarray)fortypingarraysalloatedon heap.Wehaveexplainedintheprevioussetionhowmem\u00adoryalloationisperformed.Alsowerequirethattheindex \nvariablesdelaredinc .intherule(type-open-reg)have nofreeourreneintheonlusionoftherule. Thetypingrule(type-add)indiatesthatthetypeofreg\u00adisterrdbeomeint(x+y)aftertheinstrutionaddrdrsvis \nexeuted,whereweassumethatrsandvhavetypesint(x) andint(y),respetively.Ifarithmetioverfowistobeon\u00adsidered,wemayrequiretheinstrutiontobefollowedby \naninstrutionthattrapsoverfow;ifanoverfowours,we jumptoasubroutinetohandleit;otherwise,weknowrd indeedhastypeint(x+y). \nWegivesomeexplanationontherule(type-beq).We usecf(:c .tomeanthat(isasubstitutionforc .under c,thatis,foreverya:,delaredinc \n. ,cf((a):,is derivableandforeveryPinc . ,ci=P[(]issatisfable. Theexplanationforc;/f8:/.issimilar.Supposethat \nwetype\u00adhekbeq;rv;Iunderc;/;R;wefrsthekthat rhastypeint(x)forsomex;wethentype\u00adhekIunder cx=O;/;R(x=Oisaddedintocsinethejumpisnot \ntakeninthisase);wealsoverifythatvhasastatetype andcx=O;/;Rentailsthestatetype(x=Oisaddedto csinethejumpistakeninthisase).Thetypingrulesfor \notheronditionaljumpsaresimilar. WeskethaasewhereaDTALprogramthatdoesnot type\u00adhekanbemodifedtotype\u00adhekwiththeinsertion \nofarun\u00adtimearrayboundhek.Assumethatwewant totype\u00adhekloadrdrs(v);Iunderc;/;R,andwehave verifedthatrsandvhavetypesTarray(x)andint(y),re\u00adspetively,andweanproveci=O:ybutnotci=yx; \nweantheninsertthefollowing(wheresubsriptistheen\u00adtrytosomeroutinethathandleserrors)infrontoftheload instrution,andthisinsertionguaranteesthatx-yOisal\u00adreadyaddedtocwhentheloadinstrutionistype\u00adheked, \nmakingsurethatyxisprovable. arraysizerrs;subrrv;bltersubsript; Adualaseistoremovearedundantarrayboundhek.For \ninstane,wewanttotype\u00adhekbltrsubsript;Iunder c;/;R;supposethatrhastypeint(x)forsomexandci= x?Oanbeproven;thisimpliesthatbltrsubsriptan \nneverbranhandthusthisinstrutionanberemoved. WeusefP[well\u00adtyped]tomeanthataprogramP=(l1: B1...ln:Bn)iswell\u00adtypedandthefollowingruleisfor \ntypingaprogram,whereAisthelabelmappingofP. fAB1[well\u00adtyped]\u00b7\u00b7\u00b7fABn[well\u00adtyped] fP[well\u00adtyped] GivenablokB=A/.Ac.(RI),theruleforderivingfA \nB[well\u00adtyped]isgivenasfollows. c;/;RfAI (type-blok) fAB[well\u00adtyped]  3. TYPE EQUALITY AND COERCION \nAswehavementionedbefore,anoveltyinDMListhe separationbetweenlanguageexpressionsandtypeindexex\u00adpressions.Thisnotionofseparationseemsindispensable \nwhenweintendtoformadependenttypesystemforan imperativelanguagesuhasDTAL.Forinstane,itisom\u00adpletelyunlearatthemomenthowaregisteranbeusedas \natypeindexexpression,sineitismutable.Theseparation allowsustosimplyavoidsuhaproblematiissue.Another advantageisthattheseparationenablesustohoosearel\u00adativelysimpledomainfortypeindexexpressionssothat \nonstraints(ontypeindexexpressions)generatedduring type\u00adhekinganbee\u00c6ientlysolved.Thisisruialto thedesignofapratialtype\u00adhekingalgorithm.Inthis \nsetion,wepresenttypeequalityandoerion,whihlead toonstraintgenerationintype\u00adheking. Inthepreseneofdependenttypes,itisnolongertrivial \ntohekwhethertwotypesareequivalent.Forinstane, wehavetoprovethattheonstraint1+1=2inorderto laimint(1+1)isequivalenttoint(2).Inotherwords,type \nequalityismoduloonstraintsatisfation.Similarly,type oerionalsoinvolvesonstraintsatisfation. Weuse<forindexonstraints, \n<::=iPiP=<iVa:,.< andci=Pforasatisfabilityrelation,statingthat(c)Pis satisfableinthedomainofintegers,where(c)Pisdefned \nbelow. (\u00b7)<=<(ca:int)<=(c)Va:int.< (ca:{a:,iP})<=(ca:,)(P=<) (cP)<=(c)(P=<) Forinstane,thesatisfabilityrelationa:natb:inta+1= \nbi=bOholdssinethefollowingformulaistrueinthe integerdomain. Va:int.a?O=Vb:int.a+1=b=bO Weurrentlyonlyaeptlinearonstraints,usinglinearin\u00adtegerprogrammingtosolvethem.Thoughtheonstraint \nsatisfationisNP\u00adomplete,mostonstraintsinpratieare e\u00c6ientlysolved. Wewritec;/i=T1=T2tomeanthattypesT1andT2are \nequalunderontextc;/.Similarly,wewritec;/i=T1:T2 tomeanthattypeT1oeresintotypeT2underontext c;/.Notethattypeoerionansimplybeviewasaform \nsubtypinghere.Somerulesfortypeoerionarepresented inFigure9.Notiethatfortherule(oere-exi-ivar-l), thereisanobvioussideonditionrequiringthatthetype \nT2doesnotontainfreeourrenesoftheindexvariables delaredinc . . Therulesfortypeequalityaresimilarandthusomitted. \n Forinstane,thefollowingderivationshowsthatthetype :a:nat.int(a)oeresintothetype:b:int.int(b),wherethe \nthetopappliedruleis(oere-exi-ivar-r)andtheotheris (oere-exi-ivar-l). a:nati=a:inta:nat;\u00b7i=int(a):int(a) \na:nat;\u00b7i=int(a)::b:int.int(b) \u00b7;\u00b7i=:a:nat.int(a)::b:int.int(b) Wehavesofarfnishedthepresentationofthetypesystem \nofDTAL,whihisratherinvolved.Wewilluseaonrete exampleinthenextsetiontoprovidesomeexplanationon type\u00adhekingbeforeproeedingtoestablishthesoundness \nofthetypesystem. 4. AN EXAMPLE Wedemonstratesomekeystepsinvolvedintype\u00adheking theDTALodeinFigure2.Westiktothenotations \ngiveninFigure5.LetinsibetheithinstrutionandI2,i beinsi;...;insgfor4:i:9.Inordertoderivef B2[well\u00adtyped],thatis,totypeblokB2,weneedtoderive \nthefollowing. m:natn:natm:ni:nat;\u00b7;R2fI2 ThentheremustbederivationsViwithaonlusionofform ci;/i;RifI2,ifori=4...9.Welisttheseontexts \nci;/i;RiinFigure1O.Inthederivationofc6;/6;R6fI6, thelastruleis(type-load-array),whereweneedtoprove c6i=O:im.Thisistrivialsinei:natandimare \nassumedinc6.Similarly,weneedtoprovec7i=O:in whenderivingc7;/7;R7fI7.Thisisalsotrivialsine m:ni:natimareassumedinc7. \n 5. SOUNDNESS BythetypesoundnessofDTAL,weessentiallymeanthat theevaluationofwell\u00adtypedDTALodeeitherhaltsnor\u00admally(whentheinstrutionhaltisexeuted)orgoeson \nindefnitely.Themainingredientintheproofofthetype soundnessofDTALisanentailmentrelation,forwhihwe presentabriefexplanation. \nGivenaprogramP,weuseJforthelistonsistingof labelsandinstrutionsinPandJ[i]forthesu\u00c6xofJ startingwiththeiteminJ.Assumec;/;RfJ[i] \nit isderivableandtherearesubstitutions(and8forcand /,respetively,suhthatMi=R[8][(]holds,thatis,M entailsR[8][(].Weuse1i=h:Ttomeanthathhas \ntypeTundertheheapmapping1.Forinstane,wehave 1i=i:int(i).Thefollowingrule(heap-array)isfor assigningarraytypes. \n1(h)=(ho...hn.1)1i=ho:T\u00b7\u00b7\u00b71i=hn.1:T 1i=h:(T)array(n) Wewrite(1R)i=R,thatis,(1R)entailsR,if1i= R(i):R(i)holdsforeveryiEdom(R).Inotherword, \n(1R)i=Rmeansthattheontentineahregisterdoes havethetypeassignedbyR. WestatethetypesoundnesstheoremforDTALbelow. \nTHEOREM5.1.LetP=(l1:B1;...;ln:Bn)beapro\u00adgramandA=A(P).AssumefP[well\u00adtyped]isderivable andA(l1)=Rempty,whereRemptymapseahregisterto \ntypetop.ForeverymahinestateMo,If(OMo)-p . c;/fT:* oE/ ci=x=y (oere-top) (oere-type-var) (oere-int) c;/i=T:topc;/i=o:oc;/i=int(x):int(y) \ncc .;/i=T1:T2 cf(:c . c;/i=T1:T2[(] .(oere-exi-ivar-l) . c;/i=:c.T1:T2 c;/i=T1::c.T2 c;/i=T1 =T2ci=x=yc;/i=R(i):(i)for \nR. (oere-exi-ivar-r) O:inr (oere-array) (oere-reg) R. c;/i=T1array(x):T2array(y)c;/;Ri= Figure9:SometypeoerionrulesforDTAL \nNo.c /R O4m:natn:natm:ni:nat\u00b7R2 O5m:natn:natm:ni:nat\u00b7h:int(i-m)] R2[rO6m:natn:natm:ni:nati-mO\u00b7h:int(i-m)] \nR2[rh O7m:natn:natm:ni:nati-mO\u00b7R2[r:int] OSm:natn:natm:ni:nati-mO\u00b7R2[r:int] h O9m:natn:natm:ni:nati-mO\u00b7R2[r:int][r4:int(i+1)] \nh Figure10:Contextsck;/k;Rkfork=4...9 (iM)theneither(iM)-p....,or(iM)-p(i.M.) forsomei.andM. .Inotherwords,theexeutionofa \nwell\u00adtypedprograminDTALeitherhaltsnormallyorruns forever. Theproofofthistheoremisinvolved.Wehavetodealwith \nasubtleissueinvolvingsharedpointersandimposesome regularityonditionontheheapmapping1inamahine stateinordertoestablishtheresult.Wegivesomebrief \nexplanationonthisissue. Suppose1(h)=(O)forsomeh,R(O)=R(1)=h,R(O)= (int)array(1)andR(1)=(nat)array(1),wherewewritenat \nfor:a:nat.int(a).Weannowderive(1R)i=Rsine (O)anbeviewedasbothanintegerarrayofsize1anda naturalnumberarrayofsize1.Clearly,ifwestoreanegative \nintegerintothearraypointedbyr1,thenthetypeofr2is invalidatedbeauseitnolongerpointstoanaturalnumber array. \nAssumec;/;RfJ[i]isderivable,MentailsR[8][(]for (M.. some8and(and(Mi)-pi),whatweessentially ..;R. needtoproveisthatc;/fJ[i.]isderivableforsome \nc .and/.suhthatM.entailsR.[8.][(.].Unfortunately, theaboveexampleshowsthatthisisnotprovableasitis simplyfalse.Inordertooverometheproblem,weimposea \nregularityonditiononthederivationofMi=R.Roughly speaking,weassoiatetypeTwithheapaddresshwhenever therule(heap-array)isappliedandaderivationisregular \nifaheapaddressisassoiatedwithatmostonetype.This notionofregularityisessentiallythesameasthenotionof storetypingin[2],whihwasusedtoaddresstheirularity \nofreferenesinML.Clearly,thereisnoregularderivation fortheaboveexample:inordertoderiveMi=R,wehave toassoiatehwithatleasttwodistinttypesint(whenwe \nderive1i=R(O):R(O))andnat(whenwederive1i= R(1):R(1)). Inessene,byaregularderivationof(1R)i=R,we meanthatthereisaheaptypingthatmapseahheapad\u00addresshEdom(H)toafxedtypeandunderthistyping \nR(i)anbeassignedthetypeR(i),thatis,thevalueineah registerhasthetypethatisdelaredfortheregister.Asa heaptypinganneverbealtered(butitmaybeextended \nbytheexeutionofnewarray),Weanthenprovethatif Mi=R[8][(]hasaregularderivationthenM.i=R.[8.][(.] alsohasaregularderivation,whereweusethenotationin \ntheaboveparagraph.Theproofbearsagreatdealofsimi\u00adlaritytothesoundnessproofin[2]. Insummary,ifwestartwithanentailmentthathasareg\u00adularderivation,thenallentailmentsintheproofofthetype \nsoundnessofDTALhaveregularderivations.Therefore,the senarioofsharedpointersmentionedpreviouslyannever \nour.ThisallowsustoestablishTheorem5.1.Notethe issuehere,whihwethinkisrathersubtletoreognize,does notourineitherDMLorTAL.Pleasesee[16]fordetails. \n 6. EXTENSION WITH SUM TYPES TheprogrammerandelareinXanaduapolymorphi uniontypeasinFigure12forrepresentinglistsandthenim\u00adplementthelengthfuntion.Theonretesyntax<'a>list \nisforthetypeoflistsinwhihallelementsareoftype'a (weuse'aforatypevariable).Notethattheuniontypes inXanaduorrespondtodatatypesinMLandthevalues \nofuniontypesaredeomposedthroughpatternmathing. Weinformallyexplainthemeaningoftheswithstatement inFigure12;ifxsmathesthepatternNil,thevalueof \nxisreturned;ifxsmathesthepatternCons(C,xs)(Cis awildard),thenweupdatexswithitstailandinrease xby1.Thetypefollowingthekeywordinvariantstates \naninvariantattheprogrampoint:xsisalistoflengthi andxisanintegerofvaluejforsomeintegersijsatisfying i+j=n,wherenisthelengthofthefuntionargument. \nAuniontypeisinternallyrepresentedasasumtype.In theaseabove,atagisusedtoindiatewhethertheout\u00admostonstrutorofalistisNilorCons.Weanompilethe \nlengthfuntionessentiallyinthefollowingmanner;weini\u00adtializexwithOandstartthefollowingloop;givenalistxs, \nweperformataghektoseewhetheritisNil;ifitis,we returnx;otherwise,weknowthattheoutmostonstrutor ofxsmustbeConsanditisunneessarytoperformanother \ntaghek;weansimplyupdatexswithitstail,inreasex cx=O;/i=To:T\u00b7\u00b7\u00b7cx=n-1;/i=Tn.1:T (oere-hoose-l) c;/i=hoose(xTo...Tn.1):T \nc;/i=T:Tici=x=i (oere-hoose-r) c;/i=T:hoose(xTo...Tn.1) Figure11:Additionaltypeoerionrulesforsumtypes \n('a)unionlistwithnat= {Nil(0);{n:nat}Cons(n+1)of'a*<'a>list(n)} ('a){n:nat}int(n)length(xs:<'a>list(n)){ \nvar:intx=0;; invariant: [i:nat,j:natIi+j=n](xs:<'a>list(i),x:int(j)) while(true){ swith(xs){ aseNil:returnx; \naseCons(C,xs):x=x+1; } } exit;I*anneverbereahed*I } Figure12:AlistlengthfuntioninXanadu by1andloopagain. \nWenowextendthesystemofDTALtohandlesumtypes. Inanimplementation,weanuseapaironheaptorepresent asumtypesum(To...Tn.1),whihisoftenwrittenasTo+ \n\u00b7\u00b7\u00b7+Tn.1intheliterature.Thefrstelementofthepairis anintegerisuhthatO:inandtheseondelement isoftypeTi.Weanusehoose(xTo...Tn.1)tostand \nforatypewhihmustbeoneofTo...Tn.1,determined bythevalueofx:thetypeisTiifx=i.Alsowepresent someadditionalrulesinFigure11forhandlingtypeoerion \ninvolvingsumtypes(rulesfortypeequalityareomitted). Nowweandefnesum(To...Tn.1)as: :a:natn.int(a)*hoose(aTo...Tn.1) \nthatis,avalueoftypesum(To...Tn.1)isrepresentedas apairinwhihthefrstpartisatagdeterminingthetype oftheseondpart.Wepresentanexampletoillustratethe \nuseofsumtypes. InFigure12,wedelareadependentdatatypeinXanadu forlists;Nilisgiventhetype<'a>list(0),thatis,itisa \nlistoflengthO;Consisassignedthetype {n:nat}'a*<'a>list(n)-><'a>list(n+1) indiatingthatConstakesanelementandalistoflengthn \nandyieldsalistoflengthn+1.Thisleadsustorepresent thetypeonstrutorlistasfollows, tt.Ao.In:nat.(:co.unit)+(:c1.o*(o)t(a)) \nwheretisthefxedpointoperatorandcoisn=Oandc1 isa:nata+1=n.Ifweunfold(T)list(n),weobtainthe type(:co.unit)+(:c1.T*(T)list(a)),whihanbefolded \ninto(T)list(n).Itisstraightforwardtoapplythisstrategy toageneralaseofdependentdatatypes.Weprovidetwo \nauxiliaryinstrutionsfold[T]randunfoldrtoindiatethe needforfoldingthetypeofrintoTandunfoldingthetype ofr,respetively. \n TheDTALodeinFigure13orrespondstotheXanadu programinFigure12.Thestatetypefollowingthelabel lengthindiatesthatthetopelementonthestakisalist \nandtheseondoneisalabel;thelististheargumentof thefuntionandthelabelisthereturnaddress(pushed ontothestakbythealler);thetypeofthelabelstates \nthatthetopelementofthestakisaninteger,whihis tobethereturnvalueofthefuntion,andtherestofthe stakisthesameastheurrentstakexludingthetop \ntwoelements.Thestatetypefollowingthelabellength preiselyindiatesthatthisisafuntionthataeptsalist oflengthnandreturnanintegerofvaluen.Weregardthe \nrepresentationofdependentdatatypesatassemblylevelasa signifantontribution,whihmakesitpossibletoperform \nompilationwithdependenttypesforprogramsinDMLand thusertifymoreprogramproperties. TheDTALodeinFigure13isunsatisfatoryforthe \nfollowingreason.Inpratie,thelistonstrutorsareusu\u00adallyrepresentedwithouttagsforbothe\u00c6ienyandmem\u00adoryonern.Inotherwords,weaninterpret(o)listas \n:a:nat2.hoose(aunito*(o)list).Thereasonisthat itanbereadilytestedinpratiewhetheravalueequals o(whihisommonlyrepresentedasanullpointer),and \nthereforethereisnoneedforatag.Thisoptimizedlistrep\u00adresentationanalsobehandledinDTAL.Pleasesee[16]for \ndetails. Thetreatmentofsumtypesextendstheonein[3].There indexedsumsT1+iT2(i=12)areintroduedfortypesT1 \nandT2inadditiontothestandardsumT1+T2.Thetyping rulesforindexedsumsessentiallystatethatfori=12, ini(e):T1+iT2isderivableife:Tiis,whereiniisused \ntoindiatewhihruleisapplied.Torelateindexedsumsto sum,therearesubtypingrulesformakingT1+iT2asubtype ofT1+T2fori=12.InDTAL,T1+iT2anbeinterpreted \nasint(i-1)*hoose(i-1T1T2)andthesubtypingrelation anbederivedwiththeuseoftypeoerionrules. 7. IMPLEMENTATION \nWehaveprototypedatype\u00adhekerandaninterpreterfor DTALandverifedmanyexamples,providingaproofof onept.Theimplementationandexamplesareavailable \non\u00adline[14]. WehavealsoprototypedaompilerwhihproduesDTAL odefromsoureprogramsinXanadu,alanguagewithC\u00adlikesyntaxinwhihonlytoplevelfuntionsaresupported \nandnopointersareallowed.Xanadusharesmanyommon featureswithlanguageslikeSafeC[9]andPoporn[6].The mostsignifantfeatureofXanaduisitstypesystem,whih \nsupportsarestritedformofdependenttypesthataresim\u00adilartothoseinDTAL,thoughregistersarereplaedwith length:('r,'a){n:nat}[sp:'alist(n)::[sp:int(n)::'r]::'r] \nII[sp:int(n)::'r]representsthestatetypeofthereturn IIaddress(label)whihispushedonthestakbythealler. IINotethat'alistisrepresentedasadependenttypeinternally \npopr1 IIpopthelistargurentintor1 rovr2,0 IIinitializer2 loop:('r,'a){i:nat,j:natIi+j=n}[r1:'alist(i),r2:int(j),sp:[sp:int(n)::'r]::'r] \nunfoldr1 II loadr3,r1(0)IIloadlisttagintor3(r3=0or1) beqr3,finishIIgotofinishifr1iserpty(r3=0) loadr1,r1(1)IIr1:'a*'alist(i-1)(r3=1siner3isnot0) \nloadr1,r1(1)IIrovelisttailintor1 addr2,r2,1IIr2:int(j+1) jrploop IIloopagain finish:('r){n:nat}[r2:int(n),sp:[sp:int(n)::'r]::'r] \npopr1IIreturnaddresspopsintor1 pushr2IIresultpushesontothestak jrpr1IIreturn Figure13:AnimplementationofthelengthfuntiononlistsinDTAL \nloalvariablesinaprogram.Pleasesee[15]formorede\u00ad8. RELATED WORK tails. Thereisagreatdealofongoingresearhonertifyingom\u00ad \nTheompilationislikeompilingCintoatypialuntyped Examplesertifyingompilerstypeand pilers.offormem\u00ad assemblylanguageexeptthathereweneedtoonstrutorysafetyinludevariousonesompilingJavaintoJavavir\u00ad \n statetypesforlabels.Wehaveompiledalltheexamplesin tualmahinelanguage(JVML),TouhstoneompilingSafe thispaper. \n2 Cintoaformofproof\u00adarryingode(whihweallTPCC) InXanadu,weallowtheprogrammertoprovideloopin\u00ad[9],TIL[11]anditssuessorTILTandFLINT/ML[1O] \nvariantsintheformofdependenttypessothatsignifantly ompilingSML[5]intoatypedintermediatelanguage[11], \n morearrayboundheksanbeeliminatedinpratie.In andROML[12]ompilingarestritedsetofMLintoapor\u00ad Figure14,thetoppartisaprograminXanadu,whihini\u00adtionofCthatistypesafe. \n tializesanarraywithzeros,andtherestistheDTALode DTALisanextensionofTALwithdependenttypes,and ompiledfromtheprogram.Thefuntionheader: \n itanbereadilytransformedintoaTAL\u00adlikelanguageif oneerasesallsyntaxrelatedtotypeindexexpressions.In {n:nat}unitinitialize(intve[n]) \nthisrespet,DTALgeneralizesTAL.InDTAL,initializa\u00ad tionistreateddiferentlyfrominTAL.AtypeinTALan indiatesthatforeverynaturalnumbern,initializetakes \nbeannotatedwithafagtoindiatetheinitializationsta\u00adanintegerarrayofsizenandreturnsnovalue.Thetype tusofavaluewiththistype,butthetypetopisusedin \nfollowingthekeywordinvariantessentiallystatesthati DTALtorepresentthetypeofalluninitializedvalues.This \nandlareoftypesint(a)andint(b),respetively,wherea strategyworksbeauseeveryarray(andtupleifpresented) andbarenaturalnumberssatisfyinga+b=n.Notethat \n isinitializeduponalloationinDTAL. nisthesizeofarrayve. Thenotionofproof\u00adarryingodeintroduedin[S]an \nTheXanaduprogramanbeompiledintotheDTAL addressthememorysafetyissueinmobileodeasfollows. odeexludingthestatetypesforlabelsinastandardman\u00adTheessentialideaistogenerateaproofassertingthemem\u00adner.ThispartisexatlylikeompilingaorrespondingC \n orysafetypropertyofodeandthenattahittotheode. program.Webriefymentiontheonstrutionofthestate Theproofarriedbytheodeanthenbeverifedbefore \ntypesinFigure14.Notiethatthestatetypeattahed exeution.Thisisanattrativeapproahbutahallenging toloopisessentiallytranslatedfromthetypeannotationin \nquestionremains,thatis,howtogenerateaprooftoas\u00adthesoureprogram.Wesimplymodifytheannotationtoin\u00ad sertmemorysafetypropertyofa(largeandomplex)pro\u00adludethetypesofvariablesnotmentionedandthenreplae \ngram.TheTouhstoneompiler[9],whihompilespro\u00ad thevariableswiththeregisterstowhihthesevariablesare gramswritteninatype\u00adsafesubsetofCintoproof\u00adarrying \nmapped.Weexpettoformalizesuhaompilationstrat\u00ad ode(TPCCforTouhstone'sPCC),handlesthisquestion egyinfutureandshowthatawell\u00adtypedXanaduprogramthroughageneralverifationonditiongenerator[1],gener\u00adanalwaysbethusompiledintowell\u00adtypedDTALode. \natingverifationonditionsforbothtypesafetyandmem\u00adAtpresent,wemaymerelyviewthetypeannotationsin orysafety.AlsoTPCCperformssomeloopinvariantsyn\u00ad \nXanaduasompilationhintstogeneratingwell\u00adtypedDTAL thesisforeliminatingarrayboundheks.Ingeneral,TPCC \node. seemsmoreinvolvedinhandlingtypesafetywhenompared 2toTAL,whileTALseemslessfexiblethanTPCC. Weurrentlydonothaveaprettyprinterforthegenerated \nDTALode,andthereforewetookthelibertytoprettifythe DMLisafuntionalprogramminglanguagethatenrihes DTALodepresentedinthispaper. \nMLwitharestritedformofdependenttypes[1S],allow\u00ad {n:nat}unitinitialize(intve[n]){ var:inti,l;; i=0;l=arraysize(ve); \ninvariant:[a:nat,b:natIa+b=n](i:int(a),l:int(b)) while(l>0){ve[i]=0;i=i+1;l=l-1;} } init:('r){n:nat}[sp:intarray(n)::[sp:'r]::'r] \npop r1 rov r2,0 arraysizer3,r1 loop:('r){n:nat,a:nat,b:natIa+b=n} [r1:intarray(n),r2:int(a),r3:int(b),sp:[sp:'r]::'r] \nblte r3,finish store r1(r2),0 add r2,r2,1 sub r3,r3,1 jrp loop finish:('r)[sp:[sp:'r]::'r] popr1 jrpr1 \n Figure14:ImplementationsofaninitializationfuntioninXanaduandDTAL ingtheprogrammertoapturemoreprograminvariants \nthroughtypesandthustodetetmoreprogramerrorsat ompile\u00adtime.Inpartiular,theprogrammeranapture moreinvariantsindatastruturesbyrefningdatatypes \nwithtypeindexexpressions.Forinstane,oneanform adatatypeinDMLthatispreiselyforallred/blaktrees andprogramwithsuhatype.ThetypesystemofDMLis \nalsostudiedforarrayboundhekelimination[17]. DTALstandsasanalternativedesignhoietoTPCC,ex\u00adtendingTALwithaformofdependenttypesthatislargely \nadoptedfromDML.ThedesignofDTALispartlymotivated byanattempttobuildaertifyingompilerforDML.Un\u00adlikeTPCC,therearenoproofsattahedtoDTALode.The \nveriferforDTALodeisadependenttype\u00adhekeronsist\u00adingofaonstraintgeneratorandaonstraintsolver.In general,proofverifationiseasierthanproofsearh,and \nthereforetheTPCCstartupoverheadshouldbelessthan thatforDTALode,thoughitseemstoodi\u00c6ultatthis stagetoperformameaningfulomparison.Infuture,we \narealsointerestinginonstrutingaproofassertingthe well\u00adtypednessofDTALodeandthusprovideameansto generatingaformofproof\u00adarryingodefromprogramsin \nXanadu.ThisisappealingasXanaduallowstheprogram\u00admertoformallysupplyprograminvariantsthatmaybetoo sophistiatedtosynthesizeandthusfailitatestheonstru\u00adtionofproof\u00adarryingode. \nWeviewDTALasatype\u00adtheoretiapproahtoreasoning aboutmemorysafetyatassemblylevel.Withastronger typesystemthanthatofTAL,DTALisexpetedtoapture \nprogramerrorsthatanslipthroughthetypesystemof TAL.ThisissupportedbythefatthatDMLanapture programerrorsinpratiewhiheludesthetypesystemof \nML. 9. CONCLUSION TALisatypedassemblylanguagewithatypesystemat assemblylevel.ThetypesystemofTALontainssomelimi\u00adtationsthatpreventertainimportantloop\u00adbasedoptimiza\u00adtionssuhasarrayboundhekeliminationandtaghek \nelimination.WehaveenrihedTALwitharestritedformof dependenttypesandtheenrihmentleadstoadependently typedassemblylanguage(DTAL)thatoveromestheselim\u00aditations.Wehaveestablishedthesoundnessofthetype \nsystemofDTALandimplementedatype\u00adhekingalgo\u00adrithm.Wehavealsoonstrutedaprototypeompilerwhih ompilesXanaduprogramsintoDTAL,whereXanaduisa \nprogramminglanguagewithC\u00adlikesyntaxthatsupportsa dependenttypesystemsimilartothatofDTALbutsignif\u00adantlymoreinvolved. \nInfuturework,weintendtostudyompilationwithde\u00adpendenttypes,translatingprogramsinDMLintoDTAL. Wefeelthatthepresentedapproahtorepresentingdepen\u00addentdatatypesinDTALhasmadeasignifantsteptowards \nahievingthisgoal.Onalargersale,weareinterested inbothusingtypestoapturemoreprogrampropertiesin high\u00adlevellanguagesandonstrutingertifyingompilers \ntotranslatethesepropertiesintolow\u00adlevellanguages. 10. ACKNOWLEDGMENT Wethanktheanonymousrefereesfortheirdetailedon\u00adstrutiveomments,whihhaveundoubtedlyraisedthequal\u00adityofthepaper. \n11. REFERENCES [1]R.W.Floyd.Assigningmeaningstoprograms.In J.T.Shwartz,editor,MathematialAspetsof ComputerSiene,volume19ofProeedingsof \nSymposiainAppliedMathematis,pages19.32, Providene,RhodeIsland,1967.Amerian MathematialSoiety. [2]R.Harper.Asimplifedaountofpolymorphi \nreferenes.InformationProessingLetters, 51:2O1.2O6,1994. [3]R.HarperandC.Stone.Atype\u00adtheoreti interpretationofStandardML.InG.Plotkin, \nC.Stirling,andM.Tofte,editors,RobinMilner Festshrift.MITPress,199S.(Toappear). [4]P.Martin\u00adLoof.IntuitionistiTypeTheory.Bibliopolis, \nNaples,Italy,19S4. [5]R.Milner,M.Tofte,R.W.Harper,and D.MaQueen.TheDefnitionofStandardML.MIT Press,Cambridge,Massahusetts,1997. \n [6]G.Morrisettetal.TalxS6:Arealistitypedassembly language.InProeedingsofWorkshoponCompiler SupportforSystemSoftware,1999. \n[7]G.Morrisett,D.Walker,K.Crary,andN.Glew.From systemFtotypedassemblylanguage.InProeedings ofACMSymposiumonPriniplesofProgramming \nLanguages,pagesS5.97,January199S. [S]G.Neula.Proof\u00adarryingode.InConfereneReord of24thAnnualACMSymposiumonPriniplesof \nProgrammingLanguages,pages1O6.119.ACMpress, 1997. [9]G.NeulaandP.Lee.Thedesignandimplementation ofaertifyingompiler.InACMSIGPLAN'98 \nConfereneonProgrammingLanguageDesignand Implementation,pages333.344.ACMpress,June 199S. [1O]Z.Shao.AnOverviewoftheFLINT/MLompiler.In \nProeedingsofACMSIGPLANWorkshoponTypesin Compilation(TIC'97),June1997. [11]D.Tarditi,G.Morrisett,P.Cheng,C.Stone, \nR.Harper,andP.Lee.Atype\u00addiretedoptimizing ompilerforML.InProeedingsofACMSIGPLAN ConfereneonProgrammingLanguageDesignand \nImplementation,pages1S1.192,June1996. [12]A.TolmahandD.P.Oliva.FromMLtoAda(!?!): Strongly\u00adtypedlanguageinteroperabilityviasoure \ntranslation.JournalofFuntionalProgramming, S(4):367.412,July199S. [13]H.Xi.DependentTypesinPratialProgramming. \nPhDthesis,CarnegieMellonUniversity,199S.pp. viii+1S9.Availableas http:IIwww.s.ru.eduI-hwxiIDMLIthesis.ps. \n[14]H.Xi.ImplementationsandExamplesforXanaduand DTAL.Availableat http:IIwww.ees.u.eduI-hwxiIXanadu-DTAL,1999. \n[15]H.Xi.ImperativeProgrammingwithDependent Types.InProeedingsof15thIEEESymposiumon LogiinComputerSiene,pages375.3S7,June2OOO. \n[16]H.XiandR.Harper.ADependentlyTypedAssembly Language.TehnialReportCSE\u00ad99\u00adOOS, OregonGraduateInstitute,July1999.Alsoavailableas \nhttp:IIwww.ees.u.eduI-hwxiIaaderiIpapersIDTAL.ps. [17]H.XiandF.Pfenning.Eliminatingarraybound hekingthroughdependenttypes.InProeedingsof \nACMSIGPLANConfereneonProgramming LanguageDesignandImplementation,pages249.257, Montreal,June199S. [1S]H.XiandF.Pfenning.Dependenttypesinpratial \nprogramming.InProeedingsofACMSIGPLAN SymposiumonPriniplesofProgrammingLanguages, pages214.227,SanAntonio,January1999. \n  \n\t\t\t", "proc_id": "507635", "abstract": "We present a dependently typed assembly language (DTAL) in which the type system supports the use of a restricted form of dependent types, reaping some benefits of dependent types at the assembly level. DTAL improves upon TAL , enabling certain important compiler optimizations such as run-time array bound check elimination and tag check elimination. Also, DTAL formally addresses the issue of representing sum types at assembly level, making it suitable for handling not only datatypes in ML but also dependent datatypes in Dependent ML (DML).", "authors": [{"name": "Hongwei Xi", "author_profile_id": "81100625632", "affiliation": "Univ. of Cincinnati", "person_id": "PP39051360", "email_address": "", "orcid_id": ""}, {"name": "Robert Harper", "author_profile_id": "81100140064", "affiliation": "Carnegie Mellon Univ.", "person_id": "PP39029370", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/507635.507657", "year": "2001", "article_id": "507657", "conference": "ICFP", "title": "A dependently typed assembly language", "url": "http://dl.acm.org/citation.cfm?id=507657"}