{"article_publication_date": "10-01-2001", "fulltext": "\n Possibilities and Limitations of Call-by-Need Space Improvement * J\u00a8orgen Gustavsson David Sands www.cs.chalmers.se/ \ngustavss www.cs.chalmers.se/ dave ABSTRACT Innocent-lookingprogramtransformationscaneasilychange thespacecomplexityoflazyfunctionalprograms.Thethe\u00adoryofspaceimprovementseekstocharacterisethoselo\u00adcalprogramtransformationswhichareguaranteedneverto \nworsenasymptoticspacecomplexityofanyprogram.Previ\u00adousworkbytheauthorsintroducedthespaceimprovement relationandshowedthatanumberofsimplelocaltrans\u00adformationlawsareindeedspaceimprovements.Thispaper \nseeksananswertothefollowingquestions:istheimprove\u00admentrelationinhabitedbyinterestingprogramtransforma\u00adtions,and,ifso,howmighttheybeestablished?Weshow \nthattheasymptoticspaceimprovementrelationissemanti\u00adcallybadlybehaved,butthatthetheoryofstrongspaceim\u00adprovementpossessesafxed-pointinductiontheoremwhich \npermitsthederivationofimprovementpropertiesforrecur\u00adsivedefnitions.Withthehelpofthistoolweexplorethe \nlandscapeofspaceimprovementbyconsideringarangeof classicalprogramtransformations. 1. INTRODUCTION Considerthefollowingequivalenceforapurefunctional \nlanguage:x+y=y+x.Howdoesthisafectthespacecom\u00adplexityofaprogram?Ofcourse,itdependsontheprogram {andthelanguage.Inalazyfunctionallanguagethetrans\u00adformationisnotspacesafe;thereareprogramsforwhich \nthisinnocent-lookingtransformationwillchangetheirspace complexity.NowconsiderthefollowingfamilyofHaskell \nprograms,indexedbysomeintegern: letxs=[1::n];x=headxs;y=lastxs inx+y Ifadditionisevaluatedfromleft-to-rightthenthisprogram \nrunsinconstantspace.Firstxisevaluatedtoobtain1,then * Anextendedversionofthisarticleisavailablefrom www.cs.chalmers.se/~gustavss.Authorsaddress:Depart\u00admentofComputingScience,ChalmersUnivertityofTech\u00adnologyandGooteborgUniversity. \nPermission to make digital or hard copies of all or part of this work for personal or classroom use is \ngranted without fee provided that copies are not made or distributed for pro.t or commercial advantage \nand that copies bear this notice and the full citation on the .rst page. To copy otherwise, to republish, \nto post on servers or to redistribute to lists, requires prior speci.c permission and/or a fee. ICFP \n01, September 3-5, 2001, Florence, Italy. Copyright 2001 ACM 1-58113-415-0/01/0009 ...$5.00. yisevaluated,whichinvolvesconstructingandtraversing \ntheentirelist[1::n].Fortunately,thecombinationoflazy evaluation,tailrecursionandgarbagecollectionguarantees \nthatasthislistisconstructedandtraverseditcanalsobe garbagecollected,andthusthecomputationrequiresonly \nconstantspace.Butifx+yisreplacedbyy+xthespacere\u00adquiredisO(n).Thisisbecausewhenybuildsandtraverses thelist[1::n],theelementscannotbegarbage-collectedbe\u00adcausethewholelistisstillliveviatheoccurrenceofxsin \nthebodyofx.Sowecanconcludethatreplacingx+yby y+xcangiveanasymptoticchangeinspacebehaviour{i.e., thereisnoconstantwhichboundsthepotentialworseningin \nspacewhenthislawisappliedinanarbitrarycontext.The exampleistakenfromourpreviouswork[10],andservesto \nillustratethesubtletiesofspacebehavioursoflazy functionalprograms 1 ,andto  motivatethestudyoftheclassofprogramtransfor\u00admationswhicharespace-safe. \n Tothisend,weintroducedaspace-improvementrelationon terms,whichguaranteesthatwheneverMisimprovedby N,replacementofMbyNinaprogramcanneverleadto \nasymptoticallyworsespace(heaporstack)behaviour,fora particularmodelofcomputationandgarbagecollection. \nSpaceimprovementguarantees,byconstruction,thatit neverworsensthespacecomplexityofaprogram.But giventhepreviousexample,itisnotimmediatelyclearthat \nthereareanyinterestingtransformationswhicharespace improvements.Inthepreviousworkweshowedthatthere areindeedtransformationlawswhichareimprovements.2 \nForexample,thebeta-vartransformationbetween(Ax:M)y andM[y/x]isshowntobeaspaceimprovement. Butthepreviousworkdidnotprovideanyprinciplesfor \nestablishingpropertiesofrecursivefunctions(otherthana generalcontextlemma),anddidnotyieldanyimprove\u00admentexamplesbeyondthoseobtainablebycomposingsim\u00adplelaws.Thispaperseeksananswertothefollowingques\u00adtions:istheimprovementrelationinhabitedbyinteresting \nprogramtransformations,and,ifso,howmighttheybees\u00adtablished?Forexample,istheassociativitypropertyoflist \n1Undercall-by-valuethereisnoproblem:bothprograms haveO(n)spacecomplexity{althoughonecanconstruct similarexamplesforcall-by-value. \n2Wealsoshowedhowspaceimprovementcouldbeusedindi\u00adrectlytoverifythespace-safetyofinliningtransformations \nwhichmakeuseofcertainsingle-usagetypesystems,but thisapplicationissomewhatorthogonaltotheconcernsof thepresentpaper,sinceitdealswithaglobalprogramtrans\u00adformation. \nconcatenationaspaceimprovementineitherdirection?Are typicaltailrecursionoptimisationsspacesafe?Althoughthe \nasymptoticspaceimprovementrelation,weakimprovement, issemanticallybadlybehaved,thetheoryofstrongspaceim\u00adprovementpossessesafxed-pointinductiontheoremwhich \npermitsthederivationofimprovementpropertiesforrecur\u00adsivedefnitions.Withthehelpofthistoolweexplorethe \nlandscapeofspaceimprovementbyconsideringarangeof classicalprogramtransformations,anduncoveringanum\u00adberoffundamentallimitationstowhatcanbeachievedby \nlocalimprovement. Overview Theremainderofthearticleisorganisedasfol\u00adlows.Section2givesthesyntaxandoperationalsemantics \nofourlanguage.Section3defneswhatwemeanbythe space-useofprograms,intermsofadefnitionofgarbage collectionforabstract-machineconfgurations.Section4 \ndefnesthemainimprovementrelation,weakimprovement, andpresentsthebasiclawsandpropertiesofthisrelation. \nSection5describesafner-grainedimprovementrelation, strongimprovement,andestablishesafxed-pointinduction \nprinciple.Section6appliesthetheorytoinvestigatea rangeoftransformations.Section7describesrelatedwork \nandconcludes. 2. OPERATIONAL SEMANTICS Ourlanguageisanuntypedlambdacalculuswithrecur\u00adsivelets,structureddata,caseexpressions,boundedintegers \n(rangedoverbynandm)withadditionandazerotest.We workwitharestrictedsyntaxinwhichargumentstofunc\u00adtions(includingconstructors)arealwaysvariables: \nL,M,N::=xjAx:MjMxjc~xjseqMN jnjM+NjaddnMjiszeroM jletf~x=MginNjcaseMoffci ~xi.Nig ~ Thesyntacticrestrictionisnowratherstandard,following \nitsuseincorelanguageoftheGlasgowHaskellcompiler, e.g.,[22,23],andin[14,28].Inexampleswewillsome\u00adtimesuseunrestrictedapplicationMNassyntacticsugar \nforletfx=NginMxwherexisafreshvariable.Simi\u00adlarlyforconstructorexpressions. Allconstructorshaveafxedarity,andareassumedtobe \nsaturated.Byc~xwemeancx1...xn.Throughout,x,y,z etc.,willrangeovervariables,coverconstructornames,and \nVandWovervalues(Ax:Mjc~xjn).Wewillwrite ~ letf~x=MginN asashorthandforletfx1=M1,:::,xn =MnginNwhere the~xaredistinct,theorderofbindingsisnotsyntactically \nsignifcant,andthe~xareconsideredboundinNandtheM ~(soourletsarerecursive).Similarly,caseMoffci ~xi.Nig \nisashorthandfor caseMoffc1~x1.N1j ...jcm ~xm.Nmg: whereeach~xiisavectorofdistinctvariables,andtheciare \ndistinctconstructors.Inaddition,wewillsometimeswrite altsasanabbreviationforcasealternativesfci ~xi.Nig. \nOurintegersarebounded(i.e.,foranintegern,MININT: n:MAXINT)sothattheycanberepresentedinconstant space.Forsimplicity,noexceptionoccursatoverfow.In\u00adsteadtheresultwrapsasine.g.,C.Thefunctionsaddnare \nincludedforconvenienceinthedefnitionoftheabstract machine,andrepresentanintermediatestepintheaddition \nofntoaterm. Theonlykindofsubstitutionthatweconsiderisvariable forvariable,witharangingoversuchsubstitutions.The \nsimultaneoussubstitutionofonevectorofvariablesforan\u00adotherwillbewrittenM[y~/],wherethe~xareassumedtobe \n~x distinct(butthe~yneednotbe). 2.1 The Abstract Machine ThesemanticspresentedinthissectionisessentiallySes\u00adtoft's\\mark1\"abstractmachineforlaziness[28].Transi\u00adtionsareoverconfgurationsconsistingofaheap,contain\u00adingbindings,theexpressioncurrentlybeingevaluated,and \nastack.Wewriteh;,M,Sifortheabstractmachinecon-fgurationwithheap;,expressionM,andstackS.Aheap isasetofbindings;wedenotetheemptyheapby0,and \n~ theadditionofagroupoffreshbindings~x=Mtoaheap ~ ;byjuxtaposition:;f~x=Mg.Thestackwrittenb:Swill denotethestackSwithbpushedonthetop.Theempty \nstackisdenotedbyE. Stackelementsareeither: areductioncontext,or anupdatemarker#x,indicatingthattheresultofthe \ncurrentcomputationshouldbeboundtothevariable xintheheap. Thereductioncontextsonthestackareshallowcontexts \ncontainingasingleholeina\\reduction\"position-i.e.ina positionwherethecurrentcomputationisbeingperformed. \nTheyaredefnedas: R::=[.]xjcase[.]offci ~xi.Nigjseq[.]M [.]+Mjaddn[.]jiszero[.] Wewillrefertothesetofvariablesboundby;asdom;, \nandtothesetofvariablesmarkedforupdateinastackS asdomS.Updatemarkersshouldbethoughtofasbinding occurrencesofvariables.Aconfgurationiswell-formedif \ndom;anddomSaredisjoint.Wewritedom(;,S)fortheir union.Foraconfgurationh;,M,Sitobeclosed,anyfree variablesin;,M,andSmustbecontainedindom(;,S). \nThefreevariablesofatermMwillbedenotedFV(M);for ~~ avectoroftermsM,wewillwriteFV(M). TheabstractmachinesemanticsispresentedinFigure1; \nweimplicitlyrestrictthedefnitiontowell-formedclosed confgurations. Thefrstgroupofrulesarethestandardcall-by-needrules. \nRules(Lookup)and(Update)concernevaluationofvari\u00adables.Tobeginevaluationofx,weremovethebinding x=MfromtheheapandstartevaluatingM,withx, \nmarkedforupdate,pushedontothestack.Rule(Update) applieswhenthisevaluationisfnished,andwemayupdate theheapwiththenewbindingforx.Rule(Letrec)addsa \nsetofbindingstotheheap. Thebasiccomputationrulesarecapturedbythe(Push) and(Reduce)rulesschemas.Therule(Push)allowsusto \ngettotheheartoftheevaluationby\\unwinding\"ashallow reductioncontext.Whenthetermtobeevaluatedisavalue andthereisareductioncontextonthestack,the(Reduce) \nruleisapplied. h;fx=Mg, x , S i ! h ;, M , #x:Si (Lookup) h;, V , #x:Si ! h ;fx=Vg, V , S i (Update) \nh;,let; 0inN , S i ! h ;; 0 , N , S i (Letrec) h;, R [M], S i ! h ;, M , R :Si (Push) h;, V , R :Si ! \nh ;, M , S i ifR[V]-M (Reduce) (Ax:M)y-M[y/x] casecj~yoffci ~xi.Mig-Mj[y~/] ~xj seqV M-M m+N-addmN addmn-pm+nq \n( trueifm=0 iszerom\u00ad falseotherwise Figure1:Abstractmachinesemantics  3. SPACE USE AND GARBAGE COLLEC-TION \nAdesiredpropertyofourmodelofspace-useisthatit isasymptoticlycorrectwithrespecttoactualimplementa\u00adtions.Unfortunately,diferentabstractmachinesandgarbage \ncollectionstrategiesdiferintheirasymptoticspacebehaviour. Giventhediferentspacebehavioursofdiferentimplemen\u00adtationsthereisnohopethatwecanconstructatheorywhich \nappliestoallimplementations.Althoughwewillchoosea particularmodelofspaceusewebelievethatmostofthere\u00adsultsandtechniquesdevelopedinthispapercanbeadapted \ntoanyreasonablemodel.In[9]wediscusssomeofthesubtle waysinwhichdiferentabstractmachinesandimplementa\u00adtionsdescribedintheliteraturediferfromourmodeland \neachother.BakewellandRunciman[2]focusontechniques forcomparingdiferentevaluators. Anotherpointofdisputeiswhethertodistinguishbetween \nheapandstackspace.Manyimplementationsallocatesep\u00adaratememoryfortheheapandthestack,butinprinciple thestackandtheheapcansharethesamememory.So, \nshouldatransformationwhichtradesheapforstack,orvice versa,berejected?Anddosuchtransformationshowup\\in \npractice\"?Wefocusmainlyonatheorywhichkeepsstack andheapusageseparate.However,wewillseeexamplesof transformationswhichusefullytradestackforheap. \n3.1 Measuring space Wemeasuretheheapspaceoccupiedbyaconfguration bycountingthenumberofbindingsintheheapandthe \nnumberofupdatemarkersonthestack.Wecountupdate markersonthestackasalsooccupyingheapspace,sincein atypicalimplementationanupdatemarkerreferstoaso\u00adcalled\\blackholeclosure\"intheheap{aplaceholderwhere \ntheupdateeventuallywilltakeplace.Wewillcountevery bindingasoccupyingoneunitofspace. Inpracticethesizeofabindingvariessinceabindingis \ntypicallyrepresentedbyatagoracodepointerplusanen\u00advironmentwithoneentryforeveryfreevariable.However, therighthandsideofeverybindingisa(possiblyrenamed) \nsubexpressionoftheoriginalprogram,(apropertyofthese\u00admanticssometimescalledsemi-compositionality)socount\u00adingitasoccupyingoneunitofspacegivesameasurewhich \niswithinaconstantfactor(dependingonlyontheprogram size)oftheactualspaceused.Integersareanexceptionto \nthisclaim,butrecallthatourintegersareboundedsothey canalsoberepresentedinaconstantamountofspace. Wemeasurestackspacebysimplycountingthenumberof \nelementsonthestack,soanupdatemarkerwillbeviewed asoccupyingbothheapandstackspace.Inpracticeev\u00aderyelementonthestackdoesnotoccupythesameamount \nofspace,butagain,semicompositionalityoftheabstract machineassuresthatourmeasureiswithinaprogram-size\u00addependentconstantfactor.Thesizeofaconfguration,writ\u00adtenjh;,M,Sijisapair(h,s)wherehandsistheamount \nofheapandstackrespectivelyoccupiedbythetheconfgu\u00adration. 3.2 Garbage collection Wecannotreasonaboutspaceusagewithoutmodelling \ngarbagecollection.Duringacomputation,garbagecollec\u00adtionallowsustodecreasetheamountofspaceusedbya confguration.Itismodelledsimplybytheremovalofany \nnumberofbindingsandupdatemarkersfromtheheapand thestackrespectively,providingthattheconfgurationre\u00admainsclosed. \nDefinition3.1(GC).Garbagecollectioncanbeap\u00adpliedtoaclosedconfgurationh;,M,Sitoobtainh;0 ,M,S0i, 00 00 \nwrittenh;,M,Simh;,M,Siifandonlyifh;,M,Si isclosed,andcanbeobtainedfromh;,M,Sibyremoving zeroormorebindingsandupdatemarkersfromtheheapand \nthestackrespectively. Thisisanaccessibility-baseddefnitionasfoundine.g.,the gc-reductionruleof[20].Theremovalofupdate-markers \nfromthestackisnotsurprisinggiventhattheyareviewed asthebindingoccurrencesofthevariablesinquestion. Wearenowreadytodefnewhatitmeansforacompu\u00adtationtobepossibleincertainfxedamountofspace. \nDefinition3.2(Convergenceinfixedspace). E!(h s)def 1.E0=E!E0andjEj:(h,s). (h s)def 2._ =therefexiverelationalcompositionof \ndef 3.h;,M,Si+(h s) =9l,V (h s) h;,M,Si_ hl,V def andtransitiveclosureofthe !(h s) andm. : ,Eiandjhl,V,Eij:(h,s). \n4.M+(h s) =h0,M,Ei+(h s): WereadM+(h s)asMcanconvergewithin(h,s)space,i.e., themaximumheap,andstackislessthanorequaltohand \nsrespectively.  4. WEAK IMPROVEMENT Intheprevioussectionwedefnedanotionofspacewhich webelieveisrealisticinthesensethatanactualimplemen\u00adtation(usingourreasonablyaggressivegarbagecollection) \nwillrequirespacewithinaconstantfactorofourabstract measure,wheretheconstantdependsonthesizeofthepro\u00adgramtobeexecuted. \nInthissectionwedefnespaceimprovementwithinacon-stantfactor{whatwewillsimplyrefertoasWeakImprove\u00adment{whichsaysthatifMisimprovedbyN,replacingM \nbyNinanyprogramcontextwillneverleadtomorethan aconstantfactorworseninginspacebehaviour,wherethe constantfactorisindependentofthecontext. \nThestartingpointforanoperationaltheoryisusuallyan approximationandanequivalencedefnedintermsofpro\u00adgramcontexts.Programcontextsareusuallyintroducedas \n\\programswithholes\",theintentionbeingthatanexpres\u00adsionistobe\\pluggedinto\"alloftheholesinthecontext. Thecentralideaisthattocomparethebehaviouroftwo \ntermsoneshouldcomparetheirbehaviourinallprogram contexts. Wewillusecontextssuchthatholesmaynotoccurin \nargumentpositionsofanapplicationoraconstructor,forif thiswerethecase,thenfllingahole(withanonvariable) \nwouldviolatethesyntax.Contextsmaycontainzeroor moreoccurrencesofthehole,andasusualtheoperationof fllingaholewithatermcancausevariablesinthetermto \nbecomecaptured.WewillwriteC[M]forfllingtheholesin CwithMandwewillwriteCV(C)forthevariableswhich maybecapturedbyfllingtheholesinC. \nDefinition4.1(WeakImprovement).Wesaythat B MisweaklyimprovedbyN,writtenM\u00a3N,ifthereexists alinearfunctionf2N!NsuchthatforallC,asuchthat \nC[Ma]andC[Na]areclosed, C[Ma]+(h s) =)C[Na]+(f(h)f(s)): SoMBNmeansthatNnevertakesupmorethanacon\u00ad \u00a3 stantfactormorespacethanM(butitmightstillusenon\u00ad \nconstant Ntomeanthatfactorlessspace).WewriteM CB \u00a3 M.In[10]weestablishedanumberof linearfunctionfsuchthatforevery;,Sanda, \nh;,Ma,Si+(h s) =)h;,Na,Si+(f(h)f(s)), 7 butwhereM\u00a3N. Theproofcanbefoundin[9]. 4.2 Fixed Point Approximation \nItistypicalinsemanticstocharacteriserecursioninterms ofthe\\fniteapproximations\"ofrecursivedefnitions.This \napproachisbuiltintotheScott-styledenotationalsemantics approachwhererecursionismodelledbyaleastfxedpoint \nconstruction.Theessenceofthisapproachcanbeexpressed inapurelyoperationalsetting.Seee.g.[29,15]. Thenaturalformulationoftheleastfxed-pointproperty \nalsofailstoholdforweakimprovement(apreciseformu\u00adlationcanbefoundin[9]).Intuitivelythereasonforthis failureisthatoncewefxanunwindingwemaybeableto \nfndaconstantfactorthatboundsthespacediference,but wecan'tfndasingleconstantfactorthatworksforallun\u00adwindings.Fortunatelyitdoesholdforastrongernotionof \nimprovementintroducedinthenextsection. 5. STRONG IMPROVEMENT Thefailureofthecontextlemmaandthefxed-pointap\u00adproximationpropertygiveaveryconcretemotivationfor \nstudyingastrongerrelation,strongimprovement: Definition5.1(Strongimprovement). MisstronglyimprovedbyN,writtenMBifforallC, \n;N,asuchthatC[Ma]andC[Na]areclosed, C[Ma]+(h s) =)C[Na]+(h s): M BB NandN \u00a3\u00a3 propertiesandlawsforweakimprovements.Werecitetwo \nofthemhere. Proposition4.1(Precongruence[10]). Bisaprecongruence{i.e.,itisatransitiveandrefexive \u00a3 relationwhichispreservedbycontextsandsubstitutions. \nThefollowingpropertyisfundamental,andhighlightsthe signifcanceoffreevariablesinthistheory: Theorem4.2(FreeVariableProperty[10]). \nB M\u00a3N=)FV(M)2FV(N). Freevariablesaresignifcantbecausetheycanhaveanef\u00adfectonthespaceusageofaprogramevenwhentheyare \nsemantically\\deadcode\".  4.1 Limitations of Weak Improvement Astandardresultforanyoperationaltheoryisacontext \nlemma[16].Acontextlemmainthiscasewouldestablish thattoprovethatMisweaklyimprovedbyN,oneonly needstocomparetheirbehaviourwithrespecttoamuch \nsmallersetofcontexts,namelythecontextwhichimmedi\u00adatelyneedtoevaluatetheirholes. Despiteoureforts,in[10]wewerenotabletoprovethe \ncontextlemma.Thereasonisthatthecontextlemma,as weenvisageit,doesnotholdforweakimprovement: Theorem4.3(Failureofthecontextlemma). \nThereexisttermsMandNwithFV(M)2FV(N)anda BB andN ;N; WewriteM CBgadgetinturn. ; Althoughthedefnitionofstrongimprovementissome\u00adwhatarbitrary{sinceitdealswithconstantfactorsfora \nhigh-levelabstractmachine{itprovidesapracticalmeans toestablishweakimprovementlaws,sincewheneverMB ;N \nB thenclearlyM\u00a3N.Inthissectionwepresentsomeofthe basicpropertiesofstrongimprovement,andourkeytech\u00adnicalresult:afxed-pointapproximationtheoremforestab\u00adlishingimprovementpropertiesofrecursivedefnitions. \nWebeginwithsometechnicaldevelopmentswhichare necessarytosupportreasoningaboutstrongimprovement. Forstrongimprovementwehavealsoestablishedacontext \nlemma[16]:toprovethatMisstronglyimprovedbyN, oneonlyneedstocomparetheirbehaviourwithrespectto amuchsmallersetofcontexts,namelythecontextwhich \nimmediatelyneedtoevaluatetheirholes. Lemma5.1(ContextLemma[10]).ForallMandN suchthatFV(M)2FV(N),ifforall;,Sanda, \nh;,Ma,S=)h;,Na,SthenMB i+(h s) i+(h s);N. Withhelpofthecontextlemmawehaveestablishedasetof basiclawsofstrongimprovement.Thelawswerepresented \nin[10]andwewillnotreproducethemhere.  5.1 The Space Gadgets Thespacegadgetsaresyntacticmeanstorepresentand \ncontrolthespacepropertiesofterms.Theyplayacrucial roleinstrongimprovementcalculations.Wedescribeeach \nNtomeanthatM M. Dummy References Theuseofdummyreferencesallows onetomakeassertionsabout,andtomodifytheliveness \npropertiesofvariables.Tothisendweintroducethefollow\u00adingnotationalextension,termsoftheformwhereX XM isamultisetofvariables.Theconstructisrepresentablein \nthelanguageandisdefnedthus f~xgdef M=letf~y=~xginMwherey~arefresh. XMvariablesinXuntiltheevaluationofMstarts.IfXwould \nrangeoveraset,ratherthanamultiset,thenthenotation HencebehavesasMbutinadditionholdsontothe ofexistinglanguageconstructs,butmustbeaddedasacol\u00adlectionofterm-annotationswithaspeciallydefnedspace\u00adsemantics. \nInourdefnitionofspaceusewecounteveryentityonthe stackorontheheapasoccupyingexactlyoneunitofspace, achoicejustifedbyourdesiretoultimatelyreasonabout \nasymptoticbehaviour.Butitturnsouttobecrucialtobe abletoselectivelychooseexactlyhowmuchspaceeachentity \nshallaccountfor{i.e.,whattheweightoftheentityshould be.Consider,forexample,thefollowingweakequivalence \nlawforreductioncontexts: wouldnotbewelldefnedwithrespecttosubstitution.R[caseMoffpati.Nig] CB \u00a3 caseMof \nfpati.R[Ni]g Dummyreferencescanexpresscertainlivenessproperties. Itisnotastrongspaceequivalencesincethelefthandside \ntakesupmorespace:whileMisbeingevaluated,bothR Forexample,ifC[M] B ; C[fyg M]thenweknowthatyis stillliveattheoccurrenceofM.Amongotherthingswe \nandthecase-alternativestakeupstackspace(2unitsofwillusedummyreferencestocontrolthelifetimeofdummyspace).Intherighthandside,whileMisbeingevaluated \nbindings,i.e.,bindingshplaynor^inthetermbutto whicole thereisjustasinglesetofcasealternatives(1unitofstack \ntakeupspace.Toadddummybindingsisharmlessinthe space).Wecancompensateforthis,andsimplifyourcalcu\u00adweaktheoryaslongastheirlifetimeiscoupledtoanother \nlations,ifwecountthecaseintherighthandsideasoccu\u00ad binding. pyingtwounitsofstack,whichwedenotebythefollowing \n Lemma5.2(DummyBindingIntroduction). weightannotation: x= fzg MginN,zfresh fx = MginN CB \u00a3 let fz =n \nlet 2 , R[caseMof fpati.Nig] caseMof fpati.R[Ni]g CB ; Spikes Spikesareamortisationdevicewhichallowusto \nrepresentaveryshort-livedspaceusage{aspikeinthe space-usageprofle.Spikescomeintwovarieties,heapspikes \nandstackspikes. Thestackspikeisdefnedthus gdef M=casetrueofftrue.Mg Ithastheshort-livedefectofincreasingthestackusageby \noneunit,atthemomentthatMisabouttobeevaluated.To seehowstackspikesareused,considerhowonemightprove Thisisnottheonlyformofweight,butbeforeweconsider \nfurtherexampleswewillsketchthesemanticsofweights. Wewillannotateeveryentityontheheapandthestack withaweightw:0.Bindingoccurrencesofvariables,in\u00adcludingupdatemarkers(whichareconsideredtotakeup \nbothheapandstackspace,seeSection3.1)areannotated withtwoweights,onefortheheapandoneforthestack. Thespaceconsumptionofeachentityisgivenbythefollow\u00ading: \njwvx=Mj=(v,0)jwRj=(0,w)j#wvxj=(v,w) the(restricted)beta-reductioncostequivalence(Ax:M)y CB \u00a3 Sotheupperweightofthebinderisthestackweight,in\u00ad \n M[y/x].Todothisweusestrongimprovement.Thecontext curredwhentheupdatemarkerisonthestack;thelower M[y/x]:weightistheheapweight{thesizeofthebindingonthelemmamakesiteasytoestablishthat(Ax:M)y \nB ; heap.Theconversedirectionalsoholdswithinaconstantfactor (undertheassumptionthatyoccursfreeinM[y/x]).TheNotethatweightsmaybezerosowecanspecifythatan \nonlydiferencewhengoingfromtheright-handsidetotheentityshouldn'tbecountedforatall.Anentitywithout leftisthatthelefthandsidewillmomentarilyuseuponeaweightannotationwillnowbetakenasshorthandfora \nstackunitmorethantheright-handside.Toprovethatweightof1.Theweightonbindingsandstackelements B(Ax:M)y\u00a3 \noriginatefromannotationintheprogram.Ourannotated M[y/x] weusethecontextlemmatoshowthat termlanguageis \ngM[y/x ] B ; (Ax:M)yify2FV(M[y/x ]): L,M,N::=xjAx:Mjw(Mx)jc~xjw(seqMN) Allthatisleftistoestablishthatspikeintroductionisjnjw0(M+w1N)jw(addnM)jw(iszeroM) \nharmlessintheweaktheory: jletfmniixi=MiginN i2I w j (caseMoffci ~xi.Nig): g Lemma5.3(SpikeIntroduction[10]).M \nM: CB \u00a3 Weightsonbindingoccurrencesofvariablesareperma\u00ad Theheapspikeistheheapanalogueofthestackspike;it \nnent.Theonlyrulewhicheliminatesweights(garbagecol\u00ad momentarilyincreasesthesizeoftheheapatthepointin lectionexcepted)is \ntimewhenthetermisreadytobeevaluated. h;, wR[M],Si!h;,M, wR:Si(Push) fdef fxg M=letx=ninMwherexisfresh \nh;VwifR[V]M(Reduce) i!h;,M,Si R:S - ,, Heapspikesarealsoharmlessintheweaktheory,i.e.,M fM. CB \u00a3 Ofcourse,weightshavenointrinsicinterestforprogram\u00ad \nmers{theyareabookkeepingmechanismwhichweuseto syntacticallyaccountforcertainformsofspaceusage.As Weights \nThemostcomplexgadgetsaretheweights3 .Weights withspikes,acrucialpropertyofweightsisthattheyin\u00adaremoreinvolvedbecausetheycannotbedefnedinterms \n creasespaceuseinthestrongtheorybutdonotchange 3Ageneralisationoftheballastsfrom[10].spacebehaviourbymorethanaconstantfactor: \nLemma5.4.Forv,w 0, freevariablesarenotcostequivalent{simplybecausewhen placedinaprogramcontext,theirfreevariablescanafect \nwR[M]. 1.R[M] CB \u00a3 theamountoflivedata,andhencethespace.Themore freevariablesadivergenttermcontainsthemorespaceit \nw(M+v N). 2.(M+N) CB \u00a3 canretain,andhencethelowerintheimprovementorder- CB let a;fwvx=MginN.ingitsits.Thisissignifcantwhenwedefnethenotionof \n 3.let;fx=MginN \u00a3 chainoffniteunwindingsofarecursivedefnition.Usually Zeroweightsor\\balloons\"playaspecialrole,andmustbe \nhandledwithcare.Azeroweightpermitscoststobehidden. Thisisveryusefulinstrongimprovementcalculationssince \nitcutsdownsignifcantlyonthe\\noise\"ofweightbookkeep\u00ading.However,addingzero-weightsispotentiallyunsound, \nsincewemightenduphidinganasymptoticamountofspace usage.Inotherwords,wecannotarbitrarilyintroducezero \nweightsintheweakimprovementtheory(c.f.Lemma5.4). Therearetwowaysinwhichwecanjustifyzero-weightin\u00adtroduction.Thefrstisifanentityisshort-livedsothatit \ncan'tafecttheasymptoticspacebehaviour.Wewillheavily usetwoinstancesofthis:thattheupdatemarkerweightof \navaluebindingcanbesafelyignoredandthattheweight ofastackframeassociatedwithanapplicationofaknown functioncanbeignored.Thisisbecauseitslifetimeonthe \nstackisonlyonecomputationstep. thefrstapproximationinsuchachainisthebottomele\u00admentbuthereweneedtostartfromadivergenttermwith \ntherightamountoffreevariables. Wearenowreadytodefnepreciselythefniteunwindings ofarecursivedefnition. \nDefinition5.2(FiniteUnwindings).LetVbeavalue contextwithatleastoneoccurrenceofthehole.Wedefne letfwvf=V[f]ginC[fn]inductivelybythefollowingclauses: \n0def ffg fw fw letvf=V[f]ginC[f]=letvf=V[f]ginC[n] C[fn+1def letfvwf=V[f]gin]=letfvwf=V[f]ginC[wgV[fn]] \nUsingtheresultsfrom[10]itiseasytoshowthattheap\u00adproximationsformanimprovementchain:Forall0:ij let fw v \nf=V[f]ginC[f i ] B ; let fw v f=V[f]ginC[f j ] Lemma5.5(Balloonintroduction). fw f0 andthatletvf=V[f]ginC[f]isanupperboundofthe \nx=VginN 1.letfx=VginN CB \u00a3 let chain-i.e.,foralli, 0 2.(Ax:M)y ((Ax:M)y) i fw v CB \u00a3 ] B ; let fw v \nf=V[f]ginC[f]: let f=V[f]ginC[f Wewillusezero-weightsonapplicationsoftensoweintro\u00ad0Thecrucialpropertyofstrongimprovementisthatthere\u00adduceanabbreviationandwriteM.xfor(Mx).Thesecond \n lationiscontinuouswithrespecttounwindingofrecursion. waythatweintroducezeroweightsisviaa\\top-level\"as-Thedefnitionoffistheleastupperboundofthischain. \n sumption.Itissafetointroducezeroweightstobindings whichwillnotbeallocatedmultiply.UnfortunatelythisisTheorem5.7(SyntacticContinuity). \nnotapropertythatholdsinallcontexts,butisstillrea-letfwvf=V[f]ginC[f] B () M ; sonable.Forexample,functionsfromastandardlibraryarefw \n8n:let v C[fn B f=V[f]gin] M ; typicallyallocatedjustonce{i.e.theyaretopleveldef\u00ad initions.Ifafunctionisdefnedattop-levelthensetting \nheap-weighttozerocanhaveatmostaconstantfactoref\u00adfect: Lemma5.6.Forevery;thereexistksuchthatforevery M,ifletflginM+(h \ns)thenletf;ginM+(h+ks),where listheresultofsettingallheapweightsonboundvariables in;tozero. Finally,wenotethatwiththehelpofweightswecan \nThetheoremformsthebasisofthefxed-pointinduction techniquewhichwespelloutattheendofthesection.A proofcanbefoundin[9]. \n 5.3 Derivations in Context Wewilloftenexpresspropertieswhicharerelativetoa fxedsetoffunctiondefnitions.Itiscumbersometocarry \nsuchdefnitionsinexplicitlet-terms,soweadoptauseful notationforderivationsincontext: increasethesizeofthestackandheapspikes: \nDefinition5.3.Wewrite;`M B Nasanabbrevia\u00ad ; 0 def tionforthefollowingproperty:Forall ngM= n casetrueofftrue.Mg \n, Canda,if ; def fxg nf M=letnx=ninMwherexisfresh dom;0\\dom;=0, Nowthatwehaveourspacegadgetswewillusethemboth \nCV(C)\\(dom;[FV(;))=0and inthenextsectiontodevelopourmaintechnicalresult, doma\\(dom;[FV(;))=0,afxed-pointinductionprinciple,andalsotoapplyitto \nconcreteexamplesinthefollowingsection. thenletf;;0 g inC[Ma] 0 B f;; letinC[Na]. g;  5.2 Fixed-Point \nInduction Wewillwriteaderivation Inthissectionweintroducetheleastfxed-pointproperty BB ; B M1M2::: \nforstrongimprovement,whichwillprovidetheprincipaltool ; forreasoningabouttherelativespacebehaviourofrecursive \ntomean;` BB M0 M2andsoon.These ; functions,asimpleformoffxed-pointinduction. contextualjudgementssatisfyanumberofsimpleproperties \nWestartatthebottom.AconsequenceofTheorem4.2is whichfacilitatetheiruse. M B N B B L N n+1 ;`letfxs=repeat \nxginM ; ; ; ; Wealsoextendournotationforfniteunwindingsinthe obviouswayandwrite;`C[fn]forthen'thunwindingof \nf(wherefisboundin;). Withtheabovenotationandpropertieswehavethefol\u00adlowingsimplecorollaryofsyntacticcontinuity,expressedin \naninformalnatural-deductionstyle. Corollary5.9(Fixedpointinduction).Thefollow\u00adingproofruleissound: 01 \n; ; B B `` MN ML ;; ; ; 0 B ` \\dom;=0 M Ndom;; B ;;0`M ; B ` CV(C)\\(dom;[FV(;))=0 M N ; B ` C[M]C[N]; \n; B ` \\(dom;[FV(;))=0 M Ndoma ; B `M N ; aa ; Proof.Weproceedbyfxed-pointinductionoverthedefni\u00ad tionofrepeat.Thebasecaseistrivialandhasbeenomitted. \nThefollowingderivationshowstheinductivestep,wherewe haveelidedstepswhichonlymanipulatespikes. =letfxs= \ng(Ax:letfys=repeat n xginx:ys)xginM letfxs=letfys=repeat n xginx:ysginM B ; B ; letfxs=letfys=x:ysginx:ysginM \nB ; letfxs=x:xsginM Case Study 2: Intermediate Data Structures Ournextexampleconcernsintermediatedatastructures \nproducedbyadefnitionoftheHaskellpreludefunction any. 4Thefunctiontakestwoarguments:apredicatep andalistxsandtestswhetheranyoftheelementsofthe \nlistfulflsthepredicate.Thefunctioncanbedefnedina directrecursivestyle: C[fn B anypxs=casexs of ` ] M \n; ; . nil.false `0 B BC . 8n C[f ] M ; . ; @ A y:ys.pyjjanypys C[fn+1 `] B M ; ; wherejjistheinfxlogicaloroperator.Howeverinthe \nB `C[f] M ; ; Haskellreport[13]anyisdefnedinanelegantcombinator `C[f0 B style: Thatistosay,ifwecanestablish \n] Mand ; ; thatundertheassumptionthat;`C[fn] B Mfor some 0 anyp=or0 ; mapp C[fn+1 arbitrarynwecanshow;`] \nB ; M,thenitholds whereorisdefnedas B that;`C[f] M. ;  6. POSSIBILITIES AND LIMITATIONS Armedwithameanstoestablishimprovementproperties \nforrecursivefunctions,intherestofthispaperwewillinves\u00adtigatethepossibilitiesandlimitationsofspaceimprovement. \nTherequirementisthattransformedprogramsshouldim\u00adproveonthespacebehaviourinallcontexts.Arethereany interestingtransformationswhicharespaceimprovements? \nInthissectionwepresentexamplesofsomestandardpro\u00adgramtransformations,andshowhowspaceimprovement canbeestablishedusingthetoolsfromtheprevioussec\u00adtions.Theresultsarenotallpositive;wewillalsoshow \nthattherearemanytransformationsthatarenotspaceim\u00adprovements.  Case Study 1: Cyclic Structures Wewillstartwithaverysimpleandintuitivespaceimprove\u00admentwhichserves,aboveallelse,toillustratetheuseofthe \nfxed-pointinductionmethod.Wewillshowthatthecyclic datastructurexs=x:xsimprovesonthenon-cyclicstruc\u00ad turethatisgeneratedbyrepeatxwhererepeatisdefned \nor=foldr(jj)false Apartfromthestylisticdiferences,thereisakeyopera\u00adtionaldiferencebetweenthetwodefnitions.Thelatter, \nwhenappliedtopandxs,buildsalistmappxs.Interest\u00adingly,severaldiscussionsontheHaskellmailinglistwhere concernedabouttheefciencyofthelatterdefnition.In \nparticular,thattheconstructionofthelistwouldleadtoa spaceleakproportionaltothelengthofthelist.Thereplies \nonthemailinglistwereoftwokinds.Thefrstkindempha\u00adsisedthatthedefnitionintheHaskellreportshouldbeseen asaspecifcation(areferenceimplementation)ofonlythe \nextensionalbehaviourofany.Aparticularcodedistribution wouldbefreetoprovidethepresumablymoreefcientdef\u00adinitionofany.Aclevercompilermightevenautomatically \nderiveitusingdeforestation[32].Thesecondkindofreply appealedtothefolkloreofcall-by-need:thelistisonlyan \nintermediatedatastructuresandthetwodefnitionshave thesameasymptoticspacebehaviour.Thefollowingresult \nconfrmsthefolklore. 0 Proposition6.2.;`anypxs CB anypxs \u00a3 as repeat=Ax:letfys=repeatxginx:ys: Usingfxed-pointinductionwewillproveastrongimprove\u00admentpropertyfromwhichthedesiredweakimprovement \nfollowsdirectly. Proposition6.1. where;containsthedefnitionsofanyandany 0(andthe defnitionsoftheotherfunctionstheyrelyon). \nTherelevanceoftheresultistwofold.Firstly,thedefnition intheHaskellreportisatmostaconstantfactorworsethan \nthedirectrecursivedefnitionsoitservesperfectlywellas areferenceimplementationwithrespecttospaceuse.Sec\u00adondly,acompilerwhichreplacesthelatterdefnitionwith \n B ; `letfxs = repeat xg inMlet fxs =x : xsg inM 4 HaskellmailinglistinJanuary2001(www.haskell.org). \ntheformerdoesn'trisktointroduceaspaceleakinsome weirdcase.Thismightseemobviousatfrstthoughtbut havingworkedwithspaceimprovementforawhilewehave \nlearnttonotjumptosuchconclusions. LetussketchtheproofofProposition6.2.Asyouwould expecttheproofisviaastrongimprovement.Howeverthe \nproofisconsiderablymoreinvolvedthanourpreviousex\u00adamplebecausewecannotshowthestrongimprovement 0 ;`anypxs \nCB anypxs ; weightcanmakeanyuseupatmostaconstantfactormore becauseanyandany 0 usediferentamountsofspace{al-a \nstackthanany. thoughthediferenceiswithinaconstantfactor.Thesolu- Theotherinterestingmodifcationisthedummybinding \ntionistointroducealternativedefnitionsofanyandany 0 ofzinthecons-branchofanya.Thedummybindinglives whichwewillcallanyaandanya0 \nrespectivelysuchthat untilbisevaluatedoruntilbbecomesgarbage.Wegetthis 00 Therearetwointerestingmodifcations.Thefrstoneis \ntheextraweightonthecaseexpression,whichcompensates fortheextrastackspaceusedbyany 0;forany 0toscruti\u00adnisetheheadofitsinputxsitcallsorwiththeargument \nmappxsandorpassestheargumenttofoldr.Then,foldr pushesastack-frameandforcesthecomputationofitsinput mappxs.Inturn,mappushesastack-frameandforcesthe \ncomputationofxs.Thustwostack-frameshavebeenpushed ontothestack.Theextra weightonthecaseinanyamim\u00ad icsthisbehaviour.FromLemma5.4weknowthattheextra \n;` CBCB pxs:efectbecauseofthedummyreferencetozintherighthand anypxs a CB ; anypxs a anypxs any \u00a3\u00a3 Tocomeupwiththedefnitionsofanyandany \n0isnon aa trivialandrequiressomecreativityand/orhardwork.Our experiencehasledustothefollowingmethodology:We \nmodifytheoriginaldefnitionsinawaysuchthat themodifeddefnitionsareweaklyequivalenttothe originaldefnitions,and \n wecanshowitjustusingthelawsofweakimprovement withouttheneedoffxed-pointinduction.  Themodifcationsareoftwokinds: \nFirst,whereveritcanbejustifed,weputinzeroweights onshort-livedstructuressuchasargumentstoknown sideofthedefnitionofb.Thedummybindingisthereto \nmimicthespaceusedupbythelistmappxswhichany 0 constructs.Itisworthnotingthatalthoughthelistisan intermediatedatastructureitisnotnecessarilyshort-lived. \nItwillstayinmemoryduringtheevaluationofpywhichcan bearbitrarilylongandwhichmayevencallany 0itself.But \ntheextrastructurecannotchangetheasymptoticspacebe\u00adhaviourbecausethereareotherstructuresintheheapwhich \nareatleastaslonglived.Thisisnoteasytoseefromthe defnitionofany 0butinthedefnitionofanyawecansee thatthedummybindingthatmimicsthestructurecannot \nlivelongerthanthebindingb(Lemma5.2).Withtheap\u00adpropriatedefnitionsofanyandany 0itisstraightforward aa \ntoshowthat 0 0 functions.Thisreducesthe\\noise\"fromthecompu\u00ad ;` tationsandissometimesnecessarytomakethedefni\u00ad \nanypxs CB \u00a3 anypxs a CB ; CB \u00a3 any pxs: anypxs a 0 tionsstronglyequivalent.ItalsovastlysimplifestheThecompletederivationof;`anyapxs \nCB ; anypxscan a proofofthestrongimprovementsinceiteliminateslots ofspikesthatwouldotherwiseclutterthederivations. \nSecond,moredifcultstep:wheneverthetwoorigi\u00adnaldefnitionshaveadiferentspacebehaviourmod\u00adulo\\noise\",welevelthemupbyaddingspikes,dummy \nbindingsandextraweights.Howeverwhenwedothis wehavetobecarefultonotincreasespaceusebymore thanaconstantfactor. \nLetusreturntoourexample.Inthefrststepweaddzero weightonallapplicationsofknownfunctions.Wemake thesemodifcationsalsotofoldr,mapandorwhichare \nbefoundin[9].Theplethoraofspikes,dummyreferences, dummybindingsandweightsthatarenecessaryinthiskind ofderivationmaketheprocessofconstructingderivations \nextremelyerrorprone.Wefounditnecessarytodevelopa simpletooltoformallycheckderivations,andthestepsof thederivationinthiscasestudyhavebeenverifedinthis \nway.  Case Study 3: Trading Stack for Heap Thiscasestudyisabouttheassociativityofappend,(+ ). Itisinterestingbecauseitisanexampleofatransformation \nthatcanincreaseheapusagewithmorethanaconstant factorsoitfallsoutsideof CB \u00a3 .Howeverthetransformation \n0 calledby any . Thesecondstepistoadddummyspace usetoanytomakeittakeupasmuchspaceasany 0 .Re\u00adcallthedefnitionofany,herespelledoutwithoutsyntactic \nsugar: any=Ap:Axs:casexsof nil.false y:ys.leta=py b=anypys in(jj)ab Wemodifythedefnitionasfollows. anya \n=Ap:Axs:f2 casexsof nil.gfalse canonlyleadtoaconstantfactordiferenceinthetotal amountofspaceused.Thereasonisthatinallcaseswhere \ntheamountofheapincreases,acorrespondingamountof stackspaceisusedalready. Tomakethisclaimprecisewedefnearelaxedversionof \nBwhichallowsstackspacetobetradedforheapspace: \u00a3, Definition6.1(StackWeakImprovement). WesaythatMisstackweaklyimprovedbyN,written \nI MN,ifthereexistsalinearfunctionf2N!Nsuch \u00a3 thatforallC,asuchthatC[Ma]andC[Na]areclosed, C[Ma]+(h s) \n=)C[Na]+(h0 s0) y:ys.gletz=n forsomeh0ands 0suchthats 0:f(s)andh0+s 0:f(h+s). a=p.y Wecannowstateanimprovementpropertyofappend: \nb= fzg(anya.p.ys) + xs Notethattherelaxedrelationisonlyrequiredinonedirec-ToshowProposition6.3itremainstoshowthat \ntion.Butitisthedirectionthatonemostoftenwouldlike tousewhenapplyingthisequivalence{itcanleadtoan;`(xs+ \nys)+ zs asymptoticspeedupinsomecontexts.Wewillseesuch an \u00a3 letfps=(+ a).xs.ysgin(+ b) . as . zs: examplelater. \nThe difcultyliesinthedummybindinginthedefnitionofNowletusoutlinetheproofofProposition6.3.Wewill followthemethodologyfromthepreviousexampleandcome \nupwithmodifedversionsofappendforwhichwecanes\u00adtablishastrongimprovement.Wewillneedfourdiferent versions,oneforeachoccurrenceofappend,whichwecall \n+ a,:::,+ d.Thestrongimprovementpartoftheproposi\u00adtionturnsouttobevaluableinitsownright(seecasestudy 4)sowespellitouthere. \nLemma6.4. + a.Recallthatthelifetimeofthedummybindingprecisely matchesthelifetimeofthestackframepushedbythecase. \nSuchabindingcanatmostdoublethetotalamountofspace use{henceitiswithinaconstantfactorasstatedbythis lemma. \nLemma6.5. caseMoffpati.Nig CI letfz=ngincaseMoffpati. fzgNig,zfresh, \u00a3 ;`letfps=(+ ).xs.ysgin(+ b).ps.zs \n aThis completestheproofsketchofProposition6.3. CB ; letfqs=(+ d).ys.zsgin(+ c).xs.qsInthebeginningofthissectionwemadeanotherclaim \nWehavestatedthelemmawithoutsyntacticsugar.Wehave foundthatthisisoftenthefrststeptowardsanintuition aboutspaceuse.Indeed,itisnowexplicitthattheterms \nallocatespaceintheheapbeforetheycalltheappendfunc\u00adtion.Howlonglivedarethesebindings?Clearly,thebinding \nforpsinthelefthandsideoftheimprovementisveryshort lived:+ bimmediatelyevaluatesitsfrstargumentandthen \nthereisnoremainingreferencestops.Howeverintheright handsidethebindingforqsmayliveforalongtime.To compensateforthisandmakethestrongimprovementhold \nwehaveaddedadummyallocationinthedefnitionof+ a: (+ a)=Aas:Abs:letz=n incaseasof fzgf nil.bs c:cs. fzgletds=(+ \na).cs.bs inc:ds Thedummybindingisallocatedjustbeforethecaseex\u00adpressionisexecuted,andlivesuntiljustafterabranchhas \nbeenselected.Thusthelifetimeofthebindingmatchesthe lifetimeofthestackframepushedforthecaseexpression. \nThebindingexactlycompensatesforthediferentheapbe\u00adhavioursoftheoriginalfunctions.Thereisalsoadiference \ninstackusagebetween(xs+ ys)+ zsandxs+ (ys+ zs). Thisdiferenceisofasimilarnaturetothediferencebe\u00adtweenanyandany \n0fromourpreviouscasestudy.Weneed toputanextraweightonthecasein+ : c (+ c) = Aas:Abs: 2 caseasof nil.bs \nc:cs.letds= ( + c).cs.bs inc:ds For+ band+ dthemodifcationsareminorandonlyin\u00advolvezeroweightsonshortlivedstackelements.Withthese \ndefnitionsathanditisnotdifculttoshowLemma6.4al\u00adthoughthederivationsarelengthy. Itiseasytoseethatthemodifcationsin+ \ncand+ dare withinaconstantfactoroftheoriginaldefnitionofappend (Lemma5.4etc.),sowehave ;`letfqs=(+ d).ys.zsgin(+ \nc).xs.qs whichpartlymotivatedtheintroductionofanewrelation, namelythatthetransformationcanleadtoanasymptotic \nincreaseinheapusage.Thefollowingfamilyofcontexts,in\u00ad dexedbykshowsthat;`(xs+ ys)+ zs 7 xs+ (ys+ zs) \u00a3 \nbyexhibitingadiferenceinheapbehaviourwhichgrows withk. letgkyszs=ifk=0 thennil elseletfxs=g(k;1)yszsgin[.] \ningknilnil  Case Study 4: Tail Recursion Thiscasestudyisabouttailrecursion{atransformation verymuchaimedatimprovementinspacebehaviour.But \ntailrecursivetransformationsmayalsoimprovetimecom\u00adplexityandthiscasestudyisaboutsuchanexample.Con\u00adsiderthenaivedefnitionofafunctionthatreversesalist: \nreversexs=casexsof nil.nil y:ys.reverseys++[y] Thefunctionusesupstackproportionaltothelengthof thelistanditalsosufersfromaquadratictimecomplex\u00adityduetotherepeatedapplicationsofappend.Thecureis \nwell-known:transformthefunctiontoatailrecursiveaccu\u00admulatingparameterdefnition: reverse 0 xs=rev[]xs \nrevasxs=casexsof nil.nil y:ys.rev(y:as)ys Thetailrecursivereverse 0hasalineartimecomplexityand thefollowingresultconfrmsourhopesaboutitsspaceuse. \nProposition6.6.;`reversexsBreverse 0 xs \u00a3 Wewillnotgointoanydetailsabouttheproofofthis propositionbutcommentononeaspectoftheproof.In \naproofofcontextualequivalenceofthetwodefnitionsit ishelpfultofallbackonaresultabouttheassociativity ofappend.Proposition6.3providessucharesultofweak \nimprovementbutitisuselessforourproofofProposition6.6 because CB xs+ (ys+ zs): mattersbecauseLemma6.4referstofourdiferent\\gadget\u00adversions\"+ \na:::+ dofappend.Thisillustratesageneral problem:whenworkingwithstrongimprovementwecannot relyonweakimprovementresults. \n Case Study 5: Strict Accumulating Parameters Thiscasestudyisaboutanexamplewhereatailrecursion transformationalonedoesnotsolvetheproblembutwhere \nwealsoneedatransformationstepguidedbystrictnessin\u00adformation. Considerthenaivedefnitionofsum. sumxs=casexsof \nnil.0 y:ys.y+sumys Thedefnitionsufersfromthesameproblemasthenaive defnitionofreverse{itrequiresstackproportionaltothe \nlengthoftheinputlist.Atfrstitmayappearthataplain tailrecursiontransformationwoulddothejob: 0 sumxs=asum0xs \nasumaxs=casexsof nil.a y:ys.leta 0 =a+y inasuma 0 ys Butsum 0stillusesstackproportionaltothelengthofits \nargument:Becauseoflazyevaluation,theevaluationofa+ y,intherecursivecallofasum,isdelayeduntilrequired.As \naresultachainofclosuresrepresentingthesumbuildsup intheheapandwhenthecomputationisforcedittakesup stackproportionaltothelengthoftheinputlist.Thenext \ntransformationstephingesonthefactthatasumisstrict intheaccumulatingparameterandforcestheaccumulator tobecomputedineachstepoftherecursion: \n00 0 sumxs=asum0xs 0 asumaxs=casexsof nil.a y:ys.leta 0 =a+y inseqa 0(asum 0 a 0 ys) Thisisthekindoftransformationthatacomplierwitha \nstrictnessanalysertypicallyperforms.Butstrictnesstrans\u00adformationsingeneralaredangerousfromthepointofviewof \nspaceusebecausetheymaychangeevaluationorder.Con\u00adsider,forexamplethestrictfunctionAy:Ax:x+y.Acom\u00adpilerwithstrictnessanalysismightwellchangetheorderof \ntheevaluationofthearguments,andfromtheexamplein theintroductionitshouldbeclearwhythisisnotaspace improvement. \nIndeed,ithappensinthiscasealso:asumwilltraversethe entirespineofitsinputbeforeevaluatinganyofitselements, \n0 butasumwillevaluatetheelementsasittraversesthelist. Thefollowingfamilyofcontexts(indexedbyk)exploresthe \n0 7 diferenceinevaluationordertoshowthat;`sumxs \u00a3 sumxs: letfa=nil ys=fromto1k xs=(traverseys):(fys) \nin[.] wheretraverseisafunctionthattraversesalistandreturns 0. Itseemsthatanytransformationwhichchangestheevalu\u00adationorderofargumentsorfreevariables(ortheirsubstruc\u00adtures)canneverbeaspaceimprovement.Atthispointit \nseemsthatallislost.However,itisstillpossibletouse strictnesstransformationsasapartofatransformationif \nitiscombinedwithanothertransformationstepwhichin\u00advertsthechangemadebythestrictnessphase.Thisisex\u00adactlywhathappensinthiscasestudy!Thetransformation \nfromsumtosum 0thatintroducedtheaccumulatingpa\u00adrameteralsochangestheevaluationorder:sumevaluates theelementsofitsinputasittraversesthelistbutsum \n0 traversestheentirespineofthelistfrst.Asaresultthis individualtransformationstepisnotspacesafeeither,i.e., \n;`sumxs 7 sum 0 xs,whichcanbeshownbyafamily \u00a3 ofcontextssimilarinspirittotheoneabove.Buttaken togetherthetransformationsasawholedonotchangeeval\u00aduationorderandmoreovercanbeshowntobespacesafe: \nProposition6.7.;`sumxsIsum 00 xs \u00a3 Theproofisalongthelinesofthepreviousproofswhere weaddgadgetstosumtoobtain: \nsumaxs=letz=n incasexsof fzg nil.0 y:ys.letw=n 3gfzg3(yfwg in+suma.ys) Thecalculationstepsintheproof,(omittedinordertomake \nthepaperspace-safe),havealsobeenformallyverifed.Itis worthnotingthatwefounditveryusefulinthecourseof \ntheprooftoemployexplicitconstructsforboxingandun\u00adboxingofintegersinthelanguage.Thisallowstheproofand \ntherequiredbasiclawstobemorefne-grained.Theuseful\u00adnessoftheselanguageconstructswhenperformingprogram \ntransformationisalsonotedbyPeytonJones[12].  Case Study 6: Tupling Tuplingisthenameofasetofprogramtransformationsthat \nbringtogethercomputationsoverthesameinput[21,6].Tu\u00adplingtransformationscandramaticallyreducetheamount \nofspaceandtimerequired.Considerforexamplethenaive functiontocomputetheaveragevalueoftheelementsofa list: \naveragexs=sumxs/lengthxs: Thefunctionrequireslinearspaceevenifsumandlength arespace-efcienttailrecursivefunctions.Thereasonis \nthat(assuming/evaluatesfromlefttoright)whilesum traverses(thelazilyproduced)inputlist,thecalltolength \nholdsontoareferencetothestartofthelistsotheentirelist willbelive.Anotherexamplewhichsufersfromthesame \nproblemisthenaivedefnitionofthefunctionsplitwhich splitsalistofcharactersintotwolists,onecontainingthe \nfrstline,andonecontainingwhatremainsafterthefrst(if any)newlinecharacter: splitxs=(beforeNewlinexs,afterNewlinexs) \nwherebeforeNewlineandafterNewlinearedefnedinthe obviousway.Asolutiontothespaceproblemscouldbeto tuplethecomputations,i.e.,tosimultaneouslycomputethe \nfrstlineandtheremainderbyasingletraversaloftheinput nil.(nil,nil) y:ys.ify=newline ; letf(x,y)=MginC[x][y]ifp62FV(M,C) \n then(nil,ys) Thelemmasaysthatitisalwaysspacesafetousepattern elseletp=split0 ysbindingsinsteadofprojections.Sowhataboutsplitand \nin(y:(fstp),sndp)split00?Convincedthat Notethatsplit0 ,incontrasttosplit,isstrict.However,this ;`letf(x,y)=splitxsginM \ndefnitiondoesn'tsolvetheproblem.Thereasonistheuse f(x,y)=split00 xsginM \u00a3let oftheprojectionsfstpandsndp.Duetolazyevaluation, \ntheprojectionsarenotevaluateduntilneededandthereforewespentconsiderableefort B tryingtoproveitonlytorealise \nholdontothereferencetop,whichinturnholdsonto boththeresultsoftherecursivecall.Asaresult,wehave combinednotonlythecomputationsbutalsothelifetimes \nofthetworesults. Intriguingly,thisproblemappearstobelinkedtothein\u00adtensionalexpressivenessofthelanguage.Hugheshasargued \nthatitisimpossibletodefnesplitinaspaceefcientway usingaparticularlazyevaluator[11].Heproposedasolu\u00adtioninvolvingcombinatorsforexplicitparallelismandsyn\u00adchronisation.Withtheselanguageprimitivestheoriginal \ndefnitionofsplitcanbemadeefcientbyhavingjustthe rightdegreeofparallelism.Anotherproposal,duetoWadler \n[31],istosolvetheproblembyextendingthegarbagecol\u00adlector.Wheneverthegarbagecollectorencountersaterm oftheformfstpwherepisboundtoanevaluatedpair,it \nmayperformthereductionoftheprojection.Amorerecent proposalisduetoSparud[30].Heproposestotreatpattern \nbindingsinletexpressionsspecially.Apatternbindingina letexpressiontakestheform letfc~x=MginN: PriortoSparud'sproposal,thesekindofbindingswerethought \nofasmeresyntacticsugarandacompiler(e.g.[1])would typicallytranslateitintothefollowing letfp=M,x1=.c1p,:::,xn \n=.cnpginN whichreintroducesthe\\dangerous\"projections. Sparud'sproposalwastohavepatternbindingsasafrst \nclassconstructwhichtheevaluatortreatsinaspaceef\u00adcientmanner.WehaveadoptedSparud'sproposalbecause wethinkitisthemostnaturalandbecauseitleadstoarea\u00adsonablywellbehavedspacetheory.ImplementingWadler's \nproposalinourmodelofgarbagecollectionwoulddestroy manyofthenicepropertiesofourtheory.Forexample, beta-expansionwouldnolongerbespacesafe,becauseit \nmayresultintheeliminationofa\\garbagecollectorredex\". WehaveformalisedSparudsproposalasanextensionto ourlanguage.Thedetailscanbefoundin[9].Withpattern \nbindingsathandwecanrewritesplit0 asfollows. thatitisnotthecase.Thefamilyofcontextsthatdistin\u00adguishesthetwotermsissomewhatinvolvedsowefoundit \nbettertopresenttheintuitionaboutwhysplit00 xsinsome contextsmayusemorespacethansplitxs. Consideracontextwherethesecondcomponentofthe \npairisusedbeforethefrst,i.e.,aprogramwhichprocesses thesecondlineofitsinputbeforethefrst.Inthatcasethe \ntuplinghastheefectthatthespineofthelistrepresent\u00adingthefrstlineofinputisconstructedbeforeitisneeded (inourdefnitionofsplit00thisallocationishiddeninthe \nsyntacticsugar).Thisinitselfdoesnotleadtoanoncon\u00adstantfactorworseningifthespineoftheinputlistmaybe garbagecollected.Butwhatifitcan't?Consideraprogram \nwhichprocessesitssecondlineofinputrepeatedlyandse\u00adlectsthelinefromtheinputbyrepeatedlyapplyingsplit00 \ntotheinput.Supposealsothatitkeepsreferencestothe diferentcopiesofthefrstlinethatisconstructed.Such acontext,howeverunlikelyinpractice,wouldshowthat \n7 ;`splitxs\u00a3split00 xs. Thishasleadustothegeneralobservationthattupling ofcomputationswhichneedtoallocatespaceinorderto \nproducetheiroutputareunlikelytobespaceimprovements, althoughwehavenotbeenabletomakethisstatementmore \nprecise. Anotherobservation,atthispointmaybenotsurprising, isthattuplingtransformationswhichchangetheorderin \nwhichinputs(orthesubstructuresthereof)aretraversed areunlikelytobespaceimprovements.Thetuplingofthe sumandthelengthofalistisanexampleofthis.Ina \ncontextwherethelengthofthelistisneededbeforethe sum,theuntupleddefnitionwouldtraversethespineof thelistbeforeanyoftheelements,butthetupleddefni\u00adtionwouldforcethecomputationoftheelementsasittra\u00adversesthelist.Thesetwoobservationshavemadeusrather \npessimisticaboutshowingthattupledfunctionsimproveon theiruntupledcounterparts.However,incontextswhich \nareguaranteedtorequiretheresultofthetupledcomputa\u00adtioninaspecifcorderthesituationmaybediferent.For example,webelievethatforaverage \n0defnedusingatu\u00adpledcomputationofthesumandthelengthwewouldhave 00 of ; ` averagexs B \u00a3 0 average xs \nbecausethefunctions(dueto split xs=casexs nil.(nil,nil) theevaluationorderof/)requirethesumbeforethelength. \ny:ys.ify=newline then(nil,ys) 7. RELATED WORK AND CONCLUSIONS elselet(ps,qs)=split00 ys Improvementtheorywasfrstdevelopedinthecall-by\u00ad \nin(y:ps,qs) namesetting[26,25,27]forthepurposeofreasoningabout So,whatistherelationbetweenthediferentversionsofrunning-timesofprograms.MoranandSands[19]developed \nsplit?Letusstartwiththerelationbetweensplit0andsplit00 acall-by-needtime-improvementtheory,togetherwithava\u00ad \nsplit0 B Itfollows rietyofinductionprinciples.Thispresentwork,andits whichformalisespacesafetypropertiesoflocal(non-whole\u00adprogram)transformations.Moredetailsofthisworkcanbe \nfoundinthefrstauthor'sPhDthesis[9]. Otherrelatedworkincludesthedevelopmentof\\space\u00adaware\"operationalmodelsforcall-by-needlanguages[28, \n24,4,3],studiesofspace-safetypropertiesofglobaltrans\u00adformations[17,18]andoftherelativeefciencyofdiferent \nabstractmachines[5,7,2,18].Minamide[18]suggestsan alternativetoourdefnitionofimprovementbasedonaddi\u00adtiveconstantfactors.Itspropertiesarenotstudiedforany \nparticularlanguage,althoughwesuspectthatitwouldfail tosatisfythesyntacticcontinuityproperty,sowouldnot \nserveasanalternativetostrongimprovement. Areasforfurtherworkincludetheintroductionofcontext informationtothetheoryinordertorepresentconstraints \nonthewhole-programcontextwhichcanbeusedtohelp establishspaceimprovements.  8. REFERENCES [1]L.Augustsson.CompilingLazyFunctionalLanguages, \nPartII.PhDthesis,DepartmentofComputerScience, ChalmersUniversityofTechnology,November1987. [2]A.BakewellandC.Runciman.Amodelforcomparing \nthespaceusageoflazyevaluators.InProceedingsof PPDP'00,September2000. [3]A.BakewellandC.Runciman.Aspacesemanticsfor \ncorehaskell.InProceedingsoftheHaskellWorkshop, September2000. [4]Z.-E.-A.Benaissa,P.Lescanne,andK.H.Rose. \nModelingsharingandrecursionforweakreduction strategiesusingexplicitsubstitution.InProc. PLILP'96,volume1140ofLNCS,pages393{407. \nSpringer-Verlag,1996. [5]G.E.BlellochandJ.Greiner.Aprovablytimeand spaceefcientimplementationofnesl.InProc. \nICFP'96,pages213{225,1996. [6]W.-N.Chin.Towardsanautomatedtuplingstrategy. InProceedingsofPEPM'93,pages119{132, \nCopenhagen,Denmark,1993. [7]W.D.Clinger.Propertailrecursionandspace efciency.InProc.PLDI'98,1998. [8]A.D.GordonandA.M.Pitts,editors.HigherOrder \nOperationalTechniquesinSemantics.Cambridge UniversityPress,1998. [9]J.Gustavsson.Space-SafeTransformationsandUsage \nAnalysisforCall-by-NeedLanguages.PhDthesis, DepartmentofComputerScience,Chalmers UniversityofTechnologyandMay2001. \n[10]J.GustavssonandD.Sands.space-safetransformationsofInProceedingsofHOOTSIII,Elsevier,1999. [11]R.J.M.Hughes.TheDesign \nGooteborgUniversity, Afoundationfor call-by-needprograms. volume26ofENTCS. andImplementationof ProgrammingLanguages.PhDthesis,Programming \nResearchGroup,OxfordUniversity,July1983. [12]S.P.Jones.Compilinghaskellbyprogram transformation:areportfromthetrenches.In \nProceedingsofESOP'96,April1996. [13]S.P.JonesandJ.Hughes.Haskell98:Anon-strict, purelyfunctionallanguage.Availableat \nwww.haskell.org. [14]J.Launchbury.Anaturalsemanticsforlazy evaluation.InProc.POPL'93,pages144{154.ACM \nPress,Jan.1993. [15]I.A.Mason,S.F.Smith,andC.L.Talcott.From operationalsemanticstodomaintheory.Information \nandComputation,128(1):26{47,10July1996. [16]R.Milner.Fullyabstractmodelsofthetyped A-calculus.TheoreticalComputerScience,4:1{22, \n1977. [17]Y.Minamide.Space-proflingsemanticsofthe call-by-valuelambdacalculusandthecps transformation.InProceedingsofHOOTSIII, \nvolume26ofENTCS.Elsevier,1999. [18]Y.Minamide.Anewcriterionforsafeprogram transformations.InProceedingsofHOOTSIV, \nvolume41ofENTCS.Elsevier,2000. [19]A.MoranandD.Sands.Improvementinalazy context:Anoperationaltheoryforcall-by-need.In \nProc.POPL'99,pages43{56.ACMPress,Jan.1999. [20]G.MorrisettandR.Harper.Semanticsofmemory managementforpolymorphiclanguages.InGordon \nandPitts[8],pages175{226. [21]A.Pettorossi.Transformationofprogramsanduseof tuplingstrategy.InProceedingsInformatica77,Bled, \nYugoslavia.,pages1{6,1977. [22]S.PeytonJones,W.Partain,andA.Santos. Let-foating:movingbindingstogivefasterprograms. \nInProc.ICFP'96,pages1{12.ACMPress,May1996. [23]S.PeytonJonesandA.Santos.A transformation-basedoptimiserforHaskell.Scienceof \nComputerProgramming,32(1{3):3{47,1998. [24]K.H.Rose.OperationalReductionModelsfor FunctionalProgrammingLanguages.PhDthesis, \nDIKU,UniversityofCopenhagen,Denmark,Feb. 1996.availableasDIKUreport96/1. [25]D.Sands.Operationaltheoriesofimprovementin \nfunctionallanguages(extendedabstract).InProc. 1991GlasgowFunctionalProgrammingWorkshop, WorkshopsinComputingSeries,pages298{311. \nSpringer-Verlag,Aug.1991. [26]D.Sands.Anaolvetimeanalysisanditstheoryofcost equivalence.JournalofLogicandComputation, \n5(4):495{541,1995. [27]D.Sands.Totalcorrectnessbylocalimprovementin thetransformationoffunctionalprogram.ACM \nTOPLAS,18(2):175{234,Mar.1996. [28]P.Sestoft.Derivingalazyabstractmachine.Journal ofFunctionalProgramming,7(3):231{264,May1997. \n[29]S.F.Smith.Fromoperationaltodenotational semantics.InProceedingsofMFPS'92,LNCS,pages 54{76.SpringerVerlag,1992. \n[30]J.Sparud.FixingSomeSpaceLeakswithouta GarbageCollector.InProceedingsofFPCA'93,pages 117{122.ACMPress,June1993. \n[31]P.Wadler.FixingSomeSpaceLeakswithaGarbage Collector.SoftwarePracticeandExperience, September1987. \n[32]P.Wadler.Deforestation:Transformingprogramsto eliminatetrees.TheoreticalComputerScience, 73:231{248,1990. \n \n\t\t\t", "proc_id": "507635", "abstract": "Innocent-looking program transformations can easily change the space complexity of lazy functional programs. The theory of space improvement seeks to characterize those local program transformations which are guaranteed never to worsen asymptotic space complexity of any program. Previous work by the authors introduced the space improvement relation and showed that a number of simple local transformation laws are indeed space improvements. This paper seeks an answer to the following questions: is the improvement relation inhabited by interesting program transformations, and, if so, how might they be established? We show that the asymptotic space improvement relation is semantically badly behaved, but that the theory of strong space improvement possesses a fixed-point induction theorem which permits the derivation of improvement properties for recursive definitions. With the help of this tool we explore the landscape of space improvement by considering a range of classical program transformation.", "authors": [{"name": "J&#246;rgen Gustavsson", "author_profile_id": "81100078654", "affiliation": "Department of Computing Science, Chalmers University of Technology and G&#246;teborg University", "person_id": "PP31026135", "email_address": "", "orcid_id": ""}, {"name": "David Sands", "author_profile_id": "81100313762", "affiliation": "Department of Computing Science, Chalmers University of Technology and G&#246;teborg University", "person_id": "PP14114603", "email_address": "", "orcid_id": ""}], "doi_number": "10.1145/507635.507667", "year": "2001", "article_id": "507667", "conference": "ICFP", "title": "Possibilities and limitations of call-by-need space improvement", "url": "http://dl.acm.org/citation.cfm?id=507667"}